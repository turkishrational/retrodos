     1                                  ; ****************************************************************************
     2                                  ; MINIDOS.S (PCDOS 7.1 - MiniDOS 1.0 Kernel) - ERDOGAN TAN - 03/03/2025
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Modified from Retro DOS v5.0 'retrodos5.s' (17/07/2024) ((PCDOS 7.1 Kernel))
     5                                  ;
     6                                  ; Last Update: 24/03/2025
     7                                  ;
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	   ((nasm retrodos5.s -l retrodos5.txt -o PCDOS.SYS -Z error.txt))
    12                                  ; ---------------------------------------------------------------------------- 
    13                                  ; Included binary file: KERNEL.BIN (MiniDOS 1.0 - Kernel file) 
    14                                  ; ****************************************************************************
    15                                  
    16                                  ; 18/03/2025 - MiniDOS v1.0
    17                                  ; ----------------------------------------------------------------------------
    18                                  ; MiniDOS 1.0 'IBMBIO.COM' modifications:
    19                                  ; ---------------------------------------
    20                                  ; 1) "DOSDATA=" configuration removed
    21                                  ; 2) "SWITCHES=" configuration removed
    22                                  ; ---------------------------------------------------------------------------- 
    23                                  
    24                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    25                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    26                                  ; as below:
    27                                  ;
    28                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    29                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    30                                  ;
    31                                  ;    2) Labels, names, comments, explanations and structure definitions
    32                                  ;	about procedures and code details are almost entirely taken from
    33                                  ;	the original MSDOS 6.0 source code, except for the details that
    34                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    35                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    36                                  ;	the originality of the descriptions.)
    37                                  ;
    38                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    39                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    40                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    41                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    42                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    43                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    44                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    45                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    46                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    47                                  ;	than the original PCDOS/MSDOS. It does not include 
    48                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    49                                  ;	files are almost identical except their INIT codes.)
    50                                  ;
    51                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    52                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    53                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    54                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    55                                  		
    56                                  ; ----------------------------------------------------------------------------
    57                                  
    58                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    59                                  ;
    60                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    61                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    62                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    63                                  ;
    64                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    65                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    66                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    67                                  ; 		
    68                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    69                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    70                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    71                                  
    72                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    73                                  ;     (as included binary, 'IOSYS5.BIN') 
    74                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    75                                  ;						        (except MSLOAD code)
    76                                        
    77                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    78                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    79                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    80                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    81                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    82                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    83                                  
    84                                  ; ----------------------------------------------------------------------------
    85                                  
    86                                  ;=============================================================================
    87                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    88                                  ; by Erdogan Tan, 10/09/2018
    89                                  ;=============================================================================
    90                                  
    91                                  ; MSBIO (IO.SYS 6.0) source files:
    92                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    93                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    94                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    95                                  
    96                                  ;=============================================================================
    97                                  ; MSBIO
    98                                  ;=============================================================================
    99                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
   100                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
   101                                  ;msend,msbio,msbio;
   102                                  
   103                                  ;=============================================================================
   104                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
   105                                  ;=============================================================================
   106                                  
   107                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
   108                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
   109                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
   110                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
   111                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
   112                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
   113                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
   114                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
   115                                  
   116                                  ;(*) unfinished, draft, canceled (failed in 2019)
   117                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
   118                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
   119                                  
   120                                  ;Disassembly: (reverse engineering via IDA Pro Free)
   121                                  
   122                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
   123                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
   124                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
   125                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
   126                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
   127                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
   128                                  
   129                                  ;-----------------------------------------------------------------------------
   130                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
   131                                  ;-----------------------------------------------------------------------------
   132                                  
   133                                  SECTOR_SIZE     equ     0200h		; size of a sector
   134                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
   135                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
   136                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
   137                                  KEYBUF          equ     041Eh		; keyboard buffer data
   138                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
   139                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
   140                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
   141                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
   142                                  
   143                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
   144                                  ; The following structure defines the disk parameter table
   145                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   146                                  
   147                                  struc	DISK_PARMS
   148 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   149 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   150 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   151 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   152 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   153 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   154 00000006 ??                      .DISK_DTL:	  resb	1
   155 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   156 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   157 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   158 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   159                                  .size:
   160                                  endstruc
   161                                  
   162                                  ; 09/03/2019 - Retro DOS v4.0
   163                                  ; -------------------------------------------------------------------------
   164                                  ; MSEQU.INC, MSDOS 6.0, 1991
   165                                  
   166                                  ftoobig 	equ	80h
   167                                  fbig		equ	40h
   168                                  ; 12/09/2023
   169                                  fbigbig		equ	20h  ; Retro DOS 5.0 ; PCDOS 7.1 ; FAT32 FS flag
   170                                  romstatus	equ	1
   171                                  romread 	equ	2
   172                                  romwrite	equ	3
   173                                  romverify	equ	4
   174                                  romformat	equ	5
   175                                  
   176                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   177                                  ; -------------------------------------------------------------------------
   178                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   179                                  ;
   180                                  ;  BDS is the Bios Data Structure.
   181                                  ;
   182                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   183                                  ;  are linked together in a list with the pointer to the first BDS being
   184                                  ;  found in START_BDS. The BDS hold various values important to the disk
   185                                  ;  drive. For example there is a field for last time accesses. As actions
   186                                  ;  take place in the system the BDS are update to reflect the actions.
   187                                  ;  For example is there is a read to a disk the last access field for the
   188                                  ;  BDS for that drive is update to the current time.
   189                                  ;
   190                                  ; Values for various flags in BDS.flags.
   191                                  ;
   192                                  
   193                                  fnon_removable	    equ     01h 	;For non-removable media
   194                                  fchangeline	    equ     02h 	;If changeline supported on drive
   195                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   196                                  					; just return the fake one
   197                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   198                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   199                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   200                                  fchanged	    equ     40h 	;Indicates media changed
   201                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   202                                  fchanged_by_format  equ    100h		;Media changed by format
   203                                  ; MSDOS 6.0
   204                                  unformatted_media   equ    200h 	;Fixed disk only
   205                                  
   206                                  ;
   207                                  ; Various form factors to describe media
   208                                  ;
   209                                  
   210                                  ff48tpi 	    equ     0
   211                                  ff96tpi 	    equ     1
   212                                  ffSmall 	    equ     2
   213                                  ffHardFile	    equ     5
   214                                  ffOther 	    equ     7
   215                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   216                                  ff288		    equ     9	; 2.88 MB drive
   217                                  ; Retro DOS v4.0 feature only !
   218                                  ;ff144		    equ	   10	; 1.44 MB drive
   219                                  
   220                                  ; 12/09/2023
   221                                  ; Retro DOS v4 (MDOS 5.0-6.22) BDS structure
   222                                  ; -------------------------------------------------------------------------
   223                                  ; 100 bytes
   224                                   
   225                                  %if 0
   226                                  
   227                                  ; 26/05/2019
   228                                  
   229                                  struc	BDS	; BDS_Type
   230                                  .link:		resd 1		; Link to next BDS
   231                                  .drivenum:	resb 1		; Physical drive number
   232                                  .drivelet:	resb 1		; DOS drive number
   233                                  
   234                                  	;We want to embed a BPB declaration here, but we can't initialize
   235                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   236                                  	;of the BPB declaration.
   237                                  .BPB:	
   238                                  .bytespersec:	resw 1		; bytes per sectors ; def = 512
   239                                  .secperclus:	resb 1		; sectors per cluster
   240                                  .resectors:	resw 1		; reserved sectors
   241                                  .fats:		resb 1		; number of fats
   242                                  .direntries:	resw 1		; number of root directory entries
   243                                  .totalsecs16:	resw 1		; total sectors on medium
   244                                  .media:		resb 1		; media descriptor byte ; def = 0F8h
   245                                  .fatsecs: 	resw 1		; number of fat sectors
   246                                  .secpertrack:	resw 1		; sectors per track
   247                                  .heads:		resw 1		; number of heads
   248                                  ;.hiddensecs:	resw 1		; hidden sectors
   249                                  ; MSDOS 6.0
   250                                  .hiddensecs:	resd 1		; hidden sectors
   251                                  .totalsecs32:	resd 1		; big total sectors
   252                                  ;
   253                                  .fatsiz:	resb 1		; flags...
   254                                  .opcnt:		resw 1		; open ref. count
   255                                  ;.volid:	resb 12		; volume ID of medium
   256                                  .formfactor:	resb 1		; form factor index
   257                                  .flags:		resw 1		; various flags ; def: 0020h
   258                                  .cylinders:	resw 1		; number of cylinders
   259                                  ;
   260                                  .R_BPB:  			; recommended BPB
   261                                  .rbytespersec:	resw 1
   262                                  .rsecperclus:	resb 1
   263                                  .rresectors: 	resw 1
   264                                  .rfats:		resb 1
   265                                  .rdirentries:	resw 1
   266                                  .rtotalsecs16:	resw 1
   267                                  .rmedia: 	resb 1
   268                                  .rfatsecs:	resw 1
   269                                  .rsecpertrack: 	resw 1
   270                                  .rheads:	resw 1
   271                                  .rhidsecs: 	resd 1
   272                                  .rtotalsecs32: 	resd 1
   273                                  .rreserved:	resb 6		; not used (reserved)
   274                                  ;
   275                                  .track:		resb 1		; last track accessed on drive
   276                                  .bdsm_ismini:
   277                                  .tim_lo:	resw 1		; time of last access. keep
   278                                  .bdsm_hidden_trks:
   279                                  .tim_hi:	resw 1		; these contiguous.
   280                                  .volid:		resb 12		; volume id of medium
   281                                  	       ;db "NO NAME    ",0
   282                                  .vol_serial:	resd 1	; current volume serial number from boot record
   283                                  .filesys_id:	resb 9	; current file system id from boot record
   284                                  	       ;db "FAT12   ",0
   285                                  .size:	
   286                                  endstruc
   287                                  
   288                                  %endif
   289                                  
   290                                  ; 12/09/2023 - Retro DOS 5.0 - PCDOS 7.1 (FAT32 compatible) BDS structure
   291                                  ; -------------------------------------------------------------------------
   292                                  ; 150 bytes
   293                                  
   294                                  %if 1
   295                                  
   296                                  struc	BDS	; BDS_Type
   297 00000000 ????????                .link:		resd 1		; Link to next BDS
   298 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   299 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   300                                  
   301                                  	;We want to embed a BPB declaration here, but we can't initialize
   302                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   303                                  	;of the BPB declaration.
   304                                  .BPB:	
   305 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   306 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   307 00000009 ????                    .resectors:	resw 1		; reserved sectors
   308 0000000B ??                      .fats:		resb 1		; number of fats
   309 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   310 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   311 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   312 00000011 ????                    .fatsecs16: 	resw 1		; number of fat sectors
   313 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   314 00000015 ????                    .heads:		resw 1		; number of heads
   315 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors
   316 0000001B ????????                .totalsecs32:	resd 1		; big total sectors
   317                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0 -----------
   318 0000001F ????????                .fatsecs32:	resd 1		; BPB_FATSz32   ; FAT32 FAT size in sectors
   319 00000023 ????                    .extflags:	resw 1		; BPB_ExtFlags  ; FAT32 Extended Flags
   320 00000025 ????                    .fsver:		resw 1		; BPB_FSVer	; FAT32 volume version number
   321 00000027 ????????                .rootdirclust:	resd 1		; BPB_RootClus  ; FAT32 root dir's 1st clust num
   322 0000002B ????                    .fsinfo:	resw 1		; BPB_FSInfo	; FAT32 FSINFO sector number
   323 0000002D ????                    .bkbootsec:	resw 1		; BPB_BkBootSec ; FAT32 backup boot sector number
   324 0000002F <res Ch>                .reserved:	resb 12		; BPB_Reserved	; FAT32 reserved field = 0, 12 bytes
   325                                  ; -----------------------------------------------
   326 0000003B ??                      .fatsiz:	resb 1		; flags...
   327 0000003C ????                    .opcnt:		resw 1		; open ref. count
   328 0000003E ??                      .formfactor:	resb 1		; form factor index
   329 0000003F ????                    .flags:		resw 1		; various flags ; def: 0020h
   330 00000041 ????                    .cylinders:	resw 1		; number of cylinders
   331                                  ;
   332                                  .R_BPB:  			; recommended BPB
   333 00000043 ????                    .rbytespersec:	resw 1		
   334 00000045 ??                      .rsecperclus:	resb 1
   335 00000046 ????                    .rresectors: 	resw 1
   336 00000048 ??                      .rfats:		resb 1
   337 00000049 ????                    .rdirentries:	resw 1
   338 0000004B ????                    .rtotalsecs16:	resw 1
   339 0000004D ??                      .rmedia: 	resb 1
   340 0000004E ????                    .rfatsecs:	resw 1
   341 00000050 ????                    .rsecpertrack: 	resw 1
   342 00000052 ????                    .rheads:	resw 1
   343 00000054 ????????                .rhidsecs: 	resd 1
   344 00000058 ????????                .rtotalsecs32: 	resd 1
   345                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0
   346 0000005C ????????                .rfatsecs32:	resd 1		; 
   347 00000060 ????                    .rextflags:	resw 1		; 
   348 00000062 ????                    .rfsver:	resw 1		; 
   349 00000064 ????????                .rrootdirclust:	resd 1		; 
   350 00000068 ????                    .rfsinfo:	resw 1		; default/initial value = -1
   351 0000006A ????                    .rbkbootsec:	resw 1		; default/initial value = -1
   352 0000006C <res Ch>                .rreserved:	resb 12		; default value = 0
   353                                  ; -----------------------------------------------
   354                                  ;
   355 00000078 ??                      .track:		resb 1		; last track accessed on drive (def=-1)
   356                                  .bdsm_ismini:
   357 00000079 ????                    .tim_lo:	resw 1		; time of last access. keep
   358                                  .bdsm_hidden_trks:
   359 0000007B ????                    .tim_hi:	resw 1		; these contiguous.
   360 0000007D <res Ch>                .volid:		resb 12		; volume id of medium
   361                                  	       ;db "NO NAME    ",0
   362 00000089 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   363 0000008D <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   364                                  	       ;db "FAT12   ",0
   365                                  .size:
   366                                  endstruc
   367                                  
   368                                  %endif
   369                                  ; -------------------------------------------------------------------------
   370                                  
   371                                  ;The assembler will generate bad data for "size bds_volid",
   372                                  ;so we'll define an equate here.
   373                                  
   374                                  VOLID_SIZ	equ	12
   375                                  
   376                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   377                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   378                                  
   379                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   380                                  
   381                                  ; 29/12/2018
   382                                  ; Retro DOS v4.0
   383                                  ;
   384                                  ; MSDOS 6.0 - BOOTFORM.INC
   385                                  
   386                                  BOOT_SIZE	    EQU	 512
   387                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   388                                  
   389                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   390                                  
   391                                  struc EBPB ; EXT_BPB_INFO
   392 00000000 ????                    .BYTESPERSECTOR:    resw 1
   393 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   394 00000003 ????                    .RESERVEDSECTORS:   resw 1
   395 00000005 ??                      .NUMBEROFFATS:	    resb 1
   396 00000006 ????                    .ROOTENTRIES:	    resw 1
   397 00000008 ????                    .TOTALSECTORS:	    resw 1
   398 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   399 0000000B ????                    .SECTORSPERFAT:	    resw 1
   400 0000000D ????                    .SECTORSPERTRACK:   resw 1
   401 0000000F ????                    .HEADS:		    resw 1
   402 00000011 ????????                .HIDDENSECTORS:	    resd 1
   403 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   404                                  .size:
   405                                  endstruc
   406                                  
   407                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   408                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   409 00000000 ??????                  .JUMP:		resb 3
   410 00000003 ????????????????        .OEM:		resb 8
   411 0000000B <res 19h>               .BPB:		resb EBPB.size ; 25 bytes
   412 00000024 ??                      .PHYDRV:	resb 1
   413 00000025 ??                      .CURHD:		resb 1
   414 00000026 ??                      .SIG:		resb 1
   415 00000027 ????????                .SERIAL:	resd 1
   416 0000002B <res Bh>                .VOL_LABEL:	resb 11
   417 00000036 ????????????????        .SYSTEM_ID:	resb 8
   418                                  .size:
   419                                  endstruc
   420                                  
   421                                  ; 12/09/2023
   422                                  ; ----------------------------
   423                                  ; Retro DOS v5.0 (PCDOS 7.1) - FAT32 Boot Sector Parameters
   424                                  
   425                                  struc XBPB ; FAT32_BPB_INFO ; 12/09/2023
   426 00000000 ????                    .BYTESPERSECTOR:    resw 1
   427 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   428 00000003 ????                    .RESERVEDSECTORS:   resw 1
   429 00000005 ??                      .NUMBEROFFATS:	    resb 1
   430 00000006 ????                    .ROOTENTRIES:	    resw 1
   431 00000008 ????                    .TOTALSECTORS:	    resw 1
   432 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   433 0000000B ????                    .SECTORSPERFAT:	    resw 1
   434 0000000D ????                    .SECTORSPERTRACK:   resw 1
   435 0000000F ????                    .HEADS:		    resw 1
   436 00000011 ????????                .HIDDENSECTORS:	    resd 1
   437 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   438                                  ;............ FAT32 ......  + 28
   439 00000019 ????????                .FATSIZE32:	    resd 1
   440 0000001D ????                    .EXTFLAGS:	    resw 1
   441 0000001F ????                    .FSVER:		    resw 1
   442 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   443 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   444 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   445 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   446                                  .size:
   447                                  endstruc
   448                                  
   449                                  struc FAT32_EXT_BOOT ; FAT32_IBMBOOT_HEADER ; 12/09/2023
   450 00000000 ??????                  .JUMP:		resb 3
   451 00000003 ????????????????        .OEM:		resb 8
   452 0000000B <res 35h>               .BPB:		resb XBPB.size ; 53 bytes (25+28)
   453 00000040 ??                      .PHYDRV:	resb 1
   454 00000041 ??                      .CURHD:		resb 1
   455 00000042 ??                      .SIG:		resb 1
   456 00000043 ????????                .SERIAL:	resd 1
   457 00000047 <res Bh>                .VOL_LABEL:	resb 11
   458 00000052 ????????????????        .SYSTEM_ID:	resb 8
   459                                  .size:
   460                                  endstruc
   461                                  
   462                                  ; ----------------------------
   463                                  
   464                                  ; 23/03/2018
   465                                  
   466                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   467                                  STRUC SRHEAD
   468 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   469 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   470 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   471 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   472 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   473                                  .size:
   474                                  endstruc
   475                                  
   476                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   477                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   478                                  ;
   479                                  struc IOCTL_REQ
   480 00000000 <res Dh>                		resb SRHEAD.size	
   481                                  			    	;GENERIC IOCTL ADDITION.
   482 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   483 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   484 0000000F ????                    .REG_SI:	resw 1
   485 00000011 ????                    .REG_DI:	resw 1
   486 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   487                                  endstruc
   488                                  
   489                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   490                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   491                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   492                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   493                                  IOC_SC		EQU	3	; SCREEN CONTROL
   494                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   495                                  IOC_PC		EQU	5	; PRINTER CONTROL
   496                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   497                                  
   498                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   499                                  GEN_IOCTL_WRT_TRK   EQU   40H
   500                                  GEN_IOCTL_RD_TRK    EQU   60H
   501                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   502                                  
   503                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   504                                  ;.RC_COUNT:	resw 	1
   505                                  ;endstruc
   506                                  
   507                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   508                                  
   509                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   510                                  
   511                                  ;struc SYSDEV
   512                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   513                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   514                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   515                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   516                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   517                                  ; .size:
   518                                  ;endstruc
   519                                  
   520                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   521                                  
   522                                  ;
   523                                  ; ATTRIBUTE BIT MASKS
   524                                  ;
   525                                  ; CHARACTER DEVICES:
   526                                  ;
   527                                  ; BIT 15 -> MUST BE 1
   528                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   529                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   530                                  ;     12 -> UNUSED
   531                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   532                                  ;     10 -> MUST BE 0
   533                                  ;      9 -> MUST BE 0
   534                                  ;      8 -> UNUSED
   535                                  ;      7 -> UNUSED
   536                                  ;      6 -> UNUSED
   537                                  ;      5 -> UNUSED
   538                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   539                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   540                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   541                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   542                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   543                                  ;
   544                                  ; BLOCK DEVICES:
   545                                  ;
   546                                  ; BIT 15 -> MUST BE 0
   547                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   548                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   549                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   550                                  ;	    THE SAME PLACE.
   551                                  ;     12 -> UNUSED
   552                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   553                                  ;     10 -> MUST BE 0
   554                                  ;      9 -> MUST BE 0
   555                                  ;      8 -> UNUSED
   556                                  ;      7 -> UNUSED
   557                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   558                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   559                                  ;      5 -> UNUSED
   560                                  ;      4 -> UNUSED
   561                                  ;      3 -> UNUSED
   562                                  ;      2 -> UNUSED
   563                                  ;      1 -> UNUSED
   564                                  ;      0 -> UNUSED
   565                                  ;
   566                                  
   567                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   568                                  CHARDEV        EQU   8000H
   569                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   570                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   571                                  				    ;  COMP MEDIA.
   572                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   573                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   574                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   575                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   576                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   577                                  				    ;  ENTRY POINTS, 0 IF NOT
   578                                  
   579                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   580                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   581                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   582                                  				    ;  ITS CURRENT FORM.
   583                                  
   584                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   585                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   586                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   587                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   588                                  
   589                                  ; 18/03/2019 - Retro DOS v4.0
   590                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   591                                  
   592                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   593                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   594                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   595                                  				    ;GENERIC IOCTL CALLS.
   596                                  				    ;FOR CHARACTER DEVICES, THIS
   597                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   598                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   599                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   600                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   601                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   602                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   603                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   604                                  ; 23/07/2019 - Retro DOS v4.0
   605                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   606                                  
   607                                  ; 27/05/2018 - Retro DOS v3.0 
   608                                  ; [MSDOS 3.3, MSDISK.ASM]
   609                                  
   610                                  struc INT13FRAME
   611 00000000 ????                    .oldbp:	resw 1
   612 00000002 ????                    .oldax:	resw 1
   613 00000004 ????                    .oldbx:	resw 1
   614 00000006 ????                    .oldcx:	resw 1
   615 00000008 ????                    .olddx:	resw 1
   616 0000000A ????????                .olddd:	resd 1
   617 0000000E ????                    .oldf:	resw 1
   618                                  .size:
   619                                  endstruc
   620                                  
   621                                  ; 02/06/2018 - Retro DOS v3.0
   622                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   623                                  
   624                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   625 00000000 ????                    .bios_sd_leng:		resw 1				  
   626 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   627                                  .bios_sd_scnd_modelbyte: 
   628 00000003 ??                      			resb 1					  
   629 00000004 ??                      			resb 1					  
   630 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   631 00000006 ????????                			resb 4					  
   632                                  endstruc
   633                                  
   634                                  ;-----------------------------------------------------------------------------
   635                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   636                                  ;-----------------------------------------------------------------------------
   637                                  ; 11/03/2019 - Retro DOS v4.0
   638                                  
   639                                  ; 18/03/2019
   640                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   641                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   642                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   643                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   644                                  					  ; or system turns
   645                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   646                                  ; ............................................................................
   647                                  
   648                                  ;*** J.K.
   649                                  ;General Guide -
   650                                  ;Category Code:
   651                                  ; 0... .... DOS Defined
   652                                  ; 1... .... User defined
   653                                  ; .xxx xxxx Code
   654                                  
   655                                  ;Function Code:
   656                                  ; 0... .... Return error if unsupported
   657                                  ; 1... .... Ignore if unsupported
   658                                  ; .0.. .... Intercepted by DOS
   659                                  ; .1.. .... Passed to driver
   660                                  ; ..0. .... Sends data/commands to device
   661                                  ; ..1. .... Quries data/info from device
   662                                  ; ...x .... Subfunction
   663                                  ;
   664                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   665                                  ; function set.  It plays no critical role; some functions may contain both
   666                                  ; command and query elements. The convention is that such commands are
   667                                  ; defined as "sends data".
   668                                  
   669                                  ;*****************************;*
   670                                  ; BLOCK DRIVERS 	      ;*
   671                                  ;*****************************;*
   672                                  
   673                                  ; IOCTL SUB-FUNCTIONS
   674                                  IOCTL_GET_DEVICE_INFO	EQU	0
   675                                  IOCTL_SET_DEVICE_INFO	EQU	1
   676                                  IOCTL_READ_HANDLE	EQU	2
   677                                  IOCTL_WRITE_HANDLE	EQU	3
   678                                  IOCTL_READ_DRIVE	EQU	4
   679                                  IOCTL_WRITE_DRIVE	EQU	5
   680                                  IOCTL_GET_INPUT_STATUS	EQU	6
   681                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   682                                  IOCTL_CHANGEABLE?	EQU	8
   683                                  IOCTL_DeviceLocOrRem?	EQU	9
   684                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   685                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   686                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   687                                  GENERIC_IOCTL		EQU	0Dh   ;13
   688                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   689                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   690                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   691                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   692                                  
   693                                  ; GENERIC IOCTL SUB-FUNCTIONS
   694                                  RAWIO			EQU	8
   695                                  
   696                                  ; RAWIO SUB-FUNCTIONS
   697                                  GET_DEVICE_PARAMETERS	EQU	60H
   698                                  SET_DEVICE_PARAMETERS	EQU	40H
   699                                  READ_TRACK		EQU	61H
   700                                  WRITE_TRACK		EQU	41H
   701                                  VERIFY_TRACK		EQU	62H
   702                                  FORMAT_TRACK		EQU	42H
   703                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   704                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   705                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   706                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   707                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   708                                  
   709                                  
   710                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   711                                  BUILD_DEVICE_BPB	EQU	000000001B
   712                                  
   713                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   714                                  INSTALL_FAKE_BPB	EQU	000000001B
   715                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   716                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   717                                  
   718                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   719                                  STATUS_FOR_FORMAT	EQU	000000001B
   720                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   721                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   722                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   723                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   724                                  
   725                                  ; DEVICETYPE VALUES
   726                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   727                                  DEV_5INCH		EQU	0
   728                                  DEV_5INCH96TPI		EQU	1
   729                                  DEV_3INCH720KB		EQU	2
   730                                  DEV_8INCHSS		EQU	3
   731                                  DEV_8INCHDS		EQU	4
   732                                  DEV_HARDDISK		EQU	5
   733                                  DEV_OTHER		EQU	7
   734                                  ;DEV_3INCH1440KB	EQU	7
   735                                  DEV_3INCH2880KB		EQU	9
   736                                  ; Retro DOS v2.0 - 26/03/2018
   737                                  ;;DEV_TAPE		EQU	6
   738                                  ;;DEV_ERIMO		EQU	8
   739                                  ;DEV_3INCH2880KB	EQU	9
   740                                  DEV_3INCH1440KB		EQU	10
   741                                  
   742                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   743                                  					; CURRENTLY SUPPORT.
   744                                  MAX_DEV_TYPE		EQU	10
   745                                  
   746                                  struc A_SECTORTABLE
   747 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   748 00000002 ????                    .ST_SECTORSIZE:		resw	1
   749                                  .size:
   750                                  endstruc
   751                                  
   752                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
   753                                  
   754                                  ; MSDOS 6.0 - BPB.INC - 1991
   755                                  ; ####
   756                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   757                                  ;
   758                                  ;	The BPB contains information about the disk structure.  It dates
   759                                  ;	back to the earliest FAT systems and so FAT information is
   760                                  ;	intermingled with physical driver information.
   761                                  ;
   762                                  ;	A boot sector contains a BPB for its device; for other disks
   763                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   764                                  ;	information in the DPB.
   765                                  ;
   766                                  ;	The BDS structure contains a BPB within it.
   767                                  
   768                                  ; 01/01/2024
   769                                  %if 0
   770                                  
   771                                  struc A_BPB
   772                                  .BPB_BYTESPERSECTOR:	resw	1
   773                                  .BPB_SECTORSPERCLUSTER:	resb	1
   774                                  .BPB_RESERVEDSECTORS:	resw	1
   775                                  .BPB_NUMBEROFFATS:	resb	1
   776                                  .BPB_ROOTENTRIES: 	resw	1
   777                                  .BPB_TOTALSECTORS:	resw	1
   778                                  .BPB_MEDIADESCRIPTOR:	resb	1
   779                                  .BPB_SECTORSPERFAT:	resw	1
   780                                  .BPB_SECTORSPERTRACK:	resw	1
   781                                  .BPB_HEADS:		resw	1
   782                                  .BPB_HIDDENSECTORS:	resw	1
   783                                  			resw	1
   784                                  .BPB_BIGTOTALSECTORS:	resw	1
   785                                  			resw	1
   786                                  			resb	6	; NOTE:  many times these
   787                                  ;					; 	 6 bytes are omitted
   788                                  ;					;	 when BPB manipulations
   789                                  ;					;	 are performed!
   790                                  .size:
   791                                  endstruc
   792                                  
   793                                  %else
   794                                  
   795                                  ; 14/04/2024
   796                                  ; 01/01/2024 - Retro DOS v5.0
   797                                  
   798                                  struc A_BPB
   799 00000000 ????                    .BYTESPERSECTOR:    resw 1
   800 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   801 00000003 ????                    .RESERVEDSECTORS:   resw 1
   802 00000005 ??                      .NUMBEROFFATS:	    resb 1
   803 00000006 ????                    .ROOTENTRIES:	    resw 1
   804 00000008 ????                    .TOTALSECTORS:	    resw 1
   805 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   806 0000000B ????                    .SECTORSPERFAT:	    resw 1
   807 0000000D ????                    .SECTORSPERTRACK:   resw 1
   808 0000000F ????                    .HEADS:		    resw 1
   809 00000011 ????????                .HIDDENSECTORS:	    resd 1
   810 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   811                                  ;............ FAT32 ......  + 28
   812 00000019 ????????                .FATSIZE32:	    resd 1
   813 0000001D ????                    .EXTFLAGS:	    resw 1
   814 0000001F ????                    .FSVER:		    resw 1
   815 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   816 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   817 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   818 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   819                                  		; 14/04/2024
   820 00000035 ????????????            		    resb 6  ; A_BPB.size must be 59
   821                                  .size:
   822                                  endstruc
   823                                  
   824                                  %endif
   825                                  
   826                                  struc A_DEVICEPARAMETERS
   827 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   828 00000001 ??                      .DP_DEVICETYPE:		resb	1
   829 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   830 00000004 ????                    .DP_CYLINDERS:		resw	1
   831 00000006 ??                      .DP_MEDIATYPE:		resb	1
   832 00000007 <res 3Bh>               .DP_BPB:		resb	A_BPB.size
   833 00000042 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   834 00000044 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   835                                  endstruc
   836                                  
   837                                  struc A_TRACKREADWRITEPACKET
   838 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   839 00000001 ????                    .TRWP_HEAD:		resw	1
   840 00000003 ????                    .TRWP_CYLINDER:		resw	1
   841 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   842 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   843 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   844                                  endstruc
   845                                  
   846                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   847                                  struc A_FORMATPACKET
   848 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   849 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   850 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   851 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   852                                  endstruc
   853                                  
   854                                  struc A_VERIFYPACKET
   855 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   856 00000001 ????                    .VP_HEAD: 		resw	1
   857 00000003 ????                    .VP_CYLINDER:		resw	1
   858                                  endstruc
   859                                  
   860                                  struc A_MEDIA_ID_INFO
   861 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   862 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   863 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   864 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   865                                  endstruc
   866                                  
   867                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   868 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   869 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   870                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   871                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   872                                  
   873                                  
   874                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   875 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   876 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   877 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   878 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   879                                  endstruc
   880                                  
   881                                  ;********************************;*
   882                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   883                                  ;********************************;*
   884                                  
   885                                  ;RAWIO SUB-FUNCTIONS
   886                                  GET_RETRY_COUNT 	EQU	65H
   887                                  SET_RETRY_COUNT 	EQU	45H
   888                                  
   889                                  struc A_RETRYCOUNT
   890 00000000 ????                    .RC_COUNT:		resw 1
   891                                  endstruc
   892                                  
   893                                  ;********************************;*		;J.K. 4/29/86
   894                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   895                                  ;********************************;*		;J.K. 4/29/86
   896                                  ;
   897                                  ;SC_MODE_INFO	 struc
   898                                  ;SC_INFO_LENGTH 	 DW	 9
   899                                  ;SC_MODE		 DB	 0
   900                                  ;SC_COLORS		 DW	 0
   901                                  ;SC_WIDTH		 DW	 0
   902                                  ;SC_LENGTH		 DW	 0
   903                                  ;SC_MODE_INFO	 ends
   904                                  ;
   905                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   906                                  
   907                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   908                                  ;GET_SC_MODE		 EQU	 60h
   909                                  ;SET_SC_MODE		 EQU	 40h
   910                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   911                                  ;console devices. - J.K. 4/29/86
   912                                  ;Get_active_codepage	 equ	 6Ah
   913                                  ;Invoke_active_codepage  equ	 4Ah
   914                                  ;Start_designate_codepage equ	 4Ch
   915                                  ;End_designate_codepage  equ	 4Dh
   916                                  ;Get_list_of_designated_codepage equ 6Bh
   917                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   918                                  
   919                                  ;-----------------------------------------------------------------------------
   920                                  ; MULT.INC - MSDOS 6.0 - 1991
   921                                  ;-----------------------------------------------------------------------------
   922                                  ; 18/03/2019
   923                                  
   924                                  ; The current set of defined multiplex channels is (* means documented):
   925                                  ;
   926                                  ;   Channel(h)  Issuer          Receiver    Function
   927                                  ;      00       server          PSPRINT     print job control
   928                                  ;     *01       print/apps      PRINT       Queueing of files
   929                                  ;      02       BIOS            REDIR       signal open/close of printers
   930                                  ;
   931                                  ;      05       command         REDIR       obtain text of net int 24 message
   932                                  ;     *06       server/assign   ASSIGN      Install check
   933                                  ;
   934                                  ;      08       external driver IBMBIO      interface to internal routines
   935                                  ;
   936                                  ;      10       sharer/server   Sharer      install check
   937                                  ;      11       DOS/server      Redir       install check/redirection funcs
   938                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   939                                  ;      13       MSNET           MSNET       movement of NCBs
   940                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   941                                  ;                                           of alternative INT_13 drivers after
   942                                  ;                                           boot_up
   943                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   944                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   945                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   946                                  ;      16       WIN386          WIN386      Windows communications
   947                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   948                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   949                                  ;      19       Shell
   950                                  ;      1A       Ansi.sys
   951                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   952                                  ;
   953                                  ;      40h      OS/2
   954                                  ;      41h      Lanman
   955                                  ;      42h      Lanman
   956                                  ;      43h      Himem
   957                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   958                                  ;                               AL = 30h    reserved for Himem external A20 code
   959                                  ;      44h      Dosextender
   960                                  ;      45H      Windows profiler
   961                                  ;      46h      Windows/286 DOS extender
   962                                  ;      47h      Basic Compiler Vn. 7.0
   963                                  ;      48h      Doskey
   964                                  ;      49h      DOS 5.x install 
   965                                  ;      4Ah      Multi Purpose
   966                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   967                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   968                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   969                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   970                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   971                                  ;
   972                                  ;                multSmartdrv           10h
   973                                  ;                multMagicdrv           11h
   974                                  ;      4Bh      Task Switcher API
   975                                  ;
   976                                  ;      4Ch      APPS            APM             Advanced power management
   977                                  ;      4Dh      Kana Kanji Converter, MSKK
   978                                  ;
   979                                  ;      51h      ODI real mode support driver (for Chicago)
   980                                  ;
   981                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   982                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   983                                  ;
   984                                  ;      55h      COMMAND.COM
   985                                  ;                multCOMFIRST           0 - API to determine whether 1st
   986                                  ;                                           instance of command.com
   987                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   988                                  ;                                           instance of ROM COMMAND
   989                                  ;      56h      Sewell Development
   990                                  ;               INTERLNK
   991                                  ;
   992                                  ;      57h      Iomega Corp.
   993                                  ;
   994                                  ;      AB       Unspecified IBM use
   995                                  ;      AC       Graphics
   996                                  ;      AD       NLS (toronto)
   997                                  ;      AE
   998                                  ;      AF       Mode
   999                                  ;      B0       GRAFTABL        GRAFTABL
  1000                                  ;
  1001                                  ;      D7       Banyan VINES
  1002                                  
  1003                                  multMULT	  equ	4Ah
  1004                                  
  1005                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
  1006                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
  1007                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
  1008                                  multMULTTASKSHELL equ	5	; Shell/switcher API
  1009                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
  1010                                  
  1011                                  ;-----------------------------------------------------------------------------
  1012                                  ; WIN386.INC - MSDOS 6.0 - 1991
  1013                                  ;-----------------------------------------------------------------------------
  1014                                  ; 18/03/2019
  1015                                  
  1016                                  ; WIN386.INC
  1017                                  ;
  1018                                  ;  Symbols and structures relating to WIN386 support.
  1019                                  ;
  1020                                  ;  Used by files in both the DOS and the BIOS.
  1021                                  ;
  1022                                  ;  Created: 7-13-89 by MRW
  1023                                  ;
  1024                                  
  1025                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  1026                                  
  1027                                  MultWin386		equ     16h	; Int 2f multiplex number
  1028                                  
  1029                                  Win386_Init		equ	05h	; Win386 initialization
  1030                                  Win386_Exit		equ	06h	; Win386 exit
  1031                                  Win386_Devcall		equ	07h	; Win386 device call out
  1032                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  1033                                  
  1034                                  ; ============================================================================
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  ;
  1038                                  ; +-------------------------------------------------------------------------+
  1039                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
  1040                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
  1041                                  ; |			 Licensed to: Freeware version			    |
  1042                                  ; +-------------------------------------------------------------------------+
  1043                                  ;
  1044                                  ;-----------------------------------------------------------------------------
  1045                                  
  1046                                  ;		.386
  1047                                  ;		.model flat
  1048                                  
  1049                                  ; ============================================================================
  1050                                  
  1051                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1052                                  ; 10/12/2022
  1053                                  ; 09/12/2022
  1054                                  ; 21/10/2022
  1055                                  ; 19/10/2022
  1056                                  ; 17/10/2022, 18/10/2022
  1057                                  ; 15/10/2022, 16/10/2022
  1058                                  ; 03/10/2022
  1059                                  ; 02/10/2022
  1060                                  ; 01/10/2022 - Erdogan Tan
  1061                                  
  1062                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
  1063                                  
  1064                                  ;-----------------------------------------------------------------------------
  1065                                  ; Start of PC-DOS 7.1 IBMBIO.COM  (IO.SYS)
  1066                                  ;-----------------------------------------------------------------------------
  1067                                  
  1068                                  		; [ORG 0]		; segment 0x0070h
  1069                                  
  1070                                  ;=============================================================================
  1071                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  1072                                  ;=============================================================================
  1073                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  1074                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  1075                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  1076                                  
  1077                                  section .BIOSDATA vstart=0
  1078                                  
  1079                                  ;--- DOSBIOS data segment ----------------------------------------------------
  1080                                  ;-----------------------------------------------------------------------------
  1081                                  
  1082                                  ;Bios_Data segment
  1083                                  
  1084                                  BData_start:
  1085 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  1086                                  ; ----------------------------------------------------------------------------
  1087                                  
  1088 00000003 0000                    DosDataSg:	dw 0
  1089                                  
  1090                                  ; DOS's int 2f handler will exit via a jump through here.
  1091                                  ; This is how the BIOS hooks int2f
  1092                                  
  1093                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  1094                                  			
  1095 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  1096                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1097                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  1098                                  		;dw int_2f
  1099                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  1100 00000006 [2B16]                  		dw i2f_handler
  1101                                  bios_i2f_seg:	; 10/08/2023
  1102 00000008 0203                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  1103                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  1104                                  
  1105 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  1106                                  					; This is to maintain binary compatibility
  1107                                  					; with DISK based DOS 5.0
  1108                                  
  1109                                  ; This is a byte used for special key handling in the resident
  1110                                  ; console device driver. It must be here so that it can be included
  1111                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  1112                                  
  1113 0000000C 00                      altah:		db 0			; special key handling
  1114                                  			
  1115 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  1116 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  1117                                  
  1118                                  ; PTRSAV - pointer save
  1119                                  ;
  1120                                  ; This variable holds the pointer to the Request Header passed by a program
  1121                                  ; wishing to use a device driver. When the strategy routine is called it 
  1122                                  ; puts the address of the Request header in this variable and returns.
  1123                                  		
  1124 00000012 00000000                ptrsav:		dd 0			
  1125                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  1126 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  1127 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  1128 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  1129 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  1130 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  1131 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  1132                                  
  1133                                  ;-----------------------------------------------------------------------------
  1134                                  
  1135                                  res_dev_list:
  1136                                  
  1137                                  ; Device Header for the CON Device Driver
  1138                                  
  1139                                  CONHeader:				; HEADER FOR DEVICE "CON"
  1140 00000023 [3500]                  		dw auxdev2
  1141 00000025 7000                    		dw 70h	
  1142 00000027 1380                    word_727:	dw 8013h
  1143 00000029 [1506]                  		dw strategy
  1144 0000002B [2006]                  		dw con_entry
  1145 0000002D 434F4E2020202020        aCon:		db 'CON     '
  1146 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  1147 00000037 7000                    		dw 70h
  1148 00000039 0080                    		dw 8000h
  1149 0000003B [1506]                  		dw strategy
  1150 0000003D [4106]                  		dw aux0_entry
  1151 0000003F 4155582020202020        aAux:		db 'AUX     '
  1152 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  1153 00000049 7000                    		dw 70h
  1154 0000004B C0A0                    word_74B:	dw 0A0C0h
  1155 0000004D [1506]                  		dw strategy
  1156 0000004F [2506]                  		dw prn0_entry
  1157 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  1158 00000059 [6B00]                  timdev:		dw dskdev
  1159 0000005B 7000                    		dw 70h
  1160 0000005D 0880                    		dw 8008h
  1161 0000005F [1506]                  		dw strategy
  1162 00000061 [5906]                  		dw tim_entry
  1163 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  1164 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  1165 0000006D 7000                    		dw 70h
  1166                                  		;dw 8C2h
  1167                                  		; 02/10/2023 - Retro DOS v5.0
  1168 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  1169                                  		;dw offset strategy
  1170                                  		;dw offset dsk_entry
  1171                                  		; 19/10/2022
  1172 00000071 [1506]                  		dw strategy
  1173 00000073 [5E06]                  		dw dsk_entry
  1174                                  
  1175                                  ; maximum number of drives
  1176                                  
  1177 00000075 04                      drvmax:		db 4
  1178 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  1179 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  1180                                  					; 96tpi support		
  1181 00000078 00                      single:		db 0			; used to detect single drive systems
  1182 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  1183                                  					; used by console driver.
  1184 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  1185                                  					; drive. (examined by checksingle).
  1186                                  		
  1187 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  1188 0000007D 7000                    		dw 70h
  1189 0000007F 0080                    		dw 8000h
  1190 00000081 [1506]                  		dw strategy
  1191 00000083 [4106]                  		dw aux0_entry
  1192 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  1193 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  1194 0000008F 7000                    		dw 70h
  1195 00000091 C0A0                    		dw 0A0C0h
  1196 00000093 [1506]                  		dw strategy
  1197 00000095 [2C06]                  		dw prn1_entry
  1198 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1199 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  1200 000000A1 7000                    		dw 70h
  1201 000000A3 C0A0                    		dw 0A0C0h
  1202 000000A5 [1506]                  		dw strategy
  1203 000000A7 [3306]                  		dw prn2_entry
  1204 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1204 000000B2 0000               
  1205                                  
  1206                                  ;M058; Start of changes
  1207                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1208                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1209                                  ;cannot change for them to work. Even ProComm does this.
  1210                                  
  1211 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  1212                                  
  1213 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1214 000000BA 7000                    		dw 70h
  1215 000000BC C0A0                    		dw 0A0C0h
  1216 000000BE [1506]                  		dw strategy
  1217 000000C0 [3A06]                  		dw prn3_entry
  1218 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1219 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1220 000000CC 7000                    		dw 70h
  1221 000000CE 0080                    		dw 8000h
  1222 000000D0 [1506]                  		dw strategy
  1223 000000D2 [4706]                  		dw aux1_entry
  1224                                  		; 19/10/2022
  1225 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1226                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1227 000000DC [EE00]                  		dw com4dev
  1228 000000DE 7000                    		dw 70h
  1229 000000E0 0080                    		dw 8000h
  1230                                  		;dw offset strategy
  1231                                  		;dw offset aux2_entry
  1232 000000E2 [1506]                  		dw strategy
  1233 000000E4 [4D06]                  		dw aux2_entry	
  1234 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1235 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  1236 000000F0 7000                    		dw 70h
  1237 000000F2 0080                    		dw 8000h
  1238 000000F4 [1506]                  		dw strategy
  1239 000000F6 [5306]                  		dw aux3_entry
  1240 000000F8 434F4D3420202020        		db 'COM4    '
  1241                                  
  1242                                  ;-----------------------------------------------------------------------------
  1243                                  
  1244 00000100 10                      RomVectors:	db 10h			
  1245 00000101 00000000                Old10:		dd 0
  1246 00000105 13                      		db 13h
  1247 00000106 00000000                Old13:		dd 0			
  1248 0000010A 15                      		db 15h
  1249 0000010B 00000000                Old15:		dd 0			
  1250 0000010F 19                      		db 19h
  1251 00000110 00000000                Old19:		dd 0
  1252 00000114 1B                      		db 1Bh
  1253 00000115 00000000                Old1B:		dd 0
  1254                                  
  1255                                  ;EndRomVectors	equ $
  1256                                  
  1257                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1258                                  
  1259                                  ;-----------------------------------------------------------------------------
  1260                                  
  1261 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1262 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1263                                  
  1264                                  ; (MSDOS 3.3) NOTE:
  1265                                  ; Some floppy drives do not have changeline support. The result is a
  1266                                  ; large amount of inefficiency in the code. A media-check always returns
  1267                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1268                                  ; always discard any cached data.
  1269                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1270                                  ; The following three items are used to do this. The logical door latch is
  1271                                  ; based on the premise that it is not physically possible to change floppy
  1272                                  ; disks in a drive in under two seconds (most people take about 10). The
  1273                                  ; logical door latch is implemented by saving the time of the last successful
  1274                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1275                                  ; current time is compared to the saved time. If less than two seconds have
  1276                                  ; passed then the value "No Change" is returned. If more than two seconds
  1277                                  ; have passed the value "Don't Know" is returned.
  1278                                  ;    There is one complecation to this algorithm. Some programs change the
  1279                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1280                                  ; This possibility is detected by counting the number of disk operations
  1281                                  ; which occur without any time passing. If this count exceeds the value of
  1282                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1283                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1284                                  ; of disk operation which occur without the time changing.
  1285                                  
  1286 0000011D 00                      accesscount:	db 0			
  1287 0000011E FF                      tim_drv:	db 0FFh			
  1288 0000011F 00                      medbyt:		db 0
  1289                                  wrtverify:	; 15/10/2022			
  1290 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1291 00000121 00                      verify:		db 0			; 1 if verify after write
  1292 00000122 0000                    seccnt:		dw 0			
  1293 00000124 00                      		db 0			; -- pad where hardnum was
  1294 00000125 01                      dsktnum:	db 1			; number of diskette drives
  1295                                  
  1296                                  ; (MSDOS 3.3) NOTE:
  1297                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1298                                  ; have to be made to read the diskette. Consequently a large head settle
  1299                                  ; time was always used in the I/O operations. To get around this problem
  1300                                  ; we need to continually adjust the head settle time. The following
  1301                                  ; algorithm is used:
  1302                                  ;
  1303                                  ;   Get the current head settle value.
  1304                                  ;   If it is 1, then
  1305                                  ;	set slow = 15
  1306                                  ;   else
  1307                                  ;	set slow = value
  1308                                  ;   ...
  1309                                  ;   if we are seeking and writing then
  1310                                  ;	use slow
  1311                                  ;   else
  1312                                  ;	use fast
  1313                                  ;   ...
  1314                                  ;   restore current head settle value
  1315                                  
  1316 00000126 00                      motorstartup:	db 0			; value from table
  1317 00000127 00                      settlecurrent:	db 0			; value from table
  1318 00000128 00                      settleslow:	db 0			; slow settle value
  1319 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1320 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1321 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1322 0000012C 09                      eot:		db 9			
  1323 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1324 00000131 00                      cursec:		db 0			; current sector
  1325 00000132 00                      curhd:		db 0			; current head
  1326 00000133 0000                    curtrk:		dw 0			; current track
  1327 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1328 00000137 08                      formt_eot:	db 8			; eot used for format
  1329 00000138 00                      hdnum:		db 0			; head number
  1330 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1331 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1332                                  
  1333                                  ;-----------------------------------------------------------------------------
  1334                                  
  1335                                  ; disk errors returned from the IBM rom
  1336                                  
  1337 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  1338 0000013D 80                      		db 80h			; write fault (hard disk)
  1339 0000013E 40                      		db 40h			; seek failed
  1340 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  1341 00000140 08                      		db 8			; dma overrun
  1342 00000141 06                      		db 6			; disk changed (floppy)
  1343 00000142 04                      		db 4			; sector not found/read error
  1344 00000143 03                      		db 3			; disk write-protected
  1345                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  1346 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  1347 00000145 B2                      		db 0B2h			; volume not removable	
  1348                                  		;
  1349 00000146 00                      lsterr:		db 0			; all other errors
  1350                                  
  1351                                  ; returned error codes corresponding to above
  1352                                  
  1353 00000147 0A                      errout:		db 10			; write	fault error
  1354 00000148 02                      		db 2			; no response (timeout)
  1355 00000149 06                      		db 6			; seek failure
  1356 0000014A 04                      		db 4			; bad crc
  1357 0000014B 04                      		db 4			; dma overrun
  1358 0000014C 0F                      		db 15			; invalid media	change
  1359 0000014D 08                      		db 8			; sector not found
  1360 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  1361                                  		; 02/10/2023
  1362 0000014F 03                      		db 3			; unknown command error
  1363 00000150 03                      		db 3			; unknown command error
  1364                                  		;
  1365 00000151 0C                      		db 12			; general error
  1366                                  
  1367                                  ;-----------------------------------------------------------------------------
  1368                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  1369                                  
  1370                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1371                                  %if 1
  1372                                  disksector:	;times 174 db 0
  1373                                  NUM174 equ 512-$
  1374 00000152 00<rep AEh>             		times NUM174 db 0
  1375                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  1376 00000200 4A                      		dec	dx
  1377 00000201 42                      		inc	dx	
  1378 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  1379                                  
  1380 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  1380 0000020E 30312E323030332E62-
  1380 00000217 75696C645F312E3332-
  1380 00000220 23402049424D42494F-
  1380 00000229 2E434F4D2855534129-
  1380 00000232 00                 
  1381                                  		
  1382                                  		;times 287 db 0
  1383 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  1384                                  %endif
  1385                                  
  1386                                  ;-----------------------------------------------------------------------------
  1387                                  
  1388                                  ; 30/12/2018 - Retro DOS v4.0
  1389                                  
  1390                                  ; read in boot sector here, read done in readboot.
  1391                                  ; also read sector for dma check for hard disk.
  1392                                  ;
  1393                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1394                                  ; in them which causes the byte after the buffer to be trashed
  1395                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1396                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1397                                  ; makes that system more-or-less work.
  1398                                  
  1399                                  ; 02/10/2023
  1400                                  %if 0
  1401                                  
  1402                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1403                                  		; 19/10/2022
  1404                                  		times 512 db 0
  1405                                  %endif
  1406                                  
  1407                                  ;-----------------------------------------------------------------------------
  1408                                  
  1409                                  ; 02/10/2023 - Retro DOS v5.0
  1410                                  ; 30/12/2018 - Retro DOS v4.0
  1411                                  ;-----------------------------------------------------------------------------
  1412                                  ; 25/05/2018 (04/04/2018)
  1413                                  ;*****************************************************************************
  1414                                  ;	"bds" contains information for each drive in the system.
  1415                                  ;	various values are patched whenever actions are performed.
  1416                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1417                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1418                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1419                                  ;	that the parameters have not been set.
  1420                                  
  1421                                  bds1:		;dw offset bds2
  1422 00000352 [E803]                  		dw bds2	; 19/10/2022
  1423 00000354 7000                    		dw 70h			; dword	link to	next structure
  1424 00000356 00                      		db 0			; int 13h drive	number
  1425 00000357 00                      		db 0			; logical drive	letter
  1426 00000358 0002                    fdrive1:	dw 512			
  1427                                  					; physical sector size in bytes
  1428 0000035A FF                      		db 0FFh			; sectors/allocation unit
  1429 0000035B 0100                    		dw 1			; reserved sectors for dos
  1430 0000035D 02                      		db 2			; no of	file allocation	tables
  1431 0000035E 4000                    		dw 64			; number of root directory entries
  1432 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  1433 00000362 00                      		db 0			; media	descriptor, initially 0
  1434 00000363 0200                    		dw 2			; number of fat	sectors
  1435 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  1436 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  1437                                  		;
  1438                                  		; 02/10/2023
  1439                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  1440                                  		;dw 0			; hidden sector	count (low word)
  1441                                  		;dw 0			; hidden sector	(high)
  1442                                  		;dw 0			; number sectors (low)
  1443                                  		;dw 0			; number sectors (high)
  1444                                  		;db 0			; true => large	fats
  1445                                  		; 02/10/2023
  1446                                  		; PCDOS 7.1 (FAT32 support)
  1447 00000369 00000000                		dd 0			; hidden sector count
  1448 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  1449 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  1450                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  1451                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  1452                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  1453                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  1454 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  1455 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  1456 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  1457 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  1458 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  1459 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  1460 0000038D 00                      		db 0			; true => large	fats
  1461                                  		;
  1462 0000038E 0000                    		dw 0			; open ref. count
  1463 00000390 03                      		db 3			; form factor
  1464 00000391 2000                    		dw 20h			; various flags
  1465 00000393 2800                    		dw 40			; number of cylinders
  1466 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1467 00000397 01                      		db 1
  1468 00000398 0100                    		dw 1
  1469 0000039A 02                      		db 2
  1470 0000039B E000                    		dw 224			; number of root directory entries
  1471 0000039D 6801                    		dw 360
  1472 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1473 000003A0 0200                    		dw 2
  1474 000003A2 0900                    		dw 9
  1475 000003A4 0200                    		dw 2
  1476                                  		;
  1477                                  		; 02/10/2023
  1478                                  		;dw 0
  1479                                  		;dw 0
  1480                                  		;dw 0
  1481                                  		;dw 0
  1482                                  		;;db 6 dup(0)
  1483                                  		;times 6 db 0		; 19/10/2022
  1484 000003A6 00000000                		dd 0
  1485 000003AA 00000000                		dd 0
  1486 000003AE 00000000                		dd 0
  1487 000003B2 0000                    		dw 0
  1488 000003B4 0000                    		dw 0
  1489 000003B6 00000000                		dd 0
  1490 000003BA FFFF                    		dw 0FFFFh
  1491 000003BC FFFF                    		dw 0FFFFh	
  1492                                  		;db 12 dup(0)
  1493 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  1494                                  		;
  1495 000003CA FF                      		db 0FFh			; last track accessed on this drive
  1496 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1497 000003CD FFFF                    		dw 0FFFFh
  1498 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1498 000003D8 202000             
  1499 000003DB 00000000                		dd 0			; current volume serial	from boot record
  1500 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1501                                  ; ----
  1502                                  
  1503                                  ; 02/10/2023
  1504                                  ; PCDOS 7.1
  1505                                  %if 1
  1506                                  
  1507                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1508 000003E8 FFFF                    		dw 0FFFFh ; -1
  1509 000003EA 7000                    		dw 70h
  1510 000003EC 00                      		db 0
  1511 000003ED 00                      		db 0
  1512 000003EE 0002                    fdrive2:	dw 512
  1513 000003F0 FF                      		db 0FFh
  1514 000003F1 0100                    		dw 1
  1515 000003F3 02                      		db 2
  1516 000003F4 4000                    		dw 64
  1517 000003F6 6801                    		dw 360
  1518 000003F8 00                      		db 0
  1519 000003F9 0200                    		dw 2
  1520 000003FB 0900                    		dw 9
  1521 000003FD 0100                    		dw 1
  1522 000003FF 00000000<rep 5h>        		times 5 dd 0
  1523 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  1524 00000417 00000000<rep 3h>        		times 3 dd 0
  1525 00000423 00                      		db 0
  1526 00000424 0000                    		dw 0
  1527 00000426 03                      		db 3
  1528 00000427 2000                    		dw 20h
  1529 00000429 2800                    		dw 40
  1530                                  recbpb2:
  1531 0000042B 0002                    		dw 512
  1532 0000042D 01                                      db 1
  1533 0000042E 0100                                    dw 1
  1534 00000430 02                                      db 2
  1535 00000431 E000                                    dw 224
  1536 00000433 6801                                    dw 360
  1537 00000435 F0                                      db 0F0h
  1538 00000436 0200                                    dw 2
  1539 00000438 0900                                    dw 9
  1540 0000043A 0200                                    dw 2
  1541 0000043C 00000000<rep 5h>        		times 5 dd 0
  1542 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  1543 00000454 00000000<rep 3h>                        times 3 dd 0
  1544 00000460 FF                                      db 0FFh
  1545 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  1546 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  1546 0000046E 202000             
  1547 00000471 00000000                                dd 0
  1548 00000475 464154313220202000                      db 'FAT12   ',0
  1549                                  %endif
  1550                                  
  1551                                  ; ----
  1552                                  
  1553                                  ; 02/10/2023
  1554                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  1555                                  %if 0
  1556                                  
  1557                                  bds2:		dw bds3
  1558                                  		dw 70h
  1559                                  		db 0
  1560                                  		db 0
  1561                                  fdrive2:	dw 512			
  1562                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1563                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1564                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1565                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1566                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1567                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1568                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1569                                  
  1570                                  bds3:		dw bds4
  1571                                  		dw 70h
  1572                                  		db 0
  1573                                  		db 0
  1574                                  fdrive3:	dw 512			
  1575                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1576                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1577                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1578                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1579                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1580                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1581                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1582                                  ; ----
  1583                                  
  1584                                  bds4:		dw 0FFFFh
  1585                                  		dw 70h
  1586                                  		db 0
  1587                                  		db 0
  1588                                  fdrive4:	dw 512			
  1589                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1590                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1591                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1592                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1593                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1594                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1595                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1596                                  
  1597                                  ;-----------------------------------------------------------------------------
  1598                                  
  1599                                  sm92:		db 3			; .spf
  1600                                  		db 9			; .spt
  1601                                  		db 112	; 70h		; .cdire
  1602                                  		dw 1440	; 2*9*80	; .csec
  1603                                  		db 2			; .spau
  1604                                  		db 2			; .chead
  1605                                  
  1606                                  %endif
  1607                                  
  1608 0000047E 00                      keyrd_func:	db 0			
  1609 0000047F 01                      keysts_func:	db 1			
  1610 00000480 00                      printdev:	db 0			; printer device index
  1611                                  
  1612                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1613 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1614                                  
  1615 00000489 0000                    daycnt:		dw 0			
  1616 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  1617 0000048C 00                      havecmosclock:	db 0			
  1618 0000048D 13                      base_century:	db 19			
  1619 0000048E 50                      base_year:	db 80			
  1620                                  
  1621 0000048F 1F                      month_tab:	db 31
  1622 00000490 1C                      february:	db 28 ; 08/08/2023
  1623 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1623 0000049A 1F                 
  1624                                  
  1625                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1626                                  %if 0  
  1627                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1628                                  		dw 70h ; 17/10/2022	
  1629                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1630                                  		dw 70h ; 17/10/2022
  1631                                  %endif
  1632                                  
  1633 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  1634                                  
  1635                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1636                                  ;fat_12_id:	db 'FAT12   ',0         
  1637                                  ;fat_16_id:	db 'FAT16   ',0         
  1638                                  ;vol_no_name:	db 'NO NAME    ',0      
  1639                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  1640                                  
  1641 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  1642 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  1643 000004A0 0000                    multrk_flag:	dw 0			
  1644 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1645 000004A3 0000                    vretry_cnt:	dw 0			
  1646 000004A5 0000                    soft_ecc_cnt:	dw 0			
  1647 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1648 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1649                                  
  1650                                  ; variables for msdioctl.asm module
  1651                                  
  1652                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1653                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1654                                  ;	n	bytes per sector
  1655                                  ;      ---	----------------
  1656                                  ;	0	      128
  1657                                  ;	1	      256
  1658                                  ;	2	      512
  1659                                  ;	3	     1024
  1660                                  
  1661                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1662                                  ;					; we support (was 40 in dos 3.2)
  1663                                  
  1664 000004AA 2400                    sectorspertrack: dw 36
  1665 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  1666 000004B0 00000202                		db 0, 0, 2, 2
  1667 000004B4 00000302                		db 0, 0, 3, 2
  1668 000004B8 00000402                		db 0, 0, 4, 2
  1669 000004BC 00000502                		db 0, 0, 5, 2
  1670 000004C0 00000602                		db 0, 0, 6, 2
  1671 000004C4 00000702                		db 0, 0, 7, 2
  1672 000004C8 00000802                		db 0, 0, 8, 2
  1673 000004CC 00000902                		db 0, 0, 9, 2
  1674 000004D0 00000A02                		db 0, 0, 10, 2
  1675 000004D4 00000B02                		db 0, 0, 11, 2
  1676 000004D8 00000C02                		db 0, 0, 12, 2
  1677 000004DC 00000D02                		db 0, 0, 13, 2
  1678 000004E0 00000E02                		db 0, 0, 14, 2
  1679 000004E4 00000F02                		db 0, 0, 15, 2
  1680 000004E8 00001002                		db 0, 0, 16, 2
  1681 000004EC 00001102                		db 0, 0, 17, 2
  1682 000004F0 00001202                		db 0, 0, 18, 2
  1683 000004F4 00001302                		db 0, 0, 19, 2
  1684 000004F8 00001402                		db 0, 0, 20, 2
  1685 000004FC 00001502                		db 0, 0, 21, 2
  1686 00000500 00001602                		db 0, 0, 22, 2
  1687 00000504 00001702                		db 0, 0, 23, 2
  1688 00000508 00001802                		db 0, 0, 24, 2
  1689 0000050C 00001902                		db 0, 0, 25, 2
  1690 00000510 00001A02                		db 0, 0, 26, 2
  1691 00000514 00001B02                		db 0, 0, 27, 2
  1692 00000518 00001C02                		db 0, 0, 28, 2
  1693 0000051C 00001D02                		db 0, 0, 29, 2
  1694 00000520 00001E02                		db 0, 0, 30, 2
  1695 00000524 00001F02                		db 0, 0, 31, 2
  1696 00000528 00002002                		db 0, 0, 32, 2
  1697 0000052C 00002102                		db 0, 0, 33, 2
  1698 00000530 00002202                		db 0, 0, 34, 2
  1699 00000534 00002302                		db 0, 0, 35, 2
  1700 00000538 00002402                		db 0, 0, 36, 2
  1701                                  
  1702                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1703                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  1704                                  
  1705                                  		;times 108 db 0		; 19/10/2022
  1706                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1707                                  					; times	((4*63)	- 144) db 0
  1708                                  dskdrvs:	
  1709 0000053C [5803]                  		dw fdrive1
  1710 0000053E [EE03]                  		dw fdrive2 
  1711                                  	
  1712                                  		;dw 52 dup(0)
  1713 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  1714                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  1715                                  
  1716                                  ;-----------------------------------------------------------------------------
  1717                                  
  1718                                  ; this is a real ugly place to put this
  1719                                  ; it should really go in the bds
  1720                                  
  1721 000005A8 00                      mediatype:	db 0
  1722 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1723                                  					; type for format call
  1724 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  1725                                  					; failed.
  1726                                  
  1727                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1728                                  ; the one passed by "new roms" before we perform a format operation. the old
  1729                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1730                                  ; this table does not contain the previously saved dpt.
  1731                                  		
  1732 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1733 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  1734 000005B0 00                      secondary_model_byte: db 0
  1735                                  		
  1736 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  1737                                  					; initialization is complete
  1738                                  		
  1739                                  ;; we assume the following remain contiguous and their order doesn't change
  1740                                  ;i19_lst:
  1741                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1742                                  ;	public	int19old&aa
  1743                                  ;		db	aa&h	; store the number as a byte
  1744                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1745                                  ;	endm
  1746                                  
  1747                                  ; 21/10/2022
  1748                                  
  1749 000005B2 02                      i19_lst:	db 2
  1750                                  					; Int19old&aa
  1751 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1752 000005B7 08                      		db 8
  1753 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1754 000005BC 09                      		db 9
  1755 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1756 000005C1 0A                      		db 0Ah
  1757 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1758 000005C6 0B                      		db 0Bh
  1759 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1760 000005CB 0C                      		db 0Ch
  1761 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1762 000005D0 0D                      		db 0Dh
  1763 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1764 000005D5 0E                      		db 0Eh
  1765 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1766 000005DA 70                      		db 70h
  1767 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1768 000005DF 72                      		db 72h
  1769 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1770 000005E4 73                      		db 73h
  1771 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1772 000005E9 74                      		db 74h
  1773 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1774 000005EE 76                      		db 76h
  1775 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1776 000005F3 77                      		db 77h
  1777 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1778                                  
  1779                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1780                                  
  1781                                  ;-----------------------------------------------------------------------------
  1782                                  
  1783                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1784                                  ; 
  1785                                  ;dskdrvs:	dw fdrive1
  1786                                  ;		dw fdrive2
  1787                                  ;		dw fdrive3
  1788                                  ;		dw fdrive4
  1789                                  ;
  1790                                  ;;M011 -- made all hard drive stuff variable
  1791                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  1792                                  ;		times 22 dw 0	; 19/10/2022
  1793                                  
  1794                                  ;-----------------------------------------------------------------------------
  1795                                  
  1796                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1797                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1798                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1799                                  
  1800                                  ;variables for dynamic relocatable modules
  1801                                  ;these should be stay resident.
  1802                                  
  1803 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1804                                  					; for p12 machine
  1805                                  
  1806                                  ; data structures for real-time date and time
  1807                                  			
  1808 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1809                                  
  1810                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1811                                  %if 0
  1812                                  month_table:	dw 0			; january
  1813                                  		dw 31			; february
  1814                                  		dw 59
  1815                                  		dw 90
  1816                                  		dw 120
  1817                                  		dw 151
  1818                                  		dw 181
  1819                                  		dw 212
  1820                                  		dw 243
  1821                                  		dw 273
  1822                                  		dw 304
  1823                                  		dw 334			; december
  1824                                  %endif
  1825                                  
  1826 00000600 0000                    daycnt2:	dw 0
  1827                                  ; 08/08/2023
  1828                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1829                                  
  1830                                  ;-----------------------------------------------------------------------------
  1831                                  ;
  1832                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1833                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1834                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1835                                  
  1836                                  ; ----------------------------------------------------------------------------
  1837                                  
  1838                                  ;************************************************************************
  1839                                  ;*									*
  1840                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1841                                  ;*	  are plugged in by seg_reinit.					*
  1842                                  ;*									*
  1843                                  ;************************************************************************
  1844                                  
  1845                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1846                                  ; BIOSCODE_SEGMENT equ 2C7h
  1847                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1848                                  
  1849                                  ; 01/10/2022 - Erdogan Tan
  1850                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1851                                  ;  addresses, they will be changed to table labels later)
  1852                                  
  1853                                  ; 09/12/2022
  1854                                  %if 0
  1855                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1856                                  					; at 2C7h:43h =	70h:25B3h
  1857                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1858                                  					; at 2C7h:396h = 70h:2906h
  1859                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1860                                  					; at 2C7h:1302h	= 70h:3872h
  1861                                  i13x:		dw 154Bh, 2C7h		; i13z
  1862                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1863                                  %endif
  1864                                  
  1865                                  ; 30/12/2022
  1866                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1867                                  
  1868                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1869                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  1870                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  1871                                  
  1872                                  ; 09/12/2022
  1873 00000602 [4700]0203              cdev:		dw chardev_entry, IOSYSCODESEG
  1874 00000606 [A003]0203              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1875                                  ; 07/08/2023
  1876                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1877 0000060A [5718]0203              i13x:		dw i13z, IOSYSCODESEG
  1878                                  
  1879                                  end_BC_entries:	; 15/10/2022
  1880                                  
  1881                                  ;************************************************************************
  1882                                  ;*									*
  1883                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1884                                  ;*									*
  1885                                  ;************************************************************************
  1886                                  
  1887                                  cbreak:					
  1888 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1889                                  					; indicate break key set
  1890                                  intret:					
  1891 00000614 CF                      		iret
  1892                                  
  1893                                  ; =============== S U B	R O U T	I N E ========================================
  1894                                  
  1895                                  
  1896                                  ;************************************************************************
  1897                                  ;*									*
  1898                                  ;*	strategy - store es:bx (device driver request packet)		*
  1899                                  ;*		     away at [ptrsav] for next driver function call	*
  1900                                  ;*									*
  1901                                  ;************************************************************************
  1902                                  
  1903                                  strategy:	; proc far		
  1904 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1905                                  					; away at [ptrsav] for next driver function call
  1906 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1907 0000061F CB                      		retf
  1908                                  
  1909                                  ; ----------------------------------------------------------------------------
  1910                                  
  1911                                  ;************************************************************************
  1912                                  ;*									*
  1913                                  ;*	device driver entry points. these are the initial		*
  1914                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1915                                  ;*	  in the case of our resident drivers, they'll just		*
  1916                                  ;*	  stick a fake return address on the stack which		*
  1917                                  ;*	  points to dispatch tables and possibly some unit		*
  1918                                  ;*	  numbers, and then call through a common entry point		*
  1919                                  ;*	  which can take care of a20 switching				*
  1920                                  ;*									*
  1921                                  ;************************************************************************
  1922                                  
  1923                                  ; 01/10/2022 - Erdogan Tan
  1924                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1925                                  ;  addresses, they will be changed to table labels later)
  1926                                  
  1927                                  ; 09/12/2022
  1928                                  
  1929                                  ; 02/10/2023 - Retro DOS v5.0
  1930                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  1931                                  
  1932                                  con_entry:				
  1933 00000620 E84000                  		call	cdev_entry
  1934                                  ; ----------------------------------------------------------------------------
  1935                                  		;dw 0E4h		; con_table
  1936 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  1937                                  					; 2C7h:0E4h = 70h:2654h
  1938                                  ; ----------------------------------------------------------------------------
  1939                                  
  1940                                  prn0_entry:				
  1941 00000625 E83B00                  		call	cdev_entry
  1942                                  ; ----------------------------------------------------------------------------
  1943                                  		;dw 0FBh		; prn_table
  1944 00000628 [FB00]                  		dw prn_table
  1945                                  					; 2C7h:0FBh = 70h:266Bh
  1946 0000062A 0000                    		db 0, 0
  1947                                  ; ----------------------------------------------------------------------------
  1948                                  
  1949                                  prn1_entry:				
  1950 0000062C E83400                  		call	cdev_entry
  1951                                  ; ----------------------------------------------------------------------------
  1952                                  		;dw 0FBh		; prn_table
  1953 0000062F [FB00]                  		dw prn_table
  1954                                  					; 2C7h:0FBh = 70h:266Bh
  1955 00000631 0001                    		db 0, 1
  1956                                  ; ----------------------------------------------------------------------------
  1957                                  
  1958                                  prn2_entry:				
  1959 00000633 E82D00                  		call	cdev_entry
  1960                                  ; ----------------------------------------------------------------------------
  1961                                  		;dw 0FBh		; prn_table
  1962 00000636 [FB00]                  		dw prn_table
  1963                                  					; 2C7h:0FBh = 70h:266Bh
  1964 00000638 0102                    		db 1, 2
  1965                                  ; ----------------------------------------------------------------------------
  1966                                  
  1967                                  prn3_entry:				
  1968 0000063A E82600                  		call	cdev_entry
  1969                                  ; ----------------------------------------------------------------------------
  1970                                  		;dw 0FBh		; prn_table
  1971 0000063D [FB00]                  		dw prn_table
  1972                                  					; 2C7h:0FBh = 70h:266Bh
  1973 0000063F 0203                    		db 2, 3
  1974                                  ; ----------------------------------------------------------------------------
  1975                                  
  1976                                  aux0_entry:				
  1977 00000641 E81F00                  		call	cdev_entry
  1978                                  ; ----------------------------------------------------------------------------
  1979                                  		;dw 130h		; aux_table
  1980 00000644 [3001]                  		dw aux_table
  1981                                  					; 2C7h:130h = 70h:26A0h
  1982 00000646 00                      		db 0
  1983                                  ; ----------------------------------------------------------------------------
  1984                                  
  1985                                  aux1_entry:				
  1986 00000647 E81900                  		call	cdev_entry
  1987                                  ; ----------------------------------------------------------------------------
  1988                                  		;dw 130h		; aux_table
  1989 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  1990                                  					; 2C7h:130h = 70h:26A0h
  1991 0000064C 01                      		db 1
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  aux2_entry:				
  1995 0000064D E81300                  		call	cdev_entry
  1996                                  ; ----------------------------------------------------------------------------
  1997                                  		;dw 130h		; aux_table
  1998 00000650 [3001]                  		dw aux_table
  1999                                  					; 2C7h:130h = 70h:26A0h
  2000 00000652 02                      		db 2
  2001                                  ; ----------------------------------------------------------------------------
  2002                                  
  2003                                  aux3_entry:				
  2004 00000653 E80D00                  		call	cdev_entry
  2005                                  ; ----------------------------------------------------------------------------
  2006                                  		;dw 130h		; aux_table
  2007 00000656 [3001]                  		dw aux_table
  2008                                  					; 2C7h:130h = 70h:26A0h
  2009 00000658 03                      		db 3
  2010                                  ; ----------------------------------------------------------------------------
  2011                                  
  2012                                  tim_entry:				
  2013 00000659 E80700                  		call	cdev_entry
  2014                                  ; ----------------------------------------------------------------------------
  2015                                  		;dw 147h		; tim_table
  2016 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  2017                                  					; 2C7h:147h = 70h:26B7h
  2018                                  ; ----------------------------------------------------------------------------
  2019                                  
  2020                                  ; 15/10/2022
  2021                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  2022                                  ; 09/12/2022
  2023                                  DSKTBL equ dsktbl
  2024                                  
  2025                                  dsk_entry:				
  2026 0000065E E80200                  		call	cdev_entry
  2027                                  ; ----------------------------------------------------------------------------
  2028                                  		;dw 4A2h		; dsktbl
  2029 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  2030                                  					; 2C7h:4A2h = 70h:2A12h
  2031                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  2032                                  					; 364h:579h = 70h:34B9h
  2033                                  
  2034                                  ; =============== S U B	R O U T	I N E ========================================
  2035                                  
  2036                                  ;************************************************************************
  2037                                  ;*									*
  2038                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  2039                                  ;*	This code assumes that if Segment of Device request packet is	*
  2040                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  2041                                  ;*	A20 is already on.						*
  2042                                  ;*									*
  2043                                  ;************************************************************************
  2044                                  
  2045                                  cdev_entry:	; proc near		
  2046 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2047 00000669 740D                    		jz	short ce_enter_codeseg
  2048                                  				; optimized for DOS in HMA
  2049 0000066B 50                      		push	ax
  2050 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  2051 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  2052 00000675 58                      		pop	ax
  2053 00000676 7505                    		jnz	short not_from_dos
  2054                                  				; jump is coded this way to fall thru
  2055                                  				; in 99.99% of the cases
  2056                                  ce_enter_codeseg:
  2057 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  2058                                  		;jmp	dword ptr cs:cdev
  2059                                  ;-----------------------------------------------------------------------------
  2060                                  
  2061                                  not_from_dos:				
  2062 0000067D E8AA00                  		call	EnsureA20On
  2063 00000680 EBF6                    		jmp	short ce_enter_codeseg
  2064                                  
  2065                                  ;************************************************************************
  2066                                  ;*									*
  2067                                  ;*	outchr - this is our int 29h handler. it writes the		*
  2068                                  ;*	   character in al on the display using int 10h ttywrite	*
  2069                                  ;*									*
  2070                                  ;************************************************************************
  2071                                  
  2072                                  	; 17/07/2024
  2073                                  	; 02/10/2023
  2074                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  2075                                  outchr:
  2076 00000682 50                      		push	ax		; int 29h handler
  2077 00000683 56                      		push	si
  2078 00000684 57                      		push	di
  2079 00000685 55                      		push	bp
  2080 00000686 53                      		push	bx
  2081                                  		;;;
  2082                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  2083                                  		;mov	ah,0Eh
  2084                                  		;mov	bx,7
  2085                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2086                                  		;		; AL = character, BH = display page (alpha modes)
  2087                                  		;		; BL = foreground color	(graphics modes)
  2088                                  		; 17/07/2024
  2089                                  		; 02/10/2023
  2090 00000687 1E                      		push	ds ; *
  2091 00000688 31DB                    		xor	bx,bx ; 0
  2092 0000068A 8EDB                    		mov	ds,bx ; 0
  2093 0000068C B40E                    		mov	ah,0Eh
  2094 0000068E B307                    		mov	bl,7
  2095 00000690 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  2096                                  		; 17/07/2024
  2097                                  		;jnz	short win_outchr ; *
  2098                                  		;push	ds ; *
  2099                                  		;mov	ds,bx ; 0
  2100                                  		;mov	ah,0Eh
  2101                                  		;mov	bl,7
  2102 00000695 7508                    		jnz	short win_outchr ; Running on Windows
  2103 00000697 9C                      		pushf			; far call (simulate INT)
  2104 00000698 FA                      		cli	; disable interrupts
  2105 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  2106                                  		; 17/07/2024
  2107                                  		;pop	ds ; *
  2108 0000069D EB02                    		jmp	short outchr_ok
  2109                                  win_outchr:
  2110 0000069F CD10                    		int	10h
  2111                                  outchr_ok:
  2112                                  		; 17/07/2024
  2113 000006A1 1F                      		pop	ds ; *
  2114                                  		;;;
  2115 000006A2 5B                      		pop	bx
  2116 000006A3 5D                      		pop	bp
  2117 000006A4 5F                      		pop	di
  2118 000006A5 5E                      		pop	si
  2119 000006A6 58                      		pop	ax
  2120 000006A7 CF                      		iret
  2121                                  
  2122                                  ;-----------------------------------------------------------------------------
  2123                                  
  2124                                  	; 02/10/2023 - Retro DOS v5.0
  2125                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  2126                                  
  2127 000006A8 50                      		db 50h ; P		; 'PCI' signature
  2128 000006A9 43                      		db 43h ; C
  2129 000006AA 49                      		db 49h ; I
  2130                                  
  2131 000006AB 00000000                Orig1A:		dd 0
  2132                                  
  2133                                  ; =============== S U B R O U T I N E =======================================
  2134                                  
  2135                                  	; 02/10/2023 - Retro DOS v5.0
  2136                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  2137                                  
  2138                                  Int1A:
  2139 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  2140 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  2141 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  2142                                  int1a_1:
  2143 000006B9 55                      		push	bp
  2144                                  int1a_2:
  2145 000006BA 89E5                    		mov	bp,sp
  2146 000006BC 55                      		push	bp
  2147 000006BD 9C                      		pushf
  2148 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2149 000006C3 7220                    		jc	short int1a_4
  2150                                  
  2151                                  		;cmp	cl,0		; Year (BCD)
  2152                                  		; 02/10/2023
  2153 000006C5 08C9                    		or	cl,cl
  2154 000006C7 7515                    		jnz	short int1a_3
  2155 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  2156 000006CC 7510                    		jne	short int1a_3
  2157 000006CE B520                    		mov	ch,20h
  2158 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  2159 000006D2 51                        		push	cx
  2160 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  2161 000006D4 9C                      		pushf
  2162 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2163 000006DA 5A                      		pop	dx
  2164 000006DB 59                      		pop	cx
  2165 000006DC 7207                    		jc	short int1a_4
  2166                                  int1a_3:
  2167 000006DE 5D                      		pop	bp
  2168 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  2169 000006E3 EB05                                    jmp	short int1a_5
  2170                                  int1a_4:
  2171 000006E5 5D                      		pop	bp
  2172 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  2173                                  int1a_5:
  2174 000006EA 5D                      		pop	bp
  2175 000006EB CF                      		iret
  2176                                  
  2177                                  		; 02/10/2023
  2178 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  2179                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  2180                                  	
  2181                                  ;-----------------------------------------------------------------------------
  2182                                  
  2183                                  ;************************************************************************
  2184                                  ;*									*
  2185                                  ;*	block13 - our int13 hooker					*
  2186                                  ;*									*
  2187                                  ;************************************************************************
  2188                                  
  2189                                  	; 02/10/2023 - Retro DOS v5.0
  2190                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  2191                                  
  2192                                  block13:				
  2193 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2194 000006F3 7403                    		jz	short skipa20
  2195                                  		
  2196                                  		;call	IsA20Off	; A20 Off?
  2197                                  		;jnz	short skipa20
  2198                                  		;call	EnableA20	; assure a20 enabled
  2199                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  2200 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  2201                                  skipa20:				
  2202 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  2203 000006FD 9C                      		pushf			; fake interrupt
  2204 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  2205                                  		;call	dword ptr cs:i13x
  2206                                  					; call through Bios_Code entry table
  2207 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  2208 00000708 CA0200                  		retf	2
  2209                                  
  2210                                  ; =============== S U B	R O U T	I N E =======================================
  2211                                  
  2212                                  ; the int13 hook calls back here to call-through to the ROM
  2213                                  ; this is necessary because some people have extended their
  2214                                  ; ROM BIOSs to use ds as a parameter/result register and
  2215                                  ; our int13 hook relies heavily on ds to access Bios_Data
  2216                                  
  2217                                  call_orig13:	; proc far		
  2218 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  2219 0000070F 9C                      		pushf			; simulate an int13
  2220 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  2221                                  		;call	cs:Orig13
  2222 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  2223 0000071A 0E                      		push	cs
  2224 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  2225                                  
  2226 0000071C 9C                      		pushf
  2227                                  		; 10/12/2022
  2228                                  		; ds = cs
  2229 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  2230                                  		;cmp	byte [cs:inHMA],0
  2231 00000722 7403                    		jz	short corig13_popf_retf
  2232                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2233                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  2234                                  		;call	IsA20Off
  2235                                  		;jnz	short corig13_popf_retf
  2236                                  		;call	EnableA20
  2237 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  2238                                  corig13_popf_retf:	
  2239 00000727 9D                      		popf
  2240                                  		; 20/09/2023
  2241                                  re_init:	; 07/08/2023
  2242 00000728 CB                      		retf
  2243                                  
  2244                                  		; 02/10/2023
  2245 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  2246                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  2247                                  
  2248                                  ;-----------------------------------------------------------------------------
  2249                                  
  2250                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  2251                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  2252                                  
  2253                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2254                                  ;HiMem:		dd 0FFFF0090h		
  2255                                  ;LoMem:		dd 80h
  2256                                  
  2257                                  ; ----------------------------------------------------------------------------			
  2258                                  
  2259                                  ; =============== S U B	R O U T	I N E ========================================
  2260                                  
  2261                                  
  2262                                  ;************************************************************************
  2263                                  ;*									*
  2264                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  2265                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  2266                                  ;*									*
  2267                                  ;************************************************************************
  2268                                  
  2269                                  EnsureA20On:	; proc near
  2270 0000072A E80E00                  		call	IsA20Off
  2271                                  		;jz	short EnableA20
  2272                                  		;retn
  2273                                  		; 18/12/2022
  2274 0000072D 750B                    		jnz	short A20On_retn
  2275                                  
  2276                                  ; =============== S U B	R O U T	I N E ========================================
  2277                                  
  2278                                  
  2279                                  EnableA20:	; proc near
  2280 0000072F 50                      		push	ax
  2281 00000730 53                      		push	bx
  2282 00000731 B405                    		mov	ah,5	 ; local enable a20
  2283                                  		;call	cs:xms
  2284 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  2285 00000738 5B                      		pop	bx
  2286 00000739 58                      		pop	ax
  2287                                  A20On_retn:	; 18/12/2022
  2288 0000073A C3                      		retn
  2289                                  
  2290                                  ; =============== S U B	R O U T	I N E ========================================
  2291                                  
  2292                                  
  2293                                  IsA20Off:	; proc near
  2294 0000073B 1E                      		push	ds
  2295 0000073C 06                      		push	es
  2296 0000073D 51                      		push	cx
  2297 0000073E 56                      		push	si
  2298 0000073F 57                      		push	di
  2299                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2300                                  		;lds	si,[cs:HiMem]
  2301                                  		;les	di,[cs:LoMem]
  2302                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  2303 00000740 31FF                    		xor	di,di
  2304 00000742 8EC7                    		mov	es,di
  2305 00000744 4F                      		dec	di
  2306 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  2307 00000748 8EDF                    		mov	ds,di
  2308 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  2309                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  2310                                  		; (following cpu instructions will be modified by 'SYSIN'
  2311                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  2312                                  cpu386_cmpsd:
  2313 0000074D 90                      		nop
  2314 0000074E B90800                  		mov	cx,8
  2315 00000751 F3A7                    		repe cmpsw
  2316                                  				; zf = 0 -> A20 line is ON
  2317                                  				; zf = 1 -> A20 line is OFF
  2318 00000753 5F                      		pop	di
  2319 00000754 5E                      		pop	si
  2320 00000755 59                      		pop	cx
  2321 00000756 07                      		pop	es
  2322 00000757 1F                      		pop	ds
  2323 00000758 C3                      		retn
  2324                                  
  2325                                  ; ----------------------------------------------------------------------------
  2326                                  
  2327                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2328                                  %if 0
  2329                                  DisableA20:
  2330                                  		push	ax
  2331                                  		push	bx
  2332                                  		mov	ah,6		; local disable A20
  2333                                  		call	far [cs:xms]
  2334                                  		;call	cs:xms
  2335                                  		pop	bx
  2336                                  		pop	ax
  2337                                  		retn
  2338                                  %endif
  2339                                  
  2340                                  ; ----------------------------------------------------------------------------
  2341                                  
  2342                                  ;************************************************************************
  2343                                  ;*									*
  2344                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  2345                                  ;*	  interrupt vectors before resuming the original int19 code	*
  2346                                  ;*									*
  2347                                  ;************************************************************************
  2348                                  
  2349                                  		; 02/10/2023 - Retro DOS v5.0
  2350                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  2351                                  int19:
  2352 00000759 0E                      		push	cs
  2353 0000075A 1F                      		pop	ds
  2354                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2355                                  		;mov	es,[zeroseg]	; 16/10/2022
  2356                                  		;mov	cx,5		; NUMROMVECTORS
  2357 0000075B 31C9                    		xor	cx,cx
  2358 0000075D 8EC1                    		mov	es,cx
  2359 0000075F B105                    		mov	cl,5
  2360                                  		;mov	si,offset RomVectors
  2361 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  2362                                  next_int:
  2363 00000764 AC                      		lodsb			; get int number
  2364 00000765 98                      		cbw			; assume < 128
  2365 00000766 D1E0                    		shl	ax,1
  2366 00000768 D1E0                    		shl	ax,1		; int *	4
  2367                                  		; 07/08/2023
  2368                                  		;mov	di,ax
  2369                                  		;lodsw
  2370                                  		;stosw
  2371                                  		;lodsw
  2372                                  		;stosw			; install the saved vector
  2373                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  2374 0000076A 97                      		xchg	ax,di
  2375 0000076B A5                      		movsw
  2376 0000076C A5                      		movsw
  2377 0000076D E2F5                    		loop	next_int
  2378                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  2379 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  2380 00000773 7419                    		jz	short doint19
  2381 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  2382                                  					; stkinit in sysinit1 will initialize int19oldxx values
  2383                                  		;mov	cx,14		; num_i19
  2384                                  		; 07/08/2023
  2385 00000778 B10E                    		mov	cl,14
  2386                                  i19_restore_loop:
  2387 0000077A AC                      		lodsb			; get interrupt	number
  2388 0000077B 98                      		cbw			; assume < 128
  2389                                  		;mov	di,ax
  2390                                  		;lodsw			; get original vector offset
  2391                                  		;mov	bx,ax		; save it
  2392                                  		;lodsw
  2393                                  		; 07/08/2023
  2394 0000077C 97                      		xchg	ax,di
  2395 0000077D AD                      		lodsw
  2396 0000077E 93                      		xchg	ax,bx
  2397 0000077F AD                      		lodsw
  2398                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  2399 00000780 43                      		inc	bx ; 07/08/2023
  2400 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  2401                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  2402                                  		;jz	short i19_restor_1
  2403 00000783 4B                      		dec	bx ; 07/08/2023
  2404 00000784 01FF                    		add	di,di
  2405 00000786 01FF                    		add	di,di
  2406 00000788 93                      		xchg	ax,bx
  2407 00000789 AB                      		stosw
  2408 0000078A 93                      		xchg	ax,bx
  2409 0000078B AB                      		stosw			; put the vector back
  2410                                  i19_restor_1:
  2411 0000078C E2EC                    		loop	i19_restore_loop
  2412                                  doint19:
  2413                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  2414 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  2415 00000792 7403                    		jz	short SkipVDisk
  2416 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  2417                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  2418                                  					; the memory above 1MB during a	warm boot.
  2419                                  SkipVDisk:
  2420 00000797 CD19                    		int	19h		; DISK BOOT
  2421                                  					; causes reboot	of disk	system
  2422                                  
  2423                                  ; =============== S U B	R O U T	I N E ========================================
  2424                                  
  2425                                  ;-----------------------------------------------------------------------------
  2426                                  ;
  2427                                  ; procedure : int15
  2428                                  ;
  2429                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  2430                                  ;		If it recognizes ctrl-alt-del and if DOS was
  2431                                  ;		is running high, it Erases the VDISK header
  2432                                  ;		present at 1MB boundary
  2433                                  ;
  2434                                  ;-----------------------------------------------------------------------------
  2435                                  
  2436                                  ; 16/10/2022
  2437                                  ;DELKEY		equ	53h
  2438                                  ;ROMDATASEG	equ	40h
  2439                                  KBFLAG		equ	17h
  2440                                  ;CTRLSTATE	equ	04h
  2441                                  ;ALTSTATE	equ	08h
  2442                                  
  2443                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  2444                                  Int15:
  2445                                  		;cmp	ax,4F00h+DELKEY
  2446 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  2447                                  		; 02/10/2023 - Retro DOS v5.0
  2448                                  		; 07/08/2023
  2449 0000079C 7405                    		jz	short int15_1
  2450                                  		;jnz	short Old15_j	; 07/08/2023 
  2451                                  Old15_j:
  2452 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2453                                  
  2454                                  ; ----------------------------------------------------------------------------
  2455                                  int15_1:
  2456 000007A3 1E                      		push	ds
  2457 000007A4 50                      		push	ax
  2458                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2459                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2460                                  		;mov	ax,40h		; ROMDATASEG
  2461                                  		;mov	ds,ax
  2462                                  		;;mov	al,ds:17h	; [KBFLAG]
  2463                                  		;; 16/10/2022
  2464                                  		;mov	al,[KBFLAG]
  2465 000007A5 31C0                    		xor	ax,ax
  2466 000007A7 8ED8                    		mov	ds,ax
  2467 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2468 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2469 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2470 000007B0 750A                    		jnz	short int15_2
  2471                                  		; 07/08/2023
  2472                                  		;push	cs
  2473                                  		;pop	ds
  2474                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  2475 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  2476 000007B7 7403                    		jz	short int15_2
  2477 000007B9 E80500                  		call	EraseVDiskHead
  2478                                  int15_2:
  2479 000007BC 58                      		pop	ax
  2480 000007BD 1F                      		pop	ds
  2481 000007BE F9                      		stc
  2482                                  		; 02/10/2023 - Retro DOS v5.0
  2483 000007BF EBDD                    		jmp	short Old15_j
  2484                                  
  2485                                  		; 02/10/2023
  2486                                  ;Old15_j:	; 07/08/2023
  2487                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  2488                                  ;		;jmp	cs:Old15
  2489                                  	
  2490                                  ; =============== S U B	R O U T	I N E ========================================
  2491                                  
  2492                                  ;-----------------------------------------------------------------------------
  2493                                  ;
  2494                                  ; procedure : EraseVDiskHead
  2495                                  ;
  2496                                  ;		Erases the VDisk Header present in the 1MB boundary
  2497                                  ;
  2498                                  ;-----------------------------------------------------------------------------
  2499                                  
  2500                                  EraseVDiskHead:	; proc near
  2501                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2502                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2503                                  		;push	ax
  2504 000007C1 51                      		push	cx
  2505 000007C2 57                      		push	di
  2506 000007C3 06                      		push	es
  2507 000007C4 E863FF                  		call	EnsureA20On
  2508                                  		;mov	ax,0FFFFh	; HMA seg
  2509                                  		;mov	es,ax
  2510                                  		; 03/10/2023 - Retro DOS v5.0
  2511 000007C7 6AFF                    		push	0FFFFh
  2512 000007C9 07                      		pop	es
  2513 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  2514                                  		; 07/08/2023
  2515                                  		;mov	cx,10h		; size of vdisk	header
  2516 000007CD 89F9                    		mov	cx,di ; 16
  2517                                  		; 03/10/2023
  2518 000007CF 31C0                    		xor	ax,ax
  2519                                  		;inc	ax ; ax = 0
  2520 000007D1 F3AB                    		rep stosw		; clear	it
  2521 000007D3 07                      		pop	es
  2522 000007D4 5F                      		pop	di
  2523 000007D5 59                      		pop	cx
  2524                                  		;pop	ax ; 07/08/2023
  2525 000007D6 C3                      		retn
  2526                                  
  2527                                  ; ----------------------------------------------------------------------------
  2528                                  
  2529                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2530                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2531                                  
  2532                                  ; 09/12/2022
  2533                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2534                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2535                                  ; (followings are in sysinit segment)
  2536                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2537                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2538                                  ;DEVICELIST	equ 273h
  2539                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2540                                  ;MEMORYSIZE	equ 292h	
  2541                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2542                                  ;DEFAULTDRIVE	equ 296h
  2543                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2544                                  ;;currentdoslocation equ 271h
  2545                                  ;CURRENTDOSLOCATION equ 271h
  2546                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2547                                  ;SYSINITSTART	equ 267h
  2548                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2549                                  ; 18/10/2022
  2550                                  ;toomanydrivesflag equ 3FFh 
  2551                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2552                                  
  2553                                  ; ----------------------------------------------------------------------------
  2554                                  
  2555                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2556                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  2557                                  
  2558                                  %if 1
  2559                                  
  2560 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2561                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2562                                  					; (procedure in	SYSINIT	segment)
  2563                                  ; 17/10/2022
  2564 000007D9 [C80A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2565 000007DB D904                    		dw SYSINITSEG		; 08/08/2023
  2566                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2567                                  					; 0473h for MSDOS 6.21 IO.SYS
  2568                                  ;SR;
  2569                                  ; A communication block has been setup between the DOS and the BIOS. All
  2570                                  ;the data starting from SysinitPresent will be part of the data block. 
  2571                                  ;Right now, this is the only data being communicated. It can be expanded 
  2572                                  ;later to add more stuff
  2573                                  
  2574 000007DD 00                      SysinitPresent:	db 0
  2575                                  
  2576                                  %endif
  2577                                  
  2578                                  ; ----------------------------------------------------------------------------
  2579                                  
  2580                                  ;************************************************************************
  2581                                  ;*									*
  2582                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2583                                  ;*	  it returns through one of the three functions that follow.	*
  2584                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2585                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2586                                  ;*									*
  2587                                  ;************************************************************************
  2588                                  
  2589                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2590                                  %if 0	; 20/09/2023
  2591                                  int_2f:		
  2592                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2593                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2594                                  
  2595                                  ; ----------------------------------------------------------------------------
  2596                                  
  2597                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2598                                  ; note:  is it really necessary to transiton out and then back in?
  2599                                  ;	 It's not as if this is a really speed critical function.
  2600                                  ;	 might as well do whatever's most compact.
  2601                                  
  2602                                  i2f_dskentry:
  2603                                  		jmp	dsk_entry
  2604                                  
  2605                                  ; ----------------------------------------------------------------------------
  2606                                  
  2607                                  ;************************************************************************
  2608                                  ;*									*
  2609                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2610                                  ;*		is done. presently does nothing. affects no		*
  2611                                  ;*		registers!						*
  2612                                  ;*									*
  2613                                  ;************************************************************************
  2614                                  
  2615                                  ; 09/12/2022
  2616                                  ; re_init_:
  2617                                  re_init:				; called back by sysinit after
  2618                                  		retf			; a bunch of stuff is done.
  2619                                  					; presently does nothing
  2620                                  %endif
  2621                                  
  2622                                  ; ----------------------------------------------------------------------------
  2623                                  
  2624                                  ;SR; WIN386 support
  2625                                  
  2626                                  ; WIN386 instance data structure
  2627                                  ;
  2628                                  ; Here is a Win386 startup info structure which we set up and to which
  2629                                  ; we return a pointer when Win386 initializes.
  2630                                  
  2631 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  2632                                  					; Startup Info for Win386
  2633 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  2634 000007E4 00000000                		dd 0			; a field we don't need
  2635 000007E8 00000000                		dd 0			; another field	we don't need
  2636 000007EC [F007]                  SI_Instance:	dw Instance_Table
  2637 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2638                                  
  2639                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2640                                  ; areas. Note that the address and size of the hardware stacks must
  2641                                  ; be calculated and inserted at boot time.
  2642                                  
  2643 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  2644 000007F4 0200                    		dw 2			; ... 2	bytes
  2645 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  2646 000007FA 1400                    		dw 14h			; ... 14H bytes
  2647 000007FC [0C00]                  		dw altah		; a con	device buffer...
  2648 000007FE 7000                    		dw 70h			; Bios_Data segment
  2649 00000800 0100                    		dw 1			; ... 1 byte
  2650                                  
  2651                                  NextStack:
  2652                                  
  2653                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2654                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2655                                  ;	That's just fine as long as these are the last items
  2656                                  ;	in the instance list since the first item is initialized
  2657                                  ;	to 0000 at load time.
  2658                                  
  2659 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  2660 00000806 0200                    		dw 2			; ... 2 bytes
  2661 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2662 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2663 0000080E 00000000                		dd 0			; terminate the	instance table
  2664                                  
  2665                                  					;SR;
  2666 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  2667                                  					; Win386 is running or not
  2668                                  ;-----------------------------------------------------------------------------
  2669                                  
  2670                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2671                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  2672                                  
  2673                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2674                                  ;when we call it including checking of A20. The code being only about 
  2675                                  ;30 bytes, we might as well put it in BIOS_DATA
  2676                                  
  2677                                  V86_Crit_SetFocus:			
  2678 00000813 57                      		push	di
  2679 00000814 06                      		push	es
  2680 00000815 53                      		push	bx
  2681 00000816 50                      		push	ax
  2682 00000817 31FF                    		xor	di,di
  2683 00000819 8EC7                    		mov	es,di
  2684 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  2685 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  2686 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2687                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2688                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2689 00000823 8CC0                    		mov	ax, es
  2690 00000825 09F8                    		or	ax, di
  2691 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2692                                  					; Set up stack frame to	simulate a call.
  2693 00000829 0E                      		push	cs
  2694                                  		;;mov	ax,offset Skip
  2695                                  		;mov	ax,Skip
  2696                                  		;push	ax
  2697                                  		; 03/10/2023 - Retro DOS v5.0
  2698 0000082A 68[3308]                		push	Skip
  2699 0000082D 06                      		push	es
  2700 0000082E 57                      		push	di		; API far call address
  2701 0000082F B80100                  		mov	ax,1		; SetFocus function number
  2702 00000832 CB                      		retf			; do the call
  2703                                  ;-----------------------------------------------------------------------------
  2704                                  
  2705                                  Skip:					
  2706 00000833 58                      		pop	ax
  2707 00000834 5B                      		pop	bx
  2708 00000835 07                      		pop	es
  2709 00000836 5F                      		pop	di
  2710 00000837 CB                      		retf
  2711                                  
  2712                                  ;End WIN386 support
  2713                                  
  2714                                  ; ----------------------------------------------------------------------------
  2715                                  
  2716                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2717                                  %if 0
  2718                                  
  2719                                  FreeHMAPtr:	dw 0FFFFh		
  2720                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2721                                  					; (procedure in	SYSINIT	segment)
  2722                                  ; 17/10/2022
  2723                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2724                                  		dw SYSINITSEG		; 08/08/2023
  2725                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2726                                  					; 0473h for MSDOS 6.21 IO.SYS
  2727                                  ;SR;
  2728                                  ; A communication block has been setup between the DOS and the BIOS. All
  2729                                  ;the data starting from SysinitPresent will be part of the data block. 
  2730                                  ;Right now, this is the only data being communicated. It can be expanded 
  2731                                  ;later to add more stuff
  2732                                  
  2733                                  SysinitPresent:	db 0
  2734                                  		
  2735                                  endfloppy:	db 0, 0
  2736                                  
  2737                                  %endif
  2738                                  	
  2739                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2740                                  
  2741                                  	endfloppy:
  2742 00000838 00                      		db 0
  2743                                  
  2744                                  	; 03/10/2023
  2745                                  
  2746                                  numxdiv	equ ($-BData_start)
  2747                                  numxmod	equ (numxdiv % 16)
  2748                                  
  2749                                  %if (numxmod>0) & (numxmod<16)
  2750 00000839 00<rep 7h>              		times (16-numxmod) db 0
  2751                                  %endif
  2752                                  
  2753                                  ; ----------------------------------------------------------------------------			
  2754                                  
  2755                                  ; Bios_Data ends
  2756                                  	
  2757                                  ; Possibly disposable BIOS data
  2758                                  ; This data follows the	regular	BIOS data,
  2759                                  ; and is part of the same group.
  2760                                  
  2761                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2762                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  2763                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  2764                                  
  2765                                  ; 03/10/2023
  2766 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  2766 00000849 2020               
  2767                                  
  2768 0000084B 80                      harddrv:	db 80h			
  2769                                  
  2770                                  end96tpi:
  2771                                  
  2772                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2773                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  2774                                  
  2775                                  ;;*********************************************************************
  2776                                  ;;memory allocation for bdss
  2777                                  ;;*********************************************************************
  2778                                  ;
  2779                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2780                                  ;
  2781                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2782                                  ;
  2783                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2784                                  
  2785                                  
  2786                                  ; 09/12/2023
  2787                                  %if 1
  2788                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  2789                                  
  2790 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  2791                                  					; max_mini_dsk_num equ 23
  2792                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  2793                                  					; currently max. 25
  2794                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  2795                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  2796                                  					; BDS.link
  2797 0000084E 0000                    		dw 0
  2798 00000850 50                      		db 80			; BDS.drivenum
  2799 00000851 03                      		db 3			; BDS.drivelet
  2800 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  2801                                  					; 53 bytes BPB for FAT32 fs
  2802                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  2803                                  					; .bytespersec
  2804 00000854 01                      		db 1			; .secperclus
  2805 00000855 0100                    		dw 1			; .resectors
  2806 00000857 02                      		db 2			; .fats
  2807 00000858 1000                    		dw 16			; .direntries
  2808 0000085A 0000                    		dw 0			; .totalsec16
  2809 0000085C F8                      		db 0F8h			; .media
  2810 0000085D 0100                    		dw 1			; .fatsecs16
  2811 0000085F 0000                    		dw 0			; .secpertrack
  2812 00000861 0000                    		dw 0			; .heads
  2813 00000863 00000000                		dd 0			; .hiddensectors
  2814 00000867 00000000                		dd 0			; .totalsecs32
  2815                                  					; (End of FAT12/FAT16 BPB)
  2816                                  					;
  2817                                  					; FAT32 extensions to BDS
  2818 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  2819 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  2820 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  2821 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  2822 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  2823 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  2824 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  2825 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  2826 00000888 0000                    		dw 0			; BDS.opcnt
  2827 0000088A 03                      		db 3
  2828 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  2829 0000088D 2800                    		dw 40
  2830 0000088F 00<rep 25h>             		times 37 db 0
  2831 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  2832 000008B8 00<rep Ch>              		times 12 db 0
  2833 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  2834 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  2835 000008C7 0000                    		dw 0			; BDS.tim_hi
  2836 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  2836 000008D2 202000             
  2837 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  2838 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  2839 000008E2 FFFF                    bds_1:		dw 0FFFFh
  2840 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2840 000008ED 0210000000F8       
  2841 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2841 000008FC 000000000000000000 
  2842 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2842 0000090E FFFFFF0000         
  2843 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2843 0000091C 0000000003200028   
  2844 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2844 0000092D 000000000000000000 
  2845 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2845 0000093F 000000000000000000 
  2846 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2846 00000951 0000000000         
  2847 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2847 0000095F 4E4F204E41         
  2848 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2848 0000096D 00004641           
  2849 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2850 00000978 FFFF                    bds_2:		dw 0FFFFh
  2851 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2851 00000983 0210000000F8       
  2852 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2852 00000992 000000000000000000 
  2853 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2853 000009A4 FFFFFF0000         
  2854 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2854 000009B2 0000000003200028   
  2855 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2855 000009C3 000000000000000000 
  2856 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2856 000009D5 000000000000000000 
  2857 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2857 000009E7 0000000000         
  2858 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2858 000009F5 4E4F204E41         
  2859 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2859 00000A03 00004641           
  2860 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2861 00000A0E FFFF                    bds_3:		dw 0FFFFh
  2862 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2862 00000A19 0210000000F8       
  2863 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2863 00000A28 000000000000000000 
  2864 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2864 00000A3A FFFFFF0000         
  2865 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2865 00000A48 0000000003200028   
  2866 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2866 00000A59 000000000000000000 
  2867 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2867 00000A6B 000000000000000000 
  2868 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2868 00000A7D 0000000000         
  2869 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2869 00000A8B 4E4F204E41         
  2870 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2870 00000A99 00004641           
  2871 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2872 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  2873 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2873 00000AAF 0210000000F8       
  2874 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2874 00000ABE 000000000000000000 
  2875 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2875 00000AD0 FFFFFF0000         
  2876 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2876 00000ADE 0000000003200028   
  2877 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2877 00000AEF 000000000000000000 
  2878 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2878 00000B01 000000000000000000 
  2879 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2879 00000B13 0000000000         
  2880 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2880 00000B21 4E4F204E41         
  2881 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2881 00000B2F 00004641           
  2882 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2883 00000B3A FFFF                    		dw 0FFFFh
  2884 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2884 00000B45 0210000000F8       
  2885 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2885 00000B54 000000000000000000 
  2886 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2886 00000B66 FFFFFF0000         
  2887 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2887 00000B74 0000000003200028   
  2888 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2888 00000B85 000000000000000000 
  2889 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2889 00000B97 000000000000000000 
  2890 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2890 00000BA9 0000000000         
  2891 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2891 00000BB7 4E4F204E41         
  2892 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2892 00000BC5 00004641           
  2893 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2894 00000BD0 FFFF                    		dw 0FFFFh
  2895 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2895 00000BDB 0210000000F8       
  2896 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2896 00000BEA 000000000000000000 
  2897 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2897 00000BFC FFFFFF0000         
  2898 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2898 00000C0A 0000000003200028   
  2899 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2899 00000C1B 000000000000000000 
  2900 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2900 00000C2D 000000000000000000 
  2901 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2901 00000C3F 0000000000         
  2902 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2902 00000C4D 4E4F204E41         
  2903 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2903 00000C5B 00004641           
  2904 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2905 00000C66 FFFF                    		dw 0FFFFh
  2906 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2906 00000C71 0210000000F8       
  2907 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2907 00000C80 000000000000000000 
  2908 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2908 00000C92 FFFFFF0000         
  2909 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2909 00000CA0 0000000003200028   
  2910 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2910 00000CB1 000000000000000000 
  2911 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2911 00000CC3 000000000000000000 
  2912 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2912 00000CD5 0000000000         
  2913 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2913 00000CE3 4E4F204E41         
  2914 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2914 00000CF1 00004641           
  2915 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2916 00000CFC FFFF                    		dw 0FFFFh
  2917 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2917 00000D07 0210000000F8       
  2918 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2918 00000D16 000000000000000000 
  2919 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2919 00000D28 FFFFFF0000         
  2920 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2920 00000D36 0000000003200028   
  2921 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2921 00000D47 000000000000000000 
  2922 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2922 00000D59 000000000000000000 
  2923 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2923 00000D6B 0000000000         
  2924 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2924 00000D79 4E4F204E41         
  2925 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2925 00000D87 00004641           
  2926 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2927 00000D92 FFFF                    		dw 0FFFFh
  2928 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2928 00000D9D 0210000000F8       
  2929 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2929 00000DAC 000000000000000000 
  2930 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2930 00000DBE FFFFFF0000         
  2931 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2931 00000DCC 0000000003200028   
  2932 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2932 00000DDD 000000000000000000 
  2933 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2933 00000DEF 000000000000000000 
  2934 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2934 00000E01 0000000000         
  2935 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2935 00000E0F 4E4F204E41         
  2936 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2936 00000E1D 00004641           
  2937 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2938 00000E28 FFFF                    		dw 0FFFFh
  2939 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2939 00000E33 0210000000F8       
  2940 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2940 00000E42 000000000000000000 
  2941 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2941 00000E54 FFFFFF0000         
  2942 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2942 00000E62 0000000003200028   
  2943 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2943 00000E73 000000000000000000 
  2944 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2944 00000E85 000000000000000000 
  2945 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2945 00000E97 0000000000         
  2946 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2946 00000EA5 4E4F204E41         
  2947 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2947 00000EB3 00004641           
  2948 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2949 00000EBE FFFF                    		dw 0FFFFh
  2950 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2950 00000EC9 0210000000F8       
  2951 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2951 00000ED8 000000000000000000 
  2952 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2952 00000EEA FFFFFF0000         
  2953 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2953 00000EF8 0000000003200028   
  2954 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2954 00000F09 000000000000000000 
  2955 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2955 00000F1B 000000000000000000 
  2956 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2956 00000F2D 0000000000         
  2957 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2957 00000F3B 4E4F204E41         
  2958 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2958 00000F49 00004641           
  2959 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2960 00000F54 FFFF                    		dw 0FFFFh
  2961 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2961 00000F5F 0210000000F8       
  2962 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2962 00000F6E 000000000000000000 
  2963 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2963 00000F80 FFFFFF0000         
  2964 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2964 00000F8E 0000000003200028   
  2965 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2965 00000F9F 000000000000000000 
  2966 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2966 00000FB1 000000000000000000 
  2967 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2967 00000FC3 0000000000         
  2968 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2968 00000FD1 4E4F204E41         
  2969 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2969 00000FDF 00004641           
  2970 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2971 00000FEA FFFF                    		dw 0FFFFh
  2972 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2972 00000FF5 0210000000F8       
  2973 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2973 00001004 000000000000000000 
  2974 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2974 00001016 FFFFFF0000         
  2975 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2975 00001024 0000000003200028   
  2976 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2976 00001035 000000000000000000 
  2977 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2977 00001047 000000000000000000 
  2978 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2978 00001059 0000000000         
  2979 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2979 00001067 4E4F204E41         
  2980 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2980 00001075 00004641           
  2981 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2982 00001080 FFFF                    		dw 0FFFFh
  2983 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2983 0000108B 0210000000F8       
  2984 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2984 0000109A 000000000000000000 
  2985 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2985 000010AC FFFFFF0000         
  2986 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2986 000010BA 0000000003200028   
  2987 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2987 000010CB 000000000000000000 
  2988 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2988 000010DD 000000000000000000 
  2989 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2989 000010EF 0000000000         
  2990 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2990 000010FD 4E4F204E41         
  2991 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2991 0000110B 00004641           
  2992 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2993 00001116 FFFF                    		dw 0FFFFh
  2994 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2994 00001121 0210000000F8       
  2995 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2995 00001130 000000000000000000 
  2996 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2996 00001142 FFFFFF0000         
  2997 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2997 00001150 0000000003200028   
  2998 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2998 00001161 000000000000000000 
  2999 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2999 00001173 000000000000000000 
  3000 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3000 00001185 0000000000         
  3001 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3001 00001193 4E4F204E41         
  3002 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3002 000011A1 00004641           
  3003 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3004 000011AC FFFF                    		dw 0FFFFh
  3005 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3005 000011B7 0210000000F8       
  3006 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3006 000011C6 000000000000000000 
  3007 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3007 000011D8 FFFFFF0000         
  3008 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3008 000011E6 0000000003200028   
  3009 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3009 000011F7 000000000000000000 
  3010 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3010 00001209 000000000000000000 
  3011 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3011 0000121B 0000000000         
  3012 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3012 00001229 4E4F204E41         
  3013 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3013 00001237 00004641           
  3014 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3015 00001242 FFFF                    		dw 0FFFFh
  3016 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3016 0000124D 0210000000F8       
  3017 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3017 0000125C 000000000000000000 
  3018 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3018 0000126E FFFFFF0000         
  3019 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3019 0000127C 0000000003200028   
  3020 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3020 0000128D 000000000000000000 
  3021 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3021 0000129F 000000000000000000 
  3022 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3022 000012B1 0000000000         
  3023 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3023 000012BF 4E4F204E41         
  3024 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3024 000012CD 00004641           
  3025 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3026 000012D8 FFFF                    		dw 0FFFFh
  3027 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3027 000012E3 0210000000F8       
  3028 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3028 000012F2 000000000000000000 
  3029 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3029 00001304 FFFFFF0000         
  3030 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3030 00001312 0000000003200028   
  3031 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3031 00001323 000000000000000000 
  3032 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3032 00001335 000000000000000000 
  3033 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3033 00001347 0000000000         
  3034 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3034 00001355 4E4F204E41         
  3035 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3035 00001363 00004641           
  3036 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3037 0000136E FFFF                    		dw 0FFFFh
  3038 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3038 00001379 0210000000F8       
  3039 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3039 00001388 000000000000000000 
  3040 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3040 0000139A FFFFFF0000         
  3041 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3041 000013A8 0000000003200028   
  3042 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3042 000013B9 000000000000000000 
  3043 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3043 000013CB 000000000000000000 
  3044 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3044 000013DD 0000000000         
  3045 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3045 000013EB 4E4F204E41         
  3046 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3046 000013F9 00004641           
  3047 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3048 00001404 FFFF                    		dw 0FFFFh
  3049 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3049 0000140F 0210000000F8       
  3050 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3050 0000141E 000000000000000000 
  3051 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3051 00001430 FFFFFF0000         
  3052 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3052 0000143E 0000000003200028   
  3053 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3053 0000144F 000000000000000000 
  3054 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3054 00001461 000000000000000000 
  3055 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3055 00001473 0000000000         
  3056 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3056 00001481 4E4F204E41         
  3057 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3057 0000148F 00004641           
  3058 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3059 0000149A FFFF                    		dw 0FFFFh
  3060 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3060 000014A5 0210000000F8       
  3061 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3061 000014B4 000000000000000000 
  3062 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3062 000014C6 FFFFFF0000         
  3063 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3063 000014D4 0000000003200028   
  3064 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3064 000014E5 000000000000000000 
  3065 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3065 000014F7 000000000000000000 
  3066 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3066 00001509 0000000000         
  3067 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3067 00001517 4E4F204E41         
  3068 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3068 00001525 00004641           
  3069 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3070 00001530 FFFF                    		dw 0FFFFh
  3071 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3071 0000153B 0210000000F8       
  3072 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3072 0000154A 000000000000000000 
  3073 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3073 0000155C FFFFFF0000         
  3074 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3074 0000156A 0000000003200028   
  3075 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3075 0000157B 000000000000000000 
  3076 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3076 0000158D 000000000000000000 
  3077 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3077 0000159F 0000000000         
  3078 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3078 000015AD 4E4F204E41         
  3079 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3079 000015BB 00004641           
  3080 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3081 000015C6 FFFF                    		dw 0FFFFh
  3082 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3082 000015D1 0210000000F8       
  3083 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3083 000015E0 000000000000000000 
  3084 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3084 000015F2 FFFFFF0000         
  3085 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3085 00001600 0000000003200028   
  3086 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3086 00001611 000000000000000000 
  3087 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3087 00001623 000000000000000000 
  3088 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3088 00001635 0000000000         
  3089 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3089 00001643 4E4F204E41         
  3090 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3090 00001651 00004641           
  3091 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3092 0000165C FFFF                    bds_24:		dw 0FFFFh
  3093 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3093 00001667 0210000000F8       
  3094 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3094 00001676 000000000000000000 
  3095 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3095 00001688 FFFFFF0000         
  3096 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3096 00001696 0000000003200028   
  3097 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3097 000016A7 000000000000000000 
  3098 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3098 000016B9 000000000000000000 
  3099 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3099 000016CB 0000000000         
  3100 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3100 000016D9 4E4F204E41         
  3101 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3101 000016E7 00004641           
  3102 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3103                                  
  3104                                  %endif
  3105                                  
  3106                                  ; 09/12/2023
  3107                                  %if 0
  3108                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  3109                                  
  3110                                  bdss:		dw 0FFFFh		
  3111                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3112                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3113                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3114                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3115                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3116                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3117                                  		db 32h,	20h, 20h, 20h, 0
  3118                                  		dw 0FFFFh
  3119                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3120                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3121                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3122                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3123                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3124                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3125                                  		db 32h,	20h, 20h, 20h, 0
  3126                                  		dw 0FFFFh
  3127                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3128                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3129                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3130                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3131                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3132                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3133                                  		db 32h,	20h, 20h, 20h, 0
  3134                                  		dw 0FFFFh
  3135                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3136                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3137                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3138                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3139                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3140                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3141                                  		db 32h,	20h, 20h, 20h, 0
  3142                                  		dw 0FFFFh
  3143                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3144                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3145                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3146                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3147                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3148                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3149                                  		db 32h,	20h, 20h, 20h, 0
  3150                                  		dw 0FFFFh
  3151                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3152                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3153                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3154                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3155                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3156                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3157                                  		db 32h,	20h, 20h, 20h, 0
  3158                                  		dw 0FFFFh
  3159                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3160                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3161                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3162                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3163                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3164                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3165                                  		db 32h,	20h, 20h, 20h, 0
  3166                                  		dw 0FFFFh
  3167                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3168                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3169                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3170                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3171                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3172                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3173                                  		db 32h,	20h, 20h, 20h, 0
  3174                                  		dw 0FFFFh
  3175                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3176                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3177                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3178                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3179                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3180                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3181                                  		db 32h,	20h, 20h, 20h, 0
  3182                                  		dw 0FFFFh
  3183                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3184                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3185                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3186                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3187                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3188                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3189                                  		db 32h,	20h, 20h, 20h, 0
  3190                                  		dw 0FFFFh
  3191                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3192                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3193                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3194                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3195                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3196                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3197                                  		db 32h,	20h, 20h, 20h, 0
  3198                                  		dw 0FFFFh
  3199                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3200                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3201                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3202                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3203                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3204                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3205                                  		db 32h,	20h, 20h, 20h, 0
  3206                                  		dw 0FFFFh
  3207                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3208                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3209                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3210                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3211                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3212                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3213                                  		db 32h,	20h, 20h, 20h, 0
  3214                                  		dw 0FFFFh
  3215                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3216                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3217                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3218                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3219                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3220                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3221                                  		db 32h,	20h, 20h, 20h, 0
  3222                                  		dw 0FFFFh
  3223                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3224                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3225                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3226                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3227                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3228                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3229                                  		db 32h,	20h, 20h, 20h, 0
  3230                                  		dw 0FFFFh
  3231                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3232                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3233                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3234                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3235                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3236                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3237                                  		db 32h,	20h, 20h, 20h, 0
  3238                                  		dw 0FFFFh
  3239                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3240                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3241                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3242                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3243                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3244                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3245                                  		db 32h,	20h, 20h, 20h, 0
  3246                                  		dw 0FFFFh
  3247                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3248                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3249                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3250                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3251                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3252                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3253                                  		db 32h,	20h, 20h, 20h, 0
  3254                                  		dw 0FFFFh
  3255                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3256                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3257                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3258                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3259                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3260                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3261                                  		db 32h,	20h, 20h, 20h, 0
  3262                                  		dw 0FFFFh
  3263                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3264                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3265                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3266                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3267                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3268                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3269                                  		db 32h,	20h, 20h, 20h, 0
  3270                                  		dw 0FFFFh
  3271                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3272                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3273                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3274                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3275                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3276                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3277                                  		db 32h,	20h, 20h, 20h, 0
  3278                                  		dw 0FFFFh
  3279                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3280                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3281                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3282                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3283                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3284                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3285                                  		db 32h,	20h, 20h, 20h, 0
  3286                                  		dw 0FFFFh
  3287                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3288                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3289                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3290                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3291                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3292                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3293                                  		db 32h,	20h, 20h, 20h, 0
  3294                                  		dw 0FFFFh
  3295                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3296                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3297                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3298                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3299                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3300                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3301                                  		db 32h,	20h, 20h, 20h, 0
  3302                                  		dw 0FFFFh
  3303                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3304                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3305                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3306                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3307                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3308                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3309                                  		db 32h,	20h, 20h, 20h, 0
  3310                                  		db 0
  3311                                  %endif
  3312                                  
  3313                                  ;---------------------------------------------------------------------------
  3314                                  ; Possibly disposable data, goes at end of data group
  3315                                  ;***************************************************************************
  3316                                  
  3317                                  ; Possibly disposable data, goes at end of data group
  3318                                  
  3319                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  3320                                  ;
  3321                                  ;	entry:	(ah) = function, 02 or 0a for read.
  3322                                  ;		(dl) = drive number (80h or 81h).
  3323                                  ;		(dh) = head number.
  3324                                  ;		(ch) = cylinder number.
  3325                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  3326                                  ;		(al) = number of sectors.
  3327                                  ;		(es:bx) = address of read buffer.
  3328                                  ;		for more on register contents see rom bios listing.
  3329                                  ;		stack set up for return by an iret.
  3330                                  ;
  3331                                  ;	exit:	(ah) = status of current operation.
  3332                                  ;		(cy) = 1 if failed, 0 if successful.
  3333                                  ;		for other register contents see rom bios listing.
  3334                                  ;
  3335                                  ;	uses:	
  3336                                  ;
  3337                                  ;
  3338                                  ;	warning: uses old13 vector for non-read calls.
  3339                                  ;		does direct calls to the at rom.
  3340                                  ;		does segment arithmatic.
  3341                                  ;
  3342                                  ;	effects: performs disk i/o operation.
  3343                                  
  3344                                  ; 16/10/2022
  3345                                  ; 28/05/2019
  3346                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  3347                                  
  3348                                  ;* offsets into cmd_block for registers
  3349                                  
  3350                                  pre_comp equ 0	;write pre-compensation
  3351                                  sec_cnt	 equ 1	;sector count
  3352                                  sec_num	 equ 2	;sector number
  3353                                  cyl_low	 equ 3	;cylinder number, low part
  3354                                  cyl_high equ 4	;cylinder number, high part
  3355                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  3356                                  		;            bit 4 = drive number, bits 3-0 have head number)
  3357                                  cmd_reg  equ 6	;command register
  3358                                  
  3359                                  ; 01/10/2022
  3360                                  disk_status1	equ 74h
  3361                                  hf_num		equ 75h
  3362                                  control_byte	equ 76h
  3363                                  
  3364                                  ibm_disk_io:				
  3365 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  3366 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  3367 000016F7 80FC02                  		cmp	ah, 2
  3368 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  3369 000016FC 80FC0A                  		cmp	ah, 0Ah
  3370 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  3371                                  atd1:
  3372 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  3373                                  		;jmp	cs:Old13	; use rom int 13h handler
  3374                                  ;-----------------------------------------------------------------------------
  3375                                  
  3376                                  atd2:					
  3377 00001706 53                      		push	bx
  3378 00001707 51                      		push	cx
  3379 00001708 52                      		push	dx
  3380 00001709 57                      		push	di
  3381 0000170A 1E                      		push	ds
  3382 0000170B 06                      		push	es
  3383 0000170C 50                      		push	ax
  3384 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  3385                                  					; establish bios segment addressing
  3386 00001710 8ED8                    		mov	ds, ax
  3387                                  		; 16/10/2022
  3388 00001712 C606740000              		mov	byte [disk_status1], 0
  3389                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  3390                                  					; initially no error code.
  3391 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  3392 0000171A 3A167500                		cmp	dl, [hf_num]
  3393                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  3394 0000171E 7207                    		jb	short atd3	; disk number in range
  3395                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  3396 00001720 C606740001              		mov	byte [disk_status1], 1
  3397 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  3398                                  					; return
  3399                                  ; ----------------------------------------------------------------------------
  3400                                  
  3401                                  atd3:					
  3402 00001727 53                      		push	bx
  3403 00001728 8CC0                    		mov	ax, es
  3404 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  3405 0000172D 01D8                    		add	ax, bx
  3406 0000172F 8EC0                    		mov	es, ax
  3407 00001731 5B                      		pop	bx
  3408 00001732 83E30F                  		and	bx, 0Fh
  3409 00001735 0E                      		push	cs
  3410 00001736 E8DF00                  		call	check_dma
  3411 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  3412 0000173B 58                      		pop	ax
  3413 0000173C 50                      		push	ax
  3414 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  3415 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  3416 00001743 EE                      		out	dx, al		; write out command modifier
  3417 00001744 E86B00                  		call	docmd		; carry out command
  3418                                  ; ----------------------------------------------------------------------------
  3419                                  
  3420                                  atd4:	
  3421                                  
  3422                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  3423                                  ;	      and save a couple bytes while were at it.
  3424                                  				
  3425 00001747 58                      		pop	ax
  3426                                  		;mov	ah, ds:74h	; [disk_status1]
  3427 00001748 8A267400                		mov	ah, [disk_status1]
  3428 0000174C 08E4                    		or	ah, ah
  3429 0000174E 7401                    		jz	short atd5
  3430 00001750 F9                      		stc
  3431                                  atd5:					
  3432 00001751 07                      		pop	es
  3433 00001752 1F                      		pop	ds
  3434 00001753 5F                      		pop	di
  3435 00001754 5A                      		pop	dx
  3436 00001755 59                      		pop	cx
  3437 00001756 5B                      		pop	bx
  3438 00001757 CA0200                  		retf	2		; far return, dropping flags
  3439                                  
  3440                                  ; =============== S U B	R O U T	I N E ========================================
  3441                                  
  3442                                  ;***	setcmd - set up cmd_block for the disk operation
  3443                                  ;
  3444                                  ;	entry:	(ds) = bios data segment.
  3445                                  ;		(es:bx) in seg:000x form.
  3446                                  ;		other registers as in int 13h call
  3447                                  ;	
  3448                                  ;	exit:	cmd_block set up for disk read call.
  3449                                  ;		control_byte set up for disk operation.
  3450                                  ;		(al) = control byte modifier
  3451                                  ;
  3452                                  ;	sets the fields of cmd_block using the register contents
  3453                                  ;	and the contents of the disk parameter block for the given drive.
  3454                                  ;
  3455                                  ;	warning: (ax) destroyed.
  3456                                  ;		does direct calls to the at rom.
  3457                                  
  3458                                  setcmd:		; proc near		
  3459                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  3460                                  		; 16/10/2022
  3461 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  3462                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  3463 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  3464 00001762 80FC02                  		cmp	ah, 2
  3465 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  3466 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  3467                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  3468                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  3469                                  setc1:					
  3470 0000176C 88C8                    		mov	al, cl
  3471 0000176E 243F                    		and	al, 3Fh		; mask sector number
  3472                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  3473                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  3474 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  3475 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  3476 00001777 88C8                    		mov	al, cl
  3477 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  3478                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  3479 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  3480 0000177F 89D0                    		mov	ax, dx
  3481 00001781 C0E004                  		shl	al, 4		; drive	number
  3482 00001784 80E40F                  		and	ah, 0Fh
  3483 00001787 08E0                    		or	al, ah		; head number
  3484 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  3485                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  3486 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  3487 0000178E 06                      		push	es
  3488 0000178F 53                      		push	bx
  3489 00001790 0E                      		push	cs
  3490 00001791 E85C00                  		call	get_vec
  3491 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  3492                                  			 		; write pre-comp from disk parameters
  3493 00001798 C1E802                  		shr	ax, 2
  3494                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  3495 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  3496                                  					; only use low part
  3497 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  3498                                  					; control byte modifier
  3499 000017A2 5B                      		pop	bx
  3500 000017A3 07                      		pop	es
  3501                                  		;mov	ah, ds:76h	; [control_byte]
  3502 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  3503 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  3504 000017AB 08C4                    		or	ah, al
  3505                                  		;mov	ds:76h,	ah
  3506 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  3507 000017B1 C3                      		retn
  3508                                  
  3509                                  ; =============== S U B	R O U T	I N E ========================================
  3510                                  
  3511                                  ;***	docmd - carry out read operation to at hard disk
  3512                                  ;
  3513                                  ;	entry:	(es:bx) = address for read in data.
  3514                                  ;		cmd_block set up for disk read.
  3515                                  ;
  3516                                  ;	exit:	buffer at (es:bx) contains data read.
  3517                                  ;		disk_status1 set to error code (0 if success).
  3518                                  ;
  3519                                  ;	
  3520                                  ;
  3521                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  3522                                  ;		no check is made for dma boundary overrun.
  3523                                  ;
  3524                                  ;	effects: programs disk controller.
  3525                                  ;		performs disk input.
  3526                                  
  3527                                  docmd:		; proc near		
  3528 000017B2 89DF                    		mov	di, bx
  3529 000017B4 0E                      		push	cs
  3530 000017B5 E84000                  		call	command
  3531 000017B8 7535                    		jnz	short doc3
  3532                                  doc1:					
  3533 000017BA 0E                      		push	cs
  3534 000017BB E84200                  		call	waitt		; wait for controller to complete read
  3535 000017BE 752F                    		jnz	short doc3
  3536 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  3537 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  3538 000017C6 FC                      		cld			; string op goes up
  3539 000017C7 FA                      		cli			; disable interrupts
  3540                                  					; (bug was forgetting this)
  3541                                  
  3542                                  ;	M062 -- some of these old machines have intermittent failures
  3543                                  ;		when the read is done at full speed. Instead of using
  3544                                  ;		a string rep instruction, we'll use a loop. There is
  3545                                  ;		a slight performance hit, but it only affects these
  3546                                  ;		very old machines with an exact date code match, and
  3547                                  ;		it makes said machines more reliable
  3548                                  ;
  3549                                  ;M062	repz	insw		;read in sector
  3550                                  
  3551                                  rsct_loop:				
  3552 000017C8 6D                      		insw
  3553 000017C9 E2FD                    		loop	rsct_loop
  3554 000017CB FB                      		sti
  3555                                  		; 16/10/2022
  3556 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  3557                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  3558                                  					; (ds =	40h)
  3559 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  3560 000017D3 0E                      		push	cs
  3561 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  3562 000017D7 7216                    		jb	short doc3
  3563 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  3564 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  3565 000017DF FA                      		cli
  3566 000017E0 F36C                    		rep insb		; read in ecc
  3567 000017E2 FB                      		sti
  3568                                  doc2:					
  3569 000017E3 0E                      		push	cs
  3570 000017E4 E82900                  		call	check_status
  3571 000017E7 7506                    		jnz	short doc3	; operation failed
  3572                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  3573 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  3574 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  3575                                  doc3:					
  3576 000017EF C3                      		retn
  3577                                  
  3578                                  ; =============== S U B	R O U T	I N E ========================================
  3579                                  
  3580                                  ;***	define where the rom routines are actually located
  3581                                  ;	   in the buggy old AT BIOS that we might need to
  3582                                  ;	   install a special level of int13 handler for
  3583                                  
  3584                                  ; 16/10/2022
  3585                                  
  3586                                  romsegment 	equ 0F000h  ; segment
  3587                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  3588                                  romwait		equ 2E7Fh   ; offset in romsegment
  3589                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  3590                                  romcheck_status equ 2EF8h   ; offset in romsegment
  3591                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  3592                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  3593                                  romfret		equ 0FF65h  ; far return in rom	
  3594                                  
  3595                                  ;***	get_vec - get pointer to hard disk parameters.
  3596                                  ;
  3597                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  3598                                  ;
  3599                                  ;	exit:	(es:bx) = address of disk parameters table.
  3600                                  ;
  3601                                  ;	uses:	ax for segment computation.
  3602                                  ;
  3603                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  3604                                  ;	or 70h (disk 1).
  3605                                  ;	
  3606                                  ;	warning: (ax) destroyed.
  3607                                  ;		this does a direct call to the at rom.
  3608                                  
  3609                                  get_vec:	; proc near		
  3610                                  		;push	0FF65h		; romfret ; far	return in rom
  3611                                  		;jmp	far ptr	0F000h:2F8Eh
  3612                                  		; 16/10/2022
  3613 000017F0 6865FF                  		push	romfret		; far return in rom
  3614 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  3615                                  
  3616                                  ; =============== S U B	R O U T	I N E ========================================
  3617                                  
  3618                                  ;***	command - send contents of cmd_block to disk controller.
  3619                                  ;
  3620                                  ;	entry:	control_byte 
  3621                                  ;		cmd_block - set up with values for hard disk controller.
  3622                                  ;
  3623                                  ;	exit:	disk_status1 = error code.
  3624                                  ;		nz if error, zr for no error.
  3625                                  ;
  3626                                  ;
  3627                                  ;	warning: (ax), (cx), (dx) destroyed.
  3628                                  ;		does a direct call to the at rom.
  3629                                  ;
  3630                                  ;	effects: programs disk controller.
  3631                                  
  3632                                  command:	; proc near		
  3633                                  		;push	0FF65h		; romfret ; far	return in rom
  3634                                  		;jmp	far ptr	0F000h:2E1Eh
  3635                                  		; 16/10/2022
  3636 000017F8 6865FF                  		push	romfret		; far return in rom
  3637 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  3638                                  
  3639                                  ; =============== S U B	R O U T	I N E ========================================
  3640                                  
  3641                                  ;***	waitt - wait for disk interrupt
  3642                                  ;
  3643                                  ;	entry:	nothing.
  3644                                  ;
  3645                                  ;	exit:	disk_status1 = error code.
  3646                                  ;		nz if error, zr if no error.
  3647                                  ;
  3648                                  ;
  3649                                  ;	warning: (ax), (bl), (cx) destroyed.
  3650                                  ;		does a direct call to the at rom.
  3651                                  ;		
  3652                                  ;	effects: calls int 15h, function 9000h.
  3653                                  
  3654                                  waitt:		; proc near		
  3655                                  		;push	0FF65h		; romfret ; far	return in rom
  3656                                  		;jmp	far ptr	0F000h:2E7Fh
  3657                                  		; 16/10/2022
  3658 00001800 6865FF                  		push	romfret		; far return in rom
  3659 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  3660                                  
  3661                                  ; =============== S U B	R O U T	I N E ========================================
  3662                                  
  3663                                  ;***	wait_drq - wait for data request.
  3664                                  ;
  3665                                  ;	entry:	nothing.
  3666                                  ;
  3667                                  ;	exit:	disk_status1 = error code.
  3668                                  ;		cy if error, nc if no error.
  3669                                  ;
  3670                                  ;	warning: (al), (cx), (dx) destroyed.
  3671                                  ;		does a direct call to the at rom.
  3672                                  
  3673                                  wait_drq:	; proc near		
  3674                                  		;push	0FF65h		; romfret ; far	return in rom
  3675                                  		;jmp	far ptr	0F000h:2EE2h
  3676                                  		; 16/10/2022
  3677 00001808 6865FF                  		push	romfret		; far return in rom
  3678 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  3679                                  
  3680                                  ; =============== S U B	R O U T	I N E ========================================
  3681                                  
  3682                                  ;***	check_status - check hard disk status.
  3683                                  ;
  3684                                  ;	entry:	nothing.
  3685                                  ;
  3686                                  ;	exit:	disk_status1 = error code.
  3687                                  ;		nz if error, zr if no error.
  3688                                  ;
  3689                                  ;	warning: (ax), (cx), (dx) destroyed.
  3690                                  ;		does a direct call to the at rom.
  3691                                  
  3692                                  check_status:	; proc near		
  3693                                  		;push	0FF65h		; romfret ; far	return in rom
  3694                                  		;jmp	far ptr	0F000h:2EF8h
  3695                                  		; 16/10/2022
  3696 00001810 6865FF                  		push	romfret		; far return in rom
  3697 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  3698                                  
  3699                                  ; =============== S U B	R O U T	I N E ========================================
  3700                                  
  3701                                  ;***	check_dma - check for dma overrun 64k segment.
  3702                                  ;
  3703                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  3704                                  ;		cmd_block set up for operation.
  3705                                  ;
  3706                                  ;	exit:	disk_status1 - error code.
  3707                                  ;		cy if error, nc if no error.
  3708                                  ;
  3709                                  ;	warning: does a direct call to the at rom.
  3710                                  
  3711                                  check_dma:	; proc near		
  3712                                  		;push	0FF65h		; romfret ; far	return in rom
  3713                                  		;jmp	far ptr	0F000h:2F69h
  3714                                  		; 16/10/2022
  3715 00001818 6865FF                  		push	romfret		; far return in rom
  3716 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  3717                                  
  3718                                  ;-----------------------------------------------------------------------------
  3719                                  
  3720                                  endatrom:
  3721                                  
  3722                                  ; ----------------------------------------------------------------------------
  3723                                  
  3724                                  ;; M015 -- begin changes
  3725                                  ;;
  3726                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  3727                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  3728                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  3729                                  ;; If our init code detects this error, it will install this
  3730                                  ;; special Int13 hook through the same mechanism that was set
  3731                                  ;; up for the IBM patch above. This code is also dynamically
  3732                                  ;; relocated by MSINIT.
  3733                                  
  3734                                  compaq_disk_io:
  3735 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  3736                                  					;
  3737                                  					; the following	label defines the end of the at	rom patch.
  3738                                  					; this is used at configuration	time.
  3739                                  					;
  3740                                  					; warning!!!
  3741                                  					; this code will be dynamically	relocated by msinit
  3742 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  3743                                  no_hookit:				
  3744                                  		;jmp	cs:Old13
  3745                                  		; 16/10/2022
  3746 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  3747                                  
  3748                                  ; ----------------------------------------------------------------------------
  3749                                  
  3750                                  mebbe_hookit:
  3751 0000182A 80FA80                  		cmp	dl, 80h
  3752 0000182D 72F6                    		jb	short no_hookit
  3753 0000182F 1E                      		push	ds
  3754                                  		
  3755                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3756                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  3757                                  		;push	ax
  3758                                  		;mov	ax, 40h
  3759                                  		;mov	ds, ax
  3760                                  		;pop	ax
  3761 00001830 6A40                    		push	40h
  3762 00001832 1F                      		pop	ds
  3763                                  
  3764 00001833 9C                      		pushf
  3765                                  		;call	cs:Old13
  3766                                  		; 16/10/2022
  3767 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  3768 00001839 1F                      		pop	ds
  3769 0000183A CA0200                  		retf	2
  3770                                  
  3771                                  ; ----------------------------------------------------------------------------
  3772                                  
  3773 0000183D 00                      end_compaq_i13hook: db 0			
  3774                                  
  3775                                  ; =============== S U B	R O U T	I N E ========================================
  3776                                  
  3777                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3778                                  %if 0  
  3779                                  
  3780                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  3781                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  3782                                  
  3783                                  daycnt_to_day:	; proc far
  3784                                  
  3785                                  ; entry: [daycnt] = number of days since 1-1-80
  3786                                  ;
  3787                                  ; return: ch - century in bcd
  3788                                  ;	  cl - year in bcd
  3789                                  ;	  dh - month in bcd
  3790                                  ;	  dl - day in bcd
  3791                                  
  3792                                  		; 16/10/2022		
  3793                                  		push	word [cs:daycnt] ; save daycnt
  3794                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  3795                                  					; # days from 1-1-1980 to 1-1-2000
  3796                                  		jnb	short century20
  3797                                  		mov	byte [cs:base_century], 19
  3798                                  		mov	byte [cs:base_year], 80
  3799                                  		jmp	short years
  3800                                  ; ----------------------------------------------------------------------------
  3801                                  		
  3802                                  century20:				
  3803                                  		mov	byte [cs:base_century], 20
  3804                                  		mov	byte [cs:base_year], 0
  3805                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  3806                                  					; adjust daycnt
  3807                                  years:					
  3808                                  		xor	dx, dx
  3809                                  		mov	ax, [cs:daycnt]
  3810                                  		mov	bx, 1461	; (366+365*3)
  3811                                  					; # of days in a Leap year block
  3812                                  		div	bx		; AX = # of leap block,	DX = daycnt
  3813                                  		mov	[cs:daycnt], dx	; save daycnt left
  3814                                  		mov	bl, 4
  3815                                  		mul	bl		; AX = # of years. Less	than 100
  3816                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  3817                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  3818                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  3819                                  		jbe	short leapyear	; within 366+355+355+355 days.
  3820                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  3821                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  3822                                  		mov	cx, 3		; And next three years are normal
  3823                                  regularyear:				
  3824                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  3825                                  		jbe	short yeardone	; {if (daycnt >	365)
  3826                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  3827                                  		sub	word [cs:daycnt], 365	;   }
  3828                                  		loop	regularyear	; }
  3829                                  					;
  3830                                  					; should never fall through loop
  3831                                  leapyear:				
  3832                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  3833                                  					; change month table.
  3834                                  yeardone:				
  3835                                  		xor	bx, bx
  3836                                  		xor	dx, dx
  3837                                  		mov	ax, [cs:daycnt]
  3838                                  		;mov	si, offset month_tab
  3839                                  		mov	si, month_tab	; 19/10/2022
  3840                                  		mov	cx, 12
  3841                                  months:					
  3842                                  		inc	bl
  3843                                  
  3844                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3845                                  		;mov	dl, [cs:si]
  3846                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3847                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3848                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3849                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3850                                  		
  3851                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3852                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3853                                  					; dh=0
  3854                                  		jbe	short month_done
  3855                                  		inc	si		; next month
  3856                                  		sub	ax, dx		; adjust daycnt
  3857                                  		loop	months		;
  3858                                  					; should never fall through loop
  3859                                  month_done:				
  3860                                  		mov	byte [cs:month_tab+1], 28
  3861                                  					; restore month table value
  3862                                  		mov	dl, bl
  3863                                  		mov	dh, [cs:base_year]
  3864                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3865                                  		call	far [cs:bintobcd]
  3866                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3867                                  					; dl = bcd day,	al = month
  3868                                  		xchg	dl, al
  3869                                  		call	far [cs:bintobcd]
  3870                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3871                                  		xchg	dh, al
  3872                                  		call	far [cs:bintobcd]
  3873                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3874                                  		xchg	cl, al
  3875                                  		call	far [cs:bintobcd]
  3876                                  		;call	cs:bintobcd	; ch = bcd century
  3877                                  		mov	ch, al
  3878                                  		pop	word [cs:daycnt] ; restore original value
  3879                                  		retf
  3880                                  
  3881                                  enddaycnttoday:	
  3882                                  
  3883                                  %endif
  3884                                  
  3885                                  ; =============== S U B	R O U T	I N E ========================================
  3886                                  
  3887                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3888                                  %if 0  
  3889                                  
  3890                                  bin_to_bcd:	; proc far		; real time clock support
  3891                                  
  3892                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3893                                  ;into a bcd value in al. ah destroyed.	
  3894                                  		
  3895                                  		push	cx		
  3896                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3897                                  		mov	cl, 4
  3898                                  		shl	ah, cl		; mov the high digit to	high nibble
  3899                                  		or	al, ah
  3900                                  		pop	cx
  3901                                  		retf
  3902                                  %endif
  3903                                  
  3904                                  ; ----------------------------------------------------------------------------
  3905                                  
  3906                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3907                                  ; resume facility. the system clock needs to be reset after resume.
  3908                                  
  3909                                  ; the following routine is executed at resume time when the system
  3910                                  ; powered on after suspension. it reads the real time clock and
  3911                                  ; resets the system time and date, and then irets.
  3912                                  
  3913                                  ; warning!!! this code will be dynamically relocated by msinit.
  3914                                  
  3915                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3916                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3917                                  int_6Ch:
  3918 0000183E 0E                      		push	cs
  3919 0000183F 1F                      		pop	ds
  3920                                  		;cmp	byte [cs:inHMA], 0  
  3921 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  3922 00001845 7405                    		jz      short int6c
  3923 00001847 BB[2A07]                		mov     bx, EnsureA20On
  3924 0000184A FFD3                    		call    bx
  3925                                  int6c:					
  3926                                  		;push	cs
  3927                                  		;pop	ds
  3928 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  3929 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  3930 00001854 9D                      		popf
  3931 00001855 E81300                  		call	read_real_date	; get the date from the clock
  3932 00001858 FA                      		cli
  3933 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  3934 0000185D FB                      		sti
  3935 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  3936 00001861 FA                      		cli
  3937 00001862 B401                    		mov	ah, 1
  3938 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3939                                  					; CX:DX	= clock	count
  3940                                  					; Return: time of day set
  3941 00001866 FB                      		sti
  3942                                  		;jmp	int6c_ret_addr	; long jump
  3943                                  		; 16/10/2022
  3944 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  3945                                  
  3946                                  ; =============== S U B	R O U T	I N E ========================================
  3947                                  
  3948                                  ;   read_real_date reads real-time clock for date and returns the number
  3949                                  ;   of days elapsed since 1-1-80 in si
  3950                                  
  3951                                  read_real_date:	; proc near		
  3952 0000186B 50                      		push	ax
  3953 0000186C 51                      		push	cx
  3954 0000186D 52                      		push	dx
  3955 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3956 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3957                                  					; Return: CX:DX	= clock	count
  3958                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3959                                  					; midnight
  3960                                  					; Otherwise, AL	> 0
  3961 00001872 5A                      		pop	dx
  3962 00001873 59                      		pop	cx
  3963 00001874 58                      		pop	ax
  3964 00001875 50                      		push	ax
  3965 00001876 53                      		push	bx
  3966 00001877 51                      		push	cx
  3967 00001878 52                      		push	dx
  3968                                  		;mov	word [cs:daycnt2], 1
  3969                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3970                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3971 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  3972                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3973 0000187F B404                    		mov	ah, 4
  3974 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3975                                  					; Return: DL = day in BCD
  3976                                  					; DH = month in	BCD
  3977                                  					; CL = year in BCD
  3978                                  					; CH = century (19h or 20h)
  3979 00001883 7303                    		jnb	short read_ok
  3980 00001885 E98300                  		jmp	r_d_ret
  3981                                  ;-----------------------------------------------------------------------------
  3982                                  
  3983                                  read_ok:
  3984 00001888 882E[FC05]              		mov	[bin_date_time], ch
  3985 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  3986 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  3987 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  3988                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3989                                  		; 08/08/2023
  3990                                  		;mov	byte [daycnt2], 2
  3991 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  3992 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  3993 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  3994                                  		;mov	word [cs:daycnt2], 3
  3995                                  		; 08/08/2023
  3996                                  		;mov	byte [daycnt2], 3
  3997 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  3998 000018A5 E8DB00                  		call	date_verify
  3999 000018A8 7261                    		jb	short r_d_ret
  4000                                  		;mov	word [cs:daycnt2], 0
  4001                                  		; 08/08/2023
  4002 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  4003 000018AF E8A100                  		call	in_bin
  4004 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  4005 000018B5 98                      		cbw
  4006 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  4007 000018BB 7503                    		jnz	short century_19 ; no
  4008 000018BD 83C064                  		add	ax, 100		; add in a century
  4009                                  century_19:				
  4010 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  4011 000018C3 B104                    		mov	cl, 4		; leap year every 4
  4012 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  4013 000018C7 88E3                    		mov	bl, ah		; save odd years
  4014 000018C9 98                      		cbw			; zero ah
  4015 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  4016                                  					; # of days in leap year blocks
  4017 000018CD F7E1                    		mul	cx
  4018                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  4019                                  		; 08/08/2023
  4020 000018CF A3[0006]                		mov	[daycnt2], ax
  4021 000018D2 88D8                    		mov	al, bl		; get odd years	count
  4022 000018D4 98                      		cbw
  4023 000018D5 09C0                    		or	ax, ax
  4024 000018D7 740B                    		jz	short leap_year
  4025 000018D9 B96D01                  		mov	cx, 365		; days in year
  4026 000018DC F7E1                    		mul	cx
  4027                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  4028                                  		; 08/08/2023
  4029 000018DE 0106[0006]              		add	[daycnt2], ax
  4030 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  4031                                  					; possibly account for a leap day
  4032                                  ;-----------------------------------------------------------------------------
  4033                                  
  4034                                  leap_year:
  4035 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  4036 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  4037                                  leap_adjustment:
  4038                                  		;inc	word [cs:daycnt2] ; account for leap day
  4039                                  		; 08/08/2023
  4040 000018EB FF06[0006]              		inc	word [daycnt2]
  4041                                  no_leap_adjustment:			
  4042 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  4043 000018F3 30ED                    		xor	ch, ch
  4044 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  4045                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  4046                                  		; 08/08/2023
  4047 000018F6 010E[0006]              		add	[daycnt2], cx
  4048 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  4049                                  		; 08/08/2023
  4050                                  		;xor	ch, ch
  4051 000018FE 49                      		dec	cx		; january starts at offset 0
  4052                                  		
  4053                                  		; 08/08/2023
  4054                                  		;shl	cx, 1		; word offset
  4055                                  		;;mov	si, month_table
  4056                                  		;add	si, cx
  4057                                  		;; 16/10/2022
  4058                                  		;; ds must be same with cs here, if so..
  4059                                  		;; what for cs: prefixes are used !?)
  4060                                  		;; mov	ax, [cs:si]
  4061                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  4062                                  		;mov	ax, [si]	; mov ax, [cs:si]
  4063                                  		;			; get #	days in	previous months
  4064                                  		;add	[cs:daycnt2], ax
  4065                                  
  4066                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  4067                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  4068 000018FF B400                    		mov	ah, 0
  4069 00001901 BE[8F04]                		mov	si, month_tab
  4070                                  r_d_sum_loop:
  4071 00001904 AC                      		lodsb
  4072 00001905 0106[0006]              		add	[daycnt2], ax
  4073 00001909 E2F9                    		loop	r_d_sum_loop
  4074                                  r_d_ret:
  4075                                  		;mov	si, [cs:daycnt2]
  4076                                  		; 08/08/2023
  4077 0000190B 8B36[0006]              		mov	si, [daycnt2]
  4078 0000190F 5A                      		pop	dx
  4079 00001910 59                      		pop	cx
  4080 00001911 5B                      		pop	bx
  4081 00001912 58                      		pop	ax
  4082 00001913 C3                      		retn
  4083                                  
  4084                                  ;-----------------------------------------------------------------------------
  4085                                  
  4086                                  r_t_retj:				
  4087 00001914 31C9                    		xor	cx, cx
  4088 00001916 31D2                    		xor	dx, dx
  4089 00001918 EB38                    		jmp	short r_t_ret
  4090                                  
  4091                                  ; =============== S U B	R O U T	I N E ========================================
  4092                                  
  4093                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  4094                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  4095                                  
  4096                                  read_real_time:	; proc near		
  4097 0000191A B402                    		mov	ah, 2
  4098 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  4099                                  					; Return: CH = hours in	BCD
  4100                                  					; CL = minutes in BCD
  4101                                  					; DH = seconds in BCD
  4102 0000191E 72F4                    		jb	short r_t_retj
  4103 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  4104 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  4105 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  4106 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  4107 00001931 E89F00                  		call	bcd_verify
  4108 00001934 72DE                    		jb	short r_t_retj
  4109 00001936 E88500                  		call	time_verify
  4110 00001939 72D9                    		jb	short r_t_retj
  4111 0000193B E81500                  		call	in_bin		; from bcd to bin
  4112 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  4113 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  4114 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  4115 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  4116                                  		; 16/10/2022
  4117                                  		; 17/09/2022
  4118                                  		; 31/05/2019
  4119 0000194E FF1E[0606]              		call	far [ttticks] 
  4120                                  		;call	dword ptr ttticks ; note: indirect far call
  4121                                  					; cx:dx	= number of ticks
  4122                                  					; (at 18.2 ticks per sec.)
  4123                                  r_t_ret:				
  4124 00001952 C3                      		retn
  4125                                  
  4126                                  ; =============== S U B	R O U T	I N E =======================================
  4127                                  
  4128                                  ;   in_bin converts bin_date_time values from bcd to bin
  4129                                  
  4130                                  in_bin:		; proc near
  4131 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  4132 00001956 E81F00                  		call	bcd_to_bin
  4133 00001959 A2[FC05]                		mov	[bin_date_time], al
  4134 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  4135 0000195F E81600                  		call	bcd_to_bin
  4136 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  4137 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  4138 00001968 E80D00                  		call	bcd_to_bin
  4139 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  4140 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  4141 00001971 E80400                  		call	bcd_to_bin
  4142 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  4143 00001977 C3                      		retn
  4144                                  
  4145                                  ; =============== S U B	R O U T	I N E =======================================
  4146                                  
  4147                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  4148                                  ;   a binary representation in al
  4149                                  ;   ah is destroyed
  4150                                  
  4151                                  bcd_to_bin:	; proc near
  4152 00001978 88C4                    		mov	ah, al
  4153 0000197A 240F                    		and	al, 0Fh
  4154 0000197C B104                    		mov	cl, 4
  4155 0000197E D2EC                    		shr	ah, cl
  4156 00001980 D50A                    		aad
  4157 00001982 C3                      		retn
  4158                                  
  4159                                  ; =============== S U B	R O U T	I N E ========================================
  4160                                  
  4161                                  ;   date_verify loosely checks bcd date values to be in range
  4162                                  ;   in bin_date_time
  4163                                  
  4164                                  date_verify:	; proc near
  4165 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  4166 00001988 7732                    		ja	short date_error
  4167 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  4168 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  4169                                  		;jb	short date_error
  4170                                  		; 12/12/2022
  4171 00001991 722A                    		jb	short date_err2
  4172 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  4173                                  		;jb	short date_error
  4174                                  		; 12/12/2022
  4175 00001998 7223                    		jb	short date_err2
  4176                                  century_20:
  4177 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  4178 0000199F 771B                    		ja	short date_error
  4179 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  4180 000019A6 7714                    		ja	short date_error
  4181 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  4182                                  		;jbe	short date_error
  4183 000019AD 760D                    		jna	short date_error
  4184 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  4185 000019B4 7706                    		ja	short date_error
  4186                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  4187                                  		;;jbe	short date_error
  4188                                  		;jna	short date_error
  4189                                  		; 12/12/2022
  4190                                  		; cf=0
  4191                                  		;clc
  4192                                  		; 12/12/2022
  4193 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  4194 000019BB C3                      		retn
  4195                                  ;-----------------------------------------------------------------------------
  4196                                  
  4197                                  date_error:
  4198 000019BC F9                      		stc
  4199                                  date_err2:
  4200 000019BD C3                      		retn
  4201                                  
  4202                                  ; =============== S U B	R O U T	I N E ========================================
  4203                                  
  4204                                  ; time_verify very loosely checks bcd date values to be in range
  4205                                  ; in bin_date_time
  4206                                  
  4207                                  time_verify:	; proc near
  4208 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  4209 000019C3 770C                    		ja	short time_error
  4210 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  4211 000019CA 7705                    		ja	short time_error
  4212                                  		; 12/12/2022h
  4213                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  4214                                  		;ja	short time_error
  4215                                  		;clc
  4216                                  		;retn
  4217                                  		; 12/12/2022
  4218 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  4219                                  time_error:
  4220                                  bv_error:
  4221 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  4222 000019D2 C3                      		retn
  4223                                  
  4224                                  ; ----------------------------------------------------------------------------
  4225                                  
  4226                                  ;time_error:				
  4227                                  		;stc
  4228                                  		;retn
  4229                                  
  4230                                  ; =============== S U B	R O U T	I N E ========================================
  4231                                  
  4232                                  ;   bcd_verify checks values in bin_date_time to be valid
  4233                                  ;   bcd numerals.  carry set if any nibble out of range
  4234                                  
  4235                                  bcd_verify:	; proc near
  4236 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  4237 000019D6 BB[FC05]                		mov	bx, bin_date_time
  4238                                  bv_loop:
  4239 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  4240 000019DB 88C4                    		mov	ah, al
  4241 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  4242                                  					; is 1's place in range?
  4243 000019E0 3C0A                    		cmp	al, 10
  4244 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  4245 000019E4 D0EC                    		shr	ah, 1
  4246 000019E6 D0EC                    		shr	ah, 1
  4247 000019E8 D0EC                    		shr	ah, 1
  4248 000019EA D0EC                    		shr	ah, 1
  4249 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  4250 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  4251 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  4252 000019F4 43                      		inc	bx		; next byte
  4253 000019F5 49                      		dec	cx
  4254 000019F6 75E1                    		jnz	short bv_loop
  4255 000019F8 F8                      		clc			; set success flag
  4256 000019F9 C3                      		retn
  4257                                  ; ----------------------------------------------------------------------------
  4258                                  
  4259                                  		; 12/12/2022
  4260                                  ;bv_error:
  4261                                  		;stc			; set error flag
  4262                                  		;retn
  4263                                  
  4264                                  ; ----------------------------------------------------------------------------
  4265                                  
  4266                                  endk09:
  4267                                  
  4268                                  ; ----------------------------------------------------------------------------
  4269                                  
  4270                                  ;------------------------------------------------------------------------
  4271                                  ;									:
  4272                                  ;	System initialization						:
  4273                                  ;									:
  4274                                  ;	The entry conditions are established by the bootstrap		:
  4275                                  ;	loader and are considered unknown. The following jobs		:
  4276                                  ;	will be performed by this module:				:
  4277                                  ;									:
  4278                                  ;	1.	All device initialization is performed			:
  4279                                  ;	2.	A local stack is set up and DS:SI are set		:
  4280                                  ;		to point to an initialization table. Then		:
  4281                                  ;		an inter-segment call is made to the first		:
  4282                                  ;		byte of the dos 					:
  4283                                  ;	3.	Once the dos returns from this call the ds		:
  4284                                  ;		register has been set up to point to the start		:
  4285                                  ;		of free memory. The initialization will then		:
  4286                                  ;		load the command program into this area 		:
  4287                                  ;		beginning at 100 hex and transfer control to		:
  4288                                  ;		this program.						:
  4289                                  ;									:
  4290                                  ;------------------------------------------------------------------------
  4291                                  
  4292                                  ; 01/10/2022
  4293                                  ; 08/01/2018 - Retro DOS v4.0
  4294                                  
  4295                                  ; drvfat must be the first location of freeable space!
  4296                                  
  4297                                  align 2
  4298                                  		;db 90h
  4299                                  
  4300                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4301                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  4302                                  
  4303                                  ; 30/12/2022
  4304                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  4305                                  	
  4306 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  4307                                  ; 09/12/2023
  4308                                  ;bios_l:	dw 0			; first	sector of data (low word)
  4309                                  ;bios_h:	dw 0			; first	sector of data (high word)
  4310                                  First_Data_Sector:
  4311 000019FC 0000                    		dw 0
  4312 000019FE 0000                    		dw 0
  4313 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  4314                                  ;fbigfat:	db 0			; flags	for drive
  4315 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  4316 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  4317                                  ; 09/12/2023
  4318 00001A06 00                      fbigfat:	db 0			; flags	for drive
  4319 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  4320 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  4321                                  ; 12/12/2023
  4322                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  4323 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  4324                                  
  4325                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  4326                                  ; call to determine drive parameters.
  4327                                  
  4328 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  4329 00001A0D 00                      		db 0	; 09/12/2023
  4330                                  ;sec_trk:	db 9			; sec/trk returned by rom
  4331 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  4332 00001A0F 00                      		db 0	; 09/12/2023
  4333                                  ; 09/12/2023
  4334 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  4335 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  4336                                  
  4337                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4338                                  Orig_Int1Eh_Table:
  4339 00001A12 0000                    		dw 0
  4340 00001A14 0000                    		dw 0
  4341                                  
  4342                                  ; ----------------------------------------------------------------------------
  4343                                  
  4344                                  ; 09/12/2023
  4345                                  %if 0
  4346                                  
  4347                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  4348                                  		dw 2048, 0201h, 112, 0
  4349                                  		dw 8192, 0402h, 256, 0
  4350                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  4351                                  		dw 65535, 1004h, 1024, 0
  4352                                  					; default disktable under
  4353                                  					; the assumption of total fat size <= 128 kb,
  4354                                  					; and the maximum size of fat entry = 16 bit.
  4355                                  %endif
  4356                                  
  4357                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4358                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  4359                                  
  4360                                  		; 09/12/2023
  4361                                  		; 08/08/2023
  4362                                  		; disktable.totalsectors: resw 1 ; high word
  4363                                  		;			  resw 1 ; low word
  4364                                  		; disktable.shiftcount:   resb 1
  4365                                  		; disktable.secperclus:   resb 1
  4366                                  		; disktable.rdirentries:  resw 1
  4367                                  		; disktable.bigflag:      resw 1
  4368 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  4368 00001A1F 00                 
  4369                                  					   ; (32680 sectors, 16340 KB)
  4370 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  4370 00001A29 00                 
  4371                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  4372 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  4372 00001A33 00                 
  4373 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  4373 00001A3D 00                 
  4374 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  4374 00001A47 00                 
  4375 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  4375 00001A51 00                 
  4376                                  		; 09/12/2023
  4377                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  4378 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  4378 00001A5B 00                 
  4379                                  					   ; (fbig and fbigbig flags are set)			
  4380                                  			
  4381                                  ; ----------------------------------------------------------------------------
  4382                                  
  4383                                  ;******************************************************
  4384                                  ;variables for mini disk initialization
  4385                                  ;******************************************************
  4386                                  
  4387                                  ; 01/10/2022
  4388                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  4389                                  
  4390 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  4391 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  4392 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  4393 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  4394                                  					; of bds table. needed to figure out
  4395                                  					; the dosdatasg address.
  4396 00001A62 0000                    mini_hdlim:	dw 0			
  4397 00001A64 0000                    mini_seclim:	dw 0
  4398                                  
  4399                                  ; 19/12/2023
  4400                                  ; 09/12/2023
  4401                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  4402                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  4403                                  
  4404                                  ;end of mini disk init variables **********************
  4405                                  
  4406                                  ; ----------------------------------------------------------------------------
  4407                                  			
  4408 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  4409                                  
  4410                                  ; 13/12/2022
  4411                                  %if 0
  4412                                  
  4413                                  ;align 2
  4414                                  		db  90h	
  4415                                  
  4416                                  ; the following are the recommended bpbs for the media that we know of so far.
  4417                                  
  4418                                  ;struc bpbx
  4419                                  ;   resw 1 ; 512
  4420                                  ;   resb 1
  4421                                  ;   resw 1 ; 1
  4422                                  ;   resb 1 ; 2
  4423                                  ;   resw 1
  4424                                  ;   resw 1
  4425                                  ;   resb 1
  4426                                  ;   resw 1
  4427                                  ;   resw 1
  4428                                  ;   resw 1 ; 2
  4429                                  ;   resw 1
  4430                                  ;   resw 1 ; hidden sector high
  4431                                  ;   resd 1 ; extended total sectors
  4432                                  ;.size:
  4433                                  ;endstruc
  4434                                  
  4435                                  ; 08/01/2019 - Retro DOS v4.0
  4436                                  
  4437                                  ; 20/04/2019
  4438                                  
  4439                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  4440                                  
  4441                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4442                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  4443                                  
  4444                                  ; 09/12/2022
  4445                                  BPB48T:
  4446                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  4447                                  		; 48 tpi diskettes	;
  4448                                  		dw	512		; physical sector size in bytes
  4449                                  		db	2		; sectors/allocation unit
  4450                                  		dw	1		; reserved sectors for dos
  4451                                  		db	2		; number of allocation tables
  4452                                  		dw	112		; number of directory entries
  4453                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  4454                                  		db	0FDh		; media descriptor
  4455                                  		dw	2		; number of fat sectors
  4456                                  		dw	9		; sectors per track
  4457                                  		dw	2		; heads
  4458                                  		dw	0		; hidden sector count (low word)
  4459                                  		dw	0		; hidden sector (high)
  4460                                  		dw	0		; number of sectors (low)
  4461                                  		dw	0		; number of sectors (high)
  4462                                  		; 09/12/2023
  4463                                  		; FAT32 extensions (to BDS)
  4464                                  		times	28 db 0
  4465                                  		;
  4466                                  		db 90h
  4467                                  ;align 2
  4468                                  BPB96T:
  4469                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  4470                                  		; 96 tpi diskettes	;
  4471                                  		dw	512		; physical sector size in bytes
  4472                                  		db	1		; sectors/allocation unit
  4473                                  		dw	1		; reserved sectors for dos
  4474                                  		db	2		; number of allocation tables
  4475                                  		dw	224		; number of directory entries
  4476                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  4477                                  		db	0F9h		; media descriptor
  4478                                  		dw	7		; number of fat sectors
  4479                                  		dw	15		; sectors per track
  4480                                  		dw	2		; heads
  4481                                  		dw	0		; hidden sector count (low word)
  4482                                  		dw	0		; hidden sector (high)
  4483                                  		dw	0		; number of sectors (low)
  4484                                  		dw	0		; number of sectors (high)
  4485                                  		; 09/12/2023
  4486                                  		; FAT32 extensions (to BDS)
  4487                                  		times	28 db 0
  4488                                  		;
  4489                                  		db 90h
  4490                                  ;align 2
  4491                                  BPB35:
  4492                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  4493                                  		; 3.5" diskettes - 720 KB ;		
  4494                                  		dw	512		; physical sector size in bytes
  4495                                  		db	2		; sectors/allocation unit
  4496                                  		dw	1		; reserved sectors for dos
  4497                                  		db	2		; number of allocation tables
  4498                                  		dw	112		; number of directory entries
  4499                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  4500                                  		db	0F9h		; media descriptor
  4501                                  		dw	3		; number of fat sectors
  4502                                  		dw	9		; sectors per track
  4503                                  		dw	2		; heads
  4504                                  		dw	0		; hidden sector count (low word)
  4505                                  		dw	0		; hidden sector (high)
  4506                                  		dw	0		; number of sectors (low)
  4507                                  		dw	0		; number of sectors (high)
  4508                                  		; 09/12/2023
  4509                                  		; FAT32 extensions (to BDS)
  4510                                  		times	28 db 0
  4511                                  		;
  4512                                  		db 90h
  4513                                  ;align 2
  4514                                  
  4515                                  ;align 2
  4516                                  ;BPB144:
  4517                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  4518                                  ;
  4519                                  ;		dw	512		; physical sector size in bytes
  4520                                  ;		db	1		; sectors/allocation unit
  4521                                  ;		dw	1		; reserved sectors for dos
  4522                                  ;		db	2		; number of allocation tables
  4523                                  ;		dw	224		; number of directory entries
  4524                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  4525                                  ;		db	0F0h		; media descriptor
  4526                                  ;		dw	9		; number of fat sectors
  4527                                  ;		dw	18		; sectors per track
  4528                                  ;		dw	2		; heads
  4529                                  ;		dw	0		; hidden sector count (low word)
  4530                                  ;		dw	0		; hidden sector (high)
  4531                                  ;		dw	0		; number of sectors (low)
  4532                                  ;		dw	0		; number of sectors (high)
  4533                                  ;
  4534                                  ;		db 90h
  4535                                  ;align 2
  4536                                  
  4537                                  BPB288:
  4538                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  4539                                  		; 3.5" diskettes - 2.88 MB ;	 
  4540                                  		dw	512		; physical sector size in bytes
  4541                                  		db	2		; sectors/allocation unit
  4542                                  		dw	1		; reserved sectors for dos
  4543                                  		db	2		; number of allocation tables
  4544                                  		dw	240		; number of directory entries
  4545                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  4546                                  		db	0F0h		; media descriptor
  4547                                  		dw	3		; number of fat sectors
  4548                                  		dw	9		; sectors per track
  4549                                  		dw	2		; heads
  4550                                  		dw	0		; hidden sector count (low word)
  4551                                  		dw	0		; hidden sector (high)
  4552                                  		dw	0		; number of sectors (low)
  4553                                  		dw	0		; number of sectors (high)
  4554                                  		; 09/12/2023
  4555                                  		; FAT32 extensions (to BDS)
  4556                                  		times	28 db 0
  4557                                  		;
  4558                                  		db 90h
  4559                                  ;align 2
  4560                                  
  4561                                  %endif
  4562                                  
  4563                                  ; ----------------------------------------------------------------------------
  4564                                  					; align	2
  4565                                  ; 09/12/2022
  4566                                  %if 0
  4567                                  bpbtable:	dw bpb48t		; 48tpi	drives
  4568                                  		dw bpb96t		; 96tpi	drives
  4569                                  		dw bpb35		; 3.5" drives
  4570                                  		dw bpb35		; unused 8" diskette
  4571                                  		dw bpb35		; unused 8" diskette
  4572                                  		dw bpb35		; used for hard	disk
  4573                                  		dw bpb35		; used for tape	drive
  4574                                  		dw bpb35		; FFOTHER
  4575                                  		dw bpb35		; ERIMO
  4576                                  		dw bpb288		; 2.88MB drive
  4577                                  		;
  4578                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  4579                                  %endif
  4580                                  
  4581                                  ; 13/12/2022
  4582                                  %if 0
  4583                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  4584                                  		dw BPB96T		; 96tpi	drives
  4585                                  		dw BPB35		; 3.5" drives
  4586                                  		dw BPB35		; unused 8" diskette
  4587                                  		dw BPB35		; unused 8" diskette
  4588                                  		dw BPB35		; used for hard	disk
  4589                                  		dw BPB35		; used for tape	drive
  4590                                  		dw BPB35		; FFOTHER
  4591                                  		dw BPB35		; ERIMO
  4592                                  		dw BPB288		; 2.88MB drive
  4593                                  		;
  4594                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  4595                                  
  4596                                  %endif
  4597                                  
  4598                                  ; ----------------------------------------------------------------------------
  4599                                  
  4600                                  ;	entry point to call utility functions in Bios_Code. At this time,
  4601                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  4602                                  ;	  will not yet be moved to its final resting place, so we know
  4603                                  ;	  it'll be low.
  4604                                  ;
  4605                                  ;	to use this function, do a "push cs" and load bp with the offset of
  4606                                  ;	  the function you want to call in Bios_Code. This routine will
  4607                                  ;	  push the address of a retf in Bios_Code onto the stack which
  4608                                  ;	  will get executed when the utility function finishes. It will
  4609                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  4610                                  ;	  and a retf
  4611                                  
  4612                                  ; 16/10/2022
  4613                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  4614                                  ; 09/12/2022
  4615                                  BC_RETF equ bc_retf
  4616                                  
  4617                                  ; 09/12/2023
  4618                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  4619                                  
  4620                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  4621                                  					; 2C7h:0C8h = 70h:2638h
  4622                                  					; 09/12/2023
  4623                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  4624 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  4625                                  
  4626                                  ; ----------------------------------------------------------------------------
  4627                                  
  4628                                  call_bios_code:	; proc far			
  4629 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  4630                                  					; set up near return to far return
  4631 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  4632 00001A7B 55                      		push	bp		; save offset of utility function
  4633 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  4634                                  
  4635                                  ; ----------------------------------------------------------------------------
  4636                                  
  4637                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  4638                                  		; 20/12/2022
  4639 00001A7D 00                      flp_drvs:	db 0
  4640                                  		; 11/12/2023
  4641                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  4642                                  firstcluster_hw: 
  4643 00001A7E 0000                    		dw 0	; 06/04/2024
  4644 00001A80 00                      Boot_Drv:	db 0
  4645                                  
  4646                                  ; ----------------------------------------------------------------------------
  4647                                  
  4648                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4649                                  ;-----------------------------------------------------------------------------
  4650                                  ; PCDOS 7.1 CD BOOT option code 
  4651                                  ;-----------------------------------------------------------------------------
  4652                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  4653                                  
  4654                                  cd_boot_option:
  4655 00001A81 50                      		push	ax
  4656 00001A82 1E                      		push	ds
  4657 00001A83 06                      		push	es
  4658 00001A84 52                      		push	dx
  4659                                  cdbo_1:
  4660 00001A85 B401                    		mov	ah, 1
  4661 00001A87 CD16                    		int	16h			; KEYBOARD - status
  4662 00001A89 7406                    		jz	short cdbo_2
  4663 00001A8B 30E4                    		xor	ah, ah
  4664 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4665                                  						; Return: AH = scan code, AL = character
  4666 00001A8F EBF4                    		jmp	short cdbo_1
  4667                                  cdbo_2:
  4668 00001A91 0E                      		push	cs
  4669 00001A92 1F                      		pop	ds
  4670 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  4671 00001A96 AC                      		lodsb
  4672                                  cdbo_3:
  4673 00001A97 BB0700                  		mov	bx, 7
  4674 00001A9A B40E                    		mov	ah, 0Eh
  4675 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4676                                  						; AL = character, BH = display page (alpha modes)
  4677                                  						; BL = foreground color (graphics modes)
  4678 00001A9E AC                      		lodsb
  4679 00001A9F 08C0                    		or	al, al
  4680 00001AA1 75F4                    		jnz	short cdbo_3
  4681 00001AA3 B84000                  		mov	ax, 40h
  4682 00001AA6 8ED8                    		mov	ds, ax
  4683                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  4684                                  		; 09/12/2023
  4685 00001AA8 8B166C00                		mov	dx, [6Ch]
  4686 00001AAC 8B366E00                		mov	si, [6Eh]
  4687                                  wait_for_key:
  4688                                  		;push	bx
  4689                                  		;mov	bx, 7
  4690                                  		; bx = 7
  4691 00001AB0 B8080E                  		mov	ax, 0E08h
  4692 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4693                                  						; AL = character, BH = display page (alpha modes)
  4694                                  						; BL = foreground color (graphics modes)
  4695 00001AB5 B8200E                  		mov	ax, 0E20h
  4696 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4697                                  						; AL = character, BH = display page (alpha modes)
  4698                                  						; BL = foreground color (graphics modes)
  4699 00001ABA B8080E                  		mov	ax, 0E08h
  4700 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4701                                  						; AL = character, BH = display page (alpha modes)
  4702                                  						; BL = foreground color (graphics modes)
  4703                                  		;pop	bx
  4704                                  		;add	bx, 18			; 18.2 ticks per second
  4705                                  		; 09/12/2023
  4706 00001ABF 83C212                  		add	dx, 18
  4707 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  4708                                  continue_to_wait:
  4709 00001AC5 B401                    		mov	ah, 1
  4710 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  4711 00001AC9 741B                    		jz	short cdbo_5
  4712 00001ACB B400                    		mov	ah, 0
  4713 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4714                                  						; Return: AH = scan code, AL = character
  4715                                  
  4716                                  		; 09/12/2023
  4717                                  		;cmp	ax, 11Bh ; ESC key
  4718                                  		;jz	short cdb0_7
  4719                                  ;cdbo_4:
  4720                                  		;push	ax ; *
  4721 00001ACF 89C2                    		mov	dx, ax ; *
  4722                                  
  4723                                  		; CRLF (next line)
  4724                                  		;mov	bx, 7
  4725                                  		; bx = 7
  4726 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  4727 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4728                                  						; AL = character, BH = display page (alpha modes)
  4729                                  						; BL = foreground color (graphics modes)
  4730 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  4731 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4732                                  						; AL = character, BH = display page (alpha modes)
  4733                                  						; BL = foreground color (graphics modes)
  4734                                  		; 09/12/2023
  4735                                  		;pop	ax ; *
  4736                                  			
  4737 00001ADB 81FA1B01                		cmp	dx, 11Bh
  4738                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  4739 00001ADF 7418                    		je	short cdbo_7
  4740                                  
  4741                                  cdbo_4:		; 10/12/2023
  4742 00001AE1 5A                      		pop	dx
  4743 00001AE2 07                      		pop	es
  4744 00001AE3 1F                      		pop	ds
  4745 00001AE4 58                      		pop	ax
  4746 00001AE5 C3                      		retn
  4747                                  cdbo_5:
  4748 00001AE6 3B366E00                		cmp	si, [6Eh]
  4749 00001AEA 7504                    		jnz	short cdbo_6
  4750                                  		; 09/12/2023
  4751 00001AEC 3B166C00                		cmp	dx, [6Ch]
  4752                                  		;cmp	bx, [6Ch]
  4753                                  cdbo_6:
  4754 00001AF0 73D3                    		jnb	short continue_to_wait
  4755 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  4756 00001AF7 75B7                    		jnz	short wait_for_key
  4757                                  cdbo_7:
  4758                                  		; 09/12/2023
  4759                                  		; CRLF (next line)
  4760                                  		;
  4761                                  		;mov	bx, 7
  4762                                  		;mov	ax, 0E0Dh
  4763                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4764                                  		;				; AL = character, BH = display page (alpha modes)
  4765                                  		;				; BL = foreground color (graphics modes)
  4766                                  		;mov	ax, 0E0Ah
  4767                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4768                                  		;				; AL = character, BH = display page (alpha modes)
  4769                                  		;				; BL = foreground color (graphics modes)
  4770                                  		
  4771 00001AF9 0E                      		push	cs
  4772 00001AFA 1F                      		pop	ds
  4773                                  		; 09/12/2023
  4774 00001AFB 1E                      		push	ds
  4775 00001AFC 07                      		pop	es
  4776                                  		; es = ds = cs
  4777                                  
  4778 00001AFD B8004B                  		mov	ax, 4B00h
  4779                                  		;xor	dl, dl
  4780                                  		; 09/12/2023
  4781 00001B00 31D2                    		xor	dx, dx
  4782                                  		; dl = disk drive = 0  ; fd
  4783                                  		;mov	si, 1C93h
  4784 00001B02 BE[571B]                		mov	si, empty_dap_buff
  4785 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4786                                  		; DS:SI = Specification packet filled		
  4787                                  
  4788                                  		;mov	dx, 80h
  4789                                  		;xor	ax, ax
  4790                                  		; 09/12/2023
  4791 00001B07 B81300                  		mov	ax, 19
  4792 00001B0A 89F7                    		mov	di, si	
  4793                                  		;mov	byte [si], 13h
  4794                                  		;mov	[si+1], al
  4795 00001B0C AB                      		stosw	
  4796                                  		;mov	[si+2], dx
  4797 00001B0D B080                    		mov	al, 80h
  4798 00001B0F AB                      		stosw
  4799 00001B10 89C2                    		mov	dx, ax
  4800                                  		;mov	[si+4], ax
  4801                                  		;mov	[si+6], ax
  4802                                  		;mov	[si+8], ax
  4803                                  		;mov	[si+0Ah], ax
  4804                                  		;mov	[si+0Ch], ax
  4805                                  		;mov	[si+0Eh], ax
  4806                                  		;mov	[si+10h], al
  4807                                  		;mov	[si+11h], al
  4808                                  		;mov	[si+12h], al
  4809 00001B12 B90F00                  		mov	cx, 15
  4810 00001B15 F3AA                    		rep	stosb
  4811                                  		; dl = disk drive = 80h ; hd
  4812 00001B17 B8004B                  		mov	ax, 4B00h
  4813 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4814 00001B1C 31C0                    		xor	ax, ax
  4815                                  		; 09/12/2023
  4816                                  		;mov	dx, 80h
  4817                                  		; dx = 80h
  4818 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  4819                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  4820                                  		; 09/12/2023
  4821                                  		;push	cs
  4822                                  		;pop	es
  4823                                  		; es = ds = cs		
  4824                                  
  4825 00001B20 B80102                  		mov	ax, 201h
  4826                                  		;mov	bx, 152h
  4827 00001B23 BB[5201]                		mov	bx, disksector
  4828                                  		;mov	cx, 1
  4829                                  		; 09/12/2023
  4830 00001B26 41                      		inc	cx ; cx = 1
  4831                                  		;mov	dx, 80h
  4832                                  		; dx = 80h
  4833 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  4834                                  						; AL = number of sectors to read, CH = track, CL = sector
  4835                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  4836                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  4837                                  		;jc	short cdbo_8
  4838                                  		; 10/12/2023
  4839 00001B29 72B6                    		jc	short cdbo_4
  4840                                  
  4841 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  4842                                  		;jz 	short cdbo_9
  4843                                  		; 10/12/2023
  4844 00001B32 75AD                    		jnz	short cdbo_4
  4845                                  ;cdbo_8:
  4846                                  		;jmp	short cdbo_4
  4847                                  ;cdbo_9:
  4848                                  		; 10/12/2023
  4849                                  		; (stack clearing -pop- is not necessary here, 
  4850                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  4851                                  		;pop	ax ; near call return address
  4852                                  		;pop	cx ; +++ ; ch = [MediaByte]
  4853                                  
  4854                                  		; 09/12/2023
  4855                                  		;push	cs
  4856                                  		;pop	ds
  4857                                  		; ds = cs
  4858 00001B34 31C0                    		xor	ax, ax	; 0
  4859 00001B36 BF007C                  		mov	di, 7C00h
  4860 00001B39 8EC0                    		mov	es, ax
  4861 00001B3B 89DE                    		mov	si, bx
  4862 00001B3D 06                      		push	es
  4863 00001B3E 57                      		push	di
  4864 00001B3F B90001                  		mov	cx, 100h ; 256
  4865                                  		; 10/12/2023
  4866                                  		;cld	; not necessary (direction flag is already cleared) 
  4867 00001B42 F3A5                    		rep movsw
  4868 00001B44 8ED8                    		mov	ds, ax
  4869 00001B46 BE7800                  		mov	si, 78h
  4870 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  4871 00001B4D 8904                    		mov	[si], ax
  4872 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  4873 00001B53 894402                  		mov	[si+2], ax
  4874 00001B56 CB                      		retf
  4875                                  
  4876                                  ; ----------------------------------------------------------------------------
  4877                                  dap_buffer: ; 16/12/2023
  4878                                  
  4879 00001B57 13                      empty_dap_buff:	db 19
  4880                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  4881 00001B58 00<rep 12h>             		times 18 db 0
  4882 00001B6A 05                      time_counter:	db 5	; 5 seconds
  4883 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  4884                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  4885                                  		; 09/12/2023
  4886 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  4886 00001B76 206B657920746F2062-
  4886 00001B7F 6F6F742066726F6D20-
  4886 00001B88 4344206F7220445644-
  4886 00001B91 202E2E2E00         
  4887                                  
  4888                                  ; ----------------------------------------------------------------------------
  4889                                  
  4890                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  4891                                  
  4892                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  4893                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  4894                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  4895                                  
  4896                                  ;-----------------------------------------------------------------------------
  4897                                  ; entry point from boot sector
  4898                                  ;-----------------------------------------------------------------------------
  4899                                  
  4900                                  init:		; 27/12/2018
  4901                                  		; MSDOS 6.0 (MSINIT.ASM)
  4902                                  		;=============================================================
  4903                                  		;
  4904                                  		; entry from boot sector. the register contents are:
  4905                                  		;
  4906                                  		;   dl = int 13 drive number we booted from
  4907                                  		;   ch = media byte
  4908                                  		;   bx = first data sector on disk.
  4909                                  		;   ax = first data sector (high)
  4910                                  		;   di = sectors/fat for the boot media.
  4911                                  
  4912                                  		; 10/12/2023
  4913                                  		; Retro DOS v5.0 (IBMBIO.COM)
  4914                                  		;=============================================================
  4915                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  4916                                                  ; DL = [BootDrive]
  4917                                  		; CH = [MediaByte]
  4918                                  		; AX:BX = First data Sector
  4919                                  		; DS:SI = Original INT 1Eh table address
  4920                                  		;
  4921                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  4922                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  4923                                  		; DI = 78h !not used!
  4924                                  
  4925                                  		; 07/04/2018
  4926                                  		;=============================================================
  4927                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  4928                                                  ; DL = [bsDriveNumber]
  4929                                  		; DH = [bsMedia]
  4930                                  		; AX = [bsSectors] ; Total sectors
  4931                                  		; DS = 0, SS = 0
  4932                                  		; BP = 7C00h
  4933                                  
  4934                                  		; 29/09/2023
  4935                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  4936                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  4937                                  
  4938                                  		; 10/12/2023 - Retro DOS v5.0
  4939                                  		; ------------------------------------------------------------
  4940                                  		; INPUT (registers from Retro DOS v4-v5 boot sector):
  4941                                  		;  DL = [bsDriveNumber]
  4942                                  		;  DH = [bsMedia]
  4943                                  		;  SS = 0
  4944                                  		;  BP = 7C00h (boot sector address)
  4945                                  		;
  4946                                  		; If the boot drive is a CD (CDROM) or DVD
  4947                                  		;    and CD boot option is enabled/requested:
  4948                                  		;    AX = 'CD'
  4949                                  		; If the boot drive is a FD or HD 
  4950                                  		;    or CD boot option is not enabled/requested:
  4951                                  		;    AX <> 'CD'
  4952                                  
  4953                                  ; 20/12/2022
  4954                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  4955                                  %if 0	
  4956                                  		cli
  4957                                  
  4958                                  		push	ax
  4959                                  		xor	ax, ax
  4960                                  		mov	ds, ax
  4961                                  		pop	ax
  4962                                  %endif
  4963                                  
  4964                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  4965                                  ; 10/12/2023 - Retro DOS v5.0 (combined kernel)
  4966                                  
  4967                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  4968                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  4969                                  
  4970                                  ;-----------------------------------------------------------------------------
  4971                                  ; initialization - stage 1
  4972                                  ;-----------------------------------------------------------------------------
  4973                                  ; 02/06/2018 - Retro DOS v3.0
  4974                                  
  4975                                  		; 10/12/2023
  4976 00001B96 FC                      		cld	; may not be necessary
  4977                                  		
  4978                                  		; 21/12/2022
  4979                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  4980                                  		;mov	bx, 60h
  4981                                  		;mov	es, bx
  4982                                  		;mov	si, bp
  4983                                  		;sub	di, di
  4984                                  		;mov	cx, 35 ; 70 bytes, 35 words
  4985                                  		;;mov	cl, 35
  4986                                  		;rep	movsw
  4987                                  
  4988                                  		; 10/12/2023 - Retro DOS v5.0
  4989 00001B97 3D4344                  		cmp	ax, 'CD' ; is CD boot option enabled or not ?
  4990 00001B9A 7503                    		jne	short init0
  4991                                  
  4992 00001B9C E8E2FE                  		call	cd_boot_option
  4993                                  init0:
  4994 00001B9F 0E                      		push	cs
  4995 00001BA0 1F                      		pop	ds
  4996                                  
  4997                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4998                                  		;mov	[Boot_Drv], dl
  4999                                  
  5000                                  		; 20/03/2019 - Retro DOS v4.0
  5001                                  		;cli		; turn interrupts off while manupulating stack
  5002                                  		;mov	ss, cx	; set stack segment register
  5003                                  
  5004 00001BA1 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  5005                                  
  5006                                  		;sti		; turn interrupts on
  5007                                  
  5008                                  		; 27/03/2018
  5009                                  		;mov	cx, KERNEL_SIZE	; words !
  5010                                  
  5011                                  		; 20/03/2019
  5012 00001BA4 B90080                  		mov	cx, 32768 ; 65536 bytes
  5013                                  
  5014                                  		; 21/12/2022
  5015                                  		; 07/04/2018
  5016 00001BA7 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  5017                                  		;mov	bl, KERNEL_SEGMENT
  5018 00001BAA 8EC3                    		mov	es, bx
  5019 00001BAC 31FF                    		xor	di, di
  5020 00001BAE 89FE                    		mov	si, di
  5021                                  		
  5022                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  5023                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  5024 00001BB0 F3A5                    		rep	movsw
  5025                                  
  5026                                  		; 20/03/2019 - Retro DOS v4.0
  5027 00001BB2 53                      		push	bx
  5028                                  		;push	init0
  5029 00001BB3 68[B71B]                		push	init1	; 10/12/2023
  5030 00001BB6 CB                      		retf
  5031                                  ;init0:
  5032                                  		; 10/12/2023 - Retro DOS 5.0	
  5033                                  init1:
  5034                                  		; 20/12/2022
  5035                                  		; (combined kernel file > 64KB)
  5036                                  
  5037                                  		; 20/03/2019
  5038 00001BB7 B520                    		mov	ch, 20h
  5039 00001BB9 8ED9                    		mov	ds, cx ; 2000h
  5040                                  		;mov	cx, 1070h
  5041 00001BBB B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  5042 00001BBE 8EC1                    		mov	es, cx
  5043                                  		
  5044                                  		; 21/12/2022
  5045                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  5046                                  		; 28/09/2023
  5047                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  5048                                  
  5049                                  		;mov	cx, KERNEL_SIZE - 32768
  5050                                  		; 28/09/2023 (BugFix)
  5051 00001BC0 B96616                  		mov	cx, NXWORDCOUNT
  5052                                  		;mov	cx, NXBYTECOUNT
  5053                                  		;shr	cx, 1 ; 28/09/2023
  5054                                  		;xor	si, si
  5055                                  		;xor	di, di
  5056 00001BC3 F3A5                    		rep	movsw
  5057                                  
  5058                                  		; 28/09/2023
  5059                                  		;; 17/06/2018 
  5060                                  		;mov	ds, bx
  5061                                  		;; 21/03/2019
  5062                                  		;mov	es, bx
  5063                                  ;init0:
  5064                                  ;		;push	es
  5065                                  ;		push	bx ; 20/03/2019
  5066                                  ;		push	init1 ; 07/04/2018
  5067                                  ;		retf	; jump to 0070h:init1
  5068                                  ;init:
  5069                                  ;init1:
  5070                                  		; 10/12/2023
  5071                                  init2:
  5072                                  		; 20/12/2022
  5073                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  5074                                  		; for full MSDOS compatibility.
  5075                                  
  5076                                  		; 10/12/2023
  5077                                  		;cli	; not necessary for INT 1Eh
  5078                                  
  5079 00001BC5 8EC1                    		mov	es, cx ; 0
  5080 00001BC7 8ED9                    		mov	ds, cx ; 0
  5081                                  
  5082 00001BC9 B82205                  		mov	ax, SEC9
  5083                                  
  5084                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  5085 00001BCC B378                    		mov	bl, 1Eh*4
  5086                                  				; INT 1Eh points to diskette parms table
  5087                                  
  5088                                  		; check if the table is already at 0:SEC9 (0:0522h)
  5089                                   		; (do not move the DPT if is not original ROMBIOS table)
  5090                                  
  5091                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  5092                                  		;;jnz	short mov_dpt
  5093                                  
  5094                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  5095                                  		;je	short dont_mov_dpt
  5096                                  
  5097                                  		;mov	si, [bx] ; [1Eh*4]		
  5098                                  ;mov_dpt:
  5099                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  5100 00001BCE C537                    		lds	si, [bx]
  5101                                  		
  5102                                  		; 10/12/2023 - Retro DOS v5.0
  5103                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  5104                                  		;mov	[cs:Orig_Int1Eh_Table], si
  5105                                  
  5106 00001BD0 89C7                    		mov	di, ax  ; SEC9
  5107 00001BD2 B10B                    		mov	cl, 11
  5108                                  		;cld
  5109 00001BD4 F3A4                    		rep	movsb
  5110                                  
  5111                                  		; Set INT 1Eh vector/pointer to the new DPT address
  5112 00001BD6 8ED9                    		mov	ds, cx ; 0
  5113 00001BD8 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  5114 00001BDA 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  5115                                  ;dont_mov_dpt:
  5116                                  
  5117                                  ; 20/12/2022 - Retro DOS v4.0
  5118                                  %if 0
  5119                                  		; 27/12/2018 - Retro DOS v4.0
  5120                                  		; 'Starting MS-DOS...' message
  5121                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  5122                                  		; (0070h:96A3h)
  5123                                  
  5124                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  5125                                  		mov     ah, 0Eh
  5126                                  		;bh = 0
  5127                                          	mov     bl, 7		; "normal" attribute and page
  5128                                  startmsg_nxt_chr:  
  5129                                  		lodsb
  5130                                  		or	al, al
  5131                                          	jz	short startmsg_ok
  5132                                         
  5133                                  		int	10h		; video write
  5134                                          	jmp	short startmsg_nxt_chr
  5135                                  
  5136                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  5137                                  
  5138                                  startmsg_ok:
  5139                                  
  5140                                  %endif
  5141                                  
  5142                                  ;-----------------------------------------------------------------------------
  5143                                  ; initialization - stage 2
  5144                                  ;-----------------------------------------------------------------------------
  5145                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  5146                                  
  5147                                  
  5148                                  ; 19/03/2018
  5149                                  ; Retro DOS v2.0 (24/02/2018)
  5150                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  5151                                  
  5152                                  ;------------------------------------------------------------------------
  5153                                  ;									:
  5154                                  ;	System initialization						:
  5155                                  ;									:
  5156                                  ;	The entry conditions are established by the bootstrap		:
  5157                                  ;	loader and are considered unknown. The following jobs		:
  5158                                  ;	will be performed by this module:				:
  5159                                  ;									:
  5160                                  ;	1.	All device initialization is performed			:
  5161                                  ;	2.	A local stack is set up and DS:SI are set		:
  5162                                  ;		to point to an initialization table. Then		:
  5163                                  ;		an inter-segment call is made to the first		:
  5164                                  ;		byte of the dos 					:
  5165                                  ;	3.	Once the dos returns from this call the ds		:
  5166                                  ;		register has been set up to point to the start		:
  5167                                  ;		of free memory. The initialization will then		:
  5168                                  ;		load the command program into this area 		:
  5169                                  ;		beginning at 100 hex and transfer control to		:
  5170                                  ;		this program.						:
  5171                                  ;									:
  5172                                  ;------------------------------------------------------------------------
  5173                                  		
  5174                                  		; 20/12/2022
  5175                                  		; ----------------------
  5176                                  		; Registers
  5177                                  		; ----------------------
  5178                                  		; DL = [bsDriveNumber]
  5179                                  		; DH = [bsMedia]
  5180                                  		; DS = 0, ES = 0, SS = 0
  5181                                  		; BP = 7C00h
  5182                                  		; SP = 700h
  5183                                  		; ----------------------
  5184                                  		; CX = 0				
  5185                                  
  5186                                  ; 02/10/2022 - 20/12/2022
  5187                                  ; ------------------------------------------------------------------------------
  5188                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  5189                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  5190                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  5191                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  5192                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  5193                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  5194                                  ; ------------------------------------------------------------------------------
  5195                                  
  5196                                  ; msload will check the extended boot record and set ax, bx accordingly.
  5197                                  ;
  5198                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  5199                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  5200                                  ;;	data sector of the bios.
  5201                                  ;
  5202                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  5203                                  ;		mov	[cs:bios_l], bx
  5204                                  
  5205                                  ; with the following information from msload, we don't need the
  5206                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  5207                                  ;     limitation of msbio.com file.
  5208                                  
  5209                                  		; 10/12/2023
  5210                                  		; 21/12/2022
  5211                                  		;cli
  5212                                  
  5213 00001BDD 0E                      		push	cs		; Save a peck of interrupt vectors...
  5214 00001BDE 07                      		pop	es
  5215                                  		;push	cx
  5216                                  		;push	di
  5217                                  
  5218                                  		; 20/12/2022
  5219 00001BDF B105                    		mov	cl, 5
  5220                                  		;mov	cx, 5		; NUMROMVECTORS
  5221                                  					; no. of rom vectors to	be saved
  5222                                  		;mov	si, offset RomVectors ; point to list of int vectors
  5223 00001BE1 BE[0001]                		mov	si, RomVectors
  5224                                  
  5225                                  		; 10/12/2023
  5226 00001BE4 FA                      		cli
  5227                                  next_int_:		
  5228 00001BE5 2E                      		cs	; 16/10/2022
  5229 00001BE6 AC                      		lodsb		
  5230                                  		;lods	byte ptr cs:[si] ; cs lodsb
  5231 00001BE7 98                      		cbw			; ax = interrupt number
  5232 00001BE8 D1E0                    		shl	ax, 1
  5233 00001BEA D1E0                    		shl	ax, 1		; int no * 4
  5234 00001BEC 89C7                    		mov	di, ax		; interrupt vector address
  5235 00001BEE 87FE                    		xchg	si, di		; rombios interrupt vector address in si
  5236                                  					; saving address in di
  5237                                  		;lodsw			; movsw
  5238                                  		;stosw
  5239                                  		;lodsw			; movsw
  5240                                  		;stosw			; save the vector
  5241                                  		; 20/12/2022
  5242 00001BF0 A5                      		movsw
  5243 00001BF1 A5                      		movsw		
  5244                                  
  5245 00001BF2 87FE                    		xchg	si, di
  5246 00001BF4 E2EF                    		loop	next_int_
  5247                                  		
  5248                                  		;pop	di
  5249                                  		;pop	cx
  5250                                  
  5251                                  ; we need to save int13 in two places in case we are running on an at.
  5252                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  5253                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  5254                                  ; rom int13 routine, we must have that rom address also stored away.
  5255                                  
  5256                                  		; 20/12/2022
  5257                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  5258                                  		;mov	[cs:Orig13], ax
  5259                                  		;mov	ax, [cs:Old13+2]
  5260                                  		;mov	[cs:Orig13+2], ax
  5261                                  
  5262                                  		; 10/12/2023
  5263                                  		;cli
  5264                                  
  5265                                  		; 16/10/2022
  5266 00001BF6 C7064C00[ED06]          		mov	word [13h*4], block13
  5267                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  5268                                  					; set up int 13	for new	action
  5269 00001BFC 8C0E4E00                		mov	[13h*4+2], cs
  5270                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  5271 00001C00 C7065400[9907]          		mov	word [15h*4], Int15
  5272                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  5273                                  					; set up int 15	for new	action
  5274 00001C06 8C0E5600                		mov	[15h*4+2], cs
  5275                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  5276 00001C0A C7066400[5907]          		mov	word [19h*4], int19
  5277                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  5278                                  					; set up int 19	for new	action
  5279 00001C10 8C0E6600                		mov	[19h*4+2], cs
  5280                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  5281                                  
  5282                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5283 00001C14 A16800                  		mov	ax, [68h]	 ; 1Ah*4
  5284 00001C17 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  5285 00001C1B C7066800[AF06]          		mov	word [68h], Int1A
  5286 00001C21 8C0E6A00                		mov	[6Ah], cs
  5287                                  
  5288                                  		; 20/12/2022
  5289 00001C25 0E                      		push	cs
  5290 00001C26 1F                      		pop	ds
  5291                                  		
  5292                                  		; 10/12/2023
  5293 00001C27 A3[AB06]                		mov	[Orig1A], ax
  5294 00001C2A 893E[AD06]              		mov	[Orig1A+2], di
  5295                                  
  5296 00001C2E A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  5297 00001C31 A3[B400]                		mov	[Orig13], ax
  5298 00001C34 A1[0801]                		mov	ax, [Old13+2]
  5299 00001C37 A3[B600]                		mov	[Orig13+2], ax
  5300                                  					; ;
  5301 00001C3A FB                      		sti
  5302 00001C3B CD11                    		int	11h		; EQUIPMENT DETERMINATION
  5303                                  					; Return: AX = equipment flag bits
  5304                                  		; 10/12/2023
  5305                                  		;jmp	short chk_fd_count
  5306                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  5307                                  		; ((signature))
  5308                                  		;push	dx		; 52h ; 'R'
  5309                                  		;push	ax		; 50h ; 'P'
  5310                                  		;push	bx		; 53h ; 'S'
  5311                                  
  5312                                  ; we have to support a system that does not have any diskette
  5313                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  5314                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  5315                                  ; otherwise, the system has only hardfiles.
  5316                                  ;
  5317                                  ; important thing is that still, for compatibility reason, the drive letter
  5318                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  5319                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  5320                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  5321                                  ; drives will get "invalid drive letter ..." message. we are going to
  5322                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  5323                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  5324                                  
  5325                                  ; check the register returned by the equipment determination interrupt
  5326                                  ; we have to handle the case of no diskettes in the system by faking
  5327                                  ; two dummy drives.
  5328                                  ;
  5329                                  ; if the register indicates that we do have floppy drives we don't need
  5330                                  ; to do anything special.
  5331                                  ;
  5332                                  ; if the register indicates that we don't have any floppy drives then
  5333                                  ; what we need to do is set the fakefloppydrv variable, change the
  5334                                  ; register to say that we do have floppy drives and then go to execute
  5335                                  ; the code which starts at notsingle. this is because we can skip the
  5336                                  ; code given below which tries to find if there are one or two drives
  5337                                  ; since we already know about this.
  5338                                  
  5339                                  chk_fd_count:	; 10/12/2023
  5340                                  		;or	ax, 1	; *!!*
  5341                                  
  5342                                  		; 06/05/2019 - Retro DOS v4.0
  5343 00001C3D 88C1                    		mov	cl, al
  5344                                  
  5345                                  		; 12/12/2022
  5346 00001C3F A801                    		test	al, 1
  5347                                  		;test	ax, 1		; floppy drives	present	?
  5348 00001C41 751E                    		jnz	short normalfloppydrv ;	yes.
  5349                                  
  5350                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  5351                                  ; whether it is an old ROM BIOS or a new one
  5352                                  ;
  5353                                  ; WARNING !!!
  5354                                  ;
  5355                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  5356                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  5357                                  
  5358                                  		; 20/12/2022
  5359                                  		;push	ax
  5360                                  		;push	bx
  5361                                  		;push	cx
  5362 00001C43 52                      		push	dx
  5363                                  		;push	di
  5364 00001C44 06                      		push	es
  5365                                  
  5366 00001C45 B408                    		mov	ah, 8
  5367 00001C47 B200                    		mov	dl, 0
  5368 00001C49 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5369                                  					; DL = drive number
  5370                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5371                                  					; DL = number of consecutive drives
  5372                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5373 00001C4B 7202                    		jc	short _gdskp_error
  5374                                  		;;mov	[cs:flp_drvs], dl
  5375                                  		; 20/12/2022
  5376                                  		; ds = cs
  5377                                  		;mov	[flp_drvs], dl
  5378 00001C4D 88D1                    		mov	cl, dl
  5379                                  _gdskp_error:	
  5380                                  		; 20/12/2022			
  5381 00001C4F 07                      		pop	es
  5382                                  		;pop	di
  5383 00001C50 5A                      		pop	dx
  5384                                  		;pop	cx
  5385                                  		;pop	bx
  5386                                  		;pop	ax
  5387                                  		
  5388 00001C51 720E                    		jc	short normalfloppydrv
  5389                                  					; if error it is an old ROM BIOS
  5390                                  					; so, lets assume that ROM BIOS lied
  5391                                  		; 20/12/2022
  5392                                  		; ds = cs
  5393                                  		;cmp	byte [flp_drvs], 0
  5394                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  5395                                  		;jz	short _set_fake_flpdrv
  5396                                  		;;mov	al, [cs:flp_drvs]
  5397                                  		;mov	al, [flp_drvs]
  5398                                  		;;dec	al		; make it zero based
  5399                                  		;; 18/12/2022
  5400                                  		;dec	ax
  5401                                  		;jmp	short got_num_flp_drvs
  5402                                  		
  5403                                  		; 20/12/2022
  5404 00001C53 08C9                    		or	cl, cl ; [flp_drvs]
  5405 00001C55 7403                    		jz	short _set_fake_flpdrv		
  5406 00001C57 49                      		dec	cx	
  5407 00001C58 EB0B                    		jmp	short got_num_flp_drvs
  5408                                  ; ----------------------------------------------------------------------------
  5409                                  
  5410                                  _set_fake_flpdrv:
  5411                                  		; 20/12/2022
  5412                                  		; ds = cs
  5413                                  		;inc	cl	; cl = 1
  5414                                  		; 10/12/2023
  5415 00001C5A 41                      		inc	cx	; cl = 1
  5416 00001C5B 880E[111A]              		mov	[fakefloppydrv], cl ; 1
  5417                                  		;mov	byte [fakefloppydrv], 1		
  5418                                  		;;mov	byte [cs:fakefloppydrv], 1
  5419                                  					; we don't have any floppy drives.
  5420                                  		; 20/12/2022
  5421                                  		;mov	ax, 1
  5422 00001C5F EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  5423                                  ; ----------------------------------------------------------------------------
  5424                                  
  5425                                  normalfloppydrv:			; yes, bit 0 is 1.			
  5426                                  		; 20/12/2022
  5427                                  		;rol	al, 1		; there	exist floppy drives.
  5428                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  5429 00001C61 D0C1                    		rol	cl, 1
  5430 00001C63 D0C1                    		rol	cl, 1
  5431                                  got_num_flp_drvs:			
  5432                                  		;;and	ax, 3		; only look at bits 0 &	1
  5433                                  		; 18/12/2022
  5434                                  		;and	al, 3
  5435                                  		; 20/12/2022
  5436 00001C65 80E103                  		and	cl, 3
  5437 00001C68 7505                    		jnz	short notsingle	; zero means single drive system
  5438                                  		; 20/12/2022
  5439 00001C6A 41                      		inc	cx
  5440                                  		;inc	ax		; pretend it's a two drive system
  5441                                  settwodrive:				; set this to two fakedrives
  5442                                  		; 20/12/2022
  5443                                  		; ds = cs
  5444 00001C6B FE06[7800]              		inc	byte [single]
  5445                                  		;inc	byte [cs:single] ; remember this
  5446                                  notsingle:	
  5447                                  		; 20/12/2022			
  5448                                  		;inc	ax		; ax has number	of drives, 2-4
  5449                                  		;			; is also 0 indexed boot drive if we
  5450                                  		;			; booted off hard file
  5451                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  5452                                  		
  5453                                  		; 20/12/2022
  5454                                  		;inc	cl	; cl >= 2
  5455                                  		; 10/12/2023
  5456 00001C6F 41                      		inc	cx	; cl >= 2
  5457                                  
  5458                                  ; 16/10/2022
  5459                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  5460                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  5461                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  5462                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  5463                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  5464                                  SEC9	EQU	522h	; address of disk parameters
  5465                                  CHROUT	EQU	29h
  5466                                  LSTDRV	EQU     504h
  5467                                  
  5468                                  ; determine whether we booted from floppy or hard disk...
  5469                                  
  5470                                  		; 20/12/2022
  5471 00001C70 88C8                    		mov	al, cl	; 26/05/2019
  5472                                  
  5473 00001C72 F6C280                  		test	dl, 80h		; boot from floppy ?
  5474 00001C75 7502                    		jnz	short gothrd	; no.
  5475 00001C77 31C0                    		xor	ax, ax		; indicate boot	from drive a
  5476                                  		; 10/12/2023
  5477                                  		;mov	[Boot_Drv], al
  5478                                  gothrd:
  5479                                  
  5480                                  ; MSDOS 6.0
  5481                                  ;   ax = 0-based drive we booted from
  5482                                  ;   bios_l, bios_h set.
  5483                                  ;   cl = number of floppies including fake one
  5484                                  ;   ch = media byte
  5485                                  
  5486                                  ; Retro DOS 4.0 - 27/12/2018 
  5487                                  ;  (from Retro DOS v2.0 boot sector)
  5488                                  ;   dl = int 13 drive number we booted from
  5489                                  ;   dh = media byte
  5490                                  
  5491                                  		; 20/12/2022
  5492 00001C79 88F5                    		mov	ch, dh		; 01/07/2018
  5493                                  
  5494                                  		; cl = number of floppies
  5495                                  		; ch = media byte
  5496                                  
  5497                                  		; set up local stack
  5498                                  
  5499                                  		; 20/12/2022
  5500                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  5501                                  					; bios_l, bios_h set.
  5502                                  					; cl = number of floppies including fake one
  5503                                  					; ch = media byte
  5504                                  		; 20/12/2022
  5505                                  		; es = ds = cs
  5506                                  		; ss = 0
  5507                                  		; sp = 700h
  5508                                  
  5509                                  		; 20/12/2022
  5510                                  		;cli
  5511                                  		;mov	ss, dx		; set stack segment and stack pointer
  5512                                  		;mov	sp, 700h
  5513                                  		;sti
  5514                                  
  5515 00001C7B 51                      		push	cx ; (***) 	; save number of floppies and media byte
  5516                                  		
  5517 00001C7C 88EC                    		mov	ah, ch		; FAT ID to AH
  5518 00001C7E 50                      		push	ax ; (**)	; save boot drive number and media byte
  5519                                  		
  5520                                  ; let model_byte, secondary_model_byte be set here!!!
  5521                                  
  5522 00001C7F B4C0                    		mov	ah, 0C0h
  5523 00001C81 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  5524 00001C83 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  5525 00001C85 80FC00                  		cmp	ah, 0
  5526 00001C88 7510                    		jnz	short no_rom_system_conf
  5527                                  
  5528                                  ;		; 20/12/2022
  5529                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  5530                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  5531                                  ;
  5532                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  5533                                  ;
  5534                                  ;		on return:
  5535                                  ;		CF = 0 if successful
  5536                                  ;		   = 1 if error
  5537                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  5538                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  5539                                  ;
  5540                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  5541                                  ;
  5542                                  ;		Offset Size	     Description
  5543                                  ;
  5544                                  ;		  00   word   length of descriptor (8 minimum)
  5545                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  5546                                  ;		  03   byte   secondary model byte
  5547                                  ;		  04   byte   BIOS revision level (zero based)
  5548                                  ;		  05   byte   feature information, see below
  5549                                  ;		  06   dword  reserved
  5550                                  
  5551                                  		; 20/12/2022
  5552                                  		; ds = cs
  5553 00001C8A 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  5554 00001C8E A2[AF05]                		mov	[model_byte], al
  5555                                  		;mov	[cs:model_byte], al
  5556                                  					; get/save model byte
  5557 00001C91 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  5558 00001C95 A2[B005]                		mov	[secondary_model_byte], al
  5559                                  		;mov	[cs:secondary_model_byte], al
  5560                                  					; get/save secondary model byte
  5561 00001C98 EB0C                    		jmp	short turn_timer_on
  5562                                  ;-----------------------------------------------------------------------------
  5563                                  
  5564                                  no_rom_system_conf:			
  5565 00001C9A BEFFFF                  		mov	si, 0FFFFh
  5566 00001C9D 8EC6                    		mov	es, si
  5567                                  		; 20/12/2022
  5568 00001C9F 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  5569 00001CA3 A2[AF05]                		mov	[model_byte], al
  5570                                  		;mov	[cs:model_byte], al ; save model byte
  5571                                  turn_timer_on:				
  5572 00001CA6 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  5573 00001CA8 E620                    		out	20h, al		; Interrupt controller,	8259A.
  5574                                  					; AKPORT
  5575                                  
  5576                                  ; some olivetti m24 machines have an 8530 serial communications
  5577                                  ; chip installed at io address 50h and 52h. if we're running
  5578                                  ; on one of those, we must inhibit the normal aux port initialization
  5579                                  
  5580                                  		; 20/12/2022
  5581                                  		; ds = cs
  5582 00001CAA 803E[AF05]00            		cmp	byte [model_byte], 0
  5583                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  5584 00001CAF 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  5585                                  					; (except olivetti m24)
  5586 00001CB1 E466                    		in	al, 66h		; is 8530 installed?
  5587 00001CB3 A820                    		test	al, 20h
  5588 00001CB5 740A                    		jz	short not_olivetti_m24 ; we're done if not
  5589 00001CB7 B00F                    		mov	al, 0Fh		; double check
  5590 00001CB9 E650                    		out	50h, al
  5591 00001CBB E450                    		in	al, 50h
  5592 00001CBD A801                    		test	al, 1		; this test was	copied from olivetti
  5593 00001CBF 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  5594                                  
  5595                                  not_olivetti_m24:
  5596 00001CC1 B003                    		mov	al, 3		; init com4
  5597 00001CC3 E8DB09                  		call	aux_init
  5598 00001CC6 B002                    		mov	al, 2		; init com3
  5599 00001CC8 E8D609                  		call	aux_init
  5600 00001CCB B001                    		mov	al, 1		; init com2
  5601 00001CCD E8D109                  		call	aux_init
  5602 00001CD0 30C0                    		xor	al, al		; init com1
  5603 00001CD2 E8CC09                  		call	aux_init
  5604                                  
  5605                                  skip_aux_port_init:
  5606 00001CD5 B002                    		mov	al, 2		; init lpt3
  5607 00001CD7 E8BF09                  		call	print_init
  5608 00001CDA B001                    		mov	al, 1		; init lpt2
  5609 00001CDC E8BA09                  		call	print_init
  5610 00001CDF 30C0                    		xor	al, al		; init lpt1
  5611 00001CE1 E8B509                  		call	print_init
  5612                                  
  5613                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5614                                  		;mov	di, 534h	; offset INITSPOT
  5615                                  		;;mov	di, INITSPOT	; 0534h
  5616                                  		;			; IBMDOS.COM's first cluster - high word
  5617                                  		;			; 520h (the 2nd entry of root dir) + 14h
  5618                                  		;mov	ax, [di]
  5619                                  		;mov	[firstcluster_hw], ax
  5620                                  
  5621 00001CE4 31D2                    		xor	dx, dx	; 0
  5622 00001CE6 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  5623 00001CE8 8EC2                    		mov	es, dx
  5624 00001CEA 31C0                    		xor	ax, ax
  5625                                  		; 16/10/2022
  5626 00001CEC BF3405                  		mov	di, INITSPOT	; 0534h
  5627                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  5628                                  					; IBM wants 4 zeros here
  5629 00001CEF AB                      		stosw
  5630 00001CF0 AB                      		stosw
  5631 00001CF1 8CC8                    		mov	ax, cs		; fetch	segment
  5632 00001CF3 C7066C00[0E06]          		mov	word [BRKADR], cbreak
  5633                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  5634                                  					; break	entry point
  5635 00001CF9 A36E00                  		mov	[BRKADR+2], ax		
  5636                                  		;mov	ds:6Eh,	ax	; vector for break
  5637 00001CFC C706A400[8206]          		mov	word [CHROUT*4], outchr
  5638                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  5639 00001D02 A3A600                  		mov	[CHROUT*4+2], ax
  5640                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  5641                                  
  5642 00001D05 BF0400                  		mov	di, 4
  5643 00001D08 BB[1406]                		mov	bx, intret ; 19/10/2022
  5644                                  		;mov	bx, offset intret ; intret (cs:intret)
  5645                                  					; will initialize rest of interrupts
  5646 00001D0B 93                      		xchg	ax, bx
  5647 00001D0C AB                      		stosw			; location 4
  5648 00001D0D 93                      		xchg	ax, bx		; cs:
  5649 00001D0E AB                      		stosw			; int 1	; location 6
  5650 00001D0F 83C704                  		add	di, 4
  5651 00001D12 93                      		xchg	ax, bx
  5652 00001D13 AB                      		stosw			; location 12
  5653 00001D14 93                      		xchg	ax, bx		; cs:
  5654 00001D15 AB                      		stosw			; int 3	; location 14
  5655 00001D16 93                      		xchg	ax, bx
  5656 00001D17 AB                      		stosw			; location 16
  5657 00001D18 93                      		xchg	ax, bx		; cs:
  5658 00001D19 AB                      		stosw			; int 4	; location 18
  5659                                  
  5660                                  ;		; 20/12/2022
  5661                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  5662                                  ;		Address Size	Description	(BIOS/DOS Data Area)
  5663                                  ;	
  5664                                  ;		50:00	byte	Print screen status byte
  5665                                  ;				 00 = PrtSc not active,
  5666                                  ;				 01 = PrtSc in progress
  5667                                  ;				 FF = error
  5668                                  ;		50:01  3 bytes	Used by BASIC
  5669                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  5670                                  ;		50:05  10bytes	POST work area
  5671                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  5672                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  5673                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  5674                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  5675                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  5676                                  ;		50:20	word	DOS dynamic storage
  5677                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  5678                                  ;		50:30	4bytes	MODE command
  5679                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  5680                                  
  5681 00001D1A 89160005                		mov	[0500h], dx ; 0
  5682                                  		;mov	ds:500h, dx	; set print screen & break = 0
  5683 00001D1E 89160405                		mov	[LSTDRV], dx	; [0504h]
  5684                                  		;mov	ds:504h, dx	; clean	out last drive spec
  5685                                  
  5686                                  ; we need to initialize the cs:motorstartup variable from the disk
  5687                                  ; parameter table at sec9. the offsets in this table are defined in
  5688                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  5689                                  
  5690 00001D22 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  5691                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  5692                                  					; [522h+0Ah]
  5693                                  		; 20/12/2022
  5694                                  		; ds = 0
  5695                                  
  5696 00001D25 2EA2[2601]              		mov	[cs:motorstartup], al
  5697 00001D29 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  5698 00001D2F 720B                    		jb	short no_diddle	; no
  5699 00001D31 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  5700                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  5701                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  5702 00001D37 C6062205DF              		mov	byte [SEC9+0], 0DFh
  5703                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  5704                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  5705                                  no_diddle:
  5706 00001D3C CD12                    		int	12h		; MEMORY SIZE -
  5707                                  					; Return: AX = number of contiguous 1K blocks of memory
  5708 00001D3E B106                    		mov	cl, 6
  5709 00001D40 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  5710                                  		
  5711                                  		; 20/12/2022
  5712                                  		; 03/07/2018 - 27/12/2018
  5713                                  		;pop	cx ; (**)
  5714                                  		;mov	[cs:drvfat], cx
  5715                                  		
  5716 00001D42 50                      		push	ax ; (*)	; save real top	of memory
  5717                                  
  5718                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  5719                                  
  5720                                  ;M068 - BEGIN
  5721                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  5722                                  
  5723                                  		; 20/12/2022
  5724                                  		; ds = 0
  5725                                  
  5726                                  		;push	ds
  5727                                  		;push	bx		; pushes not required but since this
  5728                                  					; happens to be a last minute change
  5729                                  					; & since it is only init code.
  5730                                  		;xor	bx, bx
  5731                                  		;mov	ds, bx
  5732                                  		
  5733                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  5734                                  		;mov	bx, [2Fh*4]
  5735                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  5736                                  		;mov	ds, [2Fh*4+2]
  5737                                  		; 29/09/2023
  5738 00001D43 C51EBC00                		lds	bx, [2Fh*4]
  5739                                  
  5740 00001D47 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  5741                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  5742 00001D4C 750F                    		jnz	short SkipRPL
  5743 00001D4E 807F054C                		cmp	byte [bx+5], 'L'
  5744                                  		;cmp	byte ptr [bx+5], 'L'
  5745 00001D52 7509                    		jnz	short SkipRPL
  5746 00001D54 89C2                    		mov	dx, ax		; get TOM into DX
  5747 00001D56 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  5748 00001D59 CD2F                    		int	2Fh		; Get new TOM from any RPL
  5749 00001D5B 89D0                    		mov	ax, dx
  5750                                  SkipRPL:	
  5751                                  		; 20/12/2022		
  5752                                  		;pop	bx
  5753                                  		;pop	ds
  5754                                  
  5755                                  ;M068 - END
  5756                                  		; 20/12/2022
  5757                                  		; 27/12/2018
  5758 00001D5D 0E                      		push	cs
  5759 00001D5E 1F                      		pop	ds
  5760                                  
  5761                                  		; 18/03/2019 - Retro DOS v4.0
  5762                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  5763                                  		;mov	[cs:fatloc], ax	; location to read fat
  5764                                  
  5765                                  		; 01/07/2018
  5766                                  		; 08/04/2018
  5767                                  		; 28/03/2018
  5768                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  5769 00001D5F 83E840                  		sub	ax, 64
  5770 00001D62 A3[041A]                		mov	[init_bootseg], ax ; 20/12/2022
  5771                                  		;mov	[cs:init_bootseg], ax
  5772                                  
  5773                                  		; 27/12/2018 - Retro DOS v4.0
  5774                                  		;;pop	ax ; (*)	; get back real top of memory
  5775                                  		;pop	dx ; (*)
  5776                                  		; 29/09/2023 - Retro DOS v4.2 (BugFix)
  5777 00001D65 58                      		pop	ax ; (*)	; get back real top of memory		
  5778                                  
  5779                                  
  5780                                  		; 20/12/2022
  5781                                  		; 27/12/2018
  5782 00001D66 59                      		pop	cx ; (**)
  5783 00001D67 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  5784                                  
  5785                                  		; 20/12/2022
  5786                                  
  5787                                  		;mov	dx, 46Dh	; SYSINIT segment
  5788                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)
  5789 00001D6B BAD904                  		mov	dx, SYSINITSEG	; 17/10/2022
  5790 00001D6E 8EDA                    		mov	ds, dx
  5791                                  
  5792                                  ; set pointer to resident device driver chain
  5793                                  
  5794                                  		; 17/10/2022
  5795 00001D70 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  5796                                  		;mov	word [273h], res_dev_list
  5797                                  		;;mov	word ptr ds:273h, offset res_dev_list
  5798                                  					; [SYSINIT+DEVICE_LIST]
  5799 00001D76 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  5800                                  		;mov	[275h], cs
  5801                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  5802                                  
  5803 00001D7A A3[9202]                		mov	[MEMORYSIZE], ax
  5804                                  		;mov	[292h], ax
  5805                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  5806                                  
  5807 00001D7D FEC1                    		inc	cl
  5808 00001D7F 880E[9602]              		mov	[DEFAULTDRIVE], cl
  5809                                  		;mov	[296h], cl
  5810                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  5811                                  
  5812                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  5813 00001D83 C706[7302]B309          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  5814                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  5815                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  5816                                  					; dos_load_seg
  5817                                  
  5818                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  5819                                  ; printer cards. we initialize this value to point to an iret only if
  5820                                  ;
  5821                                  ; 1) the original segment points to storage inside valid ram.
  5822                                  ;
  5823                                  ; 2) the original segment is 0F000:xxxx
  5824                                  
  5825                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  5826                                  		;;mov	ax, 544h	; 10/12/2023
  5827                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  5828                                  		;mov	es, ax
  5829                                  		; 20/12/2022
  5830                                  		;push	ds ; SYSINITSEG
  5831                                  		;pop	es
  5832 00001D89 8EC2                    		mov	es, dx ; SYSINITSEG
  5833 00001D8B 31C0                    		xor	ax, ax ; 0
  5834 00001D8D 8ED8                    		mov	ds, ax		; segment 0
  5835                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  5836 00001D8F A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  5837                                  		; 18/10/2022
  5838 00001D92 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  5839                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  5840 00001D97 7605                    		jbe	short resetintf
  5841 00001D99 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  5842 00001D9C 750A                    		jnz	short keepintf
  5843                                  resetintf:	
  5844 00001D9E C7063C00[1406]          		mov	word [0Fh*4], intret			
  5845                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  5846 00001DA4 8C0E3E00                		mov	word [0Fh*4+2], cs
  5847                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  5848                                  keepintf:				
  5849                                  ; end important
  5850                                  
  5851                                  ; 17/10/2022
  5852                                  ; 28/12/2018 - Retro DOS v4.0
  5853                                  
  5854                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  5855                                  ;
  5856                                  ; we will check if the system has ibm extended keyboard by
  5857                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  5858                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  5859                                  ; for the extended keyboard function. use cx as the temporary register.
  5860                                  
  5861                                  		; 20/12/2022
  5862                                  		; ds = 0
  5863                                  		;xor	cx, cx
  5864                                  		;mov	ds, cx
  5865                                  
  5866 00001DA8 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  5867                                  
  5868                                  		; 20/12/2022
  5869                                  		; 20/03/2019
  5870 00001DAC 0E                      		push	cs
  5871 00001DAD 1F                      		pop	ds
  5872                                  
  5873                                  		;test	cl, 00010000b ; 10h
  5874 00001DAE F6C110                  		test	cl, 10h		; extended keyboard ?
  5875 00001DB1 740A                    		jz	short org_key	; no, original keyboard
  5876                                  
  5877                                  		; 20/12/2022
  5878                                  		;  ds = cs
  5879 00001DB3 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  5880 00001DB8 C606[7F04]11            		mov	byte [keysts_func], 11h
  5881                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  5882                                  		;mov	byte [cs:keysts_func], 11h
  5883                                  					; change for extended keyboard functions
  5884                                  org_key:
  5885                                  
  5886                                  ; 02/06/2018 - Retro DOS v3.0
  5887                                  
  5888                                  ;**************************************************************
  5889                                  ;	will initialize the number of drives
  5890                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  5891                                  ;	the indications are as follows:
  5892                                  ;
  5893                                  ;	bits	7	6	drives
  5894                                  ;		0	0	1
  5895                                  ;		0	1	2
  5896                                  ;		1	0	3
  5897                                  ;		1	1	4
  5898                                  ;**************************************************************
  5899                                  		
  5900                                  		; 20/12/2022
  5901                                  		; ds = cs
  5902                                  		;push	cs
  5903                                  		;pop	ds
  5904                                  		; 21/12/2022
  5905                                  		;push	cs
  5906                                  		;pop	es
  5907                                  
  5908 00001DBD E8C20A                  		call	cmos_clock_read	; If cmos clock	exists,
  5909                                  					; then set the system time according to	that.
  5910                                  					; also,	reset the cmos clock rate.
  5911                                  		; 18/10/2022
  5912                                  		;mov	word ptr BData_start, offset harddrv ;
  5913                                  					; set up pointer to hdrive
  5914                                  		; 02/10/2022
  5915 00001DC0 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  5916                                  
  5917                                  		; 20/12/2022
  5918                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  5919 00001DC6 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  5920                                  
  5921 00001DC7 30E4                    		xor	ah, ah		; chuck	fat id byte
  5922 00001DC9 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  5923 00001DCC A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  5924 00001DCF D1E0                    		shl	ax, 1
  5925 00001DD1 0106[5E1A]              		add	[last_dskdrv_table], ax
  5926                                  
  5927                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  5928                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  5929                                  		; ........
  5930 00001DD5 1E                      		push    ds
  5931 00001DD6 B800F0                  		mov     ax, 0F000h
  5932 00001DD9 8ED8                    		mov     ds, ax
  5933                                  
  5934 00001DDB 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  5935 00001DE1 751F                    		jne	short skip_mode2
  5936 00001DE3 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  5937 00001DE9 7517                    		jne	short skip_mode2
  5938 00001DEB 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  5939 00001DF1 750F                    		jne	short skip_mode2
  5940                                  
  5941 00001DF3 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  5942 00001DF6 CD15                    		int	15h
  5943 00001DF8 7208                    		jc	short skip_mode2
  5944                                  		; 10/12/2023
  5945                                  		; PCDOS 7.1 IBMBIO.COM
  5946                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  5947                                  					; (MSDOS 6.0)
  5948                                  		; MSDOS 6.22 IO.SYS
  5949 00001DFA 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  5950 00001DFD B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  5951 00001E00 CD15                    		int	15h
  5952                                  skip_mode2:
  5953 00001E02 1F                      		pop	ds
  5954                                  		; ........
  5955                                  
  5956 00001E03 B280                    		mov	dl, 80h
  5957 00001E05 B408                    		mov	ah, 8
  5958 00001E07 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5959                                  					; DL = drive number
  5960                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5961                                  					; DL = number of consecutive drives
  5962                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5963 00001E09 7204                    		jc	short enddrv
  5964 00001E0B 8816[5D1A]              		mov	[hnum], dl	; save number of hard disk drives
  5965                                  enddrv:
  5966                                  		; 21/12/2022
  5967 00001E0F 0E                      		push	cs
  5968 00001E10 07                      		pop	es
  5969                                  
  5970                                  ; scan the list of drives to determine their type. we have three flavors of
  5971                                  ; diskette drives:
  5972                                  ;
  5973                                  ;   48tpi drives    we do nothing special for them
  5974                                  ;   96tpi drives    mark the fact that they have changeline support.
  5975                                  ;   3.5"  drives    mark changeline support and small.
  5976                                  ;
  5977                                  ; the following code uses registers for certain values:
  5978                                  ;
  5979                                  ;   dl - physical drive
  5980                                  ;   ds:di - points to current bds
  5981                                  ;   cx - flag bits for bds
  5982                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  5983                                  					
  5984 00001E11 30D2                    		xor	dl, dl
  5985                                  
  5986                                  		; 20/12/2022
  5987                                  		; ds = cs
  5988                                  		; 17/06/2018		 
  5989                                  		;push	cs
  5990                                  		;pop	ds
  5991                                  
  5992 00001E13 C606[2C01]09            		mov	byte [eot], 9
  5993 00001E18 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  5994                                  					; to set aside two bdss	for the	two fake floppy	drives
  5995                                  
  5996                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  5997                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  5998                                  
  5999                                  ; check to see if we are faking floppy drives. if not we don't
  6000                                  ; do anything special. if we are faking floppy drives we need
  6001                                  ; to set aside two bdss for the two fake floppy drives. we
  6002                                  ; don't need to initalise any fields though. so starting at start_bds
  6003                                  ; use the link field in the bds structure to go to the second bds
  6004                                  ; in the list and initalise it's link field to -1 to set the end of
  6005                                  ; the list. then jump to the routine at dohard to allocate/initialise
  6006                                  ; the bds for harddrives.
  6007                                  
  6008 00001E1B 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  6009 00001E20 750B                    		jnz	short loop_drive
  6010 00001E22 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6011                                  					; di <-	first bds link
  6012 00001E24 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6013                                  					; di <-	second bds link
  6014 00001E26 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  6015 00001E2A E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  6016                                  ;-----------------------------------------------------------------------------
  6017                                  
  6018                                  loop_drive:				
  6019 00001E2D 3A16[7500]              		cmp	dl, [drvmax]
  6020 00001E31 7203                    		jb	short got_more
  6021 00001E33 E97B01                  		jmp	done_drives
  6022                                  ;-----------------------------------------------------------------------------
  6023                                  
  6024                                  got_more:	
  6025                                  		; 12/12/2023
  6026                                  		;xor	cx, cx		; zero all flags
  6027 00001E36 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6028                                  					; get next bds
  6029                                  		; ........
  6030                                  		; 10/12/2023 - Retro DOS v5.0
  6031                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  6032 00001E38 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  6033 00001E3B 7516                    		jne	short not_last_bds
  6034 00001E3D 88D0                    		mov	al, dl          ; drive number (0 based)
  6035 00001E3F 98                      		cbw
  6036 00001E40 01C0                    		add	ax, ax
  6037 00001E42 05[3C05]                		add	ax, dskdrvs
  6038 00001E45 A3[5E1A]                		mov	[last_dskdrv_table], ax
  6039 00001E48 8B3E[601A]              		mov	di, [end_of_bdss]
  6040 00001E4C E8FD09                  		call	xinstall_bds
  6041 00001E4F FE0E[7500]              		dec	byte [drvmax]
  6042                                  not_last_bds:
  6043                                  		; ........
  6044                                  
  6045 00001E53 B600                    		mov	dh, 0		; ff48tpi
  6046                                  					; set form factor to 48	tpi
  6047 00001E55 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  6048                                  		
  6049                                  		; 20/12/2022
  6050                                  		;push	ds ; 11/05/2019	
  6051 00001E5A 57                      		push	di
  6052 00001E5B 52                      		push	dx
  6053                                  		;push	cx ; not necessary (10/12/2023)
  6054 00001E5C 06                      		push	es ; ((*)) ; 20/12/2022
  6055                                  
  6056                                  		; ...........
  6057                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6058                                  		;xor	bx, bx
  6059                                  		;xor	cx, cx
  6060 00001E5D 52                      		push	dx  ; dl = drive number	
  6061                                  		
  6062 00001E5E B408                    		mov	ah, 8
  6063 00001E60 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6064                                  					; DL = drive number
  6065                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6066                                  					; DL = number of consecutive drives
  6067                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6068                                  		;jc	short noparmsfromrom
  6069                                  		; 10/12/2023
  6070 00001E62 58                      		pop	ax  ; al = drive number
  6071 00001E63 7303                    		jnc	short chk_drv_type
  6072 00001E65 E9E600                  		jmp	noparmsfromrom
  6073                                  
  6074                                  chk_drv_type:
  6075                                  		; 10/12/2023
  6076                                  		; ch = low eight bits of maximum cylinder number
  6077                                  		; cl = maximum sector number (bits 5-0)
  6078                                  		;      high two bits of maximum cylinder number (bits 7-6)
  6079                                  		;
  6080 00001E68 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  6081 00001E6B 7554                    		jne	short not_atapi_removable
  6082                                  		
  6083                                  		; save ds:si
  6084 00001E6D 1E                      		push	ds
  6085                                  		;push	si	; not necessary (10/12/2023)
  6086                                  		
  6087 00001E6E 88C2                    		mov	dl, al
  6088 00001E70 83EC1A                  		sub	sp, 26
  6089 00001E73 31C0                    		xor	ax, ax ; 0
  6090 00001E75 50                      		push	ax
  6091 00001E76 B81E00                  		mov	ax, 30
  6092 00001E79 50                      		push	ax
  6093 00001E7A 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  6094 00001E7C 16                      		push	ss
  6095 00001E7D 1F                      		pop	ds
  6096 00001E7E B448                    		mov	ah, 48h
  6097 00001E80 CD13                    		int	13h		; DISK - IBM/MS Extension
  6098                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  6099 00001E82 7239                    		jb	short ext_gdp_err
  6100 00001E84 8B4408                  		mov	ax, [si+8]	; physical number of heads
  6101 00001E87 A3[0C1A]                		mov	[num_heads], ax
  6102 00001E8A 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  6103 00001E8D A3[0E1A]                		mov	[num_cyln], ax
  6104 00001E90 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  6105 00001E93 A2[101A]                		mov	[sec_trk], al
  6106 00001E96 3A06[2C01]              		cmp	al, [eot]
  6107 00001E9A 7603                    		jbe	short _eotok
  6108 00001E9C A2[2C01]                		mov	[eot], al
  6109                                  
  6110                                  _eotok:		; 10/12/2023
  6111                                  		;xor	al, al
  6112 00001E9F 31C9                    		xor	cx, cx ; 0
  6113 00001EA1 F6440210                		test	byte [si+2], 10h ; information flags
  6114                                  					; bit 4 = Device has change line support
  6115 00001EA5 7403                    		jz	short not_chgline_sup
  6116                                  		;or	al, 2		; change line support
  6117 00001EA7 80C902                  		or	cl, 2
  6118                                  not_chgline_sup:
  6119 00001EAA 83C41E                  		add	sp, 30
  6120                                  		;pop	si	; (10/12/2023)
  6121 00001EAD 1F                      		pop	ds
  6122                                  		;
  6123 00001EAE 07                      		pop	es	; es=cs=ds (21/12/2022)
  6124                                  		;pop	cx	; (10/12/2023)
  6125 00001EAF 5A                      		pop	dx
  6126 00001EB0 5F                      		pop	di
  6127                                  		;pop	ds	; (21/12/2022)
  6128                                  
  6129                                  		; 10/12/2023
  6130 00001EB1 F6C102                  		test	cl, 2
  6131                                  		;test	al, 2
  6132                                  		;jz	short gotother_j
  6133 00001EB4 7450                    		jz	short gotother
  6134                                  		;or	cl, al
  6135 00001EB6 C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  6136                                  gotother_j:
  6137 00001EBB EB49                    		jmp	short gotother
  6138                                  ext_gdp_err:
  6139 00001EBD 83C41E                  		add	sp, 30
  6140                                  		;pop	si	; (10/12/2023)
  6141 00001EC0 1F                      		pop	ds
  6142                                  
  6143                                  		; 10/12/2023
  6144                                  not_atapi_removable:
  6145                                  		; ...........
  6146                                  
  6147                                  
  6148                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  6149                                  ; in this case, we are going to put bogus informations to bds table.
  6150                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  6151                                  ; they are calculated at the later time. this is just for the diagnostic
  6152                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  6153                                  ; this should only happen with drive b.
  6154                                  
  6155 00001EC1 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  6156 00001EC4 7505                    		jnz	short pfr_ok
  6157                                  
  6158                                  		;mov	ch, 39		; rom gave wrong info.
  6159                                  		;mov	cl, 9		; let's default to 360k.
  6160                                  		; 20/12/2022
  6161 00001EC6 B90927                  		mov	cx, 2709h
  6162                                  
  6163 00001EC9 B601                    		mov	dh, 1
  6164                                  pfr_ok:					
  6165                                  		;inc	dh		; make number of heads 1-based
  6166                                  		;mov	[num_heads], dh	; save parms returned by rom
  6167                                  		; 10/12/2023
  6168 00001ECB 86F2                    		xchg	dl, dh
  6169 00001ECD 30F6                    		xor	dh, dh
  6170 00001ECF 42                      		inc	dx		; make number of heads 1-based
  6171 00001ED0 8916[0C1A]              		mov	[num_heads], dx
  6172                                  
  6173                                  		;inc	ch		; make number of cylinders 1-based
  6174                                  		;and	cl, 3Fh
  6175                                  		;mov	[sec_trk], cl
  6176                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  6177                                  		; 10/12/2023
  6178 00001ED4 88CA                    		mov	dl, cl
  6179 00001ED6 80E23F                  		and	dl, 3Fh
  6180 00001ED9 8816[101A]              		mov	[sec_trk], dl
  6181 00001EDD 86E9                    		xchg	cl, ch
  6182 00001EDF D0C5                    		rol	ch, 1
  6183 00001EE1 D0C5                    		rol	ch, 1
  6184 00001EE3 80E503                  		and	ch, 3
  6185 00001EE6 41                      		inc	cx		; make number of cylinders 1-based
  6186 00001EE7 890E[0E1A]              		mov	[num_cyln], cx
  6187                                  
  6188                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  6189                                  
  6190                                  		;mov	cl, [sec_trk] ; 10/12/2023
  6191                                  		;cmp	cl, [eot]	; may set carry
  6192                                  		;;jbe	short eot_ok
  6193                                  		;; 09/12/2022
  6194                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  6195                                  		;; 14/08/2023
  6196                                  		;jbe	short eotok
  6197                                  		;mov	[eot], cl
  6198                                  		; 10/12/2023
  6199 00001EEB 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  6200 00001EEF 7604                    		jbe	short eotok
  6201 00001EF1 8816[2C01]              		mov	[eot], dl
  6202                                  ;eot_ok:
  6203                                  eotok:
  6204                                  		; 10/12/2023
  6205                                  		; !!!
  6206                                  		; (following pops are moved to 'chk_changeline' procedure)
  6207                                  		;
  6208                                  		; 20/12/2022
  6209                                  		;pop	es ; ((*)) es = cs = ds
  6210                                  		;;pop	cx	; 10/12/2023
  6211                                  		;pop	dx
  6212                                  		;pop	di
  6213                                  
  6214                                  		; 20/12/2022
  6215                                  		;pop	ds
  6216                                  
  6217                                  ; Check	for presence of	changeline
  6218                                  
  6219                                  ; 10/12/2023
  6220                                  %if 0
  6221                                  		; 10/12/2023
  6222                                  		;xor	cx, cx	; 0
  6223                                  		;push	cx
  6224                                  		push	dx
  6225                                  
  6226                                  		mov	ah, 15h
  6227                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6228                                  					; DL = drive ID
  6229                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6230                                  					; CX:DX	= number of sectors on the media
  6231                                  		; 10/12/2023
  6232                                  		pop	dx
  6233                                  		;pop	cx
  6234                                  		mov	cx, 0 ; 12/12/2023
  6235                                  		jc	short changeline_done
  6236                                  		cmp	ah, 2		; check	for presence of	changeline
  6237                                  		jnz	short changeline_done
  6238                                  
  6239                                  ; we have a drive with change line support.
  6240                                  
  6241                                  		or	cl, 2		; fchangeline
  6242                                  					; signal type
  6243                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  6244                                  %endif
  6245                                  		; 10/12/2023
  6246 00001EF5 E83800                  		call	chk_changeline
  6247                                  		;jc	short changeline_done
  6248                                  
  6249                                  ; we now try to set up the form factor for the types of media that we know
  6250                                  ; and can recognise. for the rest, we set the form factor as "other".
  6251                                  
  6252                                  changeline_done:
  6253                                  
  6254                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  6255                                  			
  6256 00001EF8 803E[0E1A]28            		cmp	byte [num_cyln], 40
  6257 00001EFD 750B                    		jnz	short try_80
  6258 00001EFF 803E[101A]09            		cmp	byte [sec_trk], 9
  6259 00001F04 765F                    		jbe	short nextdrive
  6260                                  gotother:
  6261                                  		; 10/12/2023
  6262                                  		; ch = 0, cl = 2 or 0
  6263                                  				
  6264 00001F06 B607                    		mov	dh, 7 		; ffOther
  6265                                  					; we have a "strange" medium 
  6266 00001F08 EB5B                    		jmp	short nextdrive
  6267                                  ;-----------------------------------------------------------------------------
  6268                                  
  6269                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  6270                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  6271                                  
  6272                                  try_80:					
  6273 00001F0A 803E[0E1A]50            		cmp	byte [num_cyln], 80
  6274 00001F0F 75F5                    		jnz	short gotother
  6275 00001F11 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  6276 00001F13 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it ?
  6277 00001F18 744B                    		jz	short nextdrive	; yeah,	go update
  6278                                  
  6279                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  6280                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  6281                                  		;mov	dh, ff144
  6282                                  		;cmp	byte [sec_trk], 18
  6283                                  		;je	short nextdrive
  6284                                  
  6285 00001F1A 803E[101A]0F            		cmp	byte [sec_trk], 15
  6286 00001F1F 740B                    		jz	short got96
  6287                                  		
  6288 00001F21 803E[101A]09            		cmp	byte [sec_trk], 9
  6289 00001F26 75DE                    		jnz	short gotother
  6290                                  		
  6291 00001F28 B602                    		mov	dh, 2 		; ffSmall
  6292 00001F2A EB39                    		jmp	short nextdrive
  6293                                  ; ----------------------------------------------------------------------------
  6294                                  
  6295                                  got96:					
  6296 00001F2C B601                    		mov	dh, 1		; ff96tpi
  6297 00001F2E EB35                    		jmp	short nextdrive
  6298                                  
  6299                                  ; ----------------------------------------------------------------------------
  6300                                  		
  6301                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6302                                  		; check change line feature (and set fhave96 if there is)
  6303                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  6304                                  chk_changeline:
  6305 00001F30 59                      		pop	cx ; near call return address
  6306                                  
  6307                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  6308 00001F31 07                      		pop	es ; es=cs=ds ; 21/12/2022
  6309                                  		;pop	cx	; (10/12/2023)
  6310 00001F32 5A                      		pop	dx
  6311 00001F33 5F                      		pop	di ; BDS address/offset
  6312                                  		
  6313 00001F34 51                      		push	cx ; near call return address
  6314                                  
  6315                                  		;xor	cx, cx ; 0
  6316                                  		;push	cx
  6317 00001F35 52                      		push	dx
  6318                                  
  6319 00001F36 B415                    		mov	ah, 15h
  6320 00001F38 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6321                                  					; DL = drive ID
  6322                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6323                                  					; CX:DX	= number of sectors on the media
  6324 00001F3A 5A                      		pop	dx
  6325                                  		;pop	cx
  6326 00001F3B B90000                  		mov	cx, 0
  6327 00001F3E 720D                    		jc	short chk_chgl_1
  6328                                  
  6329 00001F40 80FC02                  		cmp	ah, 2		; is there changeline?
  6330 00001F43 7508                    		jne	short chk_chgl_2 ; *
  6331                                  
  6332 00001F45 80C902                  		or	cl, 2
  6333                                  		;or	cl, ah ; 2
  6334 00001F48 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  6335                                  		; cf = 0
  6336                                  chk_chgl_1:
  6337                                  chk_chgl_2:
  6338 00001F4D C3                      		retn
  6339                                  
  6340                                  ;chk_chgl_2:	; *
  6341                                  ;		; 10/12/2023
  6342                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  6343                                  ;		;stc
  6344                                  ;		; cf = 1
  6345                                  ;		retn
  6346                                  
  6347                                  ; ----------------------------------------------------------------------------
  6348                                  
  6349                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  6350                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  6351                                  
  6352                                  noparmsfromrom:
  6353                                  		; 10/12/2023
  6354                                  		; !!!
  6355                                  		; (following pops are moved to 'chk_changeline' procedure)
  6356                                  		;
  6357                                  		; 20/12/2022
  6358                                  		;pop	es ; ((*))
  6359                                  		;;pop	cx	; (10/12/2023)
  6360                                  		;pop	dx
  6361                                  		;pop	di
  6362                                  		
  6363                                  		; 20/12/2022
  6364                                  		;pop	ds
  6365                                  ; 10/12/2023
  6366                                  %if 0
  6367                                  		; 10/12/2023
  6368                                  		;xor	cx, cx ; 0
  6369                                  		;push	cx
  6370                                  		push	dx
  6371                                  
  6372                                  
  6373                                  		mov	ah, 15h
  6374                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6375                                  					; DL = drive ID
  6376                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6377                                  					; CX:DX	= number of sectors on the media
  6378                                  		; 10/12/2023
  6379                                  		pop	dx
  6380                                  		;pop	cx
  6381                                  		mov	cx, 0 ; 12/12/2023
  6382                                  		jc	short nextdrive
  6383                                  
  6384                                  		cmp	ah, 2		; is there changeline?
  6385                                  		jnz	short nextdrive
  6386                                  
  6387                                  		or	cl, 2
  6388                                  		mov	byte [fhave96], 1 ; fchangeline
  6389                                  %endif
  6390                                  		; 10/12/2023
  6391 00001F4E E8DFFF                  		call	chk_changeline
  6392 00001F51 7212                    		jc	short nextdrive
  6393                                  		
  6394                                  		; change line support, [fhave96] = 1
  6395                                  		
  6396 00001F53 C606[0E1A]50            		mov	byte [num_cyln], 80
  6397 00001F58 B601                    		mov	dh, 1		; ff96tpi
  6398 00001F5A B00F                    		mov	al, 15
  6399 00001F5C 3A06[2C01]              		cmp	al, [eot]
  6400 00001F60 7603                    		jbe	short nextdrive
  6401 00001F62 A2[2C01]                		mov	[eot], al
  6402                                  ; ----------------------------------------------------------------------------
  6403                                  
  6404                                  ;eot_ok2:
  6405                                  nextdrive:
  6406                                  		; 10/12/2023
  6407                                  		; ch = 0, cl = 2 or 0	
  6408                                  				
  6409 00001F65 80C920                  		or	cl, 20h	; fi_own_physical
  6410                                  					; set this true	for all	drives
  6411 00001F68 88D7                    		mov	bh, dl		; save int13 drive number
  6412                                  
  6413                                  ; we need to do special things if we have a single drive system and are setting
  6414                                  ; up a logical drive. it needs to have the same int13 drive number as its
  6415                                  ; counterpart, but the next drive letter. also reset ownership flag.
  6416                                  ; we detect the presence of this situation by examining the flag single for the
  6417                                  ; value 2.
  6418 00001F6A 803E[7800]02            		cmp	byte [single], 2
  6419 00001F6F 7505                    		jnz	short not_special
  6420 00001F71 FECF                    		dec	bh		; int13	drive number same for logical drive
  6421 00001F73 80F120                  		xor	cl, 20h	; fi_own_physical
  6422                                  					; reset	ownership flag for logical drive
  6423                                  not_special:
  6424                                  
  6425                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  6426                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  6427                                  ; form factor is of type "ffother".
  6428                                  				
  6429                                  		;xor	ax, ax		; fill BDS for drive
  6430                                  		;mov	al, [num_heads]
  6431                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  6432 00001F76 A1[0C1A]                		mov	ax, [num_heads]
  6433                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  6434 00001F79 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  6435 00001F7C 31C0                    		xor	ax, ax		; *
  6436 00001F7E A0[101A]                		mov	al, [sec_trk]
  6437                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  6438 00001F81 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  6439                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  6440 00001F84 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  6441                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  6442 00001F87 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  6443 00001F8A 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  6444 00001F8D 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  6445                                  		;mov	bl, [num_cyln]
  6446                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  6447                                  		; 10/12/2023
  6448 00001F90 A1[0E1A]                		mov	ax, [num_cyln]
  6449 00001F93 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  6450                                  
  6451 00001F96 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  6452 00001F9B 7510                    		jnz	short no_single
  6453                                  		;mov	byte [single], 2 ; Don't forget we have
  6454                                  					; single drive system
  6455                                  		; 10/12/2023
  6456 00001F9D FE06[7800]              		inc	byte [single]	; [single] = 2
  6457                                  		; 18/12/2022
  6458 00001FA1 80C910                  		or	cl, 10h
  6459                                  		;or	cx, 10h		; fi_am_mult
  6460                                  					; set that this	is one of several drives
  6461                                  		;or	[di+23h], cx	; [di+BDS.flags]
  6462 00001FA4 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  6463                                  					; save flags
  6464 00001FA7 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6465                                  					; move to next BDS in list
  6466 00001FA9 FEC2                    		inc	dl		; add a	number
  6467 00001FAB EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  6468                                  ; ----------------------------------------------------------------------------
  6469                                  
  6470                                  no_single:				
  6471                                  		;inc	dl
  6472                                  		; 18/12/2022
  6473 00001FAD 42                      		inc	dx
  6474 00001FAE E97CFE                  		jmp	loop_drive
  6475                                  ; ----------------------------------------------------------------------------
  6476                                  
  6477                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6478                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  6479                                  done_drives:	
  6480                                  		;mov	word [di+BDS.link], -1
  6481 00001FB1 C705FFFF                		mov	word [di], -1	; set link to null
  6482                                  
  6483                                  ; set up all the hard drives in	the system
  6484                                  
  6485                                  		; 20/12/2022
  6486                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6487                                  dohard:					
  6488 00001FB5 8A36[5D1A]              		mov	dh, [hnum]
  6489 00001FB9 08F6                    		or	dh, dh		; done if no hardfiles
  6490 00001FBB 7459                    		jz	short static_configure
  6491 00001FBD B280                    		mov	dl, 80h
  6492                                  dohard1:				
  6493 00001FBF 52                      		push	dx
  6494 00001FC0 8B3E[601A]              		mov	di, [end_of_bdss]
  6495 00001FC4 8A1E[7500]              		mov	bl, [drvmax]
  6496 00001FC8 B700                    		mov	bh, 0		; first	primary	partition (or active)
  6497 00001FCA E89A01                  		call	sethard
  6498 00001FCD 7208                    		jb	short hardfile_err
  6499 00001FCF E86508                  		call	dmax_check	; error	if already 26 drives
  6500 00001FD2 7303                    		jnb	short hardfile_err
  6501 00001FD4 E87508                  		call	xinstall_bds	; insert new bds into linked list
  6502                                  hardfile_err:				
  6503 00001FD7 5A                      		pop	dx
  6504                                  		;inc	dl		; next hard drive
  6505                                  		; 12/12/2023
  6506 00001FD8 42                      		inc	dx
  6507 00001FD9 FECE                    		dec	dh
  6508 00001FDB 75E2                    		jnz	short dohard1
  6509                                  
  6510                                  ; end of physical drive	initialization
  6511                                  
  6512                                  ; *** do not change the position of the following statement.
  6513                                  ; *** domini routine will use [drvmax] value for the start of the logical
  6514                                  ; *** drive number of mini disk(s).
  6515                                  					
  6516 00001FDD E8CA06                  		call	domini		; for setting up mini disks, if found
  6517                                  
  6518                                  ; -- begin added section
  6519                                  
  6520 00001FE0 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  6521 00001FE4 B280                    		mov	dl, 80h
  6522                                  dohardx1:				
  6523 00001FE6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  6524                                  dohardx2:				
  6525 00001FE8 52                      		push	dx
  6526 00001FE9 53                      		push	bx
  6527 00001FEA 8B3E[601A]              		mov	di, [end_of_bdss]
  6528 00001FEE 8A1E[7500]              		mov	bl, [drvmax]
  6529 00001FF2 E87201                  		call	sethard
  6530 00001FF5 720E                    		jb	short dohardx4	; move to next hardfile if error
  6531 00001FF7 E83D08                  		call	dmax_check	; make sure <=26 drives
  6532 00001FFA 7309                    		jnb	short dohardx4	; skip if error
  6533 00001FFC E84D08                  		call	xinstall_bds	; insert new bds into linked list
  6534 00001FFF 5B                      		pop	bx		; get partition number
  6535 00002000 5A                      		pop	dx		; restore physical drive counts
  6536 00002001 FEC7                    		inc	bh
  6537 00002003 EBE3                    		jmp	short dohardx2	; keep looping until we fail
  6538                                  ; ----------------------------------------------------------------------------
  6539                                  
  6540                                  dohardx4:				
  6541 00002005 5B                      		pop	bx		; unjunk partition number from stack
  6542 00002006 5A                      		pop	dx		; restore physical drive counts
  6543                                  		;inc	dl		; next hard drive
  6544                                  		; 12/12/2023
  6545 00002007 42                      		inc	dx
  6546 00002008 FECE                    		dec	dh
  6547 0000200A 75DA                    		jnz	short dohardx1
  6548                                  
  6549                                  ; -- end changed section
  6550                                  
  6551                                  ;******************************************************************************
  6552                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  6553                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  6554                                  ; than two diskette drives
  6555                                  ;
  6556                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  6557                                  ;		as usual and then rescan the bds chain to adjust the  drive
  6558                                  ;		letters. to do this, scan for disk drives and assign logical
  6559                                  ;		drive number starting from 2 and then rescan diskette drives
  6560                                  ;		and assign next to the last logical drive number of last disk
  6561                                  ;		drive to the 3rd and 4th diskette drives.
  6562                                  ;******************************************************************************
  6563                                  
  6564 0000200C 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  6565                                  		;jbe	short static_configure ; no - no need for remapping
  6566 00002011 7603                    		jbe	short no_remap
  6567 00002013 E8D500                  		call	remap		; remap	bds chain to adjust driver letters
  6568                                  no_remap:
  6569                                  
  6570                                  ; End of drive initialization.
  6571                                  
  6572                                  ; ----------------------------------------------------------------------------
  6573                                  
  6574                                  ;we now decide, based on the configurations available so far, what
  6575                                  ;code or data we need to keep as a stay resident code. the following table
  6576                                  ;shows the configurations under consideration. they are listed in the order
  6577                                  ;of their current position memory.
  6578                                  ;
  6579                                  ;configuration will be done in two ways:
  6580                                  ;
  6581                                  ;first, we are going to set "static configuration". static configuration will
  6582                                  ;consider from basic configuration to endof96tpi configuration. the result
  6583                                  ;of static configuration will be the address the dynamic configuration will
  6584                                  ;use to start with.
  6585                                  ;
  6586                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  6587                                  ;involves possible relocation of code or data. dynamic configuration routine
  6588                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  6589                                  ;code individually. after these operation, [dosdatasg] will be set.
  6590                                  ;this will be the place sysinit routine will relocate msdos module for good.
  6591                                  
  6592                                  ; -- begin changed section
  6593                                  ;
  6594                                  ;   1.	 basic configuration for msbio (endfloppy)
  6595                                  ;   2.   end96tpi	; a system that supports "change line error"
  6596                                  ;   3.	 end of bdss	; end of bdss for hard disks
  6597                                  ;   4.	 endatrom	;some of at rom fix module.
  6598                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  6599                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  6600                                  ;
  6601                                  
  6602                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  6603                                  
  6604                                  static_configure:			
  6605 00002016 8B3E[601A]              		mov	di, [end_of_bdss]
  6606 0000201A 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  6607                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  6608 0000201E 750D                    		jnz	short dynamic_configure	; that's the end, then
  6609                                  		; 18/10/2022
  6610 00002020 BF[4C08]                		mov	di, end96tpi
  6611                                  		;mov	di, offset harddrv ; end96tpi
  6612                                  					; keep everything up to end96tpi
  6613 00002023 803E[7700]00            		cmp	byte [fhave96], 0
  6614 00002028 7503                    		jnz	short dynamic_configure
  6615                                  		
  6616 0000202A BF[3808]                		mov	di, endfloppy
  6617                                  dynamic_configure:
  6618                                  		; 20/12/2022
  6619                                  		;push	cs
  6620                                  		;pop	es
  6621                                  		
  6622                                  		; 10/12/2023
  6623 0000202D FC                      		cld	; clear direction flag is not necessary here !?
  6624                                  			; because there will not be a running program
  6625                                  			; which will set direction flag as backward (std)
  6626                                  
  6627                                  ; -- end changed section
  6628                                  
  6629                                  		; 20/12/2022
  6630                                  		; ds = cs <> es
  6631                                  		; ss = 0
  6632                                  		; sp = 700h
  6633                                  
  6634                                  		; 13/12/2023
  6635 0000202E BE00F0                  		mov	si, 0F000h
  6636 00002031 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  6637                                  
  6638 00002033 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  6639                                  		;jnz	short checkcmosclock
  6640                                  		; 10/12/2023
  6641 00002038 751E                    		jnz	short checkcompaqbug ; no
  6642 0000203A 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  6643                                  		;jz	short checkcmosclock
  6644 0000203F 7417                    		jz	short checkcompaqbug
  6645 00002041 97                      		xchg	ax, di		; save allocation pointer in ax
  6646                                  		; 13/12/2023
  6647                                  		;mov	si, 0F000h
  6648                                  		;mov	es, si		; ES ->	ROM BIOS segment
  6649 00002042 BE[661A]                		mov	si, bios_date	; "01/10/84"
  6650 00002045 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  6651 00002048 B90900                  		mov	cx, 9		; bdate_l
  6652                                  					; Only patch ROM for bios 01/10/84
  6653 0000204B F3A6                    		repe cmpsb		; check	for date + zero	on end
  6654 0000204D 97                      		xchg	ax, di		; restore allocation pointer
  6655                                  
  6656                                  ; M015 -- begin changes
  6657                                  
  6658                                  		;jnz	short checkcmosclock
  6659                                  		; 02/10/2022
  6660 0000204E 7508                    		jnz	short checkcompaqbug
  6661                                  
  6662                                  ; install at rom fix
  6663                                  
  6664                                  		; 19/10/2022
  6665                                  		;mov	cx, offset endatrom
  6666 00002050 B9[2018]                		mov	cx, endatrom
  6667                                  		;mov	si, offset ibm_disk_io
  6668 00002053 BE[F216]                		mov	si, ibm_disk_io
  6669 00002056 EB46                    		jmp	short install_int13_patch
  6670                                  ; ----------------------------------------------------------------------------
  6671                                  
  6672                                  ; M065 -- begin changes
  6673                                  ;
  6674                                  ; On certain systems with Western Digital disk controllers, the
  6675                                  ; following detection scheme caused an unpredictable and serious
  6676                                  ; failure. In particular, they've implemented a nonstandard
  6677                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  6678                                  ; what happens to be at es:[bx] and other memory locations indexed
  6679                                  ; off of it.
  6680                                  ;
  6681                                  ; Compaq was unable to tell us exactly which kind of systems have
  6682                                  ; the bug, except that they guarantee that the bug was fixed in
  6683                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  6684                                  ; string, and then look for date codes before 08/04/86 to decide
  6685                                  ; when to install the hook.
  6686                                  
  6687                                  ;checkcmosclock:
  6688                                  ; 02/10/2022				
  6689                                  checkcompaqbug:
  6690                                  		; 20/12/2022
  6691                                  		; es = 0F000h
  6692                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  6693                                  		;mov	es, ax
  6694                                  
  6695                                  		; 19/10/2022
  6696 00002058 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  6697                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  6698 0000205F 754B                    		jnz	short not_compaq_patch
  6699 00002061 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  6700                                  		;cmp	word ptr es:0FFECh, 'PM'
  6701 00002068 7542                    		jnz	short not_compaq_patch
  6702 0000206A 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  6703                                  		;cmp	word ptr es:0FFEEh, 'QA'
  6704 00002071 7539                    		jnz	short not_compaq_patch
  6705                                  
  6706                                  ; We're running on a COMPAQ. Now look at the date code.
  6707                                  
  6708 00002073 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  6709 00002077 86C4                    		xchg	ah, al
  6710                                  
  6711                                  ; 11/12/2023
  6712                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  6713                                  %if 0
  6714                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  6715                                  		ja	short not_compaq_patch
  6716                                  		jz	short chkcompaqbug1
  6717                                  		cmp	ax, 3739h       ; '97'
  6718                                  		jbe	short not_compaq_patch
  6719                                  		stc
  6720                                  chkcompaqbug1:
  6721                                  		jb	short do_compaq_patch
  6722                                  		mov	ax, [es:0FFF5h]
  6723                                  		xchg	ah, al
  6724                                  		cmp	ax, 3038h       ; '80'
  6725                                  		ja	short not_compaq_patch
  6726                                  		jb	short do_compaq_patch
  6727                                  		mov	ax, [es:0FFF8h]
  6728                                  		xchg	ah, al
  6729                                  		cmp	ax, 3034h       ; '40'
  6730                                  		jnb	short not_compaq_patch
  6731                                  do_compaq_patch:
  6732                                  %endif
  6733                                  		; 11/12/2023
  6734                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  6735                                  
  6736 00002079 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  6737                                  		;cmp	ax, '86'        ; 3836h
  6738                                  					; is it	86?
  6739 0000207C 772E                    		ja	short not_compaq_patch
  6740 0000207E 7218                    		jb	short do_compaq_patch
  6741 00002080 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  6742 00002084 86C4                    		xchg	ah, al
  6743 00002086 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  6744                                  		;cmp	ax, '08'        ; 3038h
  6745                                  					; is it	08?
  6746 00002089 7721                    		ja	short not_compaq_patch
  6747 0000208B 720B                    		jb	short do_compaq_patch
  6748 0000208D 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  6749 00002091 86C4                    		xchg	ah, al
  6750 00002093 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  6751                                  		;cmp	ax, '04'        ; 3034h
  6752                                  					; is it	04?
  6753 00002096 7314                    		jnb	short not_compaq_patch
  6754                                  
  6755                                  do_compaq_patch:			
  6756 00002098 B9[3D18]                		mov	cx, end_compaq_i13hook
  6757                                  		;mov	si, endatrom
  6758                                  		; 11/12/2023
  6759 0000209B BE[2018]                		mov	si, compaq_disk_io ; endatrom
  6760                                  
  6761                                  install_int13_patch:			
  6762 0000209E 0E                      		push	cs
  6763 0000209F 07                      		pop	es
  6764                                  		; 18/10/2022
  6765 000020A0 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  6766 000020A4 8C0E[B600]              		mov	[Orig13+2], cs
  6767 000020A8 29F1                    		sub	cx, si		; size of rom fix module
  6768 000020AA F3A4                    		rep movsb		; relocate it
  6769                                  
  6770                                  ; M065 -- end changes
  6771                                  
  6772                                  ; ----------------------------------------------------------------------------
  6773                                  not_compaq_patch:			; M065
  6774                                  		; 17/10/2022
  6775                                  checkcmosclock:	
  6776                                  		; 18/10/2022		
  6777 000020AC 0E                      		push	cs
  6778 000020AD 07                      		pop	es
  6779                                  
  6780                                  		; 20/12/2022
  6781                                  		; ds = cs = es
  6782                                  		; ss = 0
  6783                                  		; sp = 700h
  6784                                  
  6785                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6786                                  %if 0
  6787                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  6788                                  		jnz	short checkk09	; no
  6789                                  
  6790                                  		mov	word [daycnttoday], di
  6791                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  6792                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  6793                                  		mov	si, daycnt_to_day
  6794                                  		rep movsb
  6795                                  		mov	word [bintobcd], di
  6796                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  6797                                  					; let original segment stay
  6798                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  6799                                  		; 08/08/2023
  6800                                  		mov	cl, 11
  6801                                  		mov	si, bin_to_bcd
  6802                                  		rep movsb
  6803                                  %endif
  6804                                  
  6805                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6806                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  6807                                  		;push	cs
  6808                                  		;pop	es
  6809                                  checkk09:				
  6810 000020AE 57                      		push	di ; ? ; save ? ; 21/12/2022
  6811                                  
  6812                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  6813                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  6814                                  %if 0		
  6815                                  
  6816                                  		mov	ax, 4101h	; wait for bh=es:[di]
  6817                                  		mov	bl, 1		; wait for 1 clock tick
  6818                                  		mov	bh, [es:di]
  6819                                  		stc			; Assume we will fail
  6820                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  6821                                  					; AL = condition type, BH = condition compare or mask value
  6822                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  6823                                  					; DX = I/O port	address	if AL bit 4 set
  6824                                  					; 11/12/2023
  6825                                  					; ES:DI = user byte if AL bit 4 clear
  6826                                  %endif
  6827                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  6828                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  6829                                  	
  6830                                  		; ........
  6831                                  
  6832 000020AF B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  6833 000020B2 B304                    		mov	bl, 4		; wait for 4 clock ticks
  6834 000020B4 F9                      		stc			; Assume we will fail
  6835 000020B5 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  6836                                  					; AL = condition type, BH = condition compare or mask value
  6837                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  6838                                  					; DX = I/O port address if AL bit 4 set
  6839                                  		; ........
  6840                                  
  6841 000020B7 5F                      		pop	di ; ?
  6842 000020B8 721B                    		jc	short configdone ; 21/12/2022
  6843                                  
  6844 000020BA C606[7900]01            		mov	byte [fhavek09], 1
  6845                                  					; remember we have a k09 type
  6846 000020BF 1E                      		push	ds
  6847 000020C0 31C0                    		xor	ax, ax
  6848 000020C2 8ED8                    		mov	ds, ax
  6849                                  		
  6850 000020C4 893EB001                		mov	[6Ch*4], di
  6851                                  		;mov	ds:1B0h, di	; [6Ch*4]
  6852                                  					; new int 6Ch handler
  6853                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  6854 000020C8 8C0EB201                		mov	word [6Ch*4+2], cs
  6855 000020CC 1F                      		pop	ds
  6856                                  		; 20/12/2022
  6857                                  		; ds = cs = es
  6858                                  		;mov	si, int6c
  6859                                  		;mov	cx, endk09-int6c ; 459
  6860                                  		;;mov	cx, 459		; endk09 - int6c
  6861                                  					; size of k09 routine
  6862                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6863                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  6864 000020CD BE[3E18]                		mov	si, int_6Ch
  6865 000020D0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  6866 000020D3 F3A4                    		rep movsb		;
  6867                                  					; set up config	stuff for sysinit
  6868                                  ; ----------------------------------------------------------------------------
  6869                                  ; Set up config stuff for SYSINIT
  6870                                  
  6871                                  ; 17/10/2022
  6872                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  6873                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  6874                                  ; 09/12/2022
  6875                                  SETDRIVE equ SetDrive
  6876                                  GETBP equ GetBp
  6877                                  		
  6878                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6879                                  configdone:	
  6880                                  		; 21/12/2022			
  6881                                  		; 20/03/2019
  6882                                  		;push	cs		; di is	final ending address of	msbio.
  6883                                  		;pop	ds
  6884                                  		
  6885 000020D5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  6886                                  		; 10/12/2022
  6887                                  		;shr	di, 1
  6888                                  		;shr	di, 1
  6889                                  		;shr	di, 1
  6890                                  		;shr	di, 1
  6891 000020D8 B104                    		mov	cl, 4
  6892 000020DA D3EF                    		shr	di, cl		
  6893                                  		; 10/12/2022
  6894 000020DC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  6895                                  		; 19/10/2022 - Temporary !
  6896                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  6897 000020DF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  6898                                  
  6899                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  6900                                  
  6901                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  6902                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  6903                                  	     
  6904                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  6905                                  
  6906                                  ; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 combined/single kernel file)
  6907                                  
  6908                                  	     ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  6909                                  
  6910                                  	     ; (("IBMDOS.COM" kernel file reading code here, below...))	
  6911                                  
  6912                                  ; ----------------------------------------------------------------------------
  6913                                  ; ----------------------------------------------------------------------------
  6914                                  %if 0
  6915                                  		mov	ax, [drvfat]	; get drive and	fat id
  6916                                  		; 22/12/2022
  6917                                  		; Note: SETDRIVES uses AL (drive number) only
  6918                                  		mov	bp, SETDRIVE
  6919                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6920                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  6921                                  					; at 2C7h:4D7h = 70h:2A47h
  6922                                  		push	cs		; simulate far call
  6923                                  		call	call_bios_code	; get bds for drive
  6924                                  		mov	bp, GETBP	; ensure valid bpb is present
  6925                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6926                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  6927                                  		push	cs
  6928                                  		call	call_bios_code
  6929                                  
  6930                                  	; resort to funky old segment definitions for now
  6931                                  
  6932                                  		; 22/12/2022
  6933                                  		;push	es		; copy bds to ds:di
  6934                                  		;pop	ds
  6935                                  
  6936                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  6937                                  	;
  6938                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  6939                                  	;	  back. Apparently it was what actually setup es: for the following
  6940                                  	; cas----
  6941                                  
  6942                                  		; 22/12/2022
  6943                                  		;xor	di, di
  6944                                  		;mov	al, [es:di]	; get fat id byte
  6945                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  6946                                  		;mov	[es:drvfat+1], al
  6947                                  		;mov	ax, [es:drvfat]
  6948                                  		
  6949                                  		; 22/12/2022
  6950                                  		; ds = cs
  6951                                  	;;;	mov	al, [drvfat]
  6952                                  
  6953                                  	; cas -- why do a SECOND setdrive here???
  6954                                  
  6955                                  		; 22/12/2022
  6956                                  		;push	es		; save whatever's in es
  6957                                  		;push	ds		; copy bds to es:di
  6958                                  		;pop	es
  6959                                  		;push	cs		; copy Bios_Data to ds
  6960                                  		;pop	ds
  6961                                  	
  6962                                  	; 22/12/2022
  6963                                  	;;;	mov	bp, SETDRIVE
  6964                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  6965                                  	;;;	push	cs		; simulate far call
  6966                                  	;;;	call	call_bios_code	; get correct bds for this drive
  6967                                  	
  6968                                  		; 22/12/2022
  6969                                  		;push	es		; copy bds back to ds:di
  6970                                  		;pop	ds
  6971                                  		;pop	es		; pop whatever was in es
  6972                                  
  6973                                  	; Now we load in the MSDOS.SYS file
  6974                                  
  6975                                  	; 22/12/2022
  6976                                  	; -----
  6977                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6978                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  6979                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  6980                                  	;				; get size of fat on media
  6981                                  	;	;mov	es:16DEh, bl
  6982                                  	;	mov	[es:fbigfat], bl
  6983                                  	;	mov	cl, [di+8]
  6984                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6985                                  	;	;sub	es:16D8h, ax
  6986                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  6987                                  	;				; need a logical sector number that will
  6988                                  	;				; be used by getclus(diskrd procedure)
  6989                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  6990                                  	;	;sbb	es:16DAh, ax
  6991                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  6992                                  	; -----
  6993                                  		
  6994                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6995                                  	; -----	; 22/12/2022
  6996                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6997                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  6998                                  		; 11/12/2023 ; *
  6999                                  		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  7000                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  7001                                  					; get size of fat on media
  7002                                  		mov	[fbigfat], bl
  7003                                  		mov	cl, [es:di+8]
  7004                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  7005                                  		sub	[First_Data_Sector], ax ; *
  7006                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  7007                                  					; need a logical sector number that will
  7008                                  					; be used by getclus(diskrd procedure)
  7009                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7010                                  		sbb	[First_Data_Sector+2], ax ; *
  7011                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  7012                                  	; ------
  7013                                  
  7014                                  		xor	ch, ch	 ; cx = sectors/cluster
  7015                                  
  7016                                  	; the boot program has left the directory at 0:500h
  7017                                  
  7018                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7019                                  		;push	di
  7020                                  		push	ds
  7021                                  		;xor	di, di
  7022                                  		;mov	ds, di
  7023                                  		xor	bx, bx ; 0
  7024                                  		mov	ds, bx
  7025                                  		mov	bx, [53Ah]
  7026                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  7027                                  				   	; of root directory in the buffer at 500h)
  7028                                  		pop	ds
  7029                                  		mov     si, [firstcluster_hw] ; 11/12/2023 
  7030                                  				   	; (32 bit cluster number for FAT32 fs)
  7031                                  		;pop	ds
  7032                                  		;pop	di
  7033                                  
  7034                                  		; 12/12/2023
  7035                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  7036                                  		; ...........
  7037                                  		; ds = cs
  7038                                  		mov	al, [fbigfat]
  7039                                  		push	ax              ; (*) save fbigfat flags
  7040                                  		mov	al, [drvfat]
  7041                                  		or	al, [Boot_Drv]
  7042                                  		jnz	short boot_drv_fixed ; hard disk
  7043                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  7044                                  		push	bx              ; for removable drives
  7045                                  		push	cx
  7046                                  		; 28/12/2023
  7047                                  		;push	dx ; (not necessary)
  7048                                  	
  7049                                  		; 12/12/2023
  7050                                  		push	es
  7051                                  		pop	ds
  7052                                  
  7053                                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  7054                                  		xor	dx, dx
  7055                                  		or	ax, ax
  7056                                  		jnz	short prep_totalsecs_ok
  7057                                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  7058                                  		mov	dx, [di+1Dh]
  7059                                  prep_totalsecs_ok:
  7060                                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  7061                                  		sbb	dx, 0
  7062                                  		push	ax
  7063                                  		push	dx
  7064                                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  7065                                  		xor	ax, ax
  7066                                  		or	bx, bx
  7067                                  		jnz	short prep_fatsecs_ok
  7068                                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  7069                                  		mov	ax, [di+21h]
  7070                                  prep_fatsecs_ok:
  7071                                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  7072                                  				        ; [di+BDS.fats]
  7073                                  		xor	ch, ch
  7074                                  		mul	cx
  7075                                  		xchg	ax, cx
  7076                                  		mul	bx
  7077                                  		add	cx, dx
  7078                                  		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  7079                                  		pop	dx
  7080                                  		pop	ax              ; dx:ax = totals sectors - reserved sectors
  7081                                  		sub	ax, bx
  7082                                  		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  7083                                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  7084                                  		add	bx, 15          ; 16 directory entries per sector
  7085                                  				        ; (round up sector count by adding 15)
  7086                                  		mov	cl, 4           ; (rounded) dir entries / 16
  7087                                  		shr	bx, cl
  7088                                  		xor	cx, cx
  7089                                  		sub	ax, bx
  7090                                  		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  7091                                  					; (will be used for cluster count calculation)
  7092                                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  7093                                  
  7094                                  		; 12/12/2023
  7095                                  		push	cs
  7096                                  		pop	ds
  7097                                  
  7098                                  		push	ax              ; 32 bit division (data sectors / sector per cluster)
  7099                                  		mov	ax, dx
  7100                                  		xor	dx, dx
  7101                                  		div	cx
  7102                                  		mov	bx, ax
  7103                                  		pop	ax
  7104                                  		div	cx
  7105                                  		or	bx, bx          ; 32 bit cluster count if bx > 0
  7106                                  		jnz	short set_fbigbig_flag ; too big cluster number
  7107                                  		cmp	ax, 0FFF6h
  7108                                  		jb	short set_fbig_flag
  7109                                  set_fbigbig_flag:
  7110                                  		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  7111                                  		jmp	short set_fbig_flag_ok
  7112                                  ; ---------------------------------------------------------------------------
  7113                                  
  7114                                  set_fbig_flag:
  7115                                  		cmp	ax, 0FF6h       ; 4096-10
  7116                                  				        ; is this 16-bit fat?
  7117                                  		jb	short set_fbig_flag_ok ; no, small fat
  7118                                  		or	byte [fbigfat], 40h ; FAT16 ; fbig
  7119                                  set_fbig_flag_ok:
  7120                                  		; 28/12/2023
  7121                                  		;pop	dx
  7122                                  		pop	cx
  7123                                  		pop	bx
  7124                                  boot_drv_fixed:
  7125                                  		xor	di, di
  7126                                  
  7127                                  		; cx = sectors/cluster
  7128                                  		; si:bx = first cluster
  7129                                  		; di = 0
  7130                                  
  7131                                  		; ...........
  7132                                  loadit:
  7133                                  		mov	ax, SYSINITSEG	; 46Dh
  7134                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  7135                                  		;;mov	ax, 46Dh	; sysinit segment
  7136                                  		mov	es, ax
  7137                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  7138                                  		;mov	es, [es:271h]
  7139                                  
  7140                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  7141                                  
  7142                                  ; ----------------------------------------------------------------------------
  7143                                  
  7144                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7145                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  7146                                  
  7147                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7148                                  		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7149                                  		jz	short iseof
  7150                                  
  7151                                  eofbigbig:	; si:bx = 32 bit cluster number
  7152                                  		cmp	si, 0FFFh
  7153                                  		jnz	short iseofx
  7154                                  		cmp	bx, 0FFF7h
  7155                                  		jmp	short iseofx
  7156                                  
  7157                                  ; ----------------------------------------------------------------------------
  7158                                  		; 13/12/2023
  7159                                  iseof:
  7160                                  		;;test	byte [cs:fbigfat], fbig
  7161                                  		;test	byte [cs:fbigfat], 40h ; fbig
  7162                                  		; 12/12/2023
  7163                                  		; ds = cs
  7164                                  		test	byte [fbigfat], 40h ; fbig
  7165                                  		jnz	short eofbig
  7166                                  		cmp	bx, 0FF7h
  7167                                  		jmp	short iseofx
  7168                                  ; ----------------------------------------------------------------------------
  7169                                  
  7170                                  eofbig:
  7171                                  		cmp	bx, 0FFF7h
  7172                                  iseofx:
  7173                                  		jb	short loadit	; keep loading until cluster = eof
  7174                                  
  7175                                  ; ----------------------------------------------------------------------------
  7176                                  
  7177                                  		; 19/04/2024
  7178                                  		; 28/12/2023
  7179                                  		pop	ax		; (*) restore fbigfat flags
  7180                                  					; (after loading DOS kernel)
  7181                                  		; 06/04/2024
  7182                                  		;mov	[cs:fbigfat], al
  7183                                  		mov	[fbigfat], al
  7184                                  %endif
  7185                                  ; ----------------------------------------------------------------------------
  7186                                  ; ----------------------------------------------------------------------------
  7187                                  	
  7188                                  		; 19/04/2024
  7189                                  
  7190 000020E3 E8FE04                  		call	setdrvparms
  7191                                  
  7192                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  7193                                  		;;jmp	far 46Dh:267h
  7194                                  		; 12/12/2023
  7195                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  7196                                  
  7197 000020E6 EA[6902]D904            		jmp	SYSINITSEG:SYSINITSTART
  7198                                  
  7199                                  ; =============== S U B	R O U T	I N E ========================================
  7200                                  
  7201                                  ; Following are subroutines to support resident device driver initialization
  7202                                  ;
  7203                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  7204                                  
  7205                                  ;	M035 -- begin changed section
  7206                                  
  7207                                  ;******************************************************************************
  7208                                  ; module name: remap
  7209                                  ;
  7210                                  ; descriptive name: all the code for himem that could be separated from msbio
  7211                                  ;
  7212                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  7213                                  ;	     letters) if more than two diskette drives on the system.
  7214                                  ;
  7215                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  7216                                  ;	       as usual and then rescan the bds chain to adjust the drive
  7217                                  ;	       letters. to do this, scan for disk drives and assign logical
  7218                                  ;	       drive number starting from 2 and then rescan diskette drives
  7219                                  ;	       and assign next to the last logical drive number of last disk
  7220                                  ;	       drive to the 3rd and 4th diskette drives.
  7221                                  
  7222                                  ; input:       none
  7223                                  ; exit:	drive letters have been remapped in bds chain
  7224                                  ; exit error:  none
  7225                                  ; called from: msinit
  7226                                  ;
  7227                                  ; notes:  this function  will be called only if more than 2 diskettes are
  7228                                  ;	  found in the system
  7229                                  ;	  this function assumes that there are no more than 26 drives assigned
  7230                                  ;	    this is guaranteed by the code that creates bdss for partitions
  7231                                  ;	  this function assumes that the first entries in the chain are
  7232                                  ;	   floppy drives, and all the rest are hard drives
  7233                                  ;	  will alter the boot drive if necessary to reflect remapping
  7234                                  ;
  7235                                  ;******************************************************************************
  7236                                  
  7237                                  ; 17/10/2022
  7238                                  ; 02/10/2022
  7239                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7240                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  7241                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  7242                                  
  7243                                  remap:		; proc near
  7244                                  
  7245                                  		; 15/12/2023
  7246                                  		; ds = cs
  7247                                  		;mov	di, [cs:start_bds] ; get first bds
  7248 000020EB 8B3E[1901]              		mov	di, [start_bds]
  7249                                  
  7250                                  ; search for 1st fixed disk physical drive num
  7251                                  
  7252                                  drive_loop:
  7253 000020EF 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  7254                                  					; first	hard disk??
  7255 000020F3 7409                    		jz	short fdrv_found ; yes,	continue
  7256 000020F5 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7257                                  					; get next bds,	assume segment
  7258 000020F7 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  7259 000020FA 75F3                    		jnz	short drive_loop ; loop	if not
  7260 000020FC EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  7261                                  
  7262                                  ;------------------------------------------------------------------------------
  7263                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  7264                                  ;logical drive nums to 3, 4, 5 etc.
  7265                                  ;------------------------------------------------------------------------------
  7266                                  
  7267                                  fdrv_found:
  7268 000020FE B002                    		mov	al, 2		; start	with logical drv num=2
  7269                                  fdrv_loop:
  7270 00002100 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7271 00002103 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7272                                  					; ds:di--> next	bds
  7273                                  		;inc	al		; set num for next drive
  7274                                  		; 18/12/2022
  7275 00002105 40                      		inc	ax
  7276 00002106 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  7277 00002109 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  7278                                  
  7279                                  ;------------------------------------------------------------------------------
  7280                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  7281                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  7282                                  ; any more.
  7283                                  ;------------------------------------------------------------------------------
  7284                                  
  7285                                  		;mov	di, [cs:start_bds] ; [start_bds]
  7286                                  		; 15/12/2023
  7287 0000210B 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  7288 0000210F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7289                                  					; ds:di-->bds2
  7290                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  7291 00002111 8A26[2501]              		mov	ah, [dsktnum]
  7292 00002115 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  7293                                  remap_loop1:
  7294 00002118 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7295                                  					; set new num to next floppy
  7296 0000211A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7297 0000211D FEC0                    		inc	al		; new number for next floppy
  7298 0000211F FECC                    		dec	ah		; count down extra floppies
  7299 00002121 75F5                    		jnz	short remap_loop1
  7300                                  
  7301                                  ; now we've got to adjust the boot drive if we reassigned it
  7302                                  
  7303                                  		; 15/12/2023
  7304                                  		;mov	al, [cs:drvfat]
  7305 00002123 A0[FA19]                		mov	al, [drvfat]
  7306 00002126 3C02                    		cmp	al, 2		; is it	a: or b: ?
  7307 00002128 721D                    		jb	short rmap_exit
  7308                                  		;sub	al, [cs:dsktnum]
  7309 0000212A 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  7310 0000212E 7204                    		jb	short remap_boot_flop ;	brif so
  7311                                  
  7312                                  ; we've got to remap the boot hard drive
  7313                                  ; subtract the number of EXTRA floppies from it
  7314                                  
  7315 00002130 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  7316 00002132 EB04                    		jmp	short remap_change_boot_drv
  7317                                  ; ---------------------------------------------------------------------------
  7318                                  
  7319                                  ; we've got to remap the boot floppy.
  7320                                  ; add the number of hard drive partitions to it
  7321                                  
  7322                                  remap_boot_flop:
  7323                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  7324                                  		; 15/12/2023
  7325 00002134 0206[7500]              		add	al, [drvmax]
  7326                                  remap_change_boot_drv:			
  7327                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  7328 00002138 A2[FA19]                		mov	[drvfat], al
  7329 0000213B FEC0                    		inc	al
  7330 0000213D 1E                      		push	ds
  7331 0000213E BFD904                  		mov	di, SYSINITSEG	; 46Dh
  7332                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  7333                                  		;;mov	di, 46Dh	; SYSINIT segment
  7334 00002141 8EDF                    		mov	ds, di
  7335 00002143 A2[9602]                		mov	[DEFAULTDRIVE], al
  7336                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  7337                                  					; pass it to sysinit as	well
  7338 00002146 1F                      		pop	ds ; ds = cs
  7339                                  rmap_exit:
  7340 00002147 C3                      		retn
  7341                                  
  7342                                  ; =============== S U B	R O U T	I N E =======================================
  7343                                  
  7344                                  ; 17/10/2022
  7345                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  7346                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  7347                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  7348                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  7349                                  ;**************************************************
  7350                                  ; getboot - get the boot sector for a hard disk
  7351                                  ;
  7352                                  ; Reads the boot sector from a specified drive into
  7353                                  ; a buffer at the top of memory.
  7354                                  ;
  7355                                  ; dl = int13 drive number to read boot sector for
  7356                                  ;**************************************************
  7357                                  
  7358                                  ; 17/10/2022
  7359                                  bootbias equ 200h
  7360                                  
  7361                                  getboot:	; proc near
  7362                                  
  7363                                  		; 15/12/2023 - Retro DOS v5.0 
  7364                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  7365                                  		; ds = cs
  7366                                  		
  7367                                  		; 08/04/2018
  7368                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  7369                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  7370                                  		; 02/10/2022 - Retro DOS v4.0
  7371                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  7372                                  
  7373                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  7374                                  		; 15/12/2023
  7375 00002148 A1[041A]                		mov	ax, [init_bootseg]
  7376 0000214B 8EC0                    		mov	es, ax
  7377                                  
  7378                                  		; 17/10/2022
  7379 0000214D BB0002                  		mov	bx, bootbias ; 200h
  7380                                  		;mov	bx, 200h	; bootbias
  7381                                  					; load BX, ES:BX is where sector goes
  7382 00002150 B80102                  		mov	ax, 201h
  7383 00002153 30F6                    		xor	dh, dh
  7384 00002155 B90100                  		mov	cx, 1
  7385 00002158 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7386                                  					; AL = number of sectors to read, CH = track, CL = sector
  7387                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7388                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7389 0000215A 7209                    		jc	short erret
  7390                                  		; 17/10/2022
  7391 0000215C 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  7392                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  7393                                  					; Dave Litton magic word?
  7394 00002163 7401                    		jz	short norm_ret	; yes
  7395                                  erret:
  7396 00002165 F9                      		stc
  7397                                  norm_ret:
  7398 00002166 C3                      		retn
  7399                                  
  7400                                  ; =============== S U B	R O U T	I N E =======================================
  7401                                  
  7402                                  ; 28/12/2018 - Retro DOS v4.0 
  7403                                  
  7404                                  ;***************************************************************************
  7405                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  7406                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  7407                                  ;   our own logical sectors start. we also read in our boot sector to
  7408                                  ;   determine version number
  7409                                  ;
  7410                                  ;   inputs:	dl is rom drive number (80...)
  7411                                  ;		bh is partition number (0....) 
  7412                                  ;		ds:di points to bds
  7413                                  ;   outputs:	carry clear -> bpb is filled in
  7414                                  ;		carry set   -> bpb is left uninitialized due to error
  7415                                  ;	trashes (at least) si, cx
  7416                                  ;	MUST PRESERVE ES:!!!!
  7417                                  ;***************************************************************************
  7418                                  
  7419                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7420                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  7421                                  
  7422                                  sethard:	; proc near
  7423                                  		; 12/08/2023
  7424                                  		; ds = cs = BIOSDATA
  7425 00002167 57                      		push	di
  7426 00002168 53                      		push	bx
  7427                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  7428 00002169 06                      		push	es
  7429 0000216A 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  7430 0000216D 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  7431                                  		; 16/12/2023
  7432 00002170 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  7433                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  7434                                  					; fnon_removable
  7435 00002174 C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  7436                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7437                                  					; ffHardFile
  7438 00002178 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  7439 0000217D 88FE                    		mov	dh, bh		; partition number
  7440 0000217F 52                      		push	dx
  7441 00002180 B408                    		mov	ah, 8
  7442 00002182 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7443                                  					; DL = drive number
  7444                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7445                                  					; DL = number of consecutive drives
  7446                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7447                                  		;inc	dh
  7448                                  		; 16/12/2023 - Retro DOS v5.0
  7449 00002184 88F2                    		mov	dl, dh
  7450 00002186 B600                    		mov	dh, 0
  7451 00002188 42                      		inc	dx
  7452                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  7453 00002189 895515                  		mov	[di+15h], dx
  7454 0000218C 5A                      		pop	dx
  7455 0000218D 7253                    		jc	short setret	; error	if no hard disk
  7456                                  		; 16/12/2023
  7457                                  		;jc	short setret_j
  7458                                  		
  7459 0000218F 80E13F                  		and	cl, 3Fh
  7460 00002192 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  7461 00002195 52                      		push	dx		; save partition number
  7462 00002196 E8AFFF                  		call	getboot
  7463 00002199 5A                      		pop	dx		; restore partition number
  7464 0000219A 7246                    		jc	short setret
  7465                                  		; 16/12/2023
  7466                                  		;jnc	short chk_act_part
  7467                                  ;setret_j:
  7468                                  		;jmp	setret
  7469                                  
  7470                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7471                                  chk_act_part:
  7472 0000219C 31DB                    		xor	bx, bx ; 0
  7473                                  		;;mov	[cs:ep_start_sector], bx
  7474                                  		;;mov	[cs:ep_start_sector+2], bx
  7475                                  		;mov	[cs:ep_hidden_secs], bx
  7476                                  		;mov	[cs:ep_hidden_secs+2], bx
  7477                                  		; 16/12/2023
  7478                                  		; ds = cs
  7479                                  		; 20/12/2023
  7480                                  		;mov	[ep_start_sector], bx
  7481                                  		;mov	[ep_start_sector+2], bx
  7482 0000219E 891E[0422]              		mov	[ep_hidden_secs], bx
  7483 000021A2 891E[0622]              		mov	[ep_hidden_secs+2], bx
  7484                                  		
  7485 000021A6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7486                                  
  7487                                  ; The first 'active' partition is 00, the second is 01....
  7488                                  ;   then the remainder of the 'primary' but non-active partitions
  7489                                  
  7490                                  act_part:
  7491 000021A9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  7492 000021AE 740B                    		jz	short no_act	; no
  7493                                  ; 16/12/2023
  7494                                  %if 0		
  7495                                  		; 16/12/2023
  7496                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7497                                  		cmp	byte [es:bx], 1 ; FAT12
  7498                                  		jz	short got_good_act
  7499                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7500                                  		jz	short got_good_act
  7501                                  		
  7502                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7503                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7504                                  		jz	short got_good_act
  7505                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7506                                  		jz	short got_good_act
  7507                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7508                                  		jz	short got_good_act
  7509                                  
  7510                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7511                                  		jnz	short no_act
  7512                                  ;%else
  7513                                  		; 16/12/2023
  7514                                  		mov	al, [es:bx]	 ; partition type
  7515                                  
  7516                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7517                                  		cmp	al, 1		; FAT12
  7518                                  		je	short got_good_act
  7519                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7520                                  		je	short got_good_act
  7521                                  		
  7522                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7523                                  		cmp	al, 0Bh		; FAT32 CHS
  7524                                  		je	short got_good_act
  7525                                  		cmp	al, 0Ch		; FAT32 LBA
  7526                                  		je	short got_good_act
  7527                                  		cmp	al, 0Eh		; FAT16 LBA
  7528                                  		je	short got_good_act
  7529                                  
  7530                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7531                                  		jne	short no_act
  7532                                  %endif		
  7533                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7534                                  		; check if it is a primary dos partition
  7535                                  
  7536 000021B0 E83300                  		call	chk_partition_type
  7537 000021B3 7506                    		jne	short no_act
  7538                                  
  7539                                  got_good_act:				; 11/08/2023
  7540 000021B5 08F6                    		or	dh, dh		; is this our target partition #?
  7541                                  					; (0 = first primary dos or active partition)
  7542 000021B7 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  7543 000021B9 FECE                    		dec	dh		; count	down
  7544                                  no_act:					
  7545 000021BB 83C310                  		add	bx, 16
  7546 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7547                                  					; last entry done?
  7548 000021C2 75E5                    		jnz	short act_part	; no, process next entry
  7549                                  
  7550 000021C4 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7551                                  					; restore original value of bx
  7552                                  
  7553                                  ; Now scan the non-active partitions
  7554                                  
  7555                                  get_primary:
  7556 000021C7 26F647FC80              		test	byte [es:bx-4], 80h
  7557 000021CC 750B                    		jnz	short not_prim	; we've already scanned
  7558                                  					; the ACTIVE ones
  7559                                  ; 16/12/2023
  7560                                  %if 0
  7561                                  		; 16/12/2023
  7562                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7563                                  		cmp	byte [es:bx], 1	; FAT12
  7564                                  		jz	short got_prim
  7565                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7566                                  		jz	short got_prim
  7567                                  
  7568                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7569                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7570                                  		jz	short got_prim
  7571                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7572                                  		jz	short got_prim
  7573                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7574                                  		jz	short got_prim
  7575                                  
  7576                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7577                                  		jnz	short not_prim
  7578                                  ;%else
  7579                                  		; 16/12/2023
  7580                                  		mov	al, [es:bx]	 ; partition type
  7581                                  
  7582                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7583                                  		cmp	al, 1		; FAT12
  7584                                  		je	short got_prim
  7585                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7586                                  		je	short got_prim
  7587                                  		
  7588                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7589                                  		cmp	al, 0Bh		; FAT32 CHS
  7590                                  		je	short got_prim
  7591                                  		cmp	al, 0Ch		; FAT32 LBA
  7592                                  		je	short got_prim
  7593                                  		cmp	al, 0Eh		; FAT16 LBA
  7594                                  		je	short got_prim
  7595                                  
  7596                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7597                                  		jne	short not_prim
  7598                                  %endif
  7599                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7600                                  		; check if it is a primary dos partition
  7601                                  
  7602 000021CE E81500                  		call	chk_partition_type
  7603 000021D1 7506                    		jne	short not_prim
  7604                                  
  7605                                  got_prim:
  7606 000021D3 08F6                    		or	dh, dh		; is this our target partition?
  7607 000021D5 7431                    		jz	short set2
  7608 000021D7 FECE                    		dec	dh
  7609                                  not_prim:
  7610 000021D9 83C310                  		add	bx, 16
  7611 000021DC 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7612 000021E0 75E5                    		jnz	short get_primary ; loop till we've gone through table
  7613                                  setret:					
  7614 000021E2 F9                      		stc			; error	return
  7615 000021E3 E9C703                  		jmp	ret_hard_err
  7616                                  
  7617                                  ; ---------------------------------------------------------------------------
  7618                                  		
  7619                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7620                                  
  7621                                  chk_partition_type:
  7622                                  		; 16/12/2023
  7623 000021E6 268A07                  		mov	al, [es:bx]	 ; partition type
  7624                                  
  7625                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7626 000021E9 3C01                    		cmp	al, 1		; FAT12
  7627 000021EB 7412                    		je	short chk_ptype_retn
  7628 000021ED 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7629 000021EF 740E                    		je	short chk_ptype_retn
  7630                                  		
  7631                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7632 000021F1 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  7633 000021F3 740A                    		je	short chk_ptype_retn
  7634 000021F5 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  7635 000021F7 7406                    		je	short chk_ptype_retn
  7636 000021F9 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  7637 000021FB 7402                    		je	short chk_ptype_retn
  7638                                  
  7639 000021FD 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7640                                  chk_ptype_retn:
  7641                                  		; zf = 1 -> primary DOS partition
  7642                                  		; zf = 0 -> not a primary DOS partition
  7643 000021FF C3                      		retn
  7644                                  
  7645                                  ; ---------------------------------------------------------------------------
  7646                                  
  7647                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7648                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  7649                                  ep_start_sector:
  7650 00002200 00000000                		dd 0
  7651 00002204 00000000                ep_hidden_secs:	dd 0
  7652                                  
  7653                                  ; ---------------------------------------------------------------------------
  7654                                  
  7655                                  ;  until we get the real logical boot record and get the bpb,
  7656                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  7657                                  ;  for the convenience of the computation.
  7658                                  ;
  7659                                  ;  at the end of this procedure, if a bpb information is gotten from
  7660                                  ;  the valid boot record, then we are going to use those bpb information
  7661                                  ;  without change.
  7662                                  ;
  7663                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  7664                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  7665                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  7666                                  
  7667                                  set2:		
  7668                                  		; 12/08/2023
  7669                                  		; ds = cs = BIOSDATA segment (0070h)
  7670 00002208 8816[071A]              		mov	[rom_drv_num], dl
  7671                                  		;mov	[cs:rom_drv_num], dl
  7672                                  			; save the rom bios drive number we are handling now.
  7673 0000220C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  7674 00002210 268B5706                		mov	dx, [es:bx+6]
  7675                                  
  7676                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  7677                                  ; sectors should be allowed	
  7678                                  
  7679 00002214 83E801                  		sub	ax, 1
  7680 00002217 83DA00                  		sbb	dx, 0
  7681 0000221A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  7682 0000221E 2613570A                		adc	dx, [es:bx+10]
  7683 00002222 7305                    		jnc	short okdrive
  7684 00002224 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7685                                  
  7686                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7687                                  		;;;
  7688                                  okdrive:
  7689                                  		;add	ax, [cs:ep_hidden_secs]
  7690                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7691                                  		; ds = cs
  7692 00002229 0306[0422]              		add	ax, [ep_hidden_secs]
  7693 0000222D 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7694 00002231 7305                    		jnc	short okdrive_1
  7695 00002233 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7696                                  okdrive_1:
  7697 00002238 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  7698 0000223C 7418                    		je	short set_lba_flag
  7699 0000223E 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  7700 00002242 7412                    		je	short set_lba_flag
  7701 00002244 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  7702 00002247 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  7703 00002249 F77513                  		div	word [di+13h]
  7704 0000224C 31D2                    		xor	dx, dx
  7705 0000224E F77515                  		div	word [di+15h]
  7706 00002251 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  7707                                  					;  set LBA r/w flag
  7708 00002254 7204                     		jb	short set3
  7709                                  set_lba_flag:
  7710 00002256 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  7711                                  		;;;
  7712                                  ;okdrive:
  7713                                  		; 16/12/2023
  7714                                  set3:		
  7715                                  		;mov	ax, [es:bx+4]
  7716                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7717                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  7718                                  		;mov	ax, [es:bx+6]
  7719                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  7720                                  
  7721                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7722                                  		;;;
  7723 0000225A 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  7724 0000225E 268B5706                		mov	dx, [es:bx+6]
  7725                                  		;add	ax, [cs:ep_hidden_secs]
  7726                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7727                                  		; ds = cs
  7728 00002262 0306[0422]              		add	ax, [ep_hidden_secs]
  7729                                  					; + hidden secs of the extd dos partion
  7730 00002266 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7731 0000226A 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7732 0000226D 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  7733 00002270 31C0                    		xor	ax, ax ; 0
  7734 00002272 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  7735 00002275 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  7736                                  		;;;
  7737                                  
  7738 00002278 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  7739 0000227C 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  7740 00002280 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  7741 00002283 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  7742                                  					; bpb->maxsec =	p->partitionlength
  7743                                  		;cmp	dx, 0
  7744                                  		;ja	short okdrive_1
  7745                                  		; 16/12/2023
  7746 00002286 09D2                    		or	dx, dx
  7747 00002288 7505                    		jnz	short set3_read
  7748 0000228A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  7749                                  		;jb	short setret	; return -1;
  7750 0000228D 7264                    		jb	short set3_err
  7751                                  ;okdrive_1:
  7752                                  		; 16/12/2023
  7753                                  set3_read:
  7754 0000228F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  7755 00002292 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  7756 00002295 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  7757                                  					; usually equal	to the # of sec/trk.
  7758 00002297 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  7759 0000229A 50                      		push	ax
  7760 0000229B 89D0                    		mov	ax, dx
  7761 0000229D 31D2                    		xor	dx, dx
  7762 0000229F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  7763                                  					; (track)temp_h:ax + (sector)dx
  7764                                  ; 16/12/2023
  7765                                  %if 0
  7766                                  		; 17/10/2022
  7767                                  		;mov	[cs:temp_h], ax
  7768                                  		; 12/08/2023 (ds=cs)
  7769                                  		mov	[temp_h], ax
  7770                                  		pop	ax
  7771                                  		div	bx
  7772                                  		mov	cl, dl
  7773                                  		inc	cl
  7774                                  		xor	bx, bx
  7775                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  7776                                  		push	ax
  7777                                  		xor	dx, dx
  7778                                  		;mov	ax, [cs:temp_h]
  7779                                  		mov	ax, [temp_h] ; 12/08/2023
  7780                                  		div	bx
  7781                                  		;mov	[cs:temp_h], ax
  7782                                  		mov	[temp_h], ax ; 12/08/2023
  7783                                  		pop	ax
  7784                                  		div	bx		; dl is head, ax is cylinder
  7785                                  		; 12/08/2023 (ds=cs)
  7786                                  		cmp	word [temp_h], 0
  7787                                  		;cmp	word [cs:temp_h], 0
  7788                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7789                                  		cmp	ax, 1024
  7790                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7791                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  7792                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  7793                                  			; ('ja' must be 'jnb')
  7794                                  okdrive_2:
  7795                                   		; 28/07/2019
  7796                                  ; dl is head.
  7797                                  ; ax is cylinder
  7798                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  7799                                  
  7800                                  ;*** for mini disks ***
  7801                                  
  7802                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7803                                  					; check for mini disk
  7804                                  		jnz	short oknotmini	; not mini disk.
  7805                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  7806                                  					; set the physical track number
  7807                                  oknotmini:
  7808                                  %endif
  7809                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7810                                  		;;;
  7811                                  		;mov	[cs:saved_word], ax
  7812 000022A1 A3[9E04]                		mov	[saved_word], ax
  7813 000022A4 58                      		pop	ax
  7814 000022A5 F7F3                    		div	bx
  7815 000022A7 88D1                    		mov	cl, dl
  7816 000022A9 FEC1                    		inc	cl
  7817 000022AB 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  7818 000022AE 50                      		push	ax
  7819 000022AF 31D2                    		xor	dx, dx
  7820                                  		;mov	ax, [cs:saved_word]
  7821 000022B1 A1[9E04]                		mov	ax, [saved_word]
  7822 000022B4 F7F3                    		div	bx
  7823                                  		;mov	[cs:saved_word], ax
  7824 000022B6 A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  7825 000022B9 58                      		pop	ax
  7826 000022BA F7F3                    		div	bx		; dl is head, ax is cylinder
  7827                                  		; 16/12/2023
  7828 000022BC 0E                      		push	cs
  7829 000022BD 07                      		pop	es ; (*)
  7830 000022BE BB[5201]                		mov	bx, disksector ; (**)
  7831                                  		;
  7832 000022C1 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  7833 000022C5 742F                    		jz	short set3_chs_read
  7834                                  set3_lba_read:
  7835                                  
  7836                                  ; 16/12/2023
  7837                                  %if 0
  7838                                  		;push	cs
  7839                                  		;pop	es ; (*)
  7840                                  		;mov	bx, disksector ; (**)
  7841                                  
  7842                                  		;push	ds
  7843                                  		;push	si
  7844                                  		xor	ax, ax	; 0
  7845                                  		push	ax
  7846                                  		push	ax
  7847                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  7848                                  		push	ax
  7849                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  7850                                  		push	ax
  7851                                  		push	es		; buffer address
  7852                                  		push	bx
  7853                                  		mov	ax, 1		; sector (read) count
  7854                                  		push	ax
  7855                                  		;mov	ax, 16		; DAP size
  7856                                  		mov	al, 16
  7857                                  		push	ax
  7858                                  		mov	dl, [rom_drv_num] ; ds = cs
  7859                                  		mov	ax, ss
  7860                                  		mov	ds, ax ; ds = ss
  7861                                  		mov	si, sp
  7862                                  		;mov	dl, [cs:rom_drv_num]
  7863                                  		mov	ah, 42h
  7864                                  		int	13h		; DISK - IBM/MS Extension
  7865                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7866                                  		;pop	si
  7867                                  		;pop	ds
  7868                                  		jnc	short set3_lba_read_ok
  7869                                  		add	sp, 16
  7870                                  		;pop	si
  7871                                  		;pop	ds
  7872                                  set3_err:
  7873                                  		;jmp	setret
  7874                                  		jmp	ret_hard_err
  7875                                  
  7876                                  set3_lba_read_ok
  7877                                  		add	sp, 16
  7878                                  		;pop	si
  7879                                  		;pop	ds
  7880                                  		jmp	short set3_read_ok
  7881                                  %else
  7882                                  		; 16/12/2023
  7883                                  		;push	si ; * ; (not necessary)
  7884                                  		;mov	si, empty_dap_buff ; dap_buffer
  7885 000022C7 BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  7886 000022CA 56                      		push	si
  7887 000022CB 87FE                    		xchg	si, di
  7888                                  		; si = BDS
  7889                                  		; di = DAP buffer
  7890 000022CD B81000                  		mov	ax, 16
  7891 000022D0 AB                      		stosw		; DAP size
  7892 000022D1 B001                    		mov	al, 1
  7893 000022D3 AB                      		stosw		; sector (read) count
  7894                                  		; buffer address
  7895 000022D4 89D8                    		mov	ax, bx	; offset disksector
  7896 000022D6 AB                      		stosw
  7897 000022D7 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  7898 000022D9 AB                      		stosw
  7899                                  		; sector address (bits 0 to 31)	
  7900 000022DA 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  7901 000022DD AB                      		stosw
  7902 000022DE 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  7903 000022E1 AB                      		stosw
  7904                                  		; sector address bits 32 to 63 (0)
  7905 000022E2 31C0                    		xor	ax, ax ; 0
  7906 000022E4 AB                      		stosw
  7907 000022E5 AB                      		stosw
  7908                                  		;xchg	di, si
  7909 000022E6 89F7                    		mov	di, si
  7910                                  		; di = BDS
  7911 000022E8 5E                      		pop	si ; DAP buffer address	
  7912                                  		
  7913 000022E9 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  7914 000022ED B442                    		mov	ah, 42h
  7915 000022EF CD13                    		int	13h		; DISK - IBM/MS Extension
  7916                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7917                                  		;pop	si ; *
  7918 000022F1 7324                    		jnc	short set3_read_ok
  7919                                  set3_err:
  7920                                  		;jmp	setret
  7921 000022F3 E9B702                  		jmp	ret_hard_err
  7922                                  %endif
  7923                                  
  7924                                  set3_chs_read:
  7925 000022F6 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  7926 000022FA 7503                    		jnz	short oknotmini
  7927 000022FC 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  7928                                  		;;;
  7929                                  
  7930                                  oknotmini:
  7931                                  ;*** end of added logic for mini disk
  7932                                  				
  7933 000022FF D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  7934 00002301 D0CC                    		ror	ah, 1		; two bits of upper byte
  7935 00002303 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  7936 00002306 08E1                    		or	cl, ah		; move two bits to correct spot
  7937 00002308 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  7938                                  					; cl is sector + 2 high bits of cylinder
  7939 0000230A 88D6                    		mov	dh, dl		; dh is	head
  7940                                  		
  7941                                  		; 12/08/2023 (ds=cs)
  7942 0000230C 8A16[071A]              		mov	dl, [rom_drv_num]
  7943                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  7944                                  
  7945                                  ; cl is sector + 2 high bits of cylinder
  7946                                  ; ch is low 8 bits of cylinder
  7947                                  ; dh is head
  7948                                  ; dl is drive
  7949                                  
  7950                                  ; for convenience, we are going to read the logical boot sector
  7951                                  ; into cs:disksector area.
  7952                                  
  7953                                  ; read in boot sector using bios disk interrupt. the buffer where it
  7954                                  ; is to be read in is cs:disksector.
  7955                                  
  7956                                  		; 16/12/2023
  7957                                  		; es=ds=cs = BIOSDATA segment
  7958                                  		; bx = disksector ; (**)
  7959                                  
  7960                                  		;push	cs
  7961                                  		;pop	es ; (*)
  7962                                  		
  7963                                  		;mov	bx, disksector	; for convenience,
  7964                                  					; we are going to read the logical boot sector
  7965                                  					; into cs:disksector area.
  7966 00002310 B80102                  		mov	ax, 201h
  7967 00002313 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7968                                  					; AL = number of sectors to read, CH = track, CL = sector
  7969                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7970                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7971                                  		; 16/12/2023
  7972 00002315 72DC                    		jc	short set3_err
  7973                                  
  7974                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  7975                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  7976                                  ; media if we recognize the version number.
  7977                                  
  7978                                  set3_read_ok:
  7979                                  		; 11/08/2023
  7980                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  7981                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  7982                                  		; 18/12/2023
  7983                                  		;push	bx ; +
  7984                                  		;push	ax ; (not necessary)
  7985                                  
  7986                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7987                                  		;;;
  7988 00002317 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  7989 0000231D 7541                    		jne	short invalid_boot_record
  7990                                  		; 16/12/2023
  7991                                  		; 12/08/2023
  7992                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  7993 0000231F 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  7994 00002322 740B                    		je	short check_1_ok ; yes
  7995 00002324 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  7996 00002327 7537                    		jne	short invalid_boot_record ; no
  7997 00002329 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  7998 0000232D 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  7999                                  check_1_ok:
  8000 0000232F 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  8001                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  8002                                  		; 16/12/2023
  8003 00002333 740E                    		jz	short check_2	; FAT32 bs
  8004                                  
  8005                                  		; FAT16 or FAT12 bs
  8006                                  
  8007                                  		;push	ds
  8008                                  		;push	si  ; (not necessary)
  8009 00002335 57                      		push	di
  8010                                  		; es=ds=cs = BIOSDATA segment
  8011                                  		;push	es
  8012                                  		;pop	ds
  8013                                  
  8014                                  		;mov	cx, 28
  8015 00002336 B90E00                  		mov	cx, 14 ; *
  8016 00002339 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  8017                                  					;      to offset 64 (28 bytes)
  8018 0000233C 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  8019 0000233F FC                      		cld	; (not necessary, 'std' is not used before here)
  8020                                  		;rep movsb
  8021 00002340 F3A5                    		rep movsw ; *
  8022 00002342 5F                      		pop	di
  8023                                  		;pop	si
  8024                                  		;pop	ds
  8025                                  		;;;
  8026                                  ; 16/12/2023
  8027                                  %if 0
  8028                                  ;check_1:
  8029                                  		; 12/08/2023
  8030                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  8031                                  		cmp	byte [bx], 0E9h
  8032                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  8033                                  		je	short check_1_ok ; yes
  8034                                  		cmp	byte [bx], 0EBh
  8035                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  8036                                  		jne	short invalid_boot_record ; no
  8037                                  		cmp	byte [bx+2], 90h
  8038                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  8039                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8040                                  check_1_ok:
  8041                                  %endif
  8042                                  
  8043                                  ; 18/12/2023
  8044                                  %if 0
  8045                                  		; 14/08/2023
  8046                                  check_2:
  8047                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  8048                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  8049                                  					; point to the bpb in the boot record
  8050                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  8051                                  		mov	al, [bx+10] ; 12/08/2023 
  8052                                  					; get the mediadescriptor byte
  8053                                  		and	al, 0F0h	; mask off low nibble
  8054                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  8055                                  		jne	short invalid_boot_record ; no, invalid boot record
  8056                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  8057                                  		cmp	word [bx], 512 ; 12/08/2023
  8058                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8059                                  
  8060                                  check2_ok:				; yes, mediadescriptor ok.
  8061                                  		mov	al, [bx+2] ; 12/08/2023
  8062                                  		;mov	al, [cs:bx+2]	; now make sure that
  8063                                  					; the sectorspercluster is
  8064                                  					; a power of 2
  8065                                  					;
  8066                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  8067                                  					; get the sectorspercluster
  8068                                  %endif
  8069                                  		;;;
  8070                                  check_2:
  8071                                  		; 18/12/2023
  8072                                  		; bx = disksector
  8073 00002343 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  8074                                  					; get the mediadescriptor byte
  8075 00002346 24F0                    		and	al, 0F0h	; mask off low nibble
  8076 00002348 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  8077 0000234A 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  8078 0000234C 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  8079 00002351 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8080                                  
  8081                                  check2_ok:	; yes, mediadescriptor ok.
  8082 00002353 8A470D                  		mov	al, [bx+13]	; now make sure that
  8083                                  					; the sectorspercluster is
  8084                                  					; a power of 2
  8085                                  					;
  8086                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  8087                                  					; get the sectorspercluster
  8088                                  		;;;
  8089                                  
  8090 00002356 08C0                    		or	al, al		; is it zero?
  8091 00002358 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  8092                                  
  8093                                  ck_power_of_two:
  8094 0000235A D0E8                    		shr	al, 1		; shift until first bit emerges
  8095 0000235C 73FC                    		jnc	short ck_power_of_two
  8096 0000235E 7406                    		jz	short valid_boot_record
  8097                                  
  8098                                  invalid_boot_record:
  8099                                  		; 18/12/2023
  8100                                  		;pop	ax
  8101                                  		;pop	bx ; +
  8102 00002360 E96001                  		jmp	unknown		; jump to invalid boot record
  8103                                  					; unformatted or illegal media.
  8104                                  ; 16/12/2023
  8105                                  ; ---------------------------------------------------------------------------
  8106                                  ;	; 12/08/2023
  8107                                  ;setret_brdg:
  8108                                  ;		jmp	setret
  8109                                  ; ---------------------------------------------------------------------------
  8110                                  
  8111                                  unknown3_0_j:
  8112 00002363 E96101                  		jmp	unknown3_0	; legally formatted media,
  8113                                  					; although, content might be bad.
  8114                                  ; ---------------------------------------------------------------------------
  8115                                  
  8116                                  valid_boot_record:
  8117                                  		; 18/12/2023
  8118                                  		;pop	ax
  8119                                  		;pop	bx ; +
  8120                                  		
  8121                                  		; 18/12/2023
  8122                                  		; bx = offset disksector ; +
  8123                                  
  8124                                  ; Signature found. Now check version.
  8125                                  
  8126                                  		; 14/08/2023
  8127 00002366 817F08322E              		cmp	word [bx+8], '2.'
  8128                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  8129                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  8130 0000236B 7506                    		jne	short try5
  8131 0000236D 807F0A30                		cmp	byte [bx+10], '0'
  8132                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  8133                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  8134                                  		; 12/08/2023
  8135                                  		;jnz	short try5
  8136                                  		;jmp	short copybpb
  8137 00002371 7425                    		je	short copybpb
  8138                                  
  8139                                  ;; --------------------------------------------------------------------------
  8140                                  ;;	; 12/08/2023
  8141                                  ;;setret_brdg:
  8142                                  ;;		jmp	setret
  8143                                  ;; --------------------------------------------------------------------------
  8144                                  ;
  8145                                  ;unknown3_0_j:
  8146                                  ;		jmp	unknown3_0	; legally formatted media,
  8147                                  ;					; although, content might be bad.
  8148                                  ; ---------------------------------------------------------------------------
  8149                                  
  8150                                  try5:
  8151 00002373 E83B02                  		call	cover_fdisk_bug
  8152                                  
  8153                                  ; see if it is an os2 signature
  8154                                  
  8155                                  		; 12/08/2023
  8156                                  		; ds = cs = BIOSDATA segment
  8157 00002376 817F08302E              		cmp	word [bx+8], '0.'
  8158                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  8159                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  8160 0000237B 750C                    		jne	short no_os2
  8161 0000237D 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  8162                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  8163 00002380 2C31                    		sub	al, '1'
  8164                                  		;sub	al, 31h		; '1'
  8165 00002382 24FE                    		and	al, 0FEh
  8166 00002384 7412                    		jz	short copybpb	; accept either	'1' or '2'
  8167 00002386 E93A01                  		jmp	unknown
  8168                                  ; ---------------------------------------------------------------------------
  8169                                  
  8170                                  ; no os2 signature, this is to check for real dos versions
  8171                                  
  8172                                  no_os2:
  8173                                  		; 12/08/2023
  8174                                  		; ds = cs = BIOSDATA
  8175 00002389 817F08332E              		cmp	word [bx+8], '3.'			
  8176                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  8177                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  8178 0000238E 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  8179                                  					; do not trust it, but still legal.
  8180 00002390 7506                    		jnz	short copybpb	; honor	os2 boot record
  8181                                  					; or dos 4.0 version
  8182 00002392 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  8183                                  		;cmp	byte [cs:bx+10], '1'
  8184                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  8185 00002396 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  8186                                  copybpb:
  8187                                  
  8188                                  ; 03/10/2022
  8189                                  
  8190                                  ; we have a valid boot sector. use the bpb in it to build the
  8191                                  ; bpb in bios. it is assumed that only
  8192                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  8193                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  8194                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  8195                                  ; need to be set (all other values in already). fbigfat is also set.
  8196                                  
  8197                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  8198                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  8199                                  ; and system id according to the boot record.
  8200                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  8201                                  
  8202                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8203                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  8204                                  		;;;
  8205                                  		; 17/12/2023
  8206 00002398 BE[5D01]                		mov	si, disksector+11
  8207                                  		;sub	ch, ch ; ; (ch may be > 0)
  8208 0000239B 29C9                    		sub	cx, cx ; 0 
  8209                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  8210 0000239D 8A4C05                  		mov	cl, [si+5] ; number of FATs
  8211                                  
  8212                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  8213                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  8214                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  8215                                  
  8216                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  8217                                  		;cmp	word [disksector+4Dh], 0
  8218                                  		;jnz	short check_3
  8219                                  
  8220                                  		; 17/12/2023
  8221                                  		; check extended boot signature (0x29)
  8222                                  		;
  8223                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  8224                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  8225                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  8226                                  		
  8227                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  8228 000023A0 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  8229                                  		;jmp	short check_4
  8230                                  check_3:
  8231                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  8232                                  		;cmp	byte [disksector+26h], 29h ; (***)
  8233                                  check_4:
  8234 000023A5 7538                    		jnz	short copybpb_fat	; conventional fat system
  8235                                  
  8236                                  ; 17/12/2023
  8237                                  %if 0
  8238                                  		; 10/12/2022
  8239                                  		; (number of FATs optimization)
  8240                                  		mov	si, disksector+11 ; disksector+0Bh
  8241                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  8242                                  		;mov	cl, [cs:si+05h]
  8243                                  		; 12/08/2023
  8244                                  		; ds = cs = BIOSDATA segment (0070h)
  8245                                  		mov	cl, [si+05h] ; number of FATs
  8246                                  
  8247                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  8248                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  8249                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  8250                                  					; [disksector+EXT_BOOT.SIG]
  8251                                  					; EXT_BOOT_SIGNATURE
  8252                                  		jnz	short copybpb_fat ; conventional fat system
  8253                                  
  8254                                  		; 03/10/2022
  8255                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  8256                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  8257                                  		;	     number of FATs must be 2 ; =*?=
  8258                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  8259                                  		;
  8260                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  8261                                  
  8262                                  		; 10/12/2022
  8263                                  		;cmp	byte [cs:disksector+10h], 0
  8264                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  8265                                  		;jnz	short copybpb_fat ; a fat system.
  8266                                  		or	cl, cl	 ; [cs:disksector+10h]
  8267                                  		jnz	short copybpb_fat ; a fat system.
  8268                                  %endif
  8269                                  
  8270                                  		; 17/12/2023 - Retro DOS v5.0
  8271                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  8272                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  8273                                  		;jnz	short copybpb_fat ; a fat system
  8274                                  		; 17/12/2023
  8275                                  		; cl = [disksector+10h]
  8276 000023A7 20C9                    		and	cl, cl ; 0 ?
  8277 000023A9 7534                    		jnz	short copybpb_fat ; a fat system
  8278                                  
  8279                                  ; non fat based	media.
  8280                                  
  8281 000023AB 57                      		push	di  ; BDS
  8282                                  		; 12/08/2023
  8283                                  		;push	ds  ; ds = cs = BIOSDATA segment
  8284                                  		
  8285                                  		; 17/12/2023
  8286                                  		; es = ds = cs
  8287                                  		;push	ds
  8288                                  		;pop	es
  8289                                  
  8290                                  		; 12/08/2023
  8291                                  		; ds = cs
  8292                                  		;push	cs
  8293                                  		;pop	ds
  8294                                  
  8295                                  		; 10/12/2022
  8296                                  		; (number of FATs optimization)
  8297                                  		; SI = disksector+11
  8298                                  		; 17/10/2022
  8299                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8300                                  		;mov	si, disksector+11
  8301 000023AC 83C706                  		add	di, 6		; add di,BDS.BPB
  8302                                  
  8303                                  ; just for completeness, we'll make sure that total_sectors and
  8304                                  ; big_total_sectors aren't both zero. I've seen examples of
  8305                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  8306                                  ; got that way. If it occurs, then use the values from the
  8307                                  ; partition table.
  8308                                  
  8309                                  		; 17/12/2023
  8310                                  		; cx = 0
  8311                                  		; 18/12/2022
  8312                                  		;sub	cx, cx
  8313                                  
  8314                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  8315                                  		;jnz	short already_nonz 
  8316                                  		;			; how about big_total?
  8317                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  8318                                  		;jnz	short already_nonz ; we're okay if any are != 0
  8319                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8320                                  		;jnz	short already_nonz
  8321                                  
  8322                                  		; 12/08/2023
  8323                                  		; ds = cs = BIOSDATA segment (0070h)
  8324                                  
  8325                                  		; 17/12/2023
  8326                                  		; 12/08/2023
  8327 000023AF 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  8328 000023B2 751C                    		jnz	short already_nonz
  8329                                  				    	; how about big_total?
  8330 000023B4 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  8331 000023B7 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  8332 000023B9 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  8333 000023BC 7512                    		jnz	short already_nonz
  8334                                  
  8335                                  ; now let's copy the values from the partition table (now in the BDS)
  8336                                  ; into the BPB in the boot sector buffer, before they get copied back.
  8337                                  
  8338 000023BE 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  8339                                  		; 12/08/2023
  8340                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  8341 000023C1 894408                  		mov	[si+8], ax
  8342 000023C4 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  8343                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  8344 000023C7 894415                  		mov	[si+15h], ax
  8345 000023CA 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  8346                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8347 000023CD 894417                  		mov	[si+17h], ax
  8348                                  
  8349                                  already_nonz:
  8350                                  		; 18/12/2022
  8351                                  		; cx = 0
  8352                                  		;mov	cl, 25
  8353                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  8354                                  		; 17/12/2023 - Retro DOS v5.0
  8355 000023D0 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  8356                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  8357 000023D2 F3A4                    		rep movsb
  8358                                  		;pop	ds
  8359                                  		; 12/08/2023
  8360                                  		; ds = cs
  8361                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  8362 000023D4 5F                      		pop	di  ; BDS
  8363                                  		;push	es
  8364                                  		;push	ds
  8365                                  		;pop	es
  8366                                  		;push	cs
  8367                                  		;pop	ds
  8368                                  		; 12/08/2023
  8369                                  		;mov	es, bp
  8370                                  		; ds = cs = es
  8371                                  		
  8372                                  		; 14/08/2023
  8373 000023D5 BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  8374                                  		; 18/12/2022
  8375                                  		;mov	bp, mov_media_ids
  8376                                  		;;mov	bp, 751h	; mov_media_ids
  8377                                  					; at 2C7h:751h = 70h:2CC1h
  8378                                  					; set volume id, systemid, serial.
  8379 000023D8 0E                      		push	cs		; simulate far call
  8380 000023D9 E895F6                  		call	call_bios_code
  8381                                  		; 12/08/2023
  8382                                  		; ds = cs = es
  8383                                  		;push	es
  8384                                  		;pop	ds
  8385                                  		;pop	es
  8386 000023DC E9C701                  		jmp	goodret
  8387                                  
  8388                                  ; ---------------------------------------------------------------------------
  8389                                  
  8390                                  ; ****** cas ---
  8391                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  8392                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  8393                                  ; happens with some frequency -- perhaps through some OS/2 setup
  8394                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  8395                                  ; from the boot sector into the DPB anyway, we've just been using
  8396                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  8397                                  ; we'll go ahead and copy it into the DPB, except in the case
  8398                                  ; that it equals zero, in which case we just use the values in
  8399                                  ; the DPB from the partition table.
  8400                                  
  8401                                  ; 17/10/2022
  8402                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  8403                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  8404                                  ; 09/12/2022
  8405                                  MOVMEDIAIDS equ mov_media_ids
  8406                                  CLEARIDS equ clear_ids
  8407                                  ; 11/09/2023
  8408                                  CLEARIDS_X equ clear_ids_x
  8409                                  
  8410                                  copybpb_fat:
  8411                                  		; 17/12/2023
  8412                                  		; ch = 0, cl = number of FATs
  8413                                  		; 10/12/2022
  8414                                  		; (number of FATs optimization)
  8415                                  		; SI = disksector+11
  8416                                  		; 17/10/2022
  8417                                  		;mov	si, disksector+11
  8418                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8419                                  					; cs:si	-> bpb in boot
  8420                                  		; 17/12/2023
  8421                                  		; dx = 0
  8422                                  		; 08/05/2024
  8423                                  		; 18/04/2024 (BugFix)
  8424 000023DF 31D2                    		xor	dx, dx
  8425                                  
  8426                                  		; 12/08/2023
  8427                                  		; ds = cs = BIOSDATA segment (0070h)
  8428 000023E1 8B4408                  		mov	ax, [si+8]
  8429                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  8430                                  					; get totsec from boot sec
  8431 000023E4 09C0                    		or	ax, ax
  8432 000023E6 7514                    		jnz	short copy_totsec ; if non zero, use that
  8433 000023E8 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  8434                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  8435                                  					; get the big version
  8436                                  					; (32 bit total	sectors)
  8437 000023EB 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  8438                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8439                                  		; 10/12/2022
  8440                                  		; (number of FATs optimization)
  8441                                  		; CL = number of FATs (2 or 1) 
  8442 000023EE 89D3                    		mov	bx, dx		; see if it is a big zero
  8443 000023F0 09C3                    		or	bx, ax
  8444 000023F2 7508                    		jnz	short copy_totsec
  8445                                  			; screw it. it was bogus.
  8446 000023F4 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8447 000023F7 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8448 000023FA EB06                    		jmp	short fat_big_small
  8449                                  
  8450                                  		;mov	cx, dx
  8451                                  		;or	cx, ax		; see if it is a big zero
  8452                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  8453                                  copy_totsec:				
  8454 000023FC 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8455                                  					; make DPB match boot sec
  8456 000023FF 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8457                                  
  8458                                  		; 10/12/2022
  8459                                  ;totsec_already_set:			
  8460                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8461                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8462                                  
  8463                                  ; determine fat entry size.
  8464                                  
  8465                                  fat_big_small:
  8466                                  
  8467                                  ;at this moment dx;ax = total sector number
  8468                                  
  8469                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  8470                                  ;from the BPB on the disk
  8471                                  		
  8472                                  		; 12/08/2023
  8473                                  		; ds = cs = BIOSDATA segment (0070h)
  8474                                  				
  8475 00002402 8B5C03                  		mov	bx, [si+3]
  8476                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  8477                                  					; get #reserved_sectors	from BPB
  8478 00002405 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  8479                                  					; update BDS field
  8480 00002408 29D8                    		sub	ax, bx
  8481 0000240A 83DA00                  		sbb	dx, 0		; update the count
  8482                                  		; 12/08/2023
  8483 0000240D 8B5C0B                  		mov	bx, [si+0Bh]
  8484                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  8485                                  					; bx = sectors/fat
  8486 00002410 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  8487                                  					; set in bds bpb
  8488                                  		; 17/12/2023 - Retro DOS v5.0
  8489                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8490 00002413 53                      		push	bx ; FAT sectors
  8491 00002414 09DB                    		or	bx, bx
  8492 00002416 753A                    		jnz	short fat_16bit	
  8493                                  
  8494                                  ; 17/12/2023
  8495                                  %if 0		
  8496                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  8497                                  					; BPB.FATSz32
  8498                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  8499                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  8500                                  		mov	bx, [si+19h]	; BPB.FATSz32
  8501                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8502                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8503                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8504                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8505                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8506                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8507                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8508                                  		mov	bx, [si+21h]	; BPB.RootClus
  8509                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8510                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8511                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8512                                  		mov	bx, [si+25h]	; BPB.FSInfo
  8513                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8514                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8515                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8516                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  8517                                  					; correct code (would be):
  8518                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  8519                                  					; sub_fat32_size:
  8520                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  8521                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  8522                                  					;   dec cl
  8523                                  					;   jg short sub_fat32_size
  8524                                  					;   jmp short fat_32bit
  8525                                  %endif
  8526                                  		; 17/12/2023
  8527                                  		; cl = BPB_NumFATs (2 or 1)
  8528                                  		; ch = 0
  8529 00002418 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  8530                                  sub_fat32_size:
  8531 0000241B 29D8                    		sub	ax, bx
  8532 0000241D 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  8533                                  		;dec	cl
  8534 00002420 49                      		dec	cx
  8535 00002421 7FF8                    		jg	short sub_fat32_size
  8536                                  
  8537 00002423 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8538 00002426 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8539 00002429 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8540                                  
  8541 0000242C 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8542 0000242F 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8543 00002432 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8544 00002435 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8545 00002438 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  8546 0000243B 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8547 0000243E 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8548 00002441 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8549 00002444 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  8550 00002447 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8551 0000244A 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8552 0000244D 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8553 00002450 EB08                    		jmp	short fat_32bit
  8554                                  		
  8555                                  fat_16bit:
  8556                                  		; 17/12/2023 - Retro DOS v5.0
  8557                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8558                                  		; 10/12/2022
  8559                                  		; (number of FATs optimization)
  8560                                  		; CL = number of FATs (2 or 1)
  8561                                  		; CH = 0 ; 17/12/2023 
  8562                                  		;dec	cl ; *
  8563                                  		; 18/12/2022
  8564 00002452 49                      		dec	cx ; *
  8565 00002453 D3E3                    		shl	bx, cl
  8566                                  		;shl	bx, 1	; =*?=	; always 2 fats
  8567                                  		
  8568 00002455 29D8                    		sub	ax, bx		; sub #	fat sectors
  8569 00002457 83DA00                  		sbb	dx, 0
  8570                                  fat_32bit:	
  8571                                  		; 17/12/2023
  8572 0000245A 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  8573                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  8574                                  					; # root entries
  8575 0000245D 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  8576                                  					; set in bds bpb
  8577 00002460 B104                    		mov	cl, 4
  8578 00002462 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  8579 00002464 29D8                    		sub	ax, bx		; sub #	dir sectors
  8580 00002466 83DA00                  		sbb	dx, 0		;
  8581                                  					; dx:ax	now contains the
  8582                                  					; # of data sectors
  8583                                  		; 17/12/2023
  8584                                  		; ch = 0
  8585                                  		;xor	cx, cx ; *
  8586 00002469 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  8587                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  8588                                  					; sectors per cluster
  8589 0000246C 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  8590                                  					; set in bios bpb
  8591 0000246F 50                      		push	ax
  8592 00002470 89D0                    		mov	ax, dx
  8593 00002472 31D2                    		xor	dx, dx
  8594 00002474 F7F1                    		div	cx		; cx = sectors per cluster
  8595                                  		; 12/08/2023 (ds=cs)
  8596                                  		;mov	[temp_h], ax
  8597                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  8598                                  					; # clusters.
  8599                                  		; 17/12/2023
  8600 00002476 A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  8601 00002479 58                      		pop	ax
  8602 0000247A F7F1                    		div	cx
  8603                                  		; 17/12/2023
  8604                                  		;;cmp	word [cs:temp_h], 0
  8605                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  8606                                  		;cmp	word [saved_word], 0 ; (*)
  8607                                  		;ja	short toobig_ret ; too big cluster number
  8608                                  
  8609                                  		; 17/12/2023
  8610                                  		;;;
  8611 0000247C 5B                      		pop	bx ; FAT sectors (16 bit)
  8612                                  		;and	bx, bx ; 0 ?
  8613 0000247D 09DB                    		or	bx, bx ; 0 ?
  8614 0000247F 751F                    		jnz	short chk_clnum_hw
  8615                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  8616                                  
  8617 00002481 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  8618 00002487 7503                    		jne	short fat32_clust_limit
  8619 00002489 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  8620                                  fat32_clust_limit:
  8621 0000248C 772D                    		ja	short short toobig_ret ; too big cluster number
  8622 0000248E 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  8623                                  	 	;jnz	short fat16_clust_limit
  8624 00002492 7505                    		jnz	short set_fbigbig_flag ; 17/12/2023
  8625                                  fat16_clust_limit:	; 17/12/2023
  8626 00002494 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  8627                                  ;fat16_clust_limit:
  8628 00002497 760E                    		jna     short fat12_clust_limit ; jbe
  8629                                  set_fbigbig_flag:	; 17/12/2023
  8630 00002499 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  8631 0000249E EB11                    		jmp	short copymediaid
  8632                                  chk_clnum_hw:
  8633 000024A0 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  8634 000024A5 7714                    		ja	short toobig_ret ; too big cluster number
  8635                                  		;;;
  8636                                  fat12_clust_limit:
  8637 000024A7 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  8638                                  					; is this 16-bit fat?
  8639 000024AA 7205                    		jb	short copymediaid ; no,	small fat
  8640                                  		; 17/10/2022
  8641 000024AC 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  8642                                  		;or	ds:fbigfat, 40h	; fbig
  8643                                  					; 16 bit fat
  8644                                  copymediaid:
  8645                                  		; 17/12/2023
  8646                                  		; es = ds = cs
  8647                                  		
  8648                                  		;push	es
  8649                                  		;push	ds
  8650                                  		;pop	es
  8651                                  		
  8652                                  		; 12/08/2023
  8653                                  		; ds = cs = BIOSDATA
  8654                                  		;push	cs
  8655                                  		;pop	ds
  8656                                  		; 17/10/2022
  8657 000024B1 BD[4F08]                		mov	bp, MOVMEDIAIDS
  8658                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  8659                                  		;;mov	bp, 751h	; mov_media_ids
  8660                                  					; at 2C7h:751h = 70h:2CC1h
  8661                                  					; copy filesys_id, volume label
  8662 000024B4 0E                      		push	cs		; simulate far call
  8663 000024B5 E8B9F5                  		call	call_bios_code
  8664                                  
  8665                                  		; 12/08/2023
  8666                                  		;push	es
  8667                                  		;pop	ds
  8668                                  		; 17/12/2023	
  8669                                  		;pop	es
  8670                                  
  8671 000024B8 E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  8672                                  					; and return.
  8673                                  ; ---------------------------------------------------------------------------
  8674                                  
  8675                                  toobig_ret:
  8676                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  8677 000024BB 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8678                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  8679                                  					; too big (32 bit clust #) for FAT16
  8680 000024C0 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  8681                                  					; but useless. to big for
  8682                                  					; current pc dos fat file system
  8683                                  ; ---------------------------------------------------------------------------
  8684                                  
  8685                                  unknown:
  8686                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8687 000024C3 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  8688                                  					 ; unformatted_media
  8689                                  		; 12/12/2022
  8690                                  		;or	byte [di+24h], 02h
  8691                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  8692                                  					; unformatted_media
  8693                                  					; Set unformatted media	flag.
  8694                                  
  8695                                  ; the boot signature may not be	recognizable,
  8696                                  ; but we should	try and	read it	anyway.
  8697                                  
  8698                                  unknown3_0:
  8699 000024C7 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  8700                                  					; [di+BDS.totalsecs32+2]
  8701 000024CA 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8702 000024CD BE[161A]                		mov	si, disktable2
  8703                                  scan:					; 08/08/2023
  8704                                  		;cmp	dx, [cs:si]	; total sectors hw
  8705                                  		; 12/08/2023 (ds=cs)
  8706 000024D0 3B14                    		cmp	dx, [si] 
  8707 000024D2 720C                     		jb	short gotparm
  8708 000024D4 7705                    		ja	short scan_next
  8709                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  8710 000024D6 3B4402                  		cmp	ax, [si+2]
  8711 000024D9 7605                    		jbe	short gotparm
  8712                                  scan_next:				
  8713 000024DB 83C60A                  		add	si, 10		; 5*2
  8714 000024DE EBF0                    		jmp	short scan	; covers upto 512 mb media
  8715                                  ; ---------------------------------------------------------------------------
  8716                                  
  8717                                  gotparm:
  8718 000024E0 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  8719                                  		;or	ds:fbigfat, cl
  8720                                  		; 17/10/2022
  8721 000024E3 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  8722                                  		; 12/08/2023
  8723                                  		; ds = cs = BIOSDATA
  8724 000024E7 8B4C04                  		mov	cx, [si+4]
  8725                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  8726                                  					; cl = log base 2 of ch
  8727 000024EA 8B5406                  		mov	dx, [si+6]
  8728                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  8729                                  
  8730                                  ; now calculate size of fat table
  8731                                  
  8732 000024ED 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  8733                                  					; save number of (root)	dir entries
  8734 000024F0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8735 000024F3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8736 000024F6 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  8737                                  					; save sectors per cluster
  8738                                  		
  8739                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8740 000024F9 F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  8741                                  		; 11/09/2023
  8742                                  		; 17/10/2022
  8743                                  		;test	byte [fbigfat], 40h
  8744                                  		;;test	ds:fbigfat, 40h	; fbig
  8745                                  					; if (fbigfat)
  8746 000024FE 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  8747                                  
  8748                                  ; we don't need to change "small fat" logic since it is guaranteed
  8749                                  ; that double word total sector will not use 12 bit fat (unless
  8750                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  8751                                  ; so in this case we assume dx = 0 !!
  8752                                  
  8753 00002500 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  8754 00002502 88EB                    		mov	bl, ch
  8755 00002504 4B                      		dec	bx
  8756 00002505 01C3                    		add	bx, ax		; dx=0
  8757 00002507 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  8758 00002509 43                      		inc	bx		; BDS.secperclus
  8759 0000250A 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  8760 0000250D 89DE                    		mov	si, bx
  8761 0000250F D1EB                    		shr	bx, 1
  8762 00002511 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  8763 00002513 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  8764 00002517 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  8765 00002519 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  8766                                  					; save number of fat sectors
  8767 0000251C EB6A                    		jmp	short massage_bpb
  8768                                  ; ---------------------------------------------------------------------------
  8769                                  
  8770                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  8771                                  
  8772                                  dobig:					
  8773 0000251E B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  8774 00002520 52                      		push	dx		; save total sectors (high)
  8775 00002521 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  8776 00002524 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  8777 00002526 29D0                    		sub	ax, dx
  8778 00002528 5A                      		pop	dx
  8779 00002529 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  8780 0000252C 83E801                  		sub	ax, 1
  8781 0000252F 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  8782                                  					; total	secs - reserved	secs - root dir	secs
  8783 00002532 B302                    		mov	bl, 2
  8784 00002534 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  8785                                  					; bx = 256 * BDS.secperclus + 2
  8786                                  
  8787                                  ; I don't understand why to add bx here!!!
  8788                                  
  8789                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  8790                                  		; 27/09/2022
  8791                                  		; (Microsoft FAT32 File	System Specification,
  8792                                  		; December 2000, Page 21)
  8793                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  8794                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  8795                                  		; 8/8/2023 (Retro DOS v5.0)
  8796                                  		; If(FATType == FAT32)
  8797                                  		;   TmpVal2 = TmpVal2 / 2;
  8798                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  8799                                  		; 8/8/2023 (Retro DOS v5.0)
  8800                                  		; If(FATType == FAT32) {
  8801                                  		;   BPB_FATSz16 = 0;
  8802                                  		;   BPB_FATSz32 = FATSz;
  8803                                  		;} else {
  8804                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  8805                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  8806                                  		;}
  8807                                  					; dx:ax = TmpVal1, bx = TmpVal2
  8808 00002537 01D8                    		add	ax, bx		; 
  8809 00002539 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  8810 0000253C 83E801                  		sub	ax, 1		
  8811 0000253F 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  8812                                  
  8813                                  		;;;
  8814                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8815 00002542 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  8816 00002547 740D                    		jz      short dobig1
  8817                                  
  8818 00002549 D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  8819                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  8820 0000254B 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  8821 0000254E 83DA00                  		sbb	dx, 0
  8822 00002551 29D8                    		sub	ax, bx
  8823 00002553 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  8824                                  					;       = TmpVal1+(TmpVal2-1)
  8825                                  dobig1:
  8826 00002556 50                      		push	ax		; save lw of dividend
  8827 00002557 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  8828 00002559 31D2                    		xor	dx, dx
  8829 0000255B F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  8830                                  					; remainder in dx is hw of 2nd stage dividend
  8831 0000255D 89C5                    		mov	bp, ax		; hw of quotient
  8832 0000255F 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  8833                                  		;;;
  8834                                  
  8835                                  ; assuming dx in the table will never be bigger than bx.
  8836                                  
  8837 00002560 F7F3                    		div	bx		; BDS.fatsecs =
  8838                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  8839 00002562 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  8840                                  					; number of fat	sectors
  8841                                  		;;;
  8842                                  		
  8843                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8844 00002565 8A1E[061A]              		mov	bl, [fbigfat]
  8845 00002569 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  8846                                  		
  8847 0000256C F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  8848 0000256F 7410                    		jz	short dobig2	; not FAT32
  8849                                  
  8850 00002571 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  8851 00002574 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  8852 00002577 C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  8853                                  					; clear 16 bit FAT size field
  8854 0000257C C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  8855                                  					; set reserved sectors to 32 (FAT32 de facto)
  8856                                  dobig2:
  8857                                  		;;;
  8858                                  
  8859                                  ; now, set the default filesys_id, volume label, serial number
  8860                                  
  8861                                  		; 05/08/2023
  8862                                  		; [di+1Fh] = [fbigfat]
  8863                                  		;
  8864                                  		;;mov	bl, ds:fbigfat
  8865                                  		;; 17/10/2022
  8866                                  		;mov	bl, [fbigfat]
  8867                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  8868                                  
  8869                                  		; 12/08/2023
  8870                                  		;push	ds ; ds = cs = BIOSDATA
  8871                                  		
  8872                                  		; 17/12/2023
  8873                                  		; es = ds = cs
  8874                                  		;push	ds
  8875                                  		;pop	es
  8876                                  
  8877                                  		; 12/08/2023 
  8878                                  		; ds = cs = BIOSDATA
  8879                                  		;push	cs
  8880                                  		;pop	ds
  8881                                  
  8882                                  		; 18/12/2023 - Retro DOS v5.0
  8883                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  8884                                  		; 11/09/2023
  8885                                  		;mov	al, [fbigfat]
  8886 00002581 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  8887                                  		; 17/10/2022
  8888                                  		;mov	bp, CLEARIDS
  8889                                  		;;mov	bp, 5D9h	; clear_ids
  8890                                  					; at 2C7h:5D9h = 70h:2B49h
  8891                                  					; at BIOSCODE:06ABh
  8892                                  					;	in PCDOS 7.1 IBMBIO.COM
  8893 00002584 0E                      		push	cs
  8894 00002585 E8E9F4                  		call	call_bios_code
  8895                                  
  8896                                  		; 12/08/2023
  8897                                  		;pop	ds ; ds = cs = BIOSDATA
  8898                                  
  8899                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  8900                                  ; set according to the partition information. we are going to
  8901                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  8902                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  8903                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  8904                                  ; we don't do this for the bpb information from the boot record. we
  8905                                  ; are not going to change the bpb information from the boot record.
  8906                                  
  8907                                  massage_bpb:
  8908                                  		; 05/08/2023
  8909                                  		; [di+1Fh] = [fbigfat]
  8910                                  		;
  8911                                  		;; 12/12/2022
  8912                                  		;mov	bl, [fbigfat]
  8913                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8914                                  		;			; set size of fat on media
  8915                                  		;
  8916 00002588 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8917 0000258B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8918                                  		; 11/09/2023
  8919 0000258E 09D2                    		or	dx, dx
  8920 00002590 7514                    		jnz	short goodret	
  8921                                  		;cmp	dx, 0		; double word total sectors?
  8922                                  		;;ja	short goodret	; don't have to change it.
  8923                                  		;; 12/12/2022
  8924                                  		;ja	short short goodret2
  8925                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  8926                                  		;ja	short goodret	; don't have to change it.
  8927                                  		; 12/12/2022
  8928 00002592 395519                  		cmp	[di+19h], dx ; 0
  8929                                  		;ja	short goodret2
  8930 00002595 770F                    		ja	short goodret	; 11/09/2023
  8931 00002597 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  8932                                  		;jb	short goodret
  8933                                  		; 12/12/2022
  8934                                  		;jc	short goodret
  8935 0000259A 7209                    		jc	short goodret_clc ; 11/09/2023
  8936 0000259C 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8937 0000259F 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  8938                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  8939                                  		; 12/12/2022
  8940 000025A2 89551B                  		mov	[di+1Bh], dx ; 0
  8941                                  goodret_clc:
  8942                                  		; 11/09/2023
  8943 000025A5 F8                      		clc 
  8944                                  goodret:
  8945                                  		;mov	bl, ds:fbigfat
  8946                                  		; 11/09/2023
  8947                                  		; 12/12/2022
  8948                                  		; 17/10/2022
  8949 000025A6 8A1E[061A]              		mov	bl, [fbigfat]
  8950                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8951 000025AA 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  8952                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8953                                  					; set size of fat on media
  8954                                  		; 11/09/2023
  8955                                  		;clc
  8956                                  ret_hard_err:
  8957                                  		; 12/12/2022
  8958                                  goodret2:
  8959 000025AD 07                      		pop	es
  8960                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  8961 000025AE 5B                      		pop	bx
  8962 000025AF 5F                      		pop	di
  8963 000025B0 C3                      		retn
  8964                                  
  8965                                  ; =============== S U B	R O U T	I N E =======================================
  8966                                  
  8967                                  ; 15/10/2022
  8968                                  
  8969                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  8970                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  8971                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  8972                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  8973                                  ;then subtract 1 from BPB_TOTALSECTORS.
  8974                                  
  8975                                  		; 17/10/2022
  8976                                  cover_fdisk_bug:
  8977                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8978                                  		; ds = cs
  8979                                  
  8980                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8981                                  		; (optimization)
  8982                                  		;push	ax
  8983                                  		;push	dx
  8984                                  		;push	si
  8985                                  
  8986                                  		; 18/12/2023
  8987                                  		; bx = offset disksector
  8988                                  
  8989                                  		; 18/12/2023
  8990 000025B1 807F2629                		cmp	byte [bx+26h], 29h
  8991                                  		; 12/08/2023
  8992                                  		;cmp	byte [disksector+26h], 29h
  8993                                  		;;cmp	byte [cs:disksector+26h], 29h
  8994                                  					; [disksector+EXT_BOOT.SIG],
  8995                                  					; EXT_BOOT_SIGNATURE
  8996 000025B5 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  8997                                  		
  8998 000025B7 817F073130              		cmp	word [bx+7], 3031h
  8999                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  9000 000025BC 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
  9001 000025BE 807F0A30                		cmp	byte [bx+10], '0'
  9002                                  		;cmp	byte [cs:bx+10], '0'
  9003 000025C2 7519                    		jne	short cfb_retit
  9004                                  
  9005                                  cfb_chk_totalsecs:
  9006                                  		; 11/08/2023
  9007                                  ; 18/12/2023
  9008                                  %if 0
  9009                                  		; 17/10/2022		
  9010                                  		mov	si, disksector+11 ; 14Eh+0Bh
  9011                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9012                                  		; 12/08/2023
  9013                                  		cmp	word [si+8], 0
  9014                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  9015                                  					; just to make sure.
  9016                                  		jz	short cfb_retit
  9017                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9018                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  9019                                  		; 12/08/2023
  9020                                  		mov	ax, [si+8]
  9021                                  		add	ax, [si+11h]
  9022                                  
  9023                                  		jnb	short cfb_retit
  9024                                  		jnz	short cfb_retit
  9025                                  					; if carry set and ax=0
  9026                                  		dec	word [si+8]
  9027                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  9028                                  					; then decrease	BPB_TOTALSECTORS by 1
  9029                                  %endif
  9030                                  		; 18/12/2023
  9031                                  		;cmp	word [bx+19], 0
  9032 000025C4 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  9033 000025C7 21C0                    		and	ax, ax ; 0 ?
  9034 000025C9 7412                    		jz	short cfb_retit
  9035                                  
  9036                                  		;mov	ax, [bx+19]
  9037 000025CB 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  9038 000025CE 730D                    		jnc	short cfb_retit
  9039 000025D0 750B                    		jnz	short cfb_retit
  9040                                  		; ax = 0		; 0 -> 0FFFFh
  9041 000025D2 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  9042                                  
  9043 000025D5 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  9044 000025D9 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  9045                                  cfb_retit:	
  9046                                  		; 18/12/2023
  9047                                  		;pop	si
  9048                                  		;pop	dx
  9049                                  		;pop	ax
  9050                                  		
  9051 000025DD C3                      		retn
  9052                                  
  9053                                  ; ---------------------------------------------------------------------------
  9054                                  
  9055 000025DE 0200                    word2:		dw 2
  9056 000025E0 0300                    word3:		dw 3
  9057 000025E2 0002                    word512:	dw 512
  9058                                  
  9059                                  ; =============== S U B	R O U T	I N E =======================================
  9060                                  
  9061                                  ; 15/10/2022
  9062                                  
  9063                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  9064                                  ; the form factor. it is assumed that the bpbs for the various form factors
  9065                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  9066                                  ; as the bpb on the drive.
  9067                                  ;
  9068                                  ; no attempt is made to preserve registers since we are going to jump to
  9069                                  ; sysinit straight after this routine.
  9070                                  
  9071                                  		; 18/12/2023 - Retro DOS v5.0 
  9072                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
  9073                                  setdrvparms:
  9074                                  		; 12/12/2023
  9075                                  		; ds = cs
  9076 000025E4 31DB                    		xor	bx, bx
  9077                                  		; 18/10/2022
  9078 000025E6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  9079                                  _next_bds:
  9080 000025EA 06                      		push	es
  9081 000025EB 57                      		push	di
  9082                                  
  9083                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9084 000025EC 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
  9085                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  9086                                  
  9087 000025F0 80FB05                  		cmp	bl, 5		; ffHardFile
  9088 000025F3 753A                    		jnz	short nothardff
  9089 000025F5 31D2                    		xor	dx, dx
  9090 000025F7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9091 000025FB 09C0                    		or	ax, ax
  9092 000025FD 7508                    		jnz	short get_ccyl
  9093 000025FF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9094 00002603 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9095                                  get_ccyl:
  9096 00002607 52                      		push	dx
  9097 00002608 50                      		push	ax
  9098 00002609 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  9099 0000260D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9100                                  					; assume sectors per cyl. < 64k.
  9101 00002611 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  9102 00002613 58                      		pop	ax
  9103 00002614 5A                      		pop	dx		; dx:ax	= total	sectors
  9104 00002615 50                      		push	ax
  9105 00002616 89D0                    		mov	ax, dx
  9106 00002618 31D2                    		xor	dx, dx
  9107 0000261A F7F1                    		div	cx
  9108                                  		; 12/12/2023  ; !*!
  9109                                  		; (data segment may not be same with code segment here)
  9110                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
  9111                                  		; 18/12/2023 - Retro DOS v5.0
  9112                                  		;mov	[cs:saved_word], ax
  9113 0000261C 58                      		pop	ax
  9114 0000261D F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  9115 0000261F 09D2                    		or	dx, dx
  9116 00002621 7401                    		jz	short no_cyl_rnd ; came out even
  9117 00002623 40                      		inc	ax		; round	up
  9118                                  no_cyl_rnd:
  9119                                  		; 18/12/2023 - Retro DOS v5.0
  9120 00002624 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
  9121                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  9122                                  		
  9123 00002628 06                      		push	es
  9124 00002629 1F                      		pop	ds  ; !*! ; 12/12/2023
  9125                                  
  9126 0000262A 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  9127                                  					; ds:si	-> bpb for hard	file
  9128 0000262D EB55                    		jmp	short set_recbpb
  9129                                  ; ---------------------------------------------------------------------------
  9130                                  
  9131                                  nothardff:				
  9132 0000262F 0E                      		push	cs
  9133 00002630 1F                      		pop	ds
  9134                                  
  9135                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  9136                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  9137                                  
  9138                                  		; 10/12/2022
  9139                                  		; ds = cs
  9140                                  		; 17/10/2022 (ds=cs)
  9141 00002631 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  9142                                  		;cmp	byte [cs:fakefloppydrv], 1
  9143 00002636 7454                    		jz	short go_to_next_bds
  9144 00002638 80FB07                  		cmp	bl, 7		; ffother
  9145                                  					; special case "other" type of medium
  9146 0000263B 753D                    		jnz	short not_process_other
  9147                                  process_other:
  9148 0000263D 31D2                    		xor	dx, dx
  9149                                  
  9150                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
  9151                                  		;mul	word [di+36h]	; [di+BDS.rheads]
  9152                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
  9153                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  9154                                  		;			; have the total number of sectors
  9155                                  		; 18/12/2023 - Retro DOS v5.0
  9156 0000263F 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
  9157 00002642 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
  9158 00002645 F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
  9159 00002648 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
  9160                                  					; have the total number of sectors
  9161 0000264B 48                      		dec	ax
  9162 0000264C B201                    		mov	dl, 1
  9163                                  _again:					
  9164 0000264E 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9165 00002651 7206                    		jb	short _@@
  9166 00002653 D1E8                    		shr	ax, 1
  9167 00002655 D0E2                    		shl	dl, 1
  9168 00002657 EBF5                    		jmp	short _again
  9169                                  ; ---------------------------------------------------------------------------
  9170                                  
  9171                                  _@@:
  9172 00002659 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  9173 0000265C 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  9174                                  
  9175                                  		; 18/12/2023 - Retro DOS v5.0
  9176 0000265E C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
  9177                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  9178                                  __@@:
  9179                                  		; 18/12/2023 - Retro DOS v5.0
  9180 00002663 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
  9181                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
  9182                                  
  9183                                  ; logic to get the sectors/fat area.
  9184                                  ; fat entry is assumed to be 1.5 bytes!!!
  9185                                  
  9186                                  		; 10/12/2022
  9187                                  		; ds = cs
  9188                                  		; 17/10/2022 (ds=cs)
  9189 00002666 F726[E025]              		mul	word [word3]	; * 3
  9190 0000266A F736[DE25]              		div	word [word2]	; / 2
  9191 0000266E 31D2                    		xor	dx, dx
  9192 00002670 F736[E225]              		div	word [word512]	; / 512
  9193                                  		;
  9194                                  		; 10/12/2022
  9195                                  		;mul	word [cs:word3]	; * 3
  9196                                  		;div	word [cs:word2]	; / 2
  9197                                  		;xor	dx, dx
  9198                                  		;div	word [cs:word512] ; / 512
  9199                                  		;
  9200 00002674 40                      		inc	ax		; + 1
  9201                                  no_round_up:
  9202                                  		; 18/12/2023 - Retro DOS v5.0
  9203 00002675 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
  9204                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
  9205                                  
  9206 00002678 EB12                    		jmp	short go_to_next_bds
  9207                                  ; ---------------------------------------------------------------------------
  9208                                  
  9209                                  not_process_other:
  9210 0000267A D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  9211                                  		
  9212                                  		;mov	si, bpbtable
  9213                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  9214                                  		; 09/12/2022
  9215                                  		;mov	si, BPBTABLE
  9216                                  		;mov	si, [bx+si]	; get address of bpb
  9217                                  		; 10/12/2022
  9218                                  		;mov	si, [BPBTABLE+bx]
  9219                                  		; 13/12/2022
  9220                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  9221                                  		
  9222                                  		; 14/08/2023
  9223                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  9224                                  							; correct offset
  9225 0000267C 8BB7[4A90]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  9226                                  		
  9227                                  		; 18/12/2023 
  9228                                  		; si = address of the requested disk(ette) parameter block
  9229                                  		;	! as offset from SYSINIT segment !
  9230                                  
  9231                                  		; 28/08/2023
  9232 00002680 81C69046                		add	si, SYSINIT_OFFSET
  9233                                  			; + displacement from BIOSDATA segment ; 18/12/2023
  9234                                  set_recbpb:
  9235                                  		; 18/12/2023
  9236                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
  9237                                  		;			; es:di	-> recbpb
  9238                                  		;mov	cx, 25		; bpbx.size
  9239                                  		;rep movsb		; move (size bpbx) bytes
  9240                                  		
  9241                                  		; 18/12/2023 - Retro DOS v5.0
  9242 00002684 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
  9243                                  					; es:di	-> recbpb
  9244 00002687 B93500                  		mov	cx, 53		; bpbx.size
  9245 0000268A F3A4                    		rep movsb		; move (size bpbx) byte
  9246                                  go_to_next_bds:
  9247 0000268C 5F                      		pop	di
  9248 0000268D 07                      		pop	es		; restore pointer to bds
  9249 0000268E 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  9250 00002691 83FFFF                  		cmp	di, 0FFFFh	; -1
  9251 00002694 740A                    		jz	short got_end_of_bds_chain
  9252 00002696 E951FF                  		jmp	_next_bds
  9253                                  
  9254                                  ; ---------------------------------------------------------------------------
  9255                                  
  9256                                  		; 18/12/2022
  9257                                  ;got_end_of_bds_chain:
  9258                                  		;retn
  9259                                  
  9260                                  ; =============== S U B	R O U T	I N E =======================================
  9261                                  
  9262                                  ; 15/10/2022
  9263                                  ; 30/12/2018 - Retro DOS v4.0
  9264                                  
  9265                                  ; al = device number
  9266                                  
  9267                                  print_init:	
  9268 00002699 98                      		cbw
  9269 0000269A 89C2                    		mov	dx, ax
  9270 0000269C B401                    		mov	ah, 1
  9271 0000269E CD17                    		int	17h		; PRINTER - INITIALIZE
  9272                                  					; DX = printer port (0-3)
  9273                                  					; Return: AH = status
  9274                                  got_end_of_bds_chain:	; 18/12/2022
  9275 000026A0 C3                      		retn
  9276                                  
  9277                                  ; =============== S U B	R O U T	I N E =======================================
  9278                                  
  9279                                  ; al = device number
  9280                                  
  9281                                  aux_init:
  9282 000026A1 98                      		cbw
  9283 000026A2 89C2                    		mov	dx, ax
  9284                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  9285                                  					; 2400,n,1,8 (msequ.inc)
  9286                                  		;mov	ah, 0
  9287                                  		; 10/12/2022
  9288 000026A4 B8A300                  		mov	ax, 00A3h
  9289 000026A7 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  9290                                  					; 	AL = initializing parameters,
  9291                                  					;	DX = port number (0-3)
  9292                                  					; Return: AH = RS-232 status code bits,
  9293                                  					;	  AL = modem status bits
  9294 000026A9 C3                      		retn
  9295                                  
  9296                                  ; =============== S U B	R O U T	I N E =======================================
  9297                                  
  9298                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9299                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
  9300                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
  9301                                  ; 30/12/2018 - Retro DOS v4.0
  9302                                  ; 03/06/2018 - Retro DOS v3.0
  9303                                  ; (19/03/2018 - Retro DOS v2.0)
  9304                                  
  9305                                  ; domini **********************************************************************
  9306                                  ;
  9307                                  ;mini disk initialization routine. called right after dohard
  9308                                  ;modified for >2 hardfile support
  9309                                  ;
  9310                                  ; **cs=ds=es=datagrp
  9311                                  ;
  9312                                  ; **domini will search for every extended partition in the system, and
  9313                                  ;   initialize it.
  9314                                  ;
  9315                                  ; **bdsm stands for bds table for mini disk and located right after the label
  9316                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  9317                                  ;   address of bdsm table.
  9318                                  ;
  9319                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  9320                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  9321                                  ;   right now, they are called as ismini, hidden_trks respectively.
  9322                                  ;
  9323                                  ; **domini will use the same routine in sethard routine after label set2 to
  9324                                  ;   save coding.
  9325                                  ;
  9326                                  ; **drvmax determined in dohard routine will be used for the next
  9327                                  ;   available logical mini disk drive number.
  9328                                  ;
  9329                                  ; input: drvmax, dskdrvs
  9330                                  ;
  9331                                  ; output: minidisk installed. bdsm table established and installed to bds.
  9332                                  ;	  end_of_bdsm - ending offset address of bdsm.
  9333                                  ;
  9334                                  ; called modules:
  9335                                  ;		  getboot
  9336                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  9337                                  ;
  9338                                  ;		  setmini (new, it will use set2 routine)
  9339                                  ;
  9340                                  ; variables used: end_of_bdsm
  9341                                  ;		  rom_minidisk_num
  9342                                  ;		  mini_hdlim, mini_seclim
  9343                                  ;		  BDS_STRUC, start_bds
  9344                                  ;
  9345                                  ;******************************************************************************
  9346                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  9347                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
  9348                                  
  9349                                  		; 19/10/2022
  9350                                  domini:
  9351 000026AA 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
  9352                                  		; 10/12/2022
  9353 000026AE 20F6                    		and	dh, dh
  9354                                  		;cmp	dh, 0
  9355 000026B0 743C                    		jz	short dominiret	; no hard file?	then exit.
  9356 000026B2 B280                    		mov	dl, 80h		; start	with hardfile 80h
  9357                                  domini_loop:
  9358                                  		; 18/12/2023 - Retro DOS v5.0
  9359 000026B4 31C0                    		xor	ax, ax ; 0
  9360                                  		; ds = cs
  9361                                  		;mov	[cs:ep_start_sector], ax
  9362                                  		;mov	[cs:ep_start_sector+2], ax
  9363                                  		;mov	[cs:ep_hidden_secs], ax
  9364                                  		;mov	[cs:ep_hidden_secs+2], ax
  9365 000026B6 A3[0022]                		mov	[ep_start_sector], ax
  9366 000026B9 A3[0222]                		mov	[ep_start_sector+2], ax
  9367 000026BC A3[0422]                		mov	[ep_hidden_secs], ax
  9368 000026BF A3[0622]                		mov	[ep_hidden_secs+2], ax
  9369                                  		;
  9370 000026C2 52                      		push	dx
  9371 000026C3 8816[5C1A]              		mov	[rom_minidisk_num], dl
  9372 000026C7 B408                    		mov	ah, 8
  9373 000026C9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  9374                                  					; DL = drive number
  9375                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  9376                                  					; DL = number of consecutive drives
  9377                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  9378                                  		
  9379                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9380                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  9381                                  		;inc	dh
  9382                                  		;xor	ax, ax
  9383                                  		;mov	al, dh
  9384 000026CB 31C0                    		xor	ax, ax
  9385 000026CD 88F0                    		mov	al, dh	; <= 255
  9386 000026CF 40                      		inc	ax	; (0FFh -> 100h)
  9387 000026D0 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
  9388                                  		;and	cl, 3Fh
  9389                                  		;mov	al, cl
  9390                                  		; 08/08/2023
  9391 000026D3 88C8                    		mov	al, cl
  9392 000026D5 83E03F                  		and	ax, 3Fh
  9393 000026D8 A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
  9394                                  		
  9395                                  		; 18/12/2023
  9396                                  		;push	es ; * ; not necessary
  9397 000026DB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9398 000026DF E866FA                  		call	getboot		; read master boot record into
  9399                                  					; initbootsegment:bootbias
  9400 000026E2 7203                    		jc	short domininext
  9401 000026E4 E80800                  		call	find_mini_partition
  9402                                  domininext:
  9403                                  		;pop	es ; *
  9404 000026E7 5A                      		pop	dx
  9405 000026E8 FEC2                    		inc	dl		; next hard file
  9406 000026EA FECE                    		dec	dh
  9407 000026EC 75C6                    		jnz	short domini_loop
  9408                                  dominiret:
  9409 000026EE C3                      		retn
  9410                                  
  9411                                  ; =============== S U B	R O U T	I N E =======================================
  9412                                  
  9413                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  9414                                  ; 30/12/2018 - Retro DOS v4.0
  9415                                  
  9416                                  ;find_mini_partition tries to find every extended partition on a disk.
  9417                                  ;at entry:	di -> bdsm entry
  9418                                  ;		es:bx -> 07c0:bootbias - master boot record
  9419                                  ;		rom_minidisk_num - rom drive number
  9420                                  ;		drvmax - logical drive number
  9421                                  ;		mini_hdlim, mini_seclim
  9422                                  ;
  9423                                  ;called routine: setmini which uses set2 (in sethard routine)
  9424                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  9425                                  
  9426                                  
  9427                                  		; 19/12/2023 - Retro DOS v5.0 
  9428                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
  9429                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
  9430                                  
  9431                                  find_mini_partition:	
  9432 000026EF 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  9433                                  
  9434                                  		; 19/12/2023
  9435                                  		; PCDOS 7.1 IBMBIO.COM
  9436                                  		;mov	word [ld_p_number], 26
  9437                                  fmpnext:
  9438                                  		;add	word [ld_p_number], 16
  9439                                  		;cmp	word [ld_p_number], 4122
  9440                                  		;		; 64 logical disk partitions (64 EBRs)
  9441                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
  9442                                  		;jg	short fmpnextfound
  9443                                  				
  9444 000026F3 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
  9445 000026F7 7410                    		je	short fmpgot ; Extended DOS CHS
  9446                                  		
  9447                                  		; 19/12/2023 - Retro DOS v5.0
  9448 000026F9 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
  9449 000026FD 740A                    		je	short fmpgot
  9450                                  
  9451 000026FF 83C310                  		add	bx, 16
  9452 00002702 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9453 00002706 75EB                    		jnz	short fmpnext
  9454                                  		;jmp	short fmpnextfound ; extended partition	not found
  9455                                  		; 18/12/2022
  9456                                  fmpnextfound:
  9457 00002708 C3                      		retn
  9458                                  
  9459                                  ;		; 30/07/2019 - Retro DOS v3.2
  9460                                  ;		jb	short fmpnext
  9461                                  ;fmpret:
  9462                                  ;		retn	; 29/05/2019
  9463                                  
  9464                                  ; ---------------------------------------------------------------------------
  9465                                  
  9466                                  		; 19/10/2022
  9467                                  fmpgot:					; found my partition.
  9468 00002709 E82B01                  		call	dmax_check	; check	for drvmax already 26
  9469 0000270C 73FA                    		jnb	short fmpnextfound ; done if too many
  9470                                  
  9471 0000270E 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
  9472                                  
  9473                                  		; 19/12/2023
  9474                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  9475                                  		;; 10/12/2022
  9476                                  		;or	byte [di+23h], 1
  9477                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
  9478                                  		;			; fNon_Removable
  9479                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  9480                                  		;			; ffHardFile
  9481                                  		; 19/12/2023 - Retro DOS v5.0
  9482 00002712 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
  9483 00002717 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
  9484 0000271B C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
  9485                                  
  9486 0000271F C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  9487 00002724 A1[621A]                		mov	ax, [mini_hdlim]
  9488 00002727 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  9489 0000272A A1[641A]                		mov	ax, [mini_seclim]
  9490 0000272D 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  9491 00002730 A0[5C1A]                		mov	al, [rom_minidisk_num]
  9492 00002733 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  9493                                  					; set physical number
  9494 00002736 A0[7500]                		mov	al, [drvmax]
  9495 00002739 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  9496                                  					; set logical number
  9497 0000273C 26837F0A00              		cmp	word [es:bx+10], 0
  9498                                  		;ja	short fmpgot_cont
  9499 00002741 7707                    		ja	short fmpgot1	; 19/12/2023
  9500 00002743 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  9501                                  					; only lower word is meaningful.
  9502 00002748 72BE                    		jb	short fmpnextfound
  9503                                  					; should be bigger than 64 sectors at least
  9504                                  fmpgot1:	; 19/12/2023
  9505                                  ;fmpgot_cont:				
  9506 0000274A 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  9507 0000274D 268A7702                		mov	dh, [es:bx+2]	; cylinder
  9508 00002751 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  9509 00002754 D0C6                    		rol	dh, 1
  9510 00002756 D0C6                    		rol	dh, 1
  9511 00002758 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  9512                                  		; 19/12/2023 - Retro DOS v5.0
  9513 0000275C 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
  9514                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  9515                                  					; set hidden trks
  9516                                  		; 19/12/2023
  9517                                  		;push	bx ; * ; PCDOS 7.1	
  9518                                  		;;;
  9519 0000275F 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
  9520 00002763 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
  9521 00002767 030E[0022]              		add	cx, [ep_start_sector]
  9522 0000276B 1306[0222]              		adc	ax, [ep_start_sector+2]
  9523 0000276F 31D2                    		xor	dx, dx ; 19/12/2023
  9524 00002771 3916[0022]              		cmp	[ep_start_sector], dx ; 0
  9525                                  		;cmp	word [ep_start_sector], 0
  9526 00002775 750D                    		jnz	short fmpgot2
  9527 00002777 3916[0222]              		cmp	[ep_start_sector+2], dx ; 0
  9528                                  		;cmp	word [ep_start_sector+2], 0
  9529 0000277B 7507                    		jnz	short fmpgot2
  9530 0000277D 890E[0022]              		mov	[ep_start_sector], cx
  9531 00002781 A3[0222]                		mov	[ep_start_sector+2], ax
  9532                                  fmpgot2:
  9533 00002784 890E[0422]              		mov	[ep_hidden_secs], cx
  9534 00002788 A3[0622]                		mov	[ep_hidden_secs+2], ax
  9535                                  		
  9536                                  		; convert start sector address to CHS
  9537                                  	
  9538                                  		; 19/12/2023
  9539                                  		; dx = 0
  9540                                  		;push	bx ; * ; not necessary
  9541                                  
  9542                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
  9543 0000278B 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
  9544                                  		;xor	dx, dx  ; dx = 0
  9545                                  		;div	bx
  9546 0000278E F7F6                    		div	si
  9547 00002790 91                      		xchg	ax, cx
  9548                                  		;div	bx
  9549 00002791 F7F6                    		div	si
  9550                                  		;mov	bx, [di+15h]	; [di+BDS.heads]
  9551                                  		; 07/05/2024
  9552                                  		; 17/04/2024 (BugFix)
  9553 00002793 8B7515                  		mov	si, [di+15h]	; [di+BDS.heads]
  9554 00002796 91                      		xchg	ax, cx
  9555 00002797 31D2                    		xor	dx, dx
  9556                                  		;div	bx
  9557 00002799 F7F6                    		div	si
  9558 0000279B 91                      		xchg	ax, cx
  9559                                  		;div	bx
  9560 0000279C F7F6                    		div	si
  9561                                  
  9562                                  		;pop	bx ; *
  9563                                  
  9564 0000279E 09C9                    		or	cx, cx
  9565 000027A0 7505                    		jnz	short fmpgot_lba_rd
  9566 000027A2 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
  9567 000027A5 7235                    		jb	short fmpgot_chs_rd
  9568                                  fmpgot_lba_rd:
  9569 000027A7 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
  9570 000027AB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9571 000027AF 1E                      		push	ds
  9572                                  		; 19/12/2023
  9573                                  		;push	si ; ** ; not necessary 
  9574 000027B0 31C0                    		xor	ax, ax		; push bp
  9575                                  				        ; mov bp, sp ; (*)
  9576 000027B2 50                      		push	ax ; 0
  9577 000027B3 50                      		push	ax ; 0
  9578 000027B4 FF36[0622]              		push	word [ep_hidden_secs+2]
  9579 000027B8 FF36[0422]              		push	word [ep_hidden_secs]
  9580 000027BC B80002                  		mov	ax, bootbias ; 200h	
  9581                                  		;mov	ax, 200h	; bootbias (buffer offset)
  9582 000027BF 06                      		push	es		; buffer segment
  9583 000027C0 50                      		push	ax
  9584 000027C1 B80100                  		mov	ax, 1
  9585 000027C4 50                      		push	ax		; read count
  9586 000027C5 B81000                  		mov	ax, 10h		; DAP size = 16
  9587 000027C8 50                      		push	ax
  9588 000027C9 8CD0                    		mov	ax, ss
  9589 000027CB 8ED8                    		mov	ds, ax
  9590 000027CD 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
  9591                                  		
  9592 000027CF B442                    		mov	ah, 42h		; LBA read
  9593 000027D1 CD13                    		int	13h		; DISK - IBM/MS Extension
  9594                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  9595                                  		; 19/12/2023	
  9596                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
  9597                                  		;add	sp, 16
  9598                                  		;popf		; BUG!
  9599                                  					; mov sp, bp ; (*)
  9600                                  					; pop bp
  9601                                  		; 19/12/2023
  9602 000027D3 9F                      		lahf		; load status flags into AH
  9603 000027D4 83C410                  		add	sp, 16
  9604 000027D7 9E                      		sahf		; store AH into flags
  9605                                  		
  9606                                  		;pop	si ; ** ; 19/12/2023
  9607 000027D8 1F                      		pop	ds
  9608 000027D9 7317                    		jnc	short fmpgot3
  9609                                  fmpnotfound:	; 19/12/2023
  9610 000027DB C3                      		retn
  9611                                  		;jmp	short fmpgot3 
  9612                                  		;;;
  9613                                  
  9614                                  		; 19/12/2023
  9615                                  fmpgot_chs_rd:
  9616 000027DC 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  9617 000027E0 268A7701                		mov	dh, [es:bx+1]	; head
  9618 000027E4 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9619 000027E8 BB0002                  		mov	bx, 200h	; bootbias
  9620 000027EB B80102                  		mov	ax, 201h
  9621 000027EE CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9622                                  					; AL = number of sectors to read, CH = track, CL = sector
  9623                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9624                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9625                                  ;fmpgot3:	; 19/12/2023
  9626                                  		;jc	short fmpnextfound
  9627 000027F0 72E9                    		jc	short fmpnotfound
  9628                                  fmpgot3:	
  9629 000027F2 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  9630                                  
  9631                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9632                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  9633 000027F5 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  9634                                  		;jne	short fmpnextfound ; not a valid boot sector !
  9635                                  		; 19/12/2023
  9636 000027FB 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
  9637                                  
  9638                                  		; 13/08/2023
  9639                                  		;push	es
  9640 000027FD E80800                  		call	setmini		; install a mini disk.
  9641                                  					; bx value saved.
  9642                                  		;pop	es  ; 13/08/2023
  9643 00002800 7203                    		jc	short fmpnextchain
  9644 00002802 E84700                  		call	xinstall_bds	; -- install the bdsm into table
  9645                                  fmpnextchain:
  9646 00002805 E9EBFE                  		jmp	fmpnext		; let's find out
  9647                                  					; if we	have any chained partition
  9648                                  ; ---------------------------------------------------------------------------
  9649                                  
  9650                                  		; 18/12/2022
  9651                                  ;fmpnextfound:
  9652                                  		;retn
  9653                                  
  9654                                  ; =============== S U B	R O U T	I N E =======================================
  9655                                  
  9656                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9657                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  9658                                  
  9659                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9660                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
  9661                                  
  9662                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  9663                                  	
  9664 00002808 57                      		push	di
  9665 00002809 53                      		push	bx
  9666                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9667                                  		; ds = cs = BIOSDATA segment
  9668                                  		;push	ds
  9669 0000280A 06                      		push	es
  9670                                  setmini_1:
  9671                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
  9672                                  		;je	short setmini_2
  9673                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
  9674                                  		;je	short setmini_2
  9675                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
  9676                                  		;je	short setmini_2
  9677                                  		;
  9678                                  		; 19/12/2023 - Retro DOS v5.0
  9679                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
  9680                                  		;je	short setmini_2
  9681                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
  9682                                  		;je	short setmini_2
  9683                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
  9684                                  		;je	short setmini_2
  9685                                  
  9686                                  		; 19/12/2023
  9687 0000280B 268A07                  		mov 	al, [es:bx]
  9688 0000280E 3C01                    		cmp	al, 1 		; FAT12 partition
  9689 00002810 7422                    		je	short setmini_2
  9690 00002812 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
  9691 00002814 741E                    		je	short setmini_2
  9692 00002816 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
  9693 00002818 741A                    		je	short setmini_2
  9694 0000281A 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
  9695 0000281C 7416                    		je	short setmini_2
  9696 0000281E 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
  9697 00002820 7412                    		je	short setmini_2
  9698 00002822 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
  9699 00002824 740E                    		je	short setmini_2
  9700                                  
  9701 00002826 83C310                  		add	bx, 16
  9702 00002829 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9703                                  		;jne	short setmini_1
  9704 0000282D 72DC                    		jb	short setmini_1 ; 19/12/2023
  9705 0000282F F9                      		stc
  9706 00002830 07                      		pop	es
  9707                                  		; 12/08/2023
  9708                                  		;pop	ds
  9709 00002831 5B                      		pop	bx
  9710 00002832 5F                      		pop	di
  9711 00002833 C3                      		retn
  9712                                  
  9713                                  ; ---------------------------------------------------------------------------
  9714                                  setmini_2:
  9715 00002834 E9D1F9                  		jmp	set2		; branch into middle of sethard
  9716                                  
  9717                                  ; =============== S U B	R O U T	I N E =======================================
  9718                                  
  9719                                  ; 30/12/2022 - Retro DOS v4.2
  9720                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
  9721                                  
  9722                                  ; 15/10/2022
  9723                                  ; 28/12/2018 - Retro DOS v4.0
  9724                                  ;
  9725                                  ; dmax_check -- call this when we want to install a new drive.
  9726                                  ;		it checks for drvmax < 26 to see if there is
  9727                                  ;		a drive letter left.
  9728                                  ;
  9729                                  ;	drvmax < 26 : carry SET!
  9730                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  9731                                  ;			trash ax
  9732                                  
  9733                                  		; 19/12/2023 - Retro DOS v5.0
  9734                                  dmax_check:
  9735 00002837 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  9736 0000283C 720D                    		jb	short dmax_ok	; return with carry if okay
  9737 0000283E 06                      		push	es
  9738                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  9739                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
  9740 0000283F B8D904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  9741 00002842 8EC0                    		mov	es, ax
  9742                                  		; 18/10/2022
  9743 00002844 26C606[8103]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  9744                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  9745                                  					; set message flag
  9746                                  					; [SYSINIT+toomanydrivesflag]
  9747 0000284A 07                      		pop	es
  9748                                  
  9749                                  		;;push	es
  9750                                  		;;mov	ax,SYSINIT_SEG
  9751                                  		;;mov	es,ax
  9752                                  		;;mov	byte [es:toomanydrivesflag],1
  9753                                  					; set message flag
  9754                                  		;;pop	es
  9755                                  		;
  9756                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  9757                                  dmax_ok:
  9758 0000284B C3                      		retn
  9759                                  
  9760                                  ; =============== S U B	R O U T	I N E =======================================
  9761                                  
  9762                                  ; 18/10/2022
  9763                                  ; 15/10/2022
  9764                                  ; 28/12/2018 - Retro DOS v4.0
  9765                                  ;
  9766                                  ;	link next bds (at ds:di) into the chain. assume that the
  9767                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  9768                                  ;	  dskdrv_table, and end_of_bdss.	
  9769                                  
  9770                                  		; 19/12/2023 - Retro DOS v5.0
  9771                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
  9772                                  xinstall_bds:
  9773 0000284C 56                      		push	si
  9774 0000284D 53                      		push	bx
  9775 0000284E 8B36[1901]              		mov	si, [start_bds]	; get first bds
  9776                                  xinstall_bds_1:
  9777 00002852 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  9778 00002855 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  9779                                  		;mov	si, [si+BDS.link]
  9780 00002857 8B34                    		mov	si, [si]	; chain	through	list
  9781 00002859 EBF7                    		jmp	short xinstall_bds_1
  9782                                  
  9783                                  xinstall_bds_2:
  9784                                  		;mov	[si+BDS.link], di
  9785 0000285B 893C                    		mov	[si], di
  9786                                  		;mov	[si+BDS.link+2], ds
  9787 0000285D 8C5C02                  		mov	[si+2], ds
  9788                                  		;mov	word [di+BDS.link], -1
  9789 00002860 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  9790                                  		;mov	[di+BDS.link+2], ds
  9791 00002864 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  9792                                  		; 20/03/2019 - Retro DOS v4.0
  9793                                  		;lea	bx, [di+BDS.BPB]
  9794 00002867 8D5D06                  		lea	bx, [di+6]
  9795 0000286A 8B36[5E1A]              		mov	si, [last_dskdrv_table]
  9796 0000286E 891C                    		mov	[si], bx
  9797 00002870 8306[5E1A]02            		add	word [last_dskdrv_table], 2
  9798 00002875 FE06[7500]              		inc	byte [drvmax]
  9799                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
  9800                                  		; 19/12/2023 - Retro DOS v5.0
  9801 00002879 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
  9802 0000287F 5B                      		pop	bx
  9803 00002880 5E                      		pop	si
  9804 00002881 C3                      		retn
  9805                                  
  9806                                  ; =============== S U B	R O U T	I N E =======================================
  9807                                  
  9808                                  ; 17/10/2022
  9809                                  ; 15/10/2022
  9810                                  ; 28/12/2018 - Retro DOS v4.0
  9811                                  ; 03/06/2018 - Retro DOS v3.0
  9812                                  
  9813                                  		; 19/12/2023 - Retro DOS v5.0
  9814                                  cmos_clock_read:
  9815 00002882 50                      		push	ax
  9816 00002883 51                      		push	cx
  9817 00002884 52                      		push	dx
  9818 00002885 55                      		push	bp
  9819 00002886 31ED                    		xor	bp, bp
  9820                                  loop_clock:
  9821 00002888 31C9                    		xor	cx, cx
  9822 0000288A 31D2                    		xor	dx, dx
  9823 0000288C B402                    		mov	ah, 2
  9824 0000288E CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  9825                                  					; Return: CH = hours in	BCD
  9826                                  					; CL = minutes in BCD
  9827                                  					; DH = seconds in BCD
  9828                                  		; 19/12/2023
  9829                                  		;cmp	cx, 0
  9830 00002890 21C9                    		and	cx, cx
  9831 00002892 750F                    		jnz	short clock_present
  9832                                  		;cmp	dx, 0
  9833 00002894 09D2                    		or	dx, dx
  9834 00002896 750B                    		jnz	short clock_present
  9835                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
  9836                                  		;je	short no_readdate ; was	at zero	setting.
  9837 00002898 21ED                    		and	bp, bp
  9838 0000289A 751A                    		jnz	short no_readdate
  9839 0000289C 45                      		inc	bp		; only perform delay once.
  9840                                  		;mov	cx, 4000h	; 16384
  9841                                  		; 19/12/2023
  9842 0000289D B540                    		mov	ch, 40h ; cx = 4000h ; 16384
  9843                                  delay:					
  9844 0000289F E2FE                    		loop	delay
  9845 000028A1 EBE5                    		jmp	short loop_clock
  9846                                  ; ---------------------------------------------------------------------------
  9847                                  
  9848                                  clock_present:
  9849                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  9850                                  		; 19/12/2023
  9851                                  		; ds = cs
  9852 000028A3 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  9853                                  		
  9854 000028A8 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  9855                                  					; possibly destroyed by	cp dos and
  9856                                  					; post routine did not restore that.
  9857 000028AB 56                      		push	si
  9858 000028AC E8BCEF                  		call	read_real_date	; read real-time clock for date
  9859 000028AF FA                      		cli
  9860                                  		;mov	ds:daycnt, si	; set system date
  9861 000028B0 8936[8904]              		mov	[daycnt], si
  9862 000028B4 FB                      		sti
  9863 000028B5 5E                      		pop	si
  9864                                  no_readdate:
  9865 000028B6 5D                      		pop	bp
  9866 000028B7 5A                      		pop	dx
  9867 000028B8 59                      		pop	cx
  9868 000028B9 58                      		pop	ax
  9869                                  
  9870                                  cmosck9:	; 19/12/2023
  9871 000028BA C3                      		retn
  9872                                  
  9873                                  ; ---------------------------------------------------------------------------
  9874                                  
  9875                                  ; the following code is written by jack gulley in engineering group.
  9876                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  9877                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  9878                                  ; the cmos clock rate are still slow which slow down disk operations
  9879                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  9880                                  ; to fix this problem at the request of cp dos.
  9881                                  ;
  9882                                  ; the program is modified to be run on msinit. equates are defined
  9883                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  9884                                  ;
  9885                                  ;  the following code cmosck is used to insure that the cmos has not
  9886                                  ;	had its rate controls left in an invalid state on older at's.
  9887                                  ;
  9888                                  ;	it checks for an at model byte "fc" with a submodel type of
  9889                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  9890                                  ;	bits in case post has not done it. this initilization routine
  9891                                  ;	is only needed once when dos loads. it should be run as soon
  9892                                  ;	as possible to prevent slow diskette access.
  9893                                  ;
  9894                                  ;	this code exposes one to dos clearing cmos setup done by a
  9895                                  ;	resident program that hides and re-boots the system.
  9896                                  
  9897                                  cmosck:					; check and reset rtc rate bits
  9898                                  
  9899                                  ;model byte and submodel byte were already determined in msinit.
  9900                                  
  9901                                  	; 16/06/2018 - Retro DOS v3.0
  9902                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  9903                                  
  9904                                  	; 19/12/2023 - Retro DOS v5.0
  9905                                  	
  9906                                  		; 19/12/2023
  9907                                  		; ds = cs
  9908                                  		;push	ax ; not necessary ; 19/12/2023
  9909                                  		;
  9910 000028BB 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
  9911                                  		;cmp	byte [cs:model_byte], 0FCh
  9912 000028C0 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  9913 000028C2 803E[B005]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  9914                                  		;cmp	byte [cs:secondary_model_byte], 6
  9915                                  					; Is it 06 for the industral AT ?
  9916 000028C7 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  9917 000028C9 803E[B005]04            		cmp	byte [secondary_model_byte], 4
  9918                                  		;cmp	byte [cs:secondary_model_byte], 4
  9919                                  					; Is it 00, 01, 02, or 03 ?
  9920 000028CE 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  9921                                  					; Also,Secondary_model_byte = 0
  9922                                  					;   when AH=0C0h, int 15h failed.
  9923                                  					;	RESET THE CMOS PERIODIC RATE
  9924                                  					;  Model=FC submodel=00,01,02,03 or 06
  9925                                  cmosck4:
  9926 000028D0 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  9927                                  					; NMI disabled on return
  9928 000028D2 B426                    		mov	ah, 26h		; 00100110b
  9929                                  					; Set divider & rate selection
  9930 000028D4 E80B00                  		call	cmos_write
  9931 000028D7 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  9932                                  					; NMI disabled on return
  9933 000028D9 E82000                  		call	cmos_read
  9934 000028DC 2407                    		and	al, 7		; 00000111b
  9935                                  					; clear SET,PIE,AIE,UIE,SQWE
  9936 000028DE 88C4                    		mov	ah, al
  9937 000028E0 B00B                    		mov	al, 0Bh		; cmos_reg_b
  9938                                  					; NMI enabled on return
  9939                                  		; 19/12/2023
  9940                                  		;call	cmos_write
  9941                                  ;cmosck9:
  9942                                  		;pop	ax ; 19/12/2023
  9943                                  		;retn
  9944                                  
  9945                                  		; 19/12/2023
  9946                                  		;jmp	short cmos_write
  9947                                  
  9948                                  ; =============== S U B	R O U T	I N E =======================================
  9949                                  
  9950                                  ;--- cmos_write ----------------------------------------------------------------
  9951                                  ;		write byte to cmos system clock configuration table	       :
  9952                                  ;									       :
  9953                                  ; input: (al)=	cmos table address to be written to			       :
  9954                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9955                                  ;		bits 6-0 = address of table location to write		       :
  9956                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  9957                                  ;									       :
  9958                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  9959                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  9960                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9961                                  ;		the cmos address register is pointed to a default value and    :
  9962                                  ;		the interrupt flag restored to the entry state on return.      :
  9963                                  ;		only the cmos location and the nmi state is changed.	       :
  9964                                  ;-------------------------------------------------------------------------------
  9965                                  
  9966                                  cmos_write:				; write (ah) to location (al)
  9967 000028E2 9C                      		pushf			;
  9968 000028E3 50                      		push	ax		; save work register values
  9969 000028E4 FA                      		cli
  9970 000028E5 50                      		push	ax		; save user nmi	state
  9971 000028E6 0C80                    		or	al, 80h		; disable nmi for us
  9972 000028E8 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9973                                  					; RTC Seconds
  9974 000028EA 90                      		nop
  9975 000028EB 88E0                    		mov	al, ah
  9976 000028ED E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  9977 000028EF 58                      		pop	ax		; get user nmi
  9978 000028F0 2480                    		and	al, 80h
  9979 000028F2 0C0F                    		or	al, 0Fh
  9980 000028F4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9981                                  					; RTC Seconds
  9982 000028F6 90                      		nop
  9983 000028F7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  9984 000028F9 58                      		pop	ax		; restore work registers
  9985                                  
  9986                                  		; 19/12/2023
  9987                                  		;push	cs		; *place code segment in stack and
  9988                                  		;call	cmos_popf	; *handle popf for b- level 80286
  9989                                  		;retn
  9990 000028FA EB18                    		jmp	short cmos_rw_popf
  9991                                  
  9992                                  ; =============== S U B	R O U T	I N E =======================================
  9993                                  
  9994                                  ;--- CMOS_READ -----------------------------------------------------------------
  9995                                  ;		read byte from cmos system clock configuration table	       :
  9996                                  ;									       :
  9997                                  ; input: (al)=	cmos table address to be read				       :
  9998                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9999                                  ;		bits 6-0 = address of table location to read		       :
 10000                                  ;									       :
 10001                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
 10002                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
 10003                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 10004                                  ;		the cmos address register is pointed to a default value and    :
 10005                                  ;		the interrupt flag restored to the entry state on return.      :
 10006                                  ;		only the (al) register and the nmi state is changed.	       :
 10007                                  ;-------------------------------------------------------------------------------
 10008                                  
 10009                                  cmos_read:				; read location (al) into (al)
 10010 000028FC 9C                      		pushf
 10011 000028FD FA                      		cli
 10012 000028FE 53                      		push	bx
 10013                                  		;push	ax ; *		; AL = cmos table address to be read
 10014                                  		; 19/12/2023
 10015 000028FF 89C3                    		mov	bx, ax ; * ; input
 10016 00002901 0C80                    		or	al, 80h
 10017 00002903 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10018                                  					; RTC Seconds
 10019 00002905 90                      		nop			; (undocumented delay needed)
 10020 00002906 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10021                                  		
 10022                                  		;mov	bx, ax ; output
 10023                                  		;pop	ax ; * ; input
 10024                                  
 10025                                  		; 19/12/2023
 10026                                  		; al = output, bl = input
 10027 00002908 93                      		xchg	ax, bx ; *
 10028                                  		; bl = output, al = input
 10029                                  	
 10030 00002909 2480                    		and	al, 80h
 10031 0000290B 0C0F                    		or	al, 0Fh
 10032 0000290D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10033                                  					; RTC Seconds
 10034 0000290F 90                      		nop
 10035 00002910 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10036                                  		;mov	ax, bx ; * ; output
 10037                                  		; 19/12/2023
 10038 00002912 93                      		xchg	ax, bx
 10039 00002913 5B                      		pop	bx
 10040                                  
 10041                                  		; 19/12/2023
 10042                                  cmos_rw_popf:
 10043 00002914 0E                      		push	cs		; *place code segment in stack and
 10044 00002915 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 10045 00002918 C3                      		retn			; return with flags restored
 10046                                  
 10047                                  ; ---------------------------------------------------------------------------
 10048                                  
 10049                                  cmos_popf:				
 10050 00002919 CF                      		iret			; popf for level b- parts
 10051                                  					; return far and restore flags
 10052                                  
 10053                                  ; 21/12/2022
 10054                                  ; ---------------------------------------------------------------------------
 10055                                  ; ---------------------------------------------------------------------------
 10056                                  %if 0
 10057                                  
 10058                                  ; ---------------------------------------------------------------------------
 10059                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 10060                                  ; ---------------------------------------------------------------------------
 10061                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 10062                                  ; ---------------------------------------------------------------------------
 10063                                  
 10064                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10065                                  ;
 10066                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 10067                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 10068                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 10069                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
 10070                                  
 10071                                  ; =============== S U B	R O U T	I N E =======================================
 10072                                  
 10073                                  ; GetClus, read in a cluster at a specified address
 10074                                  ;
 10075                                  ;  bx = cluster to read
 10076                                  ;  cx = sectors per cluster
 10077                                  ;  es:di = load location
 10078                                  
 10079                                  ; 17/10/2022
 10080                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 10081                                  ; 09/12/2022
 10082                                  DISKRD equ diskrd
 10083                                  
 10084                                  		; 29/12/2023
 10085                                  		; 20/12/2023 - Retro DOS v5.0
 10086                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 10087                                  
 10088                                  		; si:bx = (32 bit) cluster to read
 10089                                  		; cx = sectors per cluster
 10090                                  		; es:di = load location
 10091                                  
 10092                                  		; 17/10/2022
 10093                                  getclus:
 10094                                  		; 12/12/2023
 10095                                  		; ds = cs
 10096                                  		
 10097                                  		push	cx ; 1*
 10098                                  		push	di ; 2*
 10099                                  		;mov	[cs:doscnt], cx
 10100                                  		mov	[doscnt], cx ; 12/12/2023
 10101                                  
 10102                                  		; 20/12/2023
 10103                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 10104                                  		;mov	[ClusterH], si ; high word of cluster number
 10105                                  		mov	bp, si
 10106                                  
 10107                                  		mov	ax, bx
 10108                                  
 10109                                  		;dec	ax
 10110                                  		;dec	ax
 10111                                  		; 20/12/2023
 10112                                  		sub	ax, 2
 10113                                  
 10114                                  		;;sbb	[cs:ClusterH], 0
 10115                                  		;sbb	[ClusterH], 0
 10116                                  		sbb	bp, 0		
 10117                                  
 10118                                  		; 20/12/2023
 10119                                  		;;xchg	ax, [cs:ClusterH]
 10120                                  		;xchg	ax, [ClusterH]
 10121                                  		xchg	ax, bp
 10122                                  
 10123                                  		mul	cx
 10124                                  
 10125                                  		;;xchg	ax, [cs:ClusterH]
 10126                                  		;xchg	ax, [ClusterH]
 10127                                  		xchg	ax, bp ; (+)
 10128                                  		;
 10129                                  		mul	cx		;; convert to logical sector
 10130                                  					;; dx:ax = matching logical sector number
 10131                                  					;;	  starting from the data sector
 10132                                  		;;add	ax, [cs:bios_l]
 10133                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 10134                                  		; 12/12/2023
 10135                                  		;add	ax, [bios_l]
 10136                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 10137                                  
 10138                                  		; 20/12/2023
 10139                                  		;;add	dx, [cs:ClusterH]
 10140                                  		;add	ax, [cs:First_Data_Sector]
 10141                                  		;adc	dx, [cs:First_Data_Sector+2]
 10142                                  		add	dx, bp ; (+)
 10143                                  		;add	dx, [ClusterH]	; convert to logical sector
 10144                                  					; dx:ax	= matching logical sector number
 10145                                  					;	  starting from the data sector
 10146                                  		add	ax, [First_Data_Sector]
 10147                                  		adc	dx, [First_Data_Sector+2]
 10148                                  					; dx:ax = first logical sector to read
 10149                                  unpack:
 10150                                  		; 20/12/2023
 10151                                  		push	ds ; 3* ; ds = cs ; 12/12/2023
 10152                                  		push	dx ; 4* ; * ; 12/12/2023
 10153                                  		push	ax ; 5*
 10154                                  		; 29/12/2023
 10155                                  		push	si ; 6* 
 10156                                  		push	bx ; 7*
 10157                                  
 10158                                  		;;mov	si, [cs:fatloc]
 10159                                  		;mov	si, [fatloc] ; 12/12/2023
 10160                                  		;mov	ds, si
 10161                                  		; 20/12/2023
 10162                                  		;mov	ax, [fatloc]
 10163                                  		;mov	ds, ax
 10164                                  		push	bx ; 8*
 10165                                  		push	word [fatloc] ; 9*
 10166                                  
 10167                                  		;test	byte [cs:fbigfat], 20h
 10168                                  		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 10169                                  		pop	ds ; 9* ; ds = [fatloc]
 10170                                  		jz      short not_32bit_cluster ; no
 10171                                  unpack32:
 10172                                  		;push	dx
 10173                                  		mov	dx, si
 10174                                  		;mov	si, bx
 10175                                  		pop	si ; 8* ; si = bx
 10176                                  		add	si, si
 10177                                  		adc	dx, dx
 10178                                  		add	si, si
 10179                                  		adc	dx, dx 
 10180                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 10181                                  		call	get_fat_sector
 10182                                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 10183                                  		mov	bx, [bx]	; low word of the FAT32 cluster number
 10184                                  		;pop	dx
 10185                                  		jmp	short getcl1
 10186                                  
 10187                                  not_32bit_cluster:
 10188                                  		;mov	si, bx		; next cluster
 10189                                  		pop	si ; 8* ; si = bx
 10190                                  		test	byte [cs:fbigfat], 40h	; fbig
 10191                                  					; 16 bit fat?
 10192                                  		jnz	short unpack16	; yes
 10193                                  unpack12:
 10194                                  		shr	si, 1		; 12 bit fat. si = si/2
 10195                                  					; si = clus + clus/2
 10196                                  		add	si, bx		;
 10197                                  					; (si =	byte offset of the cluster in the FAT)
 10198                                  		;push	dx ; 12/12/2023
 10199                                  		xor	dx, dx
 10200                                  		; 12/12/2023
 10201                                  		; ds = FAT buffer segment
 10202                                  		call	get_fat_sector
 10203                                  		;pop	dx ; 12/12/2023
 10204                                  
 10205                                  		mov	ax, [bx]	; save it into ax
 10206                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
 10207                                  		; 25/06/2023
 10208                                  		;mov	al, [bx]	; splitted fat
 10209                                  		
 10210                                  		; 12/12/2023
 10211                                  		;mov	[cs:temp_cluster], al
 10212                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 10213                                  
 10214                                   		inc	si		; (next	byte)
 10215                                  
 10216                                  		;push	dx ; 12/12/2023
 10217                                  		xor	dx, dx
 10218                                  		call	get_fat_sector
 10219                                  		;pop	dx ; 12/12/2023
 10220                                  
 10221                                  		;mov	al, ds:0
 10222                                  		; 12/12/2023
 10223                                  		; ds = FAT buffer segment
 10224                                  		;mov	al, [0] ; 19/10/2022
 10225                                  		;mov	[cs:temp_cluster+1], al
 10226                                  		;mov	ax, [cs:temp_cluster]
 10227                                  		; 12/12/2023
 10228                                  		;mov	al, [cs:temp_cluster]
 10229                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 10230                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 10231                                  even_odd:
 10232                                  		; 29/12/2023
 10233                                  		pop	bx ; 7*		; restore old fat entry	value
 10234                                  		push	bx		; save it right	away.
 10235                                  		shr	bx, 1		; was it even or odd?
 10236                                  		jnc	short havclus	; it was even.
 10237                                  		shr	ax, 1		; odd. massage fat value and keep
 10238                                  					; the highest 12 bits.
 10239                                  		shr	ax, 1
 10240                                  		shr	ax, 1
 10241                                  		shr	ax, 1
 10242                                  havclus:
 10243                                  		mov	bx, ax		; now bx = new fat entry.
 10244                                  		and	bx, 0FFFh	; keep low 12 bits.
 10245                                  		jmp	short unpackx
 10246                                  ; ---------------------------------------------------------------------------
 10247                                  
 10248                                  unpack16:
 10249                                  		;push	dx	; 12/12/2023
 10250                                  		xor	dx, dx ; 0
 10251                                  		shl	si, 1		; extend to 32 bit offset
 10252                                  		;adc	dx, 0
 10253                                  		; 12/12/2023
 10254                                  		rcl	dx, 1
 10255                                  
 10256                                  		; 12/12/2023
 10257                                  		; ds = FAT buffer segment
 10258                                  		call	get_fat_sector
 10259                                  		;pop	dx	; 12/12/2023
 10260                                  		mov	bx, [bx]	;
 10261                                  					; bx = new fat entry.
 10262                                  unpackx:
 10263                                  		; 20/12/2023
 10264                                  		xor	si, si		; high word of cluster number = 0
 10265                                  					; (FAT12 or FAT16)
 10266                                  getcl1:
 10267                                  		; 29/12/2023
 10268                                  		pop	ax	; 7* - cluster number lw
 10269                                  		;pop	word [cs:ClusterH]
 10270                                  		pop	dx	; 6* - cluster number hw
 10271                                  
 10272                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10273                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 10274                                  		; ((consequtive clusters --> consequtive sectors))
 10275                                  
 10276                                  		sub	ax, bx	; previous - current (or current - new)	
 10277                                  		;sbb	[cs:ClusterH], si
 10278                                  		sbb	dx, si
 10279                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 10280                                  		;cmp	dx, -1
 10281                                  		; 29/12/2023
 10282                                  		inc	dx ; -1 -> 0
 10283                                  		jnz	short not_consequental
 10284                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 10285                                  		inc	ax ; -1 -> 0
 10286                                  not_consequental:
 10287                                  		pop	ax ; 5* 	; restore logical sector (low)
 10288                                  		pop	dx ; 4* ; * ; 12/12/2023
 10289                                  		pop	ds ; 3*
 10290                                  
 10291                                  		;; 12/12/2023
 10292                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 10293                                  		;; ((consequtive clusters --> consequtive sectors))
 10294                                  		;; ds = cs
 10295                                  		;sub	si, bx
 10296                                  		;cmp	si, -1		; one apart? (consequtive?)
 10297                                  		;			; (current = previous+1)
 10298                                  
 10299                                  		jnz	short getcl2	; no, read [doscnt] sectors 
 10300                                  
 10301                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 10302                                  		add	[doscnt], cx ; 12/12/2023 ; add to read count
 10303                                  		jmp	unpack
 10304                                  ; ---------------------------------------------------------------------------
 10305                                  
 10306                                  getcl2:
 10307                                  		push	si ; 20/12/2023
 10308                                  		push	bx	
 10309                                  		; bx = low word of the new cluster number
 10310                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 10311                                  		; si = high word of the new cluster number
 10312                                  		push	dx		; sector to read (high word)
 10313                                  		push	ax		; sector to read (low word)
 10314                                  		
 10315                                  		; 12/12/2023
 10316                                  		; ds = cs
 10317                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 10318                                  		;mov	cx, [cs:doscnt]
 10319                                  		mov	ax, [drvfat]	; get drive and	fat spec
 10320                                  
 10321                                  		;;;
 10322                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10323                                  		;
 10324                                  		; dma and segment (64K boundary) overrun precaution
 10325                                  		; (sector count will be decreased if it is required)
 10326                                   		mov	cx, di
 10327                                  		not	cx		; cx = 65535 - cx
 10328                                  		shr	cx, 1		; cx = cx/2
 10329                                  		xor	cl, cl
 10330                                  		xchg	cl, ch		; cx = cx/256
 10331                                  		
 10332                                  		;cmp	cx, [cs:doscnt]	
 10333                                  				; if sector read count > cx, decrease it to cx
 10334                                  		cmp	cx, [doscnt]
 10335                                  		jbe	short getcl3
 10336                                  		;;;
 10337                                  		;mov	cx, [cs:doscnt]
 10338                                  		mov	cx, [doscnt]
 10339                                  getcl3:
 10340                                  		pop	dx		; sector to read for diskrd (low)
 10341                                  		;pop	word [cs:start_sec_h]
 10342                                  		; 12/12/2023
 10343                                  		pop	word [start_sec_h]
 10344                                  					; sector to read for diskrd (high)
 10345                                  		; 12/12/2023
 10346                                  		; ds = cs
 10347                                  		;push	ds
 10348                                  		;push	cs
 10349                                  		;pop	ds
 10350                                  		
 10351                                  		push	cs		; simulate far call
 10352                                  
 10353                                  		; 20/12/2023
 10354                                  		; 17/10/2022
 10355                                  		mov	bp, DISKRD	; offset diskrd
 10356                                  		;mov	bp, 0A2Bh	; 20/12/2023
 10357                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 10358                                  		;mov	bp, 8E5h	; 17/10/2022
 10359                                  					; 2C7h:8E5h = 70h:2E55h
 10360                                  
 10361                                  		call	call_bios_code	; read the clusters
 10362                                  		
 10363                                  		;pop	ds
 10364                                  		; 12/12/2023
 10365                                  		; ds = cs
 10366                                  		pop	bx		; lw of the new cluster number
 10367                                  		pop	si ; 20/12/2023 ; hw of the new cluster number
 10368                                  
 10369                                  		pop	di ; 2* - (kernel) load location (es:di)
 10370                                  
 10371                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
 10372                                  		; 12/12/2023
 10373                                  		mov	ax, [doscnt]
 10374                                  		xchg	ah, al		; multiply by 256
 10375                                  		shl	ax, 1		; times	2 equal	512
 10376                                  		add	di, ax		; update load location
 10377                                  
 10378                                  		pop	cx ; 1*		; restore sectors/cluster
 10379                                  
 10380                                  		retn
 10381                                  
 10382                                  ; =============== S U B	R O U T	I N E =======================================
 10383                                  
 10384                                  ;function: find and read the corresponding fat sector into ds:0
 10385                                  ;
 10386                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 10387                                  ;     ds - fatloc segment
 10388                                  ;     cs:drvfat - logical drive number, fat id
 10389                                  ;     cs:md_sectorsize
 10390                                  ;     cs:last_fat_secnum - last fat sector number read in.
 10391                                  ;
 10392                                  ;out). corresponding fat sector read in.
 10393                                  ;      bx = offset value from fatlog segment.
 10394                                  ;      other registers are saved.
 10395                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 10396                                  ;      starts at the last byte of the fat sector. in this case, the caller
 10397                                  ;      should save this byte, and read the next fat sector to get the rest
 10398                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 10399                                  
 10400                                  		; 17/10/2022
 10401                                  get_fat_sector:	
 10402                                  		; 12/12/2023
 10403                                  		; ds = fat buffer segment
 10404                                  
 10405                                  		; 12/12/2023
 10406                                  		;push	ax ; (not necessary)
 10407                                  		push	cx ; read count (sectors per cluster)
 10408                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 10409                                  		push	si ; FAT offset value (from fat entry 0)
 10410                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 10411                                  		push	ds ; FAT buffer segment
 10412                                  
 10413                                  		; 12/12/2023
 10414                                  		push	cs
 10415                                  		pop	ds
 10416                                  	
 10417                                  		mov	ax, si
 10418                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 10419                                  		; 12/12/2023
 10420                                  		;mov	cx, [md_sectorsize] ; 512
 10421                                  		;div	cx		; ax = sector number, dx = offset
 10422                                  		; 12/12/2023
 10423                                  		;nop
 10424                                  
 10425                                  		; 12/12/2023
 10426                                  		div	word [md_sectorsize] ; 512
 10427                                  
 10428                                  		; ax = FAT sector (sequence/index) number
 10429                                  		; dx = cluster number offset
 10430                                  
 10431                                  		; Get rid of the assumption that
 10432                                  		; there	is only	one reserved sector
 10433                                  
 10434                                  		; 12/12/2023 ; *
 10435                                  		;push	es ; *
 10436                                  		;push	ds ; *
 10437                                  		;push	di ; *
 10438                                  		push	ax
 10439                                  		;push	cs ; *
 10440                                  		;pop	ds ; *
 10441                                  
 10442                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 10443                                  		; 12/12/2023
 10444                                  		mov	ax, [drvfat]	; get drive # and FAT id 
 10445                                  		mov	bp, SETDRIVE
 10446                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 10447                                  		;;mov	bp, 4D7h	; setdrive
 10448                                  					; at 2C7h:4D7h = 70h:2A47h
 10449                                  		push	cs		; simulate far call
 10450                                  		call	call_bios_code	; get bds for drive
 10451                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
 10452                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 10453                                  					; add #reserved_sectors
 10454                                  		; 12/12/2023
 10455                                  		;pop	di ; *
 10456                                  		;pop	ds ; *
 10457                                  		;pop	es ; *
 10458                                  
 10459                                  		; 12/12/2023
 10460                                  		; ds = cs
 10461                                  		cmp	ax, [last_fat_sec_num]
 10462                                  		;cmp	ax, [cs:last_fat_sec_num]
 10463                                  		jz	short gfs_split_chk ; don't need to read it again.
 10464                                  		mov	[last_fat_sec_num], ax
 10465                                  		;mov	[cs:last_fat_sec_num], ax
 10466                                  					; sector number
 10467                                  					; (in the partition, without hidden sectors)
 10468                                  		; 13/12/2023
 10469                                  		pop	es ; FAT buffer segment (DS on top of the stack)
 10470                                  		push	es ; (put it on top of the stack again)
 10471                                  
 10472                                  		push	dx ; cluster number offset
 10473                                  
 10474                                  		; 12/12/2023
 10475                                  		xor	cx, cx
 10476                                  		mov	[start_sec_h], cx ;0 
 10477                                  		;mov	word [cs:start_sec_h], 0 
 10478                                  					; prepare to read the fat sector
 10479                                  					; start_sec_h is always	0 for fat sector.
 10480                                  		mov	dx, ax
 10481                                  		; 12/12/2023
 10482                                  		inc	cx ; cx = 1
 10483                                  		;mov	cx, 1		; 1 sector read
 10484                                  		;mov	ax, [cs:drvfat]
 10485                                  		mov	ax, [drvfat]
 10486                                  		;push	ds
 10487                                  		;pop	es
 10488                                  
 10489                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
 10490                                  		
 10491                                  		; 12/12/2023
 10492                                  		;push	ds
 10493                                  		;push	cs
 10494                                  		;pop	ds
 10495                                  		
 10496                                  		push	cs		; simulate far call
 10497                                  		mov	bp, DISKRD	; 8E5h
 10498                                  		;mov	bp, 8E5h	; offset diskrd
 10499                                  					; 2C7h:8E5h = 70h:2E55h
 10500                                  		call	call_bios_code
 10501                                  
 10502                                  		; 12/12/2023
 10503                                  		;pop	ds
 10504                                  		; ds = cs = biosdata segment
 10505                                  
 10506                                  		pop	dx ; cluster number offset 
 10507                                  
 10508                                  gfs_split_chk:
 10509                                  		; 13/12/2023
 10510                                  		;mov	cx, [cs:md_sectorsize] ; 512
 10511                                  		mov	cx, [md_sectorsize]
 10512                                  ;gfs_split_chk:					
 10513                                  		dec	cx		; 511
 10514                                  		cmp	dx, cx		; if offset points to the
 10515                                  					; last byte of this sector,
 10516                                  					; then splitted	entry.
 10517                                  		mov	bx, dx		; set bx to dx
 10518                                  		
 10519                                  		; 12/12/2023
 10520                                  		; bx = dx = cluster number offset in the FAT buffer
 10521                                  		pop	ds ; FAT buffer segment
 10522                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 10523                                  		pop	si ; FAT offset value (from fat entry 0)
 10524                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 10525                                  		pop	cx ; read count (sectors per cluster)
 10526                                  		;pop	ax
 10527                                  
 10528                                  		retn
 10529                                  ; 15/10/2022
 10530                                  ;Bios_Data_Init	ends
 10531                                  
 10532                                  %endif
 10533                                  ; ---------------------------------------------------------------------------
 10534                                  ; ---------------------------------------------------------------------------
 10535                                  
 10536                                  		; 09/12/2022
 10537                                  		;db 0
 10538                                  
 10539                                  numbertodiv	equ ($-BData_start)
 10540                                  numbertomod	equ (numbertodiv % 16)
 10541                                  
 10542                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
 10543 0000291A 00<rep 6h>              		times (16-numbertomod) db 0
 10544                                  %endif
 10545                                  
 10546                                  ;align 16
 10547                                  
 10548                                  ; 09/12/2022
 10549                                  IOSYSCODESEGOFF equ $ - BData_start
 10550                                  ; 29/09/2023
 10551                                  ;IOSYSCODESEGOFF equ $-$$
 10552                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 10553                                  
 10554                                  ; 28/09/2023
 10555                                  S1SIZE equ $-$$
 10556                                  
 10557                                  ;--- End of DOSBIOS data segment --------------------------------------------
 10558                                  ; ---------------------------------------------------------------------------
 10559                                  		;db 4 dup(0)
 10560                                  ; 09/12/2022		
 10561                                  ;		times 4 db 0	; 19/10/2022
 10562                                  ; ---------------------------------------------------------------------------
 10563                                  
 10564                                  ;============================================================================
 10565                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 10566                                  ;============================================================================
 10567                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10568                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 10569                                  
 10570                                  section .BIOSCODE vstart=0 
 10571                                  
 10572                                  ; 30/12/2022
 10573                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 10574                                  
 10575                                  BCode_start:	 ; 09/12/2022
 10576                                   
 10577                                  ; 02/10/2022
 10578                                  
 10579                                  ;--- DOSBIOS code segment ---------------------------------------------------
 10580                                  ;----------------------------------------------------------------------------
 10581                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 10582                                  ;----------------------------------------------------------------------------
 10583                                  
 10584                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 10585 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 10586 00000030 7000                    BiosDataWord:	dw 70h
 10587                                  
 10588                                  ; 15/10/2022
 10589                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 10590                                  ; 09/12/2022
 10591                                  BIOSDATAWORD	equ BiosDataWord
 10592                                  
 10593                                  ; ---------------------------------------------------------------------------
 10594                                  
 10595                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10596                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10597                                  
 10598                                  ;************************************************************************
 10599                                  ;*									*
 10600                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 10601                                  ;*	  trashes di, cx, es						*
 10602                                  ;*									*
 10603                                  ;*	cas -- should be made disposable!				*
 10604                                  ;*									*
 10605                                  ;************************************************************************
 10606                                  
 10607                                  	; 20/09/2023	
 10608                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10609                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 10610                                  
 10611                                  _seg_reinit:
 10612 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10613                                  					; at 2C7h:30h or 70h:25A0h
 10614                                  		;mov	di, (offset cdev+2)
 10615 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 10616                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 10617                                  		; 10/08/2023
 10618 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 10619                                  _seg_reinit_1:
 10620 0000003D AB                      		stosw			; modify Bios_Code entry points
 10621 0000003E 47                      		inc	di
 10622 0000003F 47                      		inc	di
 10623 00000040 E2FB                    		loop	_seg_reinit_1
 10624                                  		; 10/08/2023 (PCDOS 7.1)
 10625                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 10626                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 10627 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 10628                                  
 10629 00000046 CB                      		retf
 10630                                  
 10631                                  ; ---------------------------------------------------------------------------
 10632                                  
 10633                                  ; 15/10/2022
 10634                                  
 10635                                  ;************************************************************************
 10636                                  ;*									*
 10637                                  ;*	chardev_entry - main device driver dispatch routine		*
 10638                                  ;*	   called with a dummy parameter block on the stack		*
 10639                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 10640                                  ;*									*
 10641                                  ;*	will eventually take care of doing the transitions in		*
 10642                                  ;*	   out of Bios_Code						*
 10643                                  ;*									*
 10644                                  ;************************************************************************
 10645                                  
 10646                                  		; 20/09/2023
 10647                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 10648 00000047 56                      		push	si
 10649 00000048 50                      		push	ax
 10650 00000049 51                      		push	cx
 10651 0000004A 52                      		push	dx
 10652 0000004B 57                      		push	di
 10653 0000004C 55                      		push	bp
 10654 0000004D 1E                      		push	ds
 10655 0000004E 06                      		push	es
 10656 0000004F 53                      		push	bx
 10657 00000050 89E5                    		mov	bp, sp
 10658 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 10659                                  		;;mov	ds, word [cs:0030h]
 10660                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10661 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10662                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 10663 0000005A C434                    		les	si, [si]
 10664                                  		;mov	ax, [si+2]	; get the device number	if present
 10665 0000005C 8CC0                    		mov	ax, es
 10666 0000005E A2[2100]                		mov	[auxnum], al
 10667 00000061 8826[8004]              		mov	[printdev], ah
 10668                                  		;mov	si, [si]	; point	to the device dispatch table
 10669 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 10670 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 10671 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 10672 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 10673 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 10674                                  		; 17/10/2022
 10675 00000079 81FE[6F05]              		cmp	si, DSKTBL
 10676                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 10677                                  		;cmp	si, 4A2h	; dsktbl
 10678                                  					; at 2C7h:4A2h = 70h:2A12h
 10679 0000007D 7517                    		jnz	short no_sector32_mapping
 10680                                  
 10681                                  ; Special case for 32-bit start sector number:
 10682                                  ;   if (si==dsktbl) /* if this is a disk device call */
 10683                                  ;      set high 16 bits of secnum to 0
 10684                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 10685                                  ;
 10686                                  ; pass high word of sector number in start_sec_h, low word in dx
 10687                                  ;
 10688                                  ; note: start_l and start_h are the offsets within the io_request packet
 10689                                  ;	  which contain the low and hi words of the 32 bit start sector if
 10690                                  ;	  it has been used.
 10691                                  ;
 10692                                  ; note: remember not to destroy the registers which have been set up before
 10693                                  
 10694                                  		; 20/09/2023
 10695                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 10696 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 10697 00000085 83FAFF                  		cmp	dx, 0FFFFh
 10698 00000088 750C                    		jnz	short no_sector32_mapping
 10699 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 10700                                  					; 32 bits dsk req
 10701                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 10702 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 10703 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 10704                                  					; dx = packet.start_l
 10705                                  no_sector32_mapping:
 10706 00000096 97                      		xchg	ax, di
 10707 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 10708 0000009B 2E3A04                  		cmp	al, [cs:si]
 10709 0000009E 732B                    		jnb	short command_error
 10710 000000A0 98                      		cbw			; note that al <= 15 means ok
 10711 000000A1 D1E0                    		shl	ax, 1
 10712 000000A3 01C6                    		add	si, ax
 10713 000000A5 97                      		xchg	ax, di
 10714 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 10715 000000AA FC                      		cld
 10716                                  		; 17/10/2022
 10717 000000AB 2EFF5401                		call	near [cs:si+1]
 10718                                  		;call	word ptr cs:si+1
 10719 000000AF 7202                    		jb	short already_got_ah_status
 10720 000000B1 B401                    		mov	ah, 1
 10721                                  already_got_ah_status:
 10722                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 10723                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10724                                  					; cas note: shouldn't be needed!
 10725 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10726                                  		;lds	bx, ds:ptrsav
 10727 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 10728 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 10729                                  					; mark operation complete
 10730 000000BF 5B                      		pop	bx
 10731 000000C0 07                      		pop	es
 10732 000000C1 1F                      		pop	ds
 10733 000000C2 5D                      		pop	bp
 10734 000000C3 5F                      		pop	di
 10735 000000C4 5A                      		pop	dx
 10736 000000C5 59                      		pop	cx
 10737 000000C6 58                      		pop	ax
 10738 000000C7 5E                      		pop	si
 10739                                  		;add	sp, 2		; get rid of fake return address
 10740                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 10741 000000C8 44                      		inc	sp
 10742 000000C9 44                      		inc	sp	
 10743                                  
 10744                                  		; fall through into bc_retf
 10745                                  ; ---------------------------------------------------------------------------	
 10746                                  bc_retf:
 10747 000000CA CB                      		retf
 10748                                  ; ---------------------------------------------------------------------------
 10749                                  
 10750                                  command_error:				
 10751 000000CB E80700                  		call	bc_cmderr
 10752 000000CE EBE3                    		jmp	short already_got_ah_status
 10753                                  ; 15/10/2022
 10754                                  ; 01/05/2019
 10755                                  
 10756                                  ;----------------------------------------------------------------------------
 10757                                  ; The following piece of hack is for supporting CP/M compatibility
 10758                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 10759                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 10760                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 10761                                  ; high.
 10762                                  ;----------------------------------------------------------------------------
 10763                                  
 10764                                  		;db 7 dup(0)
 10765                                  
 10766                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 10767                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 10768                                  		; 15/10/2022
 10769                                  		;dw 0		; pad to bring offset to 0D0h
 10770                                  
 10771 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 10772                                  				;  which is the CP/M call 5 entry point
 10773                                  		
 10774                                  
 10775                                  ; ---------------------------------------------------------------------------
 10776                                  
 10777                                  ;	exit - all routines return through this path
 10778                                  
 10779                                  bc_cmderr:				
 10780 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 10781                                  					; unknown command error
 10782                                  
 10783                                  ; =============== S U B	R O U T	I N E =======================================
 10784                                  
 10785                                  ;	now zero the count field by subtracting its current value,
 10786                                  ;	  which is still in cx, from itself.
 10787                                  
 10788                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 10789                                  ;	  in order to return the number actually complete
 10790                                  
 10791                                  bc_err_cnt:	
 10792                                  		;les	bx, ds:ptrsav
 10793                                  		; 19/10/2022
 10794 000000D7 C41E[1200]              		les	bx, [ptrsav]
 10795 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 10796                                  					; # of successful i/o's
 10797 000000DF B481                    		mov	ah, 81h		; mark error return
 10798 000000E1 F9                      		stc			; indicate abnormal end
 10799 000000E2 C3                      		retn
 10800                                  
 10801                                  ; 15/10/2022
 10802                                  
 10803                                  ;Bios_Code ends
 10804                                  
 10805                                  ;----------------------------------------------------------------------------
 10806                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 10807                                  ;----------------------------------------------------------------------------
 10808                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10809                                  ; 10/01/2019 - Retro DOS v4.0
 10810                                  
 10811                                  ; 30/04/2019
 10812                                  
 10813                                  ;title	mschar - character and clock devices
 10814                                  
 10815                                  ;MODE_CTRLBRK	equ	0FFh
 10816                                  
 10817                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 10818                                  
 10819                                  ;************************************************************************
 10820                                  ;*									*
 10821                                  ;*	device driver dispatch tables					*
 10822                                  ;*									*
 10823                                  ;*	each table starts with a byte which lists the number of		*
 10824                                  ;*	legal functions, followed by that number of words. Each		*
 10825                                  ;*	word represents an offset of a routine in Bios_Code which	*
 10826                                  ;*	handles the function. The functions are terminated with		*
 10827                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 10828                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 10829                                  ;*	returned as abnormal completion status. Notice that ds		*
 10830                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 10831                                  ;*									*
 10832                                  ;************************************************************************
 10833                                  
 10834                                  		; 20/09/2023
 10835                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 10836                                  		; 13/12/2022
 10837 000000E3 00                      		db 0
 10838                                  
 10839                                  		; 13/12/2022
 10840 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 10841                                  					; 2C7h:0E4h = 70h:2654h
 10842 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 10843                                  					; 00 init
 10844 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 10845 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 10846 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 10847                                  					; 03
 10848 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 10849                                  					; 04
 10850 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 10851                                  					; 05
 10852 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 10853 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 10854                                  					; 07
 10855 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 10856                                  					; 08
 10857 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 10858 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 10859                                  con_table_end:
 10860 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 10861                                  					; 2C7h:0FBh = 70h:266Bh
 10862 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 10863 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10864 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10865 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 10866 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 10867                                  					; 04 indicate zero chars read
 10868 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10869                                  					; 05 read non-destructive
 10870 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10871 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10872 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 10873 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 10874 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 10875 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 10876 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 10877 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 10878 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 10879 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 10880 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 10881 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 10882 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 10883 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 10884 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 10885 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 10886 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 10887 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 10888 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 10889 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 10890                                  prn_table_end:
 10891 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 10892                                  					; 2C7h:130h = 70h:26A0h
 10893 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 10894 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10895 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10896 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10897 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 10898 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 10899 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10900 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 10901 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 10902 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 10903 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 10904                                  aux_table_end:
 10905 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 10906                                  					; 2C7h:147h = 70h:26B7h
 10907 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 10908 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10909 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10910 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10911 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 10912 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10913 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10914 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10915 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 10916 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 10917                                  tim_table_end:
 10918                                  
 10919                                  ; ---------------------------------------------------------------------------
 10920                                  
 10921                                  ;************************************************************************
 10922                                  ;*									*
 10923                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 10924                                  ;*									*
 10925                                  ;************************************************************************
 10926                                  
 10927                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 10928                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 10929 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 10930                                  con_loop:				
 10931 0000015E E80500                  		call	chrin		; get char in al
 10932 00000161 AA                      		stosb			; store	char at	es:di
 10933 00000162 E2FA                    		loop	con_loop
 10934                                  con_exit:				
 10935 00000164 F8                      		clc
 10936 00000165 C3                      		retn
 10937                                  
 10938                                  ; =============== S U B	R O U T	I N E =======================================
 10939                                  
 10940                                  ;************************************************************************
 10941                                  ;*									*
 10942                                  ;*	chrin - input single char from keyboard into al			*
 10943                                  ;*									*
 10944                                  ;*	  we are going to issue extended keyboard function, if		*
 10945                                  ;*	  supported. the returning value of the extended keystroke	*
 10946                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 10947                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 10948                                  ;*	  this creates a conflict when the user entered real		*
 10949                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 10950                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 10951                                  ;*	  in the following manner:					*
 10952                                  ;*									*
 10953                                  ;*	      ah = 16h							*
 10954                                  ;*	      int 16h							*
 10955                                  ;*	      if al == 0, then extended code (in ah)			*
 10956                                  ;*	      else if al == 0E0h, then					*
 10957                                  ;*	      if ah <> 0, then extended code (in ah)			*
 10958                                  ;*		else greek_alpha character.				*
 10959                                  ;*									*
 10960                                  ;*	also, for compatibility reason, if an extended code is		*
 10961                                  ;*	  detected, then we are going to change the value in al		*
 10962                                  ;*	  from 0E0h to 00h.						*
 10963                                  ;*									*
 10964                                  ;************************************************************************
 10965                                  
 10966                                  		; 19/10/2022
 10967                                  chrin:		
 10968 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 10969 0000016A 30C0                    		xor	al, al
 10970 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 10971 00000170 08C0                    		or	al, al
 10972 00000172 752A                    		jnz	short keyret
 10973 00000174 CD16                    		int	16h		; KEYBOARD -
 10974 00000176 09C0                    		or	ax, ax
 10975 00000178 74EC                    		jz	short chrin
 10976 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 10977 0000017D 7504                    		jnz	short alt_ext_chk
 10978 0000017F B010                    		mov	al, 10h
 10979 00000181 EB1B                    		jmp	short keyret
 10980                                  ; ---------------------------------------------------------------------------
 10981                                  
 10982                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 10983                                  ;    if character read was 0E0h then
 10984                                  ;      if extended byte was zero (i.e. ah == 0) then
 10985                                  ;	 goto keyret
 10986                                  ;      else
 10987                                  ;	 set al to zero
 10988                                  ;	 goto alt_save
 10989                                  ;      endif
 10990                                  ;    endif
 10991                                  ;  endif
 10992                                  
 10993                                  alt_ext_chk:
 10994 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 10995 00000188 740C                    		jz	short not_ext
 10996 0000018A 3CE0                    		cmp	al, 0E0h
 10997 0000018C 7508                    		jnz	short not_ext
 10998 0000018E 08E4                    		or	ah, ah
 10999 00000190 740C                    		jz	short keyret
 11000 00000192 30C0                    		xor	al, al
 11001 00000194 EB04                    		jmp	short alt_save
 11002                                  ; ---------------------------------------------------------------------------
 11003                                  
 11004                                  not_ext:				
 11005 00000196 08C0                    		or	al, al		; special case?
 11006 00000198 7504                    		jnz	short keyret
 11007                                  alt_save:				
 11008 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 11009                                  keyret:					
 11010 0000019E C3                      		retn
 11011                                  
 11012                                  ; ---------------------------------------------------------------------------
 11013                                  
 11014                                  ;************************************************************************
 11015                                  ;*									*
 11016                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 11017                                  ;*									*
 11018                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 11019                                  ;*	in the status word of the request packet, and there is no	*
 11020                                  ;*	character in the input buffer, the driver issues a system	*
 11021                                  ;*	wait request to the rom. on return from the rom, it returns	*
 11022                                  ;*	a 'char-not-found' to the dos.					*
 11023                                  ;*									*
 11024                                  ;************************************************************************
 11025                                  
 11026                                  		; 19/10/2022
 11027                                  con_rdnd:				
 11028 0000019F A0[0C00]                		mov	al, [altah]
 11029 000001A2 08C0                    		or	al, al
 11030 000001A4 754C                    		jnz	short rdexit
 11031 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 11032 000001AA CD16                    		int	16h		; KEYBOARD -
 11033 000001AC 751D                    		jnz	short gotchr
 11034 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 11035 000001B3 7412                    		jz	short z_bus_exit
 11036 000001B5 C41E[1200]              		les	bx, [ptrsav]
 11037                                  		; 12/12/2022
 11038 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 11039                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 11040 000001BE 7407                    		jz	short z_bus_exit
 11041 000001C0 B80041                  		mov	ax, 4100h
 11042 000001C3 30DB                    		xor	bl, bl
 11043 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 11044                                  					; AL = condition type, BH = condition compare or mask value
 11045                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 11046                                  					; DX = I/O port	address	if AL bit 4 set
 11047                                  z_bus_exit:				
 11048 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 11049 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 11050 000001CA C3                      		retn
 11051                                  ; ---------------------------------------------------------------------------
 11052                                  
 11053                                  gotchr:					
 11054 000001CB 09C0                    		or	ax, ax
 11055 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 11056 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 11057 000001D3 CD16                    		int	16h		; KEYBOARD -
 11058 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 11059                                  ; ---------------------------------------------------------------------------
 11060                                  
 11061                                  notbrk:					
 11062 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 11063 000001DA 7504                    		jnz	short rd_ext_chk
 11064 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 11065 000001DE EB12                    		jmp	short rdexit
 11066                                  ; ---------------------------------------------------------------------------
 11067                                  
 11068                                  rd_ext_chk:				
 11069 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 11070 000001E5 740B                    		jz	short rdexit
 11071 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 11072 000001E9 7507                    		jnz	short rdexit
 11073 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 11074 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 11075 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 11076                                  					; change it for	compatibility
 11077                                  rdexit:					
 11078 000001F2 C41E[1200]              		les	bx, [ptrsav]
 11079 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 11080                                  					; return keyboard character here
 11081                                  bc_exvec:				
 11082 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 11083                                  					; indicate normal termination
 11084 000001FB C3                      		retn
 11085                                  ; ---------------------------------------------------------------------------
 11086                                  
 11087                                  ;************************************************************************
 11088                                  ;*									*
 11089                                  ;*	con_write - console write routine				*
 11090                                  ;*									*
 11091                                  ;*	entry:	es:di -> buffer						*
 11092                                  ;*		cx    =  count						*
 11093                                  ;*									*
 11094                                  ;************************************************************************
 11095                                  
 11096                                  con_writ:
 11097                                  		;jcxz	short bc_exvec
 11098 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 11099                                  		; 12/12/2022
 11100                                  		;jcxz	cc_ret
 11101                                  con_lp:					
 11102 000001FE 268A05                  		mov	al, [es:di]
 11103 00000201 47                      		inc	di
 11104 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 11105                                  					; AL = character to display
 11106 00000204 E2F8                    		loop	con_lp
 11107                                  cc_ret:					
 11108 00000206 F8                      		clc
 11109 00000207 C3                      		retn
 11110                                  
 11111                                  ; =============== S U B	R O U T	I N E =======================================
 11112                                  
 11113                                  ;************************************************************************
 11114                                  ;*									*
 11115                                  ;*	con_flush - flush out keyboard queue				*
 11116                                  ;*									*
 11117                                  ;************************************************************************
 11118                                  
 11119                                  con_flush:
 11120 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 11121                                  flloop:					; while	(charavail()) charread();	
 11122 0000020D B401                    		mov	ah, 1
 11123 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 11124                                  					; Return: ZF clear if character	in buffer
 11125                                  					; AH = scan code, AL = character
 11126                                  					; ZF set if no character in buffer
 11127 00000211 74F3                    		jz	short cc_ret
 11128 00000213 30E4                    		xor	ah, ah
 11129 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 11130                                  					; Return: AH = scan code, AL = character
 11131 00000217 EBF4                    		jmp	short flloop
 11132                                  
 11133                                  ; ---------------------------------------------------------------------------
 11134                                  
 11135                                  ; 15/10/2022
 11136                                  
 11137                                  ;************************************************************************
 11138                                  ;*									*
 11139                                  ;*	some equates for rom bios printer i/o				*
 11140                                  ;*									*
 11141                                  ;************************************************************************
 11142                                  
 11143                                  ; ibm rom status bits (i don't trust them, neither should you)
 11144                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 11145                                  ; whole slew of bits, only one of which is correct.
 11146                                  
 11147                                  ;notbusystatus	equ 10000000b		; not busy
 11148                                  ;nopaperstatus	equ 00100000b		; no more paper
 11149                                  ;prnselected	equ 00010000b		; printer selected
 11150                                  ;ioerrstatus	equ 00001000b		; some kinda error
 11151                                  ;timeoutstatus	equ 00000001b		; time out.
 11152                                  ;
 11153                                  ;noprinter	equ 00110000b		; no printer attached
 11154                                  
 11155                                  ; 18/03/2019 - Retro DOS v4.0
 11156                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 11157                                  
 11158                                  ; ---------------------------------------------------------------------------
 11159                                  
 11160                                  ;************************************************************************
 11161                                  ;*									*
 11162                                  ;*	prn_input - return with no error but zero chars read		*
 11163                                  ;*									*
 11164                                  ;*	enter with cx = number of characters requested			*
 11165                                  ;*									*
 11166                                  ;************************************************************************
 11167                                  
 11168                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 11169 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 11170                                  					; (sub reqpkt.count,cx)
 11171                                  		; 12/12/2022
 11172                                  prn_done:
 11173 0000021C F8                      		clc			; but return with carry	reset for no error
 11174 0000021D C3                      		retn
 11175                                  ; ---------------------------------------------------------------------------
 11176                                  
 11177                                  ;************************************************************************
 11178                                  ;*									*
 11179                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 11180                                  ;*									*
 11181                                  ;*	auxnum has printer number					*
 11182                                  ;*									*
 11183                                  ;************************************************************************
 11184                                  
 11185                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 11186                                  		;jcxz	short prn_done	; no chars to output
 11187 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 11188                                  prn_loop:				
 11189 00000220 BB0200                  		mov	bx, 2		; retry	count
 11190                                  prn_out:				
 11191 00000223 E83600                  		call	prnstat		; get status
 11192 00000226 751D                    		jnz	short TestPrnError
 11193 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 11194 0000022B 30E4                    		xor	ah, ah
 11195 0000022D E82E00                  		call	prnop		; print	to printer
 11196 00000230 7419                    		jz	short prn_con	; no error - continue
 11197 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 11198 00000235 7509                    		jnz	short _prnwf
 11199 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 11200 00000239 C606[0C00]00            		mov	byte [altah], 0
 11201 0000023E EB08                    		jmp	short pmessg
 11202                                  ; ---------------------------------------------------------------------------
 11203                                  
 11204                                  _prnwf:					
 11205 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 11206 00000243 7406                    		jz	short prn_con
 11207                                  TestPrnError:				
 11208 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 11209 00000246 75DB                    		jnz	short prn_out
 11210                                  pmessg:					
 11211 00000248 E98CFE                  		jmp	bc_err_cnt
 11212                                  ; ---------------------------------------------------------------------------
 11213                                  
 11214                                  prn_con:				
 11215 0000024B 47                      		inc	di		; point	to next	char and continue
 11216 0000024C E2D2                    		loop	prn_loop
 11217                                  ;prn_done:				
 11218                                  		; 12/12/2022
 11219                                  prn_done2:
 11220                                  		;clc
 11221                                  		; cf=0
 11222 0000024E C3                      		retn
 11223                                  ; ---------------------------------------------------------------------------
 11224                                  
 11225                                  ;************************************************************************
 11226                                  ;*									*
 11227                                  ;*	prn_stat - device driver entry to return printer status		*
 11228                                  ;*									*
 11229                                  ;************************************************************************
 11230                                  
 11231                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 11232 0000024F E80A00                  		call	prnstat		; device in dx
 11233 00000252 75F4                    		jnz	short pmessg
 11234 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 11235                                  		;jnz	short prn_done
 11236                                  		; 12/12/2022
 11237 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 11238 00000259 E96BFF                  		jmp	z_bus_exit
 11239                                  ; ---------------------------------------------------------------------------
 11240                                  
 11241                                  ;************************************************************************
 11242                                  ;*									*
 11243                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 11244                                  ;*		 printer status. Return meaningful error code		*
 11245                                  ;*									*
 11246                                  ;************************************************************************
 11247                                  
 11248                                  prnstat:				
 11249 0000025C B402                    		mov	ah, 2		; set command for get status
 11250                                  					; PRINTER - GET	STATUS
 11251                                  					; DX = printer port (0-3)
 11252                                  					; Return: AH = status
 11253                                  
 11254                                  ; =============== S U B	R O U T	I N E =======================================
 11255                                  
 11256                                  ;************************************************************************
 11257                                  ;*									*
 11258                                  ;*	prnop - call ROM BIOS printer function in ah			*
 11259                                  ;*		return zero true if no error				*
 11260                                  ;*		return zero false if error, al = error code		*
 11261                                  ;*									*
 11262                                  ;************************************************************************
 11263                                  
 11264                                  prnop:
 11265                                  		; 20/12/2023 - Retro DOS v5.0
 11266                                  		; PCDOS 7.1 IBMBIO.COM
 11267                                  		
 11268                                  		;mov	dx, [auxnum]	; get printer number
 11269                                  		;int	17h
 11270                                  
 11271 0000025E 1E                      		push	ds
 11272 0000025F FF36[2100]              		push	word [auxnum]
 11273 00000263 31D2                    		xor	dx, dx ; 0
 11274 00000265 8EDA                    		mov	ds, dx
 11275 00000267 5A                      		pop	dx
 11276 00000268 9C                      		pushf			; simulate int 17h
 11277 00000269 FA                      		cli
 11278                                  		;call	dword ptr ds:5ghghCh
 11279 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 11280 0000026E 1F                      		pop	ds
 11281                                  
 11282                                  	; This check was added to see if this is a case of no
 11283                                  	; printer being installed. This tests checks to be sure
 11284                                  	; the error is noprinter (30h)
 11285                                  
 11286 0000026F 50                      		push	ax
 11287 00000270 80E430                  		and	ah, 30h
 11288 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 11289 00000276 58                      		pop	ax
 11290 00000277 7506                    		jnz	short NextTest
 11291 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 11292 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 11293                                  
 11294                                  ; examine the status bits to see if an error occurred. unfortunately, several
 11295                                  ; of the bits are set so we have to pick and choose. we must be extremely
 11296                                  ; careful about breaking basic.
 11297                                  
 11298                                  NextTest:				
 11299 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 11300                                  					; i/o error?
 11301 00000282 740A                    		jz	short checknotready ; no, try not ready
 11302                                  
 11303                                  ; at this point, we know we have an error. the converse is not true
 11304                                  
 11305 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 11306                                  					; first, assume	out of paper
 11307 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 11308 00000289 7502                    		jnz	short ret1	; yes, error is	set
 11309 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 11310                                  ret1:					
 11311 0000028D C3                      		retn
 11312                                  ; ---------------------------------------------------------------------------
 11313                                  
 11314                                  checknotready:				
 11315 0000028E B002                    		mov	al, 2		; assume not-ready
 11316 00000290 F6C401                  		test	ah, 1
 11317 00000293 C3                      		retn
 11318                                  
 11319                                  ; ---------------------------------------------------------------------------
 11320                                  
 11321                                  ;************************************************************************
 11322                                  ;*									*
 11323                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 11324                                  ;*		     this entry point should never block waiting for	*
 11325                                  ;*		     device to come ready.				*
 11326                                  ;*									*
 11327                                  ;*	inputs:	cx = count, es:di -> buffer				*
 11328                                  ;*	outputs: set the number of bytes transferred in the		*
 11329                                  ;*		 device driver request packet				*
 11330                                  ;*									*
 11331                                  ;************************************************************************
 11332                                  
 11333                                  		; 19/10/2022
 11334                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 11335 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 11336                                  prn_tilbloop:				
 11337 00000296 51                      		push	cx
 11338 00000297 53                      		push	bx
 11339 00000298 30FF                    		xor	bh, bh
 11340 0000029A 8A1E[8004]              		mov	bl, [printdev]
 11341 0000029E D1E3                    		shl	bx, 1
 11342                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 11343 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11344 000002A4 5B                      		pop	bx
 11345                                  prn_getstat:				
 11346 000002A5 E8B4FF                  		call	prnstat		; get status
 11347 000002A8 7514                    		jnz	short prn_bperr	; error
 11348 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 11349 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 11350 000002AF 59                      		pop	cx		; get original count
 11351 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 11352 000002B2 26                      		es
 11353 000002B3 AC                      		lodsb
 11354                                  		;lods	byte ptr es:[si] ; es
 11355                                  					; lodsb
 11356 000002B4 30E4                    		xor	ah, ah
 11357 000002B6 E8A5FF                  		call	prnop
 11358 000002B9 7504                    		jnz	short prn_berr	; error
 11359 000002BB E2D9                    		loop	prn_tilbloop
 11360                                  		; 12/12/2022
 11361                                  		; cf=0 (prnop)
 11362                                  		;clc			; normal no-error return
 11363 000002BD C3                      		retn			;   from device driver
 11364                                  
 11365                                  ; ---------------------------------------------------------------------------
 11366                                  
 11367                                  prn_bperr:				
 11368 000002BE 59                      		pop	cx		; restore transfer count from stack
 11369                                  prn_berr:				
 11370 000002BF E915FE                  		jmp	bc_err_cnt
 11371                                  ; ---------------------------------------------------------------------------
 11372                                  
 11373                                  ; 15/10/2022
 11374                                  
 11375                                  ;************************************************************************
 11376                                  ;*									*
 11377                                  ;*	prn_genioctl - get/set printer retry count			*
 11378                                  ;*									*
 11379                                  ;************************************************************************
 11380                                  
 11381                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 11382                                  ; 11/01/2019
 11383                                  
 11384                                  ;********************************;*
 11385                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 11386                                  ;********************************;*
 11387                                  
 11388                                  ;;RAWIO SUB-FUNCTIONS
 11389                                  ;;get_retry_count equ 65h
 11390                                  ;;set_retry_count equ 45h
 11391                                  
 11392                                  ;;struc A_RETRYCOUNT
 11393                                  ;;.rc_count: resw 1
 11394                                  ;;endstruc
 11395                                  
 11396                                  ;ioc_pc equ 5
 11397                                  
 11398                                  ; ---------------------------------------------------------------------------
 11399                                  
 11400                                  		; 19/10/2022
 11401                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 11402 000002C2 C43E[1200]              		les	di, [ptrsav]
 11403 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11404                                  					; ioc_pc
 11405 000002CB 7403                    		jz	short prnfunc_ok
 11406                                  
 11407                                  prnfuncerr:				
 11408 000002CD E905FE                  		jmp	bc_cmderr
 11409                                  ; ---------------------------------------------------------------------------
 11410                                  
 11411                                  prnfunc_ok:				
 11412 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11413 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 11414 000002D8 30FF                    		xor	bh, bh
 11415                                  		;mov	bl, ds:printdev	; get index into retry counts
 11416 000002DA 8A1E[8004]              		mov	bl, [printdev]
 11417 000002DE D1E3                    		shl	bx, 1
 11418                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 11419 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11420 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 11421 000002E6 7407                    		jz	short prngetcount
 11422 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 11423 000002EA 75E1                    		jnz	short prnfuncerr
 11424 000002EC 268B0D                  		mov	cx, [es:di]
 11425                                  prngetcount:				
 11426                                  		;mov	ds:wait_count[bx], cx
 11427 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 11428 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 11429                                  					; return current retry count
 11430                                  		; 12/12/2022
 11431                                  		; cf=0
 11432                                  		;clc
 11433 000002F6 C3                      		retn
 11434                                  ; ---------------------------------------------------------------------------
 11435                                  
 11436                                  ;************************************************************************
 11437                                  ;*									*
 11438                                  ;*  prn_ioctl_query							*
 11439                                  ;*									*
 11440                                  ;*  Added for 5.00							*
 11441                                  ;************************************************************************
 11442                                  
 11443                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 11444 000002F7 C43E[1200]              		les	di, [ptrsav]
 11445 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11446                                  					; ioc_pc
 11447 00000300 750D                    		jnz	short prn_query_err
 11448 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11449 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 11450 00000308 7404                    		jz	short IOCtlSupported
 11451 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 11452 0000030C 7501                    		jnz	short prn_query_err
 11453                                  IOCtlSupported:	
 11454                                  		; 12/12/2022
 11455                                  		; cf=0		
 11456                                  		;clc
 11457 0000030E C3                      		retn
 11458                                  ; ---------------------------------------------------------------------------
 11459                                  
 11460                                  prn_query_err:
 11461                                  		; 12/12/2022				
 11462                                  		;stc
 11463 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 11464                                  ; ---------------------------------------------------------------------------
 11465                                  
 11466                                  ;************************************************************************
 11467                                  ;*									*
 11468                                  ;*	aux port driver code -- "aux" == "com1"				*
 11469                                  ;*									*
 11470                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 11471                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 11472                                  ;*									*
 11473                                  ;************************************************************************
 11474                                  
 11475                                  ;	values in ah, requesting function of int 14h in rom bios
 11476                                  
 11477                                  ;auxfunc_send	 equ	1	;transmit
 11478                                  ;auxfunc_receive equ	2	;read
 11479                                  ;auxfunc_status	 equ	3	;request status
 11480                                  
 11481                                  ;	error flags, reported by int 14h, reported in ah:
 11482                                  
 11483                                  ;flag_data_ready equ	01h	;data ready
 11484                                  ;flag_overrun	 equ	02h	;overrun error
 11485                                  ;flag_parity	 equ	04h	;parity error
 11486                                  ;flag_frame	 equ	08h	;framing error
 11487                                  ;flag_break	 equ	10h	;break detect
 11488                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 11489                                  ;flag_timeout	 equ	80h	;timeout
 11490                                  
 11491                                  ;	these flags reported in al:
 11492                                  
 11493                                  ;flag_cts	 equ	10h	;clear to send
 11494                                  ;flag_dsr	 equ	20h	;data set ready
 11495                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 11496                                  
 11497                                  ; ---------------------------------------------------------------------------
 11498                                  
 11499                                  ;************************************************************************
 11500                                  ;*									*
 11501                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 11502                                  ;*		   at es:di						*
 11503                                  ;*									*
 11504                                  ;************************************************************************
 11505                                  
 11506                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 11507                                  		;jcxz	short exvec2
 11508 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 11509 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 11510 00000317 30C0                    		xor	al, al
 11511 00000319 8607                    		xchg	al, [bx]
 11512 0000031B 08C0                    		or	al, al
 11513 0000031D 7503                    		jnz	short aux2
 11514                                  aux1:					
 11515 0000031F E80500                  		call	auxin		; get character	from port
 11516                                  					; won't return if error
 11517                                  aux2:					
 11518 00000322 AA                      		stosb
 11519 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 11520                                  exvec2:					
 11521 00000325 F8                      		clc			; all done, successful exit
 11522                                  auxin_retn:	; 18/12/2022
 11523 00000326 C3                      		retn
 11524                                  ; ---------------------------------------------------------------------------
 11525                                  
 11526                                  ;************************************************************************
 11527                                  ;*									*
 11528                                  ;*	auxin - call rom bios to read character from aux port		*
 11529                                  ;*		if error occurs, map the error and return one		*
 11530                                  ;*		level up to device driver exit code, setting		*
 11531                                  ;*		the number of bytes transferred appropriately		*
 11532                                  ;*									*
 11533                                  ;************************************************************************
 11534                                  
 11535                                  auxin:					
 11536 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 11537 00000329 E83A00                  		call	auxop
 11538 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 11539                                  		;jnz	short arbad	; skip if any error bits set
 11540                                  		;retn
 11541                                  		; 25/06/2023 (BugFix)
 11542 0000032F 74F5                    		jz	short auxin_retn
 11543                                  ; ---------------------------------------------------------------------------
 11544                                  
 11545                                  arbad:					
 11546 00000331 58                      		pop	ax		; remove return	address	(near call)
 11547                                  		;xor	al, al
 11548                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 11549                                  		; 11/08/2023
 11550 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 11551 00000334 E9A0FD                  		jmp	bc_err_cnt
 11552                                  
 11553                                  ; ---------------------------------------------------------------------------
 11554                                  
 11555                                  ;************************************************************************
 11556                                  ;*									*
 11557                                  ;*	aux_rdnd - non-destructive aux port read			*
 11558                                  ;*									*
 11559                                  ;************************************************************************
 11560                                  
 11561                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 11562 00000337 E85D00                  		call	getbx
 11563 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 11564 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 11565 0000033E 7511                    		jnz	short auxdrx	; then return character
 11566 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 11567 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 11568 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 11569 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 11570 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 11571 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 11572 0000034F 8807                    		mov	[bx], al
 11573                                  auxdrx:					
 11574 00000351 E99EFE                  		jmp	rdexit		; return busy status
 11575                                  ; ---------------------------------------------------------------------------
 11576                                  
 11577                                  auxbus:					
 11578 00000354 E970FE                  		jmp	z_bus_exit
 11579                                  ; ---------------------------------------------------------------------------
 11580                                  
 11581                                  ;************************************************************************
 11582                                  ;*									*
 11583                                  ;*	aux_wrst - return aux port write status				*
 11584                                  ;*									*
 11585                                  ;************************************************************************
 11586                                  
 11587                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 11588 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 11589 0000035A A820                    		test	al, 20h		; test data set	ready
 11590 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 11591 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 11592 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 11593                                  		; 12/12/2022
 11594                                  		; cf=0	; (test instruction resets cf)
 11595                                  		;clc
 11596 00000363 C3                      		retn
 11597                                  ; ---------------------------------------------------------------------------
 11598                                  
 11599                                  ;************************************************************************
 11600                                  ;*									*
 11601                                  ;*	auxstat - call rom bios to determine aux port status		*
 11602                                  ;*									*
 11603                                  ;*	exit:	ax = status						*
 11604                                  ;*		dx = [auxnum]						*
 11605                                  ;*									*
 11606                                  ;************************************************************************
 11607                                  
 11608                                  auxstat:				
 11609 00000364 B403                    		mov	ah, 3		; auxfunc_status
 11610                                  
 11611                                  		; fall into auxop
 11612                                  
 11613                                  ; =============== S U B	R O U T	I N E =======================================
 11614                                  
 11615                                  ;************************************************************************
 11616                                  ;*									*
 11617                                  ;*	auxop - perform rom-biox aux port interrupt			*
 11618                                  ;*									*
 11619                                  ;*	entry:	ah = int 14h function number				*
 11620                                  ;*	exit:	ax = results						*
 11621                                  ;*		dx = [auxnum]						*
 11622                                  ;*									*
 11623                                  ;************************************************************************
 11624                                  
 11625                                  auxop:		; proc near
 11626                                  		; 20/12/2023 - Retro DOS v5.0
 11627                                  		;mov	dx, [auxnum]	; ah=function code
 11628                                  		;			; 0=init, 1=send, 2=receive, 3=status
 11629                                  		;			; get port number
 11630                                  		;
 11631                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 11632                                  		;			; DX = port number (0-3)
 11633                                  		;			; Return: AX = port status code
 11634                                  		; (PCDOS 7.1 IBMBIO.COM)
 11635 00000366 1E                      		push	ds
 11636 00000367 FF36[2100]              		push	word [auxnum]
 11637 0000036B 31D2                    		xor	dx, dx ; 0
 11638 0000036D 8EDA                    		mov	ds, dx
 11639 0000036F 5A                      		pop	dx
 11640 00000370 9C                      		pushf			; simulate INT 14h
 11641 00000371 FA                      		cli
 11642                                  		;call	dword ptr ds:50h
 11643 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 11644 00000376 1F                      		pop	ds
 11645 00000377 C3                      		retn
 11646                                  
 11647                                  ; ---------------------------------------------------------------------------
 11648                                  
 11649                                  ;************************************************************************
 11650                                  ;*									*
 11651                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 11652                                  ;*		   auxbuf [auxnum] to zero				*
 11653                                  ;*									*
 11654                                  ;*	cas - shouldn't this code call the rom bios input function	*
 11655                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 11656                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 11657                                  ;*	      which is providing interrupt-buffering of aux port?	*
 11658                                  ;*									*
 11659                                  ;************************************************************************
 11660                                  
 11661                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 11662 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 11663 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 11664                                  					; zero out buffer
 11665                                  		;clc			; all done, successful return
 11666                                  		; 12/12/2022
 11667                                  		; cf=0 ('add' instruction in 'getbx')
 11668 0000037E C3                      		retn
 11669                                  ; ---------------------------------------------------------------------------
 11670                                  
 11671                                  ;************************************************************************
 11672                                  ;*									*
 11673                                  ;*	aux_writ - write to aux device					*
 11674                                  ;*									*
 11675                                  ;************************************************************************
 11676                                  
 11677                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 11678                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 11679 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 11680                                  aux_loop:				
 11681 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 11682                                  					; move di pointer to next character
 11683 00000384 47                      		inc	di
 11684 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 11685 00000387 E8DCFF                  		call	auxop		; send character over aux port
 11686 0000038A F6C480                  		test	ah, 80h		; check	for error
 11687 0000038D 7405                    		jz	short awok	; then no error
 11688 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 11689 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 11690                                  ; ---------------------------------------------------------------------------
 11691                                  
 11692                                  awok:					
 11693 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 11694                                  					; still	more character to print
 11695                                  		;clc			; all done, successful return
 11696                                  		; 12/12/2022
 11697                                  		; cf=0 (test instruction above)	
 11698 00000396 C3                      		retn
 11699                                  
 11700                                  ; =============== S U B	R O U T	I N E =======================================
 11701                                  
 11702                                  ;************************************************************************
 11703                                  ;*									*
 11704                                  ;*	getbx - return bx -> single byte input buffer for		*
 11705                                  ;*		selected aux port ([auxnum])				*
 11706                                  ;*									*
 11707                                  ;************************************************************************
 11708                                  
 11709                                  getbx:	
 11710 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 11711                                  					; for selected aux port	([auxnum])
 11712                                  		;add	bx, offset auxbuf
 11713 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 11714                                  		; 12/12/2022
 11715                                  		; cf=0 (if [auxnum] is valid number) 
 11716 0000039F C3                      		retn
 11717                                  
 11718                                  ; ---------------------------------------------------------------------------
 11719                                  
 11720                                  ; 15/10/2022
 11721                                  
 11722                                  ;----------------------------------------------------------------
 11723                                  ;								:
 11724                                  ;		    clock device driver 			:
 11725                                  ;								:
 11726                                  ;								:
 11727                                  ;   this file contains the clock device driver. 		:
 11728                                  ;								:
 11729                                  ;   the routines in this files are:				:
 11730                                  ;								:
 11731                                  ;	routine 		function			:
 11732                                  ;	------- 		--------			:
 11733                                  ;	tim_writ		set the current time		:
 11734                                  ;	tim_read		read the current time		:
 11735                                  ;	time_to_ticks		convert time to corresponding	:
 11736                                  ;				  number of clock ticks 	:
 11737                                  ;								:
 11738                                  ; the clock ticks at the rate of:				:
 11739                                  ;								:
 11740                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 11741                                  ; see each routine for information on the use.			:
 11742                                  ;								:
 11743                                  ;----------------------------------------------------------------
 11744                                  
 11745                                  ; convert time to ticks
 11746                                  ; input : time in cx and dx
 11747                                  ; ticks returned in cx:dx
 11748                                  
 11749                                  ;19/07/2019
 11750                                  ;09/03/2019
 11751                                  
 11752                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 11753                                  
 11754                                  ; first convert from hour,min,sec,hund. to
 11755                                  ; total number of 100th of seconds
 11756                                  
 11757 000003A0 B03C                    		mov	al, 60
 11758 000003A2 F6E5                    		mul	ch		; hours	to minutes
 11759 000003A4 B500                    		mov	ch, 0
 11760 000003A6 01C8                    		add	ax, cx		; total	minutes
 11761 000003A8 B97017                  		mov	cx, 6000	; 60*100
 11762 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 11763 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 11764 000003AF 89C1                    		mov	cx, ax
 11765 000003B1 B064                    		mov	al, 100
 11766 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 11767 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 11768 000003B7 83D200                  		adc	dx, 0		; ripple carry
 11769 000003BA B700                    		mov	bh, 0
 11770 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 11771 000003BE 83D200                  		adc	dx, 0
 11772                                  
 11773                                  	; dx:cx is time in 1/100 sec
 11774                                  
 11775 000003C1 92                      		xchg	ax, dx
 11776 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 11777 000003C3 BB0BE9                  		mov	bx, 59659
 11778 000003C6 F7E3                    		mul	bx		; multiply low half
 11779 000003C8 87CA                    		xchg	dx, cx
 11780 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 11781 000003CB F7E3                    		mul	bx		; multiply high	half
 11782 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 11783 000003CF 83D200                  		adc	dx, 0
 11784 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 11785 000003D3 BB0500                  		mov	bx, 5
 11786 000003D6 F6F3                    		div	bl		; divide high half by 5
 11787 000003D8 88C1                    		mov	cl, al
 11788 000003DA B500                    		mov	ch, 0
 11789 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 11790 000003DE 98                      		cbw
 11791 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 11792 000003E0 F7F3                    		div	bx		; divide low half by 5
 11793 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 11794 000003E4 CB                      		retf			; far return
 11795                                  
 11796                                  ; ---------------------------------------------------------------------------
 11797                                  
 11798                                  ; 17/10/2022
 11799                                  ; 15/10/2022
 11800                                  
 11801                                  ;--------------------------------------------------------------------
 11802                                  ;
 11803                                  ; tim_writ sets the current time
 11804                                  ;
 11805                                  ; on entry es:[di] has the current time:
 11806                                  ;
 11807                                  ;	number of days since 1-1-80	(word)
 11808                                  ;	minutes (0-59)			(byte)
 11809                                  ;	hours (0-23)			(byte)
 11810                                  ;	hundredths of seconds (0-99)	(byte)
 11811                                  ;	seconds (0-59)			(byte)
 11812                                  ;
 11813                                  ; each number has been checked for the correct range.
 11814                                  ;
 11815                                  ;	NOTE: Any changes in this routine probably require corresponding
 11816                                  ;	changes in the version that is built with the power manager driver.
 11817                                  ;	See ptime.asm.
 11818                                  ;
 11819                                  ;--------------------------------------------------------------------
 11820                                  
 11821                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11822                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 11823                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 11824 000003E5 268B05                  		mov	ax, [es:di]
 11825 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 11826                                  					; end to avoid tick windows.
 11827 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11828                                  		;cmp	ds:havecmosclock, 0
 11829 000003EE 7423                    		jz	short no_cmos_1
 11830 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 11831                                  					; get binary hours
 11832                                  					; convert to bcd
 11833                                  		;call	far [bintobcd]
 11834                                  		;;call	ds:bintobcd	; call far [bintobcd]
 11835                                  		; 08/08/2023
 11836 000003F4 E8E800                  		call	bintobcd
 11837 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 11838 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 11839                                  		;call	far [bintobcd]
 11840                                  		;;call	ds:bintobcd	; convert to bcd
 11841 000003FD E8DF00                  		call	bintobcd
 11842 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 11843 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 11844                                  		;call	far [bintobcd]
 11845                                  		;;call	ds:bintobcd
 11846 00000406 E8D600                  		call	bintobcd
 11847                                  
 11848 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 11849 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 11850 0000040D FA                      		cli
 11851 0000040E B403                    		mov	ah, 3
 11852 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11853                                  					; CH = hours in	BCD, CL	= minutes in BCD
 11854                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 11855                                  					; Return: CMOS clock set
 11856 00000412 FB                      		sti
 11857                                  no_cmos_1:				
 11858 00000413 268B4D02                		mov	cx, [es:di+2]
 11859 00000417 268B5504                		mov	dx, [es:di+4]
 11860                                  		; 17/10/2022
 11861 0000041B FF1E[0606]              		call	far [ttticks]
 11862                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 11863                                  					; convert time to ticks
 11864                                  					; cx:dx	now has	time in	ticks
 11865 0000041F FA                      		cli			; turn off timer
 11866 00000420 B401                    		mov	ah, 1
 11867 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 11868                                  					; CX:DX	= clock	count
 11869                                  					; Return: time of day set
 11870                                  		;pop	ds:daycnt
 11871 00000424 8F06[8904]              		pop	word [daycnt]
 11872 00000428 FB                      		sti
 11873                                  		;cmp	ds:havecmosclock, 0
 11874 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11875 0000042E 7409                    		jz	short no_cmos_2
 11876                                  
 11877                                  		; 08/08/2023
 11878                                  		;call	far [daycnttoday]
 11879                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 11880                                  					; convert to bcd format
 11881 00000430 E80700                  		call	daycnttoday
 11882                                  
 11883 00000433 FA                      		cli
 11884 00000434 B405                    		mov	ah, 5
 11885 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11886                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 11887                                  					; CH = century (19h or 20h)
 11888                                  					; Return: CMOS clock set
 11889 00000438 FB                      		sti
 11890                                  no_cmos_2:
 11891                                  		; 12/12/2022
 11892                                  		; cf=0
 11893                                  		;clc
 11894 00000439 C3                      		retn
 11895                                  
 11896                                  ; ---------------------------------------------------------------------------
 11897                                  
 11898                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11899                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 11900                                  %if 1 
 11901                                  
 11902                                  ; CMOS Clock setting support routines used by MSCLOCK.
 11903                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 11904                                  
 11905                                  daycnttoday:	; proc near
 11906                                  
 11907                                  ; entry: [daycnt] = number of days since 1-1-80
 11908                                  ;
 11909                                  ; return: ch - century in bcd
 11910                                  ;	  cl - year in bcd
 11911                                  ;	  dh - month in bcd
 11912                                  ;	  dl - day in bcd
 11913                                  
 11914                                  		; 20/12/2023 - Retro DOS v5.0
 11915                                  
 11916                                  		; 08/08/2023 (ds:) (near proc)
 11917                                  		; 16/10/2022 (cs:) (far proc)		
 11918 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 11919 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 11920                                  					; # days from 1-1-1980 to 1-1-2000
 11921 00000444 7308                    		jnb	short century20
 11922                                  		;mov	byte [base_century], 19
 11923                                  		;mov	byte [base_year], 80
 11924                                  		; 08/08/2023
 11925 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 11926 0000044C EB0C                    		jmp	short years
 11927                                  ; ----------------------------------------------------------------------------
 11928                                  		
 11929                                  century20:				
 11930                                  		;mov	byte [base_century], 20
 11931                                  		;mov	byte [base_year], 0
 11932                                  		; 08/08/2023
 11933 0000044E C706[8D04]1400          		mov	word [base_century], 20
 11934 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 11935                                  					; adjust daycnt
 11936                                  years:					
 11937 0000045A 31D2                    		xor	dx, dx
 11938 0000045C A1[8904]                		mov	ax, [daycnt]
 11939 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 11940                                  					; # of days in a Leap year block
 11941 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 11942 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 11943 00000468 B304                    		mov	bl, 4
 11944 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 11945 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 11946 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 11947                                  		; 08/08/2023
 11948 00000474 BB6E01                  		mov	bx, 366
 11949 00000477 B90300                  		mov	cx, 3
 11950                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 11951 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 11952 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 11953 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 11954                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 11955 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 11956                                  		;mov	cx, 3		; And next three years are normal
 11957                                  		; 08/08/2023
 11958 00000488 4B                      		dec	bx ; 365
 11959                                  regularyear:	; 20/12/2023
 11960                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 11961 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 11962 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 11963 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 11964                                  		;sub	word [daycnt], 365 ; }
 11965 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 11966 00000497 E2F0                    		loop	regularyear	; }
 11967                                  					;
 11968                                  					; should never fall through loop
 11969                                  leapyear:	
 11970 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 11971                                  		;mov	byte [month_tab+1], 29 ; leap year.
 11972                                  					; change month table.
 11973                                  yeardone:				
 11974 0000049E 31DB                    		xor	bx, bx
 11975 000004A0 31D2                    		xor	dx, dx
 11976 000004A2 A1[8904]                		mov	ax, [daycnt]
 11977                                  		;mov	si, offset month_tab
 11978 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 11979                                  		;mov	cx, 12
 11980                                  		; 08/08/2023
 11981 000004A8 B10C                    		mov	cl, 12
 11982                                  months:					
 11983 000004AA FEC3                    		inc	bl
 11984                                  		; 08/08/2023
 11985 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 11986 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 11987                                  					; dh=0
 11988 000004B0 7605                    		jbe	short month_done
 11989 000004B2 46                      		inc	si		; next month
 11990 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 11991 000004B5 E2F3                    		loop	months		;
 11992                                  					; should never fall through loop
 11993                                  month_done:	
 11994 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 11995                                  		;mov	byte [month_tab+1], 28
 11996                                  					; restore month table value
 11997 000004BC 88DA                    		mov	dl, bl
 11998 000004BE 8A36[8E04]              		mov	dh, [base_year]
 11999 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 12000 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 12001                                  					; dl = bcd day,	al = month
 12002 000004C9 86C2                    		xchg	dl, al
 12003 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 12004 000004CE 86C6                    		xchg	dh, al
 12005 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 12006 000004D3 86C1                    		xchg	cl, al
 12007 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 12008 000004D8 88C5                    		mov	ch, al
 12009 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 12010 000004DE C3                      		retn
 12011                                  
 12012                                  ;----------------------------------------------------------------------------
 12013                                  
 12014                                  bintobcd:	; proc near		; real time clock support
 12015                                  
 12016                                  ;convert a binary input in al (less than 63h or 99 decimal)
 12017                                  ;into a bcd value in al. ah destroyed.	
 12018                                  		
 12019 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 12020 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 12021                                  					; AL = (AH*10H)+AL, AH = 0
 12022 000004E3 C3                      		retn
 12023                                  %endif
 12024                                  
 12025                                  ;----------------------------------------------------------------------------
 12026                                  
 12027                                  ; 15/10/2022
 12028                                  
 12029                                  ;----------------------------------------------------------------------------
 12030                                  ; gettime reads date and time
 12031                                  ; and returns the following information:
 12032                                  ;
 12033                                  ;	es:[di]  =count of days since 1-1-80
 12034                                  ;	es:[di+2]=hours
 12035                                  ;	es:[di+3]=minutes
 12036                                  ;	es:[di+4]=seconds
 12037                                  ;	es:[di+5]=hundredths of seconds
 12038                                  ;
 12039                                  ;	NOTE: Any changes in this routine probably require corresponding
 12040                                  ;	changes in the version that is built with the power manager driver.
 12041                                  ;	See ptime.asm.
 12042                                  ;----------------------------------------------------------------------------
 12043                                  
 12044                                  tim_read:				; 2C7h:435h = 70h:29A5h
 12045 000004E4 E84A00                  		call	GetTickCnt
 12046 000004E7 8B36[8904]              		mov	si, [daycnt]
 12047                                  
 12048                                  ; we now need to convert the time in tick to the time in 100th of
 12049                                  ; seconds. the relation between tick and seconds is:
 12050                                  ;
 12051                                  ;		 65,536 seconds
 12052                                  ;	       ----------------
 12053                                  ;		1,193,180 tick
 12054                                  ;
 12055                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 12056                                  ;
 12057                                  ;	ticks from clock  * 65,536 * 100
 12058                                  ;      --------------------------------- = time in 100th of seconds
 12059                                  ;		1,193,180
 12060                                  ;
 12061                                  ; fortunately this formula simplifies to:
 12062                                  ;
 12063                                  ;	ticks from clock * 5 * 65,536
 12064                                  ;      --------------------------------- = time in 100th of seconds
 12065                                  ;		59,659
 12066                                  ;
 12067                                  ; the calculation is done by first multipling tick by 5. next we divide by
 12068                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 12069                                  ; my 16 bits to the left.
 12070                                  ;
 12071                                  ; start with ticks in cx:dx
 12072                                  ; multiply by 5
 12073                                  
 12074 000004EB 89C8                    		mov	ax, cx
 12075 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 12076                                  					; multiply by 5
 12077 000004EF D1E2                    		shl	dx, 1
 12078 000004F1 D1D1                    		rcl	cx, 1		; times	2
 12079 000004F3 D1E2                    		shl	dx, 1
 12080 000004F5 D1D1                    		rcl	cx, 1		; times	4
 12081 000004F7 01DA                    		add	dx, bx
 12082 000004F9 11C8                    		adc	ax, cx		; times	5
 12083 000004FB 92                      		xchg	ax, dx
 12084                                  
 12085                                  ; now have ticks * 5 in	dx:ax
 12086                                  ; we now need to multiply by 65536 and divide by 59659 d.
 12087                                  
 12088 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 12089 000004FF F7F1                    		div	cx		; dx now has remainder
 12090                                  					; ax has high word of final quotient
 12091                                  
 12092                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12093                                  		;mov	bx, ax		; put high word	in safe	place
 12094 00000501 93                      		xchg	bx, ax
 12095 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 12096 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 12097                                  
 12098                                  ; rounding based on the	remainder may be added here
 12099                                  ; the result in	bx:ax is time in 1/100 second.
 12100                                  
 12101 00000506 89DA                    		mov	dx, bx		
 12102 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 12103                                  
 12104                                  ; division by 200 is necessary to ensure no overflow--max result
 12105                                  ; is number of seconds in a day/2 = 43200.
 12106                                  
 12107 0000050B F7F1                    		div	cx
 12108 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 12109 00000510 7203                    		jb	short noadj
 12110 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 12111                                  noadj:					
 12112 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 12113 00000516 88D3                    		mov	bl, dl		; save 1/100's
 12114                                  
 12115                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 12116                                  ; by two, shifting a one in if the remainder had exceeded 100.
 12117                                  
 12118 00000518 D1D0                    		rcl	ax, 1		
 12119 0000051A B200                    		mov	dl, 0
 12120 0000051C D1D2                    		rcl	dx, 1
 12121                                  		;mov	cx, 60		; divide out seconds
 12122                                  		; 20/12/2023
 12123 0000051E B13C                    		mov	cl, 60
 12124 00000520 F7F1                    		div	cx
 12125 00000522 88D7                    		mov	bh, dl		; save the seconds
 12126 00000524 F6F1                    		div	cl		; break	into hours and minutes
 12127 00000526 86E0                    		xchg	al, ah
 12128                                  
 12129                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 12130                                  
 12131                                  		; 08/08/2023
 12132                                  		;push	ax
 12133                                  		;mov	ax, si		; daycnt
 12134 00000528 96                      		xchg	ax, si
 12135 00000529 AB                      		stosw
 12136                                  		;pop	ax
 12137 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 12138 0000052B AB                      		stosw
 12139 0000052C 89D8                    		mov	ax, bx
 12140 0000052E AB                      		stosw
 12141 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 12142                                  					;   [es:di+2] = hours
 12143                                  					;   [es:di+3] = minutes
 12144                                  					;   [es:di+4] = seconds
 12145                                  					;   [es:di+5] = hundredths of seconds
 12146 00000530 C3                      		retn
 12147                                  
 12148                                  ; =============== S U B	R O U T	I N E =======================================
 12149                                  
 12150                                  ; 15/10/2022
 12151                                  
 12152                                  ;----------------------------------------------------------------------------
 12153                                  ;
 12154                                  ; procedure : GetTickCnt
 12155                                  ;
 12156                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 12157                                  ;		of rollover [except when power management driver is in use]. 
 12158                                  ;		Uses the following logic for updating Daycnt
 12159                                  ;
 12160                                  ;		if ( rollover ) {
 12161                                  ;			if ( t_switch )
 12162                                  ;				daycnt++ ;
 12163                                  ;			else
 12164                                  ;				daycnt += rollover ;
 12165                                  ;		}
 12166                                  ;
 12167                                  ; USES : AX
 12168                                  ;
 12169                                  ; RETURNS : CX:DX - tick count
 12170                                  ; MODIFIES : daycnt
 12171                                  ;
 12172                                  ;----------------------------------------------------------------------------
 12173                                  
 12174                                  		; 17/10/2022
 12175                                  GetTickCnt:
 12176 00000531 30E4                    		xor	ah, ah
 12177 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 12178                                  					; Return: CX:DX	= clock	count
 12179                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 12180                                  					; midnight
 12181                                  					; Otherwise, AL	> 0
 12182                                  		; 20/12/2023
 12183 00000535 30E4                    		xor	ah, ah
 12184 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 12185                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 12186 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 12187                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 12188                                  					; and not flag
 12189 0000053D 0106[8904]              		add	[daycnt], ax
 12190 00000541 C3                      		retn
 12191                                  ; ---------------------------------------------------------------------------
 12192                                  
 12193                                  inc_case:
 12194 00000542 08C0                    		or	al, al
 12195 00000544 7404                    		jz	short no_rollover
 12196 00000546 FF06[8904]              		inc	word [daycnt]
 12197                                  no_rollover:
 12198 0000054A C3                      		retn
 12199                                  
 12200                                  ; ---------------------------------------------------------------------------
 12201                                  ; ---------------------------------------------------------------------------
 12202                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12203                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 12204                                  
 12205                                  %if 1
 12206                                  
 12207 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 12208 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 12209 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 12210 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 12210 0000056C 2020               
 12211                                  
 12212                                  %endif
 12213                                  
 12214                                  ;----------------------------------------------------------------------------
 12215                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 12216                                  ;----------------------------------------------------------------------------
 12217                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12218                                  ; 09/03/2019 - Retro DOS v4.0
 12219                                  
 12220                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 12221                                  ; 26/05/2018 - Retro DOS v3.0
 12222                                  ; 23/03/2018 - Retro DOS v2.0
 12223                                  
 12224                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 12225                                  
 12226                                  ;struc BPB_TYPE
 12227                                  ;.SECSIZE:	resw 1
 12228                                  ;.SECALL:	resb 1
 12229                                  ;.RESNUM:	resw 1
 12230                                  ;.FATNUM:	resb 1
 12231                                  ;.DIRNUM:	resw 1
 12232                                  ;.SECNUM:	resw 1
 12233                                  ;.FATID:	resb 1
 12234                                  ;.FATSIZE:	resw 1
 12235                                  ;.SLIM:		resw 1
 12236                                  ;.HLIM:		resw 1
 12237                                  ;.HIDDEN:	resw 1
 12238                                  ;.size:
 12239                                  ;endstruc
 12240                                  
 12241                                  ;-----------------------------------------------------------------
 12242                                  ;	disk interface routines
 12243                                  ;-----------------------------------------------------------------
 12244                                  
 12245                                  ; device attribute bits:
 12246                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 12247                                  
 12248                                  ;MAXERR		equ	5
 12249                                  ;MAX_HD_FMT_ERR	equ	2
 12250                                  
 12251                                  ;LSTDRV	equ 504h
 12252                                  
 12253                                  ; some floppies do not have changeline. as a result, media-check would
 12254                                  ; normally return i-don't-know, the dos would continually reread the fat and
 12255                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 12256                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 12257                                  ; the time of the last successful disk operation and compare it with the current
 12258                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 12259                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 12260                                  ; since we cannot trust the timer to be always available, we record the number 
 12261                                  ; of media checks that have occurred when no apparent time has elapsed. while
 12262                                  ; this number is < a given threshold, we say no change. when it exceeds that
 12263                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 12264                                  ; the time of last successful access, if we see that time has passed too,
 12265                                  ; we reset the counter.
 12266                                  
 12267                                  accessmax	equ	5
 12268                                  
 12269                                  ; due to various bogosities, we need to continually adjust what the head
 12270                                  ; settle time is.  the following algorithm is used:
 12271                                  ;
 12272                                  ;   get the current head settle value.
 12273                                  ;   if it is 0, then
 12274                                  ;	set slow = 15
 12275                                  ;   else
 12276                                  ;	set slow = value
 12277                                  ;   ...
 12278                                  ;*********************************************
 12279                                  ;************ old algorithm ******************
 12280                                  ;*   if we are seeking and writing then
 12281                                  ;*	 use slow
 12282                                  ;*   else
 12283                                  ;*	 use fast
 12284                                  ;*********************************************
 12285                                  ;*********** ibm's requested logic ***********
 12286                                  ;   if we are seeking and writing and not on an at then
 12287                                  ;	use slow
 12288                                  ;   else
 12289                                  ;	use fast
 12290                                  ;   ...
 12291                                  ;   restore current head settle value
 12292                                  ;
 12293                                  ;
 12294                                  ;---------------------------------------
 12295                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 12296                                  					; it on after handling config.sys file as a
 12297                                  					; default value, if multrk_flag = multrk_off1.
 12298                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 12299                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 12300                                  
 12301                                  ; close data segment, open Bios_Code segment
 12302                                  
 12303                                  ; 15/10/2022
 12304                                  
 12305                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 12306                                  
 12307                                  ;-----------------------------------------------------------------
 12308                                  ;	command jump table
 12309                                  ;-----------------------------------------------------------------
 12310                                  
 12311 0000056E 00                      		db 0
 12312                                  
 12313                                  ; 11/12/2022
 12314                                  %if 0
 12315                                  
 12316                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 12317                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 12318                                  		dw 1742h		; dsk_init
 12319                                  		dw 4EBh			; media_chk
 12320                                  		dw 592h			; get_bpb
 12321                                  		dw 0D5h			; bc_cmderr
 12322                                  		dw 857h			; dsk_read
 12323                                  		dw 83Dh			; x_bus_exit
 12324                                  		dw 558h			; ret_carry_clear
 12325                                  		dw 558h			; ret_carry_clear
 12326                                  		dw 849h			; dsk_writ
 12327                                  		dw 841h			; dsk_writv
 12328                                  		dw 558h			; ret_carry_clear
 12329                                  		dw 558h			; ret_carry_clear
 12330                                  		dw 0D5h			; bc_cmderr
 12331                                  		dw 80Ah			; dsk_open
 12332                                  		dw 81Ah			; dsk_close
 12333                                  		dw 831h			; dsk_rem
 12334                                  		dw 558h			; ret_carry_clear
 12335                                  		dw 558h			; ret_carry_clear
 12336                                  		dw 558h			; ret_carry_clear
 12337                                  		dw 0C6Bh		; do_generic_ioctl
 12338                                  		dw 558h			; ret_carry_clear
 12339                                  		dw 558h			; ret_carry_clear
 12340                                  		dw 558h			; ret_carry_clear
 12341                                  		dw 1124h		; ioctl_getown
 12342                                  		dw 1142h		; ioctl_setown
 12343                                  		dw 129Ah		; ioctl_support_query
 12344                                  
 12345                                  ;dtbl_siz equ $-dsktbl
 12346                                  
 12347                                  %endif
 12348                                  
 12349                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12350                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 12351                                  
 12352                                  		; 21/12/2023 - Retro DOS v5.0
 12353                                  		; 11/12/2022
 12354 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 12355 00000570 [4A1A]                  		dw dsk_init
 12356 00000572 [B805]                  		dw media_chk
 12357 00000574 [5706]                  		dw get_bpb
 12358                                  		;dw bc_cmderr
 12359 00000576 [4A0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 12360 00000578 [7209]                  		dw dsk_read
 12361 0000057A [5809]                  		dw x_bus_exit
 12362 0000057C [2206]                  		dw ret_carry_clear
 12363 0000057E [2206]                  		dw ret_carry_clear
 12364 00000580 [6409]                  		dw dsk_writ
 12365 00000582 [5C09]                  		dw dsk_writv
 12366 00000584 [2206]                  		dw ret_carry_clear
 12367 00000586 [2206]                  		dw ret_carry_clear
 12368                                  		;dw bc_cmderr
 12369 00000588 [F70D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 12370 0000058A [2909]                  		dw dsk_open
 12371 0000058C [3809]                  		dw dsk_close
 12372 0000058E [4E09]                  		dw dsk_rem
 12373 00000590 [2206]                  		dw ret_carry_clear
 12374 00000592 [2206]                  		dw ret_carry_clear
 12375 00000594 [2206]                  		dw ret_carry_clear
 12376 00000596 [CC0E]                  		dw do_generic_ioctl
 12377 00000598 [2206]                  		dw ret_carry_clear
 12378 0000059A [2206]                  		dw ret_carry_clear
 12379 0000059C [2206]                  		dw ret_carry_clear
 12380 0000059E [A713]                  		dw ioctl_getown
 12381 000005A0 [C413]                  		dw ioctl_setown
 12382 000005A2 [1C15]                  		dw ioctl_support_query
 12383                                  
 12384                                  dtbl_siz equ $-dsktbl
 12385                                  
 12386                                  ; =============== S U B	R O U T	I N E =======================================
 12387                                  
 12388                                  ; ---------------------------------------------------------------------------
 12389                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 12390                                  ; the one that belongs to the drive specified. carry is set if none exists
 12391                                  ; for the drive. Pointer is returned in es:[di]
 12392                                  ;
 12393                                  ;  AL contains the logical drive number.
 12394                                  ; ---------------------------------------------------------------------------
 12395                                  
 12396                                  SetDrive:
 12397                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 12398 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 12399                                  X_Scan_Loop:
 12400 000005A8 26384505                		cmp	[es:di+5], al	
 12401 000005AC 7409                    		jz	short X_SetDrv
 12402 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 12403 000005B1 83FFFF                  		cmp	di, 0FFFFh
 12404 000005B4 75F2                    		jnz	short X_Scan_Loop
 12405 000005B6 F9                      		stc
 12406                                  X_SetDrv:
 12407 000005B7 C3                      		retn
 12408                                  
 12409                                  ; ---------------------------------------------------------------------------
 12410                                  
 12411                                  ; 15/10/2022
 12412                                  
 12413                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12414                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 12415                                  
 12416                                  ; ---------------------------------------------------------------------
 12417                                  ; if id is f9, have a 96tpi disk else
 12418                                  ; if bit 2 is 0 then media is not removable and could not have changed
 12419                                  ;  otherwise if within 2 secs of last disk operation media could not
 12420                                  ;    have changed, otherwise dont know if media has changed
 12421                                  ; ---------------------------------------------------------------------
 12422                                  
 12423                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 12424 000005B8 E8E9FF                  		call	SetDrive
 12425 000005BB BE0100                  		mov	si, 1
 12426                                  		; 21/12/2023
 12427 000005BE 26F6454001              		test	byte [es:di+40h], 1
 12428                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 12429                                  					; fchanged_by_format
 12430 000005C3 7415                    		jz	short WeAreNotFakingIt
 12431                                  		; 21/12/2023
 12432 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 12433                                  		; 12/12/2022
 12434                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 12435                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 12436                                  					; ~fchanged_by_format ;	reset flag
 12437 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12438                                  					; Ensure that we ask the rom if media has changed
 12439                                  		; 21/12/2023
 12440 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 12441                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12442                                  					; fnon_removable
 12443 000005D4 740B                    		jz	short wehaveafloppy
 12444                                  		;mov	si, 0FFFFh	; Indicate media changed
 12445                                  		; 11/08/2023
 12446 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 12447 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 12448                                  ; ---------------------------------------------------------------------------
 12449                                  
 12450                                  WeAreNotFakingIt:
 12451                                  		; 21/12/2023
 12452 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 12453                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 12454                                  		;test	byte [es:di+23h], 1
 12455 000005DF 7524                    		jnz	short Media_Done
 12456                                  wehaveafloppy:
 12457                                  		;xor	si, si ; 0	; Presume "I don't know"
 12458                                  		; 11/08/2023
 12459 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 12460                                  
 12461                                  		; If we have a floppy with changeline support, we ask the ROM
 12462                                  		; to determine if media has changed. We do not perform the
 12463                                  		; 2 second check for these drives.
 12464                                  
 12465 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 12466 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 12467 000005E9 E83615                  		call	mediacheck	;  Call	into removable routine
 12468 000005EC 7236                    		jb	short err_exitj
 12469 000005EE E89A16                  		call	haschange
 12470 000005F1 7512                    		jnz	short Media_Done
 12471                                  mChk_NoChangeLine:
 12472                                  		; If we come here, we have a floppy with no changeline support
 12473                                  			
 12474 000005F3 BE0100                  		mov	si, 1		; Presume no change
 12475 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 12476 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 12477                                  					; Is drive of last access the same?
 12478 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 12479 000005FF E82800                  		call	Check_Time_Of_Access
 12480 00000602 EB01                    		jmp	short Media_Done
 12481                                  ; ---------------------------------------------------------------------------
 12482                                  
 12483                                  Media_Unk:
 12484 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 12485                                  
 12486                                  		; SI now contains the correct value for media change.
 12487                                  		; Clean up the left overs
 12488                                  Media_Done:
 12489                                  		; 19/10/2022
 12490 00000605 06                      		push	es
 12491 00000606 C41E[1200]              		les	bx, [ptrsav]
 12492 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 12493 0000060E 07                      		pop	es
 12494 0000060F 09F6                    		or	si, si
 12495 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 12496 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 12497 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 12498 0000061A E80016                  		call	media_set_vid
 12499                                  mChk1_NoChangeLine:
 12500 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12501                                  					; Make sure we ask rom for media check
 12502                                  ret_carry_clear:			
 12503 00000622 F8                      		clc			; volidok
 12504 00000623 C3                      		retn
 12505                                  ; ---------------------------------------------------------------------------
 12506                                  
 12507                                  err_exitj:
 12508 00000624 E88207                  		call	maperror	; guaranteed to	set carry
 12509                                  ret81:					
 12510 00000627 B481                    		mov	ah, 81h		; return error status
 12511 00000629 C3                      		retn			; return with carry set
 12512                                  
 12513                                  ; =============== S U B	R O U T	I N E =======================================
 12514                                  
 12515                                  ; ---------------------------------------------------------------------------
 12516                                  ; perform a check on the time passed since the last access for this physical
 12517                                  ; drive.
 12518                                  ; we are accessing the same drive. if the time of last successful access was
 12519                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 12520                                  ; returns in si:
 12521                                  ;	0 - if time of last access was >= 2 seconds
 12522                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 12523                                  ; registers affected ax,cx,dx, flags.
 12524                                  ;
 12525                                  ;	assume es:di -> bds, ds->Bios_Data
 12526                                  ; ---------------------------------------------------------------------------
 12527                                  
 12528                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12529                                  		; 19/10/2022
 12530                                  Check_Time_Of_Access:
 12531 0000062A BE0100                  		mov	si, 1		; presume no change.
 12532 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 12533                                  		; 21/12/2023
 12534 00000630 268B4579                		mov	ax, [es:di+79h]
 12535                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 12536                                  					; get stored time
 12537 00000634 29C2                    		sub	dx, ax
 12538                                  		; 21/12/2023
 12539 00000636 268B457B                		mov	ax, [es:di+7Bh]
 12540                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 12541 0000063A 19C1                    		sbb	cx, ax
 12542                                  		; 11/08/2023
 12543                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 12544                                  		;mov	al, [accesscount]
 12545 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 12546 0000063E 09D2                    		or	dx, dx		; time must pass
 12547 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 12548                                  		; 11/08/2023
 12549                                  		;inc	al
 12550                                  		;cmp	al, 5
 12551                                  		;;inc	byte [accesscount]
 12552                                  		;;cmp	byte [accesscount], 5
 12553                                  		;			; if count is less than threshold, ok
 12554                                  		;jb	short timecheck_ret
 12555                                  		;;dec	byte [accesscount] ; don't let the count wrap
 12556                                  		; 11/08/2023
 12557                                  		;dec	al
 12558                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 12559                                  		; 11/08/2023
 12560 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 12561 00000647 730A                    		jnb	short timecheck_unk
 12562 00000649 FE06[1D01]              		inc	byte [accesscount]
 12563 0000064D C3                      		retn
 12564                                  
 12565                                  ; ---------------------------------------------------------------------------
 12566                                  
 12567                                  timepassed:
 12568 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 12569                                  					; min elapsed time? (2 seconds)
 12570 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 12571                                  
 12572                                  		; everything indicates that we do not know what has happened.
 12573                                  timecheck_unk:
 12574 00000653 4E                      		dec	si		; presume i don't know
 12575                                  timecheck_ret:
 12576                                  		; 11/08/2023
 12577                                  		;mov	[accesscount], al
 12578 00000654 C3                      		retn
 12579                                  
 12580                                  ; ---------------------------------------------------------------------------
 12581                                  ; 15/10/2022
 12582                                  Err_Exitj2:
 12583 00000655 EBCD                    		jmp	short err_exitj
 12584                                  
 12585                                  ; ---------------------------------------------------------------------------
 12586                                  
 12587                                  ; 15/10/2022
 12588                                  
 12589                                  ; ==========================================================================
 12590                                  ; Build a valid bpb for the disk in the drive.
 12591                                  ; ==========================================================================
 12592                                  
 12593                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12594                                  		; 19/10/2022
 12595                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 12596 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 12597 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 12598                                  		; 21/12/2023
 12599 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 12600                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12601                                  					; fnon_removable
 12602 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 12603                                  
 12604                                  		; let's set the default value for volid,vol_serial,
 12605                                  		; filesys_id in bds table
 12606                                  
 12607 00000664 E83600                  		call	clear_ids
 12608                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 12609 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 12610 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 12611 0000066F 72B6                    		jb	short ret81
 12612                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 12613 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 12614                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 12615 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 12616 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 12617                                  					; otherwise, conventional boot record
 12618                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 12619 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 12620 00000682 7403                    		jz	short already_gotbpb ; brif not
 12621 00000684 E80A16                  		call	set_volume_id
 12622                                  already_gotbpb:
 12623 00000687 83C706                  		add	di, 6		; BDS.BPB
 12624                                  					; return the bpb from the current bds
 12625                                  
 12626                                  ;		fall into setptrsav, es:di -> result
 12627                                  
 12628                                  ; ---------------------------------------------------------------------------
 12629                                  
 12630                                  ; 15/10/2022
 12631                                  
 12632                                  ; ==========================================================================
 12633                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 12634                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 12635                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 12636                                  ;It fails, for instance, when we install an external drive using driver.sys
 12637                                  ;because then the BDS segment is no longer Bios_Data. 
 12638                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 12639                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 12640                                  ;restored before returning to the caller.
 12641                                  ; ==========================================================================
 12642                                  
 12643                                  ; 21/12/2023
 12644                                  %if 0
 12645                                  		; 19/10/2022
 12646                                  SetPtrSav:	; return point for dsk_init
 12647                                  		mov	cx, es		; save es
 12648                                  		;les	bx, ds:ptrsav
 12649                                  		les	bx, [ptrsav]
 12650                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 12651                                  		mov	[es:bx+12h], di	; [es:bx+count]
 12652                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 12653                                  		clc
 12654                                  		retn
 12655                                  %endif
 12656                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12657                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 12658                                  SetPtrSav:	
 12659                                  		; return point for dsk_init
 12660 0000068A 1E                      		push	ds
 12661                                  		;lds	bx, ds:ptrsav
 12662 0000068B C51E[1200]              		lds	bx, [ptrsav]
 12663 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 12664 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 12665 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 12666 00000698 1E                      		push	ds
 12667 00000699 07                      		pop	es
 12668 0000069A 1F                      		pop	ds
 12669 0000069B F8                      		clc
 12670 0000069C C3                      		retn
 12671                                  
 12672                                  ; =============== S U B	R O U T	I N E =======================================
 12673                                  
 12674                                  ; 15/10/2022
 12675                                  
 12676                                  ; -----------------------------------------------------
 12677                                  ; clear ids in bds table. only applied for floppies.
 12678                                  ;input:  es:di -> bds table
 12679                                  ;	assumes ds: -> Bios_Data
 12680                                  ;output: volid set to "NO NAME    "
 12681                                  ;	 vol_serial set to 0.
 12682                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 12683                                  ;	   depending on the flag fatsize in bds.
 12684                                  ;
 12685                                  ;	trashes si, cx
 12686                                  ; -----------------------------------------------------
 12687                                  
 12688                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 12689                                  ;size_of_EXT_SYSTEM_ID equ 8
 12690                                  
 12691                                  ; 11/09/2023
 12692                                  ; 14/08/2023
 12693                                  ;BDS.fatsiz equ 1Fh
 12694                                  ; 21/12/2023
 12695                                  ;BDS.fatsiz equ 59
 12696                                  
 12697                                  		; 22/12/2023
 12698                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12699                                  clear_ids:
 12700                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 12701                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 12702 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 12703                                  clear_ids_x:
 12704                                  		; 21/12/2023 
 12705                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 12706                                  		; 11/09/2023		
 12707                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 12708 000006A1 57                      		push	di
 12709 000006A2 31C9                    		xor	cx, cx		; no serial number
 12710                                  		; 21/12/2023
 12711 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 12712 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 12713                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 12714                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 12715                                  
 12716                                  		; BUGBUG - there's a lot in common here and with
 12717                                  		; mov_media_ids.. see if we can save some space by
 12718                                  		; merging them... jgl
 12719                                  
 12720                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 12721                                  		; 10/12/2022
 12722 000006AE B10B                    		mov	cl, 11 ; cx = 11
 12723                                  
 12724                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 12725                                  		;mov	si, vol_no_name	; 19/10/2022
 12726                                  		; 22/12/2023
 12727                                  		;mov	si, offset nul_vid ; "NO NAME    "
 12728 000006B0 BE[6305]                		mov	si, nul_vid
 12729                                  
 12730                                  		; 21/12/2023
 12731 000006B3 83C77D                  		add	di, 125
 12732                                  		;add	di, 75		; BDS.volid
 12733                                  		
 12734                                  		;rep movsb
 12735                                  		; 21/12/2023
 12736                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 12737                                  		; 26/12/2023
 12738                                  		;cs	; vol_no_name is in BIOSCODE segment
 12739                                  		;rep movsb
 12740 000006B6 F3                      		rep
 12741 000006B7 2E                      		cs
 12742 000006B8 A4                      		movsb
 12743                                  
 12744                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 12745                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 12746                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 12747                                  		;test	byte [es:di+1Fh], 40h
 12748                                  		; 21/12/2023 - Retro DOS v5.0
 12749                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 12750                                  		;test	byte [es:di+59], 20h 
 12751                                  			; (here, es:di points to the BDS offset +136)
 12752                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 12753                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 12754                                  
 12755                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 12756                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 12757                                  			; Microsoft/IBM code has a bug here because the BDS's
 12758                                  			; .volid and .filesys_id fields will be reset
 12759                                  			; (to their default text) according to 'BDS.fatsiz' flags
 12760                                  			; at the BDS offset 59 but current (this) code checks flags
 12761                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 12762                                  			;; at the BDS offset 31 but current (this) code checks flags
 12763                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 12764                                  			;
 12765                                  			; Correct Code:
 12766                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 12767                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 12768                                  			; 11/09/2023
 12769                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 12770                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 12771                                  			;
 12772                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 12773                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 12774                                  
 12775                                  			;
 12776                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 12777                                  			; 'clear_ids' is used for floppy disks only and the default
 12778                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 12779                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 12780                                  
 12781                                  		; 21/12/2023 - Retro DOS v5.0
 12782                                  		;mov	si, offset fat_32_id ; "FAT32   "
 12783 000006B9 BE[5B05]                		mov	si, fat_32_id	
 12784                                  
 12785                                  		; 21/12/2023
 12786                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 12787                                  		;test	bl, fbigbig ; FAT32 flag
 12788 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 12789 000006BF 750B                    		jnz	short ci_bigfat
 12790                                  
 12791                                  		;mov	si, offset fat_16_id ; "FAT16	"
 12792 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 12793                                  		
 12794                                  		; 21/12/2023
 12795                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 12796                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 12797                                  		; BugFix ; *+
 12798                                  		;test	bl, fbig ; FAT16 flag
 12799 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 12800                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 12801 000006C7 7503                    		jnz	short ci_bigfat
 12802                                  
 12803                                  		;mov	si, offset fat_12_id ; "FAT12	"
 12804 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 12805                                  ci_bigfat:
 12806                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 12807                                  		; 10/12/2022
 12808 000006CC B108                    		mov	cl, 8 ; cx = 8 
 12809 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 12810                                  					; filesys_id field
 12811                                  		;rep movsb
 12812                                  		; 21/12/2023 - Retro DOS v5.0
 12813                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 12814                                  		; 26/12/2023
 12815                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 12816                                  		;rep movsb
 12817 000006D1 F3                      		rep
 12818 000006D2 2E                      		cs
 12819 000006D3 A4                      		movsb
 12820                                  
 12821 000006D4 5F                      		pop	di		; restore bds pointer
 12822                                  getret_exit:		; 21/12/2023
 12823 000006D5 C3                      		retn
 12824                                  
 12825                                  ; =============== S U B	R O U T	I N E =======================================
 12826                                  
 12827                                  ; 15/10/2022
 12828                                  
 12829                                  ; ---------------------------------------------------------------------------
 12830                                  ;	getbp - return bpb from the drive specified by the bds.
 12831                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 12832                                  ;	    note that we never come here for fixed disks.
 12833                                  ;	    for all other cases,
 12834                                  ;	      - it reads boot sector to pull out the bpb
 12835                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 12836                                  ;		to get the fat id byte to build the bpb from there.
 12837                                  ;
 12838                                  ;   inputs:	es:di point to correct bds.
 12839                                  ;
 12840                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 12841                                  ;		carry set, and al=7 if invalid disk.
 12842                                  ;		carry set and error code in al if other error.
 12843                                  ;		if failed to recognize the boot record, then will set the
 12844                                  ;		set_id_flag to 0.
 12845                                  ;		this routine will only work for a floppy diskette.
 12846                                  ;		     for a fixed disk, it will just return.
 12847                                  ;
 12848                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 12849                                  ;	  segment definitions. It should be migrated towards.
 12850                                  ;	   now es:di has the bds, ds: has Bios_Data
 12851                                  ; ---------------------------------------------------------------------------
 12852                                  
 12853                                  		; 29/12/2023
 12854                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12855                                  GetBp:
 12856                                  		; if returning fake bpb then return bpb as is.
 12857                                  		; 21/12/2023
 12858 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 12859                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 12860                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 12861                                  		;jz	short getbp1	; getbp1
 12862                                  		;jmp	getret_exit
 12863                                  		; 21/12/2023
 12864 000006DB 75F8                    		jnz	short getret_exit
 12865                                  ; ---------------------------------------------------------------------------
 12866                                  getbp1:	
 12867 000006DD 51                      		push	cx
 12868 000006DE 52                      		push	dx
 12869 000006DF 53                      		push	bx
 12870                                  
 12871                                  		; attempt to read in boot sector and determine bpb.
 12872                                  		; we assume that the 2.x and greater dos disks all
 12873                                  		; have a valid boot sector.
 12874                                  
 12875 000006E0 E8CF00                  		call	readbootsec
 12876 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 12877 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 12878 000006E7 7509                    		jnz	short dofatbpb
 12879 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 12880                                  		;jmp	short Has1
 12881                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 12882 000006EC E9B500                  		jmp	getret
 12883                                  ; ---------------------------------------------------------------------------
 12884                                  
 12885                                  getbp_err_ret_brdg:
 12886 000006EF E9B600                  		jmp	getbp_err_ret
 12887                                  ; ---------------------------------------------------------------------------
 12888                                  
 12889                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 12890                                  		; and fill in bpb from there.
 12891                                  dofatbpb:				
 12892 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 12893 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 12894                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 12895 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 12896 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 12897 000006FE E83115                  		call	hidensity	; may not return! May add sp, 2	and
 12898                                  					; jump to has1!!!!!! or	has720K
 12899                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 12900                                  		; 21/12/2023 - Retro DOS v5.0
 12901 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 12902                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12903                                  					; ffSmall
 12904 00000706 7512                    		jnz	short is_floppy
 12905 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 12906 0000070B 7512                    		jnz	short got_unknown_medium
 12907                                  Has720K:
 12908                                  		; 21/12/2023
 12909                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 12910                                  		;mov	bx, sm92	; 19/10/2022
 12911                                  
 12912                                  		; es points to segment of bds. the following should be modified
 12913                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 12914                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 12915                                  
 12916                                  		; 21/12/2023
 12917                                  		;; 10/12/2022
 12918                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 12919                                  		;; 21/12/2022
 12920                                  		;mov	al, [bx]
 12921                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 12922                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 12923                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 12924                                  		;; 19/10/2022 - Temporary !
 12925                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 12926                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 12927                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 12928                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 12929                                  
 12930                                  		; 21/12/2023 - Retro DOS v5.0
 12931 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 12932 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 12933 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 12934                                  					; dh = bpbtype.chead = 2
 12935 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 12936                                  					; bh = bpbtype.dire = 112
 12937 00000718 EB30                    		jmp	short Has1
 12938                                  ; ---------------------------------------------------------------------------
 12939                                  
 12940                                  is_floppy:			; must be a 5.25" floppy if we come here
 12941 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 12942                                  		;jb	short got_unknown_medium
 12943                                  		; 21/12/2023
 12944 0000071D 730A                    		jnb	short chk_160K
 12945                                  ; ---------------------------------------------------------------------------
 12946                                  		; 21/12/2023
 12947                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 12948                                  		; we do	not assume any type of bpb for this medium.
 12949                                  got_unknown_medium:
 12950                                  		;mov	ds:set_id_flag,	0
 12951 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 12952 00000724 B007                    		mov	al, 7
 12953 00000726 F9                      		stc
 12954 00000727 EB7B                    		jmp	short getret
 12955                                  ; ---------------------------------------------------------------------------
 12956                                  chk_160K:
 12957 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 12958 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 12959                                  					; set dir entries and sector max
 12960 0000072E B94001                  		mov	cx, 320		; 40*8
 12961                                  					; set size of drive
 12962 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 12963                                  					; set head limit and sec/all unit
 12964                                  		; 21/12/2023
 12965                                  		;mov	al, 1		; bpbtype.sbf = 1
 12966                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 12967                                  		;			; bh = bpbtype.dire = 64
 12968                                  		;mov	cx, 140h	; bpbtype.csec = 320
 12969                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 12970                                  		;			; dh = bpbtype.chead = 1
 12971                                  
 12972 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 12973 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 12974                                  		
 12975                                  		; 29/12/2023
 12976                                  		;inc	al	; 2 	; inc number of	fat sectors
 12977                                  		;inc	bl	; 9	; inc sector max
 12978 00000739 40                      		inc	ax
 12979 0000073A 43                      		inc	bx
 12980                                  
 12981                                  		;add	cx, 40		; increase size	(to 360)
 12982                                  		; 18/12/2022
 12983 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 12984                                  has8:
 12985 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 12986 00000741 7407                    		jz	short Has1	; jz = 1 head
 12987 00000743 01C9                    		add	cx, cx		; double size of disk
 12988 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 12989 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 12990                                  		; 29/12/2023
 12991                                  		;inc	dl	; 2	; inc head limit
 12992 00000749 42                      		inc	dx
 12993                                  Has1:
 12994                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 12995 0000074A 1E                      		push	ds
 12996 0000074B 06                      		push	es
 12997 0000074C 1F                      		pop	ds
 12998                                  
 12999                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 13000                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 13001                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 13002                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 13003                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 13004                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 13005                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 13006                                  
 13007 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 13008 00000750 30F6                    		xor	dh, dh
 13009 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 13010 00000755 88FA                    		mov	dl, bh
 13011 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 13012 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 13013 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 13014 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 13015 00000763 88C2                    		mov	dl, al
 13016 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 13017 00000768 88DA                    		mov	dl, bl
 13018 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 13019                                  
 13020                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 13021                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 13022                                  		; to 0 since this code is for floppies
 13023                                  
 13024                                  		; 18/12/2022
 13025                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 13026                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 13027                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 13028                                  		; 18/12/2022
 13029 0000076D 29C9                    		sub	cx, cx ; 0
 13030                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 13031                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 13032                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 13033                                  		
 13034                                  		; 02/09/2023
 13035 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 13036 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 13037 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 13038                                  
 13039                                  		; 21/12/2023 - Retro DOS v5.0
 13040 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 13041 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 13042 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 13043 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 13044 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 13045                                  					;     BPB_Reserved (12 zero bytes)
 13046 00000787 894D31                  		mov     [di+31h], cx
 13047 0000078A 894D33                  		mov     [di+33h], cx
 13048 0000078D 894D35                  		mov     [di+35h], cx
 13049 00000790 894D37                  		mov     [di+37h], cx
 13050 00000793 894D39                  		mov     [di+39h], cx
 13051 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 13052 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 13053                                  
 13054 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 13055 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 13056 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 13057                                  		
 13058 000007A3 1F                      		pop	ds ; 02/09/2023
 13059                                  getret:
 13060 000007A4 5B                      		pop	bx
 13061 000007A5 5A                      		pop	dx
 13062 000007A6 59                      		pop	cx
 13063                                  ;getret_exit:		; 21/12/2023
 13064 000007A7 C3                      		retn
 13065                                  ; ---------------------------------------------------------------------------
 13066                                  
 13067                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 13068                                  		;mov	ds:set_id_flag,	0
 13069                                  		; 19/10/2022
 13070 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 13071 000007AD E8F905                  		call	maperror
 13072 000007B0 EBF2                    		jmp	short getret
 13073                                  ; ---------------------------------------------------------------------------
 13074                                  ; 21/12/2023
 13075                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 13076                                  ;		; we do	not assume any type of bpb for this medium.
 13077                                  ;
 13078                                  ;got_unknown_medium:
 13079                                  ;		;mov	ds:set_id_flag,	0
 13080                                  ;		mov	byte [set_id_flag], 0
 13081                                  ;		mov	al, 7
 13082                                  ;		stc
 13083                                  ;		jmp	short getret
 13084                                  
 13085                                  ; =============== S U B	R O U T	I N E =======================================
 13086                                  
 13087                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 13088                                  
 13089                                  ; ----------------------------------------------------------------
 13090                                  ; read in the boot sector. set carry if error in reading sector.
 13091                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 13092                                  ;
 13093                                  ;	assumes es:di -> bds, ds-> Bios_Data
 13094                                  ; ----------------------------------------------------------------
 13095                                  
 13096                                  ; 10/03/2019 - Retro DOS v4.0
 13097                                  
 13098                                  ; 30/12/2022 - Retro DOS v4.2
 13099                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 13100                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 13101                                  
 13102                                  ; 22/12/2023 - Retro DOS v5.0
 13103                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 13104                                  
 13105                                  readbootsec:	
 13106 000007B2 B600                    		mov	dh, 0		; head 0
 13107 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 13108 000007B7 E8FC00                  		call	read_sector
 13109 000007BA 7243                    		jb	short err_ret
 13110 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 13111                                  
 13112                                  		; put a sanity check for the boot sector in here to detect
 13113                                  		; boot sectors that do not have valid bpbs. we examine the
 13114                                  		; first two bytes - they must contain a long jump (69h) or a
 13115                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 13116                                  		; (E9h). if this test is passed, we further check by examining
 13117                                  		; the signature at the end of the boot sector for the word
 13118                                  		; AA55h. if the signature is not present, we examine the media
 13119                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 13120                                  		; logic is modified a little bit. we are not going to check
 13121                                  		; signature. instead we are going to sanity check the media
 13122                                  		; byte in bpb regardless of the validity of signature. this is
 13123                                  		; to save the already developed commercial products that have
 13124                                  		; good jump instruction and signature but with the false bpb
 13125                                  		; informations
 13126                                  
 13127                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 13128                                  
 13129                                  		; 02/09/2023
 13130                                  		; 19/10/2022
 13131                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 13132                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 13133                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 13134                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 13135                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 13136                                  		;jnz	short invalidbootsec
 13137                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 13138                                  		;jnz	short invalidbootsec
 13139                                  
 13140                                  		; 02/09/2023 (PCDOS 7.1)
 13141 000007BE A0[5201]                		mov	al, [disksector]
 13142 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 13143 000007C3 740F                    		je	short check_bpb_mediabyte
 13144                                  					; don't need to find a nop
 13145 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 13146 000007C7 740B                    		je	short check_bpb_mediabyte
 13147                                  					; no need for nop
 13148 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 13149 000007CB 7530                    		jne	short invalidbootsec
 13150 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 13151 000007D2 7529                    		jne	short invalidbootsec
 13152                                  
 13153                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13154                                  ;
 13155                                  ;; 10/03/2019
 13156                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 13157                                  ;;
 13158                                  ;; Don't have to perform the following signature check since
 13159                                  ;; we need to check the media byte even with the good signatured diskette.
 13160                                  ;;
 13161                                  ;;check_signature:
 13162                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 13163                                  ;;							 ; disk or 1.x media.
 13164                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 13165                                  ;;					       ; may need some special handling
 13166                                  
 13167                                  ; check for non-ibm disks which do not have the signature AA55h at the
 13168                                  ; end of the boot sector, but still have a valid boot sector. this is done
 13169                                  ; by examining the media descriptor in the boot sector.
 13170                                  
 13171                                  		; 19/10/2022
 13172                                  check_bpb_mediabyte:
 13173 000007D4 A0[6701]                		mov	al, [disksector+15h]
 13174                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13175 000007D7 50                      		push	ax ; 02/09/2023
 13176 000007D8 24F0                    		and	al, 0F0h
 13177 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 13178 000007DC 58                      		pop	ax ; 02/09/2023
 13179 000007DD 751E                    		jnz	short invalidbootsec
 13180                                  
 13181                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 13182                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 13183                                  ; sectors. these are specifically diskettes that were formatted in drives
 13184                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 13185                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 13186                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 13187                                  ; help our build bpb routine to recognise these specific cases, and to
 13188                                  ; set up out copy of the bpb accordingly.
 13189                                  ; we do this by checking to see if the boot sector is off a diskette that
 13190                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 13191                                  ; sec/clus field to 1. if not, we carry on as normal.
 13192                                  
 13193                                  checksinglesided:
 13194                                  		;mov	al, [disksector+15h]
 13195                                  		; 02/09/2023
 13196                                  		; al = [disksector+15h]
 13197 000007DF 3CF0                    		cmp	al, 0F0h
 13198 000007E1 741B                    		jz	short gooddsk
 13199 000007E3 A801                    		test	al, 1
 13200 000007E5 7517                    		jnz	short gooddsk
 13201 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 13202 000007ED 7507                    		jnz	short mustbeearlier
 13203 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 13204 000007F4 7308                    		jnb	short gooddsk
 13205                                  
 13206                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 13207                                  
 13208                                  mustbeearlier:				
 13209 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 13210                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13211 000007FB EB01                    		jmp	short gooddsk
 13212                                  ; ---------------------------------------------------------------------------
 13213                                  
 13214                                  invalidbootsec:				
 13215 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 13216                                  		; 10/12/2022
 13217                                  movbpb_ret:
 13218                                  gooddsk:				
 13219 000007FE F8                      		clc
 13220                                  err_ret:
 13221 000007FF C3                      		retn
 13222                                  ; ---------------------------------------------------------------------------
 13223                                  
 13224                                  		; 10/12/2022
 13225                                  ;err_ret:				
 13226                                  		;retn
 13227                                  
 13228                                  ; =============== S U B	R O U T	I N E =======================================
 13229                                  
 13230                                  ; 15/10/2022
 13231                                  ; ---------------------------------------------------------------------------
 13232                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 13233                                  ; getbp routine at has1
 13234                                  ;
 13235                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 13236                                  ; serial number, volume label, file system id in bds according to
 13237                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 13238                                  ; to signal that volume label is set already from the extended boot record
 13239                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 13240                                  ; the volume label in the root directory.)
 13241                                  ; ---------------------------------------------------------------------------
 13242                                  
 13243                                  ; 10/03/2019 - Retro DOS v4.0
 13244                                  
 13245                                  ; 22/12/2023
 13246                                  %if 0
 13247                                  		; 19/10/2022
 13248                                  movbpb:
 13249                                  		mov	dh, [disksector+0Dh]
 13250                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13251                                  					; sectors per unit
 13252                                  		mov	bh, [disksector+11h]
 13253                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 13254                                  					; number of directory entries
 13255                                  		mov	cx, [disksector+13h]
 13256                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 13257                                  					; size of drive
 13258                                  		mov	ah, [disksector+15h]
 13259                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13260                                  					; media	descriptor
 13261                                  		mov	al, [disksector+16h];
 13262                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 13263                                  					; number of fat	sectors
 13264                                  		mov	bl, [disksector+18h]
 13265                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 13266                                  					; sectors per track
 13267                                  		mov	dl, [disksector+1Ah]
 13268                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 13269                                  					; number of heads
 13270                                  %else
 13271                                  		; 29/12/2023
 13272                                  		; 22/12/2023 - Retro DOS v5.0
 13273                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 13274                                  		;;;
 13275                                  movbpb:
 13276 00000800 57                      		push	di
 13277 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 13278 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 13279 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 13280                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 13281 0000080B FC                      		cld
 13282 0000080C F3A4                    		rep movsb
 13283 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 13284                                  					; disksektor+19 = BPB_TotSec16
 13285 00000811 31C0                    		xor	ax, ax
 13286 00000813 E308                    		jcxz	movbpb_bigdisk
 13287 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 13288                                  					; to 32 bit total sectors field
 13289 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 13290                                  movbpb_bigdisk:
 13291 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 13292 00000820 7410                    		jz	short movbpb_fat32
 13293                                  movbpb_fat:
 13294 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 13295                                  		; 29/12/2023
 13296 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 13297                                  					; (which are used only for FAT32 disks)
 13298 00000828 F3AA                    		rep stosb
 13299 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 13300 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 13301                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 13302 0000082C AB                      		stosw
 13303 0000082D 40                      		inc	ax		; ax = 0
 13304 0000082E B10C                    		mov	cl, 12		
 13305                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 13306                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 13307 00000830 F3AA                    		rep stosb
 13308                                  movbpb_fat32:
 13309 00000832 5F                      		pop	di
 13310                                  %endif
 13311                                  		;;;
 13312                                  
 13313 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 13314 00000838 75C4                    		jnz	short movbpb_ret
 13315 0000083A E81200                  		call	mov_media_ids
 13316 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 13317 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 13318                                  movbpb_conv:
 13319 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 13320 00000849 75B3                    		jnz	short movbpb_ret
 13321 0000084B E83714                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 13322                                  		; 10/12/2022
 13323                                  		; cf = 0
 13324                                  ;movbpb_ret:
 13325                                  		;clc
 13326 0000084E C3                      		retn
 13327                                  		
 13328                                  ; =============== S U B	R O U T	I N E =======================================
 13329                                  
 13330                                  ;copy the boot_serial number, volume id, and filesystem id from the
 13331                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 13332                                  ;by es:di.
 13333                                  
 13334                                  ;in.) es:di -> bds
 13335                                  ;     ds:disksector = valid extended boot record.
 13336                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 13337                                  ;      the boot record information.
 13338                                  ;     carry flag set if not an extended bpb.
 13339                                  ;     all registers saved except the flag.
 13340                                  
 13341                                  ; 22/12/2023
 13342                                  %if 0
 13343                                  		; 19/10/2022
 13344                                  mov_media_ids:		
 13345                                  		cmp	byte [disksector+26h], 29h
 13346                                  					; [disksector+EXT_BOOT.SIG],
 13347                                  					; EXT_BOOT_SIGNATURE
 13348                                  		jnz	short mmi_not_ext
 13349                                  		push	cx
 13350                                  		mov	cx, [disksector+27h]
 13351                                  					; [disksector+EXT_BOOT.SERIAL]
 13352                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13353                                  		mov	cx, [disksector+29h]
 13354                                  					; [disksector+EXT_BOOT.SERIAL+2]
 13355                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13356                                  		push	di
 13357                                  		push	si
 13358                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13359                                  		mov	si, disksector+2Bh
 13360                                  		;mov	si, (offset disksector+2Bh) ;
 13361                                  					; disksector+EXT_BOOT.VOL_LABEL
 13362                                  		add	di, 75		; BDS.volid
 13363                                  		rep movsb
 13364                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 13365                                  		; 10/12/2022
 13366                                  		mov	cl, 8 ; cx = 8
 13367                                  		mov	si, disksector+36h
 13368                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 13369                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 13370                                  		rep movsb
 13371                                  		pop	si
 13372                                  		pop	di
 13373                                  		pop	cx
 13374                                  		; 10/12/2022
 13375                                  		; cf = 0
 13376                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 13377                                  				; (20/09/2022)
 13378                                  		retn
 13379                                  %else
 13380                                  		; 22/12/2023 - Retro DOS v5.0
 13381                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 13382                                  		;;;		
 13383                                  mov_media_ids:
 13384 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13385 00000854 7507                    		jnz	short mmi_chk_fat
 13386 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 13387                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 13388                                  					; EXT_BOOT_SIGNATURE
 13389 0000085B EB05                    		jmp	short mmi_chk_fat32
 13390                                  mmi_chk_fat:
 13391 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 13392                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 13393                                  mmi_chk_fat32:
 13394 00000862 7543                    		jnz	short mmi_not_ext
 13395 00000864 51                      		push	cx
 13396 00000865 50                      		push	ax
 13397 00000866 57                      		push	di
 13398 00000867 56                      		push	si
 13399 00000868 1E                      		push	ds
 13400 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13401 0000086E 750C                    		jnz	short mmi_fat
 13402                                  
 13403                                  mmi_fat32:				; FAT32 file system
 13404                                  		;lds	cx, dword ptr ds:disksector+43h
 13405 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 13406 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 13407 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 13408 0000087A EB0A                    		jmp	short mmi_do
 13409                                  
 13410                                  mmi_fat:
 13411                                  		;lds	cx, dword ptr ds:disksector+27h
 13412 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 13413 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 13414 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 13415                                  mmi_do:
 13416 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13417                                  					; (BDS offset 137)
 13418 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 13419 00000890 1F                      		pop	ds
 13420 00000891 B90B00                  		mov	cx, 11
 13421 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 13422 00000897 F3A4                    		rep movsb
 13423 00000899 B108                    		mov	cl, 8		; di = di+136
 13424 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 13425 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 13426 000008A0 F3A4                    		rep movsb
 13427 000008A2 5E                      		pop	si
 13428 000008A3 5F                      		pop	di
 13429 000008A4 58                      		pop	ax
 13430 000008A5 59                      		pop	cx
 13431                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 13432                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 13433 000008A6 C3                      		retn
 13434                                  %endif
 13435                                  		;;;
 13436                                  	
 13437                                  ; ---------------------------------------------------------------------------
 13438                                  
 13439                                  mmi_not_ext:				
 13440 000008A7 F9                      		stc
 13441 000008A8 C3                      		retn
 13442                                  
 13443                                  ; =============== S U B	R O U T	I N E =======================================
 13444                                  
 13445                                  ; 15/10/2022
 13446                                  ; --------------------------------------------------------------
 13447                                  ; read in the fat sector and get the media byte from it.
 13448                                  ; input : es:di -> bds
 13449                                  ; output:
 13450                                  ;	  carry set if an error occurs, ax contains error code.
 13451                                  ;	  otherwise, ah contains media byte on exit
 13452                                  ; --------------------------------------------------------------
 13453                                  
 13454                                  readfat:	
 13455                                  		;mov	dh, 0
 13456                                  		; 10/12/2022
 13457 000008A9 30F6                    		xor	dh, dh
 13458 000008AB B90200                  		mov	cx, 2		; head 0
 13459                                  					; cylinder 0, sector 2
 13460 000008AE E80500                  		call	read_sector
 13461 000008B1 7202                    		jb	short bad_fat_ret
 13462 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 13463                                  bad_fat_ret:				
 13464 000008B5 C3                      		retn
 13465                                  
 13466                                  ; =============== S U B	R O U T	I N E =======================================
 13467                                  
 13468                                  ; 15/10/2022
 13469                                  
 13470                                  ; ---------------------------------------------------------------------------
 13471                                  ; read a single sector into the temp buffer.
 13472                                  ; perform three retries in case of error.
 13473                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 13474                                  ;		cx has sector and cylinder
 13475                                  ;		dh has head
 13476                                  ;		es:di has bds
 13477                                  ;		ds has Bios_Data
 13478                                  ;
 13479                                  ;   outputs:	carry clear
 13480                                  ;		    Bios_Data:bx point to sector
 13481                                  ;		       (note: some callers assume location of buffer)
 13482                                  ;
 13483                                  ;		carry set
 13484                                  ;		    ax has rom error code
 13485                                  ;
 13486                                  ; register bp is preserved.
 13487                                  ; ---------------------------------------------------------------------------
 13488                                  
 13489                                  ; 10/03/2019 - Retro DOS v4.0
 13490                                  ; 22/12/2023 - Retro DOS v5.0
 13491                                  
 13492                                  		; 19/10/2022
 13493                                  read_sector:
 13494 000008B6 55                      		push	bp
 13495 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 13496 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13497 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 13498                                  rd_ret:
 13499 000008C1 06                      		push	es
 13500 000008C2 1E                      		push	ds
 13501 000008C3 07                      		pop	es
 13502 000008C4 B80102                  		mov	ax, 201h
 13503 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13504                                  					; AL = number of sectors to read, CH = track, CL = sector
 13505                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13506                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13507 000008C9 07                      		pop	es
 13508 000008CA 734A                    		jnb	short okret2
 13509                                  rd_rty:
 13510 000008CC E81205                  		call	again		; reset	disk, decrement	bp, preserve ax
 13511 000008CF 7442                    		jz	short err_rd_ret
 13512                                  
 13513                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13514 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 13515                                  		;test	byte [es:di+23h], 1
 13516                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 13517                                  					; fnon_removable
 13518 000008D6 75E9                    		jnz	short rd_ret
 13519 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13520 000008DD 7510                    		jnz	short rd_skip1_dpt
 13521 000008DF 50                      		push	ax
 13522 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 13523 000008E1 C536[2D01]              		lds	si, [dpt]
 13524                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13525                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 13526                                  		;			; NORMSETTLE
 13527                                  		; 12/12/2022
 13528 000008E5 B00F                    		mov	al, 15
 13529 000008E7 864409                  		xchg	al, [si+9]
 13530                                  		; 
 13531 000008EA 1F                      		pop	ds
 13532 000008EB A2[2A01]                		mov	[save_head_sttl], al
 13533 000008EE 58                      		pop	ax
 13534                                  rd_skip1_dpt:
 13535 000008EF 06                      		push	es
 13536 000008F0 1E                      		push	ds
 13537 000008F1 07                      		pop	es
 13538 000008F2 B80102                  		mov	ax, 201h
 13539 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13540                                  					; AL = number of sectors to read, CH = track, CL = sector
 13541                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13542                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13543 000008F7 07                      		pop	es
 13544 000008F8 9C                      		pushf
 13545 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13546 000008FE 750E                    		jnz	short rd_skip2_dpt
 13547 00000900 50                      		push	ax
 13548 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 13549 00000904 1E                      		push	ds
 13550 00000905 C536[2D01]              		lds	si, [dpt]
 13551 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13552 0000090C 1F                      		pop	ds
 13553 0000090D 58                      		pop	ax
 13554                                  rd_skip2_dpt:
 13555 0000090E 9D                      		popf
 13556 0000090F 7305                    		jnb	short okret2
 13557 00000911 EBB9                    		jmp	short rd_rty
 13558                                  ; ---------------------------------------------------------------------------
 13559                                  
 13560                                  err_rd_ret:
 13561 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 13562                                  					; return error
 13563 00000915 F9                      		stc
 13564                                  
 13565                                  ; update information pertaining to last drive accessed, time of access, last
 13566                                  ; track accessed in that drive.
 13567                                  
 13568                                  okret2:
 13569 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 13570 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 13571                                  		
 13572                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13573 0000091E 26886D78                		mov	[es:di+78h], ch
 13574                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 13575                                  					; save last track accessed on this drive
 13576                                  					; preserve flags in case error occurred
 13577 00000922 9C                      		pushf
 13578 00000923 E89B04                  		call	set_tim
 13579 00000926 9D                      		popf			; restore flags
 13580 00000927 5D                      		pop	bp
 13581 00000928 C3                      		retn
 13582                                  
 13583                                  ;----------------------------------------------------------------------------
 13584                                  ;	disk open/close routines
 13585                                  ;----------------------------------------------------------------------------
 13586                                  
 13587                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 13588 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 13589 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 13590 00000930 E871FC                  		call	SetDrive	; get bds for drive
 13591                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13592 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 13593                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 13594                                  dsk_open_exit:
 13595                                  		; 10/12/2022
 13596                                  		; cf = 0			
 13597                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13598                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13599 00000937 C3                      		retn
 13600                                  ; ---------------------------------------------------------------------------
 13601                                  
 13602                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 13603 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 13604 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 13605 0000093F E862FC                  		call	SetDrive	; get bds for drive
 13606                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13607 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 13608                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13609 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 13610                                  		; 22/12/2023
 13611 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 13612                                  		;dec	word [es:di+20h]
 13613                                  exitjx:
 13614                                  		; 10/12/2022
 13615                                  		; cf = 0
 13616                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13617                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13618 0000094D C3                      		retn
 13619                                  
 13620                                  ;----------------------------------------------------------------------------
 13621                                  ;		disk removable routine
 13622                                  ;----------------------------------------------------------------------------
 13623                                  
 13624                                  		; al is	unit #
 13625                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 13626 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 13627                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13628                                  		;test	byte [es:di+BDS.flags], fnon_removable
 13629 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 13630 00000956 74F5                    		jz	short exitjx
 13631                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 13632                                  		;;jnz	short x_bus_exit ; non_rem
 13633                                  		;jnz	short non_rem	; 15/10/2022
 13634                                  		;; 10/12/2022
 13635                                  		;; cf = 0
 13636                                  		;;clc			; CF is already ZERO here
 13637                                  		;			; 15/10/2022
 13638                                  		;retn
 13639                                  ; ---------------------------------------------------------------------------
 13640                                  
 13641                                  non_rem:
 13642                                  x_bus_exit:
 13643 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 13644                                  					; return busy status
 13645 0000095A F9                      		stc
 13646                                  dsk_ret:
 13647 0000095B C3                      		retn
 13648                                  
 13649                                  ;----------------------------------------------------------------------------
 13650                                  ;		disk i/o routines
 13651                                  ;----------------------------------------------------------------------------
 13652                                  
 13653                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 13654                                  		;mov	word [wrtverify], 103h
 13655                                  		; 19/10/2022
 13656 0000095C C706[2001]0301          		mov	word [rflag], 103h
 13657                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 13658 00000962 EB06                    		jmp	short dsk_cl
 13659                                  ; ---------------------------------------------------------------------------
 13660                                  
 13661                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 13662                                  		;mov	word [wrtverify], 3
 13663                                  		; 19/10/2022
 13664 00000964 C706[2001]0300          		mov	word [rflag], 3
 13665                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 13666                                  dsk_cl:
 13667 0000096A E8A400                  		call	diskio		; romwrite
 13668                                  ; ---------------------------------------------------------------------------
 13669                                  
 13670                                  dsk_io:
 13671 0000096D 73EC                    		jnb	short dsk_ret
 13672 0000096F E965F7                  		jmp	bc_err_cnt
 13673                                  ; ---------------------------------------------------------------------------
 13674                                  
 13675                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 13676 00000972 E89700                  		call	diskrd
 13677 00000975 EBF6                    		jmp	short dsk_io
 13678                                  
 13679                                  ; =============== S U B	R O U T	I N E =======================================
 13680                                  
 13681                                  ; 15/10/2022
 13682                                  ; 10/03/2019 - Retro DOS v4.0
 13683                                  ; 22/12/2023 - Retro DOS v5.0
 13684                                  
 13685                                  ;-----------------------------------------------------------
 13686                                  ; miscellaneous odd jump routines. 
 13687                                  ; moved out of mainline for speed.
 13688                                  
 13689                                  ; if we have a system where we have virtual drives, we need 
 13690                                  ; to prompt the user to place the correct disk in the drive.
 13691                                  ;
 13692                                  ;	assume es:di -> bds, ds:->Bios_Data
 13693                                  ;-----------------------------------------------------------
 13694                                  
 13695                                  		; 19/10/2022
 13696                                  checksingle:
 13697 00000977 50                      		push	ax
 13698 00000978 53                      		push	bx
 13699                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13700 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 13701                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 13702                                  
 13703                                  ; if hard drive, cannot change disk.
 13704                                  ; if current owner of physical drive, no need to change diskette.
 13705                                  
 13706 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 13707 00000980 7573                    		jnz	short singleret
 13708 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 13709                                  					; is there a drive sharing this	physical drive?
 13710 00000985 746E                    		jz	short singleret
 13711                                  
 13712                                  ; look for the previous owner of this physical drive
 13713                                  ; and reset its ownership flag.
 13714                                  
 13715 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13716                                  					; get physical drive number
 13717 0000098B 06                      		push	es		; preserve pointer to current bds
 13718 0000098C 57                      		push	di
 13719 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 13720                                  scan_list:
 13721 00000991 26384504                		cmp	[es:di+4], al
 13722 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 13723 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 13724                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13725 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 13726                                  		;test	[es:di+23h], bl
 13727 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 13728 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 13729                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 13730 000009A3 5F                      		pop	di		; restore pointer to current bds
 13731 000009A4 07                      		pop	es
 13732 000009A5 26085D3F                		or	[es:di+3Fh], bl
 13733                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 13734                                  
 13735                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 13736                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 13737                                  ; in this case.
 13738 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 13739 000009AE 7517                    		jnz	short not_fsetowner
 13740                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 13741 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 13742 000009B5 753E                    		jnz	short singleret
 13743 000009B7 268A4505                		mov	al, [es:di+5]
 13744                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 13745                                  					; get the DOS drive letter
 13746 000009BB 06                      		push	es
 13747 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 13748 000009C0 26A20405                		mov	[es:LSTDRV], al
 13749                                  		;mov	es:504h, al	; [es:LSTDRV]
 13750                                  					; set up sdsb
 13751 000009C4 07                      		pop	es		; restore bds pointer
 13752 000009C5 EB2E                    		jmp	short singleret
 13753                                  ; ---------------------------------------------------------------------------
 13754                                  
 13755                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 13756                                  ; we now check to see if we are in a single drive system and the application
 13757                                  ; has "cleverly" diddled the sdsb
 13758                                  
 13759                                  not_fsetowner:
 13760 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 13761 000009CC 7517                    		jnz	short ignore_sdsb
 13762 000009CE 50                      		push	ax
 13763 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 13764 000009D3 88C4                    		mov	ah, al
 13765 000009D5 06                      		push	es
 13766 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 13767 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 13768                                  		;xchg	al, es:504h	; [es:LSTDRV]
 13769                                  					; then swap(curr_drv,req_drv)
 13770 000009DF 07                      		pop	es
 13771 000009E0 38C4                    		cmp	ah, al		; else
 13772 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 13773 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 13774                                  ignore_sdsb:
 13775 000009E5 E8B310                  		call	swpdsk
 13776 000009E8 EB0B                    		jmp	short singleret
 13777                                  ; ---------------------------------------------------------------------------
 13778                                  
 13779                                  scan_skip:
 13780 000009EA 26C43D                  		les	di, [es:di]
 13781                                  		;les	di, es:[di]	; [es:di+BDS.link]
 13782                                  					; go to	next bds
 13783 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 13784 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 13785 000009F2 F9                      		stc
 13786 000009F3 5F                      		pop	di		; restore current bds
 13787 000009F4 07                      		pop	es
 13788                                  singleret:
 13789 000009F5 5B                      		pop	bx
 13790 000009F6 58                      		pop	ax
 13791 000009F7 C3                      		retn
 13792                                  
 13793                                  ; 22/12/2023
 13794                                  %if 0
 13795                                  ; ---------------------------------------------------------------------------
 13796                                  
 13797                                  baddrive:
 13798                                  		mov	al, 8		; sector not found
 13799                                  		jmp	short baddrive_ret
 13800                                  %endif
 13801                                  
 13802                                  ; ---------------------------------------------------------------------------
 13803                                  
 13804                                  unformatteddrive:
 13805 000009F8 B007                    		mov	al, 7		; unknown media
 13806                                  ;baddrive_ret:
 13807 000009FA F9                      		stc
 13808                                  ; ---------------------------------------------------------------------------
 13809                                  
 13810                                  ioret:
 13811 000009FB C3                      		retn
 13812                                  
 13813                                  ; ---------------------------------------------------------------------------
 13814                                  		
 13815                                  		; 22/12/2023 - Retro DOS v5.0
 13816                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 13817                                  
 13818 000009FC 10                      LBA_Packet:	db 16			; ...
 13819                                  					; DAP buffer
 13820 000009FD 00                                      db 0
 13821 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 13822 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 13823 00000A04 00000000                dap_lba_value:	dd 0			; ...
 13824 00000A08 00000000                		dd 0
 13825                                  
 13826                                  ; ---------------------------------------------------------------------------
 13827                                  
 13828                                  ; 15/10/2022
 13829                                  
 13830                                  ; ---------------------------------------------------------------------------
 13831                                  ;	disk i/o handler
 13832                                  ;
 13833                                  ;	al = drive number (0-6)
 13834                                  ;	ah = media descriptor
 13835                                  ;	cx = sector count
 13836                                  ;	dx = first sector (low)
 13837                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 13838                                  ;	ds = cs
 13839                                  ;	es:di = transfer address
 13840                                  ;	[rflag]=operation (2=read, 3=write)
 13841                                  ;	[verify]=1 for verify after write
 13842                                  ;
 13843                                  ;	if successful carry flag = 0
 13844                                  ;	  else cf=1 and al contains error code
 13845                                  ; ---------------------------------------------------------------------------
 13846                                  
 13847                                  		; 12/12/2023
 13848                                  		; ds = biosdata segment (cs = bioscode segment)
 13849                                  diskrd:	
 13850                                  		;mov	ds:rflag, 2	; romread
 13851                                  		; 19/10/2022
 13852 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 13853                                  
 13854                                  ; =============== S U B	R O U T	I N E =======================================
 13855                                  
 13856                                  		; 22/12/2023 - Retro DOS v5.0
 13857                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 13858                                  ; 22/12/2023
 13859                                  %if 0
 13860                                  		; 19/10/2022
 13861                                  diskio:
 13862                                  		mov	bx, di		; es:bx	= transfer address
 13863                                  		mov	[xfer_seg], es	; save transfer	segment
 13864                                  		call	SetDrive
 13865                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 13866                                  		mov	[medbyt], al
 13867                                  		;jcxz	short ioret
 13868                                  		jcxz	ioret
 13869                                  
 13870                                  ; see if the media is formatted or not by checking the flags field in
 13871                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 13872                                  ; go to the error exit at label unformatteddrive.
 13873                                  
 13874                                  		test	byte [es:di+24h], 2
 13875                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 13876                                  					; unformatted_media
 13877                                  		jnz	short unformatteddrive
 13878                                  		mov	[seccnt], cx	; save sector count
 13879                                  		mov	[spsav], sp	; save sp
 13880                                  
 13881                                  ; ensure that we are trying to access valid sectors on the drive
 13882                                  
 13883                                  		mov	ax, dx
 13884                                  		xor	si, si ; 0
 13885                                  		add	dx, cx
 13886                                  		;adc	si, 0
 13887                                  		; 02/09/2023 (PCDOS 7.1)
 13888                                  		rcl	si, 1
 13889                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 13890                                  					; 32 bit sector ?
 13891                                  		jz	short sanity32
 13892                                  		;cmp	si, 0
 13893                                  		; 02/09/2023
 13894                                  		or	si, si
 13895                                  		jnz	short baddrive
 13896                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 13897                                  		ja	short baddrive
 13898                                  		jmp	short sanityok
 13899                                  ; ---------------------------------------------------------------------------
 13900                                  
 13901                                  sanity32:
 13902                                  		add	si, [start_sec_h]
 13903                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 13904                                  		jb	short sanityok
 13905                                  		ja	short baddrive
 13906                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 13907                                  		ja	short baddrive
 13908                                  sanityok:
 13909                                  		mov	dx, [start_sec_h]
 13910                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 13911                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 13912                                  
 13913                                  ; now dx;ax have the physical first sector.
 13914                                  ; since the following procedures is going to destroy ax, let's
 13915                                  ; save it temporarily to saved_word.
 13916                                  
 13917                                  		mov	[saved_word], ax ; save the sector number (low)
 13918                                  
 13919                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 13920                                  ; will do it because we will skip the set up stuff with hard disks.
 13921                                  
 13922                                  		push	es
 13923                                  		;mov	es, [zeroseg]
 13924                                  		; 02/09/2023
 13925                                  		xor	si, si ; 0
 13926                                  		mov	es, si
 13927                                  		les	si, [es:DSKADR]
 13928                                  		;les	si, es:78h	; [es:DSKADR]
 13929                                  					; current disk parm table
 13930                                  		mov	[dpt], si
 13931                                  		mov	[dpt+2], es
 13932                                  		pop	es
 13933                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13934                                  					; fnon_removable
 13935                                  		jnz	short skip_setup
 13936                                  		call	checksingle
 13937                                  
 13938                                  ; check to see if we have previously noted a change line. the routine
 13939                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 13940                                  ; the proper error code.
 13941                                  
 13942                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 13943                                  		jz	short diskio_nochangeline ; brif not
 13944                                  		call	checklatchio	; will do a sneaky pop stack return
 13945                                  					; if a disk error occurs
 13946                                  diskio_nochangeline:			
 13947                                  		call	iosetup		; set up tables	and variables for i/o
 13948                                  
 13949                                  ; now the settle values are correct for the following code
 13950                                  
 13951                                  skip_setup:
 13952                                  
 13953                                  ; 32 bit sector calculation.
 13954                                  ; dx:[saved_word] = starting sector number.
 13955                                  				
 13956                                  		mov	ax, dx
 13957                                  		xor	dx, dx
 13958                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13959                                  					 ; divide by sec per track
 13960                                  		; 02/09/2023
 13961                                  		mov	cx, [es:di+13h]
 13962                                  		div	cx
 13963                                  		mov	[temp_h], ax
 13964                                  		mov	ax, [saved_word]
 13965                                  		div	cx ; 02/09/2023
 13966                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13967                                  					; now, [temp_h]:ax = track #, dx = sector
 13968                                  		;inc	dl		; sector number	is 1 based.
 13969                                  		; 18/12/2022
 13970                                  		inc	dx
 13971                                  		mov	[cursec], dl	; save current sector
 13972                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 13973                                  					; get number of	heads
 13974                                  		push	ax
 13975                                  		xor	dx, dx
 13976                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 13977                                  		div	cx
 13978                                  		mov	[temp_h], ax
 13979                                  		pop	ax
 13980                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 13981                                  		cmp	word [temp_h], 0
 13982                                  		ja	short baddrive_brdg
 13983                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 13984                                  		ja	short baddrive_brdg
 13985                                  		mov	[curhd], dl	; save current head
 13986                                  		mov	[curtrk], ax	; save current track
 13987                                  
 13988                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 13989                                  ; violations here. not true. we perform the operation as if everything is
 13990                                  ; symmetric; let the int 13 handler worry about the dma violations.
 13991                                  
 13992                                  		mov	ax, [seccnt]
 13993                                  		call	block		; (cas - call/ret)
 13994                                  		;call	done
 13995                                  		;retn
 13996                                  		; 18/12/2022
 13997                                  		jmp	done
 13998                                  %else
 13999                                  		;;;	; 22/12/2023
 14000                                  diskio:
 14001 00000A11 89FB                    		mov	bx, di		; al = drive number
 14002                                  					; cx = sector count
 14003                                  					; dx = first sector (low)
 14004                                  					; [start_sec_h] = first sector (high)
 14005                                  					;
 14006                                  					; es:bx = transfer address
 14007 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 14008 00000A17 E88AFB                  		call	SetDrive
 14009 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 14010 00000A1E A2[1F01]                		mov	[medbyt], al
 14011 00000A21 E3D8                    		jcxz	ioret
 14012                                  
 14013                                  ; see if the media is formatted or not by checking the flags field in
 14014                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 14015                                  ; go to the error exit at label unformatteddrive.
 14016                                  
 14017 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 14018                                  					; unformatted_media
 14019 00000A28 75CE                    		jnz	short unformatteddrive
 14020 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 14021 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 14022                                  
 14023                                  ; ensure that we are trying to access valid sectors on the drive
 14024                                  
 14025 00000A32 89D0                    		mov	ax, dx
 14026 00000A34 31F6                    		xor	si, si ; 0
 14027 00000A36 01CA                    		add	dx, cx
 14028 00000A38 D1D6                    		rcl	si, 1
 14029 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14030                                  					; > 32 bit sector ?
 14031 00000A3F 740E                    		jz	short sanity32
 14032 00000A41 09F6                    		or	si, si
 14033 00000A43 7506                    		jnz	short baddrive
 14034 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14035                                  		;ja	short baddrive
 14036                                  		;jmp	short sanityok
 14037                                  		; 22/12/2023
 14038 00000A49 7616                    		jna	short sanityok
 14039                                  ; 29/12/2023
 14040                                  ; 22/12/2023
 14041                                  ;%if 1
 14042                                  ; ---------------------------------------------------------------------------
 14043                                  
 14044                                  baddrive:
 14045 00000A4B B008                    		mov	al, 8		; sector not found
 14046                                  		;jmp	short baddrive_ret
 14047                                  ; ---------------------------------------------------------------------------
 14048                                  ;unformatteddrive:
 14049                                  		;mov	al, 7		; unknown media
 14050                                  baddrive_ret:
 14051 00000A4D F9                      		stc
 14052                                  ;ioret:
 14053 00000A4E C3                      		retn
 14054                                  ;%endif
 14055                                  
 14056                                  ; ---------------------------------------------------------------------------
 14057                                  
 14058                                  sanity32:
 14059 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 14060 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 14061 00000A57 7208                    		jb	short sanityok
 14062 00000A59 77F0                    		ja	short baddrive
 14063 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 14064 00000A5F 77EA                    		ja	short baddrive
 14065                                  sanityok:
 14066 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 14067 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14068 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14069                                  
 14070                                  ; now dx;ax have the physical first sector.
 14071                                  ; since the following procedures is going to destroy ax, let's
 14072                                  ; save it temporarily to saved_word.
 14073                                  
 14074 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 14075                                  
 14076                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 14077                                  ; will do it because we will skip the set up stuff with hard disks.
 14078                                  
 14079 00000A70 06                      		push	es
 14080 00000A71 31F6                    		xor	si, si ; 0
 14081 00000A73 8EC6                    		mov	es, si
 14082                                  		;les	si, dword ptr es:78h
 14083 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 14084                                  					; [es:DSKADR] - current disk parm table
 14085 00000A7A 8936[2D01]              		mov	[dpt], si
 14086 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 14087 00000A82 07                      		pop	es
 14088 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14089 00000A88 7510                    		jnz	short chk_13h_ext_flag
 14090 00000A8A E8EAFE                  		call	checksingle
 14091                                  
 14092                                  ; check to see if we have previously noted a change line. the routine
 14093                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 14094                                  ; the proper error code.
 14095                                  
 14096 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 14097 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 14098 00000A94 E8D210                  		call	checklatchio	; will do a sneaky pop stack return
 14099                                  					; if a disk error occurs
 14100                                  diskio_nochangeline:
 14101 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 14102                                  
 14103                                  chk_13h_ext_flag:
 14104 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 14105                                  					; LBA read/write flag
 14106 00000A9F 7539                    		jnz	short set_lbarw_1
 14107                                  		;jmp	skip_setup
 14108                                  		; 22/12/2023
 14109                                  ; ---------------------------------------------------------------------------
 14110                                  
 14111                                  ; now the settle values are correct for the following code
 14112                                  
 14113                                  skip_setup:
 14114                                  
 14115                                  ; 32 bit sector calculation.
 14116                                  ; dx:[saved_word] = starting sector number.
 14117                                  
 14118                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 14119 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 14120 00000AA2 31D2                    		xor	dx, dx
 14121 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14122                                  					; divide by sec per track
 14123 00000AA8 F7F1                    		div	cx
 14124 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 14125 00000AAB A1[9E04]                		mov	ax, [saved_word]
 14126 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 14127                                  					; now, bp:ax = track #, dx = sector
 14128                                  					; sector number is 1 based.
 14129 00000AB0 42                      		inc	dx
 14130 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 14131 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 14132                                  					; get number of heads
 14133                                  		; 22/12/2023
 14134                                  		;push	ax ; *
 14135 00000AB9 31D2                    		xor	dx, dx
 14136 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 14137 00000ABC F7F1                    		div	cx
 14138 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 14139                                  		;pop	ax ; *
 14140 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 14141 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 14142                                  		;pop	bp ; ! ; 22/12/2023
 14143                                  		;jnz	short baddrive_brdg
 14144                                  		; 22/12/2023
 14145 00000AC3 7586                    		jnz	short baddrive
 14146                                  
 14147                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 14148                                  		;jnb	short baddrive_brdg
 14149                                  		; 22/12/2023
 14150 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 14151 00000AC8 7381                    		jnb	short baddrive 
 14152                                  
 14153 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 14154 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 14155                                  
 14156                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 14157                                  ; violations here. not true. we perform the operation as if everything is
 14158                                  ; symmetric; let the int 13 handler worry about the dma violations.
 14159                                  
 14160 00000AD1 A1[2201]                		mov	ax, [seccnt]
 14161 00000AD4 E81F01                  		call	block
 14162                                  		;call	done
 14163                                  		;retn
 14164                                  		; 22/12/2023
 14165 00000AD7 E9E500                  		jmp	done
 14166                                  		
 14167                                  ; ---------------------------------------------------------------------------
 14168                                  
 14169                                  set_lbarw_1:
 14170 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 14171                                  					 ; (logical dos drive/partition)
 14172 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 14173                                  					    ; logical dos partition
 14174 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 14175 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 14176 00000AE9 7408                    		jz	short set_lbarw_2
 14177 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14178 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14179                                  
 14180                                  set_lbarw_2:
 14181 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 14182 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 14183 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 14184 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 14185 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 14186 00000B08 A1[2201]                		mov	ax, [seccnt]
 14187 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 14188 00000B0F BD0500                  		mov	bp, 5
 14189 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14190 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 14191                                  
 14192                                  set_lbarw_3:
 14193 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14194 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14195 00000B22 80C440                  		add	ah, 40h
 14196 00000B25 30C0                    		xor	al, al
 14197 00000B27 1E                      		push	ds
 14198 00000B28 0E                      		push	cs
 14199 00000B29 1F                      		pop	ds
 14200 00000B2A BE[FC09]                		mov	si, LBA_Packet
 14201 00000B2D CD13                    		int	13h		; LBA read/write
 14202 00000B2F 1F                      		pop	ds
 14203 00000B30 731A                    		jnc	short set_lbarw_7
 14204 00000B32 E8AC02                  		call	again
 14205                                  set_lbarw_9:
 14206 00000B35 7503                    		jnz	short set_lbarw_4
 14207 00000B37 E92B02                  		jmp	harderr
 14208                                  ; ---------------------------------------------------------------------------
 14209                                  
 14210                                  set_lbarw_4:
 14211                                  ;set_lbarw_9:	; 22/12/2023
 14212 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 14213 00000B3D 7505                    		jnz	short set_lbarw_5
 14214 00000B3F BD0100                  		mov	bp, 1
 14215                                  		;jmp	short set_lbarw_6
 14216                                  		; 17/04/2024
 14217 00000B42 EBD6                    		jmp	short set_lbarw_3
 14218                                  ; ---------------------------------------------------------------------------
 14219                                  
 14220                                  set_lbarw_5:
 14221                                  set_lbarw_10:	; 22/12/2023
 14222 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14223                                  set_lbarw_6:
 14224                                  set_lbarw_11:
 14225 00000B4A EBCE                    		jmp	short set_lbarw_3
 14226                                  ; ---------------------------------------------------------------------------
 14227                                  
 14228                                  set_lbarw_7:
 14229 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 14230 00000B52 7523                    		jnz	short set_lbarw_12
 14231 00000B54 B444                    		mov	ah, 44h
 14232 00000B56 1E                      		push	ds
 14233 00000B57 0E                      		push	cs
 14234 00000B58 1F                      		pop	ds
 14235 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 14236                                  					;  (DL - drive, [SI - disk address packet)
 14237 00000B5B 1F                      		pop	ds
 14238 00000B5C 7319                    		jnc	short set_lbarw_12
 14239 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 14240 00000B61 7506                    		jnz	short set_lbarw_8
 14241 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14242                                  ;set_lbarw_8:
 14243 00000B67 740E                    		jz	short set_lbarw_12
 14244                                  set_lbarw_8:
 14245 00000B69 E8CF07                  		call	ResetDisk
 14246 00000B6C 80FC11                  		cmp	ah, 11h
 14247 00000B6F 74D9                    		jz	short set_lbarw_11
 14248 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 14249                                  		;jnz	short set_lbarw_9
 14250                                  		;jmp	harderr
 14251                                  		; 22/12/2023
 14252 00000B75 EBBE                    		jmp	short set_lbarw_9
 14253                                  
 14254                                  ; ---------------------------------------------------------------------------
 14255                                  ;		; 22/12/2023
 14256                                  ;set_lbarw_9:
 14257                                  ;		cmp	ah, 0CCh
 14258                                  ;		jnz	short set_lbarw_10
 14259                                  ;		mov	bp, 1
 14260                                  ;		jmp	short set_lbarw_11
 14261                                  ; ---------------------------------------------------------------------------
 14262                                  ;		; 22/12/2023
 14263                                  ;set_lbarw_10:
 14264                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14265                                  ;set_lbarw_11:
 14266                                  ;		jmp	short set_lbarw_3
 14267                                  ; ---------------------------------------------------------------------------
 14268                                  
 14269                                  set_lbarw_12:
 14270 00000B77 31C0                    		xor	ax, ax
 14271                                  skip_dpt_setting:	; 23/12/2023
 14272 00000B79 C3                      		retn
 14273                                  		;;;	; 22/12/2023
 14274                                  %endif
 14275                                  
 14276                                  ; ---------------------------------------------------------------------------
 14277                                  
 14278                                  		; 22/12/2023
 14279                                  ;baddrive_brdg:
 14280                                  		;jmp	baddrive
 14281                                  
 14282                                  ; =============== S U B	R O U T	I N E =======================================
 14283                                  
 14284                                  ;--------------------------------------------------------------
 14285                                  ; set the drive-last-accessed flag for diskette only.
 14286                                  ; we know that the hard disk will not be removed.
 14287                                  ; es:di -> current bds.
 14288                                  ; ds -> Bios_Data
 14289                                  ; ax,cx,si are destroyed.
 14290                                  ;--------------------------------------------------------------
 14291                                  
 14292                                  		; 23/12/2023 - Retro DOS v5.0
 14293                                  
 14294                                  		; 19/10/2022
 14295                                  iosetup:
 14296 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14297 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 14298                                  
 14299                                  ; determine proper head settle values
 14300                                  
 14301 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14302 00000B86 75F1                    		jnz	short skip_dpt_setting
 14303 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 14304 00000B8B 1E                      		push	ds
 14305 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14306 00000B90 884404                  		mov	[si+4],	al
 14307                                  		
 14308                                  		;; 23/12/2023
 14309                                  		;mov	ah, al
 14310                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14311                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 14312                                  		;pop	ds
 14313                                  		;mov	[motorstartup], al
 14314                                  		;mov	[save_eot], ah
 14315                                  		; 06/04/2024
 14316 00000B93 8A640A                  		mov	ah,[si+10]
 14317 00000B96 1F                      		pop	ds
 14318 00000B97 8826[2601]              		mov	[motorstartup], ah
 14319 00000B9B A2[2B01]                		mov	[save_eot], al
 14320                                  
 14321                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 14322                                  ; motor start time to 4. this checking for every i/o is going to affect
 14323                                  ; performance across the board, but is necessary!!
 14324                                  
 14325 00000B9E 1E                      		push	ds
 14326 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14327                                  		; 23/12/2023  - Retro DOS v5.0
 14328 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 14329                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14330                                  					; ffSmall
 14331 00000BA8 7505                    		jnz	short motor_start_ok
 14332 00000BAA B004                    		mov	al, 4
 14333 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14334                                  motor_start_ok:
 14335                                  
 14336                                  ; ds:si now points to disk parameter table.
 14337                                  ; get current settle and set fast settle
 14338                                  
 14339                                  		;xor	al, al
 14340                                  		;inc	al		; ibm wants fast settle	to be 1
 14341                                  		; 18/12/2022
 14342 00000BAF 31C0                    		xor	ax, ax
 14343 00000BB1 40                      		inc	ax
 14344 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14345                                  					; get settle and set up	for fast
 14346 00000BB5 1F                      		pop	ds
 14347 00000BB6 A2[2701]                		mov	[settlecurrent], al
 14348 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 14349                                  					; someone has diddled the settle
 14350 00000BBB A2[2801]                		mov	[settleslow], al
 14351                                  		; 23/12/2023
 14352                                  ;skip_dpt_setting:
 14353 00000BBE C3                      		retn
 14354                                  
 14355                                  ; =============== S U B	R O U T	I N E =======================================
 14356                                  
 14357                                  ;--------------------------------------------------------------
 14358                                  ; set time of last access, and reset default values in the dpt.
 14359                                  ;
 14360                                  ;	  note: trashes (at least) si
 14361                                  ;--------------------------------------------------------------
 14362                                  
 14363                                  		; 23/12/2023 - Retro DOS v5.0
 14364                                  
 14365                                  		; 19/10/2022
 14366                                  done:		
 14367                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14368                                  					; fnon_removable
 14369                                  		; 23/12/2023
 14370 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14371 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 14372 00000BC6 E8F801                  		call	set_tim
 14373                                  ;diddleback:
 14374                                  ; 09/12/2022
 14375                                  diddle_back:
 14376 00000BC9 9C                      		pushf
 14377 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14378 00000BCF 7523                    		jnz	short nodiddleback
 14379 00000BD1 50                      		push	ax
 14380 00000BD2 06                      		push	es
 14381 00000BD3 C436[2D01]              		les	si, [dpt]
 14382 00000BD7 A0[2B01]                		mov	al, [save_eot]
 14383 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 14384 00000BDE A0[2701]                		mov	al, [settlecurrent]
 14385 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 14386 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14387 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 14388 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 14389 00000BF2 07                      		pop	es
 14390 00000BF3 58                      		pop	ax
 14391                                  nodiddleback:
 14392 00000BF4 9D                      		popf
 14393                                  ddbx:
 14394 00000BF5 C3                      		retn
 14395                                  
 14396                                  ; =============== S U B	R O U T	I N E =======================================
 14397                                  
 14398                                  ;--------------------------------------------------------------
 14399                                  ;read the number of sectors specified in ax,
 14400                                  ;handling track boundaries
 14401                                  ;es:di -> bds for this drive
 14402                                  ;--------------------------------------------------------------
 14403                                  
 14404                                  		; 23/12/2023 - Retro DOS v5.0
 14405                                  
 14406                                  		; 19/10/2022
 14407                                  block:	
 14408 00000BF6 09C0                    		or	ax, ax
 14409 00000BF8 74FB                    		jz	short ddbx
 14410                                  		; 23/12/2023
 14411 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14412                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14413                                  					    ; fnon_removable
 14414 00000BFF 740D                    		jz	short block_floppy
 14415                                  
 14416                                  ; check	to see if multi	track operation	is allowed. if not
 14417                                  ; we have to go	to the block_floppy below to break up the operation.
 14418                                  
 14419 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 14420                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 14421 00000C06 7406                    		jz	short block_floppy
 14422 00000C08 E82800                  		call	Disk
 14423 00000C0B 31C0                    		xor	ax, ax
 14424 00000C0D C3                      		retn
 14425                                  ; ---------------------------------------------------------------------------
 14426                                  
 14427                                  block_floppy:
 14428                                  
 14429                                  ; read at most 1 track worth. perform minimization at sector / track
 14430                                  
 14431 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 14432                                  		;inc	cl
 14433                                  		; 23/12/2023
 14434 00000C12 41                      		inc	cx
 14435 00000C13 2A0E[3101]              		sub	cl, [cursec]
 14436 00000C17 30ED                    		xor	ch, ch
 14437 00000C19 39C8                    		cmp	ax, cx
 14438 00000C1B 7302                    		jnb	short gotmin
 14439 00000C1D 89C1                    		mov	cx, ax
 14440                                  gotmin:
 14441                                  
 14442                                  ; ax is the requested number of sectors to read
 14443                                  ; cx is the number that we can do on this track
 14444                                  
 14445 00000C1F 50                      		push	ax
 14446 00000C20 51                      		push	cx
 14447 00000C21 89C8                    		mov	ax, cx
 14448 00000C23 E80D00                  		call	Disk
 14449 00000C26 59                      		pop	cx
 14450 00000C27 58                      		pop	ax
 14451                                  
 14452                                  ; cx is the number of sectors just transferred
 14453                                  
 14454 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 14455 00000C2A D0E1                    		shl	cl, 1
 14456 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 14457 00000C2E EBC6                    		jmp	short block
 14458                                  dskerr_brdg:
 14459 00000C30 E9F400                  		jmp	dskerr
 14460                                  
 14461                                  ; =============== S U B	R O U T	I N E =======================================
 14462                                  
 14463                                  ; 15/10/2022
 14464                                  
 14465                                  ;--------------------------------------------------------------
 14466                                  ;perform disk i/o with retries
 14467                                  ; al = number of sectors (1-8, all on one track)
 14468                                  ; es:di point to drive parameters
 14469                                  ; xfer_seg:bx = transfer address 
 14470                                  ;		(must not cross a 64k physical boundary)
 14471                                  ; [rflag] = 2 if read, 3 if write
 14472                                  ; [verify] = 0 for normal, 1 for verify after write
 14473                                  ;--------------------------------------------------------------
 14474                                  
 14475                                  		; 18/04/2024
 14476                                  		; 23/12/2023 - Retro DOS v5.0
 14477                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 14478                                  
 14479                                  		; 19/10/2022
 14480                                  Disk:
 14481                                  
 14482                                  ; Check for hard disk format and
 14483                                  ; if TRUE then set max error count to 2
 14484                                  
 14485 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 14486                                  					; set up retry count
 14487                                  		; 18/04/2024
 14488                                  		;; 23/12/2023
 14489                                  		;mov	cl, [es:di+3Fh]
 14490                                  		;and	cx, 1
 14491 00000C36 26F6453F01              		test	byte [es:di+3Fh], 1
 14492                                  		;test	byte [es:di+23h], 1 
 14493                                  					; [es:di+BDS.flags], fnon_removable
 14494 00000C3B 7408                    		jz	short GetRdWrInd
 14495 00000C3D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 14496 00000C40 7403                    		jz	short GetRdWrInd
 14497 00000C42 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 14498                                  GetRdWrInd:				
 14499 00000C45 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14500 00000C49 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 14501 00000C4D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14502                                  ;retry:
 14503                                  ; 09/12/2022
 14504                                  _retry:
 14505 00000C51 50                      		push	ax
 14506 00000C52 8B16[3301]              		mov	dx, [curtrk]
 14507                                  		;; 23/12/2023
 14508                                  		;jcxz	disk_not_mini
 14509                                  		; 18/04/2024
 14510 00000C56 26F6453F01              		test	byte [es:di+3Fh], 1
 14511                                  		;test	byte [es:di+23h], 1
 14512 00000C5B 740B                    		jz	short disk_not_mini
 14513                                  
 14514                                  		; 23/12/2023
 14515 00000C5D 26837D7901              		cmp	word [es:di+79h], 1
 14516                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 14517                                  					; is this a mini disk? ((logical dos partition))
 14518 00000C62 7504                    		jnz	short disk_not_mini ; no. continue to next.
 14519                                  		; 23/12/2023
 14520 00000C64 2603557B                		add     dx, [es:di+7Bh]
 14521                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 14522                                  					; add hidden trks.
 14523                                  disk_not_mini:
 14524 00000C68 D0CE                    		ror	dh, 1
 14525 00000C6A D0CE                    		ror	dh, 1
 14526 00000C6C 0A36[3101]              		or	dh, [cursec]
 14527 00000C70 89D1                    		mov	cx, dx
 14528 00000C72 86CD                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 14529 00000C74 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 14530 00000C78 268A5504                		mov	dl, [es:di+4]	; physical drive number
 14531                                  					; [es:di+BDS.drivenum]
 14532                                  		; 23/12/2023
 14533 00000C7C 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 14534                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 14535 00000C81 7411                    		jz	short do_fast	; hard files use fast speed
 14536                                  
 14537                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 14538                                  ; this helps when we have just done a reset disk operation and the head has
 14539                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 14540                                  
 14541 00000C83 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 14542                                  		;jz	short do_writej
 14543                                  		; 23/12/2023
 14544 00000C88 746A                    		jz	short do_write
 14545 00000C8A 80FC02                  		cmp	ah, 2		; romread
 14546 00000C8D 7405                    		jz	short do_fast
 14547 00000C8F 80FC04                  		cmp	ah, 4		; romverify
 14548                                  		;jz	short do_fast
 14549                                  		; 23/12/2023
 14550 00000C92 7560                    		jnz	short do_write
 14551                                  ;do_writej:
 14552                                  
 14553                                  ; reads always fast, unless we have just done a disk reset operation
 14554                                  			
 14555                                  		;jmp	short do_write	; reads	always fast
 14556                                  ; ---------------------------------------------------------------------------
 14557                                  
 14558                                  do_fast:
 14559 00000C94 E80501                  		call	fastspeed	; change settle	mode
 14560                                  testerr:
 14561 00000C97 7297                    		jb	short dskerr_brdg
 14562                                  
 14563                                  		; 23/12/2023 Retro DOS v5.0
 14564                                  		; (PCDOS 7.1 IBMBIO.COM)
 14565 00000C99 83FD05                  		cmp	bp, 5		; is there retry ?
 14566 00000C9C 7505                    		jnz	short testerror	; yes
 14567 00000C9E 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 14568 00000CA1 748D                    		jz	short dskerr_brdg
 14569                                  testerror:
 14570                                  
 14571                                  ; set drive and track of last access
 14572                                  
 14573 00000CA3 8816[7600]              		mov	[step_drv], dl
 14574                                  		; 23/12/2023
 14575 00000CA7 26886D78                		mov	[es:di+78h], ch
 14576                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14577                                  no_set:
 14578                                  		;cmp	word [wrtverify], 103h
 14579 00000CAB 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 14580 00000CB1 7452                    		jz	short doverify
 14581                                  noverify:
 14582 00000CB3 58                      		pop	ax
 14583                                  
 14584                                  ; check the flags word in the bds to see if the drive is non removable
 14585                                  ; if not we needn't do anything special
 14586                                  ; if it is a hard disk then check to see if multi-track operation
 14587                                  ; is specified. if specified we don't have to calculate for the next
 14588                                  ; track since we are already done. so we can go to the exit of this routine.
 14589                                  
 14590                                  		; 23/12/2023
 14591 00000CB4 26F6453F01              		test	byte [es:di+3Fh], 1
 14592                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14593                                  					; fnon_removable
 14594 00000CB9 7407                    		jz	short its_removable
 14595 00000CBB F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 14596 00000CC0 7530                    		jnz	short disk_ret
 14597                                  its_removable:
 14598 00000CC2 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 14599 00000CC5 30E4                    		xor	ah, ah
 14600 00000CC7 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 14601 00000CCB 00C1                    		add	cl, al
 14602 00000CCD 880E[3101]              		mov	[cursec], cl
 14603 00000CD1 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 14604                                  					; see if sector/track limit reached
 14605 00000CD5 761B                    		jbe	short disk_ret
 14606 00000CD7 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 14607 00000CDC 8A36[3201]              		mov	dh, [curhd]
 14608 00000CE0 FEC6                    		inc	dh
 14609 00000CE2 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 14610 00000CE6 7206                    		jb	short noxor
 14611 00000CE8 30F6                    		xor	dh, dh
 14612 00000CEA FF06[3301]              		inc	word [curtrk]
 14613                                  noxor:
 14614 00000CEE 8836[3201]              		mov	[curhd], dh
 14615                                  disk_ret:
 14616 00000CF2 F8                      		clc
 14617 00000CF3 C3                      		retn
 14618                                  ; ---------------------------------------------------------------------------
 14619                                  
 14620                                  ; 15/10/2022
 14621                                  
 14622                                  ; 24/12/2023 - Retro DOS v5.0
 14623                                  
 14624                                  ;--------------------------------------------------------------
 14625                                  ; the request is for write. determine if we are talking about
 14626                                  ; the same track and drive. if so, use the fast speed.
 14627                                  ;--------------------------------------------------------------
 14628                                  
 14629                                  do_write:
 14630 00000CF4 3A16[7600]              		cmp	dl, [step_drv]
 14631 00000CF8 7506                    		jnz	short do_norm	; we have changed drives
 14632                                  		; 24/12/2023
 14633 00000CFA 263A6D78                		cmp	ch, [es:di+78h]
 14634                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 14635 00000CFE 7494                    		jz	short do_fast	; we are still on the same track
 14636                                  do_norm:
 14637 00000D00 E87500                  		call	normspeed
 14638 00000D03 EB92                    		jmp	short testerr
 14639                                  ; ---------------------------------------------------------------------------
 14640                                  
 14641                                  ;--------------------------------------------------------------
 14642                                  ; we have a verify request also. get state info and go verify
 14643                                  ;--------------------------------------------------------------
 14644                                  
 14645                                  doverify:
 14646 00000D05 58                      		pop	ax
 14647 00000D06 50                      		push	ax
 14648 00000D07 B404                    		mov	ah, 4
 14649 00000D09 E89000                  		call	fastspeed
 14650 00000D0C 73A5                    		jnb	short noverify
 14651                                  
 14652                                  ; check the error returned in ah to see if it is a soft ecc error.
 14653                                  ; if it is not we needn't do anything special. if it is a soft
 14654                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 14655                                  ; this retry count becomes 0 then we just ignore the error and go to
 14656                                  ; no_verify but if we can still try then we call the routine to reset
 14657                                  ; the disk and go to dskerr1 to retry the operation.
 14658                                  
 14659 00000D0E 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 14660 00000D11 750B                    		jnz	short not_softecc_err
 14661 00000D13 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14662 00000D17 749A                    		jz	short noverify	; no more retry
 14663 00000D19 E81F06                  		call	ResetDisk	; reset	disk
 14664 00000D1C EB3E                    		jmp	short dskerr1	; retry
 14665                                  ; ---------------------------------------------------------------------------
 14666                                  
 14667                                  not_softecc_err:			; other error.
 14668 00000D1E E81A06                  		call	ResetDisk
 14669 00000D21 FF0E[A304]              		dec	word [vretry_cnt]
 14670 00000D25 EB1C                    		jmp	short dskerr0
 14671                                  ; ---------------------------------------------------------------------------
 14672                                  
 14673                                  ;--------------------------------------------------------------
 14674                                  ; need to special case the change-line error ah=06h.
 14675                                  ; if we get this, we need to return it.
 14676                                  ;--------------------------------------------------------------
 14677                                  
 14678                                  dskerr:
 14679 00000D27 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 14680 00000D2C 7403                    		jz	short dskerr_nochangeline ; brif not
 14681 00000D2E E8BE0E                  		call	checkio
 14682                                  dskerr_nochangeline:
 14683 00000D31 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 14684 00000D36 7508                    		jnz	short dochkagain ; no more retry.
 14685 00000D38 BD0100                  		mov	bp, 1
 14686 00000D3B C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 14687                                  dochkagain:
 14688 00000D40 E89E00                  		call	again
 14689                                  dskerr0:
 14690 00000D43 7420                    		jz	short harderr
 14691                                  		; 24/12/2023
 14692 00000D45 26F6453F01              		test	byte [es:di+3Fh], 1
 14693                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14694                                  					; fnon_removable
 14695 00000D4A 7505                    		jnz	short skip_timeout_chk
 14696 00000D4C 80FC80                  		cmp	ah, 80h		; timeout?
 14697 00000D4F 7414                    		jz	short harderr
 14698                                  skip_timeout_chk:
 14699 00000D51 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 14700 00000D54 740A                    		jz	short write_fault_err ;	then, don't retry.
 14701 00000D56 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 14702                                  					; set soft_ecc_cnt back	to maxerr
 14703                                  dskerr1:
 14704 00000D5C 58                      		pop	ax		; restore sector count
 14705                                  		;jmp	retry
 14706                                  		; 09/12/2022
 14707 00000D5D E9F1FE                  		jmp	_retry
 14708                                  ; ---------------------------------------------------------------------------
 14709                                  
 14710                                  write_fault_err:
 14711 00000D60 BD0100                  		mov	bp, 1		; just retry only once
 14712                                  					; for write fault error.
 14713 00000D63 EBF7                    		jmp	short dskerr1
 14714                                  
 14715                                  		; fall into harderr
 14716                                  ; ---------------------------------------------------------------------------
 14717                                  
 14718                                  ; entry point for routines that call maperror themselves
 14719                                  
 14720                                  harderr:
 14721 00000D65 E84100                  		call	maperror
 14722                                  harderr2:
 14723 00000D68 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 14724                                  					; force a media check through rom
 14725 00000D6D 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 14726 00000D71 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 14727                                  
 14728                                  ; since we are performing a non-local goto, restore the disk parameters
 14729                                  
 14730                                  		;jmp	diddleback
 14731                                  		; 09/12/2022
 14732 00000D75 E951FE                  		jmp	diddle_back
 14733                                  
 14734                                  ; =============== S U B	R O U T	I N E =======================================
 14735                                  
 14736                                  ; change settle value from settlecurrent to whatever is appropriate
 14737                                  ; note that this routine is never called for a fixed disk.
 14738                                  
 14739                                  		; 19/10/2022
 14740                                  normspeed:
 14741 00000D78 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14742 00000D7D 751D                    		jnz	short fastspeed
 14743 00000D7F 06                      		push	es
 14744 00000D80 50                      		push	ax
 14745 00000D81 A0[2801]                		mov	al, [settleslow]
 14746 00000D84 C436[2D01]              		les	si, [dpt]	; current disk parm table
 14747 00000D88 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14748 00000D8C 58                      		pop	ax
 14749 00000D8D 07                      		pop	es
 14750 00000D8E E80B00                  		call	fastspeed
 14751                                  		; 24/12/2023
 14752                                  		;push	es
 14753                                  		;les	si, [dpt]
 14754                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14755                                  		;			; 1 is fast settle value
 14756                                  		;pop	es
 14757 00000D91 1E                      		push	ds
 14758 00000D92 C536[2D01]              		lds	si, [dpt]
 14759 00000D96 C6440901                		mov	byte [si+9], 1
 14760 00000D9A 1F                      		pop	ds
 14761                                  
 14762 00000D9B C3                      		retn
 14763                                  
 14764                                  ; =============== S U B	R O U T	I N E =======================================
 14765                                  
 14766                                  ; if the drive has been marked as too big (i.e. starting sector of the
 14767                                  ; partition is > 16 bits, then always return drive not ready.
 14768                                  
 14769                                  		; 24/12/2023 - Retro DOS v5.0
 14770                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 14771                                  fastspeed:
 14772                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 14773                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 14774                                  		;			; ftoobig
 14775                                  		;jnz	short notready
 14776 00000D9C 06                      		push	es
 14777 00000D9D 8E06[A804]              		mov	es, [xfer_seg]
 14778 00000DA1 CD13                    		int	13h		; DISK -
 14779 00000DA3 8C06[A804]              		mov	[xfer_seg], es
 14780 00000DA7 07                      		pop	es
 14781 00000DA8 C3                      		retn
 14782                                  ; ---------------------------------------------------------------------------
 14783                                  ;		; 24/12/2023
 14784                                  ;notready:
 14785                                  		;stc
 14786                                  		;mov	ah, 80h
 14787                                  		;retn
 14788                                  
 14789                                  ; =============== S U B	R O U T	I N E =======================================
 14790                                  
 14791                                  ; map error returned by rom in ah into corresponding code to be returned to
 14792                                  ; dos in al. trashes di. guaranteed to set carry.
 14793                                  
 14794                                  maperror:
 14795 00000DA9 51                      		push	cx
 14796 00000DAA 06                      		push	es
 14797 00000DAB 1E                      		push	ds		; set es=Bios_Data
 14798 00000DAC 07                      		pop	es
 14799 00000DAD 88E0                    		mov	al, ah		; put error code in al
 14800 00000DAF A2[4601]                		mov	[lsterr], al	; terminate list with error code
 14801                                  		; 24/12/2023
 14802 00000DB2 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 14803                                  		;mov	cx, 9		; numerr (= errout-errin)
 14804                                  					; number of possible error conditions
 14805 00000DB5 BF[3C01]                		mov	di, errin	; point to error conditions
 14806 00000DB8 F2AE                    		repne scasb
 14807                                  
 14808                                  		; 24/12/2023
 14809                                  		; 02/09/2023
 14810 00000DBA 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 14811                                  		; 10/12/2022
 14812                                  		;mov	al, [di+8]	; [di+numerr-1]
 14813                                  					; get translation
 14814                                  		; 19/10/2022 - Temporary ! 
 14815                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 14816 00000DBD 07                      		pop	es
 14817 00000DBE 59                      		pop	cx
 14818 00000DBF F9                      		stc			; flag error condition
 14819 00000DC0 C3                      		retn
 14820                                  
 14821                                  ; =============== S U B	R O U T	I N E =======================================
 14822                                  
 14823                                  ; set the time of last access for this drive.
 14824                                  ; this is done only for removable media. es:di -> bds
 14825                                  
 14826                                  set_tim:
 14827 00000DC1 50                      		push	ax
 14828 00000DC2 E86CF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 14829                                  
 14830                                  ; we have the new time. if we see that the time has passed,
 14831                                  ; then we reset the threshold counter...
 14832                                  
 14833                                  		; 24/12/2023 - Retro DOS v5.0
 14834 00000DC5 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 14835                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 14836 00000DC9 7506                    		jne	short setaccess
 14837                                  		; 24/12/2023
 14838 00000DCB 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 14839                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 14840                                  		;jz	short done_set
 14841                                  		; 12/12/2022
 14842 00000DCF 740E                    		je	short done_set2
 14843                                  setaccess:
 14844 00000DD1 C606[1D01]00            		mov	byte [accesscount], 0
 14845                                  		
 14846                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14847 00000DD6 26895579                		mov	[es:di+79h], dx
 14848 00000DDA 26894D7B                		mov	[es:di+7Bh], cx
 14849                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 14850                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 14851                                  done_set:
 14852 00000DDE F8                      		clc
 14853                                  done_set2:		; 12/12/2022
 14854 00000DDF 58                      		pop	ax
 14855 00000DE0 C3                      		retn
 14856                                  
 14857                                  ; =============== S U B	R O U T	I N E =======================================
 14858                                  
 14859                                  ; this routine is called if an error occurs while formatting or verifying.
 14860                                  ; it resets the drive,and decrements the retry count.
 14861                                  ; on entry - ds:di - points to bds for the drive
 14862                                  ;	     bp    - contains retry count
 14863                                  ; on exit    flags indicate result of decrementing retry count
 14864                                  
 14865                                  again:
 14866 00000DE1 E85705                  		call	ResetDisk
 14867 00000DE4 80FC06                  		cmp	ah, 6
 14868 00000DE7 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 14869                                  					; do not decrement retry count.
 14870 00000DE9 4D                      		dec	bp		; decrement retry count
 14871 00000DEA C3                      		retn
 14872                                  ; ---------------------------------------------------------------------------
 14873                                  
 14874                                  dont_dec_retry_count:
 14875 00000DEB 08E4                    		or	ah, ah
 14876 00000DED C3                      		retn
 14877                                  
 14878                                  ;----------------------------------------------------------------------------
 14879                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 14880                                  ;----------------------------------------------------------------------------
 14881                                  ; 24/12/2023 - Retro DOS v5.0
 14882                                  ;;;;
 14883                                  
 14884 00000DEE 00                      ioctl_drvnum:	db 0
 14885                                  
 14886                                  		; 24/12/2023
 14887                                  
 14888                                  ; =============== S U B R O U T I N E =======================================
 14889                                  
 14890                                  get_phy_drv_num:
 14891 00000DEF E8B2F7                  		call	SetDrive	; get physical drive number
 14892                                  					; INPUT: al = logical drive number (BDS.drivelet)
 14893                                  					; OUTPUT: physical drive number (BDS.drivenum)
 14894 00000DF2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14895 00000DF6 C3                      		retn
 14896                                  
 14897                                  ; =============== S U B R O U T I N E =======================================
 14898                                  
 14899                                  		; 24/12/2023
 14900                                  ioctl_output:
 14901 00000DF7 E8F5FF                  		call	get_phy_drv_num
 14902 00000DFA 2E8816[EE0D]            		mov	[cs:ioctl_drvnum], dl
 14903 00000DFF B441                    		mov	ah, 41h
 14904 00000E01 BBAA55                  		mov	bx, 55AAh
 14905 00000E04 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 14906                                  					; BX = 55AAh, DL = drive number
 14907                                  					; Return: CF set if not supported
 14908                                  					; AH = extensions version
 14909                                  					; BX = AA55h
 14910                                  					; CX = Interface support bit map
 14911 00000E06 7235                    		jc	short int13h_exts_err
 14912                                  ioctl_input_1:
 14913 00000E08 C43E[1200]              		les	di, [ptrsav]
 14914 00000E0C 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 14915 00000E10 723E                    		jc	short ioctl_input_2
 14916 00000E12 B80046                  		mov	ax, 4600h	; Eject removable media
 14917 00000E15 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 14918 00000E18 7417                    		je	short ioctl_output_1
 14919 00000E1A 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 14920 00000E1E 751B                    		jne	short ioctl_output_2
 14921 00000E20 B80145                  		mov	ax, 4501h	; Lock/unlock media
 14922                                  					; (al, 0 = lock, 1 = unlock)
 14923 00000E23 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 14924 00000E28 7407                    		jz	short ioctl_output_1
 14925 00000E2A 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 14926 00000E2E 750B                    		jne	short ioctl_output_2
 14927 00000E30 48                      		dec	ax
 14928                                  ioctl_output_1:
 14929 00000E31 2E8A16[EE0D]            		mov	dl, [cs:ioctl_drvnum]
 14930 00000E36 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14931 00000E38 7203                    		jc	short int13h_exts_err
 14932                                  ioctl_lock_err:
 14933                                  		; cf=0
 14934                                  ioctl_output_ret:
 14935                                  		;clc
 14936 00000E3A C3                      		retn
 14937                                  ; ---------------------------------------------------------------------------
 14938                                  
 14939                                  ioctl_output_2:
 14940 00000E3B B401                    		mov	ah, 1
 14941                                  int13h_exts_err:
 14942 00000E3D 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 14943 00000E40 74F8                    		je	short ioctl_lock_err
 14944 00000E42 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 14945 00000E45 74F3                    		je	short ioctl_lock_err
 14946 00000E47 E9DAF7                  		jmp	err_exitj
 14947                                  
 14948                                  ; =============== S U B R O U T I N E =======================================
 14949                                  
 14950                                  		; 24/12/2023
 14951                                  ioctl_input:
 14952 00000E4A E8A2FF                  		call	get_phy_drv_num
 14953 00000E4D F9                      		stc
 14954 00000E4E EBB8                    		jmp	short ioctl_input_1
 14955                                  ioctl_input_2:
 14956 00000E50 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 14957 00000E54 75E5                    		jne	short ioctl_output_2
 14958 00000E56 B80245                  		mov	ax, 4502h	; get lock status
 14959 00000E59 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14960 00000E5B 72E0                    		jc	short int13h_exts_err
 14961 00000E5D BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 14962 00000E60 3C00                    		cmp	al, 0		; not locked
 14963 00000E62 7402                    		jz	short ioctl_input_3
 14964 00000E64 B30E                    		mov	bl, 0Eh
 14965                                  ioctl_input_3:
 14966 00000E66 53                      		push	bx
 14967 00000E67 B404                    		mov	ah, 4
 14968 00000E69 B90101                  		mov	cx, 101h
 14969 00000E6C B601                    		mov	dh, 1
 14970 00000E6E CD13                    		int	13h		; DISK - VERIFY SECTORS
 14971                                  					; AL = number of sectors to verify, CH = track, CL = sector
 14972                                  					; DH = head, DL = drive
 14973                                  					; Return: CF set on error, AH = status
 14974                                  					; AL = number of sectors verified
 14975 00000E70 5B                      		pop	bx
 14976 00000E71 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 14977 00000E74 740B                    		je	short ioctl_input_5
 14978 00000E76 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 14979 00000E79 7406                    		je	short ioctl_input_5
 14980                                  ioctl_input_4:
 14981 00000E7B 26895D01                		mov	[es:di+1], bx
 14982 00000E7F EBB9                    		jmp	short ioctl_lock_err
 14983                                  ioctl_input_5:
 14984 00000E81 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 14985                                  					; bit 11 (not ready -removable media error- bit)
 14986                                  					; if bit 11 = 0, another error (except 31h and 80h)
 14987 00000E85 EBF4                    		jmp	short ioctl_input_4
 14988                                  
 14989                                  ; ---------------------------------------------------------------------------
 14990                                  ;;;;
 14991                                  
 14992                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14993                                  
 14994                                  ;----------------------------------------------------------------------------
 14995                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 14996                                  ;----------------------------------------------------------------------------
 14997                                  ; 11/03/2019 - Retro DOS v4.0
 14998                                  
 14999                                  ; 18/03/2019
 15000                                  
 15001                                  ; ==========================================================================
 15002                                  ;
 15003                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 15004                                  ;
 15005                                  ;      This function is intended to give the user to control the
 15006                                  ;      bds table flags of unformatted_media bit.
 15007                                  ;      GetAccessFlag will show the status -
 15008                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 15009                                  ;						1 disk i/o allowed
 15010                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 15011                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 15012                                  ;						1 disallow disk i/o
 15013                                  ; ==========================================================================
 15014                                  
 15015                                  		; generic ioctl dispatch tables
 15016                                  
 15017                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 15018                                  
 15019                                  ; 24/12/2023
 15020                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 15021                                  
 15022                                  ; ---------------------------------------------------------------------------
 15023                                  		; 24/12/2023
 15024                                  		;db 0
 15025                                  ; 09/12/2022 
 15026                                  %if 0
 15027                                  
 15028                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 15029                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 15030                                  		dw 0EE8h	; 61h	; ReadTrack
 15031                                  		dw 0E86h	; 62h	; VerifyTrack
 15032                                  		dw 0CA3h	 	; Cmd_Error_Proc
 15033                                  		dw 0CA3h		; Cmd_Error_Proc
 15034                                  		dw 0CA3h		; Cmd_Error_Proc
 15035                                  		dw 119Ah	; 66h	; GetMediaId
 15036                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 15037                                  		dw 12C1h	; 68h	; SenseMediaType
 15038                                  
 15039                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 15040                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 15041                                  		dw 0EEFh	; 41h	; WriteTrack
 15042                                  		dw 0DC1h	; 42h	; FormatTrack
 15043                                  		dw 0CA3h		; Cmd_Error_Proc
 15044                                  		dw 0CA3h		; Cmd_Error_Proc
 15045                                  		dw 0CA3h		; Cmd_Error_Proc
 15046                                  		dw 11D2h	; 46h	; SetMediaId
 15047                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 15048                                  
 15049                                  %endif
 15050                                  		; 24/12/2023 - Retro DOS v5.0
 15051                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 15052                                  
 15053                                  		; 09/12/2022
 15054                                  IoReadJumpTable:
 15055 00000E87 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 15056 00000E88 [1A0F]                  		dw GetDeviceParameters	; 60h
 15057 00000E8A [9311]                  		dw ReadTrack		; 61h
 15058 00000E8C [3311]                  		dw VerifyTrack		; 62h
 15059 00000E8E [160F]                  		dw Cmd_Error_Proc
 15060 00000E90 [160F]                  		dw Cmd_Error_Proc
 15061 00000E92 [160F]                  		dw Cmd_Error_Proc
 15062 00000E94 [1214]                  		dw GetMediaId		; 66h
 15063 00000E96 [EF14]                  		dw GetAccessFlag	; 67h ; unpublished function
 15064 00000E98 [4415]                  		dw SenseMediaType	; 68h
 15065                                  		; 24/12/2023
 15066                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15067 00000E9A [160F]                  		dw Cmd_Error_Proc	; 69h
 15068 00000E9C [160F]                  		dw Cmd_Error_Proc	; 6Ah
 15069 00000E9E [160F]                  		dw Cmd_Error_Proc
 15070 00000EA0 [160F]                  		dw Cmd_Error_Proc
 15071 00000EA2 [160F]                  		dw Cmd_Error_Proc
 15072 00000EA4 [160F]                  		dw Cmd_Error_Proc	; 6Eh
 15073 00000EA6 [C815]                  		dw GetDrvMapInfo	; 6Fh
 15074                                  
 15075                                  IoWriteJumpTable:
 15076 00000EA8 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 15077 00000EA9 [7A0F]                  		dw SetDeviceParameters	; 40h
 15078 00000EAB [9A11]                  		dw WriteTrack		; 41h
 15079 00000EAD [6D10]                  		dw FormatTrack		; 42h
 15080 00000EAF [160F]                  		dw Cmd_Error_Proc
 15081 00000EB1 [160F]                  		dw Cmd_Error_Proc
 15082 00000EB3 [160F]                  		dw Cmd_Error_Proc
 15083 00000EB5 [5214]                  		dw SetMediaId		; 46h
 15084 00000EB7 [0415]                  		dw SetAccessFlag	; 47h ; unpublished function
 15085                                  		; 24/12/2023
 15086                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15087 00000EB9 [8115]                  		dw SetLockState		; 48h
 15088 00000EBB [9815]                  		dw EjectMedia		; 49h	
 15089                                  		
 15090                                  ; ==========================================================================
 15091                                  ; IOC_DC_Table
 15092                                  ;
 15093                                  ; This table contains all of the valid generic IOCtl Minor codes for
 15094                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 15095                                  ; Added for 5.00
 15096                                  ; ==========================================================================
 15097                                  
 15098                                  		; 24/12/2023 - Retro DOS v5.0
 15099                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 15100                                  
 15101 00000EBD 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 15102 00000EBE 40                      		db 40h			; SET_DEVICE_PARAMETERS
 15103 00000EBF 61                      		db 61h			; READ_TRACK
 15104 00000EC0 41                      		db 41h			; WRITE_TRACK
 15105 00000EC1 62                      		db 62h			; VERIFY_TRACK
 15106 00000EC2 42                      		db 42h			; FORMAT_TRACK
 15107 00000EC3 66                      		db 66h			; GET_MEDIA_ID
 15108 00000EC4 46                      		db 46h			; SET_MEDIA_ID
 15109 00000EC5 67                      		db 67h			; GET_ACCESS_FLAG
 15110 00000EC6 47                      		db 47h			; SET_ACCESS_FLAG
 15111 00000EC7 68                      		db 68h			; SENSE_MEDIA_TYPE
 15112                                  		; 24/12/2023
 15113                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15114 00000EC8 48                      		db 48h			; SET_LOCK_STATE
 15115 00000EC9 49                      		db 49h			; EJECT_MEDIA
 15116 00000ECA 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 15117                                  
 15118                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 15119                                  
 15120                                  		; 24/12/2023 - Retro DOS v5.0
 15121                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 15122                                  
 15123 00000ECB 00                      new_genioctl:	db 0
 15124                                  
 15125                                  ; ---------------------------------------------------------------------------
 15126                                  
 15127                                  ; 16/10/2022
 15128                                  
 15129                                  ; ==========================================================================
 15130                                  ; Do_Generic_IOCtl: perform generic ioctl request
 15131                                  ;
 15132                                  ;    input: AL contains logical drive
 15133                                  ;
 15134                                  ;	functions are dispatched through a call. On return, carry indicates
 15135                                  ;	error code in al. Note::bES:b& ds undefined on return from
 15136                                  ;	subfunctions.
 15137                                  ;
 15138                                  ; ==========================================================================
 15139                                  
 15140                                  ; 11/03/2019
 15141                                  		; 24/12/2023 - Retro DOS v5.0
 15142                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 15143                                  
 15144                                  		; 19/10/2022
 15145                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 15146 00000ECC E8D5F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 15147                                  		
 15148                                  		; 24/12/2023
 15149                                  		;;;
 15150 00000ECF 2EC606[CB0E]00          		mov	byte [cs:new_genioctl], 0
 15151                                  					; 0, old generic ioctl function
 15152 00000ED5 06                      		push	es
 15153 00000ED6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 15154 00000EDA 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 15155                                  					; RAWIO
 15156                                  		; 24/12/2023
 15157                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15158                                  		;pop	es
 15159                                  		;jnz	short IoctlFuncErr
 15160 00000EDF 740A                    		jz	short chk_genioctl_minor
 15161 00000EE1 2EFE06[CB0E]            		inc	byte [cs:new_genioctl]
 15162                                  					; 1, new generic ioctl function (FAT32)
 15163 00000EE6 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 15164                                  				; (called only if bit 6 of attribute is set to 1)
 15165                                  chk_genioctl_minor:
 15166 00000EEB 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15167 00000EEF 07                      		pop	es
 15168 00000EF0 7525                    		jnz	short IoctlFuncErr
 15169                                  		;;;
 15170                                  
 15171                                  		; cas note: Could do the above two blocks in reverse order.
 15172                                  		; Would have to preserve al for SetDrive
 15173                                  
 15174                                  		; 10/12/2022
 15175 00000EF2 BE[870E]                		mov	si, IoReadJumpTable
 15176                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 15177                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 15178 00000EF5 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 15179 00000EF7 7503                    		jnz	short NotGenericWrite ; function is a read.
 15180                                  		; 10/12/2022
 15181 00000EF9 BE[A80E]                		mov	si, IoWriteJumpTable
 15182                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 15183                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 15184                                  NotGenericWrite:
 15185 00000EFC 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 15186 00000EFE 2C40                    		sub	al, 40h		; offset for base function
 15187 00000F00 2E3A04                  		cmp	al, [cs:si]
 15188 00000F03 7712                    		ja	short IoctlFuncErr
 15189 00000F05 98                      		cbw
 15190                                  		; 24/12/2023
 15191                                  		;shl	ax, 1
 15192 00000F06 01C0                    		add	ax, ax
 15193 00000F08 46                      		inc	si
 15194 00000F09 01C6                    		add	si, ax
 15195 00000F0B 2EFF14                  		call	near [cs:si]
 15196                                  		;call	word ptr cs:[si]
 15197 00000F0E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15198                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15199                                  					; 2C7h:30h = 70h:25A0h
 15200 00000F13 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 15201 00000F15 C3                      		retn			; Pass carry flag through to exit code
 15202                                  ; ---------------------------------------------------------------------------
 15203                                  
 15204                                  		; Cmd_Error_Proc is called as a procedure and also use
 15205                                  		; as a fall through from above
 15206                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 15207 00000F16 5A                      		pop	dx
 15208                                  IoctlFuncErr:
 15209 00000F17 E9BBF1                  		jmp	bc_cmderr
 15210                                  ; ---------------------------------------------------------------------------
 15211                                  
 15212                                  ; 16/10/2022
 15213                                  
 15214                                  ; ==========================================================================
 15215                                  ;**	GetDeviceParameters:
 15216                                  ;
 15217                                  ;	GetDeviceParameters implements the generic ioctl function:
 15218                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 15219                                  ;
 15220                                  ;	ENTRY	(ES:di) = BDS for drive
 15221                                  ;		PtrSav = long pointer to request header
 15222                                  ;	EXIT	??? BUGBUG
 15223                                  ;	USES	??? BUGBUG
 15224                                  ; ==========================================================================
 15225                                  
 15226                                  		; 24/12/2023 - Retro DOS v5.0
 15227                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 15228                                  
 15229                                  		; 19/10/2022
 15230                                  GetDeviceParameters:
 15231                                  		; Copy info from bds to the device parameters packet
 15232                                  
 15233 00000F1A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15234 00000F1E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15235                                  					; (DS:BX) = return buffer
 15236                                  		; 24/12/2023
 15237 00000F21 268A453E                		mov	al, [es:di+3Eh]
 15238                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 15239 00000F25 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15240                                  		; 24/12/2023
 15241 00000F28 268B453F                		mov	ax, [es:di+3Fh]
 15242                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 15243 00000F2C 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 15244                                  					; Mask off other bits
 15245 00000F2F 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15246                                  		; 24/12/2023
 15247 00000F32 268B4541                		mov     ax, [es:di+41h]
 15248                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 15249 00000F36 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15250 00000F39 30C0                    		xor	al, al		; Set media type to default
 15251 00000F3B 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15252                                  					
 15253                                  		; copy recommended bpb
 15254                                  
 15255                                  		; 24/12/2023
 15256 00000F3E 8D7543                  		lea     si, [di+43h]
 15257                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 15258 00000F41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15259                                  					; BUILD_DEVICE_BPB
 15260 00000F44 7412                    		jz	short UseBpbPresent
 15261 00000F46 1E                      		push	ds		; Save request packet segment
 15262 00000F47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15263                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15264                                  					; 2C7h:30h = 70h:25A0h
 15265                                  					; Point back to Bios_Data
 15266 00000F4C E828FA                  		call	checksingle
 15267 00000F4F E884F7                  		call	GetBp		; Build	the bpb	from scratch
 15268 00000F52 1F                      		pop	ds		; Restore request packet segment
 15269 00000F53 7224                    		jb	short GetParmRet
 15270 00000F55 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 15271                                  					; Use this subfield of bds instead
 15272                                  UseBpbPresent:				
 15273 00000F58 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15274                                  					; This is where	the result goes
 15275                                  		; 24/12/2023
 15276 00000F5B 31D2                    		xor	dx, dx ; 0
 15277                                  		
 15278                                  		; 24/12/2023
 15279 00000F5D B91F00                  		mov	cx, 31		; A_BPB.size = 31
 15280                                  		;mov	cx, 25		; A_BPB.size - 6
 15281                                  					; For now use 'small' bpb
 15282                                  		; 24/12/2023
 15283                                  		;;;
 15284 00000F60 2E3816[CB0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 15285 00000F65 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 15286                                  		;mov	cx, 53		; FAT32 BPB size
 15287                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 15288 00000F67 B135                    		mov	cl, 53
 15289 00000F69 B220                    		mov	dl, 32
 15290                                  gdp_1:
 15291                                  		;;;
 15292 00000F6B 1E                      		push	ds		; reverse segments for copy
 15293 00000F6C 06                      		push	es
 15294 00000F6D 1F                      		pop	ds
 15295 00000F6E 07                      		pop	es
 15296 00000F6F F3A4                    		rep movsb
 15297                                  
 15298                                  		; 24/12/2023
 15299                                  		;;;
 15300 00000F71 89D1                    		mov	cx, dx		; 0 or 32
 15301 00000F73 E304                    		jcxz	gdp_2
 15302 00000F75 30C0                    		xor	al, al		; 32 zeros
 15303 00000F77 F3AA                    		rep stosb
 15304                                  gdp_2:
 15305                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 15306                                  		;;;		
 15307                                  		
 15308                                  		; 12/12/2022
 15309                                  		; cf=0 (cmp instruction -above- resets cf) 	
 15310                                  		;clc
 15311                                  GetParmRet:				
 15312 00000F79 C3                      		retn
 15313                                  ; ---------------------------------------------------------------------------
 15314                                  
 15315                                  ; 17/10/2022
 15316                                  ; 16/10/2022
 15317                                  
 15318                                  ; ==========================================================================
 15319                                  ; SetDeviceParameters:
 15320                                  ;
 15321                                  ; input: ES:di points to bds for drive
 15322                                  ; ==========================================================================
 15323                                  
 15324                                  		; 24/12/2023 - Retro DOS v5.0
 15325                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 15326                                  
 15327                                  		; 19/10/2022
 15328                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 15329 00000F7A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15330 00000F7E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15331                                  		; 24/12/2023
 15332 00000F81 26814D3F4001            		or	word [es:di+3Fh], 140h
 15333                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 15334                                  					; fchanged_by_format|fchanged
 15335 00000F87 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15336                                  					; ONLY_SET_TRACKLAYOUT
 15337                                  		;jnz	short setTrackTable
 15338                                  		; 24/12/2023
 15339 00000F8A 7403                    		jz	short sdp_1
 15340 00000F8C E98000                  		jmp	setTrackTable
 15341                                  sdp_1:	
 15342 00000F8F 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15343                                  		; 24/12/2023
 15344 00000F92 2688453E                		mov	[es:di+3Eh], al
 15345                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 15346 00000F96 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15347                                  		; 24/12/2023
 15348 00000F99 26894541                		mov	[es:di+41h], ax
 15349                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 15350 00000F9D 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15351 00000FA0 1E                      		push	ds
 15352                                  		; 17/10/2022
 15353 00000FA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15354                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15355                                  					; 2C7h:30h = 70h:25A0h
 15356                                  		;cmp	byte [fhave96], 0
 15357 00000FA6 803E[7700]00            		cmp	byte [fhave96], 0
 15358 00000FAB 1F                      		pop	ds
 15359 00000FAC 7502                    		jnz	short HaveChange ; we have changeline support
 15360                                  		; 10/12/2022
 15361 00000FAE 24FD                    		and	al, 0FDh
 15362                                  		;and	ax, 0FFFDh	; ~fchangeline
 15363                                  
 15364                                  		; Ignore all bits except non_removable and changeline
 15365                                  HaveChange:
 15366 00000FB0 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 15367                                  		; 24/12/2023
 15368 00000FB3 268B4D3F                		mov	cx, [es:di+3Fh]
 15369                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 15370 00000FB7 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 15371 00000FBB 09C8                    		or	ax, cx
 15372                                  		; 24/12/2023
 15373 00000FBD 2689453F                		mov	[es:di+3Fh], ax
 15374                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 15375 00000FC1 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15376                                  					; Set media type
 15377 00000FC4 1E                      		push	ds
 15378 00000FC5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15379                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15380 00000FCA A2[A805]                		mov	[mediatype], al
 15381                                  		;mov	ds:mediatype, al
 15382                                  
 15383                                  		; 24/12/2023
 15384                                  		;;;
 15385 00000FCD B93500                  		mov	cx, 53		; FAT32 BPB size
 15386 00000FD0 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15387 00000FD6 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 15388                                  		;mov	cx, 31		; A_BPB.size = 31
 15389 00000FD8 B11F                    		mov	cl, 31
 15390                                  sdp_2:
 15391                                  		;;;	
 15392 00000FDA 1F                      		pop	ds
 15393                                  
 15394                                  		; The media changed (maybe) so we will have to do a set dasd
 15395                                  		; the next time we format a track
 15396                                  
 15397                                  		; 24/12/2023
 15398 00000FDB 26804D3F80              		or	byte [es:di+3Fh], 80h
 15399                                  		; 10/12/2022
 15400                                  		;or	byte [es:di+35], 80h
 15401                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 15402                                  					; set_dasd_true
 15403 00000FE0 57                      		push	di		; Save bds pointer
 15404                                  
 15405                                  		; Figure out what we are supposed to do with the bpb
 15406                                  		; were we asked to install a fake bpb?
 15407                                  
 15408 00000FE1 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15409                                  					; INSTALL_FAKE_BPB
 15410 00000FE4 7511                    		jnz	short InstallFakeBpb
 15411                                  
 15412                                  		; were we returning a fake bpb when asked to build a bpb?
 15413                                  
 15414                                  		; 24/12/2023
 15415 00000FE6 26F6453F04              		test	byte [es:di+3Fh], 4
 15416                                  		; 10/12/2022
 15417                                  		;test	byte [es:di+35], 4
 15418                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 15419                                  					; return_fake_bpb
 15420 00000FEB 7405                    		jz	short InstallRecommendedBpb
 15421                                  
 15422                                  		; we were returning a fake bpb but we can stop now
 15423                                  
 15424                                  		; 24/12/2023
 15425 00000FED 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 15426                                  		; 10/12/2022
 15427                                  		;and	byte [es:di+35], 0FBh
 15428                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 15429                                  					; ~return_fake_bpb
 15430                                  InstallRecommendedBpb:
 15431                                  		; 24/12/2023
 15432                                  		;mov	cx, 31		; A_BPB.size
 15433                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 15434                                  		; cx = 53 or 31
 15435 00000FF2 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 15436 00000FF5 EB08                    		jmp	short CopyTheBpb
 15437                                  ; ---------------------------------------------------------------------------
 15438                                  
 15439                                  InstallFakeBpb:
 15440                                  		; 24/12/2023
 15441 00000FF7 26804D3F04              		or	byte [es:di+3Fh], 4
 15442                                  		; 10/12/2022
 15443                                  		;or	byte [es:di+35], 4
 15444                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 15445                                  					; return_fake_bpb
 15446                                  		; 24/12/2023
 15447                                  		; cx = 53 or 31
 15448                                  		;mov	cx, 25		; A_BPB.size - 6
 15449                                  					; move 'smaller' bpb
 15450 00000FFC 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 15451                                  CopyTheBpb:				
 15452 00000FFF 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15453 00001002 F3A4                    		rep movsb
 15454 00001004 1E                      		push	ds		; Save packet segment
 15455                                  		; 17/10/2022
 15456 00001005 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15457                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15458                                  					; Setup	for ds -> Bios_Data
 15459 0000100A E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 15460 0000100D 1F                      		pop	ds		; Restore packet segment
 15461 0000100E 5F                      		pop	di		; Restore bds pointer
 15462                                  setTrackTable:	
 15463                                  		; 24/12/2023
 15464                                  		;mov	cx, [bx+38]	; [bx+26h]
 15465                                  		;;;
 15466 0000100F 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15467                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 15468 00001012 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15469 00001018 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 15470 0000101A 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15471                                  					; offset 31+7 (A_BPB.size+7)
 15472                                  sdp_3:
 15473                                  		;;;
 15474                                  
 15475 0000101D 1E                      		push	ds
 15476 0000101E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15477 00001023 890E[AA04]              		mov	[sectorspertrack], cx
 15478 00001027 1F                      		pop	ds
 15479                                  		
 15480                                  		; 24/12/2023
 15481 00001028 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 15482                                  		; 10/12/2022
 15483                                  		;and	byte [es:di+35], 0F7h
 15484                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 15485                                  					; ~good_tracklayout
 15486 0000102D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15487                                  					; TRACKLAYOUT_IS_GOOD
 15488 00001030 7405                    		jz	short UglyTrackLayOut
 15489                                  		; 24/12/2023
 15490 00001032 26804D3F08              		or	byte [es:di+3Fh], 8
 15491                                  		; 10/12/2022
 15492                                  		;or	byte [es:di+35], 8
 15493                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 15494                                  					; good_tracklayout
 15495                                  UglyTrackLayOut:
 15496 00001037 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 15497 0000103A 772D                    		ja	short TooManyPerTrack
 15498                                  		;jcxz	short SectorInfoSaved
 15499 0000103C E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 15500                                  		
 15501 0000103E BF[AC04]                		mov	di, tracktable
 15502                                  
 15503                                  		; 24/12/2023
 15504                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15505                                  		;;;
 15506 00001041 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15507                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 15508 00001044 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15509 0000104A 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 15510 0000104C 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15511                                  					; offset 31+9 (A_BPB.size+9)
 15512                                  sdp_4:
 15513                                  		;;;
 15514                                  
 15515                                  		; 17/10/2022
 15516 0000104F 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 15517                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15518                                  					; Trash	our bds	pointer
 15519                                  StoreSectorInfo:
 15520 00001054 47                      		inc	di
 15521 00001055 47                      		inc	di		; Skip over cylinder and head
 15522 00001056 AD                      		lodsw			; Get sector id
 15523 00001057 AA                      		stosb			; Copy it
 15524 00001058 AD                      		lodsw			; Get sector size
 15525                                  		
 15526                                  		; 24/12/2023
 15527                                  		; 02/09/2023 (PCDOS 7.1)
 15528                                  		;call	SectSizeToSectIndex
 15529                                  		; 18/04/2024
 15530                                  		;cmp	ah, 3 ; 02/09/2023
 15531 00001059 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 15532                                  					; examine upper	byte only
 15533 0000105C 7704                    		ja	short OneK
 15534 0000105E 88E0                    		mov	al, ah		; value	in AH is the index!
 15535 00001060 EB02                    		jmp	short sdp_s
 15536                                  OneK:
 15537 00001062 B003                    		mov	al, 3		; 1024 bytes per sector
 15538                                  sdp_s:
 15539 00001064 AA                      		stosb			; Store	sector SIZE index
 15540 00001065 E2ED                    		loop	StoreSectorInfo
 15541                                  SectorInfoSaved:
 15542 00001067 F8                      		clc
 15543 00001068 C3                      		retn
 15544                                  ; ---------------------------------------------------------------------------
 15545                                  
 15546                                  TooManyPerTrack:
 15547 00001069 B00C                    		mov	al, 0Ch
 15548 0000106B F9                      		stc
 15549 0000106C C3                      		retn
 15550                                  ; ---------------------------------------------------------------------------
 15551                                  
 15552                                  ; 16/10/2022
 15553                                  
 15554                                  ; ==========================================================================
 15555                                  ; FormatTrack:
 15556                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 15557                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 15558                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 15559                                  ;
 15560                                  ; input: ES:di points to bds for drive
 15561                                  ;
 15562                                  ; output:
 15563                                  ;	for status call:
 15564                                  ;	specialfunction byte set to:
 15565                                  ;		0 - rom support + legal combination
 15566                                  ;		1 - no rom support
 15567                                  ;		2 - illegal combination
 15568                                  ;		3 - no media present
 15569                                  ;	carry cleared.
 15570                                  ;
 15571                                  ;	for format track:
 15572                                  ;		carry set if error
 15573                                  ;
 15574                                  ; ==========================================================================
 15575                                  
 15576                                  ; 16/03/2019
 15577                                  		; 24/12/2023 - Retro DOS 5.0
 15578                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 15579                                  
 15580                                  		; 19/10/2022
 15581                                  FormatTrack:
 15582 0000106D C51E[1200]              		lds	bx, [ptrsav]
 15583 00001071 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 15584 00001074 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15585                                  					; STATUS_FOR_FORMAT
 15586 00001077 740E                    		jz	short DoFormatTrack
 15587 00001079 1E                      		push	ds
 15588                                  		; 17/10/2022
 15589 0000107A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15590                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15591 0000107F E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15592 00001082 1F                      		pop	ds
 15593 00001083 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15594 00001085 F8                      		clc
 15595 00001086 C3                      		retn
 15596                                  ; ---------------------------------------------------------------------------
 15597                                  
 15598                                  DoFormatTrack:
 15599                                  		; 24/12/2023 - Retro DOS 5.0
 15600 00001087 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 15601                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 15602                                  					; DEV_HARDDISK
 15603 0000108C 7508                    		jnz	short DoFormatDiskette
 15604                                  		; 17/10/2022
 15605 0000108E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15606                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15607                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 15608 00001093 E99D00                  		jmp	VerifyTrack
 15609                                  ; ---------------------------------------------------------------------------
 15610                                  
 15611                                  DoFormatDiskette:
 15612 00001096 8B4F01                  		mov	cx, [bx+1]
 15613 00001099 8B5703                  		mov	dx, [bx+3]
 15614 0000109C F60702                  		test	byte [bx], 2
 15615                                  		; 17/10/2022
 15616 0000109F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15617                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15618                                  					; Setup	ds-> Bios_Data for verify
 15619 000010A4 7403                    		jz	short DoFormatDiskette_1
 15620 000010A6 E9E500                  		jmp	VerifyTrack_Err
 15621                                  ; ---------------------------------------------------------------------------
 15622                                  
 15623                                  DoFormatDiskette_1:
 15624 000010A9 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15625 000010AC 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 15626 000010AE 7406                    		jz	short NeedToSetDasd ; Old rom
 15627 000010B0 3C03                    		cmp	al, 3		; Time out error?
 15628 000010B2 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 15629                                  					; about	the illegal combination)
 15630 000010B4 EB68                    		jmp	short FormatFailed
 15631                                  ; ---------------------------------------------------------------------------
 15632                                  
 15633                                  NeedToSetDasd:
 15634 000010B6 52                      		push	dx
 15635 000010B7 E89001                  		call	SetDasd		; INT 13h, AH=17h
 15636 000010BA 5A                      		pop	dx
 15637                                  NoSetDasd:
 15638 000010BB E8B9F8                  		call	checksingle	; Do any needed	diskette swapping
 15639 000010BE 89D0                    		mov	ax, dx		; Get track from packet
 15640 000010C0 A3[3901]                		mov	[trknum], ax
 15641 000010C3 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 15642 000010C7 88CC                    		mov	ah, cl
 15643 000010C9 BB[AC04]                		mov	bx, tracktable
 15644 000010CC 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15645                                  		; 24/12/2023 - Retro DOS 5.0
 15646 000010D0 E307                    		jcxz	set_fmt_retry_count
 15647                                  StoreCylinderHead:
 15648 000010D2 8907                    		mov	[bx], ax	; Store	into TrackTable
 15649 000010D4 83C304                  		add	bx, 4		; Skip to next sector field
 15650 000010D7 E2F9                    		loop	StoreCylinderHead
 15651                                  set_fmt_retry_count:	; 24/12/2023
 15652                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 15653                                  		; 02/09/2023
 15654 000010D9 B105                    		mov	cl, 5
 15655                                  FormatRetry:
 15656 000010DB 51                      		push	cx
 15657 000010DC BB[AC04]                		mov	bx, tracktable
 15658 000010DF A0[AA04]                		mov	al, [sectorspertrack]
 15659 000010E2 B405                    		mov	ah, 5		; romformat
 15660 000010E4 8C1E[A804]              		mov	[xfer_seg], ds
 15661 000010E8 E86602                  		call	ToRom
 15662 000010EB 59                      		pop	cx
 15663 000010EC 7216                    		jb	short FormatError
 15664 000010EE 51                      		push	cx		; Now verify the sectors just formatted.
 15665                                  					; NOTE:	because	of bug in some BIOSes we have to
 15666                                  					;	set ES:BX to 00:00
 15667 000010EF 53                      		push	bx
 15668 000010F0 31DB                    		xor	bx, bx
 15669 000010F2 891E[A804]              		mov	[xfer_seg], bx
 15670 000010F6 A0[AA04]                		mov	al, [sectorspertrack]
 15671 000010F9 B404                    		mov	ah, 4		; romverify
 15672 000010FB B101                    		mov	cl, 1
 15673 000010FD E85102                  		call	ToRom
 15674 00001100 5B                      		pop	bx
 15675 00001101 59                      		pop	cx
 15676 00001102 7329                    		jnb	short FormatOk
 15677                                  FormatError:
 15678 00001104 E83402                  		call	ResetDisk
 15679 00001107 C606[AA05]01            		mov	byte [had_format_error], 1
 15680 0000110C 50                      		push	ax
 15681 0000110D 51                      		push	cx
 15682 0000110E 52                      		push	dx
 15683 0000110F E89501                  		call	SetMediaForFormat
 15684 00001112 3C01                    		cmp	al, 1
 15685 00001114 7503                    		jnz	short WhileErr
 15686 00001116 E83101                  		call	SetDasd
 15687                                  WhileErr:
 15688 00001119 5A                      		pop	dx
 15689 0000111A 59                      		pop	cx
 15690 0000111B 58                      		pop	ax
 15691 0000111C E2BD                    		loop	FormatRetry
 15692                                  FormatFailed:
 15693 0000111E C606[AA05]01            		mov	byte [had_format_error], 1
 15694                                  					; Set the format error flag
 15695 00001123 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 15696 00001126 7502                    		jnz	short DoMapIt	; Error	to time	out error
 15697 00001128 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 15698                                  DoMapIt:
 15699 0000112A E97CFC                  		jmp	maperror
 15700                                  ; ---------------------------------------------------------------------------
 15701                                  
 15702                                  FormatOk:
 15703 0000112D C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 15704 00001132 C3                      		retn
 15705                                  ; ---------------------------------------------------------------------------
 15706                                  
 15707                                  ; 16/10/2022
 15708                                  
 15709                                  ; ==========================================================================
 15710                                  ;
 15711                                  ; VerifyTrack:
 15712                                  ;
 15713                                  ; input: ES:di points to bds for drive
 15714                                  ; ==========================================================================
 15715                                  
 15716                                  		; 24/12/2023 - Retro DOS 5.0
 15717                                  VerifyTrack:
 15718 00001133 1E                      		push	ds
 15719 00001134 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 15720 00001138 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15721                                  
 15722                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 15723                                  
 15724 0000113B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 15725 0000113E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 15726 00001141 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 15727 00001144 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 15728                                  					; Get option flag word
 15729 00001146 1F                      		pop	ds
 15730 00001147 C606[2001]04            		mov	byte [rflag], 4	; romverify
 15731 0000114C 890E[3301]              		mov	[curtrk], cx
 15732 00001150 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 15733 00001153 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15734                                  
 15735                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 15736                                  		; specified if not we should go to the normal track verification
 15737                                  		; routine. If fast format has been specified we should get the
 15738                                  		; number of tracks to be verified and check it to see if it is
 15739                                  		; > 255. If it is then it is an error and we should go to
 15740                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 15741                                  		; sectors per track to get the total number of sectors to be
 15742                                  		; verified. This should also be less than equal to 255
 15743                                  		; otherwise we go to same error exit. If everything is okay
 15744                                  		; we initialise cx to the total sectors. use ax as a temporary
 15745                                  		; register.
 15746                                  
 15747                                  					; Special function requested?	
 15748 00001157 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 15749 0000115A 7421                    		jz	short NormVerifyTrack
 15750 0000115C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 15751 0000115E 08E4                    		or	ah, ah
 15752 00001160 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 15753 00001162 F6E1                    		mul	cl
 15754 00001164 08E4                    		or	ah, ah
 15755 00001166 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 15756 00001168 89C1                    		mov	cx, ax
 15757                                  		; 24/12/2023
 15758 0000116A 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15759                                  		; 10/12/2022
 15760                                  		;test	byte [es:di+35], 1
 15761                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15762                                  					; fnon_removable
 15763 0000116F 740C                    		jz	short NormVerifyTrack
 15764                                  					; Multitrack operation = on?
 15765                                  		; 10/12/2022
 15766                                  		; 19/10/2022
 15767 00001171 F606[A004]80            		test	byte [multrk_flag], 80h
 15768                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15769                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 15770 00001176 7405                    		jz	short NormVerifyTrack
 15771 00001178 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 15772                                  NormVerifyTrack:
 15773 0000117D 31C0                    		xor	ax, ax		; 1st sector
 15774 0000117F 31DB                    		xor	bx, bx
 15775 00001181 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 15776 00001185 E83F00                  		call	TrackIo
 15777 00001188 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 15778 0000118D C3                      		retn
 15779                                  ; ---------------------------------------------------------------------------
 15780                                  
 15781                                  VerifyTrack_Err:
 15782 0000118E B401                    		mov	ah, 1
 15783 00001190 E916FC                  		jmp	maperror
 15784                                  ; ---------------------------------------------------------------------------
 15785                                  
 15786                                  ; 16/10/2022
 15787                                  
 15788                                  ; ==========================================================================
 15789                                  ;
 15790                                  ; ReadTrack:
 15791                                  ;
 15792                                  ; input: ES:di points to bds for drive
 15793                                  ;
 15794                                  ; ==========================================================================
 15795                                  
 15796                                  ReadTrack:
 15797 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 15798 00001198 EB05                    		jmp	short ReadWriteTrack
 15799                                  ; ---------------------------------------------------------------------------
 15800                                  
 15801                                  WriteTrack:
 15802                                  
 15803                                  ; ==========================================================================
 15804                                  ;
 15805                                  ; WriteTrack:
 15806                                  ;
 15807                                  ; input: ES:di points to bds for drive
 15808                                  ;
 15809                                  ; ==========================================================================
 15810                                  				
 15811 0000119A C606[2001]03            		mov	byte [rflag], 3	; romwrite
 15812                                  
 15813                                  		; Fall into ReadWriteTrack
 15814                                  
 15815                                  ; ==========================================================================
 15816                                  ;
 15817                                  ; readWriteTrack:
 15818                                  ;
 15819                                  ; input:
 15820                                  ;    ES:di points to bds for drive
 15821                                  ;    rFlag - 2 for read,3 for write
 15822                                  ;
 15823                                  ; ==========================================================================
 15824                                  
 15825                                  ReadWriteTrack:	
 15826                                  		; save bds pointer segment so we can use it to access
 15827                                  		; our packet. Notice that this is not the standard register
 15828                                  		; assignment for accessing packets
 15829                                  		
 15830                                  		; 19/10/2022
 15831 0000119F 06                      		push	es
 15832 000011A0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 15833 000011A4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15834 000011A8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 15835 000011AC A3[3301]                		mov	[curtrk], ax
 15836 000011AF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 15837 000011B3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 15838 000011B6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 15839 000011BA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 15840 000011BE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 15841                                  					; Get transfer address
 15842                                  
 15843                                  		; we just trashed our packet address, but we no longer care
 15844                                  
 15845 000011C2 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 15846 000011C6 07                      		pop	es
 15847                                  
 15848                                  		; Fall into TrackIo
 15849                                  
 15850                                  ; =============== S U B	R O U T	I N E =======================================
 15851                                  
 15852                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15853                                  
 15854                                  ; ==========================================================================
 15855                                  ;
 15856                                  ; TrackIo:
 15857                                  ;    performs track read/write/verify
 15858                                  ;
 15859                                  ;   input:
 15860                                  ;      rFlag	- 2 = read
 15861                                  ;		  3 = write
 15862                                  ;		  4 = verify
 15863                                  ;      AX	- Index into track table of first sector to io
 15864                                  ;      CX	- Number of sectors to io
 15865                                  ;      Xfer_Seg:BX - Transfer address
 15866                                  ;      ES:DI	- Pointer to bds
 15867                                  ;      CurTrk	- Current cylinder
 15868                                  ;      CurHd	- Current head
 15869                                  ;
 15870                                  ; ==========================================================================
 15871                                  
 15872                                  ; 16/03/2019 - Retro DOS v4.0
 15873                                  
 15874                                  		; 24/12/2023 - Retro DOS 5.0		
 15875                                  
 15876                                  		; 19/10/2022
 15877                                  TrackIo:
 15878                                  					; Procedure `disk' will pop stack to
 15879 000011C7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 15880 000011CB E8A9F7                  		call	checksingle	; Ensure correct disk is in drv
 15881 000011CE 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15882                                  					; See if we have already set	disk
 15883 000011D3 7407                    		jz	short Dptalreadyset ; base table
 15884 000011D5 50                      		push	ax		; set up tables	and variables for i/o
 15885 000011D6 51                      		push	cx
 15886 000011D7 E8A0F9                  		call	iosetup
 15887 000011DA 59                      		pop	cx
 15888 000011DB 58                      		pop	ax
 15889                                  Dptalreadyset:				; Point si at the table entry of the			
 15890 000011DC BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 15891                                  		; 24/12/2023
 15892                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 15893                                  		;add	ax, ax
 15894 000011DF D1E0                    		shl	ax, 1
 15895 000011E1 D1E0                    		shl	ax, 1
 15896 000011E3 01C6                    		add	si, ax
 15897                                  
 15898                                  		; WE WANT:
 15899                                  		; CX to	be the number of times we have to loop
 15900                                  		; DX to	be the number of sectors we read on each iteration
 15901                                  		
 15902 000011E5 BA0100                  		mov	dx, 1
 15903                                  
 15904                                  		; 24/12/2023
 15905 000011E8 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 15906                                  		; 12/12/2022
 15907                                  		;test	byte [es:di+23h], 8
 15908                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 15909                                  					; good_tracklayout
 15910 000011ED 7402                    		jz	short ionextsector
 15911                                  		
 15912 000011EF 87CA                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 15913                                  ionextsector:
 15914 000011F1 51                      		push	cx
 15915 000011F2 52                      		push	dx
 15916 000011F3 46                      		inc	si
 15917 000011F4 46                      		inc	si		; Skip over the	cylinder and head in
 15918                                  					; the track table
 15919 000011F5 AC                      		lodsb			; Get sector ID	from track table
 15920 000011F6 A2[3101]                		mov	[cursec], al
 15921                                  
 15922                                  		; assumptions for a fixed disk multi-track disk	i/o
 15923                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 15924                                  		;     only CL is valid.
 15925                                  		; 2). Sector size should be set	to 512 bytes.
 15926                                  		; 3). Good track layout
 15927                                  		
 15928                                  		; 24/12/2023
 15929 000011F9 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15930                                  		; 12/12/2022
 15931                                  		;test	byte [es:di+23h], 1
 15932                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15933                                  					; fnon_removable ; Fixed disk?
 15934 000011FE 7414                    		jz	short IoRemovable ; No
 15935                                  
 15936                                  		; 12/12/2022
 15937 00001200 F606[A004]80            		test	byte [multrk_flag], 80h
 15938                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15939                                  						; Allow multi-track operation?
 15940 00001205 740D                    		jz	short IoRemovable ; No,don't do that.
 15941 00001207 8916[2201]              		mov	[seccnt], dx
 15942 0000120B 89D0                    		mov	ax, dx
 15943 0000120D E823FA                  		call	Disk
 15944 00001210 5A                      		pop	dx
 15945 00001211 59                      		pop	cx
 15946 00001212 F8                      		clc
 15947 00001213 C3                      		retn
 15948                                  ; ---------------------------------------------------------------------------
 15949                                  
 15950                                  IoRemovable:
 15951 00001214 AC                      		lodsb			; Get sector size index	from track
 15952                                  					; table	and save it
 15953 00001215 50                      		push	ax
 15954 00001216 56                      		push	si
 15955 00001217 1E                      		push	ds		; Save Bios_Data
 15956 00001218 50                      		push	ax
 15957 00001219 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 15958                                  					; Fetch	EOT while ds-> Bios_Data
 15959 0000121D C536[2D01]              		lds	si, [dpt]
 15960 00001221 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 15961 00001224 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 15962 00001227 58                      		pop	ax
 15963 00001228 1F                      		pop	ds
 15964 00001229 88D0                    		mov	al, dl
 15965 0000122B A3[2201]                		mov	[seccnt], ax
 15966 0000122E E802FA                  		call	Disk
 15967 00001231 5E                      		pop	si		; Advance buffer pointer by adding
 15968                                  					; sector size
 15969                                  		;pop	ax
 15970                                  		; 24/12/2023
 15971 00001232 59                      		pop	cx
 15972                                  
 15973                                  		; 02/09/2023 (PCDOS 7.1)
 15974                                  		;call	SectorSizeIndexToSectorSize
 15975                                  		;mov	cl, al	; 24/12/2023
 15976 00001233 B88000                  		mov	ax, 128
 15977 00001236 D3E0                    		shl	ax, cl
 15978                                  
 15979 00001238 01C3                    		add	bx, ax
 15980 0000123A 5A                      		pop	dx
 15981 0000123B 59                      		pop	cx
 15982 0000123C E2B3                    		loop	ionextsector
 15983 0000123E 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15984                                  		;jz	short NoNeedDone
 15985                                  		; 12/12/2022
 15986 00001243 7404                    		je	short NoNeedDone2
 15987 00001245 E877F9                  		call	done		; set time of last access, and reset
 15988                                  					; entries in Dpt.
 15989                                  NoNeedDone:
 15990 00001248 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 15991                                  NoNeedDone2:
 15992 00001249 C3                      		retn
 15993                                  
 15994                                  ; =============== S U B	R O U T	I N E =======================================
 15995                                  
 15996                                  ; ---------------------------------------------------------------------------
 15997                                  ;
 15998                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 15999                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 16000                                  ; are permissible.
 16001                                  ;
 16002                                  ; On Input   AX contains sector size in bytes
 16003                                  ; On Output  AL Contains index
 16004                                  ; All other registers preserved
 16005                                  ;
 16006                                  ; ---------------------------------------------------------------------------
 16007                                  
 16008                                  ; 02/09/2023
 16009                                  ;SectSizeToSectIndex:
 16010                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16011                                  ;					; examine upper	byte only
 16012                                  ;		ja	short OneK
 16013                                  ;		mov	al, ah		; value	in AH is the index!
 16014                                  ;		retn
 16015                                  
 16016                                  ; ---------------------------------------------------------------------------
 16017                                  ;
 16018                                  ;OneK:
 16019                                  ;		mov	al, 3
 16020                                  ;		retn
 16021                                  
 16022                                  ; =============== S U B	R O U T	I N E =======================================
 16023                                  
 16024                                  ; 02/09/2023
 16025                                  ;SectorSizeIndexToSectorSize:
 16026                                  ;		mov	cl, al
 16027                                  ;		mov	ax, 128
 16028                                  ;		shl	ax, cl
 16029                                  ;		retn
 16030                                  
 16031                                  ; =============== S U B	R O U T	I N E =======================================
 16032                                  
 16033                                  ; 16/10/2022
 16034                                  
 16035                                  ; ---------------------------------------------------------------------------
 16036                                  ;
 16037                                  ; SetDASD
 16038                                  ;
 16039                                  ; Set up the rom for formatting.
 16040                                  ; we have to tell the rom bios what type of disk is in the drive.
 16041                                  ;
 16042                                  ; On Input   - ES:di - Points to bds
 16043                                  ;
 16044                                  ; ---------------------------------------------------------------------------
 16045                                  
 16046                                  		; 24/12/2023 - Retro DOS 5.0
 16047                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 16048                                  
 16049                                  		; 19/10/2022
 16050                                  SetDasd:
 16051 0000124A 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 16052                                  					; See if we've previously set dasd type
 16053 0000124F 740C                    		jz	short DoSetDasd
 16054                                  		; 24/12/2023
 16055 00001251 26F6453F80              		test	byte [es:di+3Fh], 80h
 16056                                  		; 10/12/2022
 16057                                  		;test	byte [es:di+23h], 80h
 16058                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 16059                                  					; set_dasd_true
 16060 00001256 7446                    		jz	short DasdHasBeenSet
 16061                                  		; 24/12/2023
 16062 00001258 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 16063                                  		; 10/12/2022
 16064                                  		;and	byte [es:di+23h], 7Fh
 16065                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 16066                                  					; ~set_dasd_true
 16067                                  DoSetDasd:
 16068 0000125D C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 16069 00001262 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 16070 00001267 B004                    		mov	al, 4
 16071                                  		; 24/12/2023
 16072 00001269 268A653E                		mov	ah, [es:di+3Eh]
 16073                                  		; 02/09/2023
 16074                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 16075 0000126D 80FC02                  		cmp	ah, 2
 16076                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16077                                  					; DEV_3INCH720KB
 16078 00001270 7414                    		jz	short DoSet
 16079                                  		; 24/12/2023
 16080 00001272 B001                    		mov	al, 1
 16081                                  		;cmp	ah, 1
 16082 00001274 38C4                    		cmp	ah, al	; 1
 16083                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 16084                                  					; DEV_5INCH96TPI
 16085                                  		;jz	short GotBig
 16086                                  		; 24/12/2023
 16087                                  		;mov	al, 1
 16088                                  		;jmp	short DoSet
 16089                                  		; 02/09/2023
 16090 00001276 750E                    		jnz	short DoSet
 16091                                  GotBig:
 16092                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 16093                                  		; 02/09/2023
 16094 00001278 40                      		inc	ax  ; mov al, 2
 16095 00001279 803E[A805]00            		cmp	byte [mediatype], 0
 16096 0000127E 7506                    		jnz	short DoSet
 16097                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 16098                                  		; 10/12/2022
 16099                                  		;inc	al  ; al = 3
 16100                                  		; 18/12/2022
 16101 00001280 40                      		inc	ax  ; al = 3
 16102 00001281 C606[3B01]54            		mov	byte [gap_patch], 54h
 16103                                  DoSet:
 16104 00001286 1E                      		push	ds
 16105 00001287 56                      		push	si
 16106                                  
 16107                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 16108                                  		; 02/09/2023
 16109 00001288 31F6                    		xor	si, si
 16110 0000128A 8EDE                    		mov	ds, si	; 0
 16111                                  
 16112 0000128C C5367800                		lds	si, [DSKADR]
 16113                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 16114                                  		;;lds	si, ds:78h
 16115                                  
 16116 00001290 C644090F                		mov	byte [si+9], 0Fh ;
 16117                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 16118 00001294 5E                      		pop	si
 16119 00001295 1F                      		pop	ds
 16120 00001296 B417                    		mov	ah, 17h
 16121 00001298 268A5504                		mov	dl, [es:di+4]
 16122 0000129C CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 16123                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 16124                                  DasdHasBeenSet:
 16125 0000129E 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 16126 000012A2 8826[3701]              		mov	[formt_eot], ah
 16127 000012A6 C3                      		retn
 16128                                  
 16129                                  ; =============== S U B	R O U T	I N E =======================================
 16130                                  
 16131                                  ; 16/10/2022
 16132                                  
 16133                                  ; ---------------------------------------------------------------------------
 16134                                  ;
 16135                                  ; Set Media Type for Format
 16136                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 16137                                  ; BPB area in the BDS can be handled by the rom.
 16138                                  ; On Input, ES:DI -> current BDS.
 16139                                  ; The status of the operation is returned in AL
 16140                                  ;
 16141                                  ;	- 0 - if the support is available,and the combination is valid.
 16142                                  ;	- 1 - no rom support
 16143                                  ;	- 2 - illegal combination
 16144                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 16145                                  ;
 16146                                  ; Flags also may be altered. All other registers preserved.
 16147                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 16148                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 16149                                  ; to the one returned. the original pointer to the disk base table is stored
 16150                                  ; in TempDpt, until it is restored.
 16151                                  ;
 16152                                  ; ---------------------------------------------------------------------------
 16153                                  
 16154                                  		; 24/12/2023 - Retro DOS 5.0
 16155                                  
 16156                                  		; 19/10/2022
 16157                                  SetMediaForFormat:	
 16158 000012A7 51                      		push	cx
 16159 000012A8 52                      		push	dx
 16160                                  
 16161                                  		; If we have a format error, then do not change Dpt, TempDpt.
 16162                                  		; but we need to call int 13h, ah=18h again.
 16163                                  
 16164 000012A9 803E[AA05]01            		cmp	byte [had_format_error], 1
 16165 000012AE 7425                    		jz	short SkipSaveDskAdr
 16166 000012B0 30C0                    		xor	al, al		; If already done return 0
 16167 000012B2 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16168 000012B7 7502                    		jnz	short DoSetMediaForFormat
 16169 000012B9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 16170                                  ; ---------------------------------------------------------------------------
 16171                                  
 16172                                  DoSetMediaForFormat:
 16173 000012BB 06                      		push	es
 16174 000012BC 56                      		push	si
 16175                                  
 16176                                  		; 02/09/2023
 16177                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 16178 000012BD 31F6                    		xor	si, si ; 0
 16179 000012BF 8EC6                    		mov	es, si
 16180                                  
 16181 000012C1 26C4367800              		les	si, [es:DSKADR]
 16182                                  		;les	si, es:78h	; [es:DSKADR]
 16183                                  					; Get pointer to disk base table
 16184 000012C6 8936[2D01]              		mov	[dpt], si
 16185 000012CA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16186                                  
 16187                                  		; Initialize the head settle time to 0Fh. See the offsets
 16188                                  		; given in dskprm.inc.
 16189                                  
 16190 000012CE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16191 000012D3 5E                      		pop	si
 16192 000012D4 07                      		pop	es
 16193                                  SkipSaveDskAdr:
 16194                                  		; 24/12/2023
 16195 000012D5 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 16196                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 16197 000012D9 49                      		dec	cx
 16198 000012DA 80E503                  		and	ch, 3
 16199 000012DD D0CD                    		ror	ch, 1
 16200 000012DF D0CD                    		ror	ch, 1
 16201 000012E1 86CD                    		xchg	ch, cl
 16202 000012E3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 16203 000012E7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16204 000012EB 06                      		push	es
 16205 000012EC 1E                      		push	ds
 16206 000012ED 56                      		push	si
 16207 000012EE 57                      		push	di
 16208 000012EF B418                    		mov	ah, 18h
 16209 000012F1 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 16210                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 16211 000012F3 7231                    		jc	short FormaStatErr
 16212 000012F5 803E[AA05]01            		cmp	byte [had_format_error], 1
 16213 000012FA 7423                    		jz	short skip_disk_base_setting
 16214 000012FC 06                      		push	es		; Save segment returned	by the rom
 16215                                  
 16216                                  		; 02/09/2023
 16217                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 16218 000012FD 31F6                    		xor	si, si
 16219 000012FF 8EC6                    		mov	es, si ; 0
 16220 00001301 06                      		push	es ; * ; 02/09/2023
 16221                                  
 16222 00001302 26C4367800              		les	si, [es:DSKADR]
 16223                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 16224                                  					; Get current disk base	table
 16225 00001307 8936[AB05]              		mov	[tempdpt], si
 16226 0000130B 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 16227                                  
 16228                                  		; 02/09/2023
 16229                                  		;;mov	es, [zeroseg]
 16230                                  		;xor	si, si ; 0
 16231                                  		;mov	es, si
 16232 0000130F 07                      		pop	es ; * ; 02/09/2023
 16233                                  
 16234                                  		;mov	es:78h,	di
 16235 00001310 26893E7800              		mov	[es:DSKADR], di
 16236                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 16237 00001315 268F067A00              		pop	word [es:DSKADR+2]
 16238 0000131A C606[A905]01            		mov	byte [media_set_for_format], 1
 16239                                  skip_disk_base_setting:
 16240 0000131F 30C0                    		xor	al, al		; Legal	combination + rom support code
 16241                                  		;mov	ds:had_format_error, al	; Reset	the flag
 16242 00001321 A2[AA05]                		mov	[had_format_error], al
 16243 00001324 EB0E                    		jmp	short PopStatRet
 16244                                  ; ---------------------------------------------------------------------------
 16245                                  
 16246                                  FormaStatErr:
 16247                                  		; 10/12/2022
 16248 00001326 B003                    		mov	al, 3
 16249                                  
 16250 00001328 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 16251                                  					; Illegal combination =	0Ch
 16252 0000132B 7406                    		jz	short FormatStatIllegalComb
 16253 0000132D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 16254 00001330 7402                    		jz	short FormatStatTimeOut
 16255                                  		; 10/12/2022
 16256                                  		;dec	al
 16257                                  		; 18/12/2022
 16258 00001332 48                      		dec	ax
 16259                                  		; al = 2
 16260                                  		;mov	al, 1		; Function not supported.
 16261                                  		;jmp	short PopStatRet
 16262                                  ; ---------------------------------------------------------------------------
 16263                                  
 16264                                  FormatStatIllegalComb:
 16265                                  		; 10/12/2022
 16266                                  		;dec	al	; 3 -> 2 or 2 -> 1
 16267                                  		; 18/12/2022
 16268 00001333 48                      		dec	ax
 16269                                  		; al = 2
 16270                                  		;mov	al, 2		; Function supported, but
 16271                                  					; Illegal sect/trk,trk combination.
 16272                                  		; 10/12/2022
 16273                                  		;jmp	short PopStatRet
 16274                                  ; ---------------------------------------------------------------------------
 16275                                  
 16276                                  FormatStatTimeOut:
 16277                                  		; 10/12/2022
 16278                                  		; al = 3
 16279                                  		;mov	al, 3		; Function supported, but
 16280                                  					; Media	not present.
 16281                                  PopStatRet:
 16282 00001334 5F                      		pop	di
 16283 00001335 5E                      		pop	si
 16284 00001336 1F                      		pop	ds
 16285 00001337 07                      		pop	es
 16286                                  SetMediaRet:
 16287 00001338 5A                      		pop	dx
 16288 00001339 59                      		pop	cx
 16289 0000133A C3                      		retn
 16290                                  
 16291                                  ; =============== S U B	R O U T	I N E =======================================
 16292                                  
 16293                                  ; 16/10/2022
 16294                                  
 16295                                  ; ---------------------------------------------------------------------------
 16296                                  ;
 16297                                  ; RESET THE DRIVE
 16298                                  ;
 16299                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 16300                                  ; slow head settle time for the next operation. this is because the reset
 16301                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 16302                                  ; time around - there is a problem with 3.5" drives in that the head does
 16303                                  ; not settle down in time,even for read operations!!
 16304                                  ;
 16305                                  ; ---------------------------------------------------------------------------
 16306                                  
 16307                                  ResetDisk:
 16308 0000133B 50                      		push	ax
 16309                                  
 16310                                  		; 02/09/2023
 16311 0000133C B80100                  		mov	ax, 1 ; PCDOS 7.1
 16312 0000133F 3806[A905]              		cmp	[media_set_for_format], al ; 1
 16313                                  		;cmp	byte [media_set_for_format], 1
 16314                                  					; Reset while formatting?
 16315 00001343 7503                    		jnz	short ResetDisk_cont
 16316                                  					; Then verify operation in "fmt & vrfy"
 16317                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 16318 00001345 A2[AA05]                		mov	[had_format_error], al ; 1
 16319                                  ResetDisk_cont:
 16320                                  		; 02/09/2023 (ah=0)
 16321                                  		;xor	ah, ah		; So signals that we had a format error
 16322 00001348 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 16323                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 16324 0000134A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 16325                                  					; Zap up the speed
 16326 0000134F 58                      		pop	ax
 16327 00001350 C3                      		retn
 16328                                  
 16329                                  ; =============== S U B	R O U T	I N E =======================================
 16330                                  
 16331                                  ; 16/10/2022
 16332                                  
 16333                                  ; ---------------------------------------------------------------------------
 16334                                  ;
 16335                                  ; This routine sets up the drive parameter table with the values needed for
 16336                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 16337                                  ;
 16338                                  ; on entry  -	ES:DI - points to bds for the drive
 16339                                  ;		Xfer_Seg:BX - points to trkbuf
 16340                                  ;		AL    - number of sectors
 16341                                  ;		AH    - int 13 function code
 16342                                  ;		CL    - sector number for verify
 16343                                  ;		DS    - Bios_Data
 16344                                  ;
 16345                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 16346                                  ;		AX and flags are the results of the int 13
 16347                                  ;
 16348                                  ; ---------------------------------------------------------------------------
 16349                                  
 16350                                  		; 24/12/2023 - Retro DOS 5.0
 16351                                  
 16352                                  		; 19/10/2022
 16353                                  ToRom:
 16354 00001351 53                      		push	bx
 16355 00001352 56                      		push	si
 16356                                  
 16357                                  		; Compaq bug fix - check whether we are using new ROM
 16358                                  		; functionality to set up format, not merely if it exists.
 16359                                  		; This was formerly a check against [new_rom]
 16360                                  
 16361 00001353 F606[A905]01            		test	byte [media_set_for_format], 1
 16362 00001358 7534                    		jnz	short GotValidDpt
 16363 0000135A 50                      		push	ax
 16364 0000135B 06                      		push	es		; Save bds segment
 16365                                  		; 24/12/2023
 16366 0000135C 26807D3E02              		cmp	byte [es:di+3Eh], 2
 16367                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16368                                  					; ffSmall ; is it a 3.5" drive?
 16369                                  		; 24/12/2023
 16370                                  		;pushf	; not necessary	; (Save	the cmp	result)
 16371 00001361 8E06[1A00]              		mov	es, [zeroseg]
 16372                                  		;les	si, es:78h	; Get pointer to disk base table
 16373 00001365 26C4367800              		les	si, [es:DSKADR]
 16374                                  		;mov	word ptr ds:dpt, si
 16375                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 16376 0000136A 8936[2D01]              		mov	[dpt], si
 16377 0000136E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16378                                  		
 16379 00001372 A0[3701]                		mov	al, [formt_eot]
 16380 00001375 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 16381 00001379 A0[3B01]                		mov	al, [gap_patch]
 16382 0000137C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 16383                                  					; Important for	format
 16384 00001380 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16385                                  					; Assume we are	doing a	seek operation
 16386                                  					; Setup	motor start correctly for 3.5" drives
 16387                                  		; 24/12/2023
 16388                                  		;popf			; Get result of	earlier	cmp
 16389 00001385 7505                    		jnz	short MotorStrtOK
 16390 00001387 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 16391                                  MotorStrtOK:
 16392 0000138C 07                      		pop	es		; Restore bds segment
 16393 0000138D 58                      		pop	ax
 16394                                  GotValidDpt:
 16395 0000138E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 16396 00001392 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 16397 00001394 268A5504                		mov	dl, [es:di+4]	; Set drive number
 16398 00001398 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 16399 0000139C 06                      		push	es		; Save bds segment
 16400 0000139D 8E06[A804]              		mov	es, [xfer_seg]
 16401 000013A1 CD13                    		int	13h		; DISK -
 16402 000013A3 07                      		pop	es		; Restore bds segment
 16403 000013A4 5E                      		pop	si
 16404 000013A5 5B                      		pop	bx
 16405 000013A6 C3                      		retn
 16406                                  
 16407                                  ; ---------------------------------------------------------------------------
 16408                                  
 16409                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16410                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 16411                                  
 16412                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 16413                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 16414                                  
 16415                                  ; ==========================================================================
 16416                                  ;
 16417                                  ; get the owner of the physical drive represented by the logical drive in al.
 16418                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 16419                                  ; if this is not the case, the system may hang, just following the linked list.
 16420                                  ;
 16421                                  ; ==========================================================================
 16422                                  
 16423                                  		; 24/12/2023 - Retro DOS 5.0
 16424                                  
 16425                                  		; 19/10/2022
 16426                                  ioctl_getown:
 16427 000013A7 E8FAF1                  		call	SetDrive
 16428 000013AA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 16429                                  					; Get physical drive number
 16430 000013AE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 16431                                  ownloop:
 16432 000013B2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 16433 000013B6 7507                    		jnz	short getnextBDS
 16434                                  		; 24/12/2023
 16435 000013B8 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 16436                                  		; 10/12/2022
 16437                                  		;test	byte [es:di+23h], 20h
 16438                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 16439                                  					; fi_own_physical
 16440 000013BD 7514                    		jnz	short exitown
 16441                                  getnextBDS:
 16442 000013BF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 16443 000013C2 EBEE                    		jmp	short ownloop
 16444                                  ; ---------------------------------------------------------------------------
 16445                                  
 16446                                  ; ==========================================================================
 16447                                  ;
 16448                                  ; set the ownership of the physical drive represented by the logical drive
 16449                                  ; in al to al.
 16450                                  ;
 16451                                  ; ==========================================================================
 16452                                  
 16453                                  		; 24/12/2023 - Retro DOS 5.0
 16454                                  
 16455                                  		; 19/10/2022
 16456                                  ioctl_setown:
 16457 000013C4 E8DDF1                  		call	SetDrive
 16458 000013C7 C606[7A00]01            		mov	byte [fsetowner], 1
 16459                                  					; set flag for CheckSingle to look at.
 16460 000013CC E8A8F5                  		call	checksingle
 16461                                  		; 02/09/2023
 16462 000013CF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 16463                                  		;mov	byte [fsetowner], 0
 16464                                  					; set ownership	of drive reset flag
 16465                                  		; Fall into ExitOwn
 16466                                  
 16467                                  ; ==========================================================================
 16468                                  ;
 16469                                  ; if there is only one logical drive assigned to this physical drive, return
 16470                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 16471                                  ;
 16472                                  ; ==========================================================================
 16473                                  
 16474                                  		; 24/12/2023 - Retro DOS 5.0
 16475                                  exitown:
 16476 000013D3 30C9                    		xor	cl, cl
 16477                                  		; 24/12/2023
 16478 000013D5 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 16479                                  		; 12/12/2022
 16480                                  		;test	byte [es:di+23h], 10h
 16481                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 16482                                  					; fi_am_mult
 16483 000013DA 7406                    		jz	short exitnomult
 16484 000013DC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 16485                                  					; Get logical drive number
 16486                                  					; Get it 1-based
 16487 000013E0 FEC1                    		inc	cl
 16488                                  exitnomult:
 16489 000013E2 C51E[1200]              		lds	bx, [ptrsav]
 16490 000013E6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 16491                                  					; Exit normal termination
 16492                                  		; 12/12/2022
 16493                                  		; cf=0
 16494                                  		;clc
 16495 000013E9 C3                      		retn
 16496                                  
 16497                                  ; =============== S U B	R O U T	I N E =======================================
 16498                                  
 16499                                  ; 16/10/2022
 16500                                  
 16501                                  ; ---------------------------------------------------------------------------
 16502                                  ;
 16503                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 16504                                  ; only if the first byte of TempDpt is not -1.
 16505                                  ; all registers (including flags) are preserved.
 16506                                  ;
 16507                                  ; ---------------------------------------------------------------------------
 16508                                  
 16509                                  		; 24/12/2023
 16510                                  		; 19/10/2022
 16511                                  RestoreOldDpt:
 16512                                  		; if we have already restored the disk base table earlier,
 16513                                  		; do not do it again.
 16514                                  
 16515 000013EA 50                      		push	ax
 16516 000013EB 30C0                    		xor	al, al
 16517 000013ED A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 16518 000013F0 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 16519 000013F4 08C0                    		or	al, al
 16520 000013F6 7418                    		jz	short DontRestore
 16521 000013F8 56                      		push	si
 16522 000013F9 1E                      		push	ds
 16523 000013FA 06                      		push	es
 16524 000013FB C536[AB05]              		lds	si, [tempdpt]
 16525                                  
 16526                                  		; 17/10/2022
 16527                                  		;mov	es, [cs:BIOSDATAWORD]
 16528                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16529                                  		;mov	es, [es:zeroseg]
 16530                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 16531                                  
 16532                                  		; 24/12/2023
 16533 000013FF 31C0                    		xor	ax, ax
 16534 00001401 8EC0                    		mov	es, ax ; 0
 16535                                  
 16536                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 16537 00001403 2689367800              		mov	[es:DSKADR], si
 16538                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 16539 00001408 268C1E7A00              		mov	[es:DSKADR+2], ds
 16540 0000140D 07                      		pop	es
 16541 0000140E 1F                      		pop	ds
 16542 0000140F 5E                      		pop	si
 16543                                  DontRestore:
 16544 00001410 58                      		pop	ax
 16545                                  		; 12/12/2022
 16546                                  		; cf=0
 16547                                  		;clc			;  Clear carry
 16548 00001411 C3                      		retn
 16549                                  
 16550                                  ; ---------------------------------------------------------------------------
 16551                                  
 16552                                  ; 16/10/2022
 16553                                  
 16554                                  ; ==========================================================================
 16555                                  ;	get media id
 16556                                  ; ==========================================================================
 16557                                  ;
 16558                                  ; FUNCTION: get the volume label,the system id and the serial number from
 16559                                  ;	    the media that has the extended boot record.
 16560                                  ;	    for the conventional media,this routine will return "unknown
 16561                                  ;	    media type" error to dos.
 16562                                  ;
 16563                                  ; INPUT :   ES:di -> bds table for this drive.
 16564                                  ;
 16565                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 16566                                  ;	    if carry set,then al contains the device driver error number
 16567                                  ;	    that will be returned to dos.
 16568                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 16569                                  ;
 16570                                  ; SUBROUTINES TO BE CALLED:
 16571                                  ;	BootIo:NEAR
 16572                                  ;
 16573                                  ; LOGIC:
 16574                                  ;	to recognize the extended boot record,this logic will actually
 16575                                  ;	access the boot sector even if it is a hard disk.
 16576                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 16577                                  ;	field of bpb and the extended boot signature.
 16578                                  ;
 16579                                  ; {
 16580                                  ;	get logical drive number from bds table;
 16581                                  ;	rFlag = read operation;
 16582                                  ;	BootIo;		 /*get the media boot record into the buffer
 16583                                  ;	if (no error) then
 16584                                  ;	     if (extended boot record) then
 16585                                  ;		{ set volume label,volume serial number and system id
 16586                                  ;		  of the request packet to those of the boot record;
 16587                                  ;		};
 16588                                  ;	     else		  /*not an extended bpb */
 16589                                  ;		{ set register al to "unknown media.." error code;
 16590                                  ;		  set carry bit;
 16591                                  ;		};
 16592                                  ;	else
 16593                                  ;	     ret;	/*already error code is set in the register al
 16594                                  ;
 16595                                  ; ==========================================================================
 16596                                  
 16597                                  ;size_of_EXT_BOOT_SERIAL equ 4
 16598                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 16599                                  ;;size_of_EXT_SYSTEM_ID equ 8
 16600                                  
 16601                                  		; 24/12/2023 - Retro DOS 5.0
 16602                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 16603                                  
 16604                                  		; 19/10/2022
 16605                                  GetMediaId:
 16606 00001412 E8B000                  		call	ChangeLineChk
 16607 00001415 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 16608 00001419 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 16609 0000141E E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 16610 00001421 722E                    		jb	short IOCtl_If1
 16611                                  					; Valid? (0F0h-0FFh?)
 16612 00001423 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16613                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16614                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 16615                                  		; 24/12/2023
 16616 00001428 7225                    		jb	short IOCtl_If7		
 16617                                  
 16618                                  		; 24/12/2023
 16619                                  		; 10/12/2022
 16620                                  		;mov	si, disksector+26h
 16621                                  		;;;
 16622                                  		; 24/12/2023
 16623                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 16624 0000142A BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 16625 0000142D 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16626 00001432 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 16627 00001434 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 16628                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 16629                                  IOCtl_If3:
 16630                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16631                                  		;;;
 16632 00001437 803C29                  		cmp	byte [si], 29h
 16633                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16634                                  					; EXT_BOOT_SIGNATURE
 16635 0000143A 7512                    		jne	short IOCtl_If2	; not extended boot record
 16636 0000143C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 16637 00001440 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16638                                  		; 10/12/2022
 16639                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16640 00001444 46                      		inc	si
 16641                                  		; 24/12/2023
 16642                                  		; si = disksector+27h (BS_VolID)
 16643                                  		;      or disksector+43h (BS_FAT32_VolID)
 16644                                  
 16645 00001445 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16646                                  IOCtl_If4:		; 24/12/2023
 16647 00001448 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16648                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 16649                                  					; +size_of_EXT_SYSTEM_ID
 16650 0000144B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 16651                                  	
 16652                                  		; 10/12/2022
 16653                                  		; cf = 0
 16654                                  		;clc
 16655                                  
 16656 0000144D C3                      		retn
 16657                                  ; ---------------------------------------------------------------------------
 16658                                  
 16659                                  		; 24/12/2023
 16660                                  IOCtl_If2:
 16661 0000144E F9                      		stc	
 16662                                  IOCtl_If7:
 16663 0000144F B007                    		mov	al, 7		; error_unknown_media
 16664                                  		;stc
 16665                                  IOCtl_If6:
 16666                                  IOCtl_If1:
 16667 00001451 C3                      		retn
 16668                                  ; ---------------------------------------------------------------------------
 16669                                  
 16670                                  ; 16/10/2022
 16671                                  
 16672                                  ; ==========================================================================
 16673                                  ;  set media id
 16674                                  ; ==========================================================================
 16675                                  
 16676                                  ; function: set the volume label, the system id and the serial number of
 16677                                  ;	    the media that has the extended boot record.
 16678                                  ;	    for the conventional media, this routine will return "unknown
 16679                                  ;	    media.." error to dos.
 16680                                  ;	    this routine will also set the corresponding informations in
 16681                                  ;	    the bds table.
 16682                                  ;
 16683                                  ; input :   ES:di -> bds table for this drive.
 16684                                  ;
 16685                                  ; output:   the extended boot record in the media will be set according to
 16686                                  ;	    the request packet.
 16687                                  ;	    if carry set, then al contains the device driver error number
 16688                                  ;	    that will be returned to dos.
 16689                                  ;
 16690                                  ; subroutines to be called:
 16691                                  ;	BootIo:NEAR
 16692                                  ;
 16693                                  ; logic:
 16694                                  ;
 16695                                  ; {
 16696                                  ;	get drive_number from bds;
 16697                                  ;	rFlag = "read operation";
 16698                                  ;	BootIo;
 16699                                  ;	if (no error) then
 16700                                  ;	     if (extended boot record) then
 16701                                  ;		{ set volume label,volume serial number and system id
 16702                                  ;		  of the boot record to those of the request packet;
 16703                                  ;		  rFlag = "write operation";
 16704                                  ;		  get drive number from bds;
 16705                                  ;		  BootIo;	  /*write it back*/
 16706                                  ;		};
 16707                                  ;	     else		  /*not an extended bpb */
 16708                                  ;		{ set register al to "unknown media.." error code;
 16709                                  ;		  set carry bit;
 16710                                  ;		  ret;	 /*return back to caller */
 16711                                  ;		};
 16712                                  ;	else
 16713                                  ;	     ret;		 /*already error code is set */
 16714                                  ;
 16715                                  ; ==========================================================================
 16716                                  
 16717                                  		; 24/12/2023 - Retro DOS 5.0
 16718                                  
 16719                                  		; 19/10/2022
 16720                                  SetMediaId:
 16721 00001452 E87000                  		call	ChangeLineChk
 16722 00001455 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 16723                                  					; Logical drive	number
 16724 00001459 88C2                    		mov	dl, al
 16725 0000145B C606[2001]02            		mov	byte [rflag], 2	; romread
 16726 00001460 52                      		push	dx
 16727 00001461 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 16728 00001464 5A                      		pop	dx
 16729 00001465 72EA                    		jb	short IOCtl_If6
 16730                                  					; Valid? (0F0h-0FFh?)
 16731 00001467 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16732                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16733 0000146C 72E1                    		jb	short IOCtl_If7	; Brif not
 16734                                  
 16735                                  		; 24/12/2023
 16736                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16737                                  		;			; EXT_BOOT_SIGNATURE
 16738                                  		;jnz	short IOCtl_If7	; not extended boot record
 16739                                  		
 16740 0000146E 06                      		push	es		; Save BDS pointer
 16741 0000146F 57                      		push	di
 16742 00001470 1E                      		push	ds		; Point	ES To boot record
 16743 00001471 07                      		pop	es
 16744                                  
 16745                                  		; 24/12/2023
 16746                                  		;;;
 16747                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 16748 00001472 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 16749 00001475 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16750 0000147A 7403                    		jz      short IOCtl_If5	; FAT32 fs
 16751 0000147C 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 16752                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 16753                                  IOCtl_If5:
 16754                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16755 0000147F 803D29                  		cmp	byte [di], 29h
 16756 00001482 7404                    		je	short IOCtl_If8
 16757 00001484 5F                      		pop	di		; not extended boot record
 16758 00001485 07                      		pop	es
 16759                                  		;jmp	short IOCtl_If7
 16760                                  		; 24/12/2023
 16761 00001486 EBC6                    		jmp	short IOCtl_If2
 16762                                  IOCtl_If8:
 16763                                  		;;;
 16764                                  		; 24/12/2023
 16765                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16766 00001488 47                      		inc	di
 16767                                  		; di = disksector+27h (BS_VolID)
 16768                                  		;      or disksector+43h (BS_FAT32_VolID)
 16769                                  
 16770 00001489 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 16771 0000148D C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 16772 00001490 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16773                                  		
 16774                                  		; 24/12/2023
 16775                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16776                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 16777                                  		;			; +size_of_EXT_SYSTEM_ID
 16778                                  		;rep movsb
 16779 00001493 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 16780                                  
 16781 00001496 06                      		push	es		; point	ds back	to Bios_Data
 16782 00001497 1F                      		pop	ds
 16783 00001498 5F                      		pop	di		; restore bds pointer
 16784 00001499 07                      		pop	es
 16785 0000149A E8B2F3                  		call	mov_media_ids	; update the bds media id info.
 16786 0000149D 88D0                    		mov	al, dl
 16787 0000149F C606[2001]03            		mov	byte [rflag], 3	; romwrite
 16788 000014A4 E80600                  		call	BootIo		; write	it back.
 16789 000014A7 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 16790                                  					; make sure chk_media check the driver
 16791                                  					; return with error code from BootIo
 16792 000014AC C3                      		retn
 16793                                  ; ---------------------------------------------------------------------------
 16794                                  
 16795                                  		; 24/12/2023
 16796                                  ;IOCtl_If7:
 16797                                  ;		mov	al, 7		; error_unknown_media
 16798                                  ;		stc
 16799                                  ;IOCtl_If6:
 16800                                  ;		retn
 16801                                  
 16802                                  ; =============== S U B	R O U T	I N E =======================================
 16803                                  
 16804                                  ; 16/10/2022
 16805                                  
 16806                                  ; ---------------------------------------------------------------------------
 16807                                  ;	BootIo
 16808                                  ; ---------------------------------------------------------------------------
 16809                                  ;
 16810                                  ; function: read/write the boot record into boot sector.
 16811                                  ;
 16812                                  ; input :
 16813                                  ;	    al=logical drive number
 16814                                  ;	    rFlag = operation (read/write)
 16815                                  ;
 16816                                  ; output:   for read operation,the boot record of the drive specified in bds
 16817                                  ;	    be read into the DiskSector buffer.
 16818                                  ;	    for write operation,the DiskSector buffer image will be written
 16819                                  ;	    to the drive specified in bds.
 16820                                  ;	    if carry set,then al contains the device driver error number
 16821                                  ;	    that will be returned to dos.
 16822                                  ;	    AX,CX,DX register destroyed.
 16823                                  ;	    if carry set,then al will contain the error code from DiskIO.
 16824                                  ;
 16825                                  ; subroutines to be called:
 16826                                  ;	DiskIO:NEAR
 16827                                  ;
 16828                                  ; logic:
 16829                                  ;
 16830                                  ; {
 16831                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 16832                                  ;	sectorcount = 1;	 /*read 1 sector only */
 16833                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 16834                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 16835                                  ; }
 16836                                  ; ==========================================================================
 16837                                  
 16838                                  		; 19/10/2022
 16839                                  BootIo:	
 16840 000014AD 06                      		push	es
 16841 000014AE 57                      		push	di
 16842 000014AF 53                      		push	bx
 16843 000014B0 1E                      		push	ds
 16844 000014B1 07                      		pop	es		; Point ES: to Bios_Data
 16845                                  
 16846                                  		; Call DiskIO to read/write the boot sec. The parameters which
 16847                                  		; need to be initialized for this subroutine out here are
 16848                                  		; - Transfer address to Bios_Data:DiskSector
 16849                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 16850                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 16851                                  		; - Number of sectors <-- 1
 16852                                  
 16853 000014B2 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 16854 000014B5 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 16855 000014B7 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 16856 000014BB B90100                  		mov	cx, 1
 16857 000014BE E850F5                  		call	diskio
 16858 000014C1 5B                      		pop	bx
 16859 000014C2 5F                      		pop	di
 16860 000014C3 07                      		pop	es
 16861 000014C4 C3                      		retn
 16862                                  
 16863                                  ; =============== S U B	R O U T	I N E =======================================
 16864                                  
 16865                                  ; 16/10/2022
 16866                                  
 16867                                  ; ---------------------------------------------------------------------------
 16868                                  ;	ChangeLineChk
 16869                                  ; ---------------------------------------------------------------------------
 16870                                  ;
 16871                                  ; when the user calls get/set media id call before dos establishes the media
 16872                                  ; by calling "media_chk",the change line activity of the drive is going to be
 16873                                  ; lost.	this routine will check the change line activity and will save the
 16874                                  ; history in the flags.
 16875                                  ;
 16876                                  ; FUNCTION: check the change line error activity
 16877                                  ;
 16878                                  ; INPUT :  ES:di -> bds table.
 16879                                  ;
 16880                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 16881                                  ;
 16882                                  ; SUBROUTINES TO BE CALLED:
 16883                                  ;	Set_Changed_DL
 16884                                  ;
 16885                                  ; ---------------------------------------------------------------------------
 16886                                  
 16887                                  		; 24/12/2023 - Retro DOS 5.0
 16888                                  ChangeLineChk:	
 16889 000014C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16890 000014C9 08D2                    		or	dl, dl		; Fixed	disk?
 16891 000014CB 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 16892                                  		; 24/12/2023
 16893 000014CD 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 16894                                  		; 12/12/2022
 16895                                  		;test	byte [es:di+23h], 4
 16896                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 16897                                  					; return_fake_bpb
 16898 000014D2 751A                    		jnz	short ChangeLnChkRet
 16899 000014D4 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 16900 000014D9 7513                    		jnz	short ChangeLnChkRet
 16901 000014DB E8AD07                  		call	haschange	; This drive support change line?
 16902 000014DE 740E                    		jz	short ChangeLnChkRet ; Do nothing
 16903                                  
 16904                                  		; Execute the rom disk interrupt to check changeline activity.
 16905                                  
 16906 000014E0 B416                    		mov	ah, 16h
 16907 000014E2 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 16908                                  				; DL = drive to	check
 16909                                  				; Return: AH = disk change status
 16910 000014E4 7308                    		jnb	short ChangeLnChkRet
 16911 000014E6 53                      		push	bx
 16912 000014E7 BB4000                  		mov	bx, 40h		; fchanged
 16913                                  					; Update flag in BDS for this
 16914                                  					; physical drive
 16915 000014EA E87707                  		call	set_changed_dl
 16916 000014ED 5B                      		pop	bx
 16917                                  ChangeLnChkRet:				
 16918 000014EE C3                      		retn
 16919                                  
 16920                                  ; ---------------------------------------------------------------------------
 16921                                  
 16922                                  ; 16/10/2022
 16923                                  
 16924                                  ; ==========================================================================
 16925                                  ;	GetAccessFlag
 16926                                  ; ==========================================================================
 16927                                  ;
 16928                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 16929                                  ;
 16930                                  ; INPUT :
 16931                                  ;	    ES:di -> bds table
 16932                                  ;
 16933                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 16934                                  ;						 = 1 if disk i/o allowed.
 16935                                  ; ==========================================================================
 16936                                  
 16937                                  		; 24/12/2023 - Retro DOS 5.0
 16938                                  
 16939                                  		; 19/10/2022
 16940                                  GetAccessFlag:				
 16941 000014EF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16942 000014F3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16943                                  		;mov	al, 0		; Assume result	is unformatted
 16944                                  		; 10/12/2022
 16945 000014F6 28C0                    		sub	al, al
 16946                                  		; 24/12/2023
 16947 000014F8 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16948                                  		;test	word ptr es:[di+3Fh], 200h
 16949                                  		; 10/12/2022
 16950                                  		;test	byte [es:di+36], 02h
 16951                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 16952                                  					; unformatted_media
 16953 000014FD 7501                    		jnz	short GafDone	; Done if unformatted
 16954                                  		;inc	al		; Return true for formatted
 16955                                  		; 24/12/2023
 16956 000014FF 40                      		inc	ax
 16957                                  GafDone:				
 16958 00001500 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16959 00001503 C3                      		retn
 16960                                  ; ---------------------------------------------------------------------------
 16961                                  
 16962                                  ; 16/10/2022
 16963                                  
 16964                                  ; ==========================================================================
 16965                                  ;	SetAccessFlag
 16966                                  ; ==========================================================================
 16967                                  ;
 16968                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 16969                                  ;
 16970                                  ; input :
 16971                                  ;	    ES:di -> bds table
 16972                                  ;
 16973                                  ; output:   unformtted_media bit modified according to the user request
 16974                                  ; ==========================================================================
 16975                                  
 16976                                  		; 24/12/2023 - Retro DOS 5.0
 16977                                  
 16978                                  		; 19/10/2022
 16979                                  SetAccessFlag:				
 16980 00001504 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 16981 00001508 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16982                                  		; 24/12/2023
 16983 0000150B 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 16984                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 16985                                  		; 10/12/2022
 16986                                  		;and	byte [es:di+36], 0FDh
 16987                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 16988                                  					; ~unformatted_media
 16989 00001510 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16990 00001514 7505                    		jnz	short saf_Done
 16991                                  		; 24/12/2023
 16992 00001516 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16993                                  		;or	word ptr es:[di+3Fh], 200h
 16994                                  		; 15/04/2024
 16995                                  		; 10/12/2022
 16996                                  		;or	byte [es:di+36], 02h
 16997                                  		;;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 16998                                  					; unformatted_media
 16999                                  saf_Done:				
 17000 0000151B C3                      		retn
 17001                                  ; ---------------------------------------------------------------------------
 17002                                  
 17003                                  ; 16/10/2022
 17004                                  
 17005                                  ; ==========================================================================
 17006                                  ; Ioctl_Support_Query
 17007                                  ; ==========================================================================
 17008                                  ;
 17009                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 17010                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 17011                                  ; device attributes specifies if this function is supported.
 17012                                  ;
 17013                                  ; ==========================================================================
 17014                                  
 17015                                  		; 24/12/2023 - Retro DOS 5.0
 17016                                  
 17017                                  		; 19/10/2022
 17018                                  ioctl_support_query:
 17019 0000151C 06                      		push	es
 17020 0000151D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 17021 00001521 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 17022                                  					; AL ==	Major, AH == Minor
 17023                                  		; 24/12/2023
 17024                                  		; 02/09/2023 (PCDOS 7.1)
 17025 00001525 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 17026                                  					; new generic ioctl function (FAT32)
 17027 00001527 7404                    		je	short ioctl_support
 17028                                  
 17029 00001529 3C08                    		cmp	al, 8		; IOC_DC
 17030                                  					; See if major code is 8
 17031 0000152B 7513                    		jne	short nosupport
 17032                                  ioctl_support:
 17033 0000152D 0E                      		push	cs
 17034 0000152E 07                      		pop	es
 17035                                  		; 24/12/2023
 17036                                  		; 02/09/2023
 17037 0000152F B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 17038                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 17039                                  		; 10/12/2022
 17040 00001532 BF[BD0E]                		mov	di, IOC_DC_Table
 17041                                  		;mov	di, 0C60h	; IOC_DC_Table
 17042                                  					; at 2C7h:0C60h	= 70h:31D0h
 17043 00001535 86E0                    		xchg	al, ah		; Put minor code in AL
 17044 00001537 F2AE                    		repne scasb		; Scan for minor code in AL
 17045 00001539 7505                    		jnz	short nosupport	; it was not found
 17046 0000153B B80001                  		mov	ax, 100h
 17047                                  		; 10/12/2022
 17048                                  		; (jump to ioctlsupexit is not required)
 17049                                  		;jmp	short $+2	; ioctlsupexit
 17050                                  					; Signal ioctl is supported
 17051                                  		;;jmp	short ioctlsupexit
 17052                                  ; ---------------------------------------------------------------------------
 17053                                  ioctlsupexit:
 17054 0000153E 07                      		pop	es
 17055                                  		; 10/12/2022
 17056                                  		; cf = 0
 17057                                  		;clc
 17058 0000153F C3                      		retn
 17059                                  ; ---------------------------------------------------------------------------
 17060                                  nosupport:
 17061 00001540 07                      		pop	es
 17062 00001541 E991EB                  		jmp	bc_cmderr
 17063                                  ; ---------------------------------------------------------------------------
 17064                                  
 17065                                  ; 16/10/2022
 17066                                  
 17067                                  ; ==========================================================================
 17068                                  ;	GetMediaSenseStatus
 17069                                  ; ==========================================================================
 17070                                  ;
 17071                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 17072                                  ;	    diskette drive and whether the media is the default type
 17073                                  ;	    for that drive. (default type means the max size for that
 17074                                  ;	    drive)
 17075                                  ;
 17076                                  ; INPUT :   ES:DI -> BDS table
 17077                                  ; OUTPUT:   If carry clear
 17078                                  ;	    DS:BX -> Updated IOCtlPacket
 17079                                  ;
 17080                                  ;			 Special Function at offset 0:
 17081                                  ;				0	- Media detected is not default type
 17082                                  ;				1	- Media detected is default type
 17083                                  ;
 17084                                  ;			 Device Type at offset 1:
 17085                                  ;				2       - 720K 3.5" 80 tracks
 17086                                  ;				7	- 1.44M 3.5" 80 tracks
 17087                                  ;				9	- 2.88M 3.5" 80 tracks
 17088                                  ;
 17089                                  ; Error Codes returned in AX if carry set:
 17090                                  ;
 17091                                  ; 8102 - Drive not ready	- No disk is in the drive.
 17092                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 17093                                  ;				  the media is really unkown, any error
 17094                                  ;				  other than "media not present"
 17095                                  ; 
 17096                                  ; ==========================================================================
 17097                                  
 17098                                  		; 19/10/2022
 17099                                  SenseMediaType:
 17100 00001544 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 17101 00001548 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17102                                  		; 10/10/2022
 17103                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 17104 0000154B 31D2                    		xor	dx, dx
 17105 0000154D 8917                    		mov	[bx], dx ; 0
 17106                                  		;
 17107 0000154F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17108                                  					; Get int 13h drive number from	BDS
 17109                                  		; 10/12/2022
 17110                                  		;xor	dh, dh		; DX = physical	drive number
 17111 00001553 B420                    		mov	ah, 20h		; Get Media Type function
 17112                                  					; If no	carry media type in AL
 17113 00001555 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 17114 00001557 7216                    		jc	short MediaSenseEr ; error code	in AH
 17115 00001559 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 17116                                  DetermineMediaType:
 17117 0000155B FEC8                    		dec	al
 17118 0000155D 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 17119 0000155F 740A                    		jz	short GotMediaType
 17120 00001561 0404                    		add	al, 4
 17121 00001563 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 17122 00001565 7404                    		jz	short GotMediaType
 17123 00001567 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 17124 00001569 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 17125                                  GotMediaType:
 17126 0000156B 884701                  		mov	[bx+1],	al	; Save the return value
 17127                                  		; 10/12/2022
 17128                                  		; cf = 0
 17129                                  		;clc			; Signal success
 17130 0000156E C3                      		retn
 17131                                  ; ---------------------------------------------------------------------------
 17132                                  
 17133                                  MediaSenseEr:
 17134 0000156F 80FC32                  		cmp	ah, 32h		; See if not default media error
 17135 00001572 74E7                    		jz	short DetermineMediaType ; Not really an error
 17136 00001574 B002                    		mov	al, 2		; Now assume drive not ready
 17137 00001576 80FC31                  		cmp	ah, 31h		; See if media was present
 17138 00001579 7402                    		jz	short SenseErrExit ; Return drive not ready
 17139                                  UnknownMediaType:
 17140 0000157B B007                    		mov	al, 7		; Just don't know the media type
 17141                                  SenseErrExit:
 17142 0000157D B481                    		mov	ah, 81h		; Signal error return
 17143 0000157F F9                      		stc
 17144 00001580 C3                      		retn
 17145                                  
 17146                                  ; ----------------------------------------------------------------------------
 17147                                  		; 10/12/2022
 17148                                  		;db    0
 17149                                  ; ----------------------------------------------------------------------------
 17150                                  
 17151                                  ;-----------------------------------------------------------------------------
 17152                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 17153                                  ;-----------------------------------------------------------------------------
 17154                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 17155                                  
 17156                                  ; =============== S U B R O U T I N E =======================================
 17157                                  
 17158                                  SetLockState:
 17159 00001581 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 17160 00001585 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17161                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17162                                  		;call	check_int13h_exts_present
 17163                                  		; 26/12/2023
 17164 00001588 E82100                  		call	check_int13h_exts_p
 17165                                  		;mov	al, 3		; unknown command error
 17166 0000158B 721C                    		jc	short setlockst_ret
 17167 0000158D 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 17168 0000158F B445                    		mov	ah, 45h
 17169 00001591 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 17170                                  		; (DL - drive, [SI - disk address packet)
 17171 00001593 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 17172                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 17173                                  		
 17174                                  		; 26/12/2023
 17175 00001596 EB0A                    		jmp	short sls_em
 17176                                  
 17177                                  ;		jnc	short setlockst_ret
 17178                                  ;		mov	al, ah
 17179                                  ;		call	maperror
 17180                                  ;setlockst_ret:
 17181                                  ;		mov	ah, 81h		; Return this status in case of carry
 17182                                  ;		retn
 17183                                  
 17184                                  ; =============== S U B R O U T I N E =======================================
 17185                                  
 17186                                  EjectMedia:
 17187                                  		;mov	dl, [es:di+4]	; eject media in drive
 17188                                  		;			; [es:di+BDS.drivenum]
 17189                                  		;call	check_int13h_exts_present
 17190                                  		; 26/12/2023
 17191 00001598 E81100                  		call	check_int13h_exts_p
 17192                                  		;mov	al, 3		; unknown command error
 17193 0000159B 720C                    		jc	short ejectm_ret
 17194 0000159D B80046                  		mov	ax, 4600h
 17195 000015A0 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 17196                                  		; (DL - drive)
 17197                                  sls_em:			; 26/12/2023
 17198 000015A2 7305                    		jnc	short ejectm_ret
 17199 000015A4 88E0                    		mov	al, ah
 17200 000015A6 E800F8                  		call	maperror
 17201                                  setlockst_ret:		; 26/12/2023
 17202                                  ejectm_ret:
 17203 000015A9 B481                    		mov	ah, 81h		; Return this status in case of carry
 17204 000015AB C3                      		retn
 17205                                  
 17206                                  ; =============== S U B R O U T I N E =======================================
 17207                                  
 17208                                  		; 26/12/2023
 17209                                  check_int13h_exts_p:
 17210 000015AC 268A5504                		mov	dl, [es:di+4]
 17211                                  
 17212                                  check_int13h_exts_present:
 17213 000015B0 B441                    		mov	ah, 41h
 17214 000015B2 53                      		push	bx
 17215 000015B3 BBAA55                  		mov	bx, 55AAh
 17216 000015B6 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 17217                                  					; BX = 55AAh, DL = drive number
 17218                                  					; Return: CF set if not supported
 17219                                  					; AH = extensions version
 17220                                  					; BX = AA55h
 17221                                  					; CX = Interface support bit map
 17222 000015B8 81FB55AA                		cmp	bx, 0AA55h
 17223 000015BC 5B                      		pop	bx
 17224 000015BD 7505                    		jnz	short exts_notsupported
 17225 000015BF F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 17226 000015C2 7503                    		jnz	short exts_supported
 17227                                  exts_notsupported:
 17228                                  		; 26/12/2023
 17229 000015C4 B003                    		mov	al, 3
 17230                                  		;
 17231 000015C6 F9                      		stc
 17232                                  exts_supported:
 17233 000015C7 C3                      		retn
 17234                                  
 17235                                  ; =============== S U B R O U T I N E =======================================
 17236                                  
 17237                                  GetDrvMapInfo:
 17238 000015C8 8CD9                    		mov	cx, ds		; get drive map information
 17239                                  					;
 17240                                  					; es:di points to BDS which belongs to
 17241                                  					;	  the requested logical/dos drive number
 17242                                  					;
 17243                                  					; Format of parameter block:
 17244                                  					; Offset  Description (Table 01570)
 17245                                  					;  00h    (call) length of this buffer (in bytes)
 17246                                  					;  01h    (ret) number of bytes in parameter block
 17247                                  					;	    actually used
 17248                                  					;  02h    (ret) drive flags
 17249                                  					;  03h    (ret) physical drive number
 17250                                  					;	    00h-7Fh floppy
 17251                                  					;	    80h-FEh hard
 17252                                  					;	    FFh no physical drive
 17253                                  					;  04h    (ret) bitmap of logical drives associated with
 17254                                  					;	    physical drive
 17255                                  					;	    bit 0 = drive A:, etc.
 17256                                  					;  08h    (ret) relative block address of partition start
 17257                                  					;	    qword
 17258                                  					;
 17259                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 17260 000015CA C51E[1200]              		lds	bx, [ptrsav]
 17261 000015CE C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17262 000015D1 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 17263                                  					; al = unknown command error (03h)
 17264 000015D4 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 17265 000015D7 7251                    		jb	short gdmi_4
 17266 000015D9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17267 000015DD 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 17268 000015E0 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 17269 000015E4 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 17270 000015E8 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 17271 000015EB 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 17272 000015EF 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 17273 000015F2 31C0                    		xor	ax, ax ; 0
 17274 000015F4 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 17275 000015F7 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 17276 000015FA 89470E                  		mov	[bx+0Eh], ax
 17277 000015FD 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 17278                                  					; initialized as 0
 17279 00001600 894706                  		mov	[bx+6], ax ; 0
 17280 00001603 8EC1                    		mov	es, cx
 17281                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 17282 00001605 26C43E[1901]            		les	di, [es:start_bds]
 17283 0000160A B90100                  		mov	cx, 1		; bit 0 (drive A:)
 17284                                  gdmi_1:
 17285 0000160D 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 17286 00001610 7415                    		jz	short gdmi_3	; yes
 17287 00001612 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 17288                                  					; is it same physical drive ?
 17289 00001616 7506                    		jnz	short gdmi_2	; no
 17290 00001618 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 17291                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 17292 0000161B 094706                  		or	[bx+6], ax
 17293                                  gdmi_2:
 17294 0000161E D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 17295 00001620 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 17296 00001622 26C43D                  		les	di, [es:di]	; next BDS
 17297 00001625 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 17298                                  gdmi_3:
 17299 00001627 B80001                  		mov	ax, 100h	; success
 17300                                  gdmi_4:
 17301 0000162A C3                      		retn
 17302                                  
 17303                                  ;-----------------------------------------------------------------------------
 17304                                  
 17305                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17306                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17307                                  
 17308                                  ;-----------------------------------------------------------------------------
 17309                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 17310                                  ;-----------------------------------------------------------------------------
 17311                                  ; 16/03/2019 - Retro DOS v4.0
 17312                                  
 17313                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 17314                                  ;	after booting. this allows testing and implementation of custom int_13
 17315                                  ;	handlers, without giving up ms-dos error recovery
 17316                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 17317                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 17318                                  ;	exit:	orig13	== address of new int_13 handler
 17319                                  ;		ds:dx	== old orig13 value
 17320                                  ;		es:bx	== old old13  value
 17321                                  ;
 17322                                  ; int 2f handler for external block drivers to communicate with the internal
 17323                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 17324                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 17325                                  ; dsk_entry, the entry point for all disk requests.
 17326                                  ;
 17327                                  ; on exit from this driver, we will return to the external driver
 17328                                  ; that issued this int 2f, and can then remove the flags from the stack.
 17329                                  ; this scheme allows us to have a small external device driver, and makes
 17330                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 17331                                  ; since we only need to make changes in one place (most of the time).
 17332                                  ;
 17333                                  ;   ax=800h - check for installed handler - reserved
 17334                                  ;   ax=801h - install the bds into the linked list
 17335                                  ;   ax=802h - dos request
 17336                                  ;   ax=803h - return bds table starting pointer in ds:di
 17337                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 17338                                  ;	    problem. bds table is going to be used to get head/sector
 17339                                  ;	    informations without calling generic ioctl get device parm call.)
 17340                                  
 17341                                  ;BIOSSEGMENT equ 70h
 17342                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 17343                                  
 17344                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 17345                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 17346                                  
 17347                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 17348 0000162B 80FC13                  		cmp	ah, 13h
 17349 0000162E 7413                    		jz	short int2f_replace_int13
 17350 00001630 80FC08                  		cmp	ah, 8
 17351 00001633 7432                    		jz	short mine
 17352                                  
 17353                                  ; Check for WIN386 startup and return the BIOS instance data
 17354                                  
 17355 00001635 80FC16                  		cmp	ah, 16h		; MultWin386
 17356 00001638 746D                    		jz	short win386call
 17357 0000163A 80FC4A                  		cmp	ah, 4Ah		; multMULT
 17358 0000163D 7503                    		jnz	short i2f_handler_iret
 17359 0000163F E99800                  		jmp	handle_multmult
 17360                                  ; ---------------------------------------------------------------------------
 17361                                  
 17362                                  i2f_handler_iret:			
 17363 00001642 CF                      		iret
 17364                                  ; ---------------------------------------------------------------------------
 17365                                  
 17366                                  int2f_replace_int13:
 17367 00001643 FA                      		cli	; 26/12/2023
 17368 00001644 50                      		push	ax	; free up a register for caller's ds
 17369 00001645 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 17370                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 17371                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 17372                                  					; = [02C7h:0030h] = [0070h:25A0h]
 17373 00001647 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17374                                  		; 19/10/2022
 17375                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 17376                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 17377                                  		;push	word ptr ds:Old13	; return them to caller
 17378                                  		;push	word ptr ds:Old13+2
 17379                                  		
 17380                                  		; 02/09/2023 (PCDOS 7.1)
 17381                                  		;push	word [Orig13]
 17382 0000164C FF36[B600]              		push	word [Orig13+2]
 17383                                  		;push	word [Old13]
 17384 00001650 FF36[0801]              		push	word [Old13+2]
 17385                                  
 17386                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 17387                                  		;mov	word ptr ds:Orig13+2, ax
 17388                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 17389                                  		;mov	word ptr ds:Old13+2, es
 17390                                  		
 17391                                  		;mov	[Orig13], dx
 17392                                  		; 02/09/2023
 17393 00001654 8716[B400]              		xchg	dx, [Orig13]
 17394 00001658 A3[B600]                		mov	[Orig13+2], ax
 17395                                  		;mov	[Old13], bx
 17396                                  		; 02/09/2023
 17397 0000165B 871E[0601]              		xchg	bx, [Old13]
 17398 0000165F 8C06[0801]              		mov	[Old13+2], es
 17399                                  
 17400 00001663 07                      		pop	es			; es:bx := old old13 vector
 17401                                  		; 02/09/2023
 17402                                  		;pop	bx
 17403 00001664 1F                      		pop	ds			; ds:dx := old orig13 vector
 17404                                  		;pop	dx ; 02/09/2023
 17405 00001665 58                      		pop	ax
 17406                                  i2f_iret:
 17407 00001666 CF                      		iret
 17408                                  ; ---------------------------------------------------------------------------
 17409                                  
 17410                                  mine:
 17411 00001667 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 17412 00001669 73FB                    		jnb	short i2f_iret
 17413 0000166B 08C0                    		or	al, al			; a get installed state request?
 17414 0000166D 7503                    		jnz	short disp_func
 17415 0000166F B0FF                    		mov	al, 0FFh
 17416                                  		;jmp	short i2f_iret
 17417                                  		; 02/09/2023
 17418 00001671 CF                      		iret
 17419                                  ; ---------------------------------------------------------------------------
 17420                                  
 17421                                  disp_func:
 17422 00001672 3C01                    		cmp	al, 1			; request for installing bds?
 17423 00001674 7418                    		jz	short do_subfun_01
 17424 00001676 3C03                    		cmp	al, 3			; get bds vector?
 17425 00001678 7423                    		jz	short do_get_bds_vector
 17426                                  
 17427                                  ; set up pointer to request packet
 17428                                  
 17429 0000167A 1E                      		push	ds
 17430 0000167B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17431                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17432                                  					; = [0070h:25A0h] = [02C7h:0030h]
 17433                                  		; 19/10/2022
 17434                                  		;mov	word ptr ds:ptrsav, bx
 17435                                  		;mov	word ptr ds:ptrsav+2, es
 17436 00001680 891E[1200]              		mov	[ptrsav], bx
 17437 00001684 8C06[1400]              		mov	[ptrsav+2], es
 17438 00001688 1F                      		pop	ds
 17439                                  		;jmp	far ptr	i2f_dskentry
 17440                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 17441                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 17442 00001689 EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 17443                                  		;; 17/10/2022
 17444                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 17445                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 17446                                  					; NOTE: jump to a FAR function, not an
 17447                                  					;  IRET type function. Callers of
 17448                                  					;  this int2f subfunction will have
 17449                                  					;  to be careful to do a popf
 17450                                  
 17451                                  ; ---------------------------------------------------------------------------
 17452                                  
 17453                                  do_subfun_01:
 17454 0000168E 06                      		push	es
 17455 0000168F 1E                      		push	ds
 17456 00001690 1E                      		push	ds
 17457 00001691 07                      		pop	es
 17458                                  		; 17/10/2022
 17459 00001692 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17460                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17461                                  					; point	ds: -> Bios_Data
 17462 00001697 E8BC03                  		call	install_bds
 17463 0000169A 1F                      		pop	ds
 17464 0000169B 07                      		pop	es
 17465                                  		;jmp	short i2f_iret
 17466                                  		; 02/09/2023
 17467 0000169C CF                      		iret
 17468                                  ; ---------------------------------------------------------------------------
 17469                                  
 17470                                  do_get_bds_vector:
 17471                                  		; 17/10/2022
 17472 0000169D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17473                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17474 000016A2 C53E[1901]              		lds	di, [start_bds]
 17475                                  		;lds	di, ds:start_bds
 17476                                  ;ii2f_iret:	; 10/12/2022
 17477                                  		;jmp	short i2f_iret
 17478                                  		; 02/09/2023
 17479 000016A6 CF                      		iret
 17480                                  ; ---------------------------------------------------------------------------
 17481                                  
 17482                                  ; 17/10/2022
 17483                                  ; 16/10/2022
 17484                                  
 17485                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 17486                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 17487                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 17488                                  
 17489                                  win386call:
 17490 000016A7 1E                      		push	ds
 17491 000016A8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17492                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17493                                  					; at 2C7h:30h =	70h:25A0h
 17494 000016AD 3C05                    		cmp	al, 5		; Win386_Init
 17495                                  					; is it	win386 initializing?
 17496 000016AF 7410                    		jz	short Win386Init
 17497 000016B1 3C06                    		cmp	al, 6		; Win386_Exit
 17498                                  					; is it	win386 exiting?
 17499 000016B3 7523                    		jnz	short win_iret	; if not, continue int2f chain
 17500                                  		; 12/12/2022
 17501 000016B5 F6C201                  		test	dl, 1
 17502                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 17503 000016B8 751E                    		jnz	short win_iret	; if not win386, then continue
 17504                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 17505 000016BA 8026[1208]00            		and	byte [IsWin386], 0 
 17506 000016BF EB17                    		jmp	short win_iret
 17507                                  ; ---------------------------------------------------------------------------
 17508                                  
 17509                                  Win386Init:
 17510                                  		; 12/12/2022
 17511 000016C1 F6C201                  		test	dl, 1
 17512                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 17513 000016C4 7512                    		jnz	short win_iret	; if not win386, then continue
 17514                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 17515 000016C6 800E[1208]01            		or	byte [IsWin386], 1
 17516                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 17517                                  		;mov	word ptr ds:SI_Next+2, es
 17518 000016CB 891E[E007]              		mov	[SI_Next], bx
 17519 000016CF 8C06[E207]              		mov	[SI_Next+2], es
 17520                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 17521 000016D3 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 17522 000016D6 1E                      		push	ds
 17523 000016D7 07                      		pop	es
 17524                                  win_iret:
 17525 000016D8 1F                      		pop	ds
 17526                                  ii2f_iret:	; 10/12/2022
 17527                                  		;jmp	short i2f_iret	; return back up the chain
 17528                                  		; 02/09/2023
 17529 000016D9 CF                      		iret
 17530                                  ; ---------------------------------------------------------------------------
 17531                                  
 17532                                  handle_multmult:
 17533 000016DA 3C01                    		cmp	al, 1
 17534 000016DC 7514                    		jnz	short try_2
 17535 000016DE 1E                      		push	ds
 17536 000016DF E84500                  		call	HMAPtr		; get offset of free HMA
 17537                                  		; 10/12/2022
 17538                                  		;xor	bx, bx
 17539                                  		;dec	bx
 17540 000016E2 BBFFFF                  		mov	bx, 0FFFFh
 17541 000016E5 8EC3                    		mov	es, bx		; seg of HMA
 17542 000016E7 89FB                    		mov	bx, di
 17543 000016E9 F7D3                    		not	bx
 17544 000016EB 09DB                    		or	bx, bx
 17545 000016ED 7401                    		jz	short try_1
 17546 000016EF 43                      		inc	bx
 17547                                  try_1:
 17548 000016F0 1F                      		pop	ds
 17549                                  		;jmp	short ii2f_iret
 17550                                  		; 02/09/2023
 17551 000016F1 CF                      		iret
 17552                                  ; ---------------------------------------------------------------------------
 17553                                  
 17554                                  try_2:
 17555 000016F2 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 17556 000016F4 7530                    		jnz	short try_3
 17557 000016F6 1E                      		push	ds
 17558                                  		; 10/12/2022
 17559                                  		;xor	di, di
 17560                                  		;dec	di
 17561 000016F7 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 17562 000016FA 8EC7                    		mov	es, di
 17563 000016FC E82800                  		call	HMAPtr		; get offset of free HMA
 17564 000016FF 83FFFF                  		cmp	di, 0FFFFh
 17565 00001702 7421                    		jz	short InsuffHMA
 17566 00001704 F7DF                    		neg	di		; free space in HMA
 17567 00001706 39FB                    		cmp	bx, di
 17568 00001708 7605                    		jbe	short try_4
 17569                                  		; 10/12/2022
 17570                                  		;sub	di, di
 17571                                  		;dec	di
 17572 0000170A BFFFFF                  		mov	di, 0FFFFh
 17573                                  		;jmp	short InsuffHMA
 17574                                  		; 02/09/2023
 17575 0000170D 1F                      		pop	ds
 17576 0000170E CF                      		iret
 17577                                  ; ---------------------------------------------------------------------------
 17578                                  
 17579                                  try_4:
 17580                                  		;mov	di, ds:FreeHMAPtr
 17581 0000170F 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17582 00001713 83C30F                  		add	bx, 15
 17583                                  		;and	bx, 0FFF0h
 17584                                  		; 10/12/2022
 17585 00001716 80E3F0                  		and	bl, 0F0h
 17586                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 17587 00001719 011E[D707]              		add	[FreeHMAPtr], bx
 17588 0000171D 7506                    		jnz	short InsuffHMA
 17589 0000171F C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 17590                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 17591                                  					; no more HMA if we have wrapped
 17592                                  InsuffHMA:
 17593 00001725 1F                      		pop	ds
 17594                                  		; 10/12/2022
 17595                                  try_3:
 17596                                  		;jmp	short ii2f_iret
 17597                                  		; 02/09/2023
 17598 00001726 CF                      		iret
 17599                                  ; ---------------------------------------------------------------------------
 17600                                  
 17601                                  		; 10/12/2022
 17602                                  ;try_3:
 17603                                  		;jmp	ii2f_iret
 17604                                  
 17605                                  ; =============== S U B	R O U T	I N E =======================================
 17606                                  
 17607                                  ; 16/10/2022
 17608                                  
 17609                                  ;--------------------------------------------------------------------------
 17610                                  ;
 17611                                  ; procedure : HMAPtr
 17612                                  ;
 17613                                  ;		Gets the offset of the free HMA area ( with respect to
 17614                                  ;							seg ffff )
 17615                                  ;		If DOS has not moved high, tries to move DOS high.
 17616                                  ;		In the course of doing this, it will allocate all the HMA
 17617                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 17618                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 17619                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 17620                                  ;
 17621                                  ;	RETURNS : offset of free HMA in DI
 17622                                  ;		  BIOS_DATA, seg in DS
 17623                                  ;
 17624                                  ;--------------------------------------------------------------------------
 17625                                  
 17626                                  		; 17/10/2022
 17627                                  HMAPtr:
 17628 00001727 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17629                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17630 0000172C 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17631                                  		;mov	di, ds:FreeHMAPtr
 17632 00001730 83FFFF                  		cmp	di, 0FFFFh
 17633 00001733 750F                    		jnz	short HMAPtr_retn
 17634 00001735 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 17635                                  		;cmp	ds:SysinitPresent, 0
 17636 0000173A 7408                    		jz	short HMAPtr_retn
 17637 0000173C FF1E[D907]              		call	far [MoveDOSIntoHMA]
 17638                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 17639 00001740 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17640                                  		;mov	di, ds:FreeHMAPtr
 17641                                  HMAPtr_retn:
 17642 00001744 C3                      		retn
 17643                                  
 17644                                  ; =============== S U B	R O U T	I N E =======================================
 17645                                  
 17646                                  ; 16/10/2022
 17647                                  
 17648                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 17649                                  ; but go ahead and update direction flag, si, & di
 17650                                  
 17651                                  move_sector:
 17652                                  
 17653                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 17654                                  ; any segment to be a fault. Theoretically, this could be handled
 17655                                  ; by the fault handler and the behavior of an 8086 could be emulated
 17656                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 17657                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 17658                                  ; also handles the fault incorrectly in their ROM BIOS for real
 17659                                  ; mode. Their fault handler was only designed to deal with one
 17660                                  ; special case which occurred in a magazine benchmark, but didn't
 17661                                  ; handle the general case worth beans.
 17662                                  ;
 17663                                  ; Simply changing this code to do a byte loop would work okay but
 17664                                  ; would involve a general case performance hit. Therefore, we'll
 17665                                  ; check for either source or destination offsets being within one
 17666                                  ; sector of the end of their segments and only in that case fall
 17667                                  ; back to a byte move.
 17668                                  
 17669 00001745 FC                      		cld
 17670 00001746 51                      		push	cx
 17671 00001747 B90001                  		mov	cx, 256
 17672 0000174A 81FE00FE                		cmp	si, 0FE00h
 17673 0000174E 770A                    		ja	short movsec_bytes
 17674 00001750 81FF00FE                		cmp	di, 0FE00h
 17675 00001754 7704                    		ja	short movsec_bytes
 17676 00001756 F3A5                    		rep movsw
 17677 00001758 59                      		pop	cx
 17678 00001759 C3                      		retn
 17679                                  ; ---------------------------------------------------------------------------
 17680                                  
 17681                                  movsec_bytes:
 17682 0000175A D1E1                    		shl	cx, 1
 17683 0000175C F3A4                    		rep movsb
 17684 0000175E 59                      		pop	cx
 17685 0000175F C3                      		retn
 17686                                  
 17687                                  ; =============== S U B	R O U T	I N E =======================================
 17688                                  
 17689                                  ; 16/10/2022
 17690                                  
 17691                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 17692                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 17693                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 17694                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 17695                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 17696                                  ; but we break down a request when we get an ecc or dma error into several
 17697                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 17698                                  ; number of sectors on a track on the medium, and the request would fail.
 17699                                  ;
 17700                                  ; input conditions:
 17701                                  ;	all registers set up for an int 13 request.
 17702                                  ;
 17703                                  ; output:
 17704                                  ;	dh - contains starting head number for request
 17705                                  ;	cx - contains starting sector and cylinder numbers
 17706                                  ;	(the above may or may not have been changed, and are 0-based)
 17707                                  ;	all other registers preserved.
 17708                                  
 17709                                  		; 26/12/2023 - Retro DOS 5.0
 17710                                  check_wrap:	
 17711 00001760 50                      		push	ax
 17712 00001761 53                      		push	bx
 17713 00001762 06                      		push	es
 17714 00001763 57                      		push	di
 17715 00001764 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 17716 00001767 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 17717                                  		; 26/12/2023
 17718 00001769 26F6453F01              		test	byte [es:di+3Fh], 1
 17719                                  		; 12/12/2022
 17720                                  		;test	byte [es:di+23h], 1
 17721                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 17722 0000176E 7457                    		jz	short no_wrap	; no wrapping for removable media
 17723 00001770 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 17724 00001774 89C8                    		mov	ax, cx
 17725 00001776 83E03F                  		and	ax, 3Fh		; extract sector number
 17726 00001779 39D8                    		cmp	ax, bx		; are we going to wrap?
 17727 0000177B 764A                    		jbe	short no_wrap
 17728 0000177D F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 17729                                  
 17730                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 17731                                  ; last sector on that track.
 17732                                  
 17733 0000177F 08E4                    		or	ah, ah
 17734 00001781 7503                    		jnz	short not_on_bound
 17735                                  		; 18/12/2022
 17736 00001783 48                      		dec	ax ; *
 17737 00001784 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 17738                                  					; if on	boundary
 17739                                  		;dec	al ; *		; also decrement # of head wraps
 17740                                  not_on_bound:
 17741 00001786 80E1C0                  		and	cl, 0C0h	; zero out sector #
 17742 00001789 08E1                    		or	cl, ah		; or in	new sector #
 17743 0000178B 30E4                    		xor	ah, ah		; ax = # of head wraps
 17744 0000178D 40                      		inc	ax
 17745 0000178E 00F0                    		add	al, dh		; add in starting head #
 17746 00001790 80D400                  		adc	ah, 0		; catch	any carry
 17747                                  		; 02/09/2023
 17748 00001793 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17749 00001797 39D8                    		cmp	ax, bx
 17750                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 17751                                  					; are we going to wrap around a	head?
 17752 00001799 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 17753 0000179B 52                      		push	dx		; preserve drive number and head number
 17754 0000179C 31D2                    		xor	dx, dx
 17755                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17756 0000179E F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 17757                                  
 17758                                  ; careful here! if new head # is 0, then we are on the last head.
 17759                                  
 17760 000017A0 09D2                    		or	dx, dx
 17761 000017A2 7507                    		jnz	short no_head_bound
 17762 000017A4 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 17763                                  
 17764                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 17765                                  
 17766 000017A6 09C0                    		or	ax, ax
 17767 000017A8 7401                    		jz	short no_head_bound
 17768 000017AA 48                      		dec	ax		; reduce number	of cylinder wraps
 17769                                  no_head_bound:				
 17770 000017AB 88D7                    		mov	bh, dl		; bh has new head number
 17771 000017AD 5A                      		pop	dx		; restore drive number and head number
 17772 000017AE FECF                    		dec	bh		; get it 0-based
 17773 000017B0 88FE                    		mov	dh, bh		; set up new head number in dh
 17774 000017B2 88CF                    		mov	bh, cl
 17775 000017B4 80E73F                  		and	bh, 3Fh		; preserve sector number
 17776 000017B7 B306                    		mov	bl, 6
 17777 000017B9 86D9                    		xchg	cl, bl
 17778 000017BB D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 17779 000017BD 00C5                    		add	ch, al		; add in cylinder wrap
 17780 000017BF 10E3                    		adc	bl, ah		; add in high byte
 17781 000017C1 D2E3                    		shl	bl, cl		; move up to ms	end
 17782 000017C3 86CB                    		xchg	bl, cl		; restore cylinder bits	into cl
 17783 000017C5 08F9                    		or	cl, bh		; or in	sector number
 17784                                  no_wrap:				
 17785 000017C7 F8                      		clc
 17786 000017C8 5F                      		pop	di
 17787 000017C9 07                      		pop	es
 17788 000017CA 5B                      		pop	bx
 17789 000017CB 58                      		pop	ax
 17790 000017CC C3                      		retn
 17791                                  ; ---------------------------------------------------------------------------
 17792                                  
 17793                                  no_wrap_head:				
 17794 000017CD 88C6                    		mov	dh, al		; do not lose new head number
 17795 000017CF FECE                    		dec	dh		; get it 0-based
 17796 000017D1 EBF4                    		jmp	short no_wrap
 17797                                  
 17798                                  ; =============== S U B	R O U T	I N E =======================================
 17799                                  
 17800                                  ; 16/10/2022
 17801                                  
 17802                                  ; this is a special version of the bds lookup code which is
 17803                                  ; based on physical drives rather than the usual logical drives
 17804                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 17805                                  ; otherwise carry is clear
 17806                                  ;
 17807                                  ; guaranteed to trash no registers except es:di
 17808                                  
 17809                                  		; 19/10/2022
 17810                                  find_bds:	
 17811 000017D3 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 17812                                  fbds_1:					
 17813 000017D7 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 17814 000017DB 7409                    		jz	short fdbs_2
 17815 000017DD 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17816                                  					; go to next bds
 17817 000017E0 83FFFF                  		cmp	di, 0FFFFh
 17818 000017E3 75F2                    		jnz	short fbds_1
 17819 000017E5 F9                      		stc
 17820                                  fdbs_2:					
 17821 000017E6 C3                      		retn
 17822                                  
 17823                                  ; =============== S U B	R O U T	I N E =======================================
 17824                                  
 17825                                  ; 16/10/2022
 17826                                  		; 17/10/2022
 17827                                  doint:
 17828                                  		; 10/12/2022
 17829 000017E7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 17830                                  					; get physical drive number
 17831                                  		; 19/10/2022 - Temporary !
 17832                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 17833                                  		
 17834 000017EA 30E4                    		xor	ah, ah
 17835 000017EC 08C0                    		or	al, al
 17836 000017EE 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 17837                                  		; 10/12/2022
 17838 000017F0 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 17839                                  					; get request code
 17840                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 17841 000017F3 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17842                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 17843 000017F6 9D                      		popf
 17844                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 17845                                  		; 17/10/2022
 17846 000017F7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17847                                  		;;call	call_orig13	; call far 70h:797h
 17848                                  					; call far KERNEL_SEGMENT:call_orig13
 17849 000017FC 9C                      		pushf
 17850                                  		; 10/12/2022
 17851 000017FD 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17852                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 17853                                  dointdone:				
 17854 00001800 C3                      		retn
 17855                                  
 17856                                  ;----------------------------------------------------------------------------
 17857                                  
 17858                                  ; 16/10/2022
 17859                                  
 17860                                  ; this is the true int 13 handler. we parse the request to see if there is
 17861                                  ; a dma violation. if so, depending on the function, we:
 17862                                  ;   read/write break the request into three pieces and move the middle one
 17863                                  ;	       into our internal buffer.
 17864                                  ;
 17865                                  ;   format     copy the format table into the buffer
 17866                                  ;   verify     point the transfer address into the buffer
 17867                                  ;
 17868                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 17869                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 17870                                  ; the offending sector into the buffer below and do the i/o from there.
 17871                                  
 17872                                  ;struc INT13FRAME
 17873                                  ;.oldbp: resw
 17874                                  ;.oldax: resw 
 17875                                  ;.oldbx: resw
 17876                                  ;.oldcx: resw
 17877                                  ;.olddx: resw
 17878                                  ;.oldds: resw	; now we save caller's ds, too
 17879                                  ;.olddd: resd
 17880                                  ;.oldf:	resw
 17881                                  ;end struc
 17882                                  
 17883                                  ;----------------------------------------------------------------------------
 17884                                  
 17885                                  ;   entry conditions:
 17886                                  ;	ah = function
 17887                                  ;	al = number of sectors
 17888                                  ;	es:bx = dma address
 17889                                  ;	cx = packed track and sector
 17890                                  ;	dx = head and drive
 17891                                  ;   output conditions:
 17892                                  ;	no dma violation.
 17893                                  
 17894                                  ;	use extreme caution when working with this code. In general,
 17895                                  ;	  all registers are hot at all times.
 17896                                  ;
 17897                                  ;	question:  does this code handle cases where dma errors
 17898                                  ;	  occur during ecc retries, and where ecc errors occur during
 17899                                  ;	  dma breakdowns???? Hmmmmm.
 17900                                  
 17901                                  ;----------------------------------------------------------------------------
 17902                                  
 17903                                  ; ---------------------------------------------------------------------------
 17904                                  
 17905                                  		; 26/12/2023 - Retro DOS v5.0
 17906                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 17907                                  dtype_array:
 17908 00001801 90004000                		dd 400090h		; 40h:90h is drive type array addr
 17909                                  
 17910                                  ; 17/10/2022
 17911                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 17912                                  ; 09/12/2022
 17913                                  DTYPEARRAY equ dtype_array
 17914                                  
 17915                                  ; ---------------------------------------------------------------------------
 17916                                  
 17917                                  ; stick some special stuff out of mainline
 17918                                  
 17919                                  ; we know we're doing a format command. if we have changeline
 17920                                  ; support, then flag some special changed stuff and set changed
 17921                                  ; by format bit for all logical drives using this physical drive
 17922                                  
 17923                                  format_special_stuff:
 17924 00001805 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 17925 0000180A 7459                    		jz	short format_special_stuff_done ; brif not
 17926 0000180C 53                      		push	bx
 17927 0000180D BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 17928 00001810 E85104                  		call	set_changed_dl	; indicate that media changed by format
 17929 00001813 5B                      		pop	bx
 17930 00001814 EB4F                    		jmp	short format_special_stuff_done
 17931                                  ; ---------------------------------------------------------------------------
 17932                                  
 17933                                  ; 16/10/2022
 17934                                  
 17935                                  ; we know we've got ec35's on the system. Now see if we're doing
 17936                                  ; a floppy. If so, create a mask and see if this particular
 17937                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 17938                                  
 17939                                  		; 19/10/2022
 17940                                  ec35_special_stuff:
 17941 00001816 84D2                    		test	dl, dl		; floppy or hard disk?
 17942 00001818 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 17943 0000181A 50                      		push	ax		; see if this PARTICULAR drive is ec35
 17944 0000181B 51                      		push	cx
 17945 0000181C 88D1                    		mov	cl, dl		; turn drive number into bit map
 17946 0000181E B001                    		mov	al, 1		; assume drive 0
 17947 00001820 D2E0                    		shl	al, cl		; shift	over correct number of times
 17948 00001822 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 17949 00001826 59                      		pop	cx
 17950 00001827 58                      		pop	ax
 17951 00001828 7442                    		jz	short ec35_special_stuff_done
 17952                                  					; done if this floppy is not an	ec35
 17953 0000182A 53                      		push	bx		; free up a far	pointer	(es:bx)
 17954 0000182B 06                      		push	es
 17955                                  		; 17/10/2022
 17956 0000182C 2EC41E[0118]            		les	bx, [cs:DTYPEARRAY]
 17957                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 17958                                  					; 0070h:3A65h =	2C7h:14F5h
 17959 00001831 00D3                    		add	bl, dl
 17960 00001833 80D700                  		adc	bh, 0		; find entry for this drive
 17961 00001836 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 17962                                  					; (360k	disk in	360k drive,
 17963                                  					; no double-stepping, 250 kbs transfer rate)
 17964 0000183A 07                      		pop	es
 17965 0000183B 5B                      		pop	bx
 17966 0000183C EB2E                    		jmp	short ec35_special_stuff_done
 17967                                  ; ---------------------------------------------------------------------------
 17968                                  
 17969                                  ; 16/10/2022
 17970                                  
 17971                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 17972                                  ; this function does not reset the common buses after the execution.
 17973                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 17974                                  ; will issue ah=1 (read status) call to reset the buses.
 17975                                  
 17976                                  ps2_special_stuff:
 17977 0000183E 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 17978                                  					; read driver parm ?
 17979 00001843 7407                    		jz	short ps2_30_problem
 17980 00001845 803E[1E00]15            		cmp	byte [prevoper], 15h
 17981                                  					; apparently function 15h fails, too
 17982 0000184A 752D                    		jnz	short ps2_special_stuff_done
 17983                                  ps2_30_problem:
 17984 0000184C 50                      		push	ax
 17985 0000184D B401                    		mov	ah, 1
 17986                                  		; 26/12/2023
 17987                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 17988                                  		;		 ; call BIOSDATA:call_orig13	
 17989                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 17990                                  		; 17/10/2022
 17991 0000184F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17992                                  		;call	call_orig13	; call far 70:797h
 17993                                  					; call far KERNEL_SEGMENT:call_orig13
 17994 00001854 58                      		pop	ax
 17995 00001855 EB22                    		jmp	short ps2_special_stuff_done
 17996                                  ; ---------------------------------------------------------------------------
 17997                                  
 17998                                  ; 17/10/2022
 17999                                  ; 16/10/2022
 18000                                  
 18001                                  ; here is the actual int13 handler
 18002                                  
 18003                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 18004                                  
 18005                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 18006                                  ; vectoring up here from Bios_Data
 18007                                  
 18008                                  		; 19/10/2022
 18009 00001857 1E                      		push	ds		; save caller's ds register first thing
 18010                                  		;;mov	ds, word [cs:0030h]
 18011                                  					; and set up our own ds -> Bios_Data
 18012 00001858 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18013                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18014                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18015                                  
 18016                                  ; let the operation proceed. if there is a dma violation, then we do things
 18017                                  
 18018 0000185D A3[1E00]                		mov	[prevoper], ax	; save request
 18019 00001860 80FC05                  		cmp	ah, 5		; romformat
 18020 00001863 74A0                    		jz	short format_special_stuff
 18021                                  					; go do special stuff for format
 18022                                  format_special_stuff_done:
 18023 00001865 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 18024 0000186A 75AA                    		jnz	short ec35_special_stuff
 18025                                  					; go handle it out of line if so
 18026                                  ec35_special_stuff_done:
 18027                                  		; 26/12/2023
 18028                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 18029                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 18030 0000186C 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18031                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18032                                  		
 18033 00001871 9C                      		pushf			; save result flags
 18034                                  		
 18035 00001872 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 18036                                  					; mdl_ps2_30
 18037 00001877 74C5                    		jz	short ps2_special_stuff
 18038                                  					; exit mainline to address special
 18039                                  ps2_special_stuff_done:			; ps2/30 problem if so
 18040 00001879 9D                      		popf
 18041 0000187A 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 18042                                  ret_from_i13:
 18043 0000187C 1F                      		pop	ds
 18044 0000187D CA0200                  		retf	2		; restore ds &	iret w/flags
 18045                                  ; ---------------------------------------------------------------------------
 18046                                  
 18047                                  ; most of our code exits through here. If carry isn't set, then
 18048                                  ; just do a simple exit. Else doublecheck that we aren't getting
 18049                                  ; a changeline error.
 18050                                  
 18051                                  i13ret_ck_chglinerr:			
 18052 00001880 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 18053                                  i13_ret_error:				
 18054 00001882 80FC06                  		cmp	ah, 6		; did i	see a change event?
 18055 00001885 7513                    		jnz	short int13b	; skip if wrong	error
 18056 00001887 08D2                    		or	dl, dl		; is this for the hard disk?
 18057 00001889 780F                    		js	short int13b	; yes, ignore
 18058 0000188B 803E[7700]00            		cmp	byte [fhave96], 0
 18059 00001890 7408                    		jz	short int13b	; just in case ROM returned this
 18060                                  					; error	even though it told us it
 18061                                  					; never	would
 18062 00001892 53                      		push	bx
 18063 00001893 BB4000                  		mov	bx, 40h		; fchanged
 18064 00001896 E8CB03                  		call	set_changed_dl
 18065 00001899 5B                      		pop	bx
 18066                                  int13b:
 18067 0000189A F9                      		stc			; now return the error
 18068 0000189B EBDF                    		jmp	short ret_from_i13
 18069                                  ; ---------------------------------------------------------------------------
 18070                                  
 18071                                  ; some kind of error occurred. see if it is dma violation
 18072                                  
 18073                                  goterr13:
 18074 0000189D 80FC09                  		cmp	ah, 9		; dma error?
 18075 000018A0 747C                    		jz	short gotdmaerr
 18076                                  goterr13_xxxx:
 18077 000018A2 80FC11                  		cmp	ah, 11h		; ecc error?
 18078 000018A5 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 18079 000018A7 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 18080 000018AC 74D4                    		jz	short i13_ret_error
 18081                                  
 18082 000018AE 803E[1F00]02            		cmp	byte [prevoper+1], 2
 18083                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 18084                                  					; (2 = romread)
 18085                                  					; ECC correction only applies to reads
 18086 000018B3 75CD                    		jnz	short i13_ret_error
 18087                                  
 18088 000018B5 30E4                    		xor	ah, ah
 18089                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 18090                                  		; 17/10/2022
 18091 000018B7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18092                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18093                                  					; call far 70:797h
 18094 000018BC A1[1E00]                		mov	ax, [prevoper]
 18095 000018BF 30E4                    		xor	ah, ah		; return code =	no error
 18096 000018C1 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 18097 000018C3 74B7                    		jz	short ret_from_i13 ; return with carry clear
 18098 000018C5 53                      		push	bx
 18099 000018C6 51                      		push	cx
 18100 000018C7 52                      		push	dx
 18101 000018C8 A2[2000]                		mov	[number_of_sec], al
 18102                                  loop_ecc:
 18103 000018CB B80102                  		mov	ax, 201h	; read one sector
 18104                                  
 18105                                  ; we do reads one sector at a time. this ensures that we will eventually
 18106                                  ; finish the request since ecc errors on one sector do read in that sector.
 18107                                  ;
 18108                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 18109                                  ; that attempt to read more sectors than are available on a particular
 18110                                  ; track.
 18111                                  ;
 18112                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 18113                                  ; this request.
 18114                                  ;
 18115                                  ; at this point, all registers are set up for the call to orig13, except
 18116                                  ; that there may be a starting sector number that is bigger than the number
 18117                                  ; of sectors on a track.
 18118                                  ;
 18119 000018CE E88FFE                  		call	check_wrap	; get correct parameters for int 13
 18120                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 18121                                  		; 17/10/2022
 18122 000018D1 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18123                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18124 000018D6 730C                    		jnb	short ok11_op
 18125 000018D8 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 18126 000018DB 741B                    		jz	short handle_dma_during_ecc
 18127 000018DD 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 18128 000018E0 7510                    		jnz	short ok11_exit_err
 18129                                  		; 10/12/2022
 18130                                  		; xor ax ax -> ah = 0
 18131                                  		;mov	ah, 0		; ecc error. reset the system again.
 18132 000018E2 31C0                    		xor	ax, ax		; clear	the error code so that if this
 18133                                  					; was the last sector, no error	code
 18134                                  					; will be returned for the corrected
 18135                                  					; read.	(clear carry too.)
 18136                                  ok11_op:
 18137 000018E4 FE0E[2000]              		dec	byte [number_of_sec]
 18138 000018E8 7409                    		jz	short ok11_exit	; all done?
 18139 000018EA FEC1                    		inc	cl		; advance sector number
 18140                                  					; add 200h to address
 18141 000018EC FEC7                    		inc	bh
 18142 000018EE FEC7                    		inc	bh
 18143 000018F0 EBD9                    		jmp	short loop_ecc
 18144                                  ; ---------------------------------------------------------------------------
 18145                                  
 18146                                  ; locate error returns centrally
 18147                                  
 18148                                  ok11_exit_err:
 18149 000018F2 F9                      		stc			; set carry bit again.
 18150                                  ok11_exit:
 18151 000018F3 5A                      		pop	dx
 18152 000018F4 59                      		pop	cx
 18153 000018F5 5B                      		pop	bx
 18154 000018F6 EB88                    		jmp	short i13ret_ck_chglinerr
 18155                                  ; ---------------------------------------------------------------------------
 18156                                  
 18157                                  ; do the single sector read again, this time into our temporary
 18158                                  ; buffer, which is guaranteed not to have a DMA error, then
 18159                                  ; move the data to its proper location and proceed
 18160                                  
 18161                                  handle_dma_during_ecc:
 18162 000018F8 06                      		push	es
 18163 000018F9 53                      		push	bx
 18164 000018FA BB[5201]                		mov	bx, disksector
 18165 000018FD 1E                      		push	ds
 18166 000018FE 07                      		pop	es		; point es:bx to buffer
 18167 000018FF B80102                  		mov	ax, 201h	; read one sector
 18168                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 18169                                  		; 17/10/2022
 18170 00001902 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18171                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18172 00001907 5B                      		pop	bx
 18173 00001908 07                      		pop	es
 18174 00001909 7305                    		jnb	short handle_dma_during_ecc_noerr
 18175 0000190B 80FC11                  		cmp	ah, 11h
 18176 0000190E 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 18177                                  
 18178                                  ; now we're kosher. Copy the data to where it belongs and resume
 18179                                  ; the ECC looping code.
 18180                                  
 18181                                  handle_dma_during_ecc_noerr:
 18182 00001910 56                      		push	si
 18183 00001911 57                      		push	di
 18184 00001912 89DF                    		mov	di, bx
 18185 00001914 BE[5201]                		mov	si, disksector
 18186 00001917 E82BFE                  		call	move_sector
 18187 0000191A 5F                      		pop	di
 18188 0000191B 5E                      		pop	si
 18189 0000191C EBC6                    		jmp	short ok11_op
 18190                                  ; ---------------------------------------------------------------------------
 18191                                  
 18192                                  ; we truly have a dma violation. restore register ax and retry the
 18193                                  ; operation as best we can.
 18194                                  
 18195                                  gotdmaerr:
 18196 0000191E A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 18197 00001921 FB                      		sti
 18198 00001922 80FC02                  		cmp	ah, 2		; romread
 18199 00001925 723B                    		jb	short i13_done_dmaerr
 18200                                  					; just pass dma error thru for
 18201                                  					; functions we don't handle
 18202 00001927 80FC04                  		cmp	ah, 4		; romverify
 18203 0000192A 743C                    		jz	short intverify
 18204 0000192C 80FC05                  		cmp	ah, 5		; romformat
 18205 0000192F 7448                    		jz	short intformat
 18206 00001931 772F                    		ja	short i13_done_dmaerr
 18207                                  
 18208                                  ; we are doing a read/write call. check for dma problems
 18209                                  
 18210                                  ;	******** set up stack frame here!!! ********
 18211                                  
 18212 00001933 52                      		push	dx
 18213 00001934 51                      		push	cx
 18214 00001935 53                      		push	bx
 18215 00001936 50                      		push	ax
 18216 00001937 55                      		push	bp
 18217 00001938 89E5                    		mov	bp, sp
 18218 0000193A 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 18219                                  		; 26/12/2023
 18220                                  		;add	dx, dx
 18221                                  		;add	dx, dx
 18222                                  		;add	dx, dx
 18223                                  		;add	dx, dx		; dx = dx*16
 18224 0000193C D1E2                    		shl	dx, 1
 18225 0000193E D1E2                    		shl	dx, 1
 18226 00001940 D1E2                    		shl	dx, 1
 18227 00001942 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 18228 00001944 01DA                    		add	dx, bx		; combine with offset
 18229 00001946 81C2FF01                		add	dx, 511		; simulate a transfer
 18230                                  
 18231                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 18232                                  ; we skip the first transfer and perform the remaining buffering and transfer
 18233                                  
 18234 0000194A 7303                    		jnb	short no_skip_first
 18235 0000194C E98300                  		jmp	bufferx		; restore dh=head & do buffer
 18236                                  ; ---------------------------------------------------------------------------
 18237                                  
 18238                                  no_skip_first:
 18239 0000194F D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 18240 00001951 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 18241 00001953 28F4                    		sub	ah, dh
 18242                                  
 18243                                  ; ah is now the number of sectors that we can successfully write in this
 18244                                  ; segment. if this number is above or equal to the requested number, then we
 18245                                  ; continue the operation as normal. otherwise, we break it into pieces.
 18246                                  ;
 18247                                  ; wait a sec. this is goofy. the whole reason we got here in the
 18248                                  ; first place is because we got a dma error. so it's impossible
 18249                                  ; for the whole block to fit, unless the dma error was returned
 18250                                  ; in error.
 18251                                  
 18252 00001955 38C4                    		cmp	ah, al		; can we fit it	in?
 18253 00001957 7236                    		jb	short doblock	; no, perform blocking.
 18254                                  
 18255                                  ; yes, the request fits. let it happen.
 18256                                  
 18257 00001959 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18258                                  					; set up head number
 18259 0000195C E888FE                  		call	doint
 18260 0000195F E9D900                  		jmp	bad13		; and return from this place
 18261                                  ; ---------------------------------------------------------------------------
 18262                                  
 18263                                  i13_done_dmaerr:
 18264 00001962 B409                    		mov	ah, 9		; pass dma error thru to caller
 18265 00001964 F9                      		stc
 18266 00001965 E914FF                  		jmp	ret_from_i13	; return with error,
 18267                                  					; we know it's not a changeline error
 18268                                  ; ---------------------------------------------------------------------------
 18269                                  
 18270                                  ; verify the given sectors. place the buffer pointer into our space.
 18271                                  
 18272                                  intverify:
 18273 00001968 06                      		push	es		; save caller's dma address
 18274 00001969 53                      		push	bx
 18275 0000196A 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 18276 0000196B 07                      		pop	es
 18277                                  dosimple:
 18278 0000196C BB[5201]                		mov	bx, disksector
 18279                                  					; do the i/o from Bios_Data:disksector
 18280                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 18281                                  		; 17/10/2022
 18282 0000196F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18283                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18284 00001974 5B                      		pop	bx
 18285 00001975 07                      		pop	es
 18286 00001976 E907FF                  		jmp	i13ret_ck_chglinerr
 18287                                  ; ---------------------------------------------------------------------------
 18288                                  
 18289                                  ; format operation. copy the parameter table into Bios_Data:disksector
 18290                                  
 18291                                  intformat:
 18292 00001979 06                      		push	es
 18293 0000197A 53                      		push	bx
 18294 0000197B 56                      		push	si
 18295 0000197C 57                      		push	di
 18296 0000197D 1E                      		push	ds
 18297                                  
 18298                                  ; point ds to the caller's dma buffer, es to Bios_Data
 18299                                  ; in other words, swap (ds, es)
 18300                                  
 18301 0000197E 06                      		push	es
 18302 0000197F 1E                      		push	ds
 18303 00001980 07                      		pop	es
 18304 00001981 1F                      		pop	ds
 18305 00001982 89DE                    		mov	si, bx
 18306 00001984 BF[5201]                		mov	di, disksector
 18307 00001987 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 18308 0000198A 1F                      		pop	ds
 18309 0000198B 5F                      		pop	di
 18310 0000198C 5E                      		pop	si		; do the i/o from
 18311 0000198D EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 18312                                  ; ---------------------------------------------------------------------------
 18313                                  
 18314                                  ; we can't fit the request into the entire block. perform the operation on
 18315                                  ; the first block.
 18316                                  ;
 18317                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 18318                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 18319                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 18320                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 18321                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 18322                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 18323                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 18324                                  ; doblock will handle the first block of requested sectors within the
 18325                                  ; boundary of this safe value.
 18326                                  
 18327                                  		; 26/12/2023 - Retro DOS v5.0
 18328                                  doblock:
 18329                                  
 18330                                  ; try to get the # of sectors/track from bds via rom drive number.
 18331                                  ; for any mini disks installed, here we have to pray that they have the
 18332                                  ; same # of sector/track as the main dos partition disk drive.
 18333                                  				
 18334 0000198F 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 18335                                  					; get head #, drive #
 18336 00001992 51                      		push	cx
 18337 00001993 06                      		push	es
 18338 00001994 57                      		push	di		; ah - # of sectors before dma boundary
 18339                                  					; al - requested # of sectors for i/o.
 18340 00001995 E83BFE                  		call	find_bds
 18341 00001998 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18342                                  		; 26/12/2023
 18343 0000199C 26F6453F01              		test	byte [es:di+3Fh], 1
 18344                                  		; 12/12/2022
 18345                                  		;test	byte [es:di+23h], 1
 18346                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18347 000019A1 5F                      		pop	di
 18348 000019A2 07                      		pop	es
 18349 000019A3 88E0                    		mov	al, ah		; set al=ah for	floppies
 18350 000019A5 7404                    		jz	short doblockflop ; they are track by track operation
 18351 000019A7 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 18352 000019A9 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 18353                                  doblockflop:
 18354 000019AB 59                      		pop	cx
 18355                                  doblockcontinue:
 18356 000019AC 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 18357 000019AE 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 18358 000019B0 50                      		push	ax
 18359 000019B1 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 18360 000019B3 EB03                    		jmp	short doblockdoint
 18361                                  ; ---------------------------------------------------------------------------
 18362                                  
 18363                                  doblocklast:
 18364 000019B5 88C4                    		mov	ah, al
 18365 000019B7 50                      		push	ax
 18366                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 18367 000019B8 E82CFE                  		call	doint
 18368 000019BB 727E                    		jb	short bad13	; something happened, bye!
 18369 000019BD 58                      		pop	ax
 18370 000019BE 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 18371                                  					; decrement by the successful operation
 18372 000019C1 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 18373 000019C3 00E7                    		add	bh, ah		; advance dma addres
 18374 000019C5 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 18375 000019C7 38C4                    		cmp	ah, al		; check	the previous value
 18376 000019C9 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 18377                                  					; then we are done already.
 18378 000019CB 28E0                    		sub	al, ah		; otherwise,
 18379                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 18380 000019CD E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 18381 000019D0 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 18382                                  ; ---------------------------------------------------------------------------
 18383                                  
 18384                                  bufferx:
 18385 000019D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18386                                  					; set up head number
 18387                                  buffer:
 18388 000019D5 53                      		push	bx
 18389 000019D6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 18390 000019D9 80FC03                  		cmp	ah, 3		; romwrite
 18391 000019DC 7525                    		jnz	short doread	;
 18392                                  					
 18393                                  ; copy the offending sector into local buffer
 18394                                  
 18395 000019DE 06                      		push	es
 18396 000019DF 1E                      		push	ds
 18397 000019E0 56                      		push	si
 18398 000019E1 57                      		push	di
 18399 000019E2 1E                      		push	ds		; exchange segment registers
 18400 000019E3 06                      		push	es
 18401 000019E4 1F                      		pop	ds
 18402 000019E5 07                      		pop	es
 18403 000019E6 BF[5201]                		mov	di, disksector	; where to move
 18404 000019E9 57                      		push	di		; save it
 18405 000019EA 89DE                    		mov	si, bx		; source
 18406 000019EC E856FD                  		call	move_sector	; move sector into local buffer
 18407 000019EF 5B                      		pop	bx		; new transfer address
 18408                                  					; (es:bx = Bios_Data:diskbuffer)
 18409 000019F0 5F                      		pop	di		; restore caller's di & si
 18410 000019F1 5E                      		pop	si
 18411 000019F2 1F                      		pop	ds		; restore Bios_Data
 18412                                  
 18413                                  ; see if we are wrapping around a track or head
 18414                                  
 18415 000019F3 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 18416                                  					; get drive number
 18417 000019F5 8A5608                  		mov	dl, [bp+8]
 18418 000019F8 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 18419                                  					;
 18420                                  					; ah is	function
 18421                                  					; al is	1 for single sector transfer
 18422                                  					; es:bx	is local transfer addres
 18423                                  					; cx is	track/sector number
 18424                                  					; dx is	head/drive number
 18425                                  					; si,di	unchanged
 18426 000019FB E8E9FD                  		call	doint
 18427 000019FE 07                      		pop	es		; restore caller's dma segment
 18428 000019FF 723A                    		jb	short bad13	; go clean up
 18429 00001A01 EB22                    		jmp	short dotail
 18430                                  ; ---------------------------------------------------------------------------
 18431                                  
 18432                                  ; reading a sector. do int first, then move things around
 18433                                  
 18434                                  doread:
 18435 00001A03 06                      		push	es
 18436 00001A04 53                      		push	bx
 18437 00001A05 1E                      		push	ds		; es = Bios_Code
 18438 00001A06 07                      		pop	es
 18439 00001A07 BB[5201]                		mov	bx, disksector
 18440 00001A0A B001                    		mov	al, 1
 18441 00001A0C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18442                                  					; get drive number
 18443 00001A0F E84EFD                  		call	check_wrap	;
 18444                                  					; ah = function
 18445                                  					; al = 1 for single sector
 18446                                  					; es:bx	points to local	buffer
 18447                                  					; cx, dx are track/sector, head/drive
 18448 00001A12 E8D2FD                  		call	doint
 18449 00001A15 5B                      		pop	bx
 18450 00001A16 07                      		pop	es
 18451 00001A17 7222                    		jb	short bad13
 18452 00001A19 56                      		push	si
 18453 00001A1A 57                      		push	di
 18454 00001A1B 89DF                    		mov	di, bx
 18455 00001A1D BE[5201]                		mov	si, disksector
 18456 00001A20 E822FD                  		call	move_sector
 18457 00001A23 5F                      		pop	di
 18458 00001A24 5E                      		pop	si
 18459                                  
 18460                                  ; note the fact that we've done 1 more sector
 18461                                  
 18462                                  dotail:
 18463 00001A25 5B                      		pop	bx		; retrieve new dma area
 18464 00001A26 80C702                  		add	bh, 2		; advance over sector
 18465 00001A29 41                      		inc	cx
 18466 00001A2A 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 18467 00001A2D F8                      		clc
 18468 00001A2E FEC8                    		dec	al
 18469 00001A30 7409                    		jz	short bad13	; no more i/o
 18470                                  
 18471                                  ; see if we wrap around a track or head boundary with starting sector
 18472                                  ; we already have the correct head number to pass to check_wrap
 18473                                  
 18474 00001A32 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18475 00001A35 E828FD                  		call	check_wrap
 18476 00001A38 E8ACFD                  		call	doint
 18477                                  
 18478                                  ; we are done. ax has the final code; we throw away what we got before
 18479                                  
 18480                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 18481                                  ;	   or we've finished. If carry is set now, our only
 18482                                  ;	   hope for salvation is that it was a read operation
 18483                                  ;	   and the error code is ECC error. In that case, we'll
 18484                                  ;	   just pop the registers and go do the old ECC thing.
 18485                                  ;	   When the DMA error that got us here in the first
 18486                                  ;	   place occurs, it'll handle it.
 18487                                  
 18488                                  bad13:
 18489 00001A3B 89EC                    		mov	sp, bp
 18490 00001A3D 5D                      		pop	bp
 18491 00001A3E 5B                      		pop	bx
 18492 00001A3F 5B                      		pop	bx
 18493 00001A40 59                      		pop	cx
 18494 00001A41 5A                      		pop	dx
 18495 00001A42 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 18496 00001A44 E935FE                  		jmp	ret_from_i13	; non-error exit
 18497                                  ; ---------------------------------------------------------------------------
 18498                                  
 18499                                  xgoterr13_xxxx:	
 18500 00001A47 E958FE                  		jmp	goterr13_xxxx
 18501                                  
 18502                                  ; ---------------------------------------------------------------------------
 18503                                  		; 10/12/2022
 18504                                  		;db 	0
 18505                                  ; ---------------------------------------------------------------------------
 18506                                  
 18507                                  ;Bios_Code ends
 18508                                  
 18509                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18510                                  
 18511                                  ;-----------------------------------------------------------------------------
 18512                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 18513                                  ;-----------------------------------------------------------------------------
 18514                                  ; 17/03/2019 - Retro DOS v4.0
 18515                                  
 18516                                  		; 19/10/2022
 18517                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 18518 00001A4A 8A26[7500]              		mov	ah, [drvmax]
 18519 00001A4E BF[3C05]                		mov	di, dskdrvs
 18520 00001A51 1E                      		push	ds		; pass result in es:di
 18521 00001A52 07                      		pop	es
 18522 00001A53 E934EC                  		jmp	SetPtrSav
 18523                                  
 18524                                  ; =============== S U B	R O U T	I N E =======================================
 18525                                  
 18526                                  ;---------------------------------------------------------------------------
 18527                                  ; install_bds installs a bds at location es:di into the current linked list of
 18528                                  ; bds maintained by this device driver. it places the bds at the end of the
 18529                                  ; list. Trashes (at least) ax, bx, di, si
 18530                                  ;---------------------------------------------------------------------------
 18531                                  
 18532                                  		; 26/12/2023 - Retro DOS v5.0
 18533                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 18534                                  install_bds:
 18535 00001A56 1E                      		push	ds		; save Bios_Data segment
 18536 00001A57 BE[1901]                		mov	si, start_bds	; beginning of chain
 18537                                  
 18538                                  		; ds:si now points to link to first bds
 18539                                  		; assume bds list is non-empty
 18540                                  loop_next_bds:
 18541 00001A5A C534                    		lds	si, [si]	; [si+BDS.link]
 18542                                  					; fetch	next bds
 18543 00001A5C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 18544 00001A60 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 18545                                  					; drive	with new one?
 18546 00001A63 7518                    		jnz	short next_bds
 18547 00001A65 B310                    		mov	bl, 10h		; fi_am_mult
 18548                                  		; 26/12/2023
 18549 00001A67 26085D3F                		or	[es:di+3Fh], bl
 18550                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18551                                  					; set both of them to i_am_mult	if so
 18552 00001A6B 085C3F                  		or	[si+3Fh], bl
 18553                                  		;or	[si+23h], bl	; [si+BDS.flags]
 18554 00001A6E 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 18555                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 18556                                  					; we don't own it
 18557 00001A73 8A5C3F                  		mov	bl, [si+3Fh]
 18558                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 18559                                  					; determine if changeline available
 18560 00001A76 80E302                  		and	bl, 2		; fchangeline
 18561 00001A79 26085D3F                		or	[es:di+3Fh], bl
 18562                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18563                                  next_bds:
 18564                                  		; 02/09/2023 (PCDOS 7.1)
 18565 00001A7D B8FFFF                  		mov	ax, 0FFFFh	; -1
 18566 00001A80 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 18567                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 18568                                  					; are we at end	of list?
 18569 00001A82 75D6                    		jnz	short loop_next_bds
 18570 00001A84 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 18571                                  					; install bds
 18572 00001A87 893C                    		mov	[si], di
 18573 00001A89 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 18574                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 18575                                  					; set next pointer to null
 18576 00001A8C 1F                      		pop	ds
 18577                                  
 18578                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 18579                                  ; 16/10/2022 (MSDOS 6.0 Code)
 18580                                  
 18581                                  ; **** If the new drive has a higher EOT value, we must alter the
 18582                                  ;      'eot' variable appropriately.
 18583                                  
 18584                                  		; 26/12/2023
 18585 00001A8D 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 18586                                  		; 01/06/2019
 18587                                  		;mov	al,[es:di+52]
 18588                                  		; 22/07/2023
 18589                                  		;mov	al,[es:di+BDS.rsecpertrack]
 18590 00001A91 3A06[2C01]              		cmp	al,[eot]
 18591 00001A95 7603                    		jbe	short _eot_ok
 18592 00001A97 A2[2C01]                		mov	[eot],al
 18593                                  _eot_ok:
 18594 00001A9A C3                      		retn
 18595                                  
 18596                                  ; ---------------------------------------------------------------------------
 18597                                  
 18598                                  ; 17/10/2022
 18599                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 18600                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 18601                                  ; 09/12/2022
 18602                                  DRVLET equ drvlet
 18603                                  SNGMSG equ sngmsg
 18604                                  
 18605                                  ; 16/10/2022
 18606                                  
 18607                                  ;---------------------------------------------------------------------------
 18608                                  ;  ask to swap the disk in drive a:
 18609                                  ;	es:di -> bds
 18610                                  ;	ds -> Bios_Data
 18611                                  ;---------------------------------------------------------------------------
 18612                                  
 18613                                  		; 26/12/2023 - Retro DOS v5.0
 18614                                  
 18615                                  		; 19/10/2022
 18616 00001A9B F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 18617                                  		;test	ds:IsWin386, 1	; Is win386 present?
 18618 00001AA0 7405                    		jz	short no_win386	; no, skip SetFocus
 18619                                  		
 18620                                  		; set focus to the correct VM
 18621                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 18622                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 18623                                  		; 17/10/2022
 18624 00001AA2 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 18625                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 18626                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 18627                                  no_win386:
 18628 00001AA7 51                      		push	cx
 18629 00001AA8 52                      		push	dx
 18630 00001AA9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 18631                                  					; get the drive	letter
 18632                                  
 18633                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 18634                                  ;           then existing dsk is drive A & vice versa
 18635                                  
 18636 00001AAD 88D6                    		mov	dh, dl
 18637 00001AAF 80F601                  		xor	dh, 1
 18638 00001AB2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 18639 00001AB4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 18640                                  					; broad	cast code for swap disk
 18641                                  					; Broadcast it
 18642 00001AB7 CD2F                    		int	2Fh
 18643 00001AB9 41                      		inc	cx		; cx == -1 ?
 18644 00001ABA 741E                    		jz	short swpdsk9	; somebody has handled it
 18645                                  
 18646                                  ; using a different drive in a one drive system so request the user change disks
 18647                                  
 18648 00001ABC 80C241                  		add	dl, 'A'
 18649                                  		; 17/10/2022
 18650 00001ABF 2E8816[F91A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 18651                                  		; 16/10/2022
 18652                                  		;;mov	byte [cs:drvlet], dl
 18653                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 18654                                  					; 0070h:3D54h =	2C7h:17E4h
 18655 00001AC4 BE[DD1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 18656                                  		;mov	si, 17C8h	; sngmsg
 18657                                  					; 0070h:3D38h =	2C7h:17C8h
 18658 00001AC7 53                      		push	bx
 18659 00001AC8 2E                      		cs
 18660 00001AC9 AC                      		lodsb			; get the next character of the message
 18661                                  		;lods	byte ptr cs:[si]
 18662                                  wrmsg_loop:
 18663 00001ACA CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 18664                                  					; AL = character to display
 18665 00001ACC 2E                      		cs
 18666 00001ACD AC                      		lodsb
 18667                                  		;lods	byte ptr cs:[si] ; cs lodsb
 18668                                  					; get the next character of the	message
 18669 00001ACE 08C0                    		or	al, al
 18670 00001AD0 75F8                    		jnz	short wrmsg_loop
 18671 00001AD2 E833E7                  		call	con_flush	; flush out keyboard queue
 18672                                  					; call rom-bios
 18673 00001AD5 30E4                    		xor	ah, ah
 18674 00001AD7 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 18675                                  					; Return: AH = scan code, AL = character
 18676 00001AD9 5B                      		pop	bx
 18677                                  swpdsk9:
 18678 00001ADA 5A                      		pop	dx
 18679 00001ADB 59                      		pop	cx
 18680 00001ADC C3                      		retn
 18681                                  
 18682                                  ; ---------------------------------------------------------------------------
 18683                                  
 18684                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18685                                  
 18686                                  ;--------------------------------------------------------
 18687                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 18688                                  ;--------------------------------------------------------
 18689                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 18690                                  ;--------------------------------------------------------
 18691                                  ; 17/03/2019 - Retro DOS v4.0
 18692                                  ; 26/12/2023 - Retro DOS v5.0
 18693                                  
 18694                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 18695                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 18696 00001ADD 0D0A                    sngmsg:		db 0Dh,0Ah
 18697 00001ADF 496E73657274206469-     		db 'Insert diskette for drive '
 18697 00001AE8 736B6574746520666F-
 18697 00001AF1 7220647269766520   
 18698                                  
 18699                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 18700                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 18701 00001AF9 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 18701 00001B02 65737320616E79206B-
 18701 00001B0B 6579207768656E2072-
 18701 00001B14 656164790D0A       
 18702 00001B1A 0A00                    		db 0Ah,0
 18703                                  
 18704                                  ; =============== S U B	R O U T	I N E =======================================
 18705                                  
 18706                                  ;---------------------------------------------------------------------------
 18707                                  ; input : es:di points to current bds for drive.
 18708                                  ; return : zero set if no open files
 18709                                  ;	   zero reset if open files
 18710                                  ;---------------------------------------------------------------------------
 18711                                  
 18712                                  		; 26/12/2023 - Retro DOS v5.0
 18713                                  chkopcnt:	
 18714 00001B1C 26837D3C00              		cmp     word [es:di+3Ch], 0
 18715                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 18716 00001B21 C3                      		retn
 18717                                  
 18718                                  ; =============== S U B	R O U T	I N E =======================================
 18719                                  
 18720                                  ;---------------------------------------------------------------------------
 18721                                  ; at media check time, we need to really get down and check what the change is.
 18722                                  ; this is guaranteed to be expensive.
 18723                                  ;
 18724                                  ;	es:di -> bds, ds -> Bios_Data
 18725                                  ;---------------------------------------------------------------------------
 18726                                  
 18727                                  		; 26/12/2023 - Retro DOS v5.0
 18728                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 18729                                  mediacheck:
 18730 00001B22 E852EE                  		call	checksingle	; make sure correct disk is in place
 18731 00001B25 31F6                    		xor	si, si
 18732 00001B27 E86101                  		call	haschange
 18733 00001B2A 742F                    		jz	short mediaret
 18734                                  		; 26/12/2023
 18735                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 18736 00001B2C E85001                  		call	checkromchange
 18737 00001B2F 752B                    		jnz	short mediadovolid
 18738 00001B31 50                      		push	ax
 18739 00001B32 52                      		push	dx
 18740 00001B33 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18741                                  					; set logical drive number
 18742 00001B37 B416                    		mov	ah, 16h
 18743 00001B39 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18744                                  					; DL = drive to	check
 18745                                  					; Return: AH = disk change status
 18746 00001B3B 5A                      		pop	dx
 18747 00001B3C 58                      		pop	ax
 18748 00001B3D 721D                    		jb	short mediadovolid
 18749 00001B3F BE0100                  		mov	si, 1		; signal no change
 18750                                  
 18751                                  ; there are some drives with changeline that "lose" the changeline indication
 18752                                  ; if a different drive is accessed after the current one. in order to avoid
 18753                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 18754                                  ; is not active and we are accessing a different drive from the last one.
 18755                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 18756                                  ; status.
 18757                                  		; 19/10/2022
 18758 00001B42 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 18759 00001B46 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 18760                                  					; (If the last drive accessed is not current drive
 18761                                  					; media	change status may be incorrect.	So,
 18762                                  					; "I don't now" will be returned even if it is indicated
 18763                                  					; as media is not changed.)
 18764 00001B4A 740F                    		jz	short mediaret	; (same	drive,
 18765                                  					; media	changeline indication is reliable)
 18766                                  
 18767                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 18768                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 18769                                  ; "not changed" here since the 2 second test said no change.)
 18770                                  
 18771 00001B4C 50                      		push	ax
 18772 00001B4D 51                      		push	cx
 18773 00001B4E 52                      		push	dx
 18774 00001B4F E8D8EA                  		call	Check_Time_Of_Access
 18775 00001B52 5A                      		pop	dx
 18776 00001B53 59                      		pop	cx
 18777 00001B54 58                      		pop	ax
 18778 00001B55 09F6                    		or	si, si
 18779 00001B57 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 18780                                  					; (volume id will be checked)
 18781 00001B59 31F6                    		xor	si, si		; return "i don't know"
 18782                                  mediaret:
 18783 00001B5B C3                      		retn
 18784                                  ; ---------------------------------------------------------------------------
 18785                                  
 18786                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 18787                                  ; because this may be different since we only set medbyt when doing a read
 18788                                  ; or write.
 18789                                  
 18790                                  mediadovolid:
 18791 00001B5C E877EB                  		call	GetBp		; build	a new bpb in current bds
 18792 00001B5F 72FA                    		jb	short mediaret
 18793 00001B61 E82D00                  		call	check_vid
 18794 00001B64 73F5                    		jnb	short mediaret
 18795 00001B66 E940F2                  		jmp	maperror	; fix up al for	return to dos
 18796                                  ; ---------------------------------------------------------------------------
 18797                                  
 18798                                  ; simple, quick check of latched change. if no indication, then return
 18799                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 18800                                  ; return and set al = 15 (for invalid media change) which will be returned to
 18801                                  ; dos.
 18802                                  ;
 18803                                  ; for dos 3.3, this will work only for the drive that has changeline.
 18804                                  
 18805                                  ;	call with es:di -> bds, ds -> Bios_Data
 18806                                  ;	***** warning:  this routine will return one level up on the stack
 18807                                  ;			if an error occurs!
 18808                                  
 18809                                  checklatchio:
 18810                                  
 18811                                  ; if returning fake bpb then assume the disk has not changed
 18812                                  
 18813                                  		; 26/12/2023
 18814                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 18815 00001B69 E8B0FF                  		call	chkopcnt
 18816 00001B6C 741B                    		jz	short checkret	; done if zero
 18817                                  
 18818                                  ; check for past rom indications. if no rom change indicated, then return ok.
 18819                                  
 18820                                  		; 26/12/2023
 18821                                  		;test	word [es:di+3Fh], 40h
 18822                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 18823 00001B6E E80E01                  		call	checkromchange
 18824 00001B71 7416                    		jz	short checkret
 18825                                  
 18826                                  ; we now see that a change line has been seen in the past. let's do the
 18827                                  ; expensive verification.
 18828                                  
 18829 00001B73 E860EB                  		call	GetBp		; build	bpb in current bds
 18830 00001B76 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 18831 00001B78 E81600                  		call	check_vid
 18832 00001B7B 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 18833 00001B7D 09F6                    		or	si, si		; is changed for sure?
 18834 00001B7F 7908                    		jns	short checkret
 18835 00001B81 E88F00                  		call	returnvid
 18836                                  checklatchret:
 18837 00001B84 E822F2                  		call	maperror	; fix up al for	return to dos
 18838                                  ret_no_error_map:
 18839 00001B87 F9                      		stc
 18840 00001B88 5E                      		pop	si		; pop off return address
 18841                                  checkret:
 18842 00001B89 C3                      		retn
 18843                                  ; ---------------------------------------------------------------------------
 18844                                  
 18845                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 18846                                  ; only if there was a disk error. return that error code in ax.
 18847                                  ;
 18848                                  ;	called with es:di -> bds, ds -> Bios_Data
 18849                                  
 18850                                  checkfatvid:
 18851 00001B8A E8D101                  		call	fat_check	; check	the fat	and the	vid
 18852 00001B8D 09F6                    		or	si, si
 18853 00001B8F 7835                    		js	short changed_drv
 18854                                  
 18855                                  ; the fat was the same. fall into check_vid and check volume id.
 18856                                  
 18857                                  		; fall into check_vid
 18858                                  
 18859                                  ; =============== S U B	R O U T	I N E =======================================
 18860                                  
 18861                                  ; now with the extended boot record, the logic should be enhanced.
 18862                                  ;
 18863                                  ; if it is the extended boot record, then we check the volume serial
 18864                                  ; number instead of volume id. if it is different, then set si to -1.
 18865                                  ;
 18866                                  ; if it is same, then si= 1 (no change).
 18867                                  ;
 18868                                  ; if it is not the extended boot record, then just follows the old
 18869                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 18870                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 18871                                  ; should have already covered by extended boot structure checking.
 18872                                  ; so, we will return "i don't know" by setting si to 0.
 18873                                  ;
 18874                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 18875                                  ; (this will be gauranteed by a successful getbp call right before this
 18876                                  ; routine.)
 18877                                  ;
 18878                                  ;	called with es:di -> bds, ds -> bds
 18879                                  
 18880                                  		; 26/12/2023 - Retro DOS v5.0
 18881                                  		; 19/10/2022
 18882                                  check_vid:
 18883                                  
 18884                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 18885                                  ; boot signature. if it is set then go to do the extended
 18886                                  ; id check otherwise continue with code below
 18887                                  
 18888                                  		; 26/12/2023
 18889                                  		;;;
 18890 00001B91 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18891 00001B96 7507                    		jnz     short chk_vid_1
 18892 00001B98 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 18893                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 18894 00001B9D EB05                    		jmp     short chk_vid_2
 18895                                  chk_vid_1:
 18896                                  		;;;
 18897 00001B9F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 18898                                  					; [disksector+EXT_BOOT.SIG],
 18899                                  					; EXT_BOOT_SIGNATURE
 18900                                  chk_vid_2:		; 26/12/2023
 18901 00001BA4 7427                    		jz	short do_ext_check_id
 18902 00001BA6 E8E200                  		call	haschange
 18903 00001BA9 74DE                    		jz	short checkret
 18904 00001BAB 31F6                    		xor	si, si
 18905 00001BAD 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 18906                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 18907 00001BB2 7411                    		jz	short checkfatret ; don't read vol id
 18908                                  					; if not fat system
 18909 00001BB4 E8F400                  		call	read_volume_id
 18910 00001BB7 720C                    		jb	short checkfatret
 18911 00001BB9 E89901                  		call	check_volume_id
 18912 00001BBC BEFFFF                  		mov	si, 0FFFFh	; -1
 18913                                  					; definitely changed
 18914 00001BBF 7505                    		jnz	short changed_drv
 18915                                  
 18916 00001BC1 46                      		inc	si		; not changed
 18917                                  vid_no_changed:
 18918 00001BC2 E8C000                  		call	resetchanged
 18919                                  		; 12/12/2022
 18920                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 18921                                  		;clc
 18922                                  checkfatret:
 18923 00001BC5 C3                      		retn
 18924                                  ; ---------------------------------------------------------------------------
 18925                                  
 18926                                  		; 12/12/2022
 18927                                  changed_drv:
 18928 00001BC6 F8                      		clc			; cas -- return	no error
 18929 00001BC7 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 18930                                  					; ensure that we ask rom for media
 18931 00001BCC C3                      		retn			; check	next time round
 18932                                  ; ---------------------------------------------------------------------------
 18933                                  
 18934                                  ; extended id check
 18935                                  
 18936                                  ; 16/10/2022
 18937                                  
 18938                                  ; the code to check extended id is basically a check to see if the
 18939                                  ; volume serial number is still the same. the volume serial number
 18940                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 18941                                  ; ds:di points to the bds of the drive under consideration.
 18942                                  ; the bds has fields containing the high and low words 
 18943                                  ; of the volume serial number of the media in the drive.
 18944                                  ; compare these fields to the fields mentioned above. if these fields
 18945                                  ; do not match the media has changed and so we should jump to the code
 18946                                  ; starting at ext_changed else return "i don't know" status
 18947                                  ; in the register used for the changeline status and continue executing
 18948                                  ; the code given below. for temporary storage use the register which
 18949                                  ; has been saved and restored around this block.
 18950                                  ;
 18951                                  ; bds fields in inc\msbds.inc
 18952                                  
 18953                                  		; 26/12/2023 - Retro DOS v5.0
 18954                                  		; 19/10/2022
 18955                                  do_ext_check_id:
 18956                                  		; 26/12/2023
 18957                                  		;push	ax
 18958                                  		;;mov	ax, word ptr ds:disksector+27h
 18959                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 18960                                  		;mov	ax, [disksector+27h]
 18961                                  ; 26/12/2023
 18962                                  %if 1
 18963                                  		;;;
 18964 00001BCD 57                      		push	di
 18965 00001BCE BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 18966                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 18967 00001BD1 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18968 00001BD6 7403                    		jz	short chk_vid_3
 18969 00001BD8 83EE1C                  		sub	si, 28		; BS_VolID
 18970                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 18971                                  chk_vid_3:
 18972                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 18973 00001BDB 81C78900                		add	di, 137		; BDS.vol_serial
 18974 00001BDF A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 18975                                  			;		= [di+BDS.vol_serial] ?
 18976 00001BE0 7501                    		jnz	short chk_vid_4
 18977 00001BE2 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 18978                                  			;		= [di+BDS.vol_serial+2] ?
 18979                                  chk_vid_4:
 18980 00001BE3 5F                      		pop	di
 18981                                  		;pop	ax
 18982 00001BE4 7504                    		jnz	short ext_changed ; not equal/same
 18983 00001BE6 31F6                    		xor	si, si 		 ; 0 ; don't know
 18984 00001BE8 EBD8                    		jmp	short vid_no_changed ; reset the flag
 18985                                  		;;;
 18986                                  %else
 18987                                  		; 02/09/2023
 18988                                  		xor	si, si ; 0
 18989                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 18990                                  		jnz	short ext_changed
 18991                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 18992                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 18993                                  		jnz	short ext_changed
 18994                                  		;xor	si, si		; 0
 18995                                  					; don't know
 18996                                  		pop	ax
 18997                                  		jmp	short vid_no_changed
 18998                                  					; reset the flag
 18999                                  %endif
 19000                                  
 19001                                  ; ---------------------------------------------------------------------------
 19002                                  
 19003                                  ext_changed:
 19004                                  		; 26/12/2023
 19005                                  		;pop	ax
 19006                                  		; 02/09/2023
 19007                                  		;dec	si ; mov si, 0FFFFh ; -1
 19008 00001BEA BEFFFF                  		mov	si, 0FFFFh	; -1
 19009                                  					; disk changed!
 19010                                  		; 12/12/2022
 19011                                  		; ('changed_drv' clears cf)
 19012                                  		;clc
 19013 00001BED EBD7                    		jmp	short changed_drv
 19014                                  
 19015                                  ; ---------------------------------------------------------------------------
 19016                                  
 19017                                  ; at i/o time, we detected the error. now we need to determine whether the
 19018                                  ; media was truly changed or not. we return normally if media change unknown.
 19019                                  ; and we pop off the call and jmp to harderr if we see an error.
 19020                                  ;
 19021                                  ; es:di -> bds
 19022                                  
 19023                                  checkio:				
 19024 00001BEF 80FC06                  		cmp	ah, 6
 19025 00001BF2 75D1                    		jnz	short checkfatret
 19026 00001BF4 E825FF                  		call	chkopcnt
 19027 00001BF7 74CC                    		jz	short checkfatret
 19028 00001BF9 E8DAEA                  		call	GetBp
 19029 00001BFC 7212                    		jb	short no_error_map
 19030 00001BFE E889FF                  		call	checkfatvid
 19031 00001C01 7209                    		jb	short checkioret ; disk	error trying to	read in.
 19032 00001C03 09F6                    		or	si, si		; is changed for sure?
 19033 00001C05 7802                    		js	short checkioerr ; yes changed
 19034 00001C07 45                      		inc	bp		; allow	a retry
 19035 00001C08 C3                      		retn
 19036                                  ; ---------------------------------------------------------------------------
 19037                                  
 19038                                  checkioerr:				
 19039 00001C09 E80700                  		call	returnvid
 19040                                  
 19041                                  checkioret:				
 19042 00001C0C F9                      		stc			; make sure carry gets passed through
 19043 00001C0D E955F1                  		jmp	harderr
 19044                                  ; ---------------------------------------------------------------------------
 19045                                  
 19046                                  no_error_map:				
 19047 00001C10 E955F1                  		jmp	harderr2
 19048                                  
 19049                                  ; =============== S U B	R O U T	I N E =======================================
 19050                                  
 19051                                  ; return vid sets up the vid for a return to dos.
 19052                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 19053                                  ;  **** trashes si! ****
 19054                                  
 19055                                  returnvid:		
 19056 00001C13 BE1600                  		mov	si, 22		; extra
 19057                                  					; offset into pointer to return	value
 19058 00001C16 E80700                  		call	vid_into_packet
 19059 00001C19 B406                    		mov	ah, 6
 19060 00001C1B F9                      		stc
 19061 00001C1C C3                      		retn
 19062                                  
 19063                                  ; ---------------------------------------------------------------------------
 19064                                  
 19065                                  ; moves the pointer to the volid for the drive into the original request packet
 19066                                  ; no attempt is made to preserve registers.
 19067                                  ;
 19068                                  ; assumes es:di -> bds
 19069                                  ; **trashes si**
 19070                                  
 19071                                  media_set_vid:				
 19072 00001C1D BE0F00                  		mov	si, 15		; trans+1
 19073                                  					; return the value here	in packet
 19074                                  
 19075                                  		; fall into vid_into_packet
 19076                                  
 19077                                  ; =============== S U B	R O U T	I N E =======================================
 19078                                  
 19079                                  ; return pointer to vid in bds at es:di in packet[si]
 19080                                  
 19081                                  		; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 19082                                  		; 19/10/2022
 19083                                  vid_into_packet:
 19084 00001C20 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 19085 00001C21 C51E[1200]              		lds	bx, [ptrsav]
 19086                                  		;add	di, 75		; BDS.volid
 19087                                  		; 14/04/2024
 19088 00001C25 83C77D                  		add	di, 125	; (PCDOS 7.1)
 19089 00001C28 8938                    		mov	[bx+si], di
 19090                                  		;sub	di, 75		; BDS.volid
 19091 00001C2A 83EF7D                  		sub	di, 125
 19092 00001C2D 8C4002                  		mov	[bx+si+2], es
 19093 00001C30 1F                      		pop	ds
 19094                                  dofloppy:	; 18/12/2022
 19095 00001C31 C3                      		retn
 19096                                  
 19097                                  ; ---------------------------------------------------------------------------
 19098                                  
 19099                                  ;----------------------------------------------------------------------------
 19100                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 19101                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 19102                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 19103                                  ;   of getbp. for 3.5" media, we just return.
 19104                                  ;
 19105                                  ;   inputs:	es:di point to correct bds for this drive
 19106                                  ;		ah has media byte
 19107                                  ;
 19108                                  ;   outputs:	carry clear
 19109                                  ;		    no registers modified
 19110                                  ;		carry set
 19111                                  ;		    al = sectors/fat
 19112                                  ;		    bh = number of root directory entries
 19113                                  ;		    bl = sectors per track
 19114                                  ;		    cx = number of sectors
 19115                                  ;		    dh = sectors per allocation unit
 19116                                  ;		    dl = number of heads
 19117                                  ;
 19118                                  ;----------------------------------------------------------------------------
 19119                                  
 19120                                  		; 26/12/2023 - Retro DOS v5.0
 19121                                  hidensity:
 19122                                  
 19123                                  ; check for correct drive
 19124                                  		
 19125                                  		; 26/12/2023
 19126 00001C32 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 19127                                  		; 12/12/2022
 19128                                  		;test	byte [es:di+23h], 2
 19129                                  		;;test	word [es:di+23h], 2 ; is it special?
 19130                                  					; [es:di+BDS.flags], fchangeline
 19131 00001C37 74F8                    		jz	short dofloppy	; no, do normal floppy test
 19132                                  
 19133                                  ; we have a media byte that is pretty complex. examine drive information
 19134                                  ; table to see what kind it is.
 19135                                  
 19136                                  		; 26/12/2023
 19137 00001C39 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 19138                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 19139 00001C3E 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 19140                                  					; yes, use fatid...
 19141                                  ; 96 tpi drive?
 19142 00001C40 80FCF9                  		cmp	ah, 0F9h
 19143 00001C43 75EC                    		jnz	short dofloppy
 19144                                  
 19145                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 19146                                  ;------ a 720K diskette
 19147                                  
 19148                                  		; 02/09/2023 (PCDOS 7.1)
 19149                                  		; 26/12/2023
 19150 00001C45 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 19151                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 19152 00001C49 3C07                    		cmp	al, 7
 19153                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 19154                                  					; ffOther
 19155 00001C4B 7413                    		jz	short Is720K
 19156 00001C4D 3C09                    		cmp	al, 9
 19157                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 19158                                  					; ff288
 19159 00001C4F 740F                    		jz	short Is720K
 19160 00001C51 B007                    		mov	al, 7		; seven	sectors	/ fat
 19161 00001C53 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 19162                                  					; 224 root dir entries
 19163                                  					; & 0Fh sector max
 19164 00001C56 B96009                  		mov	cx, 2400	; 80*15*2
 19165                                  					; 80 tracks, 15 sectors/track,
 19166                                  					; 2 sides
 19167                                  		; 02/09/2023
 19168 00001C59 5A                      		pop	dx		; pop off return address
 19169 00001C5A BA0201                  		mov	dx, 258		; 1*256+2
 19170                                  					; sectors/allocation unit
 19171                                  					; & head max
 19172                                  		;add	sp, 2		; pop off return address
 19173 00001C5D E9EAEA                  		jmp	Has1		; return to tail of getbp
 19174                                  ; ---------------------------------------------------------------------------
 19175                                  
 19176                                  Is720K:
 19177                                  		; 02/09/2023
 19178 00001C60 5B                      		pop	bx		; pop off return address
 19179                                  		;add	sp, 2		; pop off return address
 19180 00001C61 E9A9EA                  		jmp	Has720K		; return to 720K code
 19181                                  ; ---------------------------------------------------------------------------
 19182                                  
 19183                                  		; 18/12/2022
 19184                                  ;dofloppy:
 19185                                  		;retn
 19186                                  
 19187                                  ; =============== S U B	R O U T	I N E =======================================
 19188                                  
 19189                                  ; 16/10/2022
 19190                                  
 19191                                  ;---------------------------------------------------------------------------
 19192                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 19193                                  ;		   essentially used to indicate changeline, or format.
 19194                                  ;
 19195                                  ;   inputs:	dl contains physical drive number
 19196                                  ;		bx contains bits to set in the flag field in the bdss
 19197                                  ;   outputs:	none
 19198                                  ;   registers modified: flags
 19199                                  ;
 19200                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 19201                                  ;
 19202                                  ; in the virtual drive system we *must* flag the other drives as being changed
 19203                                  ;---------------------------------------------------------------------------
 19204                                  
 19205                                  		; 26/12/2023 - Retro DOS v5.0
 19206                                  set_changed_dl:	
 19207 00001C64 06                      		push	es
 19208 00001C65 57                      		push	di
 19209                                  		;les	di, ds:start_bds
 19210                                  		; 19/10/2022
 19211 00001C66 C43E[1901]              		les	di, [start_bds]
 19212                                  
 19213                                  ; note: we assume that the list is non-empty
 19214                                  
 19215                                  scan_bds:
 19216 00001C6A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19217 00001C6E 7504                    		jnz	short get_next_bds
 19218                                  
 19219                                  ; someone may complain, but this *always* must be done when a disk change is
 19220                                  ; noted. there are *no* other compromising circumstances.
 19221                                  
 19222                                  		; 26/12/2023
 19223 00001C70 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 19224                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 19225                                  					; signal change	on other drive
 19226                                  get_next_bds:
 19227 00001C74 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19228                                  					; go to	next bds
 19229 00001C77 83FFFF                  		cmp	di, 0FFFFh
 19230 00001C7A 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 19231 00001C7C 5F                      		pop	di
 19232 00001C7D 07                      		pop	es
 19233 00001C7E C3                      		retn
 19234                                  
 19235                                  ; =============== S U B	R O U T	I N E =======================================
 19236                                  
 19237                                  ;---------------------------------------------------------------------------
 19238                                  ; checkromchange - see if external program has diddled rom change line.
 19239                                  ;
 19240                                  ;   inputs:	es:di points to current bds.
 19241                                  ;   outputs:	zero set - no change
 19242                                  ;		zero reset - change
 19243                                  ;   registers modified: none
 19244                                  ;---------------------------------------------------------------------------
 19245                                  
 19246                                  		; 26/12/2023 - Retro DOS v5.0
 19247                                  checkromchange:	
 19248                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 19249                                  		; 26/12/2023
 19250 00001C7F 26F6453F40              		test	byte [es:di+3Fh], 40h
 19251                                  		; 10/12/2022
 19252                                  		;test	byte [es:di+23h], 40h
 19253                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 19254                                  					; fchanged
 19255 00001C84 C3                      		retn
 19256                                  
 19257                                  ; =============== S U B	R O U T	I N E =======================================
 19258                                  
 19259                                  ;---------------------------------------------------------------------------
 19260                                  ; resetchanged - restore value of change line
 19261                                  ;
 19262                                  ;   inputs:	es:di points to current bds
 19263                                  ;   outputs:	none
 19264                                  ;   registers modified: none
 19265                                  ;---------------------------------------------------------------------------
 19266                                  
 19267                                  		; 26/12/2023 - Retro DOS v5.0
 19268                                  resetchanged:
 19269                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 19270                                  		; 26/12/2023
 19271 00001C85 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 19272                                  		; 10/12/2022
 19273                                  		;and	byte [es:di+23h], 0BFh
 19274                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 19275                                  					; ~fchanged
 19276 00001C8A C3                      		retn
 19277                                  
 19278                                  ; =============== S U B	R O U T	I N E =======================================
 19279                                  
 19280                                  ;---------------------------------------------------------------------------
 19281                                  ; haschange - see if drive can supply change line
 19282                                  ;
 19283                                  ;   inputs:	es:di points to current bds
 19284                                  ;   outputs:	zero set - no change line available
 19285                                  ;		zero reset - change line available
 19286                                  ;   registers modified: none
 19287                                  ;---------------------------------------------------------------------------
 19288                                  
 19289                                  		; 26/12/2023 - Retro DOS v5.0
 19290                                  haschange:
 19291                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 19292                                  		; 26/12/2023
 19293 00001C8B 26F6453F02              		test	byte [es:di+3Fh], 2
 19294                                  		; 10/12/2022
 19295                                  		;test	byte [es:di+23h], 2
 19296                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 19297                                  					; fchangeline
 19298 00001C90 C3                      		retn
 19299                                  
 19300                                  ; ---------------------------------------------------------------------------
 19301                                  
 19302                                  ; 16/10/2022
 19303                                  
 19304                                  ;-------------------------------------------------------------------------
 19305                                  ; set_volume_id      -	main routine, calls other routines.
 19306                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 19307                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 19308                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 19309                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 19310                                  ;-------------------------------------------------------------------------
 19311                                  
 19312                                  ; set_volume_id
 19313                                  ;   if drive has changeline support, read in and set the volume_id
 19314                                  ; and the last fat_id byte. if no change line support then do nothing.
 19315                                  ;
 19316                                  ;   on entry:
 19317                                  ;	es:di points to the bds for this disk.
 19318                                  ;	ah contains media byte
 19319                                  ;
 19320                                  ;   on exit:
 19321                                  ;	carry clear:
 19322                                  ;	   successful call
 19323                                  ;	carry set
 19324                                  ;	   error and ax has error code
 19325                                  
 19326                                  set_volume_id:
 19327 00001C91 52                      		push	dx		; save registers
 19328 00001C92 50                      		push	ax
 19329 00001C93 E8F5FF                  		call	haschange	; does drive have changeline support?
 19330 00001C96 740B                    		jz	short setvret	; no, get out
 19331 00001C98 E81000                  		call	read_volume_id
 19332 00001C9B 7209                    		jb	short seterr
 19333 00001C9D E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 19334 00001CA0 E8E2FF                  		call	resetchanged	; restore value	of change line
 19335                                  setvret:				
 19336                                  		; 10/12/2022
 19337                                  		; cf = 0
 19338                                  		;clc			; no error, clear carry flag
 19339 00001CA3 58                      		pop	ax		; restore registers
 19340 00001CA4 5A                      		pop	dx
 19341 00001CA5 C3                      		retn
 19342                                  ; ---------------------------------------------------------------------------
 19343                                  
 19344                                  seterr:
 19345 00001CA6 5A                      		pop	dx		; pop stack but don't overwrite ax
 19346 00001CA7 5A                      		pop	dx		; restore dx
 19347 00001CA8 C3                      		retn
 19348                                  ; ---------------------------------------------------------------------------
 19349 00001CA9 0000                    root_sec:	dw 0			; root sector #
 19350                                  
 19351                                  ; 16/10/2022
 19352                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 19353                                  ; 09/12/2022
 19354                                  ROOTSEC equ root_sec
 19355                                  
 19356                                  ; =============== S U B	R O U T	I N E =======================================
 19357                                  
 19358                                  ; 16/10/2022
 19359                                  
 19360                                  ; read_volume_id read the volume id and tells if it has been changed.
 19361                                  ;
 19362                                  ;   on entry:
 19363                                  ;	es:di points to current bds for drive.
 19364                                  ;
 19365                                  ;   on exit:
 19366                                  ;	carry clear
 19367                                  ;	    si = 1  no change
 19368                                  ;	    si = 0  ?
 19369                                  ;	    si = -1 change
 19370                                  ;
 19371                                  ;	carry set:
 19372                                  ;	    error and ax has error code.
 19373                                  
 19374                                  read_volume_id:
 19375 00001CAB 52                      		push	dx		; preserve registers
 19376 00001CAC 51                      		push	cx
 19377 00001CAD 53                      		push	bx
 19378 00001CAE 50                      		push	ax
 19379 00001CAF 06                      		push	es		; stack the bds last
 19380 00001CB0 57                      		push	di
 19381 00001CB1 1E                      		push	ds		; point es to Bios_Data
 19382 00001CB2 07                      		pop	es
 19383 00001CB3 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19384 00001CB6 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 19385                                  		; 26/12/2023
 19386 00001CB9 B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 19387                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 19388                                  		
 19389                                  		;rep	movsb
 19390                                  		; 26/12/2023
 19391                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 19392                                  		;db 0FBh,2Eh,0A4h 
 19393                                  		;cs	; nul_vid is in BIOSCODE segment 
 19394                                  		;rep movsb
 19395 00001CBC F3                      		rep
 19396 00001CBD 2E                      		cs
 19397 00001CBE A4                      		movsb	
 19398                                  		
 19399 00001CBF 5F                      		pop	di
 19400 00001CC0 07                      		pop	es
 19401 00001CC1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 19402                                  					; # of fats
 19403 00001CC5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 19404                                  					; sectors / fat
 19405 00001CC9 F6E1                    		mul	cl		; size taken by	fats
 19406 00001CCB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 19407                                  					; add on reserved sectors
 19408                                  					;
 19409                                  					; ax is	now sector # (0	based)
 19410                                  		; 17/10/2022
 19411 00001CCF 2EA3[A91C]              		mov	[cs:ROOTSEC], ax
 19412                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 19413                                  					; 0070h:3EFFh =	2C7h:198Fh
 19414 00001CD3 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 19415                                  					; # root dir entries
 19416 00001CD7 B104                    		mov	cl, 4		; 16 entries/sector
 19417 00001CD9 D3E8                    		shr	ax, cl		; divide by 16
 19418                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 19419                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 19420 00001CDB 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 19421                                  next_sec:
 19422 00001CDC 51                      		push	cx		; save outer loop counter
 19423 00001CDD 2EA1[A91C]              		mov	ax, [cs:ROOTSEC]
 19424                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 19425                                  					; get sector #
 19426 00001CE1 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 19427                                  					; sectors / track
 19428 00001CE5 31D2                    		xor	dx, dx
 19429 00001CE7 F7F1                    		div	cx
 19430                                  
 19431                                  ; set up registers for call to read_sector
 19432                                  
 19433 00001CE9 42                      		inc	dx		; dx= sectors into track
 19434                                  					; ax= track count from 0
 19435 00001CEA 88D1                    		mov	cl, dl		; sector to read
 19436 00001CEC 31D2                    		xor	dx, dx
 19437 00001CEE 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 19438                                  					; # heads on this disc
 19439 00001CF2 88D6                    		mov	dh, dl		; head number
 19440 00001CF4 88C5                    		mov	ch, al		; track	#
 19441 00001CF6 E8BDEB                  		call	read_sector	; get first sector of the root directory,
 19442                                  					; ds:bx	-> directory sector
 19443 00001CF9 723F                    		jb	short readviderr
 19444 00001CFB B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 19445 00001CFE B008                    		mov	al, 8		; volume label bit
 19446                                  fvid_loop:
 19447                                  		; 02/09/2023 (PCDOS 7.1)
 19448 00001D00 382F                    		cmp	[bx], ch ; 0				
 19449                                  		;cmp	byte [bx], 0 ; end of dir?
 19450 00001D02 7433                    		jz	short no_vid	; yes, no vol id
 19451 00001D04 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 19452 00001D07 7405                    		jz	short ent_loop	; yes, skip
 19453 00001D09 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 19454 00001D0C 750F                    		jnz	short found_vid	; jmp yes
 19455                                  ent_loop:
 19456 00001D0E 83C320                  		add	bx, 32		; add length of	directory entry
 19457 00001D11 E2ED                    		loop	fvid_loop
 19458 00001D13 59                      		pop	cx		; outer loop
 19459 00001D14 2EFF06[A91C]            		inc	word [cs:ROOTSEC]
 19460                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 19461                                  					; next sector
 19462 00001D19 E2C1                    		loop	next_sec	; continue
 19463                                  notfound:
 19464                                  		; 02/09/2023
 19465                                  		;xor	si, si
 19466 00001D1B EB13                    		jmp	short fvid_ret
 19467                                  ; ---------------------------------------------------------------------------
 19468                                  
 19469                                  found_vid:
 19470                                  		; 02/09/2023
 19471                                  		; cf = 0  ('test' instruction clears cf)
 19472 00001D1D 59                      		pop	cx		; clean stack of outer loop counter
 19473 00001D1E 89DE                    		mov	si, bx		; point	to volume_id
 19474 00001D20 06                      		push	es		; preserve current bds
 19475 00001D21 57                      		push	di
 19476 00001D22 1E                      		push	ds
 19477 00001D23 07                      		pop	es		; point es to Bios_Data
 19478 00001D24 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19479 00001D27 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 19480                                  					; length of string minus nul
 19481 00001D2A F3A4                    		rep movsb		; mov volume label to tmp_vid
 19482                                  		;xor	al, al
 19483                                  		; 02/09/2023
 19484 00001D2C 91                      		xchg	ax, cx		; ax = 0
 19485 00001D2D AA                      		stosb			; null terminate
 19486                                  		;;xor	si, si
 19487                                  		; 02/09/2023
 19488                                  		;xchg	ax, si		; si = 0
 19489 00001D2E 5F                      		pop	di		; restore current bds
 19490 00001D2F 07                      		pop	es
 19491                                  fvid_ret:
 19492                                  		; 02/09/2023
 19493 00001D30 31F6                    		xor	si, si ; 0
 19494                                  				
 19495 00001D32 58                      		pop	ax
 19496                                  		; 10/12/2022
 19497                                  		; cf = 0
 19498                                  		;clc
 19499                                  rvidret:
 19500 00001D33 5B                      		pop	bx		; restore registers
 19501 00001D34 59                      		pop	cx
 19502 00001D35 5A                      		pop	dx
 19503 00001D36 C3                      		retn
 19504                                  ; ---------------------------------------------------------------------------
 19505                                  
 19506                                  no_vid:
 19507 00001D37 59                      		pop	cx		; clean stack of outer loop counter
 19508                                  		;jmp	short notfound	; not found
 19509                                  		; 02/09/2023
 19510 00001D38 EBF6                    		jmp	short fvid_ret
 19511                                  ; ---------------------------------------------------------------------------
 19512                                  
 19513                                  readviderr:
 19514 00001D3A 5E                      		pop	si		; trash the outer loop counter
 19515 00001D3B 5E                      		pop	si		; caller's ax, return error code instead
 19516 00001D3C EBF5                    		jmp	short rvidret
 19517                                  
 19518                                  ; ---------------------------------------------------------------------------
 19519                                  		; 26/12/2023 - Retro DOS v5.0
 19520                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 19521                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 19522                                  preset_volid_addr:
 19523 00001D3E BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 19524                                  		; 26/12/2023
 19525                                  		; PCDOS 7.1
 19526 00001D41 83C77D                  		add	di, 125		; BDS.volid
 19527 00001D44 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 19528                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 19529                                  		;add	di, 75		; BDS.volid
 19530                                  		;mov	cx, 12		; VOLID_SIZ
 19531                                  		;
 19532 00001D47 FC                      		cld
 19533 00001D48 C3                      		retn
 19534                                  
 19535                                  ; =============== S U B	R O U T	I N E =======================================
 19536                                  
 19537                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 19538                                  ;
 19539                                  ; inputs:	es:di has current bds
 19540                                  ; outputs:	bds for drive has volume id from tmp
 19541                                  
 19542                                  		; 27/12/2023 - Retro DOS v5.0
 19543                                  transfer_volume_id:
 19544 00001D49 57                      		push	di		; copy the volume id from tmp to special drive
 19545                                  		;push	si
 19546 00001D4A 51                      		push	cx
 19547                                  		; 27/12/2023
 19548 00001D4B 56                      		push	si
 19549                                  
 19550                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19551                                  		;;add	di, BDS.volid
 19552                                  		;add	di, 75		; BDS.volid
 19553                                  		;;mov	cx, VOLID_SIZ
 19554                                  		;mov	cx, 12		; VOLID_SIZ
 19555                                  		;cld
 19556                                  		; 02/09/2023 (PCDOS 7.1)
 19557 00001D4C E8EFFF                  		call	preset_volid_addr
 19558                                  
 19559 00001D4F F3A4                    		rep movsb
 19560                                  		
 19561                                  		; 27/12/2023
 19562 00001D51 5E                      		pop	si
 19563                                  chk_volid_ok:
 19564 00001D52 59                      		pop	cx
 19565                                  		;pop	si
 19566 00001D53 5F                      		pop	di
 19567 00001D54 C3                      		retn
 19568                                  
 19569                                  ; =============== S U B	R O U T	I N E =======================================
 19570                                  
 19571                                  ;  check_volume_id - compare volume id in tmp area with
 19572                                  ;		     one expected for drive
 19573                                  ;
 19574                                  ;   inputs:	es:di has current bds for drive
 19575                                  ;   outputs:	zero true means it matched
 19576                                  
 19577                                  		; 27/12/2023 - Retro DOS v5.0
 19578                                  check_volume_id:
 19579 00001D55 57                      		push	di
 19580 00001D56 51                      		push	cx
 19581                                  		
 19582                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19583                                  		;;add	di, BDS.volid
 19584                                  		;add	di, 75		; BDS.volid
 19585                                  		;;mov	cx, VOLID_SIZ
 19586                                  		;mov	cx, 12		; VOLID_SIZ
 19587                                  		;cld
 19588                                  		; 02/09/2023 (PCDOS 7.1)
 19589 00001D57 E8E4FF                  		call	preset_volid_addr
 19590                                  
 19591 00001D5A F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 19592                                  		
 19593                                  		; 27/12/2023
 19594                                  		;pop	cx
 19595                                  		;pop	di
 19596                                  		;retn
 19597 00001D5C EBF4                    		jmp	short chk_volid_ok
 19598                                  
 19599                                  ; =============== S U B	R O U T	I N E =======================================
 19600                                  
 19601                                  ;   fat_check - see of the fatid has changed in the specified drive.
 19602                                  ;	      - uses the fat id obtained from the boot sector.
 19603                                  ;
 19604                                  ;   inputs:	medbyt is expected fat id
 19605                                  ;		es:di points to current bds
 19606                                  ;
 19607                                  ;   output:	si = -1 if fat id different,
 19608                                  ;		si = 0 otherwise
 19609                                  ;
 19610                                  ;   no other registers changed.
 19611                                  
 19612                                  fat_check:
 19613 00001D5E 50                      		push	ax
 19614 00001D5F 31F6                    		xor	si, si		; say fat id's are same.
 19615 00001D61 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 19616 00001D64 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 19617                                  					; compare it with the bds medbyte
 19618 00001D68 7401                    		jz	short okret1	; carry	clear
 19619 00001D6A 4E                      		dec	si
 19620                                  okret1:
 19621 00001D6B 58                      		pop	ax
 19622 00001D6C C3                      		retn
 19623                                  
 19624                                  ; ---------------------------------------------------------------------------
 19625                                  
 19626                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 19627                                  		;times 2 db 0
 19628                                  
 19629                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 19630                                  		;times 7 db 0
 19631                                  
 19632                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 19633                                  
 19634                                  		; 09/12/2022
 19635                                  		;times 4 db 0	; 17/10/2022
 19636                                  		;db 4 dup(0)	; times 4 db 0
 19637                                  
 19638                                  ; ---------------------------------------------------------------------------
 19639                                  
 19640                                  		; 09/12/2022
 19641                                  		;db 0
 19642                                  
 19643                                  number2div	equ ($-BCode_start)
 19644                                  number2mod	equ (number2div % 16)
 19645                                  
 19646                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 19647 00001D6D 00<rep 3h>              		times (16-number2mod) db 0
 19648                                  %endif
 19649                                  
 19650                                  ;align 16
 19651                                  
 19652                                  ; 09/12/2022
 19653                                  BCODE_END	equ $ - BCode_start
 19654                                  ; 29/09/2023
 19655                                  BCODEEND:
 19656                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 19657                                  ; 13/12/2022
 19658                                  SYSINITOFFSET	equ BCODE_END
 19659                                  ; 29/09/2023
 19660                                  ;SYSINITOFFSET	equ $-$$
 19661                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 19662                                  
 19663                                  ; 28/09/2023
 19664                                  S2SIZE equ $-$$
 19665                                  
 19666                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 19667                                  
 19668                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19669                                  ; 01/05/2019 - Retro DOS v4.0 
 19670                                  ; ============================================================================
 19671                                  ; end of BIOSCODE
 19672                                  
 19673                                  ; ----------------------------------------------------------------------------
 19674                                  ; %include sysinit5.s	; 09/12/2022
 19675                                  ; ----------------------------------------------------------------------------
 19676                                  
 19677                                  ;=============================================================================
 19678                                  ; (IO.SYS) SYSINIT SEGMENT 
 19679                                  ;=============================================================================
 19680                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19681                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19682                                  ;
 19683                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 19684                                  
 19685                                  section .SYSINIT vstart=0
 19686                                  
 19687                                  ; ****************************************************************************
 19688                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 19689                                  ; ----------------------------------------------------------------------------
 19690                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 19691                                  ; ----------------------------------------------------------------------------
 19692                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 19693                                  ; ----------------------------------------------------------------------------
 19694                                  ; Assembler: NASM version 2.15
 19695                                  ; ----------------------------------------------------------------------------
 19696                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 19697                                  ; ----------------------------------------------------------------------------
 19698                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 19699                                  ; ----------------------------------------------------------------------------
 19700                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 19701                                  ; source code by Microsoft, 1991 
 19702                                  ; ----------------------------------------------------------------------------
 19703                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 19704                                  ; by Microsoft, 12/10/1983
 19705                                  ; ****************************************************************************
 19706                                  ; main file: 'retrodos4.s'
 19707                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 19708                                  
 19709                                  ; 30/12/2022 - Retro DOS v4.2 
 19710                                  ; Retro DOS v4.0 - 2019
 19711                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 19712                                   
 19713                                  ; 21/10/2022
 19714                                  ; ----------------------------------------------------------------------------
 19715                                  ; This source code (version) is based on SYSINIT source code of disassembled
 19716                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 19717                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 19718                                  ; ----------------------------------------------------------------------------
 19719                                  ; Binary file splitter & joiner: FFSJ v3.3
 19720                                  
 19721                                  ;--------------------------------------------------------------
 19722                                  ; SYSINIT.TXT (27/01/1983)
 19723                                  ;--------------------------------------------------------------
 19724                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 19725                                  ;over  the  system  initialization  after  the  OEM  bios   has
 19726                                  ;performed any  initialization  it  needs  to  do.   Control is
 19727                                  ;transfered with a long jump to the external  variable  SYSINIT
 19728                                  ;
 19729                                  ;
 19730                                  ;   The OEM  has  the  following  variables declared external:
 19731                                  ;
 19732                                  ;   CURRENT_DOS_LOCATION    WORD
 19733                                  ;
 19734                                  ;This word  contains  the  segment  number of the DOS before it
 19735                                  ;is relocated.  The OEM bios must set this value.
 19736                                  ;
 19737                                  ;   FINAL_DOS_LOCATION      WORD
 19738                                  ;
 19739                                  ;This word contains the segment number of the DOS after SYSINIT
 19740                                  ;moves it.  The OEM bios must set this value.
 19741                                  ;
 19742                                  ;   DEVICE_LIST             DWORD
 19743                                  ;
 19744                                  ;This  double  word  pointer  points  to  the  linked  list  of
 19745                                  ;character and block device drivers.  The  OEM  must  set  this
 19746                                  ;value.
 19747                                  ;
 19748                                  ;   MEMORY_SIZE             WORD
 19749                                  ;
 19750                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 19751                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 19752                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 19753                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 19754                                  ;and read it back until it gets a mismatch.
 19755                                  ;
 19756                                  ;   DEFAULT_DRIVE           BYTE
 19757                                  ;
 19758                                  ;This is  the initial default drive when the system first comes
 19759                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 19760                                  ;it then drive a is assumed.
 19761                                  ;
 19762                                  ;   BUFFERS                 BYTE
 19763                                  ;
 19764                                  ;This is  the  default  number of buffers for the system.  This
 19765                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19766                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 19767                                  ;
 19768                                  ;   FILES                   BYTE
 19769                                  ;
 19770                                  ;This is  the  default  number  of  files for the system.  This
 19771                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19772                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 19773                                  ;
 19774                                  ;   SYSINIT                 FAR
 19775                                  ;
 19776                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 19777                                  ;this label at the end of its INIT code.
 19778                                  ;
 19779                                  ;   The OEM  has  the  following  variables declared public:
 19780                                  ;
 19781                                  ;   RE_INIT                 FAR
 19782                                  ;
 19783                                  ;This is an entry point which allows the BIOS to do some INIT
 19784                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 19785                                  ;PRESERVED.  On entry DS points to the first available memory
 19786                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 19787                                  ;prefix which represents  the  "program"  currently  running.
 19788                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 19789                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 19790                                  ;that  no  memory  is  allocated to it, it is running in free
 19791                                  ;memory.
 19792                                  ;NOTES:
 19793                                  ;     At the time this routine is called SYSINIT occupies the
 19794                                  ;highest 10K of memory ("highest" is determined by the  value
 19795                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 19796                                  ;     Since this is called AFTER DOS is initialized, you can
 19797                                  ;make system calls.  This also implies that the code for this
 19798                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 19799                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 19800                                  ;     If you don't want  anything done just set this to point
 19801                                  ;at a FAR RET instruction.
 19802                                  
 19803                                  ; ----------------------------------------------------------------------
 19804                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 19805                                  ; ----------------------------------------------------------------------
 19806                                  
 19807                                  ;include version.inc
 19808                                  ; ----------------------------------------------------------------------
 19809                                  
 19810                                  ;FALSE   EQU     0
 19811                                  ;TRUE    EQU     0FFFFh
 19812                                  
 19813                                  ;IBMVER	    EQU     TRUE
 19814                                  ;IBMCOPYRIGHT EQU   FALSE
 19815                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 19816                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 19817                                  ;MSVER      EQU     FALSE
 19818                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 19819                                  ;KANJI      EQU     FALSE
 19820                                  
 19821                                  ;(MSDOS 6.0, versiona.inc, 1991)
 19822                                  ; ----------------------------------------------------------------------
 19823                                  ;MAJOR_VERSION  EQU	6
 19824                                  ;;MINOR_VERSION	EQU	0	;6.00
 19825                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 19826                                  
 19827                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 19828                                  ; ----------------------------------------------------------------------
 19829                                  ;MAJOR_VERSION   EQU	5
 19830                                  ;MINOR_VERSION   EQU	0
 19831                                  
 19832                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 19833                                  ;MAJOR_VERSION   EQU	6
 19834                                  ;MINOR_VERSION   EQU	22
 19835                                  
 19836                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 19837                                  MAJOR_VERSION   EQU	7
 19838                                  MINOR_VERSION   EQU	10
 19839                                  
 19840                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 19841                                  
 19842                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 19843                                  				; currently 0.
 19844                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 19845                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 19846                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 19847                                  
 19848                                  ;      if1
 19849                                  ;      %OUT  ... for DOS Version 5.00 ...
 19850                                  ;      endif
 19851                                  
 19852                                         ;******************************
 19853                                         ;Each assembler program should:
 19854                                         ;  mov ah,030h                   ;DOS Get Version function
 19855                                         ;  int 021h                      ;Version ret. in AX,minor version first
 19856                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 19857                                         ;  jne error_handler             ; EXACT version match.
 19858                                         ;******************************
 19859                                  
 19860                                  ; ----------------------------------------------------------------------
 19861                                  ; device definitions
 19862                                  
 19863                                  ;Attribute bit masks
 19864                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 19865                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 19866                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 19867                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 19868                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 19869                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 19870                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 19871                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 19872                                  
 19873                                  ; The device table list has the form:
 19874                                  struc	SYSDEV
 19875 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 19876 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 19877 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 19878 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 19879 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 19880                                  .size:
 19881                                  endstruc
 19882                                  
 19883                                  ;Static Reguest Header
 19884                                  struc	SRHEAD
 19885 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 19886 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 19887 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 19888 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 19889 00000005 ????????????????                	resb 8		;Reserved for queue links
 19890                                  .size:
 19891                                  endstruc
 19892                                  
 19893                                  ;Status word masks
 19894                                  STERR   EQU     8000H           ;Bit 15 - Error
 19895                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 19896                                  STDON   EQU     0100H           ;Bit 8 - Done
 19897                                  STECODE EQU     00FFH           ;Error code
 19898                                  WRECODE EQU     0
 19899                                  
 19900                                  ;Function codes
 19901                                  DEVINIT EQU     0               ;Initialization
 19902                                  DINITHL EQU     26              ;Size of init header
 19903                                  DEVMDCH EQU     1               ;Media check
 19904                                  DMEDHL  EQU     15              ;Size of media check header
 19905                                  DEVBPB  EQU     2               ;Get BPB
 19906                                  DEVRDIOCTL EQU  3               ;IOCTL read
 19907                                  DBPBHL  EQU     22              ;Size of Get BPB header
 19908                                  DEVRD   EQU     4               ;Read
 19909                                  DRDWRHL EQU     22              ;Size of RD/WR header
 19910                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 19911                                  DRDNDHL EQU     14              ;Size of non destructive read header
 19912                                  DEVIST  EQU     6               ;Input status
 19913                                  DSTATHL EQU     13              ;Size of status header
 19914                                  DEVIFL  EQU     7               ;Input flush
 19915                                  ; 21/02/2024
 19916                                  ;DFLSHL EQU     15              ;Size of flush header
 19917                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 19918                                  DEVWRT  EQU     8               ;Write
 19919                                  DEVWRTV EQU     9               ;Write with verify
 19920                                  DEVOST  EQU     10              ;Output status
 19921                                  DEVOFL  EQU     11              ;Output flush
 19922                                  DEVWRIOCTL EQU  12              ;IOCTL write
 19923                                  
 19924                                  ; ----------------------------------------------------------------------
 19925                                  struc	SYS_FCB
 19926 00000000 ??                      .fcb_drive:	resb 1
 19927 00000001 ????????????????        .fcb_name:	resb 8
 19928 00000009 ??????                  .fcb_ext:	resb 3
 19929 0000000C ????                    .fcb_EXTENT:	resw 1
 19930 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 19931 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 19932                                                          ; word
 19933 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 19934 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 19935 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 19936 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 19937                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 19938                                                          ; If file, bit 6=0 if dirty
 19939                                                          ; If I/O device, bit 6=0 if EOF (input)
 19940                                                          ;               Bit 5=1 if Raw mode
 19941                                                          ;               Bit 0=1 if console input device
 19942                                                          ;               Bit 1=1 if console output device
 19943                                                          ;               Bit 2=1 if null device
 19944                                                          ;               Bit 3=1 if clock device
 19945 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 19946 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 19947 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 19948 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 19949 00000020 ??                      .fcb_NR:	resb 1	; Next record
 19950 00000021 ????????                .fcb_RR:	resb 4	; Random record
 19951                                  .size:
 19952                                  endstruc
 19953                                  
 19954                                  ; ----------------------------------------------------------------------
 19955                                  ; Field definition for I/O buffer information
 19956                                  
 19957                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 19958                                  
 19959                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 19960                                  
 19961                                  struc BUFFINFO
 19962 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 19963 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 19964 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 19965                                  				; SFT table index (bit 7 = 1)
 19966                                  				; = FFH if buffer free
 19967 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 19968                                  				;	= 0 if Local device buffer
 19969                                  				; Bit 6 = 1 if buffer dirty
 19970                                  				; Bit 5 = Reserved
 19971                                  				; Bit 4 = Search bit (bit 7 = 1)
 19972                                  				; Bit 3 = 1 if buffer is DATA
 19973                                  				; Bit 2 = 1 if buffer is DIR
 19974                                  				; Bit 1 = 1 if buffer is FAT
 19975                                  				; Bit 0 = Reserved
 19976 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 19977                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 19978 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 19979 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 19980 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19981                                  			   ; hw of sectors per FAT
 19982 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 19983 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 19984 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 19985 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19986                                  			   ; reserved word for dword boundary
 19987                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 19988                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 19989                                  endstruc
 19990                                  
 19991                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 19992                                  				;For buf_flags bit 7 = 1, this is the byte
 19993                                  				;offset of the start of the buffer in
 19994                                  				;the file pointed to by buf_ID. Thus
 19995                                  				;the buffer starts at location
 19996                                  				;buf_offset in the file and contains
 19997                                  				;buf_fill bytes.
 19998                                  
 19999                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 20000                                  
 20001                                  
 20002                                  buf_Free	equ	0FFh		; buf_id of free buffer
 20003                                  
 20004                                  ;Flag byte masks
 20005                                  buf_isnet	EQU	10000000B
 20006                                  buf_dirty	EQU	01000000B
 20007                                  ;***
 20008                                  buf_visit	EQU	00100000B
 20009                                  ;***
 20010                                  buf_snbuf	EQU	00010000B
 20011                                  
 20012                                  buf_isDATA	EQU	00001000B
 20013                                  buf_isDIR	EQU	00000100B
 20014                                  buf_isFAT	EQU	00000010B
 20015                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 20016                                  
 20017                                  buf_NetID	EQU	bufinsiz
 20018                                  
 20019                                  ; ----------------------------------------------------------------------
 20020                                  
 20021                                  ; ----------------------------------------------------------------------
 20022                                  ;**	DPB - Drive Parameter Block
 20023                                  
 20024                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 20025                                  
 20026                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 20027                                  ;	possibly inaccurate deductions from code study... - jgl
 20028                                  ;
 20029                                  ;	The DPB is DOS's main structure for describing block devices.
 20030                                  ;	It contains info about the "Drive" intermingled with info about
 20031                                  ;	the FAT file system which is presumably on the drive.  I don't know
 20032                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 20033                                  ;
 20034                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 20035                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 20036                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 20037                                  
 20038                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 20039                                  
 20040                                  ; 12/05/2019 - Retro DOS v4.0
 20041                                  
 20042                                  ; 01/01/2024
 20043                                  %if 0
 20044                                  
 20045                                  struc	DPB
 20046                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 20047                                  .UNIT:		resb 1		; Driver unit number of DPB
 20048                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 20049                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 20050                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 20051                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 20052                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 20053                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 20054                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 20055                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 20056                                  ; MSDOS 3.3
 20057                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 20058                                  ; MSDOS 6.0
 20059                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 20060                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 20061                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 20062                                  .MEDIA:		resb 1		; Media byte
 20063                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 20064                                  				; check the first time this DPB is used
 20065                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 20066                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 20067                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 20068                                  .size:
 20069                                  endstruc
 20070                                  
 20071                                  %else
 20072                                  
 20073                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 20074                                  
 20075                                  struc	DPB
 20076 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 20077 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 20078 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 20079 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 20080 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 20081 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 20082 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 20083 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 20084 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 20085 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 20086 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 20087 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 20088 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 20089 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 20090 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 20091                                  				; check the first time this DPB is used
 20092 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 20093 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 20094 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 20095                                  ; FAT32 fs ; 01/01/2024
 20096                                  ; ref: https://en.wikibooks.org/wiki/
 20097                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 20098                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 20099 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 20100 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 20101 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 20102 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 20103 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 20104 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 20105 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 20106 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 20107                                  ; 01/01/2024 - Retro DOS v5.0
 20108 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 20109                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 20110                                  endstruc
 20111                                  
 20112                                  %endif
 20113                                  
 20114                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 20115                                  
 20116                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 20117                                  
 20118                                  ; ----------------------------------------------------------------------
 20119                                  ; 26/03/2018
 20120                                  
 20121                                  ; IOCTL SUB-FUNCTIONS
 20122                                  IOCTL_GET_DEVICE_INFO	EQU	0
 20123                                  IOCTL_SET_DEVICE_INFO	EQU	1
 20124                                  IOCTL_READ_HANDLE	EQU	2
 20125                                  IOCTL_WRITE_HANDLE	EQU	3
 20126                                  IOCTL_READ_DRIVE	EQU	4
 20127                                  IOCTL_WRITE_DRIVE	EQU	5
 20128                                  IOCTL_GET_INPUT_STATUS	EQU	6
 20129                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 20130                                  IOCTL_CHANGEABLE?	EQU	8
 20131                                  IOCTL_SHARING_RETRY	EQU	11
 20132                                  GENERIC_IOCTL_HANDLE	EQU	12
 20133                                  GENERIC_IOCTL		EQU	13
 20134                                  
 20135                                  ; GENERIC IOCTL SUB-FUNCTIONS
 20136                                  RAWIO			EQU	8
 20137                                  
 20138                                  ; RAWIO SUB-FUNCTIONS
 20139                                  GET_DEVICE_PARAMETERS	EQU	60H
 20140                                  SET_DEVICE_PARAMETERS	EQU	40H
 20141                                  READ_TRACK		EQU	61H
 20142                                  WRITE_TRACK		EQU	41H
 20143                                  VERIFY_TRACK		EQU	62H
 20144                                  FORMAT_TRACK		EQU	42H
 20145                                  
 20146                                  ; DEVICETYPE VALUES
 20147                                  MAX_SECTORS_IN_TRACK	EQU	63
 20148                                  DEV_5INCH		EQU	0
 20149                                  DEV_5INCH96TPI		EQU	1
 20150                                  DEV_3INCH720KB		EQU	2
 20151                                  DEV_8INCHSS		EQU	3
 20152                                  DEV_8INCHDS		EQU	4
 20153                                  DEV_HARDDISK		EQU	5
 20154                                  DEV_OTHER		EQU	7
 20155                                  ;DEV_3INCH1440KB	EQU	7
 20156                                  DEV_3INCH2880KB		EQU	9
 20157                                  ; Retro DOS v2.0 - 26/03/2018
 20158                                  ;;DEV_TAPE		EQU	6
 20159                                  ;;DEV_ERIMO		EQU	8
 20160                                  ;DEV_3INCH2880KB	EQU	9
 20161                                  DEV_3INCH1440KB		EQU	10
 20162                                  
 20163                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 20164                                  					; CURRENTLY SUPPORT.
 20165                                  MAX_DEV_TYPE		EQU	10
 20166                                  
 20167                                  struc A_SECTORTABLE
 20168 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 20169 00000002 ????                    .ST_SECTORSIZE:		resw	1
 20170                                  .size:
 20171                                  endstruc
 20172                                  
 20173                                  ; ----------------------------------------------------------------------
 20174                                  ; structure, equates for devmark for mem command.
 20175                                  
 20176                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 20177                                  
 20178                                  struc devmark
 20179 00000000 ??                       .id:	    resb 1
 20180 00000001 ????                     .seg:	    resw 1
 20181 00000003 ????                     .size:	    resw 1
 20182 00000005 ??????                   .dum:	    resb 3
 20183 00000008 ????????????????         .filename: resb 8
 20184                                  endstruc
 20185                                  
 20186                                  devmark_stk	equ	'S'
 20187                                  devmark_device	equ	'D'
 20188                                  devmark_ifs	equ	'I'
 20189                                  devmark_buf	equ	'B'
 20190                                  devmark_cds	equ	'L' ; lastdrive
 20191                                  devmark_files	equ	'F'
 20192                                  devmark_fcbs	equ	'X'
 20193                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 20194                                  devmark_ems_stub equ	'E'
 20195                                  
 20196                                  setbrkdone	equ	00000001b
 20197                                  for_devmark	equ	00000010b
 20198                                  not_for_devmark equ	11111101b
 20199                                  
 20200                                  ; ----------------------------------------------------------------------
 20201                                  ; Memory arena structure
 20202                                  
 20203                                  ; 24/03/2019 - Retro DOS v4.0 
 20204                                  ; (MSDOS 6.0, ARENA.INC)
 20205                                  
 20206                                  ;** Arena Header
 20207                                  
 20208                                  struc ARENA
 20209 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 20210 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 20211 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 20212 00000005 ??????                  .RESERVED	resb 3		; reserved
 20213 00000008 ????????????????        .NAME:		resb 8		; owner file name
 20214                                  endstruc
 20215                                  
 20216                                  ; 12/04/2019
 20217                                  
 20218                                  arena_owner_system	EQU 0	; free block indication
 20219                                  
 20220                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 20221                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 20222                                  
 20223                                  ; ----------------------------------------------------------------------
 20224                                  ; Process data block (otherwise known as program header)
 20225                                  
 20226                                  ; 23/03/2019 - Retro DOS v4.0
 20227                                  
 20228                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 20229                                  
 20230                                  FILPERPROC	EQU     20
 20231                                  
 20232                                  struc PDB	; Process_data_block
 20233 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 20234 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 20235 00000004 ??                                      resb 1
 20236 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 20237 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 20238 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 20239 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 20240 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 20241 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 20242 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 20243 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 20244 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 20245 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 20246 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 20247 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 20248 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 20249 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 20250 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 20251 00000042 <res Eh>                .PAD1:		resb 14		; 	
 20252 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 20253 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 20254 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 20255 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 20256 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 20257 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 20258                                  ;.size:
 20259                                  endstruc
 20260                                  
 20261                                  ; ----------------------------------------------------------------------
 20262                                  ; <system call definitions>
 20263                                  
 20264                                  ; 23/03/2019 - Retro DOS v4.0
 20265                                  
 20266                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 20267                                  
 20268                                  ABORT                           EQU 0   ;  0      0
 20269                                  STD_CON_INPUT                   EQU 1   ;  1      1
 20270                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 20271                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 20272                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 20273                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 20274                                  RAW_CON_IO                      EQU 6   ;  6      6
 20275                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 20276                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 20277                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 20278                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 20279                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 20280                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 20281                                  DISK_RESET                      EQU 13  ; 13      D
 20282                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 20283                                  FCB_OPEN                        EQU 15  ; 15      F
 20284                                  FCB_CLOSE                       EQU 16  ; 16     10
 20285                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 20286                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 20287                                  FCB_DELETE                      EQU 19  ; 19     13
 20288                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 20289                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 20290                                  FCB_CREATE                      EQU 22  ; 22     16
 20291                                  FCB_RENAME                      EQU 23  ; 23     17
 20292                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 20293                                  SET_DMA                         EQU 26  ; 26     1A
 20294                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 20295                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 20296                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 20297                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 20298                                  GET_FCB_POSITION                EQU 36  ; 36     24
 20299                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 20300                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 20301                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 20302                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 20303                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 20304                                  GET_DATE                        EQU 42  ; 42     2A
 20305                                  SET_DATE                        EQU 43  ; 43     2B
 20306                                  GET_TIME                        EQU 44  ; 44     2C
 20307                                  SET_TIME                        EQU 45  ; 45     2D
 20308                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 20309                                  ; Extended functionality group
 20310                                  GET_DMA                         EQU 47  ; 47     2F
 20311                                  GET_VERSION                     EQU 48  ; 48     30
 20312                                  KEEP_PROCESS                    EQU 49  ; 49     31
 20313                                  GET_DPB                         EQU 50  ; 50     32
 20314                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 20315                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 20316                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 20317                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 20318                                  CHAR_OPER                       EQU 55  ; 55     37
 20319                                  INTERNATIONAL                   EQU 56  ; 56     38
 20320                                  ;   Directory Group
 20321                                  MKDIR                           EQU 57  ; 57     39
 20322                                  RMDIR                           EQU 58  ; 58     3A
 20323                                  CHDIR                           EQU 59  ; 59     3B
 20324                                  ;   File Group
 20325                                  CREAT                           EQU 60  ; 60     3C
 20326                                  OPEN                            EQU 61  ; 61     3D
 20327                                  CLOSE                           EQU 62  ; 62     3E
 20328                                  READ                            EQU 63  ; 63     3F
 20329                                  WRITE                           EQU 64  ; 64     40
 20330                                  UNLINK                          EQU 65  ; 65     41
 20331                                  LSEEK                           EQU 66  ; 66     42
 20332                                  CHMOD                           EQU 67  ; 67     43
 20333                                  IOCTL                           EQU 68  ; 68     44
 20334                                  XDUP                            EQU 69  ; 69     45
 20335                                  XDUP2                           EQU 70  ; 70     46
 20336                                  CURRENT_DIR                     EQU 71  ; 71     47
 20337                                  ;    Memory Group
 20338                                  ALLOC                           EQU 72  ; 72     48
 20339                                  DEALLOC                         EQU 73  ; 73     49
 20340                                  SETBLOCK                        EQU 74  ; 74     4A
 20341                                  ;    Process Group
 20342                                  EXEC                            EQU 75  ; 75     4B
 20343                                  EXIT                            EQU 76  ; 76     4C
 20344                                  WAITPROCESS			EQU 77  ; 77     4D
 20345                                  FIND_FIRST                      EQU 78  ; 78     4E
 20346                                  ;   Special Group
 20347                                  FIND_NEXT                       EQU 79  ; 79     4F
 20348                                  ; SPECIAL SYSTEM GROUP
 20349                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 20350                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 20351                                  GET_IN_VARS                     EQU 82  ; 82     52
 20352                                  SETDPB                          EQU 83  ; 83     53
 20353                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 20354                                  DUP_PDB                         EQU 85  ; 85     55
 20355                                  RENAME                          EQU 86  ; 86     56
 20356                                  FILE_TIMES                      EQU 87  ; 87     57
 20357                                  ;
 20358                                  ALLOCOPER			EQU 88	; 88     58	
 20359                                  ; Network extention system calls
 20360                                  GetExtendedError		EQU 89	; 89	 59
 20361                                  CreateTempFile			EQU 90	; 90	 5A
 20362                                  CreateNewFile			EQU 91	; 91	 5B
 20363                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 20364                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 20365                                  					;	    CloseByName, CloseUser,
 20366                                  					;	    CloseUserProcess,
 20367                                  					;	    GetOpenFileList
 20368                                  UserOper			EQU 94	; 94	 5E Get and Set
 20369                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 20370                                  xNameTrans			EQU 96	; 96	 60
 20371                                  PathParse			EQU 97	; 97	 61
 20372                                  GetCurrentPSP			EQU 98	; 98	 62
 20373                                  Hongeul 			EQU 99	; 99	 63
 20374                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 20375                                  Set_Printer_Flag		EQU 100 ; 100	 64
 20376                                  GetExtCntry			EQU 101 ; 101	 65
 20377                                  GetSetCdPg			EQU 102 ; 102	 66
 20378                                  ExtHandle			EQU 103 ; 103	 67
 20379                                  Commit				EQU 104 ; 104	 68
 20380                                  GetSetMediaID			EQU 105 ; 105	 69
 20381                                  IFS_IOCTL			EQU 107 ; 107	 6B
 20382                                  ExtOpen 			EQU 108 ; 108	 6C
 20383                                  ;
 20384                                  ;ifdef ROMEXEC
 20385                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 20386                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 20387                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 20388                                  ;endif
 20389                                  ;
 20390                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 20391                                  OEM_C1				EQU 249 ; 249	 F9
 20392                                  OEM_C2				EQU 250 ; 250	 FA
 20393                                  OEM_C3				EQU 251 ; 251	 FB
 20394                                  OEM_C4				EQU 252 ; 252	 FC
 20395                                  OEM_C5				EQU 253 ; 253	 FD
 20396                                  OEM_C6				EQU 254 ; 254	 FE
 20397                                  OEM_C7				EQU 255 ; 255	 FF
 20398                                  
 20399                                  ; ----------------------------------------------------------------------
 20400                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 20401                                  ; ----------------------------------------------------------------------
 20402                                  
 20403                                  ;;	IF	STACKSW
 20404                                  
 20405                                  ;;
 20406                                  ;; Internal Stack Parameters
 20407                                  ;EntrySize		equ	8
 20408                                  ;
 20409                                  ;MinCount		equ	8
 20410                                  ;DefaultCount		equ	9
 20411                                  ;MaxCount		equ	64
 20412                                  ;
 20413                                  ;MinSize 		equ	32
 20414                                  ;DefaultSize		equ	128
 20415                                  ;MaxSize 		equ	512
 20416                                  
 20417                                  ;;	ENDIF
 20418                                  
 20419                                  ; ----------------------------------------------------------------------
 20420                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 20421                                  ; ----------------------------------------------------------------------
 20422                                  					  ;;Rev 3.30 Modification
 20423                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 20424                                  									  
 20425                                  ;*******************************					  
 20426                                  ;System Service call ( Int 15h )					  
 20427                                  ;*******************************					  
 20428                                  ;Function AH = 0C0h, Return system configuration			  
 20429                                  ;For PC and PCJR on return:						  
 20430                                  ;	(AH)	= 80h							  
 20431                                  ;	(CY)	= 1							  
 20432                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 20433                                  ;	(AH)	= 86h							  
 20434                                  ;	(CY)	= 1							  
 20435                                  ;For all others:							  
 20436                                  ;	(AH)	= 0							  
 20437                                  ;	(CY)	= 0							  
 20438                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 20439                                  ; System descriptor :							  
 20440                                  ;	DW	xxxx		length of descriptor in bytes,		  
 20441                                  ;				minimum length = 8			  
 20442                                  ;	DB	xx		model byte				  
 20443                                  ;				0FFh	= PC				  
 20444                                  ;				0FEh	= PC/XT, Portable		  
 20445                                  ;				0FDh	= PC/JR 			  
 20446                                  ;				0FCh	= PC/AT				  
 20447                                  ;				0F9h	= Convertable			  
 20448                                  ;				0F8h	= Model 80			  
 20449                                  ;				0E0 thru 0EFh = reserved		  
 20450                                  ;									  
 20451                                  ;	DB	xx		secondary model byte			  
 20452                                  ;				000h	= PC1				  
 20453                                  ;				000h	= PC/XT, Portable		  
 20454                                  ;				000h	= PC/JR 			  
 20455                                  ;				000h	= PC/AT 			  
 20456                                  ;				001h	= PC/AT Model 339		  
 20457                                  ;				003h	= PC/RT				  
 20458                                  ;				000h	= Convertable			  
 20459                                  ;									  
 20460                                  ;	DB	xx		bios revision level			  
 20461                                  ;				00 for first release, subsequent release  
 20462                                  ;				of code with same model byte and	  
 20463                                  ;				secondary model byte require revison level
 20464                                  ;				to increase by one.			  
 20465                                  ;									  
 20466                                  ;	DB	xx		feature information byte 1		  
 20467                                  ;				X0000000 = 1, bios use DMA channel 3	  
 20468                                  ;					 = 0, DMA channel 3 not used	  
 20469                                  ;									  
 20470                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 20471                                  ;					 = 0, 2nd Interrupt chip not present
 20472                                  ;									  
 20473                                  ;				00X00000 = 1, Real Time Clock present	  
 20474                                  ;					 = 0, Real Time Clock not present 
 20475                                  ;									  
 20476                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 20477                                  ;						called in keyboard interrupt
 20478                                  ;						(Int 09h).		  
 20479                                  ;					 = 0, Keyboard escape sequence not
 20480                                  ;						called. 		  
 20481                                  ;				0000XXXX reserved			  
 20482                                  ;									  
 20483                                  ;	DB	xx		feature information byte 2 - reserved	  
 20484                                  ;									  
 20485                                  ;	DB	xx		feature information byte 2 - reserved	  
 20486                                  ;									  
 20487                                  ;	DB	xx		feature information byte 2 - reserved	  
 20488                                  ;									  
 20489                                  ;	DB	xx		feature information byte 2 - reserved	  
 20490                                  ;									  
 20491                                  
 20492                                  ; 22/03/2019
 20493                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 20494 00000000 ????                    .bios_sd_leng:		resw 1
 20495 00000002 ??                      .bios_sd_modelbyte:	resb 1
 20496                                  .bios_sd_scnd_modelbyte: 
 20497 00000003 ??                      			resb 1
 20498 00000004 ??                      			resb 1
 20499 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 20500 00000006 ????????                			resb 4
 20501                                  endstruc
 20502                                  
 20503                                  ;FeatureByte1	bit map equates
 20504                                  DMAchannel3		equ 10000000b
 20505                                  ScndIntController	equ 01000000b
 20506                                  RealTimeClock		equ 00100000b
 20507                                  KeyEscapeSeq		equ 00010000b
 20508                                  					;;End of Modification
 20509                                  
 20510                                  ; ----------------------------------------------------------------------
 20511                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 20512                                  ; ----------------------------------------------------------------------
 20513                                  ; 22/03/2019 - Retro DOS v4.0
 20514                                  
 20515                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 20516                                  
 20517                                  struc SysInitVars
 20518                                  ; MSDOS 3.3
 20519 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 20520 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 20521 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 20522 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 20523 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 20524 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 20525 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 20526 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 20527 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 20528 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 20529 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 20530 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 20531                                  ; MSDOS 6.0
 20532 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 20533 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 20534 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 20535 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 20536                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 20537 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 20538 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 20539 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 20540 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 20541 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 20542 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 20543 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 20544                                  .size:
 20545                                  endstruc
 20546                                  
 20547                                  ;This is added for more information exchage between DOS, BIOS.
 20548                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 20549                                  
 20550                                  ; 22/03/2019
 20551                                  struc SysInitVars_Ext
 20552 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 20553 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 20554                                  endstruc
 20555                                  
 20556                                  ; 09/06/2018
 20557                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 20558                                  SYSI_DPB    equ	0
 20559                                  SYSI_SFT    equ 4
 20560                                  SYSI_CLOCK  equ 8
 20561                                  SYSI_CON    equ 12
 20562                                  SYSI_MAXSEC equ 16
 20563                                  SYSI_BUF    equ 18
 20564                                  SYSI_CDS    equ 22
 20565                                  SYSI_FCB    equ 26
 20566                                  SYSI_KEEP   equ 30
 20567                                  SYSI_NUMIO  equ	32
 20568                                  SYSI_NCDS   equ	33
 20569                                  SYSI_DEV    equ 34
 20570                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 20571                                  SYSI_ATTR	  equ 38
 20572                                  SYSI_STRAT	  equ 40
 20573                                  SYSI_INTER	  equ 42
 20574                                  SYSI_NAME	  equ 44
 20575                                  SYSI_SPLICE	  equ 52
 20576                                  SYSI_IBMDOS_SIZE  equ 53
 20577                                  SYSI_IFS_DOSCALL@ equ 55
 20578                                  SYSI_IFS	  equ 59
 20579                                  SYSI_BUFFERS	  equ 63
 20580                                  SYSI_BOOT_DRIVE   equ 67
 20581                                  SYSI_DWMOVE	  equ 68
 20582                                  SYSI_EXT_MEM	  equ 69
 20583                                  
 20584                                  ;The SYSI_BUF of SysInitVars points to the following structure
 20585                                  
 20586                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 20587                                  
 20588                                  struc BUFFINF 	; BUFFINFO
 20589 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 20590 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 20591 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 20592 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 20593                                  
 20594 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 20595                                  				; are in HMA
 20596 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 20597                                  				;  used to read/write on disks
 20598 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 20599 00000015 ????                    .UU_EMS_NPA640:		resw 1
 20600 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 20601 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 20602 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 20603 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 20604 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 20605 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 20606 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 20607                                  .size:
 20608                                  endstruc
 20609                                  
 20610                                  ; ----------------------------------------------------------------------
 20611                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 20612                                  ; ----------------------------------------------------------------------
 20613                                  ; 22/03/2019 - Retro DOS v4.0
 20614                                  
 20615                                  ;**	CDS - Current Directory Structure
 20616                                  ;
 20617                                  ; CDS items are used bu the internal routines to store cluster numbers and
 20618                                  ; network identifiers for each logical name.  The ID field is used dually,
 20619                                  ; both as net ID and for a cluster number for local devices. In the case
 20620                                  ; of local devices, the cluster number will be -1 if there is a potential
 20621                                  ; of the disk being changed or if the path must be recracked.
 20622                                  ;
 20623                                  ;	Some pathnames have special preambles, such as
 20624                                  ;
 20625                                  ;		\\machine\sharename\...
 20626                                  ;	For these pathnames we can't allow ".." processing to back us
 20627                                  ;	up into the special front part of the name.  The CURDIR_END field
 20628                                  ;	holds the address of the seperator character which marks
 20629                                  ;	the split between the special preamble and the regular
 20630                                  ;	path list; ".." processing isn't allowed to back us up past
 20631                                  ;	(i.e., before) CURDIR_END
 20632                                  ;	For the root, it points at the leading /. For net
 20633                                  ;	assignments it points at the end (nul) of the initial assignment:
 20634                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 20635                                  ;	  ^		 ^		     ^
 20636                                  
 20637                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 20638                                  TEMPLEN 	EQU	DIRSTRLEN*2
 20639                                  
 20640                                  struc 		curdir_list
 20641                                  ; MSDOS 3.3
 20642 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 20643 00000043 ????                    .cdir_flags	resw	1		; various flags
 20644 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 20645 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 20646 0000004D ????                    .cdir_usr_word	resw	1
 20647 0000004F ????                    .cdir_end	resw	1		; end of assignment
 20648                                  ; MSDOS 6.0
 20649 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 20650 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 20651 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 20652                                  .size:
 20653                                  endstruc
 20654                                  
 20655                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 20656                                  						; ASM87 which doesn't allow
 20657                                  						; Size directive as a macro
 20658                                  						; argument
 20659                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 20660                                  
 20661                                  ;**	Flag values for CURDIR_FLAGS
 20662                                  
 20663                                  ;Flag word masks
 20664                                  curdir_isnet	EQU	1000000000000000B
 20665                                  curdir_isifs	EQU	1000000000000000B
 20666                                  curdir_inuse	EQU	0100000000000000B
 20667                                  curdir_splice	EQU	0010000000000000B
 20668                                  curdir_local	EQU	0001000000000000B
 20669                                  
 20670                                  ; ----------------------------------------------------------------------
 20671                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 20672                                  ; ----------------------------------------------------------------------
 20673                                  ; 25/03/2019 - Retro DOS v4.0
 20674                                  
 20675                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 20676                                  ; 09/04/2024 - Retro DOS v5.0
 20677                                  
 20678                                  ; system file table
 20679                                  
 20680                                  ;**	System File Table SuperStructure
 20681                                  ;
 20682                                  ;	The system file table entries are allocated in contiguous groups.
 20683                                  ;	There may be more than one such groups; the SF "superstructure"
 20684                                  ;	tracks the groups.
 20685                                  
 20686                                  struc	SF
 20687 00000000 ????????                .SFLink:	resd	1
 20688 00000004 ????                    .SFCount:	resw	1		; number of entries
 20689 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 20690                                  .size:
 20691                                  endstruc
 20692                                  
 20693                                  ;**	System file table entry
 20694                                  ;
 20695                                  ;	These are the structures which are at SFTABLE in the SF structure.
 20696                                  
 20697                                  struc	SF_ENTRY
 20698 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 20699                                  					;   if FCB then ref count
 20700 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 20701 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 20702 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 20703                                  					; Bit 15 = 1 if remote file
 20704                                  					;	 = 0 if local file or device
 20705                                  					; Bit 14 = 1 if date/time is not to be
 20706                                  					;   set from clock at CLOSE.  Set by
 20707                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 20708                                  					;   other reseters of the dirty bit
 20709                                  					;   (WRITE)
 20710                                  					; Bit 13 = Pipe bit (reserved)
 20711                                  					;
 20712                                  					; Bits 0-7 (old FCB_devid bits)
 20713                                  					; If remote file or local file, bit
 20714                                  					; 6=0 if dirty Device ID number, bits
 20715                                  					; 0-5 if local file.
 20716                                  					; bit 7=0 for local file, bit 7
 20717                                  					;      =1 for local I/O device
 20718                                  					; If local I/O device, bit 6=0 if EOF (input)
 20719                                  					;		Bit 5=1 if Raw mode
 20720                                  					;		Bit 0=1 if console input device
 20721                                  					;		Bit 1=1 if console output device
 20722                                  					;		Bit 2=1 if null device
 20723                                  					;		Bit 3=1 if clock device
 20724 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 20725                                  					; to device header if local device,
 20726                                  					; points to net device header if
 20727                                  					; remote
 20728 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 20729                                  ;.sf_lstclus:	resw	1 ; *	
 20730 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 20731 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 20732 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 20733 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 20734                                  ;
 20735                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 20736                                  ; ID
 20737                                  ;
 20738 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 20739 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 20740 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 20741                                  ;
 20742                                  ; End of 7 bytes of file-system specific info.
 20743                                  ;
 20744 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 20745                                  					; directory entry.  This is used by
 20746                                  					; close to detect file deleted and
 20747                                  					; disk changed errors.
 20748                                  ; SHARING INFO
 20749 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 20750 0000002F ????                    .sf_UID:	resw	1
 20751 00000031 ????                    .sf_PID:	resw	1
 20752 00000033 ????                    .sf_MFT:	resw	1
 20753 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 20754 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 20755                                  .size:
 20756                                  endstruc
 20757                                  
 20758                                  ; ----------------------------------------------------------------------
 20759                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 20760                                  ; ----------------------------------------------------------------------
 20761                                  ; 11/06/2018 - Retro DOS v3.0
 20762                                  
 20763                                  ;Equates for COUNTRY INFORMATION.
 20764                                  SetCountryInfo		EQU	1	;country info
 20765                                  SetUcase		EQU	2	;uppercase table
 20766                                  SetLcase		EQU	3	;lowercase table (Reserved)
 20767                                  SetUcaseFile		EQU	4	;uppercase file spec table
 20768                                  SetFileList		EQU	5	;valid file character list
 20769                                  SetCollate		EQU	6	;collating sequence
 20770                                  SetDBCS 		EQU	7	;double byte character set
 20771                                  SetALL			EQU	-1	;all the entries
 20772                                  
 20773                                  ;DOS country and code page information table structure.
 20774                                  ;Internally, IBMDOS gives a pointer to this table.
 20775                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 20776                                  ;this structure.
 20777                                  
 20778                                  struc country_cdpg_info ; DOS_country_cdpg_info
 20779 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 20780 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 20781 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 20782 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 20783 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 20784 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 20785                                  
 20786 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 20787 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 20788                                  
 20789 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 20790 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 20791                                  
 20792 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 20793 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 20794                                  
 20795 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 20796 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 20797 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 20798 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 20799 00000067 ????                    .ccDFormat:		resw	1	;date format
 20800 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 20801                                  					;5 byte of (currency symbol+0)
 20802 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 20803 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 20804 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 20805 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 20806 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 20807 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 20808 00000078 ??                      .ccTFormat:		resb	1	;time format
 20809 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 20810 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 20811 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 20812                                  .size:
 20813                                  endstruc
 20814                                  
 20815                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 20816                                  
 20817                                  ; ======================================================================
 20818                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 20819                                  ; ======================================================================
 20820                                  ; 21/03/2019 - Retro DOS v4.0
 20821                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20822                                  
 20823                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 20824                                  ; 21/10/2022
 20825                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 20826                                  ; 22/10/2022
 20827                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 20828                                  ; 09/12/2022
 20829                                  DOSBIOCODESEG equ IOSYSCODESEG
 20830                                  
 20831                                  ; Note: These offset addresses must be chanqed when the code 
 20832                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 20833                                  
 20834                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 20835                                  
 20836                                  ; 09/12/2022
 20837                                  %if 0
 20838                                  
 20839                                  ; 13/05/2019
 20840                                  
 20841                                  ;IsWin386         equ 08CFh
 20842                                  ;V86_Crit_SetFocus equ 08D0h
 20843                                  ; 21/10/2022
 20844                                  IsWin386          equ 08D0h
 20845                                  V86_Crit_SetFocus equ 08D1h 
 20846                                  
 20847                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 20848                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20849                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 20850                                  
 20851                                  ;SysinitPresent	  equ 08FCh
 20852                                  ; 21/10/2022
 20853                                  SysinitPresent	  equ 08FDh
 20854                                  
 20855                                  inHMA		  equ 000Dh
 20856                                  xms		  equ 000Eh
 20857                                  ;FreeHMAPtr	  equ 08F6h
 20858                                  ;multrk_flag	  equ 0533h
 20859                                  ;ec35_flag	  equ 0535h
 20860                                  ;EOT		  equ 012Eh
 20861                                  ; 21/10/2022
 20862                                  FreeHMAPtr	  equ 08F7h
 20863                                  multrk_flag	  equ 052Fh
 20864                                  ec35_flag	  equ 0531h
 20865                                  EOT		  equ 012Ch
 20866                                  
 20867                                  ;NextStack	  equ 08BFh
 20868                                  ;IT_StackLoc	  equ 08C5h
 20869                                  ;IT_StackSize	  equ 08C9h
 20870                                  ; 21/10/2022
 20871                                  NextStack	  equ 08C0h
 20872                                  IT_StackLoc	  equ 08C6h
 20873                                  IT_StackSize	  equ 08CAh
 20874                                  
 20875                                  ;MoveDOSIntoHMA	  equ 08F8h
 20876                                  ; 21/10/2022
 20877                                  MoveDOSIntoHMA	  equ 08F9h
 20878                                  
 20879                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 20880                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 20881                                  ; 21/10/2022
 20882                                  INT19SEM equ 0640h ; (iosys5.txt)
 20883                                  I19_LST  equ 0641h ; (iosys5.txt)
 20884                                  
 20885                                  %endif
 20886                                  
 20887                                  ; 09/12/2022
 20888                                  seg_reinit equ _seg_reinit
 20889                                  ec35_flag  equ ec35flag
 20890                                  INT19SEM   equ int19sem
 20891                                  I19_LST    equ i19_lst
 20892                                  
 20893                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 20894                                  INT19OLD08 equ I19_LST+6
 20895                                  INT19OLD09 equ I19_LST+11
 20896                                  INT19OLD0A equ I19_LST+16
 20897                                  INT19OLD0B equ I19_LST+21
 20898                                  INT19OLD0C equ I19_LST+26
 20899                                  INT19OLD0D equ I19_LST+31
 20900                                  INT19OLD0E equ I19_LST+36
 20901                                  INT19OLD70 equ I19_LST+41
 20902                                  INT19OLD72 equ I19_LST+46
 20903                                  INT19OLD73 equ I19_LST+51
 20904                                  INT19OLD74 equ I19_LST+56
 20905                                  INT19OLD76 equ I19_LST+61
 20906                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 20907                                  
 20908                                  ; 09/12/2022
 20909                                  %if 0
 20910                                  
 20911                                  ;keyrd_func	equ 04E9h
 20912                                  ;keysts_func	equ 04EAh
 20913                                  ;t_switch	equ 04F6h
 20914                                  ; 21/10/2022
 20915                                  keyrd_func	equ 04E5h
 20916                                  keysts_func	equ 04E6h
 20917                                  t_switch	equ 04F2h
 20918                                  
 20919                                  ; 22/10/2022
 20920                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 20921                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 20922                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 20923                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 20924                                  
 20925                                  %endif
 20926                                  
 20927                                  ; 09/12/2022
 20928                                  BCODESTART	equ BIOSDATAWORD
 20929                                  RE_INIT		equ re_init
 20930                                  
 20931                                  ; ----------------------------------------------------------------------
 20932                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 20933                                  ; ----------------------------------------------------------------------
 20934                                  ; 15/04/2019 - Retro DOS v4.0
 20935                                  
 20936                                  CONFIG_BEGIN        equ  '['
 20937                                  CONFIG_BREAK        equ  'C'
 20938                                  CONFIG_BUFFERS      equ  'B'
 20939                                  CONFIG_COMMENT      equ  'Y'
 20940                                  CONFIG_COUNTRY      equ  'Q'
 20941                                  CONFIG_DEVICE       equ  'D'
 20942                                  CONFIG_DEVICEHIGH   equ  'U'
 20943                                  CONFIG_DOS          equ  'H'
 20944                                  CONFIG_DRIVPARM     equ  'P'
 20945                                  CONFIG_FCBS         equ  'X'
 20946                                  CONFIG_FILES        equ  'F'
 20947                                  CONFIG_INCLUDE      equ  'J'
 20948                                  CONFIG_INSTALL      equ  'I'
 20949                                  CONFIG_INSTALLHIGH  equ  'W'
 20950                                  CONFIG_LASTDRIVE    equ  'L'
 20951                                  CONFIG_MENUCOLOR    equ  'R'
 20952                                  CONFIG_MENUDEFAULT  equ  'A'
 20953                                  CONFIG_MENUITEM     equ  'E'
 20954                                  CONFIG_MULTITRACK   equ  'M'
 20955                                  CONFIG_NUMLOCK      equ  'N'
 20956                                  CONFIG_REM          equ  '0'
 20957                                  CONFIG_SEMICOLON    equ  ';'
 20958                                  CONFIG_SET          equ  'V'
 20959                                  CONFIG_SHELL        equ  'S'
 20960                                  CONFIG_STACKS       equ  'K'
 20961                                  CONFIG_SUBMENU      equ  'O'
 20962                                  CONFIG_SWITCHES     equ  '1'
 20963                                  
 20964                                  CONFIG_UNKNOWN      equ  'Z'
 20965                                  
 20966                                  ; 18/03/2025 - MiniDOS v1.0
 20967                                  ; 13/05/2024 - Retro DOS v5.0 (PCDOS 71 IBMBIO.COM)
 20968                                  ;CONFIG_DOSDATA      equ  'T'
 20969                                  
 20970                                  CONFIG_OPTION_QUERY equ 80h
 20971                                  
 20972                                  ; ----------------------------------------------------------------------
 20973                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 20974                                  ; ----------------------------------------------------------------------
 20975                                  ; 21/03/2019 - Retro DOS v4.0
 20976                                  
 20977                                  true	equ	0FFFFh
 20978                                  false	equ	0
 20979                                  cr	equ	13
 20980                                  lf	equ	10
 20981                                  tab	equ	9
 20982                                  
 20983                                  multMULT	   equ	4Ah
 20984                                  multMULTGETHMAPTR  equ	1
 20985                                  multMULTALLOCHMA   equ	2
 20986                                  
 20987                                  ;NOEXEC    equ	FALSE
 20988                                  
 20989                                  stacksw    equ	true	;include switchable hardware stacks
 20990                                  mycds_size equ	88	;size of curdir_list. if it is not
 20991                                  			;the same, then will generate compile error.
 20992                                  
 20993                                  entrysize   equ     8
 20994                                  
 20995                                  mincount    equ     8
 20996                                  defaultcount equ    9
 20997                                  maxcount    equ     64
 20998                                  
 20999                                  minsize     equ     32
 21000                                  defaultsize equ     128
 21001                                  maxsize     equ     512
 21002                                  
 21003                                  ;%define allocbyte  byte [es:bp+0]
 21004                                  ;%define intlevel   byte [es:bp+1]
 21005                                  ;%define savedsp    word [es:bp+2]
 21006                                  ;%define savedss    word [es:bp+4]
 21007                                  ;%define newsp	    word [es:bp+6]
 21008                                  
 21009                                  allocbyte   equ     0
 21010                                  intlevel    equ     1
 21011                                  savedsp     equ     2
 21012                                  savedss     equ     4
 21013                                  newsp       equ     6
 21014                                  
 21015                                  free	    equ     0
 21016                                  allocated   equ     1
 21017                                  overflowed  equ     2
 21018                                  clobbered   equ     3
 21019                                  
 21020                                  ;---------------------------------------
 21021                                  ; external variable defined in ibmbio module for multi-track
 21022                                  
 21023                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 21024                                  			  ; it on after handling config.sys file as a
 21025                                  			  ; default value,if multrk_flag = multrk_off1.
 21026                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 21027                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 21028                                  
 21029                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 21030                                  
 21031                                  SYSINIT$:
 21032                                  	;IF	STACKSW 
 21033                                  	; include MSSTACK.INC	;Main stack program and data definitions
 21034                                  	; include STKMES.INC	;Fatal stack error message
 21035                                  	;   public Endstackcode
 21036                                  ;Endstackcode	label byte
 21037                                  	;ENDIF
 21038                                  
 21039                                  ; 05/07/2018
 21040                                  ; ----------------------------------------------------------------------
 21041                                  ; 04/06/2018 - Retro DOS v3.0
 21042                                  
 21043                                  ; ----------------------------------------------------------------------
 21044                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 21045                                  ; ----------------------------------------------------------------------
 21046                                  
 21047                                  ;	MSStack.inc
 21048                                  ;
 21049                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 21050                                  ;	should follow the standard Interrupt Sharing Scheme which has
 21051                                  ;	a standard header structure.
 21052                                  ;	Fyi, the following shows the relations between
 21053                                  ;	the interrupt vector and interrupt level.
 21054                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 21055                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 21056                                  ;	MSSTACK module modifies the following interrupt vectors
 21057                                  ;	to meet the standard Interrupt Sharing standard;
 21058                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 21059                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 21060                                  ;	should be initialized to indicat whether this interrupt handler is
 21061                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 21062                                  ;	program header is initialized in STKINIT.INC module.
 21063                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 21064                                  ;
 21065                                  
 21066                                  ;  User specifies the number of stack elements - default = 9
 21067                                  ;						 minimum = 8
 21068                                  ;						 maximum = 64
 21069                                  ;
 21070                                  ;  Intercepts Asynchronous Hardware Interrupts only
 21071                                  ;
 21072                                  ;  Picks a stack from pool of stacks and switches to it
 21073                                  ;
 21074                                  ;  Calls the previously saved interrupt vector after pushing flags
 21075                                  ;
 21076                                  ;  On return, returns the stack to the stack pool
 21077                                  ;
 21078                                  
 21079                                  ; This is a modification of STACKS:
 21080                                  ; 1. To fix a bug which was causing the program to take up too much space.
 21081                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 21082                                  ;    . Clobbers the stack that got too big instead of innocent stack
 21083                                  ;    . Allows system to work if the only stack that got too big was the most
 21084                                  ;      deeply nested one
 21085                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 21086                                  ; 4. Does not intercept any interrupts on a PCjr.
 21087                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 21088                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 21089                                  
 21090                                  		;EVEN
 21091                                  ;align 2
 21092                                  		; 21/10/2022
 21093                                  
 21094 00000000 0000                    		dw	0	; spare field but leave these in order
 21095 00000002 0000                    stackcount:	dw	0
 21096 00000004 0000                    stackat: 	dw	0
 21097 00000006 0000                    stacksize:	dw	0
 21098 00000008 0000                    stacks:		dw	0
 21099 0000000A 0000                    		dw	0
 21100                                  
 21101 0000000C [0800]                  firstentry:	dw	stacks
 21102 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21103 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21104                                  
 21105                                  ;***********************************************************************
 21106                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 21107                                  
 21108                                  ; ----------------------------------------------------------------------
 21109                                  
 21110 00000012 00000000                old02:	dd	0
 21111                                  
 21112                                  int02:
 21113                                  
 21114                                  ; *********************************************************************
 21115                                  ;
 21116                                  ; this is special support for the pc convertible / nmi handler
 21117                                  ;
 21118                                  ;	on the pc convertible, there is a situation where an nmi can be 
 21119                                  ;	caused by using the "out" instructions to certain ports. when this
 21120                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 21121                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 21122                                  ;	includes other type of interrupts (hardware and software), and
 21123                                  ;	also includes other type of nmi's. when any nmi has occured,
 21124                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 21125                                  ;	the software takes specific steps to allow further interrupting.
 21126                                  ;
 21127                                  ;	for pc convertible, the situation where the nmi is generated by the
 21128                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 21129                                  ;	otherwords, it is actually a "restartable exception". in this
 21130                                  ;	case, the software handler must be able to get to the stack in
 21131                                  ;	order to figure out what instruction caused the problem, where
 21132                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 21133                                  ;	we will not switch stacks in this situation. this situation is
 21134                                  ;	detected by interrogating port 62h, and checking for a bit value
 21135                                  ;	of 80h. if set, *****do not switch stacks*****.
 21136                                  ;
 21137                                  ; *********************************************************************
 21138                                  
 21139 00000016 50                      	push	ax
 21140 00000017 06                      	push	es
 21141 00000018 B800F0                  	mov	ax,0F000h
 21142 0000001B 8EC0                    	mov	es,ax
 21143                                  	; 02/11/2022
 21144 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 21145 00000023 07                      	pop	es
 21146 00000024 750C                    	jne	short normal02
 21147                                  
 21148 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 21149                                  				; 0-3: values of DIP switches
 21150                                  				; 5: 1=Timer 2 channel out
 21151                                  				; 6: 1=I/O channel check
 21152                                  				; 7: 1=RAM parity check error occurred.
 21153 00000028 A880                    	test	al,80h
 21154 0000002A 7406                    	jz	short normal02
 21155                                  special02:
 21156 0000002C 58                      	pop	ax
 21157 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 21158                                  normal02:
 21159 00000032 58                      	pop	ax
 21160 00000033 E81101                  	call	do_int_stacks
 21161 00000036 [1200]                  	dw	old02
 21162                                  
 21163                                  ; ----------------------------------------------------------------------
 21164                                  
 21165 00000038 00000000                old08:	dd	0
 21166                                  
 21167                                  int08:
 21168 0000003C E80801                  	call	do_int_stacks
 21169 0000003F [3800]                  	dw	old08
 21170                                  
 21171                                  ; ----------------------------------------------------------------------
 21172                                  
 21173 00000041 00000000                old09:	dd	0
 21174                                  
 21175                                  int09:
 21176                                  
 21177                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 21178                                  ; as its first instruction for compatibility reasons
 21179                                  
 21180 00000045 EB02                    	jmp	short keyboard_lbl
 21181 00000047 90                      	nop
 21182 00000048 00                      	db	0
 21183                                  
 21184                                  keyboard_lbl:
 21185 00000049 E8FB00                  	call	do_int_stacks
 21186 0000004C [4100]                  	dw	old09
 21187                                  
 21188                                  ; ----------------------------------------------------------------------
 21189                                  
 21190 0000004E 00000000                old70:	dd	0
 21191                                  
 21192                                  int70:
 21193 00000052 E8F200                  	call	do_int_stacks
 21194 00000055 [4E00]                  	dw	old70
 21195                                  
 21196                                  ; ----------------------------------------------------------------------
 21197                                  
 21198                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 21199                                  ;public	int&a
 21200                                  ;public	old&a
 21201                                  ;public	firstflag&a
 21202                                  ;int&a	proc	far
 21203                                  ;	jmp	short entry_int&a&_stk
 21204                                  ;old&a	dd	  0		;forward pointer
 21205                                  ;	dw	  424bh 	;compatible signature for int. sharing
 21206                                  ;firstflag&a db   0		;the firstly hooked.
 21207                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 21208                                  ;	db	7 dup (0)	;reserved for future.
 21209                                  ;entry_int&a&_stk:
 21210                                  ;	call	do_int_stacks
 21211                                  ;	dw	old&a
 21212                                  ;intret_&a:
 21213                                  ;	iret
 21214                                  ;int&a	endp
 21215                                  ;	endm
 21216                                  
 21217                                  ; ----------------------------------------------------------------------
 21218                                  
 21219                                  int0A:
 21220 00000057 EB10                    	jmp	short entry_int0A_stk
 21221 00000059 00000000                old0A:	dd	0	
 21222 0000005D 4B42                    	dw	424Bh
 21223                                  firstflag0A:
 21224 0000005F 00                      	db	0
 21225 00000060 EB0C                    	jmp	short intret_0A
 21226 00000062 00<rep 7h>              	times	7 db 0
 21227                                  
 21228                                  entry_int0A_stk:
 21229 00000069 E8DB00                  	call	do_int_stacks
 21230 0000006C [5900]                  	dw	old0A
 21231                                  intret_0A:
 21232 0000006E CF                      	iret
 21233                                  
 21234                                  ; ----------------------------------------------------------------------
 21235                                  
 21236                                  int0B:
 21237 0000006F EB10                    	jmp	short entry_int0B_stk
 21238 00000071 00000000                old0B:	dd	0	
 21239 00000075 4B42                    	dw	424Bh
 21240                                  firstflag0B:
 21241 00000077 00                      	db	0
 21242 00000078 EB0C                    	jmp	short intret_0B
 21243 0000007A 00<rep 7h>              	times	7 db 0
 21244                                  
 21245                                  entry_int0B_stk:
 21246 00000081 E8C300                  	call	do_int_stacks
 21247 00000084 [7100]                  	dw	old0B
 21248                                  intret_0B:
 21249 00000086 CF                      	iret
 21250                                  
 21251                                  ; ----------------------------------------------------------------------
 21252                                  
 21253                                  int0C:
 21254 00000087 EB10                    	jmp	short entry_int0C_stk
 21255 00000089 00000000                old0C:	dd	0	
 21256 0000008D 4B42                    	dw	424Bh
 21257                                  firstflag0C:
 21258 0000008F 00                      	db	0
 21259 00000090 EB0C                    	jmp	short intret_0C
 21260 00000092 00<rep 7h>              	times	7 db 0
 21261                                  
 21262                                  entry_int0C_stk:
 21263 00000099 E8AB00                  	call	do_int_stacks
 21264 0000009C [8900]                  	dw	old0C
 21265                                  intret_0C:
 21266 0000009E CF                      	iret
 21267                                  
 21268                                  ; ----------------------------------------------------------------------
 21269                                  
 21270                                  int0D:
 21271 0000009F EB10                    	jmp	short entry_int0D_stk
 21272 000000A1 00000000                old0D:	dd	0	
 21273 000000A5 4B42                    	dw	424Bh
 21274                                  firstflag0D:
 21275 000000A7 00                      	db	0
 21276 000000A8 EB0C                    	jmp	short intret_0D
 21277 000000AA 00<rep 7h>              	times	7 db 0
 21278                                  
 21279                                  entry_int0D_stk:
 21280 000000B1 E89300                  	call	do_int_stacks
 21281 000000B4 [A100]                  	dw	old0D
 21282                                  intret_0D:
 21283 000000B6 CF                      	iret
 21284                                  
 21285                                  ; ----------------------------------------------------------------------
 21286                                  
 21287                                  int0E:
 21288 000000B7 EB10                    	jmp	short entry_int0E_stk
 21289 000000B9 00000000                old0E:	dd	0	
 21290 000000BD 4B42                    	dw	424Bh
 21291                                  firstflag0E:
 21292 000000BF 00                      	db	0
 21293 000000C0 EB0C                    	jmp	short intret_0E
 21294 000000C2 00<rep 7h>              	times	7 db 0
 21295                                  
 21296                                  entry_int0E_stk:
 21297 000000C9 E87B00                  	call	do_int_stacks
 21298 000000CC [B900]                  	dw	old0E
 21299                                  intret_0E:
 21300 000000CE CF                      	iret
 21301                                  
 21302                                  ; ----------------------------------------------------------------------
 21303                                  
 21304                                  int72:
 21305 000000CF EB10                    	jmp	short entry_int72_stk
 21306 000000D1 00000000                old72:	dd	0	
 21307 000000D5 4B42                    	dw	424Bh
 21308                                  firstflag72:
 21309 000000D7 00                      	db	0
 21310 000000D8 EB0C                    	jmp	short intret_72
 21311 000000DA 00<rep 7h>              	times	7 db 0
 21312                                  
 21313                                  entry_int72_stk:
 21314 000000E1 E86300                  	call	do_int_stacks
 21315 000000E4 [D100]                  	dw	old72
 21316                                  intret_72:
 21317 000000E6 CF                      	iret
 21318                                  
 21319                                  ; ----------------------------------------------------------------------
 21320                                  
 21321                                  int73:
 21322 000000E7 EB10                    	jmp	short entry_int73_stk
 21323 000000E9 00000000                old73:	dd	0	
 21324 000000ED 4B42                    	dw	424Bh
 21325                                  firstflag73:
 21326 000000EF 00                      	db	0
 21327 000000F0 EB0C                    	jmp	short intret_73
 21328 000000F2 00<rep 7h>              	times	7 db 0
 21329                                  
 21330                                  entry_int73_stk:
 21331 000000F9 E84B00                  	call	do_int_stacks
 21332 000000FC [E900]                  	dw	old73
 21333                                  intret_73:
 21334 000000FE CF                      	iret
 21335                                  
 21336                                  ; ----------------------------------------------------------------------
 21337                                  
 21338                                  int74:
 21339 000000FF EB10                    	jmp	short entry_int74_stk
 21340 00000101 00000000                old74:	dd	0	
 21341 00000105 4B42                    	dw	424Bh
 21342                                  firstflag74:
 21343 00000107 00                      	db	0
 21344 00000108 EB0C                    	jmp	short intret_74
 21345 0000010A 00<rep 7h>              	times	7 db 0
 21346                                  
 21347                                  entry_int74_stk:
 21348 00000111 E83300                  	call	do_int_stacks
 21349 00000114 [0101]                  	dw	old74
 21350                                  intret_74:
 21351 00000116 CF                      	iret
 21352                                  
 21353                                  ; ----------------------------------------------------------------------
 21354                                  
 21355                                  int76:
 21356 00000117 EB10                    	jmp	short entry_int76_stk
 21357 00000119 00000000                old76:	dd	0	
 21358 0000011D 4B42                    	dw	424Bh
 21359                                  firstflag76:
 21360 0000011F 00                      	db	0
 21361 00000120 EB0C                    	jmp	short intret_76
 21362 00000122 00<rep 7h>              	times	7 db 0
 21363                                  
 21364                                  entry_int76_stk:
 21365 00000129 E81B00                  	call	do_int_stacks
 21366 0000012C [1901]                  	dw	old76
 21367                                  intret_76:
 21368 0000012E CF                      	iret
 21369                                  
 21370                                  ; ----------------------------------------------------------------------
 21371                                  
 21372                                  int77:
 21373 0000012F EB10                    	jmp	short entry_int77_stk
 21374 00000131 00000000                old77:	dd	0	
 21375 00000135 4B42                    	dw	424Bh
 21376                                  firstflag77:
 21377 00000137 00                      	db	0
 21378 00000138 EB0C                    	jmp	short intret_77
 21379 0000013A 00<rep 7h>              	times	7 db 0
 21380                                  
 21381                                  entry_int77_stk:
 21382 00000141 E80300                  	call	do_int_stacks
 21383 00000144 [3101]                  	dw	old77
 21384                                  intret_77:
 21385 00000146 CF                      	iret
 21386                                  
 21387                                  ; ----------------------------------------------------------------------
 21388                                  
 21389                                  ;********************************************************************
 21390                                  ;common routines
 21391                                  ;********************************************************************
 21392                                  
 21393                                  ; do interrupt stack switching. the fake return address holds
 21394                                  ; a pointer to the far-pointer of the actual interrupt
 21395                                  ; service routine
 21396                                  
 21397                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 21398                                  ; 21/03/2019 - Retro DOS v4.0
 21399                                  
 21400                                  ;allocbyte   equ 0
 21401                                  ;intlevel    equ 1
 21402                                  ;savedsp     equ 2
 21403                                  ;savedss     equ 4
 21404                                  ;newsp       equ 6
 21405                                  
 21406                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 21407                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 21408                                  
 21409                                  do_int_stacks:
 21410 00000147 50                      	push	ax
 21411 00000148 55                      	push	bp
 21412 00000149 06                      	push	es
 21413 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 21414 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 21415 00000154 B001                    	mov	al,allocated ; 1
 21416                                  	; 21/10/2022
 21417                                  	;xchg	[es:bp+allocbyte],al 
 21418                                  	; 11/12/2022
 21419 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 21420 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 21421 0000015C 7551                    	jne	short notfree02
 21422                                  
 21423 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 21424                                  
 21425                                  found02:
 21426 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 21427 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 21428                                  
 21429 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 21430                                  
 21431 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 21432                                  	; 21/10/2022
 21433                                  	;mov	bp,[es:bp+6]
 21434                                  	; 11/12/2022
 21435                                  	;cmp	[es:bp+0],ax	
 21436 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 21437 00000176 7544                    	jne	short foundbad02
 21438                                  
 21439                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 21440 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 21441 0000017A 8EC5                    	mov	es,bp
 21442 0000017C 89E5                    	mov	bp,sp
 21443 0000017E 8B6E06                  	mov	bp,[bp+6]
 21444 00000181 8ED0                    	mov	ss,ax
 21445 00000183 8CC4                    	mov	sp,es
 21446 00000185 8EC0                    	mov	es,ax
 21447 00000187 2E8B6E00                	mov	bp,[cs:bp]
 21448                                  
 21449                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 21450                                  	;push    bp
 21451                                  	;mov     bp,sp
 21452                                  	;mov     ax,[bp+8]
 21453                                  	;pop     bp
 21454                                  	;push    es
 21455                                  	;pop     ss
 21456                                  	;mov     sp,bp
 21457                                  	;mov     bp,ax
 21458                                  	; 11/12/2022
 21459                                  	;;mov	bp,[cs:bp+0]	
 21460                                  	;mov	bp,[cs:bp]	
 21461                                  
 21462 0000018B 9C                      	pushf				; go execute the real interrupt handler
 21463                                  	; 11/12/2022
 21464 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 21465                                  	; 21/10/2022
 21466                                  	;call	far [cs:bp+0]
 21467                                  
 21468 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 21469                                  	; 11/12/2022
 21470 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 21471                                  	; 21/10/2022
 21472                                  	;mov	bp,[es:bp+0]
 21473 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 21474 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 21475                                  
 21476                                  	; 11/12/2022
 21477                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 21478                                  	; 21/10/2022
 21479 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 21480 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 21481                                  
 21482 000001A8 07                      	pop	es
 21483 000001A9 5D                      	pop	bp			; saved on entry
 21484 000001AA 58                      	pop	ax			; saved on entry
 21485 000001AB 83C402                  	add	sp,2
 21486 000001AE CF                      	iret				; done with this interrupt
 21487                                  
 21488                                  notfree02:
 21489 000001AF 3C01                    	cmp	al,allocated		; error flag
 21490 000001B1 7404                    	je	short findnext02	;  no, continue
 21491                                  	; 11/12/2022
 21492                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 21493                                  	; 21/10/2022
 21494 000001B3 26864600                	xchg	[es:bp],al
 21495                                  
 21496                                  findnext02:
 21497 000001B7 E81200                  	call	longpath
 21498 000001BA EBA8                    	jmp	short found02
 21499                                  
 21500                                  foundbad02:
 21501 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21502 000001C1 72F4                    	jc	short findnext02
 21503 000001C3 89C5                    	mov	bp,ax			; flag this entry
 21504                                  	; 11/12/2022
 21505                                  	;mov	byte [es:bp+allocbyte],clobbered
 21506                                  	; 21/10/2022
 21507 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 21508 000001CA EBEB                    	jmp	short findnext02	; keep looking
 21509                                  
 21510                                  ; ----------------------------------------------------------------------
 21511                                  
 21512                                  ; Common routines
 21513                                  
 21514                                  longpath:
 21515                                  	; 21/03/2019
 21516 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 21517                                  lploopp:
 21518                                  	; 11/12/2022
 21519                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 21520                                  	; 21/10/2022
 21521 000001D1 26807E0000              	cmp	byte [es:bp],free
 21522 000001D6 7512                    	jne	short inuse		;  no, try next one
 21523                                  
 21524 000001D8 B001                    	mov	al,allocated
 21525                                  	; 11/12/2022
 21526                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 21527                                  	; 21/10/2022
 21528 000001DA 26864600                	xchg	[es:bp],al
 21529 000001DE 3C00                    	cmp	al,free 		; is it still free?
 21530 000001E0 7414                    	je	short found		;  yes, go use it
 21531                                  
 21532 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 21533 000001E4 7404                    	je	short inuse		;  no, check the next one
 21534                                  
 21535                                  	; 11/12/2022
 21536                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 21537                                  	; 21/10/2022
 21538 000001E6 26884600                	mov	[es:bp],al
 21539                                  inuse:
 21540 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21541 000001EF 7406                    	je	short fatal
 21542 000001F1 83ED08                  	sub	bp,entrysize
 21543 000001F4 EBDB                    	jmp	short lploopp
 21544                                  found:
 21545 000001F6 C3                      	retn
 21546                                  fatal:
 21547 000001F7 1E                      	push	ds
 21548 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 21549 000001FB 8ED8                    	mov	ds,ax
 21550 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21551 00000202 1F                      	pop	ds
 21552 00000203 7504                    	jne	short skip_nmis
 21553                                  
 21554 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 21555 00000207 E672                    	out	72h,al
 21556                                  
 21557                                  skip_nmis:
 21558 00000209 FA                      	cli				; disable and mask
 21559 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 21560 0000020C E621                    	out	021h,al
 21561 0000020E E6A1                    	out	0A1h,al
 21562                                  
 21563 00000210 8CCE                    	mov	si,cs
 21564 00000212 8EDE                    	mov	ds,si
 21565 00000214 BE[3B02]                	mov	si,fatal_msg
 21566                                  ;SR;
 21567                                  ;   We set all foci to this VM to issue the stack failure message
 21568                                  ;
 21569 00000217 50                      	push	ax
 21570 00000218 1E                      	push	ds
 21571                                  	;;mov	ax,Bios_Data ; 0070h
 21572                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 21573                                  	; 21/10/2022
 21574 00000219 B87000                  	mov	ax,DOSBIODATASEG
 21575 0000021C 8ED8                    	mov	ds,ax
 21576                                  
 21577                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 21578 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 21579 00000223 1F                      	pop	ds
 21580 00000224 58                      	pop	ax
 21581 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 21582                                  
 21583                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 21584                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 21585                                  	; 21/10/2022
 21586 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 21587                                  ;
 21588                                  ;SR; We do not bother about the returned status of this call. 
 21589                                  ;
 21590                                  fatal_loop:
 21591 0000022C AC                      	lodsb
 21592 0000022D 3C24                    	cmp	al,'$'
 21593 0000022F 7408                    	je	short fatal_done
 21594                                  
 21595 00000231 B307                    	mov	bl,7
 21596 00000233 B40E                    	mov	ah,14
 21597 00000235 CD10                    	int	10h			; whoops, this enables ints
 21598 00000237 EBF3                    	jmp	short fatal_loop
 21599                                  
 21600                                  fatal_done:
 21601 00000239 EBFE                    	jmp	short fatal_done
 21602                                  
 21603                                  
 21604                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 21605                                  ; ----------------------------------------------------------------------
 21606                                  ;	include msbio.cl5		; fatal stack error message
 21607                                  
 21608                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 21609                                  
 21610                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 21611                                  ; ----------------------------------------------------------------------
 21612                                  ; 04/06/2018 - Retro DOS v3.0
 21613                                  
 21614                                  fatal_msg:
 21615 0000023B 0D0A                    	db	0Dh,0Ah
 21616 0000023D 070D0A                  	db	7,0Dh,0Ah
 21617 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 21617 00000249 737461636B206F7665-
 21617 00000252 72666C6F770D0A     
 21618 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 21618 00000262 6C7465640D0A24     
 21619                                  
 21620                                  endstackcode:
 21621                                  
 21622                                  ; ----------------------------------------------------------------------
 21623                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 21624                                  ; ----------------------------------------------------------------------
 21625                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 21626                                  
 21627                                  ; 22/03/2019 - Retro DOS v4.0
 21628                                  
 21629                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 21630                                  
 21631                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 21632                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 21633                                  
 21634                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21635                                  ; ----------------------------------------------------------------------
 21636                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 21637                                  
 21638                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 21639                                  
 21640                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21641                                  ; ----------------------------------------------------------------------
 21642                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 21643                                  
 21644                                  SYSINIT:	
 21645 00000269 E9A001                          JMP	GOINIT
 21646                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 21647                                  
 21648                                  ; ----------------------------------------------------------------------
 21649                                  
 21650                                  struc DDHighInfo
 21651 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 21652 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 21653 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 21654                                  endstruc
 21655                                  
 21656                                  ; 22/03/2019 - Retro DOS v4.0
 21657                                  
 21658 0000026C 00                      runhigh: db	0
 21659                                  
 21660                                  ; 02/11/2022
 21661                                  ;align 4
 21662                                  
 21663                                  DOSINFO: 
 21664 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 21665                                  ;MSDOS:
 21666                                  dos_temp_location: ; dword ; MSDOS 6.0
 21667                                  dosinit:		; MSDOS 6.0
 21668 00000271 0000                    	dw	0
 21669                                  
 21670                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21671                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 21672                                  ;	dw	0
 21673                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 21674                                  
 21675                                  CURRENT_DOS_LOCATION:
 21676 00000273 0000                    	dw	0
 21677                                  
 21678                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 21679                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 21680                                  
 21681                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21682                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 21683                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 21684                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21685                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 21686                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 21687                                  
 21688                                  DEVICE_LIST:
 21689 00000275 00000000                	dd	0
 21690                                  
 21691                                  ; 04/06/2018 - Retro DOS v3.0
 21692                                  ; 28/03/2018
 21693                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 21694                                  ;
 21695                                  sysi_country:	
 21696 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 21697                                  
 21698                                  ; MSDOS 6.0
 21699 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 21700                                  
 21701                                  ;lo_doscod_size: dw	0	; dos code size when in low mem
 21702                                  ;hi_doscod_size: dw	0	; dos code size when in HMA
 21703                                  ; 08/03/2025 (MiniDOS)
 21704 00000281 0000                    dos_code_size:	dw	0
 21705                                  
 21706 00000283 0000                    def_php:	dw	0
 21707                                  
 21708                                  ; M022--
 21709                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 21710                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 21711                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 21712                                  ;  the new home.
 21713                                  
 21714                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 21715                                  ; 21/10/2022
 21716                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 21717                                  
 21718                                  ; 22/10/2022
 21719                                  seg_reinit_ptr:	; label dword
 21720 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 21721                                  temp_bcode_seg:
 21722                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 21723                                  		; 22/10/2022
 21724 00000287 0203                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 21725                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21726                                  fake_floppy_drv:
 21727 00000289 00                      		db	0	; set to 1 if this machine
 21728                                  				; does not have any floppies!!!
 21729                                  
 21730                                  ; Internal Stack Parameters
 21731                                  
 21732 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 21733 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 21734 0000028E 00000000                stack_addr:	dd	0
 21735                                  
 21736                                  ; 05/06/2018 - Retro DOS v3.0
 21737                                  
 21738                                  ; various default values
 21739                                  
 21740 00000292 0100                    MEMORY_SIZE:	dw	1
 21741                                  
 21742                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 21743                                  
 21744 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 21745 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 21746 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 21747 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 21748 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 21749                                  
 21750 0000029D 08                      FILES:	db	8	; enough files for pipe
 21751 0000029E 04                      FCBS:	db	4	; performance for recycling
 21752 0000029F 00                      KEEP:	db	0	; keep original set
 21753 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 21754                                  
 21755                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 21756                                  ;;CONFBOT: dw	0
 21757                                  ;;ALLOCLIM: dw	0
 21758                                  ;CONFBOT: ; 02/11/2022
 21759                                  ;top_of_cdss: dw 0
 21760                                  
 21761                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 21762                                  ; (SYSINIT:02A3h)
 21763 000002A1 0000                    CONFBOT: dw	0
 21764 000002A3 0000                    ALLOCLIM: dw	0
 21765 000002A5 0000                    top_of_cdss: dw 0
 21766                                  
 21767                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 21768                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 21769                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 21770                                  
 21771 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 21772                                  
 21773                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 21774                                  %if 0
 21775                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21776                                  ; (SYSINIT:02A9h)
 21777                                  
 21778                                  command_line:
 21779                                  	db	2,0
 21780                                  	db	'P'
 21781                                  	db	0
 21782                                  	times	124 db 0 ; db 124 dup(0)
 21783                                  
 21784                                  %endif
 21785                                  
 21786                                  ; (SYSINIT:0329h)
 21787 000002AB 00                      ZERO:	db	0
 21788 000002AC 00                      sepchr:	db	0
 21789 000002AD 0000                    linecount: dw	0			; line count in config.sys
 21790 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 21791 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 21792                                  
 21793 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 21794 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 21795                                  
 21796 000002BB 0000                    buf_prev_off:	dw	0
 21797                                  
 21798                                          ;IF      NOT NOEXEC
 21799                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 21800                                          ;ENDIF
 21801                                  
 21802                                  ; 29/12/2023
 21803                                  ; 01/05/2018
 21804                                  COMEXE:
 21805 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 21806 000002BF [5A45]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 21807 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21808                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21809 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 21810 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21811 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 21812 000002C9 0000                    		dw	0
 21813                                  
 21814                                  ; variables for install= command.
 21815                                  
 21816 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 21817                                  					;  indicating the pass number
 21818                                  					; 0 - do scan for DOS=HIGH/LOW
 21819                                  					; 1 - load device drivers
 21820                                  					; 2 - was to load IFS
 21821                                  					;      now it is unused
 21822                                  					; 3 - do install=
 21823                                  					; >3 - nop
 21824 000002CC 0000                    install_flag:	dw	0
 21825                                  
 21826                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 21827                                  has_installed	equ	00000010b	; sysinit_base installed.
 21828                                  
 21829 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 21830 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 21831 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 21832 000002D8 0000                    checksum:	dw	0		; used by sum_up
 21833                                  
 21834 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 21835 000002EE 00                      ldexec_line:	db	0		;# of parm characters
 21836 000002EF 20                      ldexec_start:	db	' '
 21837 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 21838                                  
 21839                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 21840                                  
 21841                                  instexe:
 21842 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 21843 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 21844 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21845                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21846 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 21847 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 21848 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 21849 0000034C 0000                    		dw	0
 21850                                  
 21851                                  ; variables for comment=
 21852                                  
 21853 0000034E 00                      com_level:	db	0		; level of " " in command line
 21854 0000034F 00                      cmmt:		db	0		; length of comment string token
 21855 00000350 00                      cmmt1:		db	0		; token
 21856 00000351 00                      cmmt2:		db	0		; token
 21857 00000352 00                      cmd_indicator:	db	0
 21858 00000353 00                      donotshownum:	db	0
 21859                                  
 21860 00000354 0000                    count:		dw	0
 21861 00000356 0000                    org_count:	dw	0
 21862 00000358 0000                    chrptr:		dw	0
 21863 0000035A 0000                    cntryfilehandle: dw	0
 21864 0000035C 0000                    old_area:	dw	0
 21865 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 21866                                  
 21867                                  bucketptr: ; label dword
 21868                                  bufptr:	   ; label dword		; leave this stuff in order!
 21869 00000360 0000                    memlo:	dw	0
 21870                                  prmblk:	   ; label word
 21871 00000362 0000                    memhi:	dw	0
 21872 00000364 0000                    ldoff:	dw	0
 21873 00000366 0000                    area:	dw	0
 21874                                  
 21875                                  ; 18/03/2025 - MiniDOS v1.0
 21876                                  %if 0
 21877                                  
 21878                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 21879                                  prev_memhi:	dw 0
 21880                                  prev_alloclim:	dw 0
 21881                                  dosdata_umb:	db 0
 21882                                  
 21883                                  %endif
 21884                                  
 21885                                  ; Following is the request packet used to call INIT routines for 
 21886                                  ; all device drivers. Some fields may be accessed individually in
 21887                                  ; the code, and hence have individual labels, but they should not
 21888                                  ; be separated.
 21889                                  
 21890 00000368 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 21891                                  	;db	24			; was 22
 21892 00000369 00                      	db	0
 21893 0000036A 00                      	db	0			; initialize code
 21894 0000036B 0000                    	dw	0
 21895 0000036D 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 21896                                  
 21897 00000375 00                      unitcount:	db	0
 21898 00000376 00000000                break_addr:	dd	0
 21899 0000037A 00000000                bpb_addr:	dd	0
 21900                                  drivenumber:	; 22/10/2022
 21901 0000037E 00                      devdrivenum:	db	0 
 21902 0000037F 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 21903                                  
 21904                                  ; end of request packet
 21905                                  
 21906                                  ;drivenumber:	db	0  ; 22/03/2019
 21907                                  
 21908                                  toomanydrivesflag:
 21909 00000381 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 21910                                  align 2
 21911                                  
 21912                                  BCodeSeg:	; 21/10/2022
 21913 00000382 0203                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 21914                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21915                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 21916                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 21917                                  
 21918                                  ; 30/12/2022
 21919                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 21920                                  ;
 21921                                  ; Magicbackdoor: dd 0
 21922                                  ; NullBackdoor: 
 21923                                  ;		retf
 21924                                  
 21925                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21926                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21927                                  ; 19/04/2019
 21928                                  _timer_lw_:
 21929 00000384 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 21930                                  
 21931                                  ; 29/12/2023 - Retro DOS v5.0
 21932                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 21933                                  
 21934 00000386 00                      F5_key:	db 0
 21935 00000387 00                      F8_key:	db 0
 21936                                  
 21937                                  ; 07/03/2025 (MiniDOS 1.0)
 21938                                  %if 0
 21939                                  MagicBackdoor:	dd 0
 21940                                  NullBackdoor:
 21941                                  		retf
 21942                                  %endif
 21943                                  
 21944                                  ;SR;
 21945                                  ; This is the communication block between the DOS and the BIOS. It starts at
 21946                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 21947                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 21948                                  ;is passed to DOS as part of the DOSINIT call.
 21949                                  ;
 21950                                  
 21951                                  BiosComBlock:
 21952                                  	;dd	Bios_Data:SysinitPresent 
 21953                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 21954 00000388 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 21955                                  	;dw	KERNEL_SEGMENT ; 0070h
 21956                                  	; 21/10/2022
 21957 0000038A 7000                    	dw	DOSBIODATASEG ; 0070h
 21958                                  
 21959                                  ;align 2
 21960                                  
 21961                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 21962                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 21963                                  tempstack:	
 21964 0000038C 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 21965                                  
 21966                                  ; ----------------------------------------------------------------------------
 21967                                  
 21968                                  	; 29/12/2023 - Retro DOS v5.0
 21969                                  	; 22/10/2022 - Retro DOS v4.0
 21970                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 21971                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 21972                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 21973                                  	; 12/12/2023
 21974 0000040C 0E                      	push	cs
 21975 0000040D 1F                      	pop	ds
 21976                                  
 21977                                  	; 12/12/2022
 21978                                  	; 22/03/2019 - Retro DOS v4.0
 21979                                  	; 06/07/2018
 21980                                  	; 04/06/2018 - Retro DOS v3.0
 21981                                  ; before doing anything else, let's set the model byte
 21982 0000040E B4C0                    	mov	ah,0C0h 		; get system configuration
 21983 00000410 CD15                    	int	15h			; 
 21984 00000412 7214                    	jc	short no_rom_config
 21985                                  
 21986                                  	;cmp	ah,0			; double check
 21987                                  	;jne	short no_rom_config
 21988                                  	; 03/09/2023
 21989 00000414 08E4                    	or	ah,ah
 21990 00000416 7510                    	jnz	short no_rom_config
 21991                                  
 21992                                  	; 12/12/2023 ; *
 21993                                  	; ds = cs
 21994                                  
 21995 00000418 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 21996                                  	;mov	[cs:sys_model_byte],al 
 21997 0000041C A2[B902]                	mov	[sys_model_byte],al ; *
 21998 0000041F 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 21999                                  	;mov	[cs:sys_scnd_model_byte],al
 22000 00000423 A2[BA02]                	mov	[sys_scnd_model_byte],al ; *
 22001                                  	;jmp	short SYSIN
 22002                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22003 00000426 EB29                    	jmp	short move_myself
 22004                                  
 22005                                  no_rom_config:				; Old ROM
 22006                                  	; 12/12/2023
 22007                                  	;mov	ax,0F000h
 22008                                  	;mov	ds,ax
 22009                                  	;mov	al,[0FFFEh]
 22010                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 22011                                  	; 12/12/2023
 22012                                  	; ds = cs
 22013 00000428 B800F0                  	mov	ax,0F000h
 22014 0000042B 8EC0                    	mov	es,ax
 22015 0000042D 26A0FEFF                	mov	al,[es:0FFFEh]
 22016 00000431 A2[B902]                	mov	[sys_model_byte],al	; set the model byte.
 22017                                  	
 22018                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 22019                                  ; execute the equipment determination interrupt and then
 22020                                  ; check the returned value to see if we have any floppy drives
 22021                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 22022                                  ; see the at tech ref bios listings for help on the equipment
 22023                                  ; flag interrupt (11h)	
 22024                                  
 22025                                  	; 22/10/2022
 22026                                  ;check_for_fake_floppy:			; entry point for rom_config above
 22027 00000434 CD11                    	int	11h			; check equipment flag
 22028                                  
 22029                                  	; 29/12/2023 - Retro DOS v5.0
 22030                                  	;jmp	short check_for_fake_floppy
 22031                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 22032                                  	;db	52h	; 'RPS' sign
 22033                                  	;db	50h
 22034                                  	;db	53h
 22035                                  
 22036                                  check_for_fake_floppy:
 22037                                  	; 29/12/2023
 22038                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 22039                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 22040                                  	;			; by using 'RPS' sign position)
 22041                                  	;			;		 03/07/2023 - Erdogan Tan
 22042                                  	;test	ax, 1		; have any floppies?
 22043                                  
 22044                                  	; 12/12/2022
 22045 00000436 A801                    	test	al,1		
 22046                                  	;test	ax,1			; have any floppies?
 22047 00000438 7517                    	jnz	short move_myself	; yes,normal system
 22048                                  
 22049                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 22050                                  ; whether it is an old ROM BIOS or a new one
 22051                                  ;
 22052                                  ; WARNING !!!
 22053                                  ;
 22054                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 22055                                  ; here will require an equivalent modification in MSINIT.ASM also
 22056                                  
 22057                                  	; 12/12/2023
 22058                                  	;push	es  ; not necessary
 22059                                  
 22060 0000043A 30C9                    	xor	cl,cl	
 22061 0000043C B408                    	mov	ah,8			; get disk parameters
 22062 0000043E B200                    	mov	dl,0			; of drive 0
 22063 00000440 CD13                    	int	13h
 22064                                  
 22065                                  	;pop	es  ; 12/12/2023	
 22066                                  
 22067 00000442 720D                    	jc	short move_myself	; if error lets assume that the
 22068                                  					;  ROM BIOS lied
 22069                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 22070                                  	;je	short move_myself
 22071                                  	; 03/09/2023
 22072 00000444 08C9                    	or	cl,cl
 22073 00000446 7409                    	jz	short move_myself
 22074                                  
 22075 00000448 08D2                    	or	dl,dl			; number of flp drvs == 0?
 22076 0000044A 7505                    	jnz	short move_myself	; no
 22077                                  
 22078                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 22079                                  	; 12/12/2023
 22080                                  	; ds = cs
 22081 0000044C C606[8902]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 22082                                  
 22083                                  move_myself:
 22084                                  	; 12/12/2023
 22085                                  	;cld	; not necessary		; set up move
 22086                                  	;xor	si,si
 22087                                  	;mov	di,si
 22088                                  
 22089                                  	; 12/12/2023
 22090                                  	; ds = cs
 22091                                  	; 12/12/2022
 22092                                  	;push	cs
 22093                                  	;pop	ds
 22094                                  
 22095                                  	;mov	cx,[cs:MEMORY_SIZE]
 22096 00000451 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 22097                                  
 22098                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22099                                  ;;;	if	msver
 22100                                  ;	cmp	cx,1		; 1 means do scan
 22101                                  ;	jnz	short noscan
 22102                                  ;	mov	cx,2048		; start scanning at 32k boundary
 22103                                  ;	xor	bx,bx
 22104                                  ;
 22105                                  ;memscan:inc	cx
 22106                                  ;	jz	short setend
 22107                                  ;	mov	ds,cx
 22108                                  ;	mov	al,[bx]
 22109                                  ;	not	al
 22110                                  ;	mov	[bx],al
 22111                                  ;	cmp	al,[bx]
 22112                                  ;	not	al
 22113                                  ;	mov	[bx],al
 22114                                  ;	jz	short memscan
 22115                                  ;setend:
 22116                                  ;	mov	cs:[memory_size],cx
 22117                                  ;;;	endif
 22118                                  
 22119                                  ;noscan: 				; cx is mem size in para
 22120                                  ;;
 22121                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 22122                                  ;;		  before we try to run.
 22123                                  ;;	       b) in any case, we should check for sufficient memory and give
 22124                                  ;;		  an appropriate error diagnostic if there isn't enough
 22125                                  ;
 22126                                  ;	push	cs
 22127                                  ;	pop	ds
 22128                                  ;
 22129                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 22130                                  ;;	  that way it would be easier to slide them down home in a minimal
 22131                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 22132                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 22133                                  ;;	  temporary home and the final one.  the problem with doing that
 22134                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 22135                                  ;
 22136                                  ;	dec	cx			; one para for an arena at end of mem
 22137                                  ;					; in case of UMBs
 22138                                  
 22139                                  	; 22/10/2022
 22140                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 22141                                  
 22142                                  	; 12/12/2022
 22143                                  	;push	cs
 22144                                  	;pop	ds
 22145                                  
 22146 00000455 49                      	dec	cx
 22147                                  
 22148                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 22149                                  
 22150 00000456 31DB                    	xor	bx,bx
 22151 00000458 8EC3                    	mov	es,bx
 22152                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 22153                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 22154                                  	; 29/09/2023
 22155 0000045A 26C41EBC00              	les	bx,[es:(2Fh*4)]
 22156 0000045F 26817F035250            	cmp	word [es:bx+3],'RP'
 22157 00000465 751B                    	jne	short NoRPL
 22158 00000467 26807F054C              	cmp	byte [es:bx+5],'L'
 22159 0000046C 7514                    	jne	short NoRPL
 22160                                  
 22161 0000046E 89CA                    	mov	dx,cx			; get TOM into DX
 22162 00000470 52                      	push	dx
 22163 00000471 B8064A                  	mov	ax,4A06h
 22164                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 22165 00000474 CD2F                    	int	2Fh			; Get new TOM from any RPL
 22166 00000476 58                      	pop	ax
 22167 00000477 89D1                    	mov	cx,dx
 22168 00000479 39C2                    	cmp	dx,ax
 22169 0000047B 7405                    	je	short NoRPL
 22170                                  	
 22171                                  	; 11/12/2022
 22172                                  	; ds = cs
 22173 0000047D 8916[9402]              	mov	[RPLMemTop],dx
 22174                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22175                                  	;mov	[cs:RPLMemTop],dx
 22176                                  	
 22177 00000481 49                      	dec	cx
 22178                                  NoRPL:
 22179 00000482 B8[A04D]                	mov	ax,SI_end		; need this much room for sysinit
 22180                                  					; (SI_end == sysinit code size)
 22181                                  					; 03/09/2023
 22182                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 22183                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 22184 00000485 E8F807                  	call	off_to_para
 22185 00000488 29C1                    	sub	cx,ax
 22186                                  
 22187                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 22188                                  ; code above sysinit in memory
 22189                                  ;
 22190 0000048A 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 22191                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 22192                                  
 22193 0000048E B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 22194                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 22195                                  					; 03/09/2023
 22196                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 22197 00000491 E8EC07                  	call	off_to_para		; leave this much room for BIOS code
 22198 00000494 29C1                    	sub	cx,ax
 22199 00000496 8EC1                    	mov	es,cx			; segment where sysinit will be located
 22200                                  
 22201                                  	; 12/12/2023
 22202 00000498 FC                      	cld	; not necessary		; set up move
 22203 00000499 31F6                    	xor	si,si
 22204 0000049B 89F7                    	mov	di,si
 22205                                  
 22206 0000049D B9[A04D]                	mov	cx,SI_end		; (sysinit code size)
 22207 000004A0 D1E9                    	shr	cx,1			; divide by 2 to get words
 22208 000004A2 F3A5                    	rep	movsw			; relocate sysinit
 22209                                  
 22210 000004A4 06                      	push	es			; push relocated segment
 22211 000004A5 B8[AA04]                	mov	ax,SYSIN
 22212 000004A8 50                      	push	ax			; push relocated entry point
 22213                                  
 22214 000004A9 CB                      	retf				; far jump to relocated sysinit
 22215                                  
 22216                                  ; =============== S U B R O U T I N E ========================================
 22217                                  
 22218                                  ; 30/12/2023
 22219                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 22220                                  %if 0
 22221                                  get_cpu_type:
 22222                                  	pushf
 22223                                  	push	bx
 22224                                  	xor	bx,bx
 22225                                  	xor	ax,ax
 22226                                  	push	ax
 22227                                  	popf
 22228                                  	pushf
 22229                                  	pop	ax
 22230                                  	and	ax,0F000h
 22231                                  	cmp	ax,0F000h
 22232                                  	jz	short cpu_8086
 22233                                  	mov	ax,0F000h
 22234                                  	push	ax
 22235                                  	popf
 22236                                  	pushf
 22237                                  	pop	ax
 22238                                  	and	ax,0F000h
 22239                                  	jz	short cpu_286
 22240                                  cpu_386:
 22241                                  	inc	bx
 22242                                  cpu_286:
 22243                                  	inc	bx
 22244                                  cpu_8086:
 22245                                  	mov	ax,bx
 22246                                  	pop	bx
 22247                                  	popf
 22248                                  	retn
 22249                                  %endif
 22250                                  
 22251                                  ; ----------------------------------------------------------------------------
 22252                                  
 22253                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 22254                                  
 22255                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 22256                                  	; (SYSINIT:0533h)
 22257                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22258                                  	; (SYSINIT:04BFh)
 22259                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 22260                                  	; (SYSINIT:04F3h)
 22261                                  SYSIN:
 22262                                  	; Retro DOS 5.0 - 30/12/2023
 22263                                  	; Retro DOS 4.0 - 22/03/2019
 22264                                  	; Retro DOS 2.0 - 25/02/2018
 22265                                  
 22266                                  	; 23/04/2019
 22267                                  	;;mov	ax,Bios_Data
 22268                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22269                                  	; 21/10/2022
 22270 000004AA B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22271 000004AD 8ED8                    	mov	ds,ax
 22272                                  
 22273                                  	; 30/12/2023 - Retro DOS v5.0
 22274                                  	;;;
 22275                                  	;push	es
 22276                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 22277                                  	;push	di
 22278                                  	
 22279                                  	;call	get_cpu_type	; determine if 386 system
 22280                                  	;
 22281                                  get_cpu_type:
 22282 000004AF 9C                      	pushf
 22283 000004B0 31C0                    	xor	ax,ax
 22284 000004B2 50                      	push	ax
 22285 000004B3 9D                      	popf
 22286 000004B4 9C                      	pushf
 22287 000004B5 58                      	pop	ax
 22288 000004B6 2500F0                  	and	ax,0F000h
 22289 000004B9 3D00F0                  	cmp	ax,0F000h
 22290 000004BC 740F                    	jz	short cpu_8086
 22291 000004BE B800F0                  	mov	ax,0F000h
 22292 000004C1 50                      	push	ax
 22293 000004C2 9D                      	popf
 22294 000004C3 9C                      	pushf
 22295 000004C4 58                      	pop	ax
 22296 000004C5 2500F0                  	and	ax,0F000h
 22297 000004C8 7402                    	jz	short cpu_286
 22298                                  cpu_386:
 22299 000004CA 29C0                    	sub	ax,ax
 22300                                  cpu_286:
 22301 000004CC 40                      	inc	ax
 22302                                  cpu_8086:	; ax = 0
 22303                                  	; 30/12/2023 - Retro DOS v5.0
 22304 000004CD 2EA2[A506]              	mov	[cs:cpu_type],al ; 07/04/2024
 22305 000004D1 9D                      	popf
 22306                                  	;
 22307                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 22308 000004D2 3C02                    	cmp	al,2
 22309 000004D4 7512                    	jnz     short not_386_system
 22310 000004D6 FC                      	cld			; 80386
 22311 000004D7 1E                      	push	ds
 22312 000004D8 07                      	pop	es		; change A20 line on/off check code
 22313 000004D9 BF[4D07]                	mov	di,cpu386_cmpsd
 22314 000004DC B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 22315 000004DF AB                      	stosw
 22316 000004E0 B800F3                  	mov	ax,0F300h	; repz  ; F3
 22317 000004E3 AB                      	stosw
 22318 000004E4 B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 22319 000004E7 AB                      	stosw
 22320                                  not_386_system:
 22321                                  	;pop	di
 22322                                  	;pop	ax
 22323                                  	;pop	es
 22324                                  	;;;
 22325                                  
 22326 000004E8 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 22327 000004EC C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 22328                                  
 22329                                  ; first move the MSDOS.SYS image up to a harmless place 
 22330                                  ; on top of our new sysinitseg
 22331                                  
 22332                                  	; 22/10/2022
 22333 000004F1 B8[A04D]                	mov	ax,SI_end		; how big is sysinitseg?
 22334 000004F4 E88907                  	call	off_to_para
 22335 000004F7 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 22336 000004F9 01C8                    	add	ax,cx
 22337 000004FB 8EC0                    	mov	es,ax
 22338                                  	
 22339 000004FD 31F6                    	xor	si,si
 22340 000004FF 89F7                    	mov	di,si
 22341                                  
 22342 00000501 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 22343                                  
 22344                                  	;mov	ax,cs	
 22345                                  	;mov	ds,ax
 22346                                  
 22347                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 22348                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 22349                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 22350                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 22351                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 22352                                  
 22353                                  	; 22/10/2022
 22354 00000506 B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 22355                                  			     ; 03/09/2023
 22356                                  			     ; 5800h (PCDOS 7.1)
 22357 00000509 F3A5                    	rep     movsw
 22358 0000050B 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 22359                                  
 22360                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 22361                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 22362                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 22363                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 22364                                  
 22365                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 22366                                  	;mov	ax,cs
 22367                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22368                                  	;mov	ds,ax
 22369                                  
 22370                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22371                                  
 22372                                  ;	; 24/04/2019 
 22373                                  ;;ifndef ROMDOS
 22374                                  ;	mov	ax,[es:3] 		; get offset of dos
 22375                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 22376                                  ;	mov	[dosinit],ax		; that's the entry point offset
 22377                                  ;	call	off_to_para		; subtract this much from segment
 22378                                  ;	; 23/04/2019
 22379                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 22380                                  ;	sub	[FINAL_DOS_LOCATION],ax
 22381                                  ;;else
 22382                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 22383                                  ;;
 22384                                  ;;endif ; ROMDOS
 22385                                  
 22386                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22387                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 22388                                  
 22389                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 22390                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 22391                                  
 22392                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22393                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22394                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22395                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 22396                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 22397 00000510 A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 22398                                  				; 30/12/2023
 22399                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 22400                                  				;  (IBMDOS.SYS, offset 3)
 22401                                  
 22402 00000513 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22403                                  	; 02/11/2022
 22404 00000517 E86607                  	call	off_to_para		; subtract this much from segment
 22405 0000051A 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 22406                                  
 22407                                  	; Current DOSCODE start address = dword [dosinit]
 22408                                  
 22409                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 22410                                  ;; until it is determined whether it will be running in HIMEM or not.
 22411                                  
 22412                                  ;ifndef ROMDOS
 22413                                  
 22414                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 22415                                  
 22416                                  	; 22/10/2022
 22417 0000051F 8CC0                    	mov	ax,es
 22418 00000521 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 22419 00000524 8EC0                    	mov	es,ax
 22420 00000526 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 22421 0000052B 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 22422                                  
 22423                                  	;mov	si,BCODE_START ; mov si,30h
 22424                                  	; 09/12/2022
 22425 0000052D BE[3000]                	mov	si,BCODESTART
 22426                                  	; 02/11/2022
 22427 00000530 89F7                    	mov	di,si
 22428                                  	; 30/12/2023
 22429                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 22430                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 22431                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 22432                                  	;sub	cx,si
 22433                                  	; 31/03/2024
 22434                                  	BCODESIZE equ BCODEEND-BCODESTART
 22435 00000532 B9401D                  	mov	cx,BCODESIZE
 22436 00000535 D1E9                    	shr	cx,1
 22437 00000537 F3A5                    	rep	movsw			; move Bios_Code into place
 22438                                  
 22439 00000539 8CC0                    	mov	ax,es			; tell it what segment it's in
 22440 0000053B 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 22441                                  
 22442                                  ;endif	; not ROMDOS
 22443                                  
 22444                                  ; now call dosinit while it's in its temporary home
 22445                                  
 22446                                  	;mov	ax,cs
 22447                                  	;mov	ds,ax	 
 22448                                  
 22449                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 22450                                  
 22451                                  	; 22/10/2022
 22452                                  
 22453 00000540 2EC43E[8803]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 22454                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 22455 00000545 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 22456                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 22457                                  
 22458 0000054A 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 22459                                  
 22460 0000054F FA                      	cli
 22461 00000550 8CC8                    	mov	ax,cs
 22462 00000552 8ED0                    	mov	ss,ax
 22463                                  
 22464                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 22465                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 22466                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 22467                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 22468                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 22469                                  ;SYSINIT:0532h: 
 22470                                  
 22471                                  ; 22/10/2022
 22472                                  ; ----------------------------------------------------------------------------
 22473                                  ;SYSINIT:05A6h:
 22474                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 22475                                  
 22476                                  ; 03/09/2023
 22477                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 22478                                  
 22479                                  	;mov	sp,05A6h
 22480 00000554 BC5405                  	mov     sp,locstack		; set stack
 22481                                  
 22482 00000557 FB                      	sti
 22483                                  
 22484                                  ;align 2
 22485                                  	; 30/03/2018
 22486                                  ;LOCSTACK:
 22487                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 22488                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 22489                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 22490                                  
 22491                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22492                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 22493                                  
 22494                                  ; This call to DOSINIT will relocate the DOS data from its present location
 22495                                  ; at the top of memory, to its final location in low memory just above the
 22496                                  ; BIOS data. It will then build important DOS data structures in low 
 22497                                  ; memory following the DOS data. It returns (among many other things) the
 22498                                  ; new starting address of free memory.
 22499                                  
 22500 00000558 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 22501                                  			 ; es:di -> sysinitvars_ext
 22502                                  
 22503 0000055D 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 22504                                  	
 22505                                  	; 11/12/2022
 22506                                  	; 22/03/2019
 22507 00000562 0E                      	push	cs
 22508 00000563 1F                      	pop	ds
 22509                                  	; 22/10/2022
 22510                                  	;mov	[hi_doscod_size],ax
 22511                                  	;mov	[lo_doscod_size],cx
 22512                                  	; 08/03/2025 (MiniDOS)
 22513 00000564 A3[8102]                	mov	[dos_code_size],ax
 22514 00000567 8916[7D02]              	mov	[dos_segreinit],dx
 22515                                  	
 22516                                  	; 11/12/2022
 22517                                  	; ds = cs
 22518                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 22519                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 22520                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 22521                                  
 22522                                  	; 05/06/2018 - Retro DOS v3.0
 22523                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 22524                                  
 22525                                  	; 11/12/2022
 22526                                  	; ds = cs
 22527                                  	; 22/10/2022
 22528                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 22529 0000056B 268B05                  	mov	ax,[es:di] ; 22/03/2019
 22530                                  	;mov	[cs:DOSINFO],ax
 22531 0000056E A3[6D02]                	mov	[DOSINFO],ax
 22532                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 22533 00000571 268B4502                	mov	ax,[es:di+2]
 22534                                  	;mov	[cs:DOSINFO+2],ax
 22535 00000575 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 22536                                  
 22537                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 22538 00000578 268B4504                	mov	ax,[es:di+4]
 22539                                  	;mov	[cs:sysi_country],ax
 22540 0000057C A3[7902]                	mov	[sysi_country],ax
 22541                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 22542 0000057F 268B4506                	mov	ax,[es:di+6]
 22543                                  	;mov	[cs:sysi_country+2],ax
 22544 00000583 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 22545                                  
 22546                                  	; 20/04/2019
 22547                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 22548                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 22549                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 22550                                  	; 22/10/2022
 22551                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 22552                                  	;;;mov	[dos_segreinit+2],es
 22553                                  	;;mov	[dos_segreinit+2],ax
 22554                                  	;mov	[cs:dos_segreinit+2],ax
 22555                                  	; 11/12/2022
 22556                                  	; ds = cs
 22557 00000586 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 22558 0000058A 8C06[7F02]              	mov	[dos_segreinit+2],es
 22559                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22560                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 22561                                  	;mov	[cs:dos_segreinit+2],es
 22562                                  
 22563                                  ; ----------------------------------------------------------------------------
 22564                                  
 22565                                  ;SYSINIT:0577h:
 22566                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 22567                                  ;SYSINIT:05D1h:	; NoRPLArena 
 22568                                  
 22569                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 22570                                  ;------ Cover up RPL code with an arena
 22571                                  ;SYSINIT:05EBh:
 22572                                  	; 11/12/2022
 22573                                  	; ds = cs
 22574 0000058E 31DB                    	xor	bx,bx
 22575 00000590 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 22576                                  	;cmp	word [RPLMemTop],0
 22577                                  	;;cmp	word [cs:RPLMemTop],0
 22578 00000594 7450                    	je	short NoRPLArena
 22579                                  
 22580                                  ;------ alloc all memory
 22581                                  
 22582                                  	; 11/12/2022
 22583                                  	;mov	bx,0FFFFh
 22584 00000596 4B                      	dec	bx
 22585                                  	; bx = 0FFFFh
 22586 00000597 B448                    	mov	ah,48h
 22587 00000599 CD21                    	int	21h
 22588                                  			; DOS - 2+ - ALLOCATE MEMORY
 22589                                  			; BX = number of 16-byte paragraphs desired
 22590 0000059B B448                    	mov	ah,48h
 22591 0000059D CD21                    	int	21h
 22592                                  
 22593 0000059F 8EC0                    	mov	es,ax			; get it into ES and save it
 22594 000005A1 06                      	push	es
 22595                                  
 22596                                  ;------ resize upto RPL mem
 22597                                  
 22598                                  	; 11/12/2022
 22599                                  	; ds = cs
 22600                                  	;sub	ax,[cs:RPLMemTop]
 22601 000005A2 2B06[9402]              	sub	ax,[RPLMemTop]
 22602 000005A6 F7D8                    	neg	ax
 22603 000005A8 48                      	dec	ax
 22604 000005A9 89C3                    	mov	bx,ax
 22605 000005AB B44A                    	mov	ah,4Ah
 22606 000005AD CD21                    	int	21h
 22607                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 22608                                  			; ES = segment address of block to change
 22609                                  			; BX = new size in paragraphs
 22610                                  
 22611                                  ;------ allocate the free (RPL MEM)
 22612                                  
 22613 000005AF BBFFFF                  	mov	bx,0FFFFh
 22614 000005B2 B448                    	mov	ah,48h
 22615 000005B4 CD21                    	int	21h
 22616 000005B6 B448                    	mov	ah,48h
 22617 000005B8 CD21                    	int	21h
 22618                                  
 22619                                  ;----- mark that it belongs to RPL
 22620                                  
 22621 000005BA 48                      	dec	ax
 22622 000005BB 8EC0                    	mov	es,ax
 22623                                  	;mov	word [es:arena_owner],8
 22624 000005BD 26C70601000800          	mov	word [es:1],8
 22625                                  	;mov	word [es:arena_name],'RP'
 22626 000005C4 26C70608005250          	mov	word [es:8],'RP'
 22627                                  	;mov	word [es:arena_name+2],'L'
 22628 000005CB 26C7060A004C00          	mov	word [es:10],'L'
 22629                                  	;mov	word [es:arena_name+4],0
 22630 000005D2 26C7060C000000          	mov	word [es:12],0
 22631                                  	;mov	word [es:arena_name+6],0
 22632 000005D9 26C7060E000000          	mov	word [es:14],0	
 22633                                  
 22634 000005E0 07                              pop     es                      ; get back ptr to first block
 22635 000005E1 B449                            mov     ah,49h	; Dealloc	; and free it
 22636 000005E3 CD21                    	int	21h		
 22637                                  					; DOS - 2+ - FREE MEMORY
 22638                                  					; ES = segment address of area to be freed
 22639                                  	; 11/12/2022
 22640 000005E5 F8                      	clc
 22641                                  
 22642                                  ; ----------------------------------------------------------------------------
 22643                                  
 22644                                  NoRPLArena:
 22645                                  	; 11/12/2022
 22646                                  	; ds = cs
 22647                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 22648 000005E6 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 22649                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 22650                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 22651                                  
 22652                                  	; 11/12/2022
 22653                                  	;clc				; get the extended memory size
 22654                                  
 22655                                  ;	execute the get extended memory size subfunction in the bios int 15h
 22656                                  ;	if the function reports an error do nothing else store the extended
 22657                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 22658                                  ;	currently pointed to by es:di. use the offsets specified in the
 22659                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 22660                                  
 22661 000005EA B488                    	mov	ah,88h
 22662 000005EC CD15                    	int	15h			; check extended memory size
 22663 000005EE 720B                    	jc	short no_ext_memory
 22664                                  			; Get Extended Memory Size
 22665                                  			; Return: CF clear on success
 22666                                  			; AX = size of memory above 1M in K	
 22667                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 22668                                  	; 22/10/2022
 22669 000005F0 26894545                	mov	[es:di+45h],ax ; save extended memory size
 22670 000005F4 09C0                    	or	ax,ax
 22671 000005F6 7403                    	jz	short no_ext_memory
 22672 000005F8 E8E705                  	call	ClrVDISKHeader
 22673                                  no_ext_memory:
 22674                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 22675 000005FB 268B4510                	mov	ax,[es:di+10h]
 22676                                  	;add	ax,bufinsiz
 22677                                  	; 30/12/2023 - Retro DOS v5.0
 22678                                  	;add	ax,20		; size of buffer header
 22679 000005FF 83C018                  	add     ax,24		; bufinsiz
 22680                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 22681                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 22682                                  	; 11/12/2022
 22683                                  	; ds = cs
 22684 00000602 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 22685                                  	;mov	[cs:singlebuffersize],ax	
 22686                                  	; 11/12/2022
 22687 00000605 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 22688                                  	;mov	al,[cs:DEFAULT_DRIVE]
 22689                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 22690 00000608 26884543                	mov	[es:di+43h],al
 22691                                  
 22692                                  ; determine if 386 system...
 22693                                  
 22694                                  ; 30/12/2023
 22695                                  %if 0
 22696                                  	;get_cpu_type			; macro to determine cpu type
 22697                                  
 22698                                  get_cpu_type:
 22699                                  	; 11/12/2022
 22700                                  	pushf
 22701                                  	;push	bx
 22702                                  	;xor	bx,bx
 22703                                  	; 11/12/2022
 22704                                  	;xor	cx,cx
 22705                                  	;
 22706                                  	xor	ax,ax
 22707                                  	; ax = 0
 22708                                  	push    ax
 22709                                  	popf
 22710                                  	pushf
 22711                                  	pop	ax
 22712                                  	and	ax,0F000h
 22713                                  	;cmp	ax,0F000h
 22714                                  	cmp	ah,0F0h 
 22715                                  	je	short cpu_8086
 22716                                  	;mov	ax,0F000h
 22717                                  	mov	ah,0F0h
 22718                                  	; ax = 0F000h
 22719                                  	push	ax
 22720                                  	popf
 22721                                  	pushf
 22722                                  	pop	ax
 22723                                  	;and	ax,0F000h
 22724                                  	and	ah,0F0h
 22725                                  	jz	short cpu_286
 22726                                  cpu_386:
 22727                                  	; 11/12/2022
 22728                                  	;;inc	bx
 22729                                  	;inc	cx
 22730                                  	; 11/12/2022
 22731                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22732                                  	mov	byte [es:di+44h],1
 22733                                  
 22734                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 22735                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 22736                                  	;push	es
 22737                                  	;push	di
 22738                                  	;mov	ax,DOSBIODATASEG ; 0070h
 22739                                  	;mov	es,ax
 22740                                  	;cld
 22741                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 22742                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 22743                                  	;stosw
 22744                                  	;mov	ax,0F300h      ; repz  ; F3
 22745                                  	;stosw
 22746                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 22747                                  	;stosw
 22748                                  	;pop	di
 22749                                  	;pop	es
 22750                                  
 22751                                  cpu_286:
 22752                                  	;;;inc	bx
 22753                                  	;;inc	cx
 22754                                  cpu_8086:
 22755                                  	; 11/12/2022
 22756                                  	;;mov	ax,bx
 22757                                  	;pop	bx
 22758                                  	popf
 22759                                  %endif
 22760                                  	;...
 22761                                  
 22762                                  	; 11/12/2022
 22763                                  	;or	cl,cl
 22764                                  	;jz	short not_386_system
 22765                                  	; 11/12/202
 22766                                  	;cmp	cl,2
 22767                                  	;;cmp	ax,2			; is it a 386?
 22768                                  	;jne	short not_386_system	; no: don't mess with flag
 22769                                  
 22770                                  	; 30/12/2023 - Retro DOS v5.0
 22771 0000060C 803E[A506]02            	cmp	byte [cpu_type], 2	; is it a 386?
 22772 00000611 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 22773                                  	
 22774                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22775                                  	; 11/12/2022
 22776                                  	; 22/10/2022
 22777 00000613 26C6454401              	mov	byte [es:di+44h],1
 22778                                  _not_386_cpu:
 22779                                  	;mov	al,[es:di+SYSI_NUMIO]
 22780 00000618 268A4520                	mov	al,[es:di+20h]
 22781                                  	; 11/12/2022
 22782                                  	; ds = cs
 22783 0000061C A2[7E03]                	mov	[drivenumber],al	; save start of installable block drvs
 22784                                  	;mov	[cs:drivenumber],al
 22785                                  
 22786 0000061F 8CC8                    	mov	ax,cs
 22787 00000621 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 22788                                  	; 11/12/2022
 22789                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 22790                                  	;;mov	cx,[cs:singlebuffersize]
 22791                                  	;shr	cx,1			
 22792                                  	;shr	cx,1			; divide size by 16...
 22793                                  	;shr	cx,1
 22794                                  	;shr	cx,1			; ...to get paragraphs...
 22795                                  	;inc	cx			; ... and round up
 22796                                  	; 11/12/2022
 22797 00000624 8B1E[9B02]              	mov	bx,[singlebuffersize]
 22798 00000628 B104                    	mov	cl,4
 22799 0000062A D3EB                    	shr	bx,cl
 22800 0000062C 43                      	inc	bx
 22801                                  
 22802                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 22803                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 22804                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 22805                                  ;	  it is probably safe to assume that the sector size always will be.
 22806                                  ;
 22807                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 22808                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 22809                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 22810                                  ;	  other code from ever causing a problem???
 22811                                  
 22812                                  	; 11/12/2022
 22813 0000062D 29D8                    	sub	ax,bx
 22814                                  	;sub	ax,cx
 22815 0000062F A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 22816                                  	; 22/10/2022
 22817                                  	;mov	[cs:top_of_cdss],ax
 22818                                  
 22819                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 22820                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 22821                                  ;	for allocating memory for MagicDrv.
 22822                                  
 22823                                  	; 30/12/2023
 22824                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 22825                                  	;push	di
 22826                                  
 22827                                  	; 22/10/2022
 22828                                  ;	mov	cx,ax			; save pointer for buffer
 22829                                  ;
 22830                                  ;;	now allocate space for 26 CDSs
 22831                                  ;
 22832                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 22833                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22834                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22835                                  
 22836                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 22837                                  	; (SYSINIT:064Ch)
 22838 00000632 89C1                    	mov	cx,ax ; (*)
 22839 00000634 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 22840 00000637 A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22841 0000063A A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22842                                  	 	
 22843                                  ; setup and initialize the temporary buffer at cx
 22844                                  
 22845                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 22846 0000063D 26C47D12                	les	di,[es:di+12h]
 22847                                  	; 11/12/2022
 22848 00000641 31DB                    	xor	bx,bx
 22849                                  	;xor	ax,ax
 22850                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 22851                                  	;mov	word [es:di+4],0
 22852 00000643 26895D04                	mov	[es:di+4],bx ; 0
 22853                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 22854                                  	;mov	word [es:di],0
 22855 00000647 26891D                  	mov	[es:di],bx ; 0
 22856                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 22857                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 22858                                  	;mov	[es:di+2],ax
 22859                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 22860                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 22861 0000064A 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 22862 0000064E 8EC1                    	mov	es,cx
 22863                                  
 22864                                  	; 11/12/2022
 22865                                  	;xor	ax,ax
 22866                                  	;mov	di,ax			; es:di -> single buffer
 22867 00000650 89DF                    	mov	di,bx
 22868                                  	; di = 0
 22869                                  
 22870                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 22871                                  	; 11/12/2022
 22872                                  	;mov	[es:di],ax ; 0
 22873 00000652 26891D                  	mov	[es:di],bx ; 0
 22874                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 22875                                  	; 11/12/2022
 22876                                  	;mov	[es:di+2],ax ; 0
 22877 00000655 26895D02                	mov	[es:di+2],bx ; 0 
 22878                                  
 22879                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 22880                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 22881                                  
 22882                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 22883 00000659 26C74504FF00            	mov	word [es:di+4],00FFh
 22884                                  ;SYSINIT:06E6h
 22885                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 22886                                  	;mov	word [es:di+6],0
 22887                                  	; 11/12/2022
 22888                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 22889 0000065F 26895D06                	mov	[es:di+6],bx ; 0
 22890                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 22891                                  	;mov	word [es:di+8],0
 22892                                  	; 11/12/2022
 22893                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 22894 00000663 26895D08                	mov	[es:di+8],bx ; 0
 22895                                  
 22896                                  	; 30/12/2023 (!*)
 22897                                  	;pop	di			; restore pointer to DOSINFO data
 22898                                  	;pop	es
 22899                                  
 22900                                  	; 11/12/2022
 22901                                  	; ds = cs
 22902                                  	; 22/10/2022
 22903                                  	;push	cs
 22904                                  	;pop	ds
 22905                                  
 22906 00000667 E81F06                  	call	TempCDS			; set up cdss so re_init and sysinit
 22907                                  					;  can make disk system calls
 22908                                  					; tempcds trashes ds
 22909                                  	; 10/05/2019
 22910 0000066A 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 22911                                  
 22912                                  	;if not ibmjapver
 22913                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 22914                                  	;endif
 22915                                  
 22916                                  	; 22/10/2022
 22917                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 22918                                  	; 30/12/2022
 22919                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 22920                                  	;call	far ptr 70h:89Bh
 22921 0000066F 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 22922                                  
 22923 00000674 FB                      	sti				; ints ok
 22924 00000675 FC                      	cld				; make sure
 22925                                  
 22926                                  ; 23/03/2019
 22927                                  
 22928                                  ;SYSINIT:069Eh	; 30/12/2022
 22929                                  
 22930                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 22931                                  ; of the way by putting it just below sysinit at end of memory.
 22932                                  
 22933 00000676 8CCB                    	mov	bx,cs
 22934 00000678 83EB10                  	sub	bx,10h
 22935 0000067B 8EC3                    	mov	es,bx
 22936 0000067D 31F6                    	xor	si,si
 22937 0000067F 89F7                    	mov	di,si
 22938 00000681 B98000                  	mov	cx,128
 22939 00000684 F3A5                    	rep	movsw
 22940                                  
 22941                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 22942                                  	; 22/10/2022
 22943 00000686 268C063600              	mov	[es:36h],es
 22944                                  
 22945                                   	; Set Process Data Block - Program Segment Prefix address
 22946                                  	; BX = PDB/PSP segment
 22947 0000068B B450                            mov	ah,50h	; SET_CURRENT_PDB
 22948 0000068D CD21                    	int	21h			; tell DOS we moved it
 22949                                  			; DOS - 2+ internal - SET PSP SEGMENT
 22950                                  			; BX = segment address of new PSP
 22951                                  	; 22/10/2022
 22952                                  	; 27/03/2019
 22953                                  	; 30/12/2023
 22954                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 22955                                  
 22956 0000068F 0E                      	push	cs	
 22957 00000690 1F                      	pop	ds
 22958                                  
 22959                                  	; set up temp. critical error handler
 22960 00000691 BA[1844]                	mov	dx,int24		; set up int 24 handler
 22961                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 22962                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 22963 00000694 B82425                  	mov	ax,2524h
 22964 00000697 CD21                    	int	21h
 22965                                  
 22966 00000699 803E[8103]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 22967 0000069E 7406                            je      short no_err		   ;  N: continue            M029
 22968 000006A0 BA[2A4D]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 22969                                          ; 22/10/2022
 22970                                  	;call	print 			   ;		             M029
 22971                                  	; 12/12/2022
 22972 000006A3 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 22973                                  
 22974                                  	; 30/12/2023 - Retro DOS v5.0
 22975                                  cpu_type:
 22976 000006A5 FF                      	db 0FFh	; db 0
 22977                                  
 22978                                  no_err:
 22979                                  	; 12/05/2019
 22980                                  	;----------------------------------------------
 22981                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 22982                                  	; 22/10/2022 - Retro DOS v4.0
 22983                                  	; 12/12/2022
 22984                                  	; 30/12/2023 - Retro DOS v5.0
 22985 000006A6 BA[1C44]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 22986                                  p_dosinit_msg:
 22987 000006A9 E8473D                  	call	print			; Print message
 22988                                  	;----------------------------------------------
 22989                                  	
 22990                                  	; 11/12/2022
 22991                                  	; 22/10/2022
 22992                                  	; 23/03/2019 - Retro DOS v4.0
 22993                                  	;pop	ds			; start of free memory
 22994                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 22995                                  	
 22996                                  	; 11/12/2022
 22997                                  	; 27/03/2019
 22998 000006AC 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 22999                                  	; 30/12/2023
 23000                                  	;pop	ds ; */
 23001                                  
 23002 000006B0 08D2                    	or	dl,dl
 23003                                  	; 30/12/2023
 23004 000006B2 7405                    	jz	short nodrvset		; bios didn't say
 23005                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 23006                                  	;dec	dl			; A = 0
 23007                                  	; 18/12/2022
 23008 000006B4 4A                      	dec	dx
 23009 000006B5 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 23010 000006B7 CD21                    	int	21h			; select the disk
 23011                                  			; DOS - SELECT DISK
 23012                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 23013                                  			; Return: AL = number of logical drives
 23014                                  nodrvset:
 23015                                  	; ---------------------
 23016                                  
 23017                                  	;ifdef	dblspace_hooks
 23018                                  	;	....
 23019                                  	;	....
 23020                                  	;endif
 23021                                  
 23022                                  	; ---------------------
 23023                                  
 23024                                  ; ----------------------------------------------------------------------------
 23025                                  
 23026                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 23027                                  
 23028                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 23029                                  ; ----------------------------------------------------------------------------
 23030                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23031                                  ; ----------------------------------------------------------------------------
 23032                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 23033                                  ; ----------------------------------------------------------------------------
 23034                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 23035                                  
 23036                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 23037                                  
 23038                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 23039                                  
 23040                                  ProcessConfig:
 23041                                  	;; ds = cs ; 27/03/2019
 23042                                  	; 11/12/2022
 23043                                  	; ds <> cs	
 23044                                  
 23045                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 23046                                  
 23047 000006B9 E80619                  	call	doconf			; do pre-scan for dos=high/low
 23048                                  
 23049                                  	; 11/12/2022
 23050                                  	; 27/03/2019
 23051                                  	; ds = cs (at return from doconf)
 23052                                  
 23053                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 23054                                  ; It will either be relocated to low memory, above the DOS data structures,
 23055                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 23056                                  ; code entry points will be located in low memory. Dos_segreinit is used
 23057                                  ; to tell the DOS data where the code has been placed, and to install the
 23058                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 23059                                  ; must first initialize it in its present location and load the installable
 23060                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 23061                                  ; relocate the DOS code into HiMem.
 23062                                  ;
 23063                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 23064                                  ; to install the low memory stub (this must be done before allowing any
 23065                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 23066                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 23067                                  ; been patched.
 23068                                  
 23069                                  	; 22/10/2022 - Retro DOS v4.0
 23070                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 23071                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 23072                                  	; 11/12/2022
 23073 000006BC 803E[6C02]00            	cmp	byte [runhigh],0
 23074 000006C1 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 23075                                  
 23076                                  ;------ user chose to load high
 23077                                  
 23078                                  	; 22/10/2022
 23079                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 23080                                  	; 11/12/2022
 23081                                  	; ds = cs
 23082                                  ; 13/04/2024
 23083                                  %if 0
 23084                                  	mov	es,[CURRENT_DOS_LOCATION]
 23085                                  %endif
 23086                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 23087                                  	; 27/03/2019
 23088                                  	;;mov	es,[FINAL_DOS_LOCATION]
 23089                                  
 23090 000006C3 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 23091                                  
 23092                                  ; 13/04/2024
 23093                                  %if 0	
 23094                                  	; 11/12/2022
 23095                                  	; ds = cs
 23096                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23097                                  	call	far [dos_segreinit]
 23098                                  %endif
 23099 000006C5 EB08                    	jmp	short do_multi_pass
 23100                                  
 23101                                  ;------ User chose to load dos low
 23102                                  
 23103                                  dont_install_stub:
 23104                                  	; 22/10/2022
 23105 000006C7 31DB                    	xor	bx,bx			; M012
 23106                                  					; don't use int 21 call to alloc mem
 23107 000006C9 E8E102                  	call	MovDOSLo		; move it !
 23108                                  
 23109 000006CC B80100                  	mov	ax,1			; dont install stub
 23110                                  
 23111                                  ; 13/04/2024
 23112                                  %if 1
 23113                                  do_multi_pass:
 23114                                  %endif
 23115                                  	; 11/12/2022
 23116                                  	; ds = cs
 23117 000006CF 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23118                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 23119                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23120                                  	; 27/03/2019
 23121                                  ;do_multi_pass:
 23122                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 23123                                  
 23124                                  	; 11/12/2022
 23125                                  	; ds =cs
 23126                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 23127 000006D3 FF1E[7D02]              	call	far [dos_segreinit]
 23128                                  
 23129                                  ; 13/04/2024
 23130                                  %if 0
 23131                                  do_multi_pass:
 23132                                  %endif
 23133                                  
 23134 000006D7 E81D02                  	call	AllocFreeMem		; allocate all the free mem
 23135                                  					; & update [memhi] & [area]
 23136                                  					; start of free memory.
 23137                                  	;ifdef	dblspace_hooks
 23138                                  	;mov	bx,0			; magic backdoor to place int hooks
 23139                                  	;call	cs:MagicBackdoor
 23140                                  	;endif
 23141                                  
 23142                                  ; 07/03/2025
 23143                                  %if 0
 23144                                  	; 07/04/2024 - Retro DOS v5.0
 23145                                  	; (PCDOS 7.1 IBMBIO.COM)
 23146                                  	;cmp	byte [cs:F5_key],1
 23147                                  	cmp	byte [F5_key],1
 23148                                  	je	short skip_magicbackdoor
 23149                                  	;cmp	byte [cs:F8_key],1
 23150                                  	cmp	byte [F8_key],1
 23151                                  	je	short skip_magicbackdoor
 23152                                  	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 23153                                  	;call	far [cs:MagicBackdoor]
 23154                                  	call	far [MagicBackdoor]
 23155                                  
 23156                                  skip_magicbackdoor:
 23157                                  %endif
 23158                                  
 23159                                  ; Now, process config.sys some more.  
 23160                                  ; Load the device drivers and install programs
 23161                                  
 23162                                  	; 22/10/2022
 23163                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 23164                                  	; 11/12/2022
 23165                                  	; ds = cs
 23166 000006DA FE06[CB02]              	inc	byte [multi_pass_id]
 23167 000006DE E87D19                  	call	multi_pass		; load device drivers
 23168 000006E1 E8EC2C                  	call	ShrinkUMB
 23169 000006E4 E8102D                  	call	UnlinkUMB		; unlink all UMBs	;M002
 23170                                  	; 02/11/2022
 23171                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 23172                                  	; 11/12/2022
 23173                                  	; ds = cs
 23174 000006E7 FE06[CB02]              	inc	byte [multi_pass_id]
 23175 000006EB E87019                  	call	multi_pass		; was load ifs (now does nothing)
 23176                                  
 23177                                  	;ifdef	dblspace_hooks
 23178                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 23179                                  	;endif
 23180                                  
 23181                                  	; ds = cs
 23182                                  
 23183                                  	; 07/04/2024
 23184                                  	;call	endfile			; setup fcbs, files, buffers etc
 23185                                  
 23186                                  	;ifdef	dblspace_hooks
 23187                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 23188                                  	;endif
 23189                                  
 23190                                  ; 07/03/2025
 23191                                  %if 0
 23192                                  	; 07/04/2024 - Retro DOS v5.0
 23193                                  	; (PCDOS 7.1 IBMBIO.COM)
 23194                                  	;cmp	byte [cs:F5_key],1
 23195                                  	cmp	byte [F5_key],1
 23196                                  	je	short skip_magicpostload
 23197                                  	;cmp	byte [cs:F8_key],1
 23198                                  	cmp	byte [F8_key],1
 23199                                  	je	short skip_magicpostload
 23200                                  	call	MagicPostload		; make sure Magicdrv is final placed
 23201                                  	; 13/04/2024
 23202                                  	; ds = cs
 23203                                  	call	endfile			; setup fcbs, files, buffers etc
 23204                                  	call	MagicSetCdss		; disable CDSs of reserved drives
 23205                                  	; ds = cs
 23206                                  	jmp	short _@_
 23207                                  
 23208                                  skip_magicpostload:
 23209                                  %endif
 23210                                  
 23211                                  	; 13/04/2024
 23212                                  	; ds = cs
 23213 000006EE E83606                  	call	endfile			; setup fcbs, files, buffers etc
 23214                                  _@_:
 23215                                  
 23216                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 23217                                  ;to device drivers. This has been moved up to this point to avoid problems 
 23218                                  ;with overlays called from installed programs
 23219                                  
 23220                                  	; 11/12/2022
 23221                                  	; ds = cs
 23222                                  
 23223                                  	;;mov	ax,Bios_Data ; 0070h
 23224                                  	;mov	ax,KERNEL_SEGMENT
 23225                                  	; 21/10/2022
 23226 000006F1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23227 000006F4 8EC0                    	mov	es,ax			; point ES to bios data
 23228                                  
 23229 000006F6 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 23230                                  
 23231                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23232                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 23233                                  	;test	byte [cs:install_flag],1
 23234                                  	; 11/12/2022
 23235                                  	; ds = cs
 23236 000006FC F606[CC02]01            	test	byte [install_flag],1
 23237                                  	;test	byte [cs:install_flag],have_install_cmd
 23238                                  					; are there install commands?
 23239 00000701 7407                    	jz	short dolast		; no, no need for further processing
 23240                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 23241                                  	; 11/12/2022
 23242                                  	; ds =cs
 23243 00000703 FE06[CB02]              	inc	byte [multi_pass_id]
 23244 00000707 E85419                  	call	multi_pass		; execute install= commands
 23245                                  
 23246                                  dolast:
 23247                                  	
 23248                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 23249                                  ;  free the confbot area used for config.sys and sysinit itself.
 23250                                  
 23251                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 23252                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 23253                                  ; anything, but just set up the ROM area for suballocation (or print
 23254                                  ; a message if HiMem is not available).
 23255                                  ;
 23256                                  ; There is also this little hack for CPM style DOS calls that needs to
 23257                                  ; be done when A20 is set...
 23258                                  
 23259                                  	; 11/12/2022
 23260                                  	; ds = cs
 23261                                  
 23262                                  	; 22/10/2022
 23263                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 23264                                  	; 11/12/2022
 23265 0000070A 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 23266 0000070F 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 23267 00000711 E84802                  	call	LoadDOSHiOrLo
 23268                                  _@@_:
 23269                                  	;cmp	byte [cs:runhigh],0	; are we running low
 23270                                  	; 11/12/2022
 23271                                  	; ds = cs
 23272 00000714 803E[6C02]00            	cmp	byte [runhigh],0
 23273                                  	;je	short _@@@
 23274 00000719 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 23275 0000071B E84C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 23276                                  _@@@:
 23277                                  
 23278                                  ; We are now done with CONFIG.SYS processing
 23279                                  
 23280                                  ConfigDone:
 23281                                  	; 12/12/2022
 23282                                  	; 22/10/2022
 23283                                  	;mov	byte [cs:donotshownum],1 
 23284                                  					; done with config.sys.
 23285                                  					; do not show line number message.
 23286                                  	;mov	es,[cs:area]
 23287                                  	; 12/12/2022
 23288                                  	; ds = cs
 23289                                  	; 27/03/2019
 23290 0000071E C606[5303]01            	mov	byte [donotshownum],1
 23291 00000723 8E06[6603]              	mov	es,[area]
 23292                                  
 23293 00000727 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 23294 00000729 CD21                    	int	21h
 23295                                  			; DOS - 2+ - FREE MEMORY
 23296                                  			; ES = segment address of area to be freed
 23297                                  
 23298                                  	; 22/10/2022
 23299                                  	;test	word [cs:install_flag],2
 23300                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 23301                                  	;test	byte [cs:install_flag],has_installed
 23302                                  	; 11/12/2022
 23303                                  	; ds = cs
 23304 0000072B F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 23305                                  	;test	byte [install_flag],has_installed
 23306 00000730 741F                    	jz	short skip_free_sysinitbase ; no.
 23307                                  
 23308                                  ; set block from the old_area with impossible_owner_size.
 23309                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 23310                                  ; handle install= command.
 23311                                  
 23312                                  	; 12/12/2022
 23313                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23314                                  	;push	bx
 23315                                  	
 23316                                  	; 22/10/2022
 23317                                  	;mov	es,[cs:old_area]
 23318                                  	;mov	bx,[cs:impossible_owner_size]
 23319                                  	; 12/12/2022
 23320                                  	; ds = cs
 23321 00000732 8E06[5C03]              	mov	es,[old_area]
 23322 00000736 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 23323                                  	
 23324 0000073A B44A                    	mov	ah,4Ah ; SETBLOCK
 23325 0000073C CD21                    	int	21h
 23326                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23327                                  			; ES = segment address of block to change
 23328                                  			; BX = new size in paragraphs
 23329 0000073E 8CC0                    	mov	ax,es
 23330 00000740 48                      	dec	ax
 23331 00000741 8EC0                    	mov	es,ax			; point to arena
 23332                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 23333 00000743 26C70601000800          	mov	word [es:1],8
 23334                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 23335 0000074A 26C70608005344          	mov	word [es:8],'SD'
 23336                                  	
 23337                                  	; 12/12/2022
 23338                                  	;pop	bx
 23339                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23340                                  
 23341                                  skip_free_sysinitbase:
 23342                                  	; 22/10/2022
 23343                                  	;cmp	byte [cs:runhigh],0
 23344                                  	; 12/12/2022
 23345                                  	; ds = cs
 23346 00000751 803E[6C02]00            	cmp	byte [runhigh],0	
 23347 00000756 7403                    	je	short _@@@_ ; 04/07/2023
 23348                                  
 23349 00000758 E8DF03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 23350                                  
 23351                                  ; ----------------------------------------------------------------------------
 23352                                  
 23353                                  _@@@_:
 23354                                  	; 12/12/2022
 23355                                  	; ds = cs
 23356                                  	; 22/10/2022
 23357                                  	; 27/03/2019
 23358                                  	;push	cs
 23359                                  	;pop	ds			; point DS to sysinitseg
 23360                                  
 23361                                  ; set up the parameters for command
 23362                                  
 23363                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23364                                  ;;ifdef	MULTI_CONFIG
 23365                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 23366                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 23367                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 23368                                  ;	; !!!
 23369                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23370                                  ;       ; !!!
 23371                                  ;	call    disable_autoexec        ; no, we should disable it
 23372                                  ;process_autoexec:
 23373                                  ;;endif	; !!!
 23374                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23375                                  ;	; !!!
 23376                                  
 23377                                  	; 22/10/2022 
 23378                                  	;mov     cl,[command_line]
 23379                                          ;mov     ch,0
 23380                                          ;inc     cx
 23381                                          ;mov     si,command_line	
 23382                                  	;add     si,cx
 23383                                          ;mov     byte [si],cr	; cr-terminate command line
 23384                                  
 23385                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23386                                  	; (SYSINIT:0809h)
 23387                                  
 23388                                  	;;;;
 23389                                  
 23390                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23391                                  	; (SYSINIT:0813h)
 23392                                  	; ds = cs
 23393                                  	; push	cs
 23394                                  	; pop	ds
 23395                                  
 23396 0000075B C606[DC14]00            	mov	byte [config_cmd],0	; set special code for query_user
 23397 00000760 E85838                  	call    query_user		; to issue the AUTOEXEC prompt
 23398                                  	; 07/04/2024
 23399                                  	;jnc	short process_autoexec	; we should process autoexec normally
 23400                                  
 23401                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23402                                  	;;;
 23403 00000763 9C                      	pushf
 23404 00000764 F606[2046]01            	test	byte [bDisableUI],1
 23405 00000769 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 23406 0000076B 803E[8603]01            	cmp	byte [F5_key],1
 23407 00000770 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 23408                                  _@@@@_:
 23409 00000772 9D                      	popf
 23410 00000773 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 23411 00000775 EB01                    	jmp	short bypass_autoexec
 23412                                  _@@@@@_:
 23413 00000777 9D                      	popf			; cf status at the return from 'query_user' call
 23414                                  bypass_autoexec:
 23415                                  	;;;
 23416                                  
 23417                                  	; !!!
 23418 00000778 800E[2446]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23419                                  	; !!!
 23420 0000077D E83639                  	call    disable_autoexec        ; no, we should disable it
 23421                                  process_autoexec:
 23422                                  	; !!!
 23423 00000780 E87E39                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23424                                  
 23425                                  	;mov     cl,[command_line]
 23426                                  	; 30/12/2022
 23427 00000783 BE[5A45]                	mov	si,command_line
 23428 00000786 8A0C                    	mov	cl,[si]
 23429 00000788 B500                    	mov     ch,0
 23430 0000078A 41                      	inc     cx
 23431                                  	;mov	si,command_line
 23432 0000078B 01CE                    	add     si,cx
 23433 0000078D C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 23434                                  	
 23435                                  	;;;;		
 23436                                  
 23437                                  ; 30/12/2022 - Retro DOS v4.2
 23438                                  %if 0
 23439                                  	;mov	si,(offset command_line+1)
 23440                                  	mov	si,command_line+1
 23441                                  	push    ds
 23442                                  	pop     es
 23443                                  	mov     di,si
 23444                                  	mov     cl,0FFh ; -1
 23445                                  _@_loop:
 23446                                  	inc     cl ; +1
 23447                                  	lodsb
 23448                                  	stosb
 23449                                  	or      al,al
 23450                                  	jnz     short _@_loop
 23451                                  	dec     di
 23452                                  	mov     al,0Dh
 23453                                  	stosb			; cr-terminate command line
 23454                                  	mov     [command_line],cl ; command line length (except CR)
 23455                                  %endif
 23456                                  
 23457                                  ; ----------------------------------------------------------------------------
 23458                                  
 23459                                  ;   Once we get to this point, the above code, which is below "retry"
 23460                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 23461                                  ;   which follow....)
 23462                                  
 23463                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 23464 00000790 BA[CC44]                	mov	dx,commnd	; now pointing to file description
 23465                                  
 23466                                  ; we are going to open the command interpreter and size it as is done in
 23467                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 23468                                  ; there is not enough room for the command interpreter,exec will probably
 23469                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 23470                                  ; here to catch it. this code is not perfect (for instance .exe command
 23471                                  ; interpreters are possible) because it does its sizing based on the
 23472                                  ; assumption that the file being loaded is a .com file. it is close enough to
 23473                                  ; correctness to be usable.
 23474                                  
 23475                                  ; first, find out where the command interpreter is going to go.
 23476                                  
 23477 00000793 52                      	push	dx		; save pointer to name
 23478 00000794 BBFFFF                  	mov	bx,0FFFFh
 23479 00000797 B448                    	mov	ah,48h	; ALLOC
 23480 00000799 CD21                            int     21h             ; get biggest piece
 23481 0000079B B448                    	mov	ah,48h	; ALLOC
 23482 0000079D CD21                    	int	21h		; second time gets it
 23483 0000079F 726B                    	jc	short memerrjx	; oooops
 23484                                  
 23485 000007A1 8EC0                    	mov	es,ax
 23486 000007A3 B449                    	mov	ah,49h	; DEALLOC
 23487 000007A5 CD21                    	int	21h		; give it right back
 23488 000007A7 89DD                    	mov	bp,bx
 23489                                  
 23490                                  ; es:0 points to block,and bp is the size of the block in para.
 23491                                  
 23492                                  ; we will now adjust the size in bp down by the size of sysinit.
 23493                                  ; we need to do this because exec might get upset if some of the exec
 23494                                  ; data in sysinit is overlayed during the exec.
 23495                                  
 23496                                  	; 22/10/2022
 23497                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 23498 000007A9 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 23499 000007AD 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 23500                                  
 23501                                  ; Note that the "config_wrkseg" environment data is a segment in
 23502                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 23503                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 23504                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 23505                                  ; we need to make sure that there's no way Exec will stomp on that data
 23506                                  ; before it can copy it, and one way to do that is to make the available
 23507                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 23508                                  ; from the "memory_size" segment value (which is typically A000h) instead
 23509                                  ; of the current sysinit CS....
 23510                                  ;
 23511                                  ; The reason I use the term "paranoid" is because this code should have
 23512                                  ; slid the data required by Exec up to the very top of memory, because as
 23513                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 23514                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 23515                                  ; consumes). Now it's just a little worse (65K or more, depending on
 23516                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 23517                                  ; is determined by the size of CONFIG.SYS.... -JTP
 23518                                  
 23519                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 23520                                  	; (SYSINIT:0858h)
 23521 000007AF 8B0E[D814]              	mov	cx,[config_envlen]
 23522 000007B3 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 23523 000007B5 A1[DA14]                        mov	ax,[config_wrkseg]	
 23524                                  
 23525                                  	; 22/10/2022
 23526                                  	;mov	cx,[config_envlen]
 23527                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 23528                                          ;mov	ax,[config_wrkseg]
 23529                                  ;no_env:
 23530                                  	; 22/10/2022
 23531                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 23532                                  no_env:
 23533                                  	; 30/12/2022
 23534                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 23535 000007B8 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 23536 000007BA 83C311                  	add	bx,11h		; add the sysinit php
 23537 000007BD 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 23538 000007BF 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 23539                                  
 23540                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 23541 000007C1 B8003D                          mov	ax,3D00h
 23542 000007C4 F9                      	stc                     ; in case of int 24
 23543 000007C5 CD21                    	int	21h
 23544 000007C7 7271                    	jc	short comerr	; ooops
 23545                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 23546                                  			; DS:DX -> ASCIZ filename
 23547                                  			; AL = access mode
 23548                                  			; 0 - read
 23549                                  	; 22/10/2022
 23550                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 23551 000007C9 89C3                            mov     bx,ax           ; handle in bx
 23552                                  
 23553                                  ;   If the standard command interpreter is being used, verify it is correct
 23554                                  
 23555                                  	; 30/12/2022 - Retro DOS v4.2
 23556                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 23557 000007CB 803E[C944]00            	cmp	byte [newcmd],0	; was a new shell selected?
 23558 000007D0 7518                    	jne	short skip_validation ; yes
 23559                                  	; 07/04/2024 - Retro DOS v5.0
 23560                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 23561 000007D2 BA[8C07]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 23562 000007D5 B90400                  	mov	cx,4		;
 23563 000007D8 B43F                    	mov	ah,READ		;
 23564 000007DA CD21                    	int	21h		;
 23565 000007DC 803E[8C07]E9            	cmp	byte [retry-4],0E9h
 23566 000007E1 7557                    	jne	short comerr
 23567                                  	; 20/04/2019 - Retro DOS v4.0
 23568                                  	; 30/12/2022 
 23569                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23570                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 23571                                  	; 07/04/2024 - Retro DOS v5.0
 23572                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 23573                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 23574                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 23575 000007E3 803E[8F07]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23576 000007E8 7550                    	jne	short comerr	;
 23577                                  
 23578                                  	; 22/10/2022
 23579                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 23580                                  	;jne	short skip_validation ; yes
 23581                                  	;mov	dx,retry-4
 23582                                  	;mov	cx,4		;
 23583                                  	;mov	ah,READ		;
 23584                                  	;int	21h		;
 23585                                  	;cmp	byte [retry-4],0E9h
 23586                                  	;jne	short comerr
 23587                                  	;; 20/04/2019 - Retro DOS v4.0
 23588                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23589                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23590                                  	;jne	short comerr	;
 23591                                  
 23592                                  ;skip_validation:
 23593                                  	; 22/10/2022
 23594                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 23595                                  skip_validation:
 23596                                  	; 30/12/2022
 23597                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 23598 000007EA 31C9                    	xor	cx,cx
 23599 000007EC 31D2                    	xor	dx,dx
 23600                                  	;mov	ax,(LSEEK<<8)|2
 23601 000007EE B80242                  	mov	ax,4202h
 23602 000007F1 F9                      	stc			; in case of int 24
 23603 000007F2 CD21                    	int	21h		; get file size in dx:ax
 23604 000007F4 7244                    	jc	short comerr
 23605                                  				; convert size in dx:ax to para in ax
 23606 000007F6 83C00F                  	add	ax,15		; round up size for conversion to para
 23607 000007F9 83D200                  	adc	dx,0
 23608 000007FC E88104                  	call	off_to_para
 23609 000007FF B10C                    	mov	cl,12
 23610 00000801 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 23611 00000803 09D0                    	or	ax,dx		; ax is now # of para for file
 23612 00000805 83C010                  	add	ax,10h		; 100h byte php
 23613 00000808 39E8                    	cmp	ax,bp		; will command fit in available mem?
 23614 0000080A 7208                    	jb	short okld	; jump if yes.
 23615                                  
 23616                                  ; 30/12/2022
 23617                                  %if 0
 23618                                  	; 22/10/2022
 23619                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 23620                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 23621                                  	; 02/11/2022
 23622                                  	;jmp	mem_err
 23623                                  	; 11/12/2022
 23624                                  	; ds = cs
 23625                                  	jmp	mem_err2
 23626                                  %endif
 23627                                  	; 30/12/2022
 23628                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 23629                                  memerrjx:
 23630 0000080C BA[D54A]                	mov	dx,badmem 	; "Configuration too large for memory"
 23631 0000080F E8E13B                  	call	print
 23632 00000812 EB3A                    	jmp     short continue
 23633                                  
 23634                                  okld:
 23635 00000814 B43E                    	mov	ah,3Eh ; CLOSE
 23636 00000816 CD21                    	int	21h		; close file
 23637                                  
 23638                                  	; 22/10/2022
 23639 00000818 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 23640                                  
 23641                                  	; 24/03/2019
 23642                                  
 23643 00000819 0E                      	push	cs		; point es to sysinitseg
 23644 0000081A 07                      	pop	es
 23645 0000081B BB[BD02]                        mov     bx,COMEXE	; point to exec block
 23646                                  	; 22/10/2022
 23647                                  	;pop	dx              ; recover pointer to name
 23648                                  
 23649                                  ;;ifdef	MULTI_CONFIG
 23650                                  
 23651                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 23652                                  ;   there will be data if there were any valid SET commands and/or if a menu
 23653                                  ;   selection was made (in which case the CONFIG environment variable will be
 23654                                  ;   set to that selection).
 23655                                  
 23656                                  	; 23/10/2022
 23657                                  	;mov	cx,[config_envlen]
 23658                                  	;jcxz	no_envdata
 23659                                          ;mov	cx,[config_wrkseg]
 23660                                  ;no_envdata:
 23661                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 23662                                  	;mov	[bx],cx
 23663                                  
 23664                                  ;;endif	;MULTI_CONFIG
 23665                                  
 23666                                  	; 30/12/2022 - Retro DOS v4.2
 23667                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 23668 0000081E 8B0E[D814]              	mov	cx,[config_envlen]
 23669 00000822 E304                    	jcxz	no_envdata
 23670 00000824 8B0E[DA14]                      mov	cx,[config_wrkseg]
 23671                                  no_envdata:
 23672                                  	;mov	[bx+EXEC0.ENVIRON],cx
 23673 00000828 890F                    	mov	[bx],cx	
 23674                                  	
 23675                                  	; 23/10/2022
 23676                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 23677                                  
 23678                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 23679 0000082A 8C4F04                  	mov	[bx+4],cs
 23680                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 23681 0000082D 8C4F08                  	mov	[bx+8],cs
 23682                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 23683 00000830 8C4F0C                  	mov	[bx+12],cs
 23684                                  
 23685                                  	;mov	ax,(EXEC<<8) + 0
 23686                                  	; 23/10/2022
 23687                                  	;xor	ax,ax
 23688                                  	;mov	ah,4Bh
 23689                                  	; 04/07/2023
 23690                                  	;mov	ax,4B00h
 23691 00000833 B8004B                  	mov	ax,(EXEC<<8)
 23692                                  
 23693 00000836 F9                      	stc                     ; in case of int 24
 23694 00000837 CD21                            int     21h             ; go start up command
 23695                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 23696                                  			; DS:DX -> ASCIZ filename
 23697                                  			; ES:BX -> parameter block
 23698                                  			; AL = subfunc: load & execute program
 23699                                  	;push	cs
 23700                                  	;pop	ds
 23701                                  
 23702                                  	; 13/04/2024
 23703                                  	; 23/10/2022
 23704 00000839 52                      	push	dx		; push to balance fall-through pop
 23705                                  
 23706                                  ; note fall through if exec returns (an error)
 23707                                  comerr:
 23708                                  	; 23/10/2022
 23709                                  ;;ifdef	MULTI_CONFIG
 23710                                  	;cmp	byte [commnd4],0
 23711                                  	;je	short comerr2	; all defaults exhausted, print err msg
 23712                                  	;cmp	byte [newcmd],0
 23713                                  	;je	short continue	; don't print err msg for defaults just yet
 23714                                  ;comerr2:
 23715                                  ;;endif
 23716                                  
 23717                                  	; 30/12/2022 - Retro DOS v4.2
 23718                                  	;push	cs
 23719                                  	;pop	ds
 23720                                  	; 07/04/2024
 23721                                  	; ds = cs
 23722                                  
 23723 0000083A 803E[3D45]00            	cmp	byte [commnd4],0
 23724 0000083F 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 23725 00000841 803E[C944]00            	cmp	byte [newcmd],0
 23726 00000846 7406                    	je	short continue	; don't print err msg for defaults just yet
 23727                                  comerr2:
 23728                                  	; 07/04/2024
 23729                                  	;push	dx ; 30/12/2022
 23730                                  
 23731                                  	; 23/10/2022
 23732 00000848 BA[514A]                        mov     dx,badcom	; want to print command error
 23733 0000084B E8793B                  	call	badfil
 23734                                  	
 23735                                  	; 07/04/2024
 23736                                  	;pop	dx  ; 30/12/2022
 23737                                  continue:
 23738                                  	; 13/04/2024
 23739                                  	; 23/10/2022
 23740 0000084E 5A                      	pop	dx
 23741                                  
 23742                                  ; 30/12/2022
 23743                                  %if 0
 23744                                  
 23745                                  ;;ifndef MULTI_CONFIG
 23746                                  	;jmp	stall
 23747                                  	; 24/10/2022
 23748                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 23749                                  	jmp	short stall
 23750                                  ;;else
 23751                                  
 23752                                  %endif
 23753                                  	
 23754                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 23755                                  ;%if 1
 23756                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 23757                                  ;%if 0	
 23758 0000084F B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 23759 00000851 CD21                    	int	21h             ;
 23760 00000853 0441                    	add	al,'A'          ;
 23761 00000855 88C2                    	mov	dl,al           ; DL == default drive letter
 23762 00000857 BE[0C45]                	mov	si,commnd2
 23763 0000085A 803E[C944]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 23764 0000085F 7505                    	jne	short do_def2	; then try the 2nd alternate;
 23765 00000861 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 23766 00000864 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 23767                                  do_def2:			
 23768 00000866 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 23769 00000869 7554                            jne	short do_alt    ; no
 23770                                  do_def3:
 23771 0000086B BE[1D45]                	mov	si,commnd3
 23772 0000086E 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 23773 00000871 754C                    	jne	short do_alt	; no
 23774 00000873 BE[3D45]                	mov	si,commnd4
 23775 00000876 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 23776 00000879 7544                    	jne	short do_alt	; no
 23777 0000087B 52                      	push	dx              ;
 23778 0000087C BA[C44C]                	mov	dx,badcomprmpt
 23779 0000087F E8713B                  	call	print		;
 23780 00000882 5A                      	pop	dx              ; recover default drive letter in DL
 23781                                  request_input:			;
 23782 00000883 B402                    	mov	ah,STD_CON_OUTPUT
 23783 00000885 CD21                    	int	21h             ;
 23784 00000887 52                      	push	dx              ;
 23785 00000888 B23E                    	mov	dl,'>'          ;
 23786 0000088A CD21                    	int	21h             ;
 23787 0000088C 8A1E[CB44]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 23788 00000890 B700                    	mov	bh,0            ;
 23789 00000892 C687[CC44]0D            	mov	byte [commnd+bx],0Dh
 23790 00000897 BA[CA44]                	mov	dx,tmplate
 23791 0000089A B40A                    	mov	ah,STD_CON_STRING_INPUT
 23792 0000089C CD21                    	int	21h             ; read a line of input
 23793 0000089E BA[FC49]                	mov	dx,crlfm	;
 23794 000008A1 E84F3B                  	call	print           ;
 23795 000008A4 5A                      	pop	dx              ;
 23796 000008A5 8A1E[CB44]              	mov	bl,[tmplate+1]	;
 23797 000008A9 08DB                    	or	bl,bl           ; was anything typed?
 23798 000008AB 74D6                    	jz	short request_input ;
 23799 000008AD C606[C944]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 23800 000008B2 C687[CC44]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 23801 000008B7 C706[5A45]000D          	mov	word [command_line],0D00h
 23802 000008BD EB35                    	jmp	short do_exec   ;
 23803                                  do_alt:
 23804 000008BF 1E                      	push	ds
 23805 000008C0 07                      	pop	es
 23806 000008C1 C606[C944]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 23807 000008C6 BF[CC44]                	mov	di,commnd	;
 23808                                  do_alt1:
 23809 000008C9 AC                      	lodsb			; copy the alternate, zapping it as we go,
 23810 000008CA C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 23811 000008CE AA                      	stosb 			;
 23812 000008CF 08C0                    	or	al,al		;
 23813 000008D1 75F6                    	jnz	short do_alt1	;
 23814 000008D3 BF[5A45]                	mov	di,command_line
 23815 000008D6 807C023A                	cmp	byte [si+2],':'
 23816 000008DA 7503                    	jne	short do_alt2	;
 23817 000008DC 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 23818                                  do_alt2:			;
 23819 000008DF AC                      	lodsb			;
 23820 000008E0 AA                      	stosb			;
 23821 000008E1 08C0                    	or	al,al           ;
 23822 000008E3 75FA                    	jnz	short do_alt2   ;
 23823 000008E5 C645FF0D                	mov	byte [di-1],cr
 23824                                  
 23825                                  ;;   Last but not least, see if we need to call disable_autoexec
 23826                                  
 23827                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 23828                                  	;cmp	[command_line-1],0
 23829                                          ;jne	short do_exec   ;
 23830                                          ;mov	[command_line-1],'/'
 23831                                  	;call	disable_autoexec ;
 23832                                  
 23833                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 23834 000008E9 C606[1A46]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 23835 000008EE E8C537                  	call	disable_autoexec
 23836 000008F1 E80D38                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 23837                                  do_exec:
 23838 000008F4 E999FE                  	jmp	retry		;
 23839                                  
 23840                                  ;;endif	;MULTI_CONFIG
 23841                                  
 23842                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 23843                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23844                                  
 23845                                  ; 24/03/2019 - Retro DOS v4.0
 23846                                  
 23847                                  ; ----------------------------------------------------------------------
 23848                                  ; procedure : AllocFreeMem
 23849                                  ;
 23850                                  ; Allocate Max memory from DOS to find out where to load DOS.
 23851                                  ; DOS is at temporary location when this call is being made
 23852                                  ;
 23853                                  ; Inputs : None
 23854                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 23855                                  ;	   [area] & [memhi] set to the para value of the start of the
 23856                                  ;	   free memory.
 23857                                  ;
 23858                                  ; Uses   : AX, BX
 23859                                  ;
 23860                                  ; ----------------------------------------------------------------------
 23861                                  	
 23862                                  	; 30/12/2022 - Retro DOS v4.2
 23863                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 23864                                  
 23865                                  	; 08/04/2024 - Retro DOS v5.0
 23866                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 23867                                  
 23868                                  	; 23/10/2022
 23869                                  AllocFreeMem:
 23870 000008F7 BBFFFF                  	mov	bx,0FFFFh
 23871 000008FA B448                    	mov	ah,48h ; ALLOC
 23872 000008FC CD21                    	int	21h			; first time fails
 23873 000008FE B448                    	mov	ah,48h ; ALLOC
 23874 00000900 CD21                    	int	21h			; second time gets it
 23875                                  	; 11/12/2022
 23876                                  	; ds = cs
 23877                                  	;mov	[cs:area],ax
 23878                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 23879 00000902 A3[6603]                	mov	[area],ax
 23880 00000905 A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 23881 00000908 C3                      	retn				; start of free memory
 23882                                  				
 23883                                  	; include msbio.cl6
 23884                                  ; ----------------------------------------------------------------------
 23885                                  DOSLOMSG:
 23886 00000909 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 23886 00000912 7661696C61626C653A-
 23886 0000091B 204C6F6164696E6720-
 23886 00000924 444F53206C6F770D0A-
 23886 0000092D 24                 
 23887                                  FEmsg:
 23888 0000092E 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 23888 00000937 6F723A2043616E6E6F-
 23888 00000940 7420616C6C6F636174-
 23888 00000949 65204D656D6F727920-
 23888 00000952 666F7220444F530D0A-
 23888 0000095B 24                 
 23889                                  
 23890                                  ; ----------------------------------------------------------------------
 23891                                  ;
 23892                                  ; procedure : LoadDOSHiOrLo
 23893                                  ;
 23894                                  ;		Tries to move DOS into HMA. If it fails then loads
 23895                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 23896                                  ;		moved; this just tries to allocate the HMA, and prints
 23897                                  ;		a message if this is not possible.
 23898                                  ;
 23899                                  ; ----------------------------------------------------------------------
 23900                                  
 23901                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23902                                  LoadDOSHiOrLo:
 23903                                  	; 27/03/2019 - Retro DOS v4.0
 23904                                  	; ds = cs
 23905 0000095C E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 23906                                  	;jc	short LdngLo		; If that don't work...
 23907                                  	;retn
 23908                                  	; 18/12/2022
 23909 0000095F 731C                    	jnc	short LoadDosHi_ok
 23910                                  LdngLo:
 23911                                  	; 23/10/2022
 23912                                  	;push	cs
 23913                                  	;pop	ds
 23914                                  	; 11/12/2022
 23915                                  	; ds = cs
 23916 00000961 B409                    	mov	ah,9
 23917 00000963 BA[0909]                	mov	dx,DOSLOMSG		; inform user that we are
 23918 00000966 CD21                    	int	21h			; loading low
 23919                                  
 23920                                  ;ifndef ROMDOS
 23921                                  	; actually move the dos, and reinitialize it.
 23922                                  
 23923 00000968 BB0100                  	mov	bx,1				; M012
 23924                                  						;  use int 21 alloc for mem
 23925 0000096B E83F00                  	call	MovDOSLo
 23926                                  	; 11/12/2022
 23927                                  	; ds = cs
 23928                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 23929                                  	; 23/10/2022
 23930 0000096E 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23931                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 23932                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 23933 00000972 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 23934                                  	; 11/12/2022
 23935                                  	; ds = cs
 23936                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 23937 00000974 FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 23938                                  	
 23939                                  ;endif ; ROMDOS
 23940                                  	; 23/10/2022
 23941                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 23942                                  	; 11/12/2022
 23943                                  	; ds = cs
 23944 00000978 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 23945                                  LoadDosHi_ok:	; 18/12/2022
 23946 0000097D C3                      	retn
 23947                                  
 23948                                  ; ----------------------------------------------------------------------
 23949                                  ;
 23950                                  ; procedure : TryToMovDOSHi
 23951                                  ;
 23952                                  ;		This tries to move DOS into HMA.
 23953                                  ;		Returns CY if it failed.
 23954                                  ;		If it succeeds returns with carry cleared.
 23955                                  ;
 23956                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 23957                                  ;		the A20 switching code in the low mem stub to be installed.
 23958                                  ; 
 23959                                  ; ----------------------------------------------------------------------
 23960                                  
 23961                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23962                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 23963                                  TryToMovDOSHi:
 23964                                  	; 11/12/2022
 23965                                  	; 27/03/2019 - Retro DOS v4.0
 23966                                  	; ds = cs
 23967 0000097E E81300                  	call	MovDOSHi
 23968 00000981 7210                    	jc	short ttldhx
 23969                                  
 23970                                  ;ifndef ROMDOS
 23971                                  	; 23/10/2022
 23972                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 23973                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 23974                                  	; 11/12/2022
 23975                                  	; ds = cs
 23976 00000983 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23977                                  ;else
 23978                                  ;	..
 23979                                  ;endif ; ROMDOS
 23980                                  
 23981                                  	; 11/12/2022
 23982                                  	; ds = cs
 23983 00000987 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 23984                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23985 00000989 FF1E[7D02]              	call	far [dos_segreinit]
 23986                                  	;mov	byte [cs:runhigh],1
 23987 0000098D C606[6C02]01            	mov	byte [runhigh],1
 23988 00000992 F8                      	clc
 23989                                  ttldhx:
 23990 00000993 C3                      	retn
 23991                                  
 23992                                  ; ----------------------------------------------------------------------
 23993                                  ;
 23994                                  ; procedure : MovDOSHi
 23995                                  ;
 23996                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 23997                                  ;		For ROMDOS, the code is not actually moved, but the
 23998                                  ;		HMA is allocated and prepared for sub-allocation.
 23999                                  ;
 24000                                  ;		Returns : CY if it failed
 24001                                  ;
 24002                                  ; ----------------------------------------------------------------------
 24003                                  
 24004                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24005                                  MovDOSHi:
 24006                                  	; 14/05/2019
 24007                                  	; 27/03/2019 - Retro DOS v4.0
 24008                                  	; ds = cs
 24009 00000994 E8D600                  	call	AllocHMA
 24010 00000997 7213                    	jc	short mdhx			; did we get HMA?
 24011 00000999 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 24012 0000099C 8EC0                    	mov	es,ax
 24013                                  
 24014                                  ;ifndef ROMDOS
 24015                                  	; actually move the BIOS and DOS
 24016                                  
 24017                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24018                                  	; 24/03/2019
 24019                                  	
 24020                                  	; 23/10/2022
 24021 0000099E E83200                  	call	MovBIOS				; First move BIOS into HMA
 24022                                  
 24023                                  	; ES:DI points to free HMA after BIOS
 24024                                  	
 24025                                  	; 14/05/2019
 24026                                  	; 24/03/2019 - Retro DOS v4.0
 24027                                  	;xor	di,di
 24028                                  	
 24029                                  	; 23/10/2022
 24030                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 24031                                  	; 11/12/2022
 24032                                  	; ds = cs
 24033                                  	;mov	cx,[hi_doscod_size]		; when it is in HMA
 24034                                  	; 08/03/2025 (MiniDOS)
 24035 000009A1 8B0E[8102]              	mov	cx,[dos_code_size]	
 24036 000009A5 E81100                  	call	MovDOS				; and move it
 24037                                  
 24038                                  	; ES:DI points to free HMA after DOS
 24039                                  ;else
 24040                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 24041                                  ;
 24042                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 24043                                  ;
 24044                                  ;endif ; ROMDOS
 24045                                  
 24046 000009A8 E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 24047 000009AB F8                      	clc
 24048                                  mdhx:
 24049 000009AC C3                      	retn
 24050                                  
 24051                                  ; ----------------------------------------------------------------------
 24052                                  ;
 24053                                  ; procedure : MovDOSLo
 24054                                  ;
 24055                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 24056                                  ;
 24057                                  ; ----------------------------------------------------------------------
 24058                                  
 24059                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24060                                  
 24061                                  ;ifndef ROMDOS
 24062                                  
 24063                                  MovDOSLo:
 24064                                  	; 14/05/2019
 24065                                  	; 27/03/2019 - Retro DOS v4.0
 24066                                  	; ds = cs
 24067 000009AD E84500                  	call	AllocMemForDOS			; incestuosly!!!
 24068                                  	
 24069                                  	; 23/10/2022
 24070                                  	; 14/05/2019
 24071                                  	;inc	ax  ; skip MCB
 24072                                  	
 24073 000009B0 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 24074                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24075                                  	; 24/03/2019
 24076                                  	
 24077                                  	; 23/10/2022
 24078 000009B2 E81E00                  	call	MovBIOS
 24079                                  
 24080                                  ;------ ES:DI points memory immediately after BIOS
 24081                                  
 24082                                  	; 14/05/2019
 24083                                  	; NOTE: 
 24084                                  	;     Order of (RETRO) DOS kernel sections at memory:
 24085                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 24086                                  
 24087                                  	; 24/03/2019 - Retro DOS v4.0
 24088                                  	;xor	di,di	
 24089                                  
 24090                                  	; 23/10/2022
 24091                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 24092                                  	; 11/12/2022
 24093                                  	; ds = cs
 24094                                  	;mov	cx,[lo_doscod_size]		; low
 24095                                  	; 08/03/2025 (MiniDOS)
 24096 000009B5 8B0E[8102]              	mov	cx,[dos_code_size]
 24097                                  	;call	MovDOS
 24098                                  	;retn
 24099                                  	; 11/12/2022
 24100                                  	;jmp	short MovDOS
 24101                                  
 24102                                  ;endif ; ROMDOS
 24103                                  
 24104                                  ; 11/12/2022
 24105                                  
 24106                                  ; ----------------------------------------------------------------------
 24107                                  ;
 24108                                  ; procedure : MovDOS
 24109                                  ;
 24110                                  ;		Moves DOS code into requested area
 24111                                  ;
 24112                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24113                                  ;	     CX    - size of DOS code to be moved
 24114                                  ;
 24115                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24116                                  ;
 24117                                  ; ----------------------------------------------------------------------
 24118                                  
 24119                                  	; 11/12/2022
 24120                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24121                                  
 24122                                  ;ifndef ROMDOS
 24123                                  
 24124                                  MovDOS:
 24125                                  	; 14/05/2019
 24126                                  	; 27/03/2019 - Retro DOS v4.0
 24127                                  
 24128                                  	; 11/12/2022
 24129                                  	; ds = cs
 24130                                  
 24131                                  	; 23/10/2022
 24132                                  	;push	ds ; *//
 24133                                  	
 24134 000009B9 06                      	push	es
 24135 000009BA 57                      	push	di
 24136                                  
 24137                                  	; 11/12/2022
 24138 000009BB 1E                      	push	ds ; *// ; 11/12/202
 24139                                  
 24140                                  	; 29/04/2019
 24141 000009BC C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 24142                                  	; 23/10/2022
 24143                                  	;lds	si,[cs:dosinit]
 24144                                  	; 03/09/2023
 24145 000009C0 89F0                    	mov	ax,si
 24146                                  
 24147 000009C2 F3A4                    	rep	movsb
 24148                                  
 24149 000009C4 1F                      	pop	ds ; *// ; 11/12/2022
 24150                                  
 24151 000009C5 5B                      	pop	bx				; get back offset into which
 24152                                  						;  DOS was moved
 24153                                  	; 03/09/2023
 24154                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24155                                  						;  wants to run
 24156                                  	; 03/09/2023
 24157                                  	;mov	ax,[dosinit]
 24158                                  	; ax = [dosinit]
 24159                                  
 24160 000009C6 29D8                    	sub	ax,bx
 24161 000009C8 E8B502                  	call	off_to_para
 24162 000009CB 5B                      	pop	bx				; get the segment at which
 24163                                  						;  we moved DOS into
 24164 000009CC 29C3                    	sub	bx,ax				; Adjust segment
 24165                                  	
 24166                                  	; 11/12/2022
 24167                                  	; 23/10/2022
 24168                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24169                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24170                                  	; 11/12/2022
 24171 000009CE 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 24172                                  		
 24173                                  	; 27/03/2019
 24174                                  	;pop	ds ; *//
 24175                                  	; ds = cs
 24176                                  	;mov	[FINAL_DOS_LOCATION],bx
 24177                                  
 24178 000009D2 C3                      	retn
 24179                                  
 24180                                  ;endif ;ROMDOS
 24181                                  
 24182                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24183                                  ; 24/03/2019
 24184                                  ; ----------------------------------------------------------------------
 24185                                  ;
 24186                                  ; procedure : MovBIOS
 24187                                  ;
 24188                                  ;		Moves BIOS code into requested segment
 24189                                  ;
 24190                                  ;	In : ES - segment to which BIOS is to be moved
 24191                                  ;		  ( it moves always into offset BCode_Start)
 24192                                  ;
 24193                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 24194                                  ;
 24195                                  ; ----------------------------------------------------------------------
 24196                                  
 24197                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24198                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24199                                  
 24200                                  ;ifndef ROMDOS
 24201                                  
 24202                                  MovBIOS: ; proc	near
 24203                                  	; 11/12/2022
 24204 000009D3 1E                      	push	ds ; ds = cs
 24205                                  	;
 24206                                  	; 23/10/2022
 24207                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 24208                                  	; 17/09/2023 ; 08/04/2024
 24209 000009D4 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 24210                                  	;mov	si,BCODE_START ; mov si,30h
 24211                                  	; 09/12/2022
 24212 000009D8 BE[3000]                	mov	si,BCODESTART ; 30h
 24213 000009DB 89F7                    	mov	di,si
 24214                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24215 000009DD B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 24216 000009E0 29F1                    	sub	cx,si				; size of BIOS
 24217 000009E2 D1E9                    	shr	cx,1				; Both the labels are para
 24218                                  						;  aligned
 24219 000009E4 F3A5                    	rep	movsw
 24220                                  	
 24221                                  	; 11/12/2022
 24222 000009E6 1F                      	pop	ds ; ds = cs
 24223                                  	;
 24224 000009E7 06                      	push	es
 24225 000009E8 57                      	push	di				; save end of BIOS
 24226 000009E9 8CC0                    	mov	ax,es
 24227                                  	;
 24228                                  	; 11/12/2022
 24229                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 24230                                  	;;call	dword ptr cs:_seg_reinit_ptr
 24231                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 24232                                  	; ds = cs
 24233 000009EB A3[8203]                	mov	[BCodeSeg],ax
 24234 000009EE FF1E[8502]              	call	far [seg_reinit_ptr]
 24235                                  	;
 24236 000009F2 5F                      	pop	di
 24237 000009F3 07                      	pop	es				; get back end of BIOS
 24238 000009F4 C3                      	retn
 24239                                  
 24240                                  ;MovBIOS endp
 24241                                  
 24242                                  ;endif ; ROMDOS
 24243                                  
 24244                                  ; 11/12/2022
 24245                                  %if 0
 24246                                  
 24247                                  ; 24/03/2019
 24248                                  
 24249                                  ; ----------------------------------------------------------------------
 24250                                  ;
 24251                                  ; procedure : MovDOS
 24252                                  ;
 24253                                  ;		Moves DOS code into requested area
 24254                                  ;
 24255                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24256                                  ;	     CX    - size of DOS code to be moved
 24257                                  ;
 24258                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24259                                  ;
 24260                                  ; ----------------------------------------------------------------------
 24261                                  
 24262                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24263                                  
 24264                                  ;ifndef ROMDOS
 24265                                  
 24266                                  MovDOS:
 24267                                  	; 14/05/2019
 24268                                  	; 27/03/2019 - Retro DOS v4.0
 24269                                  
 24270                                  	; 11/12/2022
 24271                                  	; ds = cs
 24272                                  
 24273                                  	; 23/10/2022
 24274                                  	;push	ds ; *//
 24275                                  	
 24276                                  	push	es
 24277                                  	push	di
 24278                                  
 24279                                  	; 11/12/2022
 24280                                  	push	ds ; *// ; 11/12/202
 24281                                  
 24282                                  	; 29/04/2019
 24283                                  	lds	si,[dosinit] ; 11/12/2022
 24284                                  	; 23/10/2022
 24285                                  	;lds	si,[cs:dosinit]
 24286                                  	; 03/09/2023
 24287                                  	mov	ax,si
 24288                                  
 24289                                  	rep	movsb
 24290                                  
 24291                                  	pop	ds ; *// ; 11/12/2022
 24292                                  
 24293                                  	pop	bx				; get back offset into which
 24294                                  						;  DOS was moved
 24295                                  	;mov	ax,[dosinit] ; 03/09/2023
 24296                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24297                                  						;  wants to run
 24298                                  	sub	ax,bx
 24299                                  	call	off_to_para
 24300                                  	pop	bx				; get the segment at which
 24301                                  						;  we moved DOS into
 24302                                  	sub	bx,ax				; Adjust segment
 24303                                  	
 24304                                  	; 11/12/2022
 24305                                  	; 23/10/2022
 24306                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24307                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24308                                  	; 11/12/2022
 24309                                  	mov	[CURRENT_DOS_LOCATION],bx
 24310                                  		
 24311                                  	; 27/03/2019
 24312                                  	;pop	ds ; *//
 24313                                  	; ds = cs
 24314                                  	;mov	[FINAL_DOS_LOCATION],bx
 24315                                  
 24316                                  	retn
 24317                                  
 24318                                  ;endif ;ROMDOS
 24319                                  
 24320                                  %endif
 24321                                  
 24322                                  ; ----------------------------------------------------------------------
 24323                                  ;
 24324                                  ; procedure : AllocMemForDOS
 24325                                  ;
 24326                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 24327                                  ;
 24328                                  ;	Out : AX - seg of allocated memoryblock
 24329                                  ;
 24330                                  ; ----------------------------------------------------------------------
 24331                                  
 24332                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24333                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24334                                  
 24335                                  ;ifndef ROMDOS
 24336                                  
 24337                                  AllocMemForDOS:
 24338                                  	; 11/12/2022
 24339                                  	; 14/05/2019
 24340                                  	; 27/03/2019 - Retro DOS v4.0
 24341                                  	; ds = cs
 24342                                  	;mov	ax,BCode_end
 24343                                  	;sub	ax,BCode_start		; BIOS code size
 24344                                  	; 23/10/2022
 24345 000009F5 B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 24346                                  					; 30/12/2022
 24347                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24348                                  	;sub	ax,BCODE_START ; 30h
 24349                                  	; 09/12/2022
 24350 000009F8 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 24351                                  	; 24/03/2019 - Retro DOS v4.0 
 24352                                  	; 02/11/2022
 24353                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 24354                                  	; 11/12/2022
 24355                                  	; ds = cs
 24356                                  	;add	ax,[lo_doscod_size]
 24357                                  	; 08/03/2025 (MiniDOS)
 24358 000009FB 0306[8102]              	add	ax,[dos_code_size]
 24359 000009FF 83C00F                  	add	ax,15
 24360 00000A02 E87B02                  	call	off_to_para			; convert to para
 24361                                  	; 23/10/2022
 24362                                  	; 14/05/2019
 24363                                  	;inc	ax ; + 1 paragraph for MCB
 24364 00000A05 09DB                    	or	bx,bx				; M012
 24365 00000A07 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 24366 00000A09 741A                    	jz	short update_arena		; M012
 24367 00000A0B B448                    	mov	ah,48h				; request DOS
 24368 00000A0D CD21                    	int	21h
 24369 00000A0F 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 24370                                   	; 23/10/2022
 24371                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 24372 00000A11 83E803                  	sub	ax,3				; Take care ORG 30h of
 24373                                  						;  BIOS code
 24374 00000A14 8EC0                    	mov	es,ax
 24375                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 24376                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 24377                                  	; 14/05/2019
 24378                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 24379                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 24380                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 24381                                  	; 23/10/2022
 24382 00000A16 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 24383 00000A1D 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 24384                                  
 24385 00000A24 C3                      	retn
 24386                                  
 24387                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 24388                                  ;	  using DOS itself causes an arena to be generated.
 24389                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 24390                                  ;	  assume that the device drivers are loaded into
 24391                                  ;	  the first arena. For this reason, MagicDrv's
 24392                                  ;	  main device driver header arena is manually
 24393                                  ;	  truncated from the arena chain, and the space
 24394                                  ;	  for DOS is allocated using the following
 24395                                  ;	  simple code, which also assumes that the
 24396                                  ;	  first arena is the free one where DOS's low
 24397                                  ;	  stub will go.
 24398                                  ;
 24399                                  ; M012 : BEGIN
 24400                                  
 24401                                  	; 23/10/2022
 24402                                  update_arena:
 24403 00000A25 1E                      	push	ds ; ds = cs
 24404 00000A26 57                      	push	di
 24405 00000A27 51                      	push	cx
 24406 00000A28 52                      	push	dx
 24407                                  	; 23/10/2022
 24408                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 24409                                  	; 11/12/2022
 24410                                  	; ds = cs 
 24411 00000A29 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 24412 00000A2D 4F                      	dec	di
 24413 00000A2E 4F                      	dec	di				; Arena head is immediately
 24414                                  						;  before sysvar
 24415 00000A2F 8E05                    	mov	es,[di]				; es = arena head
 24416                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 24417 00000A31 268B0E0300              	mov	cx,[es:3]
 24418 00000A36 39D9                    	cmp	cx,bx				; is it sufficient ?
 24419 00000A38 7227                    	jb	short FatalErr			; no, fatal error
 24420                                  
 24421                                  	;mov	dl,[es:ARENA.SIGNATURE]
 24422 00000A3A 268A160000              	mov	dl,[es:0]
 24423 00000A3F 8CC0                    	mov	ax,es
 24424 00000A41 01D8                    	add	ax,bx				; ax = new arena head
 24425 00000A43 8905                    	mov	[di],ax				; store it in DOS data area
 24426 00000A45 8ED8                    	mov	ds,ax
 24427                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 24428 00000A47 88160000                	mov	[0],dl
 24429                                  	;mov	word [ARENA.OWNER],0		; free
 24430 00000A4B C70601000000            	mov	word [1],0
 24431 00000A51 29D9                    	sub	cx,bx				; size of the new block
 24432                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 24433 00000A53 890E0300                	mov	[3],cx
 24434 00000A57 8CC0                    	mov	ax,es				; return seg to the caller
 24435                                  	; 23/10/2022
 24436                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 24437 00000A59 83E803                  	sub	ax,3				;  BIOS code
 24438 00000A5C 5A                      	pop	dx
 24439 00000A5D 59                      	pop	cx
 24440 00000A5E 5F                      	pop	di
 24441 00000A5F 1F                      	pop	ds ; ds = cs
 24442 00000A60 C3                      	retn
 24443                                  ;
 24444                                  ; M012 : END
 24445                                  ;
 24446                                  FatalErr:
 24447 00000A61 0E                      	push	cs
 24448 00000A62 1F                      	pop	ds
 24449 00000A63 BA[2E09]                	mov	dx,FEmsg
 24450 00000A66 B409                    	mov	ah,9
 24451 00000A68 CD21                    	int	21h 		; DOS - PRINT STRING
 24452                                  				; DS:DX -> string terminated by "$"
 24453                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 24454 00000A6A E93807                  	jmp	stall
 24455                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 24456                                  	;cli
 24457                                  	;hlt
 24458                                  
 24459                                  ;endif ;ROMDOS
 24460                                  
 24461                                  ; 25/03/2019 - Retro DOS v4.0
 24462                                  
 24463                                  ; ----------------------------------------------------------------------
 24464                                  ;
 24465                                  ; procedure : AllocHMA
 24466                                  ;
 24467                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 24468                                  ;	  up there. If it gets any sort of error, it will return with
 24469                                  ;	  carry set so that we can resort to running low.
 24470                                  ;
 24471                                  ;	It also returns ES: -> 0ffffh if it returns success
 24472                                  ;
 24473                                  ; ----------------------------------------------------------------------
 24474                                  
 24475                                  AllocHMA:
 24476                                  ;	cas note:  The pre-286 check is no longer needed here since the
 24477                                  ;		   presence of XMS is sufficient. However, this code hasn't
 24478                                  ;		   been deleted because it can be recycled for skipping the
 24479                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 24480                                  ;		   in the case of a pre-286.
 24481                                  
 24482                                  ;;	see if we're running on a pre-286. If not, force low.
 24483                                  ;
 24484                                  ;	xor	ax,ax
 24485                                  ;	pushf			; save flags (like int)
 24486                                  ;	push	ax
 24487                                  ;	popf
 24488                                  ;	pushf
 24489                                  ;	pop	ax
 24490                                  ;	popf			; restore original flags (like int)
 24491                                  ;	and	ax,0F000h
 24492                                  ;	cmp	ax,0F000h	; 8088/8086?
 24493                                  ;	jz	short grab_hma_error
 24494                                  
 24495                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24496                                  	; (SYSINIT:0A26h)
 24497                                  
 24498                                  	; 13/04/2024 - Retro DOS v5.0
 24499                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C41h) 
 24500                                  
 24501 00000A6D 1E                      	push	ds
 24502                                  	;;mov	ax,Bios_Data
 24503                                  	;mov	ax,KERNEL_SEGMENT
 24504                                  	; 21/10/2022
 24505 00000A6E B87000                  	mov	ax,DOSBIODATASEG ; 70h
 24506 00000A71 8ED8                    	mov	ds,ax
 24507                                  
 24508 00000A73 E84A00                  	call	IsXMSLoaded
 24509 00000A76 7545                    	jnz	short grabhma_error
 24510                                  
 24511 00000A78 B81043                  	mov	ax,4310h
 24512 00000A7B CD2F                    	int	2Fh		; get the vector into es:bx
 24513                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 24514                                  		; Return: ES:BX -> driver entry point
 24515                                  
 24516 00000A7D 891E[0E00]              	mov	[xms],bx
 24517                                  	;mov	[0Eh], bx
 24518 00000A81 8C06[1000]              	mov	[xms+2],es
 24519                                  	;mov	[10h],es
 24520                                  
 24521 00000A85 B401                    	mov	ah,1		; request HMA
 24522 00000A87 BAFFFF                  	mov	dx,0FFFFh
 24523                                  	;call	dword ptr ds:0Eh
 24524 00000A8A FF1E[0E00]              	call	far [xms]
 24525 00000A8E 48                      	dec	ax
 24526 00000A8F 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 24527                                  
 24528                                  ;------ Himem may be lying because it has allocated mem for int 15
 24529                                  
 24530 00000A91 B488                    	mov	ah,88h
 24531 00000A93 CD15                    	int	15h
 24532                                  		; Get Extended Memory Size
 24533                                  		; Return: CF clear on success
 24534                                  		; AX = size of memory above 1M in K
 24535 00000A95 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 24536                                  	;jb	short grabhma_error
 24537                                  	; 11/12/2022
 24538 00000A98 7224                    	jb	short grabhma_err ; cf=1
 24539                                  allocHMA_1:
 24540 00000A9A B405                    	mov	ah,5		; localenableA20
 24541                                  	;call	dword ptr ds:0Eh
 24542 00000A9C FF1E[0E00]              	call	far [xms]
 24543 00000AA0 48                      	dec	ax
 24544 00000AA1 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 24545                                  
 24546 00000AA3 E89D01                  	call	IsVDiskInstalled
 24547 00000AA6 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 24548                                  
 24549 00000AA8 B8FFFF                  	mov	ax,0FFFFh
 24550 00000AAB 8EC0                    	mov	es,ax
 24551 00000AAD 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 24552 00000AB4 26813E10003412          	cmp	word [es:10h],1234h
 24553                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 24554                                  	; 11/12/2022
 24555 00000ABB 7401                    	je	short allocHMA_ok	
 24556                                  
 24557                                  ; 11/12/2022
 24558                                  ;	; 11/12/2022
 24559                                  ;	; cf=0
 24560                                  ;	;clc
 24561                                  ;	pop	ds
 24562                                  ;	retn
 24563                                  
 24564                                  grabhma_error:
 24565 00000ABD F9                      	stc
 24566                                  	; 11/12/022
 24567                                  grabhma_err:	; cf=1
 24568                                  allocHMA_ok:	; cf=0
 24569 00000ABE 1F                      	pop	ds
 24570 00000ABF C3                      	retn
 24571                                  
 24572                                  ; ----------------------------------------------------------------------
 24573                                  ;
 24574                                  ; procedure : IsXMSLoaded
 24575                                  ;
 24576                                  ;             Checks whether a XMS driver is loaded
 24577                                  ;
 24578                                  ; Returns : Z flag set if XMS driver loaded
 24579                                  ;           Z flag reset if no XMS drivers are present
 24580                                  ;
 24581                                  ; ----------------------------------------------------------------------
 24582                                  
 24583                                  IsXMSLoaded:
 24584 00000AC0 B80043                  	mov	ax,4300h
 24585 00000AC3 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 24586                                  				; Return: AL = 80h XMS driver installed
 24587                                  				; AL <> 80h no driver
 24588 00000AC5 3C80                    	cmp	al,80h		; XMS installed?
 24589 00000AC7 C3                      	retn
 24590                                  
 24591                                  ; ----------------------------------------------------------------------
 24592                                  ; procedure : FTryToMovDOSHi
 24593                                  ;
 24594                                  ;		Called from HMA suballoc calls
 24595                                  ;	
 24596                                  ; ----------------------------------------------------------------------
 24597                                  
 24598                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24599                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 24600                                  
 24601                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24602                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 24603                                  
 24604                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 24605                                  
 24606                                  FTryToMovDOSHi:	; proc	far
 24607                                  
 24608 00000AC8 50                      	push	ax
 24609 00000AC9 53                      	push	bx
 24610 00000ACA 51                      	push	cx
 24611 00000ACB 52                      	push	dx
 24612 00000ACC 56                      	push	si
 24613 00000ACD 57                      	push	di
 24614 00000ACE 1E                      	push	ds
 24615 00000ACF 06                      	push	es
 24616                                  
 24617                                  	; 23/10/2022
 24618                                  	; 27/03/2019 - Retro DOS v4.0
 24619                                  	; 11/12/2022
 24620 00000AD0 0E                      	push	cs
 24621 00000AD1 1F                      	pop	ds
 24622                                  
 24623                                  	;cmp	byte [cs:runhigh],0FFh
 24624                                  	; 11/12/2022
 24625 00000AD2 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24626 00000AD7 7503                    	jne	short _ftymdh_1
 24627                                  
 24628                                  	; ds = cs
 24629 00000AD9 E8A2FE                  	call	TryToMovDOSHi
 24630                                  _ftymdh_1:
 24631 00000ADC 07                      	pop	es
 24632 00000ADD 1F                      	pop	ds
 24633 00000ADE 5F                      	pop	di
 24634 00000ADF 5E                      	pop	si
 24635 00000AE0 5A                      	pop	dx
 24636 00000AE1 59                      	pop	cx
 24637 00000AE2 5B                      	pop	bx
 24638 00000AE3 58                      	pop	ax
 24639                                  
 24640 00000AE4 CB                      	retf
 24641                                  
 24642                                  ; ----------------------------------------------------------------------
 24643                                  ;
 24644                                  ; following piece of code will be moved into a para boundary. And the para
 24645                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 24646                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 24647                                  ; to determine free extended memory.
 24648                                  ;
 24649                                  ; For more details read "power programming" column by Ray Duncan in the
 24650                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 24651                                  ;
 24652                                  ; ----------------------------------------------------------------------
 24653                                  
 24654                                  	; 30/12/2023 - Retro DOS 5.0
 24655 00000AE5 00                      	db	0
 24656                                  
 24657                                  ; 13/04/2024
 24658                                  ;align 2
 24659                                  
 24660                                  	; 30/12/2023
 24661                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 24662                                  
 24663                                  StartVDHead:
 24664                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 24665                                  
 24666 00000AE6 00000000                	dd	0		; link to next device driver
 24667 00000AEA 0080                    	dw	8000h		; device attribute
 24668 00000AEC 0000                    	dw	0		; strategy routine offset
 24669 00000AEE 0000                    	dw	0		; interrupt routine offset
 24670 00000AF0 01                      	db	1		; number of units
 24671                                  	;db	7 dup(0) 
 24672 00000AF1 00<rep 7h>              	times	7 db 0 		; reserved area
 24673                                  VDiskSig1:
 24674 00000AF8 564449534B              	db	'VDISK'
 24675                                  
 24676                                  VLEN1	equ	($-VDiskSig1)
 24677                                  
 24678 00000AFD 202056332E33            	db	'  V3.3'	; vdisk label
 24679                                  	;db	15 dup (0)	; pad
 24680 00000B03 00<rep Fh>              	times	15 db 0
 24681 00000B12 0000                    	dw	0		; bits 0-15 of free HMA
 24682 00000B14 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 24683                                  VDInt19:
 24684 00000B15 EA                      	db	0EAh		; jmp to old vector
 24685                                  OldVDInt19:
 24686 00000B16 00000000                	dd	0		; Saved int 19 vector
 24687                                  
 24688                                  EndVDHead: ; label byte
 24689                                  
 24690                                  VDiskHMAHead:	
 24691 00000B1A 000000                  	db	0,0,0		; non-bootable disk
 24692                                  VDiskSig2:
 24693 00000B1D 564449534B              	db	'VDISK'
 24694                                  
 24695                                  VLEN2	equ	($-VDiskSig2)
 24696                                  
 24697 00000B22 332E33                  	db	'3.3'		; OEM - signature
 24698 00000B25 8000                    	dw	128		; number of bytes/sector
 24699 00000B27 01                      	db	1		; sectors/cluster
 24700 00000B28 0100                    	dw	1		; reserved sectors
 24701 00000B2A 01                      	db	1		; number of FAT copies
 24702 00000B2B 4000                    	dw	64		; number of root dir entries
 24703 00000B2D 0002                    	dw	512		; number of sectors
 24704 00000B2F FE                      	db	0FEh		; media descriptor
 24705 00000B30 0600                    	dw	6		; number of sectors/FAT
 24706 00000B32 0800                    	dw	8		; sectors per track
 24707 00000B34 0100                    	dw	1		; number of heads
 24708 00000B36 0000                    	dw	0		; number of hidden sectors
 24709 00000B38 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 24710                                  
 24711                                  EndVDiskHMAHead: ; label byte
 24712                                  
 24713                                  ; ----------------------------------------------------------------------
 24714                                  ;
 24715                                  ; procedure : InstVDiskHeader
 24716                                  ;
 24717                                  ;             Installs the VDISK header to reserve the 64k of HMA
 24718                                  ;	      It puts a 32 byte header at 10000:0 and
 24719                                  ;	      another header at (seg of int19):0
 24720                                  ;
 24721                                  ; Inputs : None
 24722                                  ;
 24723                                  ; Outputs : None
 24724                                  ;
 24725                                  ; USES : DS,SI,AX,CX,DX
 24726                                  ;
 24727                                  ; ----------------------------------------------------------------------
 24728                                  
 24729                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24730                                  
 24731                                  InstVDiskHeader:
 24732 00000B3A 31C0                    	xor	ax,ax
 24733 00000B3C 8ED8                    	mov	ds,ax			; seg of int vect table
 24734                                  
 24735                                  ;-------------- save old int 19 vector
 24736                                  
 24737                                  	; 23/10/2022
 24738 00000B3E A16400                  	mov	ax,[19h*4]
 24739                                  	;mov	[OldVDInt19],ax
 24740 00000B41 2EA3[160B]              	mov	[cs:OldVDInt19],ax
 24741 00000B45 A16600                  	mov	ax,[19h*4+2]
 24742                                  	;mov	[OldVDInt19+2],ax
 24743 00000B48 2EA3[180B]              	mov	[cs:OldVDInt19+2],ax
 24744                                  
 24745                                  ;-------------- calculate seg of new int 19 handler
 24746                                  
 24747 00000B4C B448                    	mov	ah,48h			; allocate memory
 24748                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 24749                                  	; 23/10/2022
 24750 00000B4E BB0400                  	mov	bx,4
 24751 00000B51 CD21                    	int	21h
 24752                                  
 24753                                  ;	if carry, fatal hanging error!!!!!
 24754                                  
 24755 00000B53 48                      	dec	ax			; point to arena
 24756 00000B54 8EC0                    	mov	es,ax
 24757                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 24758 00000B56 26C70601000800          	mov	word [es:1],8
 24759                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 24760 00000B5D 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 24761 00000B64 40                      	inc	ax
 24762 00000B65 8EC0                    	mov	es,ax			; get back to allocated memory
 24763                                  
 24764                                  ;-------------- install new int 19 vector
 24765                                  
 24766 00000B67 FA                      	cli				; no reboots at this time
 24767                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 24768 00000B68 C70664002F00            	mov	word [19h*4],47
 24769 00000B6E A36600                  	mov	[19h*4+2],ax
 24770                                  
 24771                                  ;-------------- move the code into proper place
 24772                                  
 24773                                  	;mov	cx,(EndVDHead-StartVDHead)
 24774 00000B71 B93400                  	mov	cx,52
 24775 00000B74 BE[E60A]                	mov	si,StartVDHead
 24776 00000B77 31FF                    	xor	di,di
 24777 00000B79 0E                      	push	cs
 24778 00000B7A 1F                      	pop	ds
 24779 00000B7B FC                      	cld
 24780 00000B7C F3A4                    	rep	movsb
 24781 00000B7E FB                      	sti				; BUGBUG is sti OK now?
 24782                                  
 24783                                  ;-------------- mov the HMA VDisk head into HMA
 24784                                  
 24785                                  	; 23/10/2022
 24786 00000B7F 57                      	push	di
 24787 00000B80 06                      	push	es
 24788                                  
 24789                                  	;mov	ax,0FFFFh
 24790                                  	;mov	es,ax
 24791                                  	; 03/09/2023
 24792 00000B81 49                      	dec	cx
 24793                                  	; cx = 0FFFFh
 24794 00000B82 8EC1                    	mov	es,cx
 24795                                  
 24796 00000B84 BF1000                  	mov	di,10h
 24797                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 24798 00000B87 B92000                  	mov	cx,32
 24799 00000B8A BE[1A0B]                	mov	si,VDiskHMAHead
 24800 00000B8D F3A4                    	rep	movsb			; ds already set to cs
 24801                                  
 24802 00000B8F 5F                      	pop	di
 24803 00000B90 07                      	pop	es
 24804                                  
 24805 00000B91 C3                      	retn
 24806                                  
 24807                                  ; ----------------------------------------------------------------------
 24808                                  ; procedure : ClrVDISKHeader
 24809                                  ;
 24810                                  ;		Clears the first 32 bytes at 1MB boundary
 24811                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 24812                                  ;		left by previous DOS=HIGH session
 24813                                  ;
 24814                                  ; ----------------------------------------------------------------------
 24815                                  
 24816                                  struc desc
 24817 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 24818 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 24819 00000004 ??                       .hi_byte:	resb 	1		; address
 24820 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 24821 00000006 ????                     .reserved:	resw	1		;
 24822                                   .size:
 24823                                  endstruc
 24824                                  
 24825                                  		; 23/10/2022
 24826                                  bmove:		;label byte
 24827                                  
 24828                                  dummy:		;times desc.size db 0	; desc	<>
 24829 00000B92 00<rep 8h>              		times 8 db 0		 
 24830                                  gdt:		;times desc.size db 0	; desc	<>
 24831 00000B9A 00<rep 8h>              		times 8 db 0
 24832 00000BA2 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 24833 00000BA4 0000                    		dw	0
 24834 00000BA6 00                      		db	0
 24835 00000BA7 93                      		db	93h
 24836 00000BA8 0000                    		dw	0
 24837 00000BAA FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 24838 00000BAC 0000                    		dw	0
 24839 00000BAE 10                      		db	10h
 24840 00000BAF 93                      		db	93h
 24841 00000BB0 0000                    		dw	0
 24842                                  
 24843                                  rombios_code:	;times desc.size db 0	; desc	<>
 24844 00000BB2 00<rep 8h>              		times 8 db 0
 24845                                  temp_stack:	;times desc.size db 0	; desc	<>
 24846 00000BBA 00<rep 8h>              		times 8 db 0
 24847                                  
 24848 00000BC2 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 24849                                  
 24850                                  
 24851                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 24852                                  
 24853                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 24854                                  ; (SYSINIT:0CA6h)
 24855                                  
 24856                                  ClrVDISKHeader:	; proc	near
 24857                                  
 24858                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 24859                                  ;;-----------------------------------------------------------	      ;I070
 24860                                  ;; The following workaround get around a problem with the	      ;I070
 24861                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 24862                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 24863                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 24864                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 24865                                  ;; move crashes the system. We can do this because these	      ;I070
 24866                                  ;; systems clear all of memory on a cold boot.			      ;I070
 24867                                  ;								      ;I070
 24868                                  ;               in      al,64h         ; Test for password servr mode ;I070
 24869                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 24870                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 24871                                  ;                                      ; Check for Tortugas...	      ;I070
 24872                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 24873                                  ;               je      short ClrVDISKno                              ;I070
 24874                                  ;                                      ; Check for mod 30-286	      ;I070
 24875                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 24876                                  ;               jne     short ClrVDISKok			      ;I070
 24877                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 24878                                  ;								      ;I070
 24879                                  ;ClrVDISKok:							      ;I070
 24880                                  ;-----------------------------------------------------------	      ;I070
 24881                                  
 24882                                  	; 30/12/2023 - Retro DOS v5.0
 24883                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 24884                                  ClrVDISKHeader:
 24885 00000BE2 E464                    	in	al,64h	; 8042 keyboard controller status register
 24886                                  			; 7:  PERR    1=parity error in data received from keyboard
 24887                                  			;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 24888                                  			; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 24889                                  			; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 24890                                  			;    +------------------------------+-----------------------------------+
 24891                                  			; 4:  INH     0=keyboard communications inhibited
 24892                                  			; 3:  A2      0=60h was the port last written to, 1=64h was last
 24893                                  			; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 24894                                  			; 1:  IBF     1=input buffer full (keyboard can't accept data)
 24895                                  			; 0:  OBF     1=output buffer full (data from keyboard is available)
 24896 00000BE4 A810                    	test	al,10h	; test bit 4 - Is keyboard inhibited?
 24897 00000BE6 7511                    	jnz	short ClrVDISKok ; No, go do block move
 24898                                  	; 30/12/2023
 24899                                  	; ds = cs	
 24900 00000BE8 813E[B902]F819          	cmp	word [sys_model_byte],19F8h ; check for TORTUGA models
 24901 00000BEE 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 24902                                  				 ; (while 8042 is disabled)
 24903 00000BF0 813E[B902]FC09          	cmp	word [sys_model_byte],9FCh ; check for PS/2 30-286 model
 24904 00000BF6 7501                    	jnz	short ClrVDISKok
 24905                                  ClrVDISKno:
 24906 00000BF8 C3                      	retn
 24907                                  ; ---------------------------------------------------------------------------
 24908                                  	; 30/12/2023
 24909                                  ClrVDISKok:
 24910                                  	; 12/12/2022
 24911                                  	; ds = cs
 24912                                  
 24913                                  	; 30/12/2022 - Retro DOS v4.2
 24914                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 24915                                  
 24916 00000BF9 06                      	push	es
 24917 00000BFA 8CC8                    	mov	ax,cs
 24918 00000BFC 89C2                    	mov	dx,ax
 24919 00000BFE B10C                    	mov	cl,12
 24920 00000C00 D3EA                    	shr	dx,cl
 24921 00000C02 B104                    	mov	cl,4
 24922 00000C04 D3E0                    	shl	ax,cl
 24923 00000C06 05[C20B]                	add	ax,ClrdVDISKHead
 24924 00000C09 80D200                  	adc	dl,0
 24925                                  
 24926                                  	;; 23/10/2022
 24927                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 24928                                  	;mov	[cs:src_desc+2],ax
 24929                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 24930                                  	;mov	[cs:src_desc+4],dl
 24931                                  	; 12/12/2022
 24932                                  	;mov	[src_desc+desc.lo_word],ax
 24933 00000C0C A3[A40B]                	mov	[src_desc+2],ax
 24934                                  	;mov	[src_desc+desc.hi_byte],dl
 24935 00000C0F 8816[A60B]              	mov	[src_desc+4],dl
 24936                                  
 24937 00000C13 B91000                  	mov	cx,16	; 16 words
 24938 00000C16 0E                      	push	cs
 24939 00000C17 07                      	pop	es
 24940 00000C18 BE[920B]                	mov	si,bmove
 24941 00000C1B B487                    	mov	ah,87h
 24942 00000C1D CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 24943                                  			; CX = number of words to move 
 24944                                  			; ES:SI -> global descriptor table
 24945                                  			; Return: CF set on error, AH = status
 24946 00000C1F 07                      	pop	es
 24947 00000C20 C3                      	retn
 24948                                  
 24949                                  ; ----------------------------------------------------------------------
 24950                                  ;
 24951                                  ; procedure : SaveFreeHMAPtr
 24952                                  ;
 24953                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 24954                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 24955                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 24956                                  ;		the offset.
 24957                                  ;
 24958                                  ; Inputs : ES:DI - pointer to free HMA
 24959                                  ; Output : FreeHMAPtr in BIOS data segment updated
 24960                                  ;
 24961                                  ; ----------------------------------------------------------------------
 24962                                  
 24963                                  SaveFreeHMAPtr:
 24964                                  	; 03/09/2023
 24965 00000C21 1E                      	push	ds
 24966 00000C22 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 24967 00000C25 8ED8                    	mov	ds,ax
 24968                                  	;
 24969 00000C27 8CC3                    	mov	bx,es
 24970 00000C29 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 24971                                  	; 03/09/2023
 24972 00000C2C A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 24973                                  	;
 24974 00000C2F 29D8                    	sub	ax,bx
 24975 00000C31 83C70F                  	add	di,15		   ; para round
 24976 00000C34 83E7F0                  	and	di,0FFF0h
 24977 00000C37 B104                    	mov	cl,4
 24978 00000C39 D3E0                    	shl	ax,cl
 24979 00000C3B 29C7                    	sub	di,ax
 24980                                  	;
 24981                                  	; 03/09/2023
 24982                                  	;push	ds
 24983                                  	;;mov	ax,Bios_Data ; 0070h
 24984                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 24985                                  	; 21/10/2022
 24986                                  	; 03/09/2023
 24987                                  	;mov	ax,DOSBIODATASEG ; 0070h
 24988                                  	;mov	ds,ax
 24989                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 24990 00000C3D 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 24991                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 24992 00000C41 1F                      	pop	ds
 24993 00000C42 C3                      	retn
 24994                                  
 24995                                  ; ----------------------------------------------------------------------
 24996                                  ;
 24997                                  ; procedure : IsVDiskInstalled
 24998                                  ;
 24999                                  ;		Checks for the presence of VDISK header at 1MB boundary
 25000                                  ;		& INT 19 vector
 25001                                  ;
 25002                                  ; Inputs  : A20 flag should be ON
 25003                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 25004                                  ;
 25005                                  ; ----------------------------------------------------------------------
 25006                                  
 25007                                  IsVDiskInstalled:
 25008 00000C43 31C0                    	xor	ax,ax
 25009 00000C45 8ED8                    	mov	ds,ax
 25010 00000C47 8E1E4E00                	mov	ds,[19*4+2]
 25011                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 25012                                  	; 23/10/2022
 25013 00000C4B BE1200                  	mov	si,12h ; 18
 25014                                  	;mov	cx,VLEN1 ; 5
 25015 00000C4E B90500                  	mov	cx,5
 25016 00000C51 0E                      	push	cs
 25017 00000C52 07                      	pop	es
 25018 00000C53 BF[F80A]                	mov	di,VDiskSig1
 25019 00000C56 F3A6                    	rep	cmpsb
 25020 00000C58 740F                    	je	short ivdins_retn
 25021 00000C5A B8FFFF                  	mov	ax,0FFFFh
 25022 00000C5D 8ED8                    	mov	ds,ax
 25023                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 25024 00000C5F BE1300                  	mov	si,13h
 25025 00000C62 BF[1D0B]                	mov	di,VDiskSig2
 25026                                  	;;mov	cx,VLEN2  ; 5
 25027                                  	;mov	cx,5
 25028                                  	; 03/09/2023
 25029 00000C65 B105                    	mov	cl,5
 25030 00000C67 F3A6                    	rep	cmpsb
 25031                                  ivdins_retn: 
 25032 00000C69 C3                      	retn			; returns the Zero flag
 25033                                  
 25034                                  ; ----------------------------------------------------------------------
 25035                                  ;
 25036                                  ; procedure : CPMHack
 25037                                  ;
 25038                                  ;		Copies the code from 0:c0 into ffff:0d0h
 25039                                  ;		for CPM compatibility
 25040                                  ;
 25041                                  ; ----------------------------------------------------------------------
 25042                                  
 25043                                  	; 11/12/2022
 25044                                  CPMHack:
 25045 00000C6A 1E                      	push	ds
 25046 00000C6B B9FFFF                  	mov	cx,0FFFFh
 25047 00000C6E 8EC1                    	mov	es,cx		; ES = FFFF
 25048                                  	;xor	cx,cx
 25049                                  	; 11/12/2022
 25050 00000C70 41                      	inc	cx  ; cx = 0
 25051 00000C71 8ED9                    	mov	ds,cx		; DS = 0
 25052 00000C73 BEC000                  	mov	si,0C0h
 25053 00000C76 BFD000                  	mov	di,0D0h
 25054                                  	;mov	cx,5
 25055 00000C79 B105                    	mov	cl,5
 25056 00000C7B FC                      	cld
 25057 00000C7C F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 25058 00000C7E 1F                      	pop	ds
 25059 00000C7F C3                      	retn
 25060                                  
 25061                                  ; ----------------------------------------------------------------------
 25062                                  ;
 25063                                  ; procedure : off_to_para
 25064                                  ;
 25065                                  ; ----------------------------------------------------------------------
 25066                                  off_to_para:
 25067 00000C80 D1E8                    	shr	ax,1
 25068 00000C82 D1E8                    	shr	ax,1
 25069 00000C84 D1E8                    	shr	ax,1
 25070 00000C86 D1E8                    	shr	ax,1
 25071 00000C88 C3                      	retn
 25072                                  
 25073                                  ; ----------------------------------------------------------------------
 25074                                  ;**	TempCDS - Create (Temporary?) CDS
 25075                                  ;
 25076                                  ;	ENTRY	?? BUGBUG
 25077                                  ;		(DS) = SysInitSeg
 25078                                  ;	EXIT	?? BUGBUG
 25079                                  ;	USES	?? BUGBUG
 25080                                  ; ----------------------------------------------------------------------
 25081                                  
 25082                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25083                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25084                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25085                                  TempCDS:
 25086 00000C89 C43E[6D02]              	les	di,[DOSINFO]
 25087 00000C8D 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 25088                                  
 25089                                  	;mov	cl,[es:di+20h]
 25090 00000C91 30ED                    	xor	ch,ch			; (cx) = # of block devices
 25091                                  
 25092 00000C93 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 25093                                  	;mov	[es:di+21h],cl	
 25094                                  
 25095                                  	;mov	al,cl
 25096                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 25097                                  	;;mov	ah,88
 25098                                  	;mul	ah			; (ax) = byte size for those CDSs
 25099                                  	; 30/12/2023
 25100 00000C97 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 25101                                  	;mov	al,88
 25102 00000C99 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 25103                                  
 25104 00000C9B E8CE04                  	call	ParaRound		; (ax) = paragraph size for CDSs
 25105 00000C9E 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 25106                                  
 25107                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 25108                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 25109                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 25110                                  ;		   variable which has the top of free memory for
 25111                                  ;		   device driver loads, etc.
 25112                                  
 25113 00000CA2 29C6                    	sub	si,ax
 25114                                  
 25115                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 25116                                  ;		that automatically updates alloclim every time we
 25117                                  ;		set up some new CDSs. Instead, I've added code
 25118                                  ;		which pre-allocates space for 26 CDSs. This
 25119                                  ;	        way we've got room for worst case CDSs before
 25120                                  ;		we place MagicDrv.sys
 25121                                  ;
 25122                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 25123                                  
 25124                                  	; 30/12/2022
 25125                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25126                                  	; (SYSINIT:0C52h)
 25127                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 25128                                  
 25129 00000CA4 26897518                	mov	[es:di+SYSI_CDS+2],si
 25130                                  	;mov	[es:di+18h],si
 25131 00000CA8 89F0                    	mov	ax,si
 25132 00000CAA 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 25133                                  	;mov	[word es:di+16h],0
 25134                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 25135 00000CB0 26C535                  	lds	si,[es:di]
 25136 00000CB3 8EC0                    	mov	es,ax
 25137 00000CB5 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 25138                                  
 25139                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 25140                                  ;	info from the corresponding DPB.
 25141                                  ;
 25142                                  ;	(cx) = count of CDSs left to process
 25143                                  ;	(es:di) = address of next CDS
 25144                                  
 25145                                  fooset:
 25146                                  	; 23/10/2022
 25147 00000CB7 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 25148 00000CBB AB                      	stosw				; setup the root as the curdir
 25149                                  	
 25150                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25151                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25152                                  
 25153                                  	; 30/12/2022
 25154                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 25155 00000CBC E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25156                                  
 25157                                  ;	(ds:si) = address of DPB
 25158                                  ;		 (si) = -1 if no drive
 25159                                  
 25160 00000CBF 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 25161 00000CC3 AB                      	stosw
 25162 00000CC4 2EFE06[A702]            	inc	byte [cs:DirStrng]
 25163 00000CC9 31C0                    	xor	ax,ax ; 0
 25164 00000CCB 51                      	push	cx
 25165                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 25166 00000CCC B93F00                  	mov	cx,63	; 23/10/2022
 25167 00000CCF F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 25168                                  
 25169                                  ;	should handle the system that does not have any floppies.
 25170                                  ;	in this case,we are going to pretended there are two dummy floppies
 25171                                  ;	in the system. still they have dpb and cds,but we are going to
 25172                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 25173                                  ;	"invalid drive specification" message when the user try to
 25174                                  ;	access them.
 25175                                  ;
 25176                                  ;	(ax) = 0
 25177                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25178                                  ;	(ds:si) = Next DPB (-1 if none)
 25179                                  
 25180 00000CD1 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 25181 00000CD4 740C                    	je	short fooset_zero	; don't have any physical drive.
 25182                                  
 25183                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 25184                                  ;	if we are faking floppy drives then see if this cds being initialised
 25185                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 25186                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 25187                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 25188                                  ;	for dpb offsets look at inc\dpb.inc.
 25189                                  
 25190                                  	; 03/09/2023
 25191 00000CD6 41                      	inc	cx  ; cx = 1
 25192                                  
 25193 00000CD7 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 25194                                  	;cmp	byte [cs:fake_floppy_drv],1
 25195 00000CDC 750A                    	jne	short normcds 		; machine has floppy drives
 25196                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 25197                                  	;cmp	byte [si],1
 25198 00000CDE 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 25199 00000CE0 7706                    	ja	short normcds
 25200                                  
 25201                                  	; 30/12/2023
 25202                                  	; ax = 0
 25203                                  fooset_zero:
 25204 00000CE2 B103                    	mov	cl,3			; the next dbp pointer
 25205                                  					; AX should be zero here
 25206 00000CE4 F3AB                    	rep	stosw
 25207                                  	; 30/12/2023
 25208                                  	;pop	cx
 25209 00000CE6 EB0F                    	jmp	short get_next_dpb ; findcds
 25210                                  
 25211                                  ;	(ax) = 0
 25212                                  
 25213                                  	; 30/12/2023
 25214                                  ;fooset_zero:
 25215                                  	;mov	cl,3
 25216                                  	;rep	stosw
 25217                                  	;pop	cx
 25218                                  	;jmp	short fincds
 25219                                  
 25220                                  ;*	We have a "normal" DPB and thus a normal CDS.
 25221                                  ;
 25222                                  ;	(ax) = 0
 25223                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25224                                  ;	(ds:si) = Next DPB (-1 if none)
 25225                                  
 25226                                  normcds:
 25227                                  	; 30/12/2023
 25228                                  	;pop	cx
 25229                                  
 25230                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 25231                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 25232                                  ;	this media is a non-fat based one.
 25233                                  
 25234                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 25235                                  	; 23/10/2022
 25236                                  	;cmp	byte [si+8],0
 25237                                  	; 03/09/2023 (ax=0)
 25238 00000CE8 384408                  	cmp	[si+8],al ; 0
 25239 00000CEB 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 25240 00000CED B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 25241                                  	;mov	ax,4000h
 25242                                  setnormcds:
 25243 00000CF0 AB                      	stosw				; curdir_flags
 25244 00000CF1 89F0                    	mov	ax,si
 25245 00000CF3 AB                      	stosw				; curdir_devptr
 25246 00000CF4 8CD8                    	mov	ax,ds
 25247 00000CF6 AB                      	stosw
 25248                                  
 25249                                  get_next_dpb:				; entry point for fake_fooset_zero
 25250                                  	; 30/12/2022
 25251                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25252                                  	; 23/10/2022
 25253                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 25254                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25255                                  fincds:	; get_next_dpb
 25256                                  	; 30/12/2023
 25257 00000CF7 59                      	pop	cx
 25258                                  	; 30/12/2022
 25259                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25260 00000CF8 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 25261 00000CFB AB                      	stosw				; curdir_id
 25262 00000CFC AB                      	stosw				; curdir_id
 25263 00000CFD AB                      	stosw				; curdir_user_word
 25264 00000CFE B80200                  	mov	ax,2
 25265 00000D01 AB                      	stosw				; curdir_end
 25266 00000D02 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 25267 00000D04 AA                      	stosb
 25268 00000D05 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 25269 00000D06 AB                      	stosw
 25270 00000D07 AB                      	stosw
 25271                                  
 25272 00000D08 E2AD                    	loop	fooset
 25273                                  	
 25274 00000D0A 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 25275                                  	
 25276 00000D10 C3                      	retn
 25277                                  
 25278                                  ; ----------------------------------------------------------------------
 25279                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 25280                                  ;
 25281                                  ;	entry:
 25282                                  ;	   al == ASCII CAPS drive letter
 25283                                  ;
 25284                                  ;	exit:
 25285                                  ;	   ds:si -> DPB, or si = -1 if not found
 25286                                  ; ----------------------------------------------------------------------
 25287                                  
 25288                                  ; 30/12/2023
 25289                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 25290                                  
 25291                                  	; 30/12/2022
 25292                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 25293                                  	; 23/10/2022
 25294                                  get_dpb_for_drive_al:
 25295 00000D11 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 25296                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 25297 00000D16 C534                    	lds	si,[si]
 25298 00000D18 2C41                    	sub	al,'A'
 25299                                  
 25300                                  get_dpb_for_drive_1:
 25301                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 25302 00000D1A 3A04                    	cmp	al,[si]
 25303 00000D1C 7408                    	je	short got_dpb_for_drive	;  done if so
 25304                                  
 25305 00000D1E C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25306 00000D21 83FEFF                  	cmp	si,-1
 25307 00000D24 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 25308                                  
 25309                                  got_dpb_for_drive:
 25310 00000D26 C3                      	retn
 25311                                  
 25312                                  ;=======================================================================
 25313                                  
 25314                                  ;**	EndFile - Build DOS structures
 25315                                  ;
 25316                                  ; This procedure is called after the config.sys has been processed and
 25317                                  ; installable device drivers have been loaded (but before "install="
 25318                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 25319                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 25320                                  ; to allow for the safe EXECing of "install=" programs. All memory
 25321                                  ; above these structures is deallocated back to DOS.
 25322                                  ;
 25323                                  ;	ENTRY	?? BUGBUG
 25324                                  ;	EXIT	?? BUGBUG
 25325                                  ;	USES	?? BUGBUG
 25326                                  
 25327                                  ;=======================================================================
 25328                                  ; allocate files
 25329                                  ; ----------------------------------------------------------------------
 25330                                  
 25331                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25332                                  	; (SYSINIT:0CCDh)
 25333                                  
 25334                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25335                                  	; (SYSINIT:0E00h)
 25336                                  
 25337                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25338                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 25339                                  	
 25340                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 25341                                  
 25342                                  endfile:
 25343                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 25344                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 25345                                  ; to confbot.
 25346                                  
 25347                                  ;	if this procedure has been called to take care of install= command,
 25348                                  ;	   then we have to save es,si registers.
 25349                                  
 25350                                  	; 11/12/2022
 25351                                  	; ds = cs
 25352                                  
 25353                                  	; 23/10/2022
 25354                                  	; 31/03/2019
 25355 00000D27 1E                      	push	ds
 25356                                  
 25357                                  	;;mov	ax,Bios_Data ; 0070h
 25358                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25359                                  	; 21/10/2022
 25360 00000D28 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25361 00000D2B 8ED8                    	mov	ds,ax
 25362                                  
 25363                                  	;cmp	word [052Fh],0
 25364 00000D2D 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 25365 00000D32 7505                    	jne	short multrk_flag_done
 25366                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25367                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 25368                                  	; 12/12/2022
 25369 00000D34 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 25370                                  multrk_flag_done:
 25371                                  	; 23/10/2022
 25372                                  	; 31/03/2019
 25373 00000D39 1F                      	pop	ds
 25374                                  
 25375                                  	; 11/12/2022
 25376                                  	; ds = cs
 25377                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 25378                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25379                                  	; (SYSINIT:0E14h)
 25380 00000D3A A1[A102]                	mov	ax,[CONFBOT]
 25381 00000D3D A3[A302]                	mov	[ALLOCLIM],ax
 25382                                  	; 23/10/2022
 25383                                  	;mov	ax, [cs:top_of_cdss]
 25384                                  	;mov	[cs:ALLOCLIM], ax 
 25385                                  
 25386                                  	; 11/12/2022
 25387                                  	; ds = cs
 25388                                  	;push	cs
 25389                                  	;pop	ds
 25390                                  	
 25391                                  	;mov	ax,[CONFBOT]
 25392                                  	;mov	[ALLOCLIM],ax
 25393                                  
 25394                                  ; 18/03/2025 - MiniDOS v1.0
 25395                                  %if 0
 25396                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 25397                                  	;;;
 25398                                  	;;mov	ax,[cs:ALLOCLIM]
 25399                                  	;mov	ax,[ALLOCLIM]
 25400                                  	;mov	[cs:prev_alloclim],ax
 25401                                  	mov	[prev_alloclim],ax
 25402                                  	;mov	ax,[cs:memhi]
 25403                                  	mov	ax,[memhi]
 25404                                  	;mov	[cs:prev_memhi],ax
 25405                                  	mov	[prev_memhi],ax
 25406                                  dosfts:
 25407                                  	;;;
 25408                                  %endif
 25409                                  
 25410 00000D40 E84E34                  	call	round
 25411                                  
 25412                                  	; 11/12/2022
 25413                                  	; ds = cs
 25414 00000D43 A0[9D02]                	mov	al,[FILES]
 25415                                  	; 23/10/2022
 25416                                  	;mov	al,[cs:FILES]
 25417 00000D46 2C05                    	sub	al,5
 25418 00000D48 764B                    	jbe	short dofcbs
 25419                                  
 25420 00000D4A 50                      	push	ax
 25421                                  	;mov	al,devmark_files ; 'F'
 25422 00000D4B B046                    	mov	al,'F'
 25423 00000D4D E86C07                  	call	setdevmark		; set devmark for sfts (files)
 25424 00000D50 58                      	pop	ax
 25425 00000D51 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25426                                  					;  it does sign extend.
 25427                                  	; 11/12/2022
 25428                                  	; ds = cs
 25429 00000D53 8B1E[6003]              	mov	bx,[memlo]
 25430 00000D57 8B16[6203]              	mov	dx,[memhi]
 25431 00000D5B C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25432                                  	; 23/10/2022
 25433                                  	;mov	bx,[cs:memlo]
 25434                                  	;mov	dx,[cs:memhi]
 25435                                  	;lds	di,[cs:DOSINFO]		
 25436                                  
 25437                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 25438 00000D5F C57D04                  	lds	di,[di+4]
 25439                                  
 25440                                  	;mov	[di+SF.SFLink],bx
 25441 00000D62 891D                    	mov	[di],bx
 25442 00000D64 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 25443                                  
 25444 00000D67 0E                      	push	cs
 25445 00000D68 1F                      	pop	ds
 25446                                  
 25447                                  	; 11/12/2022
 25448                                  	; ds = cs
 25449 00000D69 C43E[6003]              	les	di,[memlo]		;point to new sft
 25450                                  	; 23/10/2022
 25451                                  	;les	di,[cs:memlo]
 25452                                  
 25453                                  	;mov	word [es:di+SF.SFLink],-1
 25454 00000D6D 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 25455                                  	;mov	[es:di+SF.SFCount],ax
 25456 00000D72 26894504                	mov	[es:di+4],ax
 25457                                  	; 09/04/2024
 25458 00000D76 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25459                                  	;mov	bl,59
 25460 00000D78 F6E3                    	mul	bl			;ax = number of bytes to clear
 25461 00000D7A 89C1                    	mov	cx,ax
 25462                                  	; 11/12/2022
 25463                                  	; ds = cs
 25464 00000D7C 0106[6003]              	add	[memlo],ax		;allocate memory
 25465                                  	; 23/10/2022
 25466                                  	;add	[cs:memlo],ax
 25467 00000D80 B80600                  	mov	ax,6
 25468                                  	; 11/12/2022
 25469 00000D83 0106[6003]              	add	[memlo],ax		;remember the header too
 25470                                  	;add	[cs:memlo],ax
 25471                                  	; 11/12/2022
 25472 00000D87 800E[E114]02            	or	byte [setdevmarkflag],for_devmark ; 2
 25473                                  	; 23/10/2022
 25474                                  	;or	byte [cs:setdevmarkflag],2
 25475 00000D8C E80234                  	call	round			; check for mem error before the stosb
 25476 00000D8F 01C7                    	add	di,ax
 25477 00000D91 31C0                    	xor	ax,ax
 25478 00000D93 F3AA                    	rep	stosb			;clean out the stuff
 25479                                  
 25480                                  ; allocate fcbs
 25481                                  ; ----------------------------------------------------------------------
 25482                                  
 25483                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25484                                  	; (SYSINIT:0D48h)
 25485                                  dofcbs:
 25486                                  	; 11/12/2022
 25487                                  	; ds = cs
 25488                                  	;push	cs
 25489                                  	;pop	ds
 25490 00000D95 E8F933                  	call	round
 25491                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 25492 00000D98 B058                    	mov	al,'X'
 25493 00000D9A E81F07                  	call	setdevmark
 25494                                  	; 11/12/2022
 25495                                  	; ds = cs
 25496 00000D9D A0[9E02]                	mov	al,[FCBS]
 25497                                  	;mov	al,[cs:FCBS]
 25498 00000DA0 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25499                                  					;  it does sign extend.
 25500                                  	; 11/12/2022
 25501 00000DA2 8B1E[6003]              	mov	bx,[memlo]
 25502 00000DA6 8B16[6203]              	mov	dx,[memhi]
 25503 00000DAA C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25504                                  	; 23/10/2022
 25505                                  	;mov	bx,[cs:memlo]
 25506                                  	;mov	dx,[cs:memhi]
 25507                                  	;lds	di,[cs:DOSINFO]
 25508                                  
 25509                                  	;mov	[di+SYSI_FCB],bx
 25510                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 25511                                  	; 23/10/2022
 25512 00000DAE 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 25513 00000DB1 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 25514                                  
 25515 00000DB4 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 25516 00000DB9 30FF                    	xor	bh,bh
 25517                                  	;mov	[di+SYSI_KEEP],bx
 25518 00000DBB 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 25519                                  
 25520 00000DBE 0E                      	push	cs
 25521 00000DBF 1F                      	pop	ds
 25522                                  	
 25523 00000DC0 C43E[6003]              	les	di,[memlo]		;point to new table
 25524                                  	;mov	word [es:di+SF.SFLink],-1
 25525 00000DC4 26C705FFFF              	mov	word [es:di],-1
 25526                                  	;mov	[es:di+SF.SFCount],ax
 25527                                  	; 02/11/2022
 25528 00000DC9 26894504                	mov	[es:di+4],ax
 25529 00000DCD B33B                    	mov	bl,SF_ENTRY.size ; 59
 25530 00000DCF 89C1                    	mov	cx,ax
 25531 00000DD1 F6E3                    	mul	bl			;ax = number of bytes to clear
 25532 00000DD3 0106[6003]              	add	[memlo],ax		;allocate memory
 25533                                  	;mov	ax,6
 25534 00000DD7 B80600                  	mov	ax,SF.size-2 ; 6
 25535 00000DDA 0106[6003]              	add	[memlo],ax		;remember the header too
 25536                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25537 00000DDE 800E[E114]02            	or	byte [setdevmarkflag],2
 25538 00000DE3 E8AB33                  	call	round			; check for mem error before the stosb
 25539 00000DE6 01C7                    	add	di,ax			;skip over header
 25540 00000DE8 B041                    	mov	al,'A'
 25541                                  fillloop:
 25542 00000DEA 51                      	push	cx			; save count
 25543 00000DEB B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 25544 00000DEE FC                      	cld
 25545 00000DEF F3AA                    	rep	stosb			; filled
 25546                                  
 25547                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 25548                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 25549                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 25550                                  
 25551                                  	; 18/12/2022
 25552                                  	;cx = 0
 25553 00000DF1 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 25554 00000DF5 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 25555 00000DF9 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 25556                                  	
 25557                                  	; 23/10/2022	
 25558                                  	;mov     word [es:di-3Bh],0
 25559                                  	;mov     word [es:di-26h],0
 25560                                  	;mov     word [es:di-24h],0
 25561                                  
 25562 00000DFD 59                      	pop	cx
 25563 00000DFE E2EA                    	loop	fillloop
 25564                                  
 25565                                  ; allocate buffers
 25566                                  ; ----------------------------------------------------------------------
 25567                                  
 25568                                  ; search through the list of media supported and allocate 3 buffers if the
 25569                                  ; capacity of the drive is > 360kb
 25570                                  
 25571                                  	; 18/12/2022
 25572                                  	; cx = 0
 25573 00000E00 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 25574 00000E05 7403                    	je	short dodefaultbuff
 25575 00000E07 E98000                  	jmp	dobuff			; the user entered the buffers=.
 25576                                  
 25577                                  dodefaultbuff:
 25578                                  	; 18/12/2022
 25579 00000E0A 890E[9902]              	mov	[h_buffers],cx ; 0
 25580                                  	;inc	cx
 25581                                  	;inc	cx
 25582                                  	;mov	[buffers],cx ; 2
 25583                                  	; 10/04/2024
 25584 00000E0E C706[9702]0200          	mov	word [buffers],2
 25585                                  
 25586                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 25587                                  	;mov	word [buffers],2	; default to 2 buffers
 25588                                  
 25589                                  	; 23/10/2022
 25590                                  	; 04/09/2023
 25591                                  	;push	ax
 25592                                  	;push	ds ; 26/03/2019
 25593                                  
 25594                                  	; 04/09/2023
 25595                                  	; ds = cs
 25596 00000E14 C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 25597                                  	;les	bp,[cs:DOSINFO]
 25598                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 25599                                  	; 11/12/2022
 25600 00000E18 26C46E00                	les	bp,[es:bp]
 25601                                  	; 23/10/2022
 25602                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 25603                                  
 25604                                  	; 04/09/2023
 25605                                  	; ds = cs
 25606                                  	;push	cs
 25607                                  	;pop	ds
 25608                                  ;SYSINIT:0DE2h:
 25609                                  nextdpb:				; test if the drive supports removeable media
 25610                                  	;mov	bl,[es:bp+DPB.drive]
 25611                                  	; 11/12/2022
 25612 00000E1C 268A5E00                	mov	bl,[es:bp]
 25613                                  	; 23/10/2022
 25614                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25615                                  
 25616                                  	;inc	bl
 25617                                  	; 18/12/2022
 25618 00000E20 43                      	inc	bx
 25619                                  
 25620                                  	;mov	ax,(IOCTL<<8)|8
 25621 00000E21 B80844                  	mov	ax,4408h
 25622 00000E24 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25623                                  
 25624                                  ; ignore fixed disks
 25625                                  
 25626 00000E26 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 25627 00000E28 7534                    	jnz	short nosetbuf
 25628                                  
 25629                                  ; get parameters of drive
 25630                                  
 25631 00000E2A 31DB                    	xor	bx,bx
 25632                                  	;;mov	bl,[es:bp+DPB.drive]
 25633                                  	; 11/12/2022
 25634 00000E2C 268A5E00                	mov	bl,[es:bp]
 25635                                  	; 23/10/2022
 25636                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25637                                  	
 25638                                  	;inc	bl
 25639                                  	; 18/12/2022
 25640 00000E30 43                      	inc	bx
 25641                                  
 25642 00000E31 BA[4A47]                	mov	dx,deviceparameters
 25643                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 25644 00000E34 B80D44                  	mov	ax,440Dh
 25645                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 25646 00000E37 B96008                  	mov	cx,860h
 25647 00000E3A CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25648 00000E3C 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 25649                                  					; generic ioctl
 25650                                  ; determine capacity of drive
 25651                                  ; media capacity = #sectors * bytes/sector
 25652                                  
 25653                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 25654                                  	; 23/10/2022
 25655 00000E3E 8B1E[5947]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 25656                                  	
 25657                                  ; to keep the magnitude of the media capacity within a word,
 25658                                  ; scale the sector size
 25659                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 25660                                  
 25661                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 25662                                  	; 23/10/2022
 25663 00000E42 A1[5147]                	mov	ax,[deviceparameters+7] ; bytes per sector
 25664 00000E45 31D2                    	xor	dx,dx
 25665 00000E47 B90002                  	mov	cx,512
 25666 00000E4A F7F1                    	div	cx			; scale sector size in factor of
 25667                                  					; 512 bytes
 25668 00000E4C F7E3                    	mul	bx			; ax = #sectors * size factor
 25669 00000E4E 09D2                    	or	dx,dx			; just in case of large floppies
 25670 00000E50 7505                    	jnz	short setbuf
 25671 00000E52 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 25672 00000E55 7607                    	jbe	short nosetbuf
 25673                                  setbuf:
 25674                                  	; 18/12/2022
 25675                                  	; word [buffers] = 2
 25676 00000E57 C606[9702]03            	mov	byte [buffers],3
 25677                                  	;mov	word [buffers],3
 25678 00000E5C EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 25679                                  					; for default buffer count
 25680                                  nosetbuf:
 25681                                  	; 23/10/2022
 25682                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 25683 00000E5E 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 25684 00000E63 7406                    	je	short chk_memsize_for_buffers
 25685                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 25686 00000E65 26C46E19                	les	bp,[es:bp+19h]
 25687 00000E69 EBB1                    	jmp	short nextdpb
 25688                                  
 25689                                  ;from dos 3.3,the default number of buffers will be changed according to the
 25690                                  ;memory size too.
 25691                                  ; default buffers = 2
 25692                                  ; if diskette media > 360 kb,then default buffers = 3
 25693                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 25694                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 25695                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 25696                                  
 25697                                  chk_memsize_for_buffers:
 25698                                  	; 18/12/2022
 25699                                  	;cmp	word [MEMORY_SIZE],2000h
 25700                                  	;jbe	short bufset
 25701                                  	;mov	word [buffers],5
 25702                                  	;cmp	word [MEMORY_SIZE],4000h
 25703                                  	;jbe	short bufset
 25704                                  	;mov	word [buffers],10
 25705                                  	;cmp	word [MEMORY_SIZE],8000h
 25706                                  	;jbe	short bufset
 25707                                  	;mov	word [buffers],15
 25708                                  
 25709                                  	; 18/12/2022
 25710                                  	; word [buffers] = 3 or 2
 25711 00000E6B BB[9702]                	mov	bx,buffers
 25712 00000E6E A1[9202]                	mov	ax,[MEMORY_SIZE]
 25713 00000E71 48                      	dec	ax	; [MEMORY_SIZE] - 1
 25714                                  
 25715 00000E72 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 25716 00000E75 7213                    	jb	short bufset
 25717 00000E77 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 25718 00000E7A 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 25719 00000E7D 730B                    	jnb	short bufset
 25720 00000E7F C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 25721 00000E82 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 25722 00000E85 7303                    	jnb	short bufset
 25723 00000E87 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 25724                                  bufset:
 25725                                  	; 23/10/2022
 25726                                  	; 26/03/2019
 25727                                  	; 04/09/2023
 25728                                  	;pop	ds
 25729                                  	;pop	ax
 25730                                  
 25731                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25732                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 25733                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25734                                  
 25735                                  ; 26/03/2019
 25736                                  
 25737                                  ;*******************************************************************************
 25738                                  ;									       *
 25739                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 25740                                  ; input :								       *
 25741                                  ;    memhi:memlo - start of the next available memory			       *
 25742                                  ;    buffers = number of buffers					       *
 25743                                  ;    h_buffers = number of secondary buffers				       *
 25744                                  ;									       *
 25745                                  ; output:								       *
 25746                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 25747                                  ;	buffinfo set.							       *
 25748                                  ;	bufferqueue set.						       *
 25749                                  ;									       *
 25750                                  ; subroutines to be called:						       *
 25751                                  ;									       *
 25752                                  ;*******************************************************************************
 25753                                  
 25754                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25755                                  	; (SYSINIT:0E60h)
 25756                                  dobuff:
 25757                                  	; ds = cs ; 31/03/2019
 25758                                  	; 23/10/2022
 25759                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 25760                                  	; 04/09/2023
 25761 00000E8A A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 25762 00000E8D 8B0E[9902]              	mov	cx,[h_buffers] ; *
 25763 00000E91 C51E[6D02]              	lds	bx,[DOSINFO]
 25764                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 25765                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 25766 00000E95 89473F                  	mov	[bx+3Fh],ax
 25767                                  	; 04/09/2023
 25768                                  	;mov	ax,[cs:h_buffers]
 25769                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 25770                                  	;mov	[bx+41h],ax
 25771                                  	; 04/09/2023
 25772 00000E98 894F41                  	mov	[bx+41h],cx ; *
 25773 00000E9B C55F12                  	lds	bx,[bx+12h]
 25774                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 25775 00000E9E E8F032                  	call	round		; get [memhi]:[memlo]
 25776                                  	;mov	al,devmark_buf	; ='B'
 25777 00000EA1 B042                    	mov	al,'B'	
 25778 00000EA3 E81606                  	call	setdevmark
 25779                                  
 25780                                  ;allocate buffers
 25781                                  
 25782 00000EA6 1E                      	push	ds			; save buffer info. ptr.
 25783 00000EA7 53                      	push	bx
 25784                                  
 25785 00000EA8 E84E03                  	call	set_buffer
 25786                                  
 25787 00000EAB 5B                      	pop	bx
 25788 00000EAC 1F                      	pop	ds
 25789                                  
 25790                                  ;now set the secondary buffer if specified.
 25791                                  
 25792 00000EAD 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 25793 00000EB3 742D                    	je	short xif16
 25794 00000EB5 E8D932                  	call	round
 25795                                  	; 23/10/2022
 25796 00000EB8 2E8B0E[6003]            	mov	cx,[cs:memlo]
 25797                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 25798 00000EBD 894F06                  	mov	[bx+6],cx
 25799 00000EC0 2E8B0E[6203]            	mov	cx,[cs:memhi]
 25800                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 25801 00000EC5 894F08                  	mov	[bx+8],cx
 25802 00000EC8 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 25803                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 25804 00000ECD 894F0A                  	mov	[bx+10],cx
 25805 00000ED0 B80002                  	mov	ax,512			; 512 byte
 25806 00000ED3 F7E1                    	mul	cx
 25807 00000ED5 2EA3[6003]              	mov	[cs:memlo],ax
 25808                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25809 00000ED9 2E800E[E114]02          	or	byte [cs:setdevmarkflag],2
 25810 00000EDF E8AF32                  	call	round
 25811                                  xif16:
 25812                                  
 25813                                  ; ----------------------------------------------------------------------
 25814                                  ; allocate cdss
 25815                                  ; ----------------------------------------------------------------------
 25816                                  
 25817                                  buf1:
 25818 00000EE2 E8AC32                  	call	round
 25819                                  
 25820 00000EE5 50                      	push	ax
 25821                                  	; 23/10/2022
 25822                                  	;mov	ax,devmark_cds		;='L'
 25823 00000EE6 B84C00                  	mov	ax, 'L'
 25824 00000EE9 E8D005                  	call	setdevmark
 25825 00000EEC 58                      	pop	ax
 25826                                  
 25827 00000EED 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 25828                                  	;mov	cl,[es:di+SYSI_NUMIO]
 25829 00000EF2 268A4D20                	mov	cl,[es:di+20h]
 25830 00000EF6 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 25831 00000EFB 7305                    	jae	short gotncds 		; user setting must be at least numio
 25832 00000EFD 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 25833                                  gotncds:
 25834 00000F02 30ED                    	xor	ch,ch
 25835                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 25836 00000F04 26884D21                	mov	[es:di+21h],cl
 25837 00000F08 2EA1[6203]              	mov	ax,[cs:memhi]
 25838                                  	;mov	[es:di+SYSI_CDS+2],ax
 25839 00000F0C 26894518                	mov	[es:di+18h],ax
 25840 00000F10 2EA1[6003]              	mov	ax,[cs:memlo]
 25841                                  	;mov	[es:di+SYSI_CDS],ax
 25842 00000F14 26894516                	mov	[es:di+16h],ax
 25843 00000F18 88C8                    	mov	al,cl
 25844                                  	;mov	ah,curdirlen ; curdir_list.size
 25845 00000F1A B458                    	mov	ah,88
 25846 00000F1C F6E4                    	mul	ah
 25847 00000F1E E84B02                  	call	ParaRound
 25848 00000F21 2E0106[6203]            	add	[cs:memhi],ax
 25849                                  
 25850                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25851 00000F26 2E800E[E114]02          	or	byte [cs:setdevmarkflag],2
 25852 00000F2C E86232                  	call	round			; check for mem error before initializing
 25853                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 25854 00000F2F 26C535                  	lds	si,[es:di]
 25855                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 25856 00000F32 26C47D16                	les	di,[es:di+16h]
 25857 00000F36 E87EFD                  	call	fooset
 25858                                  
 25859                                  ; ----------------------------------------------------------------------
 25860                                  ; allocate space for internal stack
 25861                                  ; ----------------------------------------------------------------------
 25862                                  
 25863 00000F39 0E                      	push	cs
 25864 00000F3A 1F                      	pop	ds
 25865                                  
 25866                                  ;	if the user did not entered stacks= command, as a default, do not install
 25867                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 25868                                  ;	otherwise,install it to the user specified value or to the default
 25869                                  ;	value of 9,128 for other systems.
 25870                                  
 25871 00000F3B 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 25872 00000F40 740E                    	je	short doinstallstack	; then install as specified by the user
 25873 00000F42 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 25874 00000F47 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 25875 00000F49 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 25876 00000F4E 736D                    	jae	short skipstack
 25877                                  doinstallstack:
 25878 00000F50 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 25879 00000F53 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 25880 00000F55 7466                    	jz	short skipstack		; don't install stack.
 25881                                  
 25882                                  ;	dynamic relocation of stack code.
 25883                                  
 25884 00000F57 E83732                  	call	round			;[memhi] = seg. for stack code
 25885                                  					;[memlo] = 0
 25886                                  
 25887                                  ; set devmark block into memory for mem command
 25888                                  ; devmark_id = 's' for stack
 25889                                  
 25890                                  	;mov	al,devmark_stk	;='S'
 25891                                  	; 23/10/2022
 25892 00000F5A B053                    	mov	al,'S'
 25893 00000F5C E85D05                  	call	setdevmark
 25894                                  
 25895 00000F5F A1[6203]                	mov	ax,[memhi]
 25896 00000F62 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 25897                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25898                                  	; 11/12/2022
 25899                                  	; ds = cs
 25900                                  	;push	cs
 25901                                  	;pop	ds
 25902 00000F64 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 25903 00000F66 31FF                    	xor	di,di
 25904 00000F68 B9[6902]                	mov	cx,endstackcode
 25905 00000F6B 890E[6003]              	mov	[memlo],cx
 25906 00000F6F E81F32                  	call	round		;have enough space for relocation?
 25907 00000F72 F3A4                    	rep	movsb
 25908                                  
 25909 00000F74 1E                      	push	ds		; stick the location of the NextStack entry
 25910                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 25911                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25912                                  	; 21/10/2022
 25913 00000F75 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25914 00000F78 8ED8                    	mov	ds,ax
 25915 00000F7A C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 25916 00000F80 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 25917                                  
 25918 00000F84 2EA1[6003]              	mov	ax,[cs:memlo]
 25919 00000F88 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 25920 00000F8C A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 25921 00000F8F 2EA1[6203]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 25922 00000F93 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 25923 00000F97 A3[0A08]                	mov	[IT_StackLoc+2],ax
 25924                                  
 25925                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 25926                                  
 25927                                  	;mov	ax,entrysize ; mov ax,8
 25928                                  	; 23/10/2022
 25929 00000F9A B80800                  	mov	ax,8
 25930 00000F9D 2E0306[8C02]            	add	ax,[cs:stack_size]
 25931 00000FA2 2EF726[8A02]            	mul	word [cs:stack_count]
 25932                                  
 25933 00000FA7 A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 25934                                  
 25935 00000FAA 1F                      	pop	ds		; no more need to access Instance Table
 25936                                  
 25937 00000FAB E8BE01                  	call	ParaRound	; convert size to paragraphs
 25938                                  	
 25939                                  	; 11/12/2022
 25940                                  	; ds = cs
 25941                                  	;add	[cs:memhi],ax
 25942 00000FAE 0106[6203]              	add	[memhi],ax
 25943                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25944                                  	;or	byte [cs:setdevmarkflag],2
 25945 00000FB2 800E[E114]02            	or	byte [setdevmarkflag],2
 25946                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25947                                  				;to set the devmark_size for stack by round routine.
 25948 00000FB7 E8D731                  	call	round		; check for memory error before
 25949                                  				; continuing
 25950 00000FBA E8E902                  	call	stackinit	; initialize hardware stack. 
 25951                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 25952                                  skipstack:
 25953                                  
 25954                                  ; 18/03/2025 - MiniDOS 1.0
 25955                                  %if 0	
 25956                                  	; 10/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25957                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:11F0h)
 25958                                  	;;;
 25959                                  	;push	cs
 25960                                  	;pop	ds
 25961                                  	; ds = cs
 25962                                  	cmp	byte [dosdata_umb],1	; PCDOS 7 feature - DOSDATA=UMB/NOUMB configuration
 25963                                  					; 1 = DOSDATA=UMB, 2 = (UMB) done, 0 = NOUMB
 25964                                  	ja	short dosdata_umb_done	; 2 - done
 25965                                  	jb	short dosdata_noumb	; 0 - DOSDATA=NOUMB
 25966                                  	
 25967                                  	cmp	byte [setdevmark],0EAh
 25968                                  	je	short dosdata_noumb
 25969                                  	
 25970                                  	mov	ax,5802h
 25971                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25972                                  				; AL = function code: (DOS 5beta) get UMB link state
 25973                                  	cbw
 25974                                  	mov	di,ax			; al = 01h -> UMBs in DOS memory chain
 25975                                  					; save current (previous) UMB link state
 25976                                  	mov	bx,1			; bx = 01h -> add UMBs to DOS memory chain
 25977                                  	
 25978                                  	mov	ax,5803h
 25979                                  	int	21h
 25980                                  	jc	short dosdata_noumb
 25981                                  	
 25982                                  	mov	ax,5800h
 25983                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25984                                  				; AL = function code: get allocation strategy
 25985                                  	
 25986                                  	mov	si,ax			; ax = current strategy
 25987                                  					; save current (previous) allocation strategy
 25988                                  	mov	bx,40h			; bl = new strategy = 40h - high memory first fit
 25989                                  	
 25990                                  	mov	ax,5801h
 25991                                  	int	21h
 25992                                  
 25993                                  	mov	bx,[memhi]
 25994                                  	sub	bx,[prev_memhi]
 25995                                  	
 25996                                  	mov	ah,48h
 25997                                  	int	21h		; DOS - 2+ - ALLOCATE MEMORY
 25998                                  				; BX = number of 16-byte paragraphs desired
 25999                                  	mov	cx,ax			; ax = segment of allocated block
 26000                                  	mov	bx,di			; restore previous UMB link state
 26001                                  	
 26002                                  	mov	ax,5803h
 26003                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26004                                  				; AL = function code: (DOS 5beta) set UMB link state
 26005                                  	mov	bx,si			; restore previous allocation strategy
 26006                                  	
 26007                                  	mov	ax,5801h
 26008                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26009                                  				; AL = function code: set allocation strategy
 26010                                  	cmp	cx,0A000h		; Is the allocated memory block (segment) a UMB?
 26011                                  	jb	short dosdata_noumb	; no
 26012                                  	
 26013                                  	;mov	word [ALLOCLIM],0FFFFh
 26014                                  	;mov	word [memlo],0
 26015                                  	mov	[memhi],cx
 26016                                  	dec	cx
 26017                                  	mov	es,cx			; point to arena/mcb
 26018                                  	; 10/04/2024
 26019                                  	xor	cx,cx ; 0
 26020                                  	mov	[memlo],cx ; 0
 26021                                  	dec	cx
 26022                                  	mov	[ALLOCLIM],cx ; 0FFFFh
 26023                                  
 26024                                  	mov	word [es:1],8		; [es:arena_owner], 8 ; set impossible owner
 26025                                  	mov	word [es:8],4453h	; [es:arena_name],'SD' ; System Data
 26026                                  	inc	byte [dosdata_umb]	; 1 -> 2 ; DOSDATA=UMB done.
 26027                                  	jmp	dosfts
 26028                                  
 26029                                  dosdata_umb_done:
 26030                                  	mov	ax,[prev_memhi]		; (recent memory block/segment before UMBs)
 26031                                  	mov	[memhi],ax
 26032                                  	mov	ax,[prev_alloclim]
 26033                                  	mov	[ALLOCLIM],ax
 26034                                  dosdata_noumb:
 26035                                   	;;;
 26036                                  %endif
 26037                                  
 26038                                  ;skipstack:
 26039                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26040                                  	; (SYSINIT:0F99h)
 26041                                  
 26042                                  	; 11/12/2022
 26043                                  	; ds = cs
 26044                                  	;push	cs
 26045                                  	;pop	ds
 26046                                  
 26047 00000FBD A0[9D02]                	mov	al,[FILES]
 26048 00000FC0 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 26049                                  				;  it does sign extend.
 26050 00000FC2 89C1                    	mov	cx,ax
 26051 00000FC4 31DB                    	xor	bx,bx		;close standard input
 26052 00000FC6 B43E                    	mov	ah,3Eh ; CLOSE
 26053 00000FC8 CD21                    	int	21h
 26054 00000FCA BB0200                  	mov	bx,2
 26055                                  rcclloop:			;close everybody but standard output
 26056 00000FCD B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 26057 00000FCF CD21                    	int	21h		; in case we can't get new one open.
 26058 00000FD1 43                      	inc	bx
 26059 00000FD2 E2F9                    	loop	rcclloop
 26060                                  
 26061 00000FD4 BA[6444]                	mov	dx,condev
 26062 00000FD7 B002                    	mov	al,2
 26063 00000FD9 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 26064 00000FDB F9                      	stc			; set for possible int 24
 26065 00000FDC CD21                    	int	21h
 26066 00000FDE 7305                    	jnc	short goaux
 26067 00000FE0 E8E433                  	call	badfil
 26068 00000FE3 EB13                    	jmp	short goaux2
 26069                                  goaux:	
 26070 00000FE5 50                      	push	ax
 26071 00000FE6 BB0100                  	mov	bx,1		;close standard output
 26072 00000FE9 B43E                    	mov	ah,3Eh ; CLOSE
 26073 00000FEB CD21                    	int	21h
 26074 00000FED 58                      	pop	ax
 26075                                  
 26076 00000FEE 89C3                    	mov	bx,ax		;new device handle
 26077 00000FF0 B445                    	mov	ah,45h ; XDUP
 26078 00000FF2 CD21                    	int	21h		;dup to 1,stdout
 26079 00000FF4 B445                    	mov	ah,45h ; XDUP
 26080 00000FF6 CD21                    	int	21h		;dup to 2,stderr
 26081                                  goaux2: 
 26082 00000FF8 BA[6844]                	mov	dx,auxdev
 26083 00000FFB B002                    	mov	al,2		;read/write access
 26084 00000FFD E8F833                  	call	open_dev
 26085                                  
 26086 00001000 BA[6C44]                	mov	dx,prndev
 26087 00001003 B001                    	mov	al,1		;write only
 26088 00001005 E8F033                  	call	open_dev
 26089                                  
 26090                                  ;global rearm command for shared interrupt devices attached in the system;
 26091                                  ;shared interrupt attachment has some problem when it issues interrupt
 26092                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 26093                                  ;no further interrupts on that level will be presented until a global rearm
 26094                                  ;is issued. by the request of the system architecture group, msbio will
 26095                                  ;issue a global rearm after every device driver is loaded.
 26096                                  ;to issue a global rearm:	;for pc1,xt,palace
 26097                                  ;
 26098                                  ;			  out 02f2h,xx  ; interrupt level 2
 26099                                  ;			  out 02f3h,xx  ; interrupt level 3
 26100                                  ;			  out 02f4h,xx  ; interrupt level 4
 26101                                  ;			  out 02f5h,xx  ; interrupt level 5
 26102                                  ;			  out 02f6h,xx  ; interrupt level 6
 26103                                  ;			  out 02f7h,xx  ; interrupt level 7
 26104                                  ;
 26105                                  ;	for pc at,in addition to the above commands,
 26106                                  ;	need to handle the secondary interrupt handler
 26107                                  ;
 26108                                  ;			  out 06f2h,xx  ; interrupt level 10
 26109                                  ;			  out 06f3h,xx  ; interrupt level 11
 26110                                  ;			  out 06f4h,xx  ; interrupt level 12
 26111                                  ;			  out 06f6h,xx  ; interrupt level 14
 26112                                  ;			  out 06f7h,xx  ; interrupt level 15
 26113                                  ;
 26114                                  ;	for round-up machine
 26115                                  ;
 26116                                  ;			  none.
 26117                                  
 26118                                  ; where xx stands for any value.
 26119                                  ;
 26120                                  ; for your information,after naples level machine,the system service bios
 26121                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 26122                                  
 26123                                  	; 24/10/2022
 26124                                  
 26125 00001008 50                      	push	ax
 26126 00001009 53                      	push	bx
 26127 0000100A 52                      	push	dx
 26128 0000100B 06                      	push	es
 26129                                  
 26130 0000100C B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 26131 0000100E BAF202                  	mov	dx,2F2h 		;get starting address
 26132 00001011 EE                      	out	dx,al			; out 02f2h,0ffh
 26133 00001012 42                      	inc	dx
 26134 00001013 EE                      	out	dx,al			; out 02f3h,0ffh
 26135 00001014 42                      	inc	dx
 26136 00001015 EE                      	out	dx,al			; out 02f4h,0ffh
 26137 00001016 42                      	inc	dx
 26138 00001017 EE                      	out	dx,al			; out 02f5h,0ffh
 26139 00001018 42                      	inc	dx
 26140 00001019 EE                      	out	dx,al			; out 02f6h,0ffh
 26141 0000101A 42                      	inc	dx
 26142 0000101B EE                      	out	dx,al			; out 02f7h,0ffh
 26143                                  
 26144                                  ;sb secondary global rearm
 26145                                  
 26146 0000101C B800F0                  	mov	ax,0F000h		;get machine type
 26147 0000101F 8EC0                    	mov	es,ax
 26148 00001021 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 26149 00001027 740D                    	je	short startrearm	; *if at no need to check
 26150                                  
 26151 00001029 B4C0                    	mov	ah,0C0h 		;get system configuration
 26152 0000102B CD15                    	int	15h			; *
 26153 0000102D 7216                    	jc	short finishrearm	; *jmp if old rom
 26154                                  
 26155                                  ; test feature byte for secondary interrupt controller
 26156                                  
 26157 0000102F 26F6470540              	test	byte [es:bx+5],40h
 26158                                  	; 24/10/2022
 26159                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 26160 00001034 740F                    	je	short finishrearm	;jmp if it is there
 26161                                  
 26162                                  startrearm:
 26163 00001036 B0FF                    	mov	al,0FFh 		;write any pattern to port
 26164 00001038 BAF206                  	mov	dx,6F2h 		;get starting address
 26165 0000103B EE                      	out	dx,al			;out 06f2h,0ffh
 26166 0000103C 42                      	inc	dx			;bump address
 26167 0000103D EE                      	out	dx,al			;out 06f3h,0ffh
 26168 0000103E 42                      	inc	dx			;bump address
 26169 0000103F EE                      	out	dx,al			;out 06f4h,0ffh
 26170 00001040 42                      	inc	dx			;bump address
 26171 00001041 42                      	inc	dx			;bump address
 26172 00001042 EE                      	out	dx,al			;out 06f6h,0ffh
 26173 00001043 42                      	inc	dx			;bump address
 26174 00001044 EE                      	out	dx,al			;out 06f7h,0ffh
 26175                                  
 26176                                  finishrearm:
 26177 00001045 07                      	pop	es
 26178 00001046 5A                      	pop	dx
 26179 00001047 5B                      	pop	bx
 26180 00001048 58                      	pop	ax
 26181                                  
 26182                                  ;    global rearm end *******************
 26183                                  
 26184                                  ; ----------------------------------------------------------------------
 26185                                  ; allocate sysinit_base for install= command
 26186                                  ; ----------------------------------------------------------------------
 26187                                  ; sysinit_base allocation.
 26188                                  ;   check if endfile has been called to handle install= command.
 26189                                  
 26190                                  set_sysinit_base:
 26191                                  
 26192                                  ; ----------------------------------------------------------------------
 26193                                  ;sysinit_base will be established in the secure area of
 26194                                  ;lower memory when it handles the first install= command.
 26195                                  ;sysinit_base is the place where the actual exec function will be called and
 26196                                  ;will check sysinit module in high memory if it is damaged by the application
 26197                                  ;program.  if sysinit module has been broken,then "memory error..." message
 26198                                  ;is displayed by sysinit_base.
 26199                                  ; ----------------------------------------------------------------------
 26200                                  
 26201                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26202                                  	; (SYSINIT:1028h)
 26203                                  
 26204                                  	; 11/12/2022
 26205                                  	; ds = cs
 26206 00001049 50                      	push	ax			; set devmark for mem command
 26207 0000104A A1[6203]                	mov	ax,[memhi]
 26208 0000104D 2B06[6603]              	sub	ax,[area]
 26209 00001051 A3[5E03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 26210                                  	;mov	al,devmark_inst ; 'T'
 26211 00001054 B054                    	mov	al,'T'
 26212 00001056 E86304                  	call	setdevmark
 26213 00001059 58                      	pop	ax
 26214                                  
 26215 0000105A 8B3E[6203]              	mov	di,[memhi]
 26216 0000105E 8EC7                    	mov	es,di
 26217 00001060 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 26218 00001064 31FF                    	xor	di,di
 26219 00001066 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 26220 0000106A BE[7811]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 26221 0000106D B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 26222                                  	; 24/10/2022 
 26223                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 26224 00001070 010E[6003]              	add	[memlo],cx
 26225                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 26226                                  	; 11/12/2022
 26227                                  	; ds = cs
 26228                                  	;or	byte [cs:setdevmarkflag],2
 26229 00001074 800E[E114]02            	or	byte [setdevmarkflag],2
 26230                                  	;or	byte [setdevmarkflag],for_devmark
 26231 00001079 E81531                  	call	round			; check mem error. also,readjust memhi for the next use.
 26232 0000107C F3A4                    	rep	movsb			; reallocate it.
 26233                                  
 26234 0000107E C706[D402][5F11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 26235 00001084 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 26236                                  	;or	word [install_flag],has_installed ; set the flag.
 26237                                  	;or	byte [install_flag],has_installed ; 2
 26238                                  	; 11/12/2022
 26239 00001088 800E[CC02]02            	or	byte [install_flag],2
 26240                                  	; 24/10/2022
 26241                                  	;or	word [install_flag],2	
 26242                                  
 26243                                  ; ----------------------------------------------------------------------
 26244                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 26245                                  ; the top of the memory will be allocated for sysinit and config.sys if
 26246                                  ; have_install_cmd.
 26247                                  ; ----------------------------------------------------------------------
 26248                                  
 26249 0000108D E80131                  	call	round
 26250 00001090 8B1E[6203]              	mov	bx,[memhi]
 26251 00001094 A1[6603]                	mov	ax,[area]
 26252 00001097 A3[5C03]                	mov	[old_area],ax		; save [area]
 26253 0000109A 8EC0                    	mov	es,ax			;calc what we needed
 26254 0000109C 29C3                    	sub	bx,ax
 26255                                  	; 24/10/2022
 26256 0000109E B44A                    	mov	ah,4Ah ; SETBLOCK
 26257 000010A0 CD21                    	int	21h			;give the rest back
 26258                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26259                                  		; ES = segment address of block to change
 26260                                  		; BX = new size in paragraphs
 26261 000010A2 06                      	push	es
 26262 000010A3 8CC0                    	mov	ax,es
 26263 000010A5 48                      	dec	ax
 26264 000010A6 8EC0                    	mov	es,ax			;point to arena
 26265                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 26266                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 26267                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 26268                                  	; 24/10/2022
 26269 000010A8 26C70601000800          	mov	word [es:1],8		;set impossible owner
 26270 000010AF 26C70608005344          	mov	word [es:8],'SD'	; System Data
 26271 000010B6 07                      	pop	es
 26272                                  
 26273 000010B7 BBFFFF                  	mov	bx,0FFFFh
 26274 000010BA B448                    	mov	ah,48h ; ALLOC
 26275 000010BC CD21                    	int	21h
 26276 000010BE B448                    	mov	ah,48h ; ALLOC
 26277 000010C0 CD21                    	int	21h			; allocate the rest of the memory
 26278                                  		; DOS - 2+ - ALLOCATE MEMORY
 26279                                  		; BX = number of 16-byte paragraphs desired
 26280 000010C2 A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 26281 000010C5 C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 26282                                  
 26283                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 26284                                  ;;;; allocated.
 26285                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 26286                                  ;;;; this time) to the top-of-the memory),here we are going to
 26287                                  ;;;; 1). "setblock" from memhi to confbot.
 26288                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 26289                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 26290                                  
 26291                                  ;memory allocation for sysinit,confbot module.
 26292                                  
 26293 000010CB 8EC0                    	mov	es,ax
 26294                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26295                                  	; (SYSINIT:11DFh)
 26296 000010CD 8B1E[A102]              	mov	bx,[CONFBOT]
 26297                                  	; 24/10/2022
 26298                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 26299 000010D1 29C3                    	sub	bx,ax			; confbot - memhi
 26300 000010D3 4B                      	dec	bx			; make a room for the memory block id.
 26301 000010D4 4B                      	dec	bx			; make sure!!!.
 26302 000010D5 B44A                    	mov	ah,4Ah ; SETBLOCK
 26303 000010D7 CD21                    	int	21h			; this will free (confbot to top of memory)
 26304                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26305                                  		; ES = segment address of block to change
 26306                                  		; BX = new size in paragraphs
 26307 000010D9 BBFFFF                  	mov	bx,0FFFFh
 26308 000010DC B448                    	mov	ah,48h ; ALLOC
 26309 000010DE CD21                    	int	21h
 26310 000010E0 B448                    	mov	ah,48h ; ALLOC
 26311 000010E2 CD21                    	int	21h			; allocate (confbot to top of memory)
 26312                                  		; DOS - 2+ - ALLOCATE MEMORY
 26313                                  		; BX = number of 16-byte paragraphs desired
 26314 000010E4 A3[6603]                	mov	[area],ax		; save allocated memory segment.
 26315                                  					; need this to free this area for command.com.
 26316 000010E7 8E06[6203]              	mov	es,[memhi]
 26317 000010EB B449                    	mov	ah,49h			; free allocated memory.
 26318 000010ED CD21                    	int	21h			; free (memhi to confbot(=area))
 26319                                  		; DOS - 2+ - FREE MEMORY
 26320                                  		; ES = segment address of area to be freed
 26321                                  endfile_ret:
 26322 000010EF C3                      	retn
 26323                                  
 26324                                  ; End of "EndFile" DOS structure configuration.
 26325                                  
 26326                                  ; ----------------------------------------------------------------------
 26327                                  ; 26/03/2019 - Retro DOS v4.0
 26328                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 26329                                  ; ----------------------------------------------------------------------
 26330                                  ; Do_Install_Exec
 26331                                  ;
 26332                                  ; This procedure is used to EXEC a program being loaded via the 
 26333                                  ; "install=" mechanism in config.sys. It does this by setting up
 26334                                  ; the parameters, and then jumping to sysinit_base, which has been
 26335                                  ; setup in low memory. When complete, sysinit_base will jump back
 26336                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 26337                                  ; program).
 26338                                  
 26339                                  ;SYSINIT:10CFh:
 26340                                  
 26341                                  do_install_exec:			; now,handles install= command.
 26342                                  
 26343 000010F0 56                      	push	si			; save si for config.sys again.
 26344                                  
 26345                                  ; we are going to call load/exec function.
 26346                                  ; set es:bx to the parameter block here;;;;;;;
 26347                                  ; set ds:dx to the asciiz string. remember that we already has 0
 26348                                  ; after the filename. so parameter starts after that. if next
 26349                                  ; character is a line feed (i.e. 10),then assume that the 0
 26350                                  ; we already encountered used to be a carrage return. in this
 26351                                  ; case,let's set the length to 0 which will be followed by
 26352                                  ; carridge return.
 26353                                  
 26354                                  ; es:si -> command line in config.sys. points to the first non blank
 26355                                  ;character after =.
 26356                                  
 26357 000010F1 06                      	push	es
 26358 000010F2 1E                      	push	ds
 26359 000010F3 07                      	pop	es
 26360 000010F4 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 26361 000010F5 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 26362                                  
 26363 000010F7 31C9                    	xor	cx,cx
 26364 000010F9 FC                      	cld
 26365 000010FA 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 26366 00001100 BF[F002]                	mov	di,ldexec_parm
 26367                                  installfilename:			; skip the file name
 26368 00001103 AC                      	lodsb				; al = ds:si; si++
 26369                                  	; 05/09/2023
 26370 00001104 08C0                    	or	al,al
 26371                                  	;cmp	al,0
 26372                                  	;je	short got_installparm
 26373                                  	;jmp	short installfilename
 26374                                  	; 10/04/2024
 26375 00001106 75FB                    	jnz	short installfilename
 26376                                  got_installparm:			; copy the parameters to ldexec_parm
 26377 00001108 AC                      	lodsb
 26378 00001109 268805                  	mov	[es:di],al
 26379 0000110C 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 26380 0000110E 7405                    	je	short done_installparm
 26381 00001110 FEC1                    	inc	cl			; # of char. in the parm.
 26382 00001112 47                      	inc	di
 26383 00001113 EBF3                    	jmp	short got_installparm
 26384                                  done_installparm:
 26385 00001115 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 26386                                  	; 05/09/2023
 26387 0000111A 08C9                    	or	cl,cl
 26388                                  	;cmp	cl,0			; if no parm,then
 26389 0000111C 7506                    	jne	short install_seg_set 	; let the parm area
 26390 0000111E 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 26391                                  					; starts with cr.
 26392                                  install_seg_set:
 26393                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 26394 00001124 31DB                    	xor	bx,bx
 26395                                  	;mov	word [cs:0],0		; make a null environment segment
 26396 00001126 2E891F                  	mov	[cs:bx],bx ; 05/09/2023
 26397 00001129 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 26398                                  
 26399                                  ;---------------------------------------------------M067----------------
 26400                                  ;
 26401                                  ; 	the environment pointer is made 0. so the current environment ptr.
 26402                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 26403                                  ;
 26404                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 26405                                  ;
 26406                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 26407                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 26408                                  ; 	was fixed. 
 26409                                  ;
 26410                                  ; ----------------------------------------------------------------------
 26411                                  
 26412                                  ;;ifdef MULTI_CONFIG
 26413                                  
 26414                                  ; If there's any environment data in "config_wrkseg", pass to app
 26415                                  
 26416                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 26417                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26418                                  ;%if 0
 26419 0000112B 89C1                    	mov	cx,ax ; *
 26420                                  	; 05/09/2023
 26421 0000112D 2E391E[D814]            	cmp	[cs:config_envlen],bx ; 0
 26422                                  	;cmp	word [cs:config_envlen],0
 26423 00001132 7405                    	je	short no_envdata2
 26424 00001134 2E8B0E[DA14]            	mov	cx,[cs:config_wrkseg] ; *
 26425                                  no_envdata2:
 26426                                  ;;endif  ;MULTI_CONFIG
 26427                                  
 26428                                  ;%endif	; 24/10/2022
 26429                                  
 26430                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 26431                                  	; 05/09/2023 (BugFix)
 26432                                  	; 24/10/2022
 26433 00001139 2E890E[4003]            	mov	[cs:iexec.environ],cx ; *
 26434                                  	; 02/11/2022
 26435                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 26436                                  
 26437                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 26438 0000113E 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 26439                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 26440 00001142 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 26441                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 26442 00001146 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 26443 0000114A E86000                  	call	sum_up
 26444 0000114D 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 26445 00001151 31C0                    	xor	ax,ax
 26446 00001153 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 26447 00001155 BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 26448 00001158 06                      	push	es			; save es,ds for load/exec
 26449 00001159 1E                      	push	ds			; these registers will be restored in sysinit_base.
 26450 0000115A 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 26451                                  					; load/exec function and check sum.
 26452                                  
 26453                                  ;----------------------------------------
 26454                                  
 26455                                  ;j.k. this is the returning address from sysinit_base.
 26456                                  
 26457                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26458                                  
 26459                                  sysinitptr:				; returning far address from sysinit_base
 26460 0000115F 5E                      	pop	si			; restore si for config.sys file.
 26461 00001160 06                      	push	es
 26462 00001161 1E                      	push	ds
 26463 00001162 07                      	pop	es
 26464 00001163 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 26465 00001164 7305                            jnc     short install_exit_ret
 26466                                  
 26467 00001166 56                      	push	si			; error in loading the file for install=.
 26468 00001167 E86132                  	call	badload 		; es:si-> path,filename,0.
 26469 0000116A 5E                      	pop	si
 26470                                  
 26471                                  	; 24/10/2022
 26472                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 26473                                  	; 11/12/2022
 26474                                  	; ds = cs
 26475                                  
 26476                                  	; 30/12/2022 - Retro DOS v4.2
 26477                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 26478                                  
 26479                                  install_exit_ret:
 26480 0000116B C3                      	retn
 26481                                  
 26482                                  ; 30/12/2022 - Retro DOS v4.2
 26483                                  %if 0
 26484                                  install_exit_ret:
 26485                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 26486                                  
 26487                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 26488                                  ;SYSINIT:1142h:
 26489                                  	mov     ah,4Dh
 26490                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 26491                                  	cmp     ah,3
 26492                                  	jz      short sysinitptr_retn
 26493                                  	call    error_line
 26494                                  	stc
 26495                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 26496                                  	retn		
 26497                                  
 26498                                  %endif ; 24/10/2022
 26499                                  
 26500                                  ; ----------------------------------------------------------------------
 26501                                  
 26502                                  ;**	ParaRound - Round Up length to paragraph multiple
 26503                                  ;
 26504                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 26505                                  ;	by 16 yielding a "length in paragraphs" value.
 26506                                  ;
 26507                                  ;	ENTRY	(ax) = byte length
 26508                                  ;	EXIT	(ax) = rounded up length in paragraphs
 26509                                  ;	USES	ax, flags
 26510                                  
 26511                                  ParaRound:
 26512 0000116C 83C00F                  	add	ax,15
 26513 0000116F D1D8                    	rcr	ax,1
 26514 00001171 D1E8                    	shr	ax,1
 26515 00001173 D1E8                    	shr	ax,1
 26516 00001175 D1E8                    	shr	ax,1
 26517 00001177 C3                      	retn
 26518                                  
 26519                                  ; ----------------------------------------------------------------------
 26520                                  ; sysinit_base module.
 26521                                  ;
 26522                                  ; This module is relocated by the routine EndFile to a location in low
 26523                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 26524                                  ; that are being loaded by the "install=" command. After the EXEC call
 26525                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 26526                                  ; top of memory) to be sure that the EXECed program did not damage it.
 26527                                  ; If it did, then this module will print an error message and stop the
 26528                                  ; system. Otherwise, it returns control to SYSINIT.
 26529                                  ;
 26530                                  ;in: after relocation,
 26531                                  ;    ax = 4b00h - load and execute the program dos function.
 26532                                  ;    ds = confbot. segment of config.sys file image
 26533                                  ;    es = sysinitseg. segment of sysinit module itself.
 26534                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 26535                                  ;    es:bx = pointer to a parameter block for load.
 26536                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 26537                                  ;    bigsize (word) - # of word from confbot to SI_end.
 26538                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 26539                                  ;			word boundary moduler form.
 26540                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 26541                                  ;
 26542                                  ;note: sysinit should save necessary registers and when the control is back
 26543                                  
 26544                                  	; 24/10/2022
 26545                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 26546                                  sysinit_base:				
 26547 00001178 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 26548 0000117D 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 26549 00001182 CD21                    	int	21h			; load/exec dos call.
 26550 00001184 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 26551 00001189 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 26552 0000118E 1F                      	pop	ds			; restore confbot seg
 26553 0000118F 07                      	pop	es			; restore sysinitseg
 26554 00001190 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 26555                                  					; at this time,i don't have to worry about
 26556                                  					; that sysinit module has been broken or not.
 26557 00001192 E81800                  	call	sum_up			; otherwise,check if it is good.
 26558 00001195 263906[D802]            	cmp	[es:checksum],ax
 26559 0000119A 740C                    	je	short sysinit_base_end
 26560                                  
 26561                                  ;	memory broken. show "memory allocation error" message and stall.
 26562                                  
 26563 0000119C B409                    	mov	ah,9
 26564 0000119E 0E                      	push	cs
 26565 0000119F 1F                      	pop	ds
 26566                                  	; 30/12/2022
 26567                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 26568                                  	;mov	dx,102
 26569 000011A0 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 26570                                  					; 66h (for MSDOS 6.21 SYSINIT)
 26571 000011A3 CD21                    	int	21h
 26572                                  		; DOS - PRINT STRING
 26573                                  		; DS:DX -> string terminated by "$"
 26574                                  
 26575                                  	; 30/12/2022 - Retro DOS v4.2
 26576                                  stall:
 26577                                  	; 24/10/2022
 26578                                  _stall: 
 26579                                  	; 11/12/2022
 26580 000011A5 F4                      	hlt 
 26581                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26582                                  	;hlt				;use HLT to minimize energy consumption
 26583 000011A6 EBFD                            jmp	short _stall
 26584                                  
 26585                                  sysinit_base_end: 
 26586 000011A8 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 26587                                  
 26588                                  ;-------------------------------------
 26589                                  
 26590                                  sum_up:
 26591                                  
 26592                                  ;in:   es - sysinitseg.
 26593                                  ;out:  ax - result
 26594                                  ;
 26595                                  ;remark: since this routine will only check starting from "locstack" to the end of
 26596                                  ;	 sysinit segment,the data area, and the current stack area are not
 26597                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 26598                                  ;	 gaurantee to be safe.
 26599                                  ;
 26600                                  ;first sum up confbot seg.
 26601                                  
 26602 000011AD 1E                      	push	ds
 26603                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26604                                  	; (SYSINIT:12C6h)
 26605 000011AE 26A1[A102]              	mov	ax,[es:CONFBOT]
 26606                                  	; 24/10/2022
 26607                                  	;mov	ax,[es:top_of_cdss]
 26608 000011B2 8ED8                    	mov	ds,ax
 26609 000011B4 31F6                    	xor	si,si
 26610 000011B6 31C0                    	xor	ax,ax
 26611 000011B8 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 26612                                  					; whole test better fail.
 26613 000011BD D1E9                    	shr	cx,1			; make it a word count
 26614 000011BF 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 26615                                  sum1:
 26616 000011C1 0304                    	add	ax,[si]
 26617 000011C3 46                      	inc	si
 26618 000011C4 46                      	inc	si
 26619 000011C5 E2FA                    	loop	sum1
 26620                                  ;now,sum up sysinit module.
 26621                                  sum_sys_code:
 26622                                  	; 24/10/2022
 26623 000011C7 BEC611                  	mov	si,locstack ;; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 26624                                  			    ;; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 26625                                  			    ; 10/04/2024	
 26626                                  			    ; 586h (PCDOS 7.1 IBMBIO.COM, SYSINIT)	
 26627                                  				        ; starting after the stack.  M069
 26628                                  					;  this does not cover the possible stack code!!!
 26629                                  	;;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 26630                                  	; 02/11/2022
 26631                                  	;;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 26632                                  	; 10/04/2024
 26633                                  	;mov	cx,5B40h  ; (23360) for PCDOS 7.1 IBMBIO.COM (SYSINIT)	
 26634                                  	; 30/12/2022  
 26635 000011CA B9[A04D]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 26636 000011CD 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 26637 000011CF D1E9                    	shr	cx,1
 26638                                  sum2:
 26639 000011D1 260304                  	add	ax,[es:si]
 26640 000011D4 46                      	inc	si
 26641 000011D5 46                      	inc	si
 26642 000011D6 E2F9                    	loop	sum2
 26643 000011D8 1F                      	pop	ds
 26644 000011D9 C3                      	retn
 26645                                  
 26646                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26647                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 26648                                  ; (SYSINIT:12F2h)
 26649                                  ; 10/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 26650                                  ; (SYSINIT:149Dh)
 26651                                  
 26652                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 26653                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h)
 26654                                  				    ; = 62 (PCDOS 7.1 IBMBIO.COM, SYSINIT:143Bh)
 26655                                  sysinit_base_ssx:	
 26656 000011DA 0000                    	dw	0
 26657                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 26658                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1295h)
 26659                                  				    ; = 64 (PCDOS 7.1 IBMBIO.COM, SYSINIT:1440h)
 26660                                  sysinit_base_spx:
 26661 000011DC 0000                    	dw	0	
 26662                                  
 26663                                  mem_alloc_err_msgx:
 26664                                  
 26665                                         ;include msbio.cl4		; memory allocation error message
 26666                                  
 26667                                  ;(SYSINIT:12F6h: ; MSDOS 6.21 IO.SYS)
 26668                                  ;SYSINIT:14A1h:	; PCDOS 7.1 IBMBIO.COM
 26669 000011DE 0D0A                    	db	0Dh,0Ah
 26670 000011E0 4D656D6F727920616C-     	db 	'Memory allocation error $'
 26670 000011E9 6C6F636174696F6E20-
 26670 000011F2 6572726F722024     
 26671                                  
 26672                                  end_sysinit_base: ; label byte
 26673                                  	; 24/10/2022
 26674                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 26675                                  
 26676                                  ; ----------------------------------------------------------------------
 26677                                  ; Set_Buffer
 26678                                  ;
 26679                                  ;function: set buffers in the real memory.				  
 26680                                  ;	   lastly set the memhi,memlo for the next available free address.
 26681                                  ;
 26682                                  ;input:    ds:bx -> buffinfo.
 26683                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 26684                                  ;	   singlebuffersize = buffer header size + sector size		  
 26685                                  ;
 26686                                  ;output:   buffers Queue established.	       				   
 26687                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 26688                                  ; ----------------------------------------------------------------------
 26689                                  
 26690                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26691                                  	; (SYSINIT:11DCh)
 26692                                  
 26693                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26694                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:14BCh)
 26695                                  
 26696                                  set_buffer:
 26697 000011F9 30D2                    	xor	dl,dl				; assume buffers not in HMA
 26698 000011FB E85500                  	call	GetBufferAddr
 26699 000011FE 7402                    	jz	short set_buff_1
 26700 00001200 B201                    	mov	dl,1				; buffers in HMA
 26701                                  set_buff_1:
 26702                                  	; 25/10/2022
 26703                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 26704 00001202 893F                    	mov	[bx],di
 26705                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 26706 00001204 8C4702                  	mov	[bx+2],es
 26707                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 26708 00001207 C747040000              	mov	word [bx+4],0
 26709                                  
 26710 0000120C 89F8                    	mov	ax,di
 26711 0000120E 2E8B0E[9702]            	mov	cx,[cs:buffers]
 26712 00001213 57                      	push	di				; remember first buffer
 26713                                  
 26714                                  ;	for each buffer
 26715                                  
 26716                                  nxt_buff:
 26717 00001214 E86700                  	call	set_buffer_info 		; set buf_link,buf_id...
 26718 00001217 89C7                    	mov	di,ax
 26719 00001219 E2F9                    	loop	nxt_buff
 26720                                  
 26721 0000121B 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 26722                                  
 26723 00001220 59                      	pop	cx				; get first buffer
 26724                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 26725 00001221 26890D                  	mov	[es:di],cx
 26726 00001224 87F9                    	xchg	cx,di
 26727                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 26728                                  	; 25/10/2022
 26729 00001226 26894D02                	mov	[es:di+2],cx
 26730                                  
 26731 0000122A 08D2                    	or	dl,dl				; In HMa ?
 26732 0000122C 7417                    	jz	short set_buff_2		; no
 26733                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 26734 0000122E C6470C01                	mov	byte [bx+12],1
 26735 00001232 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 26736                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 26737 00001236 C7470D0000              	mov	word [bx+13],0
 26738                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 26739 0000123B 89470F                  	mov	word [bx+15],ax
 26740 0000123E 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 26741                                  	; 11/04/2024 - Retro DOS v5.0
 26742                                  	; 05/09/2023
 26743                                  	;;sub	ax,bufinsiz ; 20		; buffer head not required
 26744                                  	;sub	ax,20
 26745 00001242 83E818                  	sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 26746                                  
 26747                                  set_buff_2:
 26748 00001245 2E0106[6003]            	add	[cs:memlo],ax
 26749                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26750 0000124A 2E800E[E114]02          	or	byte [cs:setdevmarkflag],2
 26751                                  	;call	round
 26752                                  	;retn
 26753                                  	; 12/12/2022
 26754 00001250 E93E2F                  	jmp	round
 26755                                  
 26756                                  ; ----------------------------------------------------------------------
 26757                                  ; procedure : GetBufferAddr
 26758                                  ;
 26759                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 26760                                  ;
 26761                                  ; returns in es:di the buffer adress
 26762                                  ; returns NZ if allocated in HMA
 26763                                  ; ----------------------------------------------------------------------
 26764                                  
 26765                                  	; 25/10/2022 
 26766                                  GetBufferAddr:
 26767 00001253 53                      	push	bx
 26768 00001254 52                      	push	dx
 26769                                  
 26770                                  ; 18/03/2025 - MiniDOS 1.0
 26771                                  %if 0
 26772                                  	; 11/04/2024 - Retro DOS v5.0
 26773                                  	; PCDOS 7.1 IBMBIO.COM
 26774                                  	;;;
 26775                                  	cmp	byte [cs:dosdata_umb],2
 26776                                  				; is dosdata moved to UMB ? (DOSDATA=UMB done)
 26777                                  	jne	short gba_1     ; no
 26778                                  	cmp	word [bx+2],0FFFFh ; is the buffer (already) in HMA ?
 26779                                  	je	short gba_2	; yes
 26780                                  gba_1:
 26781                                  	;;;
 26782                                  
 26783                                  %endif
 26784 00001255 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 26785 00001259 2EF726[9702]            	mul	word [cs:buffers]
 26786                                  	;add	ax,0Fh
 26787 0000125E 83C00F                  	add	ax,15 
 26788                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26789                                  	;and	ax,~15	; 0FFF0h	; para round
 26790                                  	; 12/12/2022
 26791 00001261 24F0                    	and	al,~15	; 0F0h
 26792 00001263 89C3                    	mov	bx,ax
 26793 00001265 B8024A                  	mov	ax,4A02h
 26794                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 26795 00001268 CD2F                    	int	2Fh	; DOS 5+ - ALLOCATE HMA SPACE
 26796                                  			;     AX = 4A02h
 26797                                  			;     BX = number of bytes
 26798                                  			; Return:
 26799                                  			;     ES:DI -> start of allocated HMA block or FFFFh:FFFFh
 26800                                  			;     BX = number of bytes actually allocated
 26801                                  			;	   (rounded up to next paragraph)
 26802                                  			; Notes:
 26803                                  			;     this call is not valid unless DOS is loaded in the HMA
 26804                                  			;     (DOS=HIGH)
 26805                                  
 26806 0000126A 83FFFF                  	cmp	di,0FFFFh
 26807 0000126D 7506                    	jne	short got_hma
 26808                                  	
 26809                                  	;mov	di,0		; dont xor di,di Z flag needed
 26810                                  	; 05/09/2023
 26811                                  	; zf=1
 26812 0000126F 47                      	inc	di ; 0FFFFh -> 0
 26813                                  	; zf=1
 26814                                  	
 26815                                  	;zf=1
 26816                                  	;xor	di,di	; 25/10/2022
 26817                                  	;zf=1
 26818 00001270 2E8E06[6203]            	mov	es,[cs:memhi]
 26819                                  got_hma:
 26820 00001275 5A                      	pop	dx
 26821 00001276 5B                      	pop	bx
 26822 00001277 C3                      	retn
 26823                                  
 26824                                  	; 11/04/2024 - Retro DOS v5.0
 26825                                  	; PCDOS 7.1 IBMBIO.COM
 26826                                  	;;;
 26827                                  gba_2:
 26828 00001278 C43F                    	les	di,[bx]
 26829 0000127A 09FF                    	or	di,di
 26830                                  	;pop	dx
 26831                                  	;pop	bx
 26832                                  	;retn
 26833                                  	; 11/04/2024 - Retro DOS v5.0
 26834 0000127C EBF7                    	jmp	short got_hma
 26835                                  	;;;
 26836                                  
 26837                                  ; ----------------------------------------------------------------------
 26838                                  
 26839                                  set_buffer_info:
 26840                                  
 26841                                  ;function: set buf_link,buf_id,buf_sector
 26842                                  ;
 26843                                  ;in: es:di -> buffer header to be set.
 26844                                  ;    ax = di
 26845                                  ;
 26846                                  ;out:
 26847                                  ;    above entries set.
 26848                                  
 26849                                  	; 25/10/2022 
 26850 0000127E 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 26851                                  	;pop	word [es:di+buffinfo.buf_prev]
 26852 00001283 268F4502                	pop	word [es:di+2]
 26853 00001287 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 26854 0000128B 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 26855                                  	;mov	[es:di+buffinfo.buf_next],ax
 26856 00001290 268905                  	mov	[es:di],ax
 26857                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 26858 00001293 26C74504FF00            	mov	word [es:di+4],00FFh
 26859                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 26860 00001299 26C745060000            	mov	word [es:di+6],0
 26861                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 26862 0000129F 26C745080000            	mov	word [es:di+8],0
 26863 000012A5 C3                      	retn
 26864                                  
 26865                                  ; ======================================================================
 26866                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 26867                                  ; ----------------------------------------------------------------------
 26868                                  ; 27/03/2019 - Retro DOS v4.0
 26869                                  
 26870                                  ; ----------------------------------------------------------------------
 26871                                  ; ibmstack initialization routine.
 26872                                  ;
 26873                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 26874                                  ;	has been modified. this initialization routine also has to
 26875                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 26876                                  ;	should be set to signal that this interrupt handler is the
 26877                                  ;	first handler hooked to this interrupt vector.
 26878                                  ;	we determine this by looking at the instruction pointed by
 26879                                  ;	this vector. if it is iret, then this handler should be the
 26880                                  ;	first one. in our case, only the interrupt vector 77h is the
 26881                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 26882                                  ;
 26883                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 26884                                  ;	some design changes are needed to the above interrupt sharing
 26885                                  ;	method. the above sharing scheme assumes that 1). interrupt
 26886                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 26887                                  ;	interrupts would only be generated on levels 7 and 15.
 26888                                  ;	these assumptions are not true any more. we have to use the firstflag
 26889                                  ;	for every level of interrupt. we will set the firstflag on the following
 26890                                  ;	conditions:
 26891                                  ;
 26892                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 26893                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 26894                                  ;	 c. else if cs:ip points to an iret, then "first"
 26895                                  ;	 d. else if cs:ip points to dummy, then "first"
 26896                                  ;
 26897                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 26898                                  ;	be equal to the value at f000:ff01. this location is the initial value
 26899                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 26900                                  ;	the bioses for all of the machines.
 26901                                  ;
 26902                                  ;	system design group requests bios to handle the phantom interrupts.
 26903                                  ;
 26904                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 26905                                  ;	produced by the bogus adapter card even without interrupt request is
 26906                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 26907                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 26908                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 26909                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 26910                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 26911                                  ;	interrupt line.
 26912                                  ;
 26913                                  ;	to handle those "phantom" interrupts, the main stack code will check
 26914                                  ;	the own firstflag, and if it is not "first" (which means the forward
 26915                                  ;	pointer points to the legal shared interrupt handler), then pass the
 26916                                  ;	control. if it is the first, then the following action should be
 26917                                  ;	taken. we don't have to implement skack logic in this case.
 26918                                  ;
 26919                                  ;	to implement this logic, we rather choose a simple method.
 26920                                  ;	if ont of the above "firstflag" conditions is met, we are not
 26921                                  ;	going to hook this interrupt vector. the reason is if the original
 26922                                  ;	vector points to "iret" and do nothing, we don't need
 26923                                  ;	to implement the stack logic for it. this will simplify implementation
 26924                                  ;	while maintaining compatibility with the old version of dos.
 26925                                  ;	this implies that in the main stack code, there might be a stack code
 26926                                  ;	that will never be used, a dead code.
 26927                                  ;
 26928                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 26929                                  
 26930                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26931                                  	; (SYSINIT:1287h)
 26932                                  
 26933                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26934                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:157Ch)
 26935                                  
 26936                                  	; 14/12/2022
 26937                                  stackinit:
 26938 000012A6 50                      	push	ax
 26939 000012A7 1E                      	push	ds
 26940 000012A8 06                      	push	es
 26941 000012A9 53                      	push	bx
 26942 000012AA 51                      	push	cx
 26943 000012AB 52                      	push	dx
 26944 000012AC 57                      	push	di
 26945 000012AD 56                      	push	si
 26946 000012AE 55                      	push	bp
 26947                                  
 26948                                  ;currently es -> stack code area
 26949                                  
 26950                                  	; 12/12/2022
 26951                                  	; ds = cs
 26952 000012AF A1[8A02]                	mov	ax,[stack_count]
 26953 000012B2 89C1                    	mov	cx,ax  ; *!*!*  
 26954                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26955                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 26956                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 26957 000012B4 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 26958                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 26959 000012B8 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 26960 000012BB 26A3[0600]              	mov	[es:stacksize],ax
 26961                                  	; 12/12/2022
 26962 000012BF A1[8E02]                	mov	ax,[stack_addr]			; offset
 26963                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26964                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26965                                  	;mov	ax,[cs:stack_addr]  ; !!
 26966 000012C2 26A3[0800]              	mov	[es:stacks],ax
 26967                                  	; 12/12/2022
 26968 000012C6 89C5                    	mov	bp,ax ; *!*
 26969 000012C8 A1[9002]                	mov	ax,[stack_addr+2]
 26970                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26971                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26972                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 26973 000012CB 26A3[0A00]              	mov	[es:stacks+2],ax
 26974                                  
 26975                                  ; initialize the data fields with the parameters
 26976                                  
 26977                                  ; "firstentry" will always be at stacks
 26978                                  
 26979                                  	;mov	bp,[es:stacks]			; get offset of stack
 26980                                  	; 12/12/2022
 26981                                  	; bp = [es:stacks] ; *!*
 26982 000012CF 26892E[0C00]            	mov	[es:firstentry],bp
 26983                                  
 26984                                  ; the stacks will always immediately follow the table entries
 26985                                  
 26986 000012D4 B80800                  	mov	ax,entrysize ; 8
 26987                                  	;mov	cx,[es:stackcount]
 26988                                  	; 12/12/2022
 26989                                  	; cx = [es:stackcount] ; *!*!*
 26990 000012D7 F7E1                    	mul	cx
 26991 000012D9 01E8                    	add	ax,bp
 26992 000012DB 26A3[0400]              	mov	[es:stackat],ax
 26993 000012DF 89C3                    	mov	bx,ax
 26994 000012E1 83EB02                  	sub	bx,2
 26995                                  
 26996                                  ; zero the entire stack area to start with
 26997                                  
 26998 000012E4 268B3E[0400]            	mov	di,[es:stackat]
 26999 000012E9 26A1[0600]              	mov	ax,[es:stacksize]
 27000 000012ED F7E1                    	mul	cx
 27001 000012EF 89C1                    	mov	cx,ax
 27002 000012F1 31C0                    	xor	ax,ax
 27003 000012F3 06                      	push	es
 27004 000012F4 1F                      	pop	ds				;ds = relocated stack code seg.
 27005                                  
 27006                                  ;now, ds -> stack code area
 27007                                  
 27008 000012F5 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 27009 000012F9 FC                      	cld
 27010 000012FA F3AA                    	rep	stosb
 27011                                  
 27012 000012FC 8B0E[0200]              	mov	cx,[stackcount]
 27013                                  
 27014                                  ; loop for "count" times, building a table entry
 27015                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 27016                                  ;  cx = number of entries
 27017                                  ;  es:bp => base of stacks - 2
 27018                                  ;  es:bx => first table entry
 27019                                  
 27020                                  buildloop:
 27021                                  	; 11/12/2022
 27022                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 27023                                  	; 25/10/2022
 27024                                  	;mov	byte [es:bp],free
 27025                                  	; 06/07/2023
 27026 00001300 26884600                	mov	[es:bp],al ; 0 ; free
 27027 00001304 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 27028                                  	;mov	[es:bp+1],al
 27029 00001308 26894602                	mov	[es:bp+savedsp],ax
 27030                                  	;mov	[es:bp2],ax
 27031 0000130C 26894604                	mov	[es:bp+savedss],ax
 27032                                  	;mov	[es:bp+4],ax
 27033 00001310 031E[0600]              	add	bx,[stacksize]
 27034 00001314 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 27035                                  	;mov	[es:bp+6],bx
 27036 00001318 26892F                  	mov	[es:bx],bp
 27037 0000131B 83C508                  	add	bp,entrysize ; 8
 27038                                  
 27039 0000131E E2E0                    	loop	buildloop
 27040                                  
 27041 00001320 83ED08                  	sub	bp,entrysize ; 8
 27042 00001323 892E[0E00]              	mov	[lastentry],bp
 27043 00001327 892E[1000]              	mov	[nextentry],bp
 27044                                  
 27045 0000132B 1E                      	push	ds
 27046                                  	;mov	ax,0F000h		;look at the model byte
 27047                                  	; 05/09/2023
 27048 0000132C B4F0                    	mov	ah,0F0h ; ax = 0F000h
 27049 0000132E 8ED8                    	mov	ds,ax
 27050 00001330 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 27051 00001335 1F                      	pop	ds
 27052 00001336 7504                    	jne	short skip_disablenmis
 27053                                  
 27054 00001338 B007                    	mov	al,07h			; disable convertible nmis
 27055 0000133A E672                    	out	72h,al
 27056                                  
 27057                                  skip_disablenmis:
 27058 0000133C 31C0                    	xor	ax,ax
 27059 0000133E 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 27060                                  					;ds - relocated stack code segment
 27061 00001340 FA                      	cli
 27062                                  
 27063                                  	;irp	aa,<02,08,09,70>
 27064                                  	;
 27065                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27066                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 27067                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 27068                                  	;mov	dx,offset int&aa	;pass where new handler is
 27069                                  	;call	new_init_loop		;adjust the vector to new handler,
 27070                                  	;				;saving pointer to original owner
 27071                                  	;endm
 27072                                  
 27073                                  stkinit_02:
 27074 00001341 BE0800                  	mov	si,02h*4 ; 8
 27075 00001344 BF[B305]                	mov	di,INT19OLD02
 27076 00001347 BB[1200]                	mov	bx,old02
 27077 0000134A BA[1600]                	mov	dx,int02
 27078 0000134D E84801                  	call	new_init_loop
 27079                                  stkinit_08:
 27080 00001350 BE2000                  	mov	si,08h*4 ; 32
 27081 00001353 BF[B805]                	mov	di,INT19OLD08
 27082 00001356 BB[3800]                	mov	bx,old08
 27083 00001359 BA[3C00]                	mov	dx,int08
 27084 0000135C E83901                  	call	new_init_loop
 27085                                  stkinit_09:
 27086 0000135F BE2400                  	mov	si,09h*4 ; 36
 27087 00001362 BF[BD05]                	mov	di,INT19OLD09
 27088 00001365 BB[4100]                	mov	bx,old09
 27089 00001368 BA[4500]                	mov	dx,int09
 27090 0000136B E82A01                  	call	new_init_loop
 27091                                  stkinit_70:
 27092 0000136E BEC001                  	mov	si,70h*4 ; 448
 27093 00001371 BF[DB05]                	mov	di,INT19OLD70
 27094 00001374 BB[4E00]                	mov	bx,old70
 27095 00001377 BA[5200]                	mov	dx,int70
 27096 0000137A E81B01                  	call	new_init_loop
 27097                                  
 27098                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 27099                                  	;
 27100                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27101                                  	;push	ds			;save relocated stack code segment
 27102                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 27103                                  	;push	ds
 27104                                  	;pop	dx			;dx = segment value
 27105                                  	;	
 27106                                  	;cmp	dx,0
 27107                                  	;jz	int&aa&_first
 27108                                  	;
 27109                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 27110                                  	;jz	int&aa&_first
 27111                                  	;
 27112                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 27113                                  	;jz	int&aa&_not_first
 27114                                  	;
 27115                                  	;cmp	dx,0f000h		;rom bios segment
 27116                                  	;jnz	int&aa&_not_first
 27117                                  	;
 27118                                  	;push	es
 27119                                  	;push	dx
 27120                                  	;mov	dx,0f000h
 27121                                  	;mov	es,dx
 27122                                  	;cmp	bx,word ptr es:0ff01h
 27123                                         	;pop	dx
 27124                                  	;pop	es
 27125                                  	;jz	int&aa&_first
 27126                                  	;
 27127                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 27128                                  	;pop	ds
 27129                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 27130                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 27131                                  	;mov	dx, offset int&aa	;pass where new handler is
 27132                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 27133                                  	;				;pointer to original owner.
 27134                                  	;jmp	short int&aa&_end
 27135                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 27136                                  	;pop	ds
 27137                                  ;int&aa&_end:
 27138                                  	;
 27139                                  	;endm
 27140                                  
 27141                                  stkinit_0A:
 27142 0000137D BE2800                  	mov	si,0Ah*4 ; 40
 27143                                  	
 27144                                  ; 14/12/2022
 27145                                  %if 0	
 27146                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27147                                  	push	ds
 27148                                  	
 27149                                  	lds	bx,[es:si]
 27150                                  	push	ds
 27151                                  	pop	dx
 27152                                  		
 27153                                  	cmp	dx,0
 27154                                  	je	short int_0A_first
 27155                                  	
 27156                                  	cmp	byte [bx],0CFh
 27157                                  	je	short int_0A_first
 27158                                  	
 27159                                  	cmp	word [bx+6],424Bh
 27160                                  	je	short int_0A_not_first
 27161                                  	
 27162                                  	cmp	dx,0F000h
 27163                                  	jne	short int_0A_not_first
 27164                                  	
 27165                                  	push	es
 27166                                  	push	dx
 27167                                  	mov	dx,0F000h
 27168                                  	mov	es,dx
 27169                                  	cmp	bx,[es:0FF01h]
 27170                                         	pop	dx
 27171                                  	pop	es
 27172                                  	je	short int_0A_first
 27173                                  %Endif
 27174                                  
 27175                                  	; 14/12/2022
 27176                                  	; 25/10/2022
 27177 00001380 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27178 00001383 730C                    	jnc	short int_0A_first
 27179                                  	
 27180                                  int_0A_not_first:
 27181                                  	; 14/12/2022
 27182                                  	; 25/10/2022
 27183                                  	;pop	ds
 27184 00001385 BF[C205]                	mov	di,INT19OLD0A
 27185 00001388 BB[5900]                	mov	bx,old0A
 27186 0000138B BA[5700]                	mov	dx,int0A
 27187 0000138E E80701                  	call	new_init_loop
 27188                                  	
 27189                                  	; 14/12/2022	
 27190                                  	;jmp	short int_0A_end
 27191                                  ;int_0A_first:
 27192                                  	; 25/10/2022
 27193                                  	;pop	ds
 27194                                  
 27195                                  	; 14/12/2022
 27196                                  int_0A_first:
 27197                                  int_0A_end:
 27198                                  
 27199                                  stkinit_0B:
 27200 00001391 BE2C00                  	mov	si,0Bh*4 ; 44
 27201                                  	
 27202                                  	; 14/12/2022
 27203                                  	; 25/10/2022
 27204 00001394 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27205 00001397 730C                    	jnc	short int_0B_end ; int_0B_first
 27206                                  
 27207                                  ; 14/12/2022
 27208                                  %if 0	
 27209                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27210                                  	push	ds
 27211                                  	lds	bx,[es:si]
 27212                                  	push	ds
 27213                                  	pop	dx
 27214                                  		
 27215                                  	cmp	dx,0
 27216                                  	je	short int_0B_first
 27217                                  
 27218                                  	cmp	byte [bx],0CFh
 27219                                  	je	short int_0B_first
 27220                                  	
 27221                                  	cmp	word [bx+6],424Bh
 27222                                  	je	short int_0B_not_first
 27223                                  	
 27224                                  	cmp	dx,0F000h
 27225                                  	jne	short int_0B_not_first
 27226                                  
 27227                                  	push	es
 27228                                  	push	dx
 27229                                  	mov	dx,0F000h
 27230                                  	mov	es,dx
 27231                                  	cmp	bx,[es:0FF01h]
 27232                                  	pop	dx
 27233                                  	pop	es
 27234                                  	je	short int_0B_first
 27235                                  %endif
 27236                                  
 27237                                  int_0B_not_first:
 27238                                  	; 14/12/2022
 27239                                  	; 25/10/2022
 27240                                  	;pop	ds
 27241 00001399 BF[C705]                	mov	di,INT19OLD0B
 27242 0000139C BB[7100]                	mov	bx,old0B
 27243 0000139F BA[6F00]                	mov	dx,int0B
 27244 000013A2 E8F300                  	call	new_init_loop
 27245                                  
 27246                                  	; 14/12/2022
 27247                                  	;jmp	short int_0B_end
 27248                                  ;int_0B_first:
 27249                                  	; 25/10/2022
 27250                                  	;pop	ds
 27251                                  
 27252                                  int_0B_end:
 27253                                  	
 27254                                  stkinit_0C:
 27255 000013A5 BE3000                  	mov	si,0Ch*4 ; 48
 27256                                  	
 27257                                  	; 14/12/2022
 27258                                  	; 25/10/2022
 27259 000013A8 E8C300                  	call	int_xx_first_check
 27260 000013AB 730C                    	jnc	short int_0C_end ; int_0C_first
 27261                                  
 27262                                  ; 14/12/2022
 27263                                  %if 0	
 27264                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27265                                  	push	ds
 27266                                  	lds	bx,[es:si]
 27267                                  	push	ds
 27268                                  	pop	dx
 27269                                  		
 27270                                  	cmp	dx,0
 27271                                  	je	short int_0C_first
 27272                                  
 27273                                  	cmp	byte [bx],0CFh
 27274                                  	je	short int_0C_first
 27275                                  	
 27276                                  	cmp	word [bx+6],424Bh
 27277                                  	je	short int_0C_not_first
 27278                                  	
 27279                                  	cmp	dx,0F000h
 27280                                  	jne	short int_0C_not_first
 27281                                  
 27282                                  	push	es
 27283                                  	push	dx
 27284                                  	mov	dx,0F000h
 27285                                  	mov	es,dx
 27286                                  	cmp	bx,[es:0FF01h]
 27287                                  	pop	dx
 27288                                  	pop	es
 27289                                  	je	short int_0C_first
 27290                                  %endif
 27291                                  	
 27292                                  int_0C_not_first:
 27293                                  	; 14/12/2022
 27294                                  	; 25/10/2022
 27295                                  	;pop	ds
 27296 000013AD BF[CC05]                	mov	di,INT19OLD0C
 27297 000013B0 BB[8900]                	mov	bx,old0C
 27298 000013B3 BA[8700]                	mov	dx,int0C
 27299 000013B6 E8DF00                  	call	new_init_loop
 27300                                  
 27301                                  	; 14/12/2022
 27302                                  	;jmp	short int_0C_end
 27303                                  ;int_0C_first:
 27304                                  	; 25/10/2022
 27305                                  	;pop	ds
 27306                                  
 27307                                  int_0C_end:
 27308                                  
 27309                                  stkinit_0D:
 27310 000013B9 BE3400                  	mov	si,0Dh*4 ; 52
 27311                                  
 27312                                  	; 14/12/2022	
 27313                                  	; 25/10/2022
 27314 000013BC E8AF00                  	call	int_xx_first_check
 27315 000013BF 730C                    	jnc	short int_0D_end ; int_0D_first
 27316                                  
 27317                                  ; 14/12/2022
 27318                                  %if 0	
 27319                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27320                                  	push	ds
 27321                                  	lds	bx,[es:si]
 27322                                  	push	ds
 27323                                  	pop	dx
 27324                                  		
 27325                                  	cmp	dx,0
 27326                                  	je	short int_0D_first
 27327                                  
 27328                                  	cmp	byte [bx],0CFh
 27329                                  	je	short int_0D_first
 27330                                  	
 27331                                  	cmp	word [bx+6],424Bh
 27332                                  	je	short int_0D_not_first
 27333                                  	
 27334                                  	cmp	dx,0F000h
 27335                                  	jne	short int_0D_not_first
 27336                                  
 27337                                  	push	es
 27338                                  	push	dx
 27339                                  	mov	dx,0F000h
 27340                                  	mov	es,dx
 27341                                  	cmp	bx,[es:0FF01h]
 27342                                  	pop	dx
 27343                                  	pop	es
 27344                                  	je	short int_0D_first
 27345                                  %endif
 27346                                  	
 27347                                  int_0D_not_first:
 27348                                  	; 14/12/2022
 27349                                  	; 25/10/2022
 27350                                  	;pop	ds
 27351 000013C1 BF[D105]                	mov	di,INT19OLD0D
 27352 000013C4 BB[A100]                	mov	bx,old0D
 27353 000013C7 BA[9F00]                	mov	dx,int0D
 27354 000013CA E8CB00                  	call	new_init_loop
 27355                                  
 27356                                  	; 14/12/2022
 27357                                  	;jmp	short int_0D_end
 27358                                  	; 02/11/2022
 27359                                  ;int_0D_first:
 27360                                  	;pop	ds
 27361                                  
 27362                                  int_0D_end:
 27363                                  
 27364                                  stkinit_0E:
 27365 000013CD BE3800                  	mov	si,0Eh*4 ; 56
 27366                                  
 27367                                  	; 14/12/2022	
 27368                                  	; 25/10/2022
 27369 000013D0 E89B00                  	call	int_xx_first_check
 27370 000013D3 730C                    	jnc	short int_0E_end ; int_0E_first
 27371                                  
 27372                                  ; 14/12/2022
 27373                                  %if 0	
 27374                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27375                                  	push	ds
 27376                                  	lds	bx,[es:si]
 27377                                  	push	ds
 27378                                  	pop	dx
 27379                                  		
 27380                                  	cmp	dx,0
 27381                                  	je	short int_0E_first
 27382                                  
 27383                                  	cmp	byte [bx],0CFh
 27384                                  	je	short int_0E_first
 27385                                  	
 27386                                  	cmp	word [bx+6],424Bh
 27387                                  	je	short int_0E_not_first
 27388                                  	
 27389                                  	cmp	dx,0F000h
 27390                                  	jne	short int_0E_not_first
 27391                                  
 27392                                  	push	es
 27393                                  	push	dx
 27394                                  	mov	dx,0F000h
 27395                                  	mov	es,dx
 27396                                  	cmp	bx,[es:0FF01h]
 27397                                  	pop	dx
 27398                                  	pop	es
 27399                                  	je	short int_0E_first
 27400                                  %endif
 27401                                  	
 27402                                  int_0E_not_first:
 27403                                  	; 14/12/2022
 27404                                  	; 25/10/2022
 27405                                  	;pop	ds
 27406 000013D5 BF[D605]                	mov	di,INT19OLD0E
 27407 000013D8 BB[B900]                	mov	bx,old0E
 27408 000013DB BA[B700]                	mov	dx,int0E
 27409 000013DE E8B700                  	call	new_init_loop
 27410                                  
 27411                                  	; 14/12/2022
 27412                                  	;jmp	short int_0E_end
 27413                                  ;int_0E_first:
 27414                                  	; 25/10/2022
 27415                                  	;pop	ds	
 27416                                  
 27417                                  int_0E_end:
 27418                                  
 27419                                  stkinit_72:
 27420 000013E1 BEC801                  	mov	si,72h*4 ; 456
 27421                                  	
 27422                                  	; 14/12/2022
 27423                                  	; 25/10/2022
 27424 000013E4 E88700                  	call	int_xx_first_check
 27425 000013E7 730C                    	jnc	short int_72_end ; int_72_first
 27426                                  
 27427                                  ; 14/12/2022
 27428                                  %if 0	
 27429                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27430                                  	push	ds
 27431                                  	lds	bx,[es:si]
 27432                                  	push	ds
 27433                                  	pop	dx
 27434                                  		
 27435                                  	cmp	dx,0
 27436                                  	je	short int_72_first
 27437                                  
 27438                                  	cmp	byte [bx],0CFh
 27439                                  	je	short int_72_first
 27440                                  	
 27441                                  	cmp	word [bx+6],424Bh
 27442                                  	je	short int_72_not_first
 27443                                  	
 27444                                  	cmp	dx,0F000h
 27445                                  	jne	short int_72_not_first
 27446                                  
 27447                                  	push	es
 27448                                  	push	dx
 27449                                  	mov	dx,0F000h
 27450                                  	mov	es,dx
 27451                                  	cmp	bx,[es:0FF01h]
 27452                                  	pop	dx
 27453                                  	pop	es
 27454                                  	je	short int_72_first
 27455                                  %endif
 27456                                  	
 27457                                  int_72_not_first:
 27458                                  	; 14/12/2022
 27459                                  	; 25/10/2022
 27460                                  	;pop	ds
 27461 000013E9 BF[E005]                	mov	di,INT19OLD72
 27462 000013EC BB[D100]                	mov	bx,old72
 27463 000013EF BA[CF00]                	mov	dx,int72
 27464 000013F2 E8A300                  	call	new_init_loop
 27465                                  
 27466                                  	; 14/12/2022
 27467                                  	;jmp	short int_72_end
 27468                                  ;int_72_first:
 27469                                  	; 25/10/2022
 27470                                  	;pop	ds
 27471                                  
 27472                                  int_72_end:
 27473                                  
 27474                                  stkinit_73:
 27475 000013F5 BECC01                  	mov	si,73h*4 ; 460
 27476                                  	
 27477                                  	; 14/12/2022
 27478                                  	; 25/10/2022
 27479 000013F8 E87300                  	call	int_xx_first_check
 27480 000013FB 730C                    	jnc	short int_73_end ; int_73_first
 27481                                  
 27482                                  ; 14/12/2022
 27483                                  %if 0	
 27484                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27485                                  	push	ds
 27486                                  	lds	bx,[es:si]
 27487                                  	push	ds
 27488                                  	pop	dx
 27489                                  		
 27490                                  	cmp	dx,0
 27491                                  	je	short int_73_first
 27492                                  
 27493                                  	cmp	byte [bx],0CFh
 27494                                  	je	short int_73_first
 27495                                  	
 27496                                  	cmp	word [bx+6],424Bh
 27497                                  	je	short int_73_not_first
 27498                                  	
 27499                                  	cmp	dx,0F000h
 27500                                  	jne	short int_73_not_first
 27501                                  
 27502                                  	push	es
 27503                                  	push	dx
 27504                                  	mov	dx,0F000h
 27505                                  	mov	es,dx
 27506                                  	cmp	bx,[es:0FF01h]
 27507                                  	pop	dx
 27508                                  	pop	es
 27509                                  	je	short int_73_first
 27510                                  %endif	
 27511                                  	
 27512                                  int_73_not_first:
 27513                                  	; 14/12/2022
 27514                                  	; 25/10/2022
 27515                                  	;pop	ds
 27516 000013FD BF[E505]                	mov	di,INT19OLD73
 27517 00001400 BB[E900]                	mov	bx,old73
 27518 00001403 BA[E700]                	mov	dx,int73
 27519 00001406 E88F00                  	call	new_init_loop
 27520                                  
 27521                                  	; 14/12/2022
 27522                                  	;jmp	short int_73_end
 27523                                  ;int_73_first:
 27524                                  	; 25/10/2022
 27525                                  	;pop	ds
 27526                                  
 27527                                  int_73_end:
 27528                                  
 27529                                  stkinit_74:
 27530 00001409 BED001                  	mov	si,74h*4 ; 464
 27531                                  	
 27532                                  	; 14/12/2022
 27533                                  	; 25/10/2022
 27534 0000140C E85F00                  	call	int_xx_first_check
 27535 0000140F 730C                    	jnc	short int_74_end ; int_74_first
 27536                                  
 27537                                  ; 14/12/2022
 27538                                  %if 0		
 27539                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27540                                  	push	ds
 27541                                  	lds	bx,[es:si]
 27542                                  	push	ds
 27543                                  	pop	dx
 27544                                  		
 27545                                  	cmp	dx,0
 27546                                  	je	short int_74_first
 27547                                  
 27548                                  	cmp	byte [bx],0CFh
 27549                                  	je	short int_74_first
 27550                                  	
 27551                                  	cmp	word [bx+6],424Bh
 27552                                  	je	short int_74_not_first
 27553                                  	
 27554                                  	cmp	dx,0F000h
 27555                                  	jne	short int_74_not_first
 27556                                  
 27557                                  	push	es
 27558                                  	push	dx
 27559                                  	mov	dx,0F000h
 27560                                  	mov	es,dx
 27561                                  	cmp	bx,[es:0FF01h]
 27562                                  	pop	dx
 27563                                  	pop	es
 27564                                  	je	short int_74_first
 27565                                  %endif
 27566                                  
 27567                                  int_74_not_first:
 27568                                  	; 14/12/2022
 27569                                  	; 25/10/2022
 27570                                  	;pop	ds
 27571 00001411 BF[EA05]                	mov	di,INT19OLD74
 27572 00001414 BB[0101]                	mov	bx,old74
 27573 00001417 BA[FF00]                	mov	dx,int74
 27574 0000141A E87B00                  	call	new_init_loop
 27575                                  	
 27576                                  	; 14/12/2022
 27577                                  	;jmp	short int_74_end
 27578                                  ;int_74_first:
 27579                                  	; 25/10/2022
 27580                                  	;pop	ds
 27581                                  
 27582                                  int_74_end:
 27583                                  
 27584                                  stkinit_76:
 27585 0000141D BED801                  	mov	si,76h*4 ; 472
 27586                                  	
 27587                                  	; 14/12/2022
 27588                                  	; 25/10/2022
 27589 00001420 E84B00                  	call	int_xx_first_check
 27590 00001423 730E                    	jnc	short int_76_end ; int_76_first
 27591                                  
 27592                                  ; 14/12/2022
 27593                                  %if 0	
 27594                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27595                                  	push	ds
 27596                                  	lds	bx,[es:si]
 27597                                  	push	ds
 27598                                  	pop	dx
 27599                                  		
 27600                                  	cmp	dx,0
 27601                                  	je	short int_76_first
 27602                                  
 27603                                  	cmp	byte [bx],0CFh
 27604                                  	je	short int_76_first
 27605                                  	
 27606                                  	cmp	word [bx+6],424Bh
 27607                                  	je	short int_76_not_first
 27608                                  	
 27609                                  	cmp	dx,0F000h
 27610                                  	jne	short int_76_not_first
 27611                                  
 27612                                  	push	es
 27613                                  	push	dx
 27614                                  	mov	dx,0F000h
 27615                                  	mov	es,dx
 27616                                  	cmp	bx,[es:0FF01h]
 27617                                  	pop	dx
 27618                                  	pop	es
 27619                                  	je	short int_76_first
 27620                                  %endif
 27621                                  	
 27622                                  int_76_not_first:
 27623                                  	; 14/12/2022
 27624                                  	; 25/10/2022
 27625                                  	;pop	ds
 27626 00001425 BF[EF05]                	mov	di,INT19OLD76
 27627 00001428 BB[1901]                	mov	bx,old76
 27628 0000142B BA[1701]                	mov	dx,int76
 27629 0000142E E86700                  	call	new_init_loop
 27630                                  
 27631                                  	; 14/12/2022
 27632 00001431 EB00                    	jmp	short int_76_end
 27633                                  ;int_76_first:
 27634                                  	; 25/10/2022
 27635                                  	;pop	ds
 27636                                  
 27637                                  int_76_end:
 27638                                  
 27639                                  stkinit_77:
 27640 00001433 BEDC01                  	mov	si,77h*4 ; 476
 27641                                  	
 27642                                  	; 14/12/2022
 27643                                  	; 25/10/2022
 27644 00001436 E83500                  	call	int_xx_first_check
 27645 00001439 730C                    	jnc	short int_77_end ; int_77_first
 27646                                  
 27647                                  ; 14/12/2022
 27648                                  %if 0	
 27649                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27650                                  	push	ds
 27651                                  	lds	bx,[es:si]
 27652                                  	push	ds
 27653                                  	pop	dx
 27654                                  		
 27655                                  	cmp	dx,0
 27656                                  	je	short int_77_first
 27657                                  
 27658                                  	cmp	byte [bx],0CFh
 27659                                  	je	short int_77_first
 27660                                  	
 27661                                  	cmp	word [bx+6],424Bh
 27662                                  	je	short int_77_not_first
 27663                                  	
 27664                                  	cmp	dx,0F000h
 27665                                  	jne	short int_77_not_first
 27666                                  
 27667                                  	push	es
 27668                                  	push	dx
 27669                                  	mov	dx,0F000h
 27670                                  	mov	es,dx
 27671                                  	cmp	bx,[es:0FF01h]
 27672                                  	pop	dx
 27673                                  	pop	es
 27674                                  	je	short int_77_first
 27675                                  %endif
 27676                                  	
 27677                                  int_77_not_first:
 27678                                  	; 14/12/2022
 27679                                  	; 25/10/2022
 27680                                  	;pop	ds
 27681 0000143B BF[F405]                	mov	di,INT19OLD77
 27682 0000143E BB[3101]                	mov	bx,old77
 27683 00001441 BA[2F01]                	mov	dx,int77
 27684 00001444 E85100                  	call	new_init_loop
 27685                                  
 27686                                  	; 14/12/2022
 27687                                  	;jmp	short int_77_end
 27688                                  ;int_77_first:
 27689                                  	; 25/10/2022
 27690                                  	;pop	ds
 27691                                  
 27692                                  int_77_end:
 27693 00001447 1E                      	push	ds
 27694 00001448 B800F0                  	mov	ax,0F000h		; look at the model byte
 27695 0000144B 8ED8                    	mov	ds,ax
 27696 0000144D 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 27697 00001452 1F                      	pop	ds
 27698 00001453 7504                    	jne	short skip_enablenmis
 27699                                  
 27700 00001455 B027                    	mov	al,27h			; enable convertible nmis
 27701 00001457 E672                    	out	72h,al
 27702                                  
 27703                                  ; 25/10/2022
 27704                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 27705                                  
 27706                                  skip_enablenmis:
 27707 00001459 FB                      	sti
 27708                                  	;;mov	ax,Bios_Data ; 70h
 27709                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27710                                  	; 21/10/2022
 27711 0000145A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27712 0000145D 8ED8                    	mov	ds,ax
 27713                                  
 27714                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 27715                                  
 27716 0000145F C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 27717                                  					; initialization is complete
 27718                                  
 27719 00001464 5D                      	pop	bp			; restore all
 27720 00001465 5E                      	pop	si
 27721 00001466 5F                      	pop	di
 27722 00001467 5A                      	pop	dx
 27723 00001468 59                      	pop	cx
 27724 00001469 5B                      	pop	bx
 27725 0000146A 07                      	pop	es
 27726 0000146B 1F                      	pop	ds
 27727 0000146C 58                      	pop	ax
 27728 0000146D C3                      	retn
 27729                                  
 27730                                  ; 14/12/2022
 27731                                  ; ----------------------------------------------------------------------
 27732                                  
 27733                                  	; 14/12/2022
 27734                                  	; 25/10/2022
 27735                                  ;%if 0
 27736                                  	; 27/03/2019 - Retro DOS v4.0
 27737                                  int_xx_first_check:
 27738 0000146E 1E                      	push	ds
 27739 0000146F 26C51C                  	lds	bx,[es:si]
 27740 00001472 1E                      	push	ds
 27741 00001473 5A                      	pop	dx
 27742                                  		
 27743                                  	;cmp	dx,0
 27744                                  	;je	short int_xx_first
 27745                                  	; 05/09/2023
 27746 00001474 21D2                    	and	dx,dx
 27747 00001476 741E                    	jz	short int_xx_first
 27748                                  	
 27749 00001478 803FCF                  	cmp	byte [bx],0CFh
 27750 0000147B 7419                    	je	short int_xx_first
 27751                                  	
 27752 0000147D 817F064B42              	cmp	word [bx+6],424Bh
 27753 00001482 7411                    	je	short int_xx_not_first
 27754                                  	
 27755 00001484 81FA00F0                	cmp	dx,0F000h
 27756 00001488 750B                    	jne	short int_xx_not_first
 27757                                  
 27758 0000148A 06                      	push	es
 27759                                  	;push	dx
 27760                                  	;mov	dx,0F000h
 27761 0000148B 8EC2                    	mov	es,dx
 27762 0000148D 263B1E01FF              	cmp	bx,[es:0FF01h]
 27763                                        	;pop	dx
 27764 00001492 07                      	pop	es
 27765 00001493 7401                    	je	short int_xx_first
 27766                                  
 27767                                  int_xx_not_first:
 27768 00001495 F9                      	stc
 27769                                  int_xx_first:
 27770 00001496 1F                      	pop	ds
 27771 00001497 C3                      	retn
 27772                                  
 27773                                  ;%endif
 27774                                  
 27775                                  ; ----------------------------------------------------------------------
 27776                                  ; 27/03/2019 - Retro DOS v4.0
 27777                                  
 27778                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27779                                  ; (SYSINIT:1610h)
 27780                                  
 27781                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 27782                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1905h)
 27783                                  
 27784                                  new_init_loop:
 27785                                  
 27786                                  ; 18/03/2025 - MiniDOS 1.0
 27787                                  %if 0
 27788                                  	;;; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 27789                                  	cmp	byte [cs:dosdata_umb],2
 27790                                  				; is DOSDATA=UMB done ? (DOSDATA is in UMB)
 27791                                  	jne	short new_init_loop_1st
 27792                                  	push	ds		; restore original/previous interrupt handler
 27793                                  				; (from int19old?? field in BIOSDATA)
 27794                                  	;mov	ax,70h
 27795                                  	mov	ax,DOSBIODATASEG
 27796                                  	mov	ds,ax
 27797                                  	lds	ax,[di]		; restore original Int ?? handler addr from int19old?? field
 27798                                  	mov	[es:si],ax	; copy the original int handler addr to its int vector addr
 27799                                  	mov	[es:si+2],ds
 27800                                  	pop	ds
 27801                                  new_init_loop_1st: 
 27802                                  	;;;
 27803                                  
 27804                                  %endif
 27805                                  
 27806                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 27807                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 27808                                  ;	dx=ds:offset of intxx, the new interrupt handler
 27809                                  ;	di=offset value of int19old&aa variable in bios.
 27810                                  ;	es=zero, segid of vector table
 27811                                  ;	ds=relocated stack code segment
 27812                                  
 27813                                  ; 13/04/2024
 27814                                  %if 0
 27815                                  	mov	ax,[es:si]		;remember offset in vector
 27816                                  	mov	[bx],ax			; to original owner in ds
 27817                                  	mov	ax,[es:si+2]		;remember segid in vector
 27818                                  	mov	[bx+2],ax		; to original owner in ds
 27819                                  
 27820                                  	push	ds
 27821                                  	;;mov	ax,Bios_Data ; 70h
 27822                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27823                                  	; 21/10/2022
 27824                                  	mov	ax,DOSBIODATASEG ; 0070h
 27825                                  	mov	ds,ax			;set int19oldxx value in bios for
 27826                                  	mov	ax,[es:si]		;int 19 handler
 27827                                  	mov	[di],ax
 27828                                  	mov	ax,[es:si+2]
 27829                                  	mov	[di+2],ax
 27830                                  	pop	ds
 27831                                  %else
 27832                                  	; 13/04/2024 - Retro DOS v5.0
 27833 00001498 1E                      	push	ds
 27834 00001499 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 27835 0000149D 894702                  	mov	[bx+2],ax		; to original owner in ds
 27836 000014A0 50                      	push	ax
 27837 000014A1 268B04                  	mov	ax,[es:si]		;remember offset in vector
 27838 000014A4 8907                    	mov	[bx],ax			; to original owner in ds
 27839 000014A6 50                      	push	ax
 27840 000014A7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27841 000014AA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 27842 000014AC 58                      	pop	ax			;int 19 handler
 27843 000014AD 8905                    	mov	[di],ax
 27844 000014AF 58                      	pop	ax
 27845 000014B0 894502                  	mov	[di+2],ax
 27846 000014B3 1F                      	pop	ds
 27847                                  %endif
 27848 000014B4 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 27849 000014B7 268C5C02                	mov	[es:si+2],ds
 27850 000014BB C3                      	retn
 27851                                  
 27852                                  ; End of STACK initialization routine
 27853                                  ; ----------------------------------------------------------------------
 27854                                  
 27855                                  ; ----------------------------------------------------------------------
 27856                                  ;set the devmark for mem command.
 27857                                  ;in: [memhi] - the address to place devmark
 27858                                  ;    [memlo] = 0
 27859                                  ;    al = id for devmark_id
 27860                                  ;out: devmark established.
 27861                                  ;     the address saved in cs:[devmark_addr]
 27862                                  ;     [memhi] increase by 1.
 27863                                  ; ----------------------------------------------------------------------
 27864                                  
 27865                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27866                                  ; (SYSINIT:1637h)
 27867                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 27868                                  ; (SYSINIT:176Ch)
 27869                                  
 27870                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 27871                                  
 27872                                  setdevmark:
 27873                                  
 27874                                  	; 04/09/2023
 27875                                  	;push	es
 27876                                  	;push	cx
 27877                                  
 27878 000014BC 2E8B0E[6203]            	mov	cx,[cs:memhi]
 27879 000014C1 2E890E[DF14]            	mov	[cs:devmark_addr],cx
 27880 000014C6 8EC1                    	mov	es,cx
 27881                                  	; 25/10/2022
 27882                                  	;mov	[es:devmark.id],al
 27883 000014C8 26A20000                	mov	[es:0],al
 27884 000014CC 41                      	inc	cx
 27885                                  	;mov	[es:devmark.seg],cx
 27886 000014CD 26890E0100              	mov	[es:1],cx
 27887                                  
 27888                                  	; 04/09/2023
 27889                                  	;pop	cx
 27890                                  	;pop	es
 27891                                  	
 27892 000014D2 2EFF06[6203]            	inc	word [cs:memhi]
 27893 000014D7 C3                      	retn
 27894                                  
 27895                                  ; ----------------------------------------------------------------------
 27896                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 27897                                  ; ----------------------------------------------------------------------
 27898                                  ; 27/03/2019 - Retro DOS v4.0
 27899                                  
 27900                                  ;MULTI_CONFIG	equ 1
 27901                                  
 27902                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 27903                                                                          ; allocation strategy call
 27904                                  
 27905                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 27906                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 27907                                  
 27908                                  default_filenum equ 8
 27909                                  
 27910                                  ;stacksw	equ true		; include switchable hardware stacks
 27911                                  
 27912                                  ; external variable defined in ibmbio module for multi-track
 27913                                  
 27914                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 27915                                  					; it on after handling config.sys file as a
 27916                                  					; default value,if multrk_flag = multrk_off1.
 27917                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 27918                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 27919                                  
 27920                                  ; if stacksw
 27921                                  
 27922                                  ; internal stack parameters
 27923                                  
 27924                                  ;entrysize	equ 8
 27925                                  
 27926                                  ;mincount	equ 8
 27927                                  ;defaultcount	equ 9
 27928                                  ;maxcount	equ 64
 27929                                  
 27930                                  ;minsize 	equ 32
 27931                                  ;defaultsize	equ 128
 27932                                  ;maxsize 	equ 512
 27933                                  
 27934                                  DOS_FLAG_OFFSET	equ 86h
 27935                                  
 27936                                  ;ifdef MULTI_CONFIG
 27937                                  ;
 27938                                  ;   config_envlen must immediately precede config_wrkseg, because they
 27939                                  ;   may be loaded as a dword ptr
 27940                                  
 27941                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27942                                  ; 25/10/2022
 27943 000014D8 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 27944                                                 				;  a scratch env, this is its length
 27945 000014DA 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 27946                                                     			;  segment of work area
 27947                                  
 27948 000014DC 00                      config_cmd:	db  0  			; current config cmd
 27949                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 27950 000014DD 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 27951                                  
 27952                                  ;endif ; MULTI_CONFIG
 27953                                  
 27954 000014DE 00                      multdeviceflag:	db  0
 27955                                  
 27956 000014DF 0000                    devmark_addr:	dw  0			;segment address for devmark.
 27957                                  
 27958 000014E1 00                      setdevmarkflag: db  0			;flag used for devmark
 27959                                  
 27960                                  ; 30/12/2022
 27961                                  ; 12/12/2022
 27962 000014E2 00                      driver_units:	db  0			;total unitcount for driver
 27963                                  
 27964                                  ; 12/12/2022
 27965                                  ;ems_stub_installed:
 27966                                  ;		db  0
 27967                                  
 27968                                  ; 12/12/2022	
 27969                                  ;align 2
 27970                                  
 27971                                  badparm_ptr:	; label	dword
 27972 000014E3 0000                    badparm_off:	dw  0
 27973 000014E5 0000                    badparm_seg:	dw  0
 27974                                  
 27975                                  ;******************************************************************************
 27976                                  ;take care of config.sys file.
 27977                                  ;system parser data and code.
 27978                                  ;******************************************************************************
 27979                                  
 27980                                  ;*******************************************************************
 27981                                  ; parser options set for msbio sysconf module
 27982                                  ;*******************************************************************
 27983                                  ;
 27984                                  ;**** default assemble swiches definition **************************
 27985                                  
 27986                                  ;farsw	equ 0		; near call expected
 27987                                  ;datesw	equ 0		; check date format
 27988                                  ;timesw	equ 0		; check time format
 27989                                  ;filesw	equ 1		; check file specification
 27990                                  ;capsw	equ 0		; perform caps if specified
 27991                                  ;cmpxsw	equ 0		; check complex list
 27992                                  ;numsw	equ 1		; check numeric value
 27993                                  ;keysw	equ 0		; support keywords
 27994                                  ;swsw	equ 1		; support switches
 27995                                  ;val1sw	equ 1		; support value definition 1
 27996                                  ;val2sw	equ 0		; support value definition 2
 27997                                  ;val3sw	equ 1		; support value definition 3
 27998                                  ;drvsw	equ 1		; support drive only format
 27999                                  ;qussw	equ 0		; support quoted string format
 28000                                  
 28001                                  ; psdata_seg equ cs
 28002                                  
 28003                                  	;.xlist
 28004                                  	;include parse.asm		;together with psdata.inc
 28005                                  	;.list
 28006                                  
 28007                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 28008                                  ; ======================================================================
 28009                                  ; 27/03/2019 - Retro DOS v4.0
 28010                                  
 28011                                  ; 30/03/2019
 28012                                  ; VERSION.INC (MSDOS 6.0) 
 28013                                  ; Set DBCS Blank constant
 28014                                  
 28015                                  ; ifndef DBCS
 28016                                  DB_SPACE EQU 2020h
 28017                                  DB_SP_HI EQU 20h
 28018                                  DB_SP_LO EQU 20h
 28019                                  ; else
 28020                                  
 28021                                  ;*******************************************************************
 28022                                  ; Parser include file
 28023                                  ;*******************************************************************
 28024                                  
 28025                                  ;**** Equation field
 28026                                  ;-------- Character code definition
 28027                                  
 28028                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 28029                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 28030                                  _$P_Period	   equ	"."             ;AN020;
 28031                                  _$P_Slash	   equ	"/"             ;AN020;
 28032                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 28033                                  _$P_Comma	   equ	","             ;AN000;
 28034                                  _$P_Switch	   equ	"/"             ;AN000;
 28035                                  _$P_Keyword	   equ	"="             ;AN000;
 28036                                  _$P_Colon	   equ	":"             ;AN000;
 28037                                  _$P_Plus 	   equ	"+"             ;AN000;
 28038                                  _$P_Minus	   equ	"-"             ;AN000;
 28039                                  _$P_Rparen	   equ	")"             ;AN000;
 28040                                  _$P_Lparen	   equ	"("             ;AN000;
 28041                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 28042                                  _$P_DQuote	   equ	'"'             ;AN000;
 28043                                  _$P_NULL 	   equ	0		;AN000;
 28044                                  _$P_TAB		   equ	9		;AN000;
 28045                                  _$P_CR		   equ	0Dh		;AN000;
 28046                                  _$P_LF		   equ	0Ah		;AN000;
 28047                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 28048                                  
 28049                                  ;-------- Masks
 28050                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 28051                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 28052                                  
 28053                                  ;-------- DOS function call related equs
 28054                                  
 28055                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 28056                                  					; by this call, following information
 28057                                  struc _$P_CDI	
 28058 00000000 ????                     .DateF: resw 1
 28059 00000002 ??????????               .Money: resb 5
 28060 00000007 ????                     .1000:	 resb 2
 28061 00000009 ????                     .Dec:	 resb 2
 28062 0000000B ????                     .DateS: resb 2
 28063 0000000D ????                     .TimeS: resb 2
 28064 0000000F ??                          	 resb 1
 28065 00000010 ??                      	 resb 1
 28066 00000011 ??                       .TimeF: resb 1	 
 28067 00000012 ????????                	 resw 2
 28068 00000016 ????                    	 resb 2
 28069 00000018 <res Ah>                	 resw 5
 28070                                   .size:
 28071                                  endstruc
 28072                                  
 28073                                  _$P_Date_MDY	   equ	0		;AN000;
 28074                                  _$P_Date_DMY	   equ	1		;AN000;
 28075                                  _$P_Date_YMD	   equ	2		;AN000;
 28076                                  ;-------------
 28077                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 28078                                  					;AN000; DS:SI will points to DBCS EV
 28079                                  ;-------------
 28080                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 28081                                  					;AN000; following parameters are set
 28082                                  					;AN000; to get casemap table.
 28083                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 28084                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 28085                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 28086                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 28087                                  					; By this call following information
 28088                                  					; is returned.
 28089                                  struc _$P_DOS_TBL
 28090 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 28091 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 28092 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 28093                                  endstruc
 28094                                  
 28095                                  ; ----------------------------------------------------------------------------
 28096                                  ; PARMS 	LABEL	BYTE
 28097                                  ;		DW	PARMSX
 28098                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 28099                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28100                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 28101                                  ;					; TYPICAL ARE ";", "="
 28102                                  ;					; "," & WHITESPACE ALWAYS
 28103                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28104                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 28105                                  ; ----------------------------------------------------------------------------
 28106                                  
 28107                                  ;-------------------------------- PARMS block structure
 28108                                  struc _$P_PARMS_Blk
 28109 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 28110 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 28111 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 28112                                  endstruc
 28113                                  
 28114                                  _$P_Len_PARMS	   equ	4		;AN000;
 28115                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 28116                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 28117                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 28118                                  
 28119                                  ; ----------------------------------------------------------------------------
 28120                                  ; PARMSX	LABEL	BYTE
 28121                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 28122                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 28123                                  ;		:			; REPEATS maxp-1 TIMES
 28124                                  ;		DB	maxs		; # OF SWITCHES
 28125                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 28126                                  ;		:			; REPEATS maxs-1 TIMES
 28127                                  ;		DB	maxk		; # OF KEYWORD
 28128                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 28129                                  ;		:			; REPEATS maxk-1 TIMES
 28130                                  ; ----------------------------------------------------------------------------
 28131                                  
 28132                                  ;-------------------------------- PARMSX block structure
 28133                                  struc _$P_PARMSX_Blk		;AN000;
 28134 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 28135 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 28136 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 28137                                  endstruc
 28138                                  
 28139                                  ; ----------------------------------------------------------------------------
 28140                                  ; << Control field definition  >>
 28141                                  ;
 28142                                  ;
 28143                                  ;CONTROL   LABEL   BYTE
 28144                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 28145                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 28146                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 28147                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 28148                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 28149                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 28150                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 28151                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 28152                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 28153                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 28154                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 28155                                  ;				   ; 0002H=REPEATS ALLOWED
 28156                                  ;				   ; 0001H=OPTIONAL
 28157                                  ;	   DW	   FUNCTION_FLAGS
 28158                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 28159                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 28160                                  ;				   ; 0010H=REMOVE ":" AT END
 28161                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 28162                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 28163                                  ;	   DW	   VALUES	   ; VALUE LISTS
 28164                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 28165                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 28166                                  ;	   :
 28167                                  ;
 28168                                  ;Note:
 28169                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 28170                                  ;      DATE bit simalteniously.
 28171                                  ;
 28172                                  ;      The parser examins each bit along with the following priority.
 28173                                  ;
 28174                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 28175                                  ;      FILE SPEC -> SIMPLE STRING.
 28176                                  ;
 28177                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 28178                                  ;      in the result buffer is capitalized.
 28179                                  ;
 28180                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 28181                                  ;
 28182                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 28183                                  ;      switch, for example, '/A', then STRING points to;
 28184                                  ;
 28185                                  ;			DB    1 	; number of following synonyms
 28186                                  ;			DB   '/A',0
 28187                                  ;
 28188                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 28189                                  ;
 28190                                  ;			DB    1 	; number of following synonyms
 28191                                  ;			DB   'CODEPAGE=',0
 28192                                  ;
 28193                                  ;    - "..." must consist of upper case characters only because the parser
 28194                                  ;      performs pattern matching after converting input to upper case (by
 28195                                  ;      using the current country upper case table)
 28196                                  ;
 28197                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 28198                                  ;      example /A and /B, the format will be;
 28199                                  ;
 28200                                  ;			DB    2 	; number of following synonyms
 28201                                  ;			DB    '/A',0
 28202                                  ;			DB    '/B',0
 28203                                  ; ----------------------------------------------------------------------------
 28204                                  
 28205                                  ;**** Match_Flags
 28206                                  
 28207                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 28208                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 28209                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 28210                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 28211                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 28212                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 28213                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 28214                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 28215                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 28216                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 28217                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 28218                                  _$P_Optional	   equ	0001h		;AN000; Optional
 28219                                  
 28220                                  ;**** Function flags
 28221                                  
 28222                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 28223                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 28224                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 28225                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 28226                                  
 28227                                  ;-------------------------------- Control block structure
 28228                                  struc _$P_Control_Blk
 28229 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 28230 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 28231 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 28232 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 28233 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 28234 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 28235                                  endstruc
 28236                                  
 28237                                  ; ----------------------------------------------------------------------------
 28238                                  ; << Value List Definition >>
 28239                                  ;
 28240                                  ;VALUES 	LABEL	BYTE
 28241                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 28242                                  ;	     +-
 28243                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 28244                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 28245                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 28246                                  ;	     |	:
 28247                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 28248                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 28249                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 28250                                  ;	     |	:
 28251                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 28252                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 28253                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 28254                                  ;	     +-	:
 28255                                  ;
 28256                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 28257                                  ;
 28258                                  ;Note:
 28259                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 28260                                  ;      when no choice lists are provided.
 28261                                  ;
 28262                                  ;    - STRING must consist of upper case characters only because the parser
 28263                                  ;      performs pattern matching after converting input to upper case (by
 28264                                  ;      using the current country upper case table)
 28265                                  ; ----------------------------------------------------------------------------
 28266                                  
 28267                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 28268                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 28269                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 28270                                  _$P_nval_String	   equ	3		;AN000; string list ID
 28271                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 28272                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 28273                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 28274                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 28275                                  
 28276                                  struc _$P_Val_List
 28277 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 28278 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 28279 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 28280 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 28281 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 28282                                  endstruc
 28283                                  
 28284                                  ; ----------------------------------------------------------------------------
 28285                                  ; << Result Buffer Definition  >>
 28286                                  ;
 28287                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 28288                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 28289                                  ;						;	1=NUMBER, 2=LIST INDEX,
 28290                                  ;						;	3=STRING, 4=COMPLEX,
 28291                                  ;						;	5=FILESPEC, 6=DRIVE
 28292                                  ;						;	7=DATE, 8=TIME
 28293                                  ;						;	9=QUOTED STRING
 28294                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 28295                                  ;
 28296                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 28297                                  ;
 28298                                  ;            +-
 28299                                  ;	    | DD	n			; VALUE IF NUMBER
 28300                                  ;	    | or
 28301                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 28302                                  ;	    |					; (ES presents Segment address)
 28303                                  ;	    | or
 28304                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 28305                                  ;	    | or
 28306                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 28307                                  ;	    | or
 28308                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 28309                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 28310                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 28311                                  ;	    | or
 28312                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 28313                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 28314                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 28315                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 28316                                  ;	    +-
 28317                                  ;
 28318                                  ;
 28319                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 28320                                  ;      list.
 28321                                  ;
 28322                                  ;      YEAR: If the input value for the year is less than 100, parser
 28323                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 28324                                  ;	     the year value, he returns 1987.
 28325                                  ; ----------------------------------------------------------------------------
 28326                                  
 28327                                  ;-------------------------------- Result block structure
 28328                                  struc _$P_Result_Blk
 28329 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 28330 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 28331 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 28332 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 28333                                  endstruc
 28334                                  
 28335                                  ;--------------------------------
 28336                                  ;**** values for the type field in the result block
 28337                                  
 28338                                  _$P_EOL		   equ	0		;AN000; End of line
 28339                                  _$P_Number	   equ	1		;AN000; Number
 28340                                  _$P_List_Idx	   equ	2		;AN000; List Index
 28341                                  _$P_String	   equ	3		;AN000; String
 28342                                  _$P_Complex	   equ	4		;AN000; Complex
 28343                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 28344                                  _$P_Drive	   equ	6		;AN000; Drive
 28345                                  _$P_Date_F	   equ	7		;AN000; Date
 28346                                  _$P_Time_F	   equ	8		;AN000; Time
 28347                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 28348                                  
 28349                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 28350                                  
 28351                                  ;**** Return code
 28352                                  ;
 28353                                  ; following return code will be returned in the AX register.
 28354                                  
 28355                                  _$P_No_Error	   equ	0		;AN000; No error
 28356                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 28357                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 28358                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 28359                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 28360                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 28361                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 28362                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 28363                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 28364                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 28365                                  
 28366                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 28367                                  
 28368                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 28369                                  
 28370                                  ; 14/04/2024 - Retro DOS v5.0
 28371                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:1C62h
 28372                                  
 28373                                  ;********************** Local Data *************************************
 28374 000014E7 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 28375 000014E9 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 28376 000014EB 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 28377 000014ED 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 28378 000014EF 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 28379 000014F0 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 28380 000014F2 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 28381 000014F4 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 28382                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 28383                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 28384                                  
 28385                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 28386                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 28387                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 28388                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 28389                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 28390                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 28391                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 28392                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 28393                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 28394                                  
 28395                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 28396                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 28397                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 28398                                  
 28399 000014F6 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 28400 000014F8 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 28401 000014FA 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 28402 000014FC 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 28403                                  
 28404 000014FE 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 28405                                  _$P_STRING_BUF_END equ	$		;AN000;
 28406                                  
 28407                                  ; 25/10/2022
 28408                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 28409                                  
 28410 0000157E FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 28411 0000157F 0000                    		   dw	0		;AN000; offset	of char case map table
 28412 00001581 0000                    		   dw	0		;AN000; segment of char case map table
 28413                                  ; 25/10/2022
 28414                                  ;IF CAPSW
 28415                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 28416                                  ;		   dw	0		;AN000; offset	of file case map table
 28417                                  ;		   dw	0		;AN000; segment of file case map table
 28418                                  ;ENDIF
 28419                                  
 28420                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 28421                                  ;
 28422                                  
 28423                                  ;M029
 28424                                  ;!!!WARNING!!!
 28425                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 28426                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 28427                                  ;changes need to be made in SYSPARSE
 28428                                  
 28429                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 28430                                  
 28431                                  ; 25/10/2022
 28432                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 28433                                  
 28434 00001583 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 28435                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 28436                                  
 28437                                  ;ENDIF					;AN000;(of FileSW)
 28438                                  
 28439                                  ; delimiter parsing
 28440                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 28441                                  _$P_period_only	   equ	02h		;AN032; check only for period
 28442                                  
 28443                                  ;filespec error flag
 28444 0000158C 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 28445                                  					;AN033;  was detected.
 28446                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 28447                                  
 28448                                  
 28449                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 28450                                  ; ======================================================================
 28451                                  ; 27/03/2019 - Retro DOS v4.0
 28452                                  
 28453                                  ;***********************************************************************
 28454                                  ; SysParse;
 28455                                  ;
 28456                                  ;  Function : Parser Entry
 28457                                  ;
 28458                                  ;  Input: DS:SI -> command line
 28459                                  ;	  ES:DI -> parameter block
 28460                                  ;	  cs -> psdata.inc
 28461                                  ;	  CX = operand ordinal
 28462                                  ;
 28463                                  ;	  Note:  ES is the segment containing all the control blocks defined
 28464                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 28465                                  ;		 is in DS.
 28466                                  ;
 28467                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 28468                                  ;		    invalid value list. But this parser does NOT implement
 28469                                  ;		    this feature. Therefore CY always zero.
 28470                                  ;
 28471                                  ;	   CY = 0   AX = return code
 28472                                  ;		    BL = terminated delimiter code
 28473                                  ;		    CX = new operand ordinal
 28474                                  ;		    SI = set past scaned operand
 28475                                  ;		    DX = selected result buffer
 28476                                  ;
 28477                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 28478                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 28479                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 28480                                  ;
 28481                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 28482                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 28483                                  ;
 28484                                  ;-------- Modification History -----------------------------------------
 28485                                  ;
 28486                                  ;  4/04/87 : Created by K. K,
 28487                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 28488                                  ;	   : JMP SHORT assemble error (tm02)
 28489                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 28490                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 28491                                  ;	     DateSW equ 1)	      (tm04)
 28492                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 28493                                  ;				      (tm05) in PSDATA.INC
 28494                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 28495                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 28496                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 28497                                  ;	     value-list block	      (tm07)
 28498                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 28499                                  ;	     switch (keyword) or not. If there is, backup si for next call
 28500                                  ;	     (tm08)
 28501                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 28502                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 28503                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 28504                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 28505                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 28506                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 28507                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 28508                                  ;					  (tm12)
 28509                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 28510                                  ;					  (tm13)
 28511                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 28512                                  ;					  (tm14)
 28513                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 28514                                  ;					  (tm15)
 28515                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 28516                                  
 28517                                  ;  7/24/87 : Quoted strings being returned with quotes.
 28518                                  
 28519                                  ;  7/28/87 : Kerry S (;AN018;)
 28520                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 28521                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 28522                                  ;	     affected: _$P_Chk_SW_Control.
 28523                                  
 28524                                  ;  7/29/87 : Kerry S (;AN019;)
 28525                                  ;	     Now allow the optional bit in match flags for switches.  This
 28526                                  ;	     allows the switch to be encountered with a value or without a
 28527                                  ;	     value and no error is returned.
 28528                                  ;
 28529                                  
 28530                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 28531                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 28532                                  ;	     within a date response, instead of checking just for the one
 28533                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 28534                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 28535                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 28536                                  
 28537                                  ;  9/1/87  : Kerry S (;AN021)
 28538                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 28539                                  ;	     the command line with the string in the control block the
 28540                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 28541                                  ;	     on the command line and assuming a match.	This allowed a shorter
 28542                                  ;	     string on the command line than in the synonym list in the control
 28543                                  ;	     block.  I put in a test for a null in the control block so the
 28544                                  ;	     string in the control block must be the same length as the string
 28545                                  ;	     preceeding the colon or equal on the command line.
 28546                                  
 28547                                  ;  8/28/87 : Kerry S (;AN022;)
 28548                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 28549                                  ;	     problems for people who included it themselves in a segment other
 28550                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 28551                                  ;	     segment.
 28552                                  
 28553                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 28554                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 28555                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 28556                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 28557                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 28558                                  ;	     BL be used if TIME is being parsed.
 28559                                  
 28560                                  ;  9/24/87 : Ed K
 28561                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 28562                                  ;	     invocations with their normally expanded code; made comments
 28563                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 28564                                  
 28565                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 28566                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 28567                                  ;	     pointed to by non-existant CONTROL.
 28568                                  
 28569                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 28570                                  ;	     A quoted text string can be framed only by double quote.  Remove
 28571                                  ;	     support to frame quoted text string with single quote.
 28572                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 28573                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 28574                                  ;	     single quote in PROC prologues are left as is for history reasons.
 28575                                  
 28576                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 28577                                  ;	     quote chars within a quoted string is supposed to be reported as
 28578                                  ;	     one quote character, but is reported as two quotes.  This changed
 28579                                  ;	     two instructions in PROC _$P_Quoted_Str.
 28580                                  
 28581                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 28582                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 28583                                  
 28584                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 28585                                  
 28586                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 28587                                  ;	     psdata buffer should have cs.
 28588                                  
 28589                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 28590                                  ;	     positional missing.
 28591                                  
 28592                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 28593                                  ;	     as a line delimiter, should use carriage return.
 28594                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 28595                                  
 28596                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 28597                                  
 28598                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 28599                                  ;	     endless loop since SI is returned still pointing to start
 28600                                  ;	     of that parm.
 28601                                  
 28602                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 28603                                  ;	     Vector to returned string has CS instead of cs, but
 28604                                  ;	     when tried to fix it on previous version, changed similar
 28605                                  ;	     but wrong place.
 28606                                  
 28607                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 28608                                  ;	     delimiters between hours, minutes, seconds for time. And period
 28609                                  ;	     and comma are valid delimiters between seconds and 100th second.
 28610                                  
 28611                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 28612                                  ;	     in a filespec, then flag an error.
 28613                                  
 28614                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 28615                                  ;	     indexed off of the cs equate instead of the DS register.
 28616                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 28617                                  ;  -->	     local parser data. Why were some references to local data changed
 28618                                  ;	     to do this before, but not all ?????
 28619                                  
 28620                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 28621                                  
 28622                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 28623                                  ;
 28624                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 28625                                  
 28626                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 28627                                  
 28628                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 28629                                  ;	     separator in TIME before hundredths field.
 28630                                  ;
 28631                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 28632                                  ;			strings as keywords.
 28633                                  ;
 28634                                  ;***********************************************************************
 28635                                  
 28636                                  ;IF FarSW				;AN000;(Check if need far return)
 28637                                  ;SysParse proc far			;AN000;
 28638                                  ;ELSE					;AN000;
 28639                                  ;SysParse proc near			;AN000;
 28640                                  ;ENDIF					;AN000;(of FarSW)
 28641                                  
 28642                                  ; 27/03/2019 - Retro DOS v4.0
 28643                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 28644                                  
 28645                                  ; 25/10/2022 - Retro DOS v4.0
 28646                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 28647                                  
 28648                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 28649                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 28650                                  
 28651                                  SysParse:
 28652                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 28653                                  	; dx = 0
 28654 0000158D 1E                      	push	ds ; *!*
 28655 0000158E 0E                      	push	cs
 28656 0000158F 1F                      	pop	ds 
 28657                                  
 28658                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 28659                                  	;cld				;AN000; confirm forward direction
 28660                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 28661                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 28662                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 28663                                  	;
 28664                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 28665                                  
 28666                                  	; 06/09/2023
 28667 00001590 8916[F414]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 28668 00001594 FC                      	cld				;AN000; confirm forward direction
 28669 00001595 890E[E714]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 28670 00001599 8916[E914]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 28671 0000159D 8916[FC14]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 28672 000015A1 8916[ED14]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 28673                                  
 28674                                  ;M029 -- Begin changes
 28675                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 28676                                  ;entry to SysParse. This is in the non-checksum region and any program that
 28677                                  ;corrupts this table but does not corrupt the checksum region will leave
 28678                                  ;command.com parsing in an inconsistent state.
 28679                                  ; NB: The special characters string has been hardcoded here. If any change
 28680                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 28681                                  
 28682                                  ;IF FileSW + DrvSW
 28683                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 28684                                  	
 28685                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 28686                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 28687                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 28688                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 28689                                  
 28690                                  	; 14/04/2024
 28691                                  	; 06/09/2023
 28692 000015A5 C706[8315]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 28693 000015AB C706[8515]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 28694 000015B1 C706[8715]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 28695 000015B7 C706[8915]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 28696                                  ;ENDIF
 28697                                  	; 06/09/2023
 28698 000015BD 1F                      	pop	ds ; *!*
 28699                                  
 28700                                  ;M029 -- End of changes
 28701                                  
 28702 000015BE E87806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 28703 000015C1 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 28704                                  ;--------------------------- End of Line
 28705 000015C3 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 28706 000015C6 53                      	push	bx			;AN000;
 28707                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 28708                                  					;AN000; Get the PARMSX address to
 28709 000015C7 268B1D                  	mov	bx,[es:di]
 28710                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 28711                                  					;AN000; check ORDINAL to see if the minimum
 28712 000015CA 263A0F                  	cmp	cl,[es:bx]	
 28713 000015CD 7303                    	jae	short _$P_Fin		;AN000; positional found.
 28714                                  
 28715 000015CF B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 28716                                  _$P_Fin: 				;AN000;
 28717 000015D2 5B                      	pop	bx			;AN000;
 28718 000015D3 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 28719                                  ;---------------------------
 28720                                  _$P_Start:				;AN000;
 28721 000015D6 2E8936[F614]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 28722 000015DB 53                      	push	bx			;AN000; quoted string or file spec.
 28723 000015DC 57                      	push	di			;AN000;
 28724 000015DD 55                      	push	bp			;AN000;
 28725                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 28726                                  	; 02/11/2022
 28727                                  	;lea	bx,[_$P_STRING_BUF]
 28728                                  	; 07/09/2023
 28729 000015DE BB[FE14]                	mov	bx,_$P_STRING_BUF
 28730 000015E1 2EF606[F514]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 28731 000015E7 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 28732                                  
 28733                                  _$P_Pack_Loop:				;AN000;
 28734 000015E9 AC                      	lodsb				;AN000; Pick a operand from buffer
 28735 000015EA E8F106                  	call	_$P_Chk_Switch		;AN000; Check switch character
 28736 000015ED 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 28737                                  
 28738 000015EF E86906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 28739 000015F2 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 28740                                  
 28741 000015F4 E89906                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 28742 000015F7 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 28743                                  
 28744 000015F9 2EF606[F514]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 28745                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 28746 000015FF 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 28747                                  
 28748 00001601 E83506                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 28749 00001604 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 28750                                  
 28751                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 28752 00001606 2EF606[F514]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 28753 0000160C 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 28754                                  
 28755 0000160E 4E                      	dec	si			;AN000; (tm08)
 28756 0000160F EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 28757                                  
 28758                                  _$P_PL01:				;AN000;
 28759 00001611 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 28760 00001614 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 28761 00001616 7506                    	jne	short _$P_PL00 		;AN000; then
 28762                                  
 28763 00001618 2E800E[F514]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 28764                                  _$P_PL00:				;AN000;
 28765 0000161E 43                      	inc	bx			;AN000; ready to see next byte
 28766 0000161F E8D506                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 28767 00001622 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 28768                                  
 28769 00001624 AC                      	lodsb				;AN000; if yes, store
 28770 00001625 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 28771 00001628 43                      	inc	bx			;AN000; update pointer
 28772 00001629 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 28773                                  
 28774                                  _$P_Pack_End_BY_EOL:			;AN000;
 28775 0000162B 4E                      	dec	si			;AN000; backup si pointer
 28776                                  _$P_Pack_End:				;AN000;
 28777 0000162C 2E8936[EB14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 28778                                  	; 07/09/2023
 28779                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 28780 00001631 30E4                    	xor	ah,ah ; 0 ; *
 28781 00001633 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 28782                                  	;
 28783 00001636 2E891E[FA14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 28784                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 28785 0000163B 268B1D                  	mov	bx,[es:di]
 28786                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 28787                                  	; 02/11/2022
 28788                                  	;lea	si,[_$P_STRING_BUF]
 28789                                  	; 07/09/2023
 28790 0000163E BE[FE14]                	mov	si,_$P_STRING_BUF
 28791 00001641 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 28792 00001645 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 28793                                  
 28794 00001647 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 28795 0000164B 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 28796                                  
 28797 0000164D 2EF606[F514]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 28798 00001653 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 28799                                  
 28800                                  _$P_Positional_Manager:			;AN000; else process as positional
 28801 00001655 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28802                                  	; 07/09/2023
 28803                                  	;xor	ah,ah			;AN000; ax = maxp
 28804 00001659 2E3906[E714]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 28805 0000165E 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 28806                                  
 28807 00001660 2EA1[E714]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 28808 00001664 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 28809 00001666 43                      	inc	bx			;AC035; add '2' to
 28810 00001667 43                      	inc	bx			;AC035;  BX reg
 28811                                  					;AN000; now bx points to 1st CONTROL
 28812 00001668 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 28813 0000166A 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 28814 0000166D E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 28815 00001670 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28816                                  
 28817                                  _$P_Too_Many_Error:			;AN000;
 28818 00001672 2EC706[E914]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 28819 00001679 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28820                                  
 28821                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 28822                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 28823                                  get_maxp:
 28824                                  	;mov	al,[es:bx+1]
 28825 0000167B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28826                                  	; 07/09/2023
 28827                                  	; ah=0 ; *
 28828                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 28829 0000167F 30ED                    	xor	ch,ch ; **
 28830 00001681 40                      	inc	ax			;AN000;
 28831 00001682 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 28832 00001684 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 28833 00001686 C3                      	retn
 28834                                  
 28835                                  _$P_SW_Manager:				;AN000;
 28836                                  	; 07/09/2023
 28837                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28838                                  	;xor	ah,ah			;AN000; ax = maxp
 28839                                  	;inc	ax			;AN000;
 28840                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28841                                  	;add	bx,ax			;AN000; now bx points to maxs
 28842 00001687 E8F1FF                  	call	get_maxp ; 07/09/2023
 28843                                  
 28844 0000168A 268A0F                  	mov	cl,[es:bx]		;AN000;
 28845                                  	; 07/09/2023
 28846                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 28847                                  	;or	cx,cx			;AN000; at least one switch ?
 28848                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 28849                                  	; 07/07/2023
 28850 0000168D E30F                    	jcxz	_$P_SW_Not_Found	; no
 28851                                  
 28852 0000168F 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 28853                                  
 28854                                  _$P_SW_Mgr_Loop: 			;AN000;
 28855 00001690 53                      	push	bx			;AN000;
 28856 00001691 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 28857 00001694 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 28858 00001697 5B                      	pop	bx			;AN000;
 28859 00001698 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 28860                                  
 28861 0000169A 43                      	inc	bx			;AC035; add '2' to
 28862 0000169B 43                      	inc	bx			;AC035;  BX reg
 28863                                  					;AN000; else bx points to the next CONTROL
 28864 0000169C E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 28865                                  
 28866                                  _$P_SW_Not_Found:			;AN000;
 28867 0000169E 2EC706[E914]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 28868 000016A5 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 28869                                  
 28870                                  _$P_Key_Manager: 			;AN000;
 28871                                  	; 07/09/2023
 28872                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28873                                  	;xor	ah,ah			;AN000; ax = maxp
 28874                                  	;inc	ax			;AN000;
 28875                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28876                                  	;add	bx,ax			;AN000; now bx points to maxs
 28877 000016A7 E8D1FF                  	call	get_maxp ; 07/09/2023
 28878                                  	
 28879 000016AA 268A07                  	mov	al,[es:bx]		;AN000;
 28880 000016AD 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 28881 000016AF D1E0                    	shl	ax,1			;AN000;
 28882 000016B1 40                      	inc	ax			;AN000; ax = ax*2+1
 28883 000016B2 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 28884 000016B4 268A0F                  	mov	cl,[es:bx]		;AN000;
 28885                                  	; 07/09/2023
 28886                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 28887                                  	;or	cx,cx			;AN000; at least one keyword ?
 28888                                  	;jz	short _$P_Key_Not_Found	;AN000;
 28889                                  	; 07/07/2023
 28890 000016B7 E305                    	jcxz	_$P_Key_Not_Found	; no
 28891                                  
 28892 000016B9 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 28893                                  
 28894                                  _$P_Key_Mgr_Loop:			;AN000;
 28895                                  	; 07/09/2023
 28896                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 28897                                  	; (always returns with cf=1)
 28898                                  	;push	bx			;AN000;
 28899                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 28900                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 28901                                  	;pop	bx			;AN000;
 28902                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 28903                                  	; 07/09/2023
 28904                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 28905                                  
 28906 000016BA 43                      	inc	bx			;AC035; add '2' to
 28907 000016BB 43                      	inc	bx			;AC035;  BX reg
 28908                                  					;AN000; else bx points to the next CONTROL
 28909 000016BC E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 28910                                  
 28911                                  _$P_Key_Not_Found:			;AN000;
 28912 000016BE 2EC706[E914]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 28913                                  _$P_Return_to_Caller:			;AN000;
 28914 000016C5 5D                      	pop	bp			;AN000;
 28915 000016C6 5F                      	pop	di			;AN000;
 28916 000016C7 5B                      	pop	bx			;AN000;
 28917 000016C8 2E8B0E[E714]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 28918 000016CD 2EA1[E914]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 28919 000016D1 2E8B36[EB14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 28920 000016D6 2E8B16[ED14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 28921 000016DB 2E8A1E[EF14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 28922                                  _$P_Single_Exit: 			;AN000;
 28923 000016E0 F8                      	clc				;AN000;
 28924 000016E1 C3                      	retn				;AN000;
 28925                                  
 28926                                  ;***********************************************************************
 28927                                  ; _$P_Chk_Pos_Control
 28928                                  ;
 28929                                  ; Function: Parse CONTROL block for a positional
 28930                                  ;
 28931                                  ; Input:     ES:BX -> CONTROL block
 28932                                  ;	     cs:SI -> _$P_STRING_BUF
 28933                                  ;
 28934                                  ; Output:    None
 28935                                  ;
 28936                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 28937                                  ;
 28938                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 28939                                  ;***********************************************************************
 28940                                  
 28941                                  _$P_Chk_Pos_Control:
 28942 000016E2 50                      	push	ax			;AN000;
 28943                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 28944 000016E3 268B07                  	mov	ax,[es:bx]
 28945                                  	; 12/12/2022
 28946 000016E6 A802                    	test	al,_$P_Repeat
 28947                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 28948 000016E8 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 28949                                  
 28950 000016EA 2EFF06[E714]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 28951                                  _$P_CPC00:				;AN000;
 28952 000016EF 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 28953 000016F3 7517                    	jne	short _$P_CPC01		;AN000;
 28954                                  
 28955                                  	; 12/12/2022
 28956 000016F5 A801                    	test	al,_$P_Optional
 28957                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 28958 000016F7 7509                    	jnz	short _$P_CPC02		;AN000;
 28959                                  
 28960 000016F9 2EC706[E914]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 28961 00001700 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 28962                                  
 28963                                  _$P_CPC02:				;AN000;
 28964 00001702 50                      	push	ax			;AN000;
 28965                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 28966                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 28967                                  	; 07/07/2023
 28968 00001703 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 28969 00001706 E89600                  	call	_$P_Fill_Result		;AN000;
 28970 00001709 58                      	pop	ax			;AN000;
 28971 0000170A EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 28972                                  
 28973                                  _$P_CPC01:				;AN000;
 28974 0000170C E81101                  	call	_$P_Check_Match_Flags	;AN000;
 28975                                  _$P_CPC_Exit:				;AN000;
 28976 0000170F 58                      	pop	ax			;AN000;
 28977 00001710 C3                      	retn				;AN000;
 28978                                  
 28979                                  ;***********************************************************************
 28980                                  ; _$P_Chk_Key_Control
 28981                                  ;
 28982                                  ; Function: Parse CONTROL block for a keyword
 28983                                  ;
 28984                                  ; Input:     ES:BX -> CONTROL block
 28985                                  ;	     cs:SI -> _$P_STRING_BUF
 28986                                  ;
 28987                                  ; Output:    CY = 1 : not match
 28988                                  ;
 28989                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 28990                                  ;
 28991                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 28992                                  ;***********************************************************************
 28993                                  
 28994                                  ; 07/09/2023
 28995                                  ;_$P_Chk_Key_Control:
 28996                                  ;	stc				;AN000; this logic works when the KeySW
 28997                                  ;	retn				;AN000; is reset.
 28998                                  
 28999                                  ;***********************************************************************
 29000                                  ; _$P_Search_KEYorSW:
 29001                                  ;
 29002                                  ; Function: Seach specified keyword or switch from CONTROL
 29003                                  ;
 29004                                  ; Input:     ES:BX -> CONTROL block
 29005                                  ;	     cs:SI -> _$P_STRING_BUF
 29006                                  ;
 29007                                  ; Output:    CY = 1 : not match
 29008                                  ;
 29009                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 29010                                  ;***********************************************************************
 29011                                  
 29012                                  	; 25/10/2022 - Retro DOS v4.0
 29013                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 29014                                  
 29015                                  _$P_Search_KEYorSW:			;AN000;
 29016 00001711 55                      	push	bp			;AN000;
 29017 00001712 51                      	push	cx			;AN000;
 29018 00001713 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 29019 00001717 30ED                    	xor	ch,ch			;AN000; and set it to cx
 29020                                  	;or	cx,cx			;AN000; No synonyms specified ?
 29021                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 29022                                  	; 07/07/2023
 29023 00001719 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 29024                                  
 29025                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 29026                                  	; 25/10/2022
 29027 0000171B 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 29028                                  	;lea	bp,[bx+9]
 29029                                  _$P_KEYorSW_Loop:			;AN000;
 29030 0000171E E8B503                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 29031 00001721 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 29032                                  
 29033 00001723 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 29034 00001726 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 29035                                  _$P_KEYorSW_Not_Found:			;AN000;
 29036 00001728 F9                      	stc				;AN000; indicate not found in synonym list
 29037 00001729 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 29038                                  
 29039                                  _$P_KEYorSW_Found:			;AN000;
 29040 0000172B 2E892E[FC14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 29041 00001730 F8                      	clc				;AN000; indicate found
 29042                                  _$P_KEYorSW_Exit:			;AN000;
 29043 00001731 59                      	pop	cx			;AN000;
 29044 00001732 5D                      	pop	bp			;AN000;
 29045 00001733 C3                      	retn				;AN000;
 29046                                   
 29047                                  ;***********************************************************************
 29048                                  ; _$P_MoveBP_NUL
 29049                                  ;***********************************************************************
 29050                                  
 29051                                  _$P_MoveBP_NUL:
 29052                                  _$P_MBP_Loop:				;AN000;
 29053                                  	; 11/12/2022
 29054 00001734 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 29055                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29056                                  	; (SYSINIT:18DBh)
 29057                                   	;cmp     byte [es:bp+0],0
 29058 00001739 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 29059                                  
 29060 0000173B 45                      	inc	bp			;AN000; until
 29061 0000173C EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 29062                                  
 29063                                  _$P_MBP_Exit:				;AN000;
 29064 0000173E 45                      	inc	bp			;AN000; bp points to next to NULL
 29065 0000173F C3                      	retn				;AN000;
 29066                                  
 29067                                  ;***********************************************************************
 29068                                  ; _$P_Chk_SW_Control
 29069                                  ;
 29070                                  ; Function: Parse CONTROL block for a switch
 29071                                  ;
 29072                                  ; Input:     ES:BX -> CONTROL block
 29073                                  ;	     cs:SI -> _$P_STRING_BUF
 29074                                  ;
 29075                                  ; Output:    CY = 1 : not match
 29076                                  ;
 29077                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29078                                  ;
 29079                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29080                                  ;***********************************************************************
 29081                                  
 29082                                  _$P_Chk_SW_Control:
 29083                                  
 29084                                  ;IF SwSW				;AN000;(Check if switch is supported)
 29085                                  	;or	byte [cs:_$P_Flags+1],10h
 29086 00001740 2E800E[F514]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 29087 00001746 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 29088 00001749 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 29089                                  
 29090                                  	;and	[cs:_$P_Flags+],0EFh
 29091 0000174B 2E8026[F514]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 29092                                  					;AC034; reset the indicator previously set
 29093 00001751 50                      	push	ax			;AN000; 	      /switch:
 29094 00001752 2EA1[F814]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 29095 00001756 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 29096 00001758 2E0106[F614]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 29097 0000175D 58                      	pop	ax			;AN000;
 29098                                  
 29099 0000175E 2E8B36[F814]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 29100 00001763 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 29101 00001767 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 29102                                  
 29103 00001769 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 29104 0000176E 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 29105                                  
 29106 00001770 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 29107 00001777 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 29108                                  
 29109                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 29110                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 29111 00001779 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 29112 0000177D 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 29113                                  
 29114                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 29115                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 29116                                  	;test	word [es:bx],1
 29117                                  	; 12/12/2022
 29118                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 29119 0000177F 26F60701                	test	byte [es:bx],_$P_Optional
 29120 00001783 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 29121                                  
 29122 00001785 2EC706[E914]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 29123 0000178C EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 29124                                  
 29125                                  _$P_CSW00:				;AN000;
 29126 0000178E E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 29127 00001791 F8                      	clc				;AN000; indicate match
 29128                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29129                                  	; 12/12/2022
 29130 00001792 C3                      	retn
 29131                                  
 29132                                  _$P_Chk_SW_Err0: 			;AN000;
 29133 00001793 F9                      	stc				;AN000; not found in switch synonym list
 29134                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29135                                  	; 12/12/2022
 29136 00001794 C3                      	retn	
 29137                                  
 29138                                  _$P_Chk_SW_Exit: 			;AN000;
 29139 00001795 50                      	push	ax			;AN000;
 29140                                  	;mov	al,_$P_String		;AN000;
 29141                                  	;mov	ah,_$P_No_Tag		;AN000;
 29142                                  	; 07/07/2023
 29143 00001796 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29144 00001799 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 29145 0000179C 58                      	pop	ax			;AN000;
 29146 0000179D F8                      	clc				;AN000;
 29147                                  _$P_Chk_SW_Single_Exit:			;AN000;
 29148 0000179E C3                      	retn				;AN000;
 29149                                  ;ELSE					;AN000;(of IF SwSW)
 29150                                  ;	stc				;AN000; this logic works when the SwSW
 29151                                  ;	retn				;AN000; is reset.
 29152                                  
 29153                                  ;***********************************************************************
 29154                                  ; _$P_Fill_Result
 29155                                  ;
 29156                                  ; Function: Fill the result buffer
 29157                                  ;
 29158                                  ; Input:    AH = Item tag
 29159                                  ;	    AL = type
 29160                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 29161                                  ;		  AL = 2: DX has index(offset) into value list
 29162                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 29163                                  ;		  AL = 7: DX has year, CL has month and CH has date
 29164                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 29165                                  ;			  amd CH has hundredths
 29166                                  ;		  AL = else: cs:SI points to returned string buffer
 29167                                  ;	    ES:BX -> CONTROL block
 29168                                  ;
 29169                                  ; Output:   None
 29170                                  ;
 29171                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 29172                                  ;
 29173                                  ; Vars: _$P_DX(W)
 29174                                  ;***********************************************************************
 29175                                  
 29176                                  _$P_Fill_Result:
 29177 0000179F 57                      	push	di			;AN000;
 29178 000017A0 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 29179                                  					;AN000; di points to result buffer
 29180 000017A4 2E893E[ED14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 29181                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 29182                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 29183                                  	; 07/09/2023
 29184                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 29185 000017A9 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 29186                                  
 29187 000017AC 50                      	push	ax			;AN000;
 29188 000017AD 2EA1[FC14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 29189 000017B1 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 29190                                  					;AN000;   then set it to the result
 29191 000017B5 58                      	pop	ax			;AN000;
 29192                                  _$P_RLT04:				;AN000;
 29193 000017B6 3C01                    	cmp	al,_$P_Number		;AN000; if number
 29194 000017B8 750A                    	jne	short _$P_RLT00		;AN000;
 29195                                  
 29196                                  _$P_RLT02:				;AN000;
 29197 000017BA 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 29198 000017BE 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 29199 000017C2 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 29200                                  
 29201                                  _$P_RLT00:				;AN000;
 29202 000017C4 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 29203 000017C6 7506                    	jne	short _$P_RLT01		;AN000;
 29204                                  
 29205 000017C8 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 29206                                  					;AN000; then store list index
 29207 000017CC EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 29208                                  
 29209                                  _$P_RLT01:				;AN000;
 29210 000017CE 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 29211 000017D0 74E8                    	je	short _$P_RLT02		;AN000;
 29212                                  
 29213 000017D2 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 29214 000017D4 74E4                    	je	short _$P_RLT02		;AN000;
 29215                                  
 29216 000017D6 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 29217 000017D8 7506                    	jne	short _$P_RLT03		;AN000;
 29218                                  
 29219 000017DA 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 29220 000017DE EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 29221                                  
 29222                                  _$P_RLT03:				;AN000;
 29223 000017E0 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 29224 000017E2 750F                    	jne	short _$P_RLT05		;AN000;
 29225                                  
 29226 000017E4 2EA1[F614]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 29227 000017E8 40                      	inc	ax			;AN000; skip left Parentheses
 29228 000017E9 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 29229 000017ED 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 29230 000017F1 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 29231                                  
 29232                                  _$P_RLT05:				;AN000;
 29233                                  ;------------------------  AL = 3, 5, or 9
 29234 000017F3 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 29235                                  					;AN000; store offset of STRING_BUF
 29236 000017F7 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 29237                                  					;AN031; store segment of STRING_BUF
 29238 000017FB 50                      	push	ax			;AN000;
 29239 000017FC 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 29240                                  					;AN000; need CAPS by file table?
 29241 00001801 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 29242                                  
 29243 00001803 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 29244 00001805 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 29245                                  
 29246                                  _$P_RLT_CAP00:				;AN000;
 29247 00001807 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 29248                                  					;AN000; need CAPS by char table ?
 29249 0000180C 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 29250                                  
 29251 0000180E B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 29252                                  _$P_RLT_CAP02:				;AN000;
 29253 00001810 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 29254                                  _$P_RLT_CAP01:				;AN000;
 29255 00001813 58                      	pop	ax			;AN000;
 29256 00001814 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 29257                                  					;AN000; removing colon at end ?
 29258 00001819 7403                    	jz	short _$P_RLT_Exit	;AN000;
 29259                                  
 29260 0000181B E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 29261                                  _$P_RLT_Exit:				;AN000;
 29262 0000181E 5F                      	pop	di			;AN000;
 29263 0000181F C3                      	retn				;AN000;
 29264                                  
 29265                                  ;***********************************************************************
 29266                                  ; _$P_Check_Match_Flags
 29267                                  ;
 29268                                  ; Function:  Check the mutch_flags and make the exit code and set the
 29269                                  ;	     result buffer
 29270                                  ;
 29271                                  ;	    Check for types in this order:
 29272                                  ;		Complex
 29273                                  ;		Date
 29274                                  ;		Time
 29275                                  ;		Drive
 29276                                  ;		Filespec
 29277                                  ;		Quoted String
 29278                                  ;		Simple String
 29279                                  ;
 29280                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29281                                  ;	     ES:BX -> CONTROL block
 29282                                  ;
 29283                                  ; Output:    None
 29284                                  ;
 29285                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 29286                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 29287                                  ;	     _$P_Drive_Format
 29288                                  ;***********************************************************************
 29289                                  
 29290                                  	; 25/10/2022 - Retro DOS v4.0
 29291                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 29292                                  
 29293                                  	; 14/04/2024 - Retro DOS v5.0
 29294                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1FC3h)
 29295                                  
 29296                                  	; 12/12/2022
 29297                                  _$P_Check_Match_Flags:
 29298 00001820 2EC606[8C15]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 29299                                  					;AN033;AC034;; clear filespec error flag.
 29300 00001826 50                      	push	ax			;AN000;
 29301                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 29302 00001827 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 29303 0000182A 09C0                    	or	ax,ax			;AC035; test ax for zero
 29304 0000182C 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 29305 0000182E 50                      	push	ax			;AN000; (tm12)
 29306 0000182F 53                      	push	bx			;AN000; (tm12)
 29307 00001830 52                      	push	dx			;AN000; (tm12)
 29308 00001831 57                      	push	di			;AN000; (tm12)
 29309 00001832 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 29310                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 29311                                  	;mov	al,_$P_String		;AN000; (tm12)
 29312                                  	; 07/07/2023
 29313 00001839 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29314 0000183C E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 29315 0000183F 5F                      	pop	di			;AN000; (tm12)
 29316 00001840 5A                      	pop	dx			;AN000; (tm12)
 29317 00001841 5B                      	pop	bx			;AN000; (tm12)
 29318 00001842 58                      	pop	ax			;AN000; (tm12)
 29319                                  	; 12/12/2022
 29320                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 29321                                  	; 12/12/2022
 29322                                  ;_$P_Mat: 				;AN000; (tm12)
 29323                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 29324                                  _$P_Bridge:
 29325 00001843 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 29326                                  	
 29327                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29328                                  	; (SYSINIT:19F9h)
 29329                                  	; 12/12/2022
 29330                                  	;nop	; db 90h
 29331                                  
 29332                                  ; 12/12/2022
 29333                                  _$P_Mat:
 29334                                  _$P_Match03:				;AN000;
 29335                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 29336                                  	; 07/07/2023
 29337 00001845 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 29338 00001848 7412                    	jz	short _$P_Match04	;AN000;
 29339                                  
 29340 0000184A 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29341 00001851 E81E01                  	call	_$P_Value		;AN000; do process
 29342 00001854 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29343 0000185A 7557                    	jne	short _$P_Match_Exit	;AN000;
 29344                                  _$P_Match04:				;AN000;
 29345                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 29346                                  	; 07/07/2023
 29347 0000185C F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 29348 0000185F 7412                    	jz	short _$P_Match05	;AN000;
 29349                                  
 29350 00001861 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29351 00001868 E8E300                  	call	_$P_SValue		;AN000; do process
 29352 0000186B 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29353 00001871 7540                    	jne	short _$P_Match_Exit	;AN000;
 29354                                  _$P_Match05:				;AN000;
 29355                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 29356                                  	; 07/07/2023
 29357 00001873 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 29358 00001876 7415                    	jz	short _$P_Match06	;AN000;
 29359                                  
 29360 00001878 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29361 0000187F E8F202                  	call	_$P_File_Format		;AN000; 1st, call file format
 29362 00001882 E87203                  	call	_$P_Drive_Format	;AN000; check drive format, next
 29363 00001885 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29364 0000188B 7526                    	jne	short _$P_Match_Exit	;AN000;
 29365                                  _$P_Match06:				;AN000;
 29366                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 29367                                  	; 07/07/2023
 29368 0000188D F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 29369 00001890 7412                    	jz	short _$P_Match07	;AN000;
 29370                                  
 29371 00001892 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29372 00001899 E8D802                  	call	_$P_File_Format		;AN000; do process
 29373 0000189C 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29374 000018A2 750F                    	jne	short _$P_Match_Exit	;AN000;
 29375                                  _$P_Match07:				;AN000;
 29376                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 29377                                  	; 07/07/2023
 29378 000018A4 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 29379 000018A7 740A                    	jz	short _$P_Match09	;AN000;
 29380                                  
 29381 000018A9 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29382 000018B0 E8BA01                  	call	_$P_Simple_String	;AN000; do process
 29383                                  _$P_Match09:				;AN000;
 29384                                  _$P_Match_Exit:				;AN000;
 29385 000018B3 2E833E[8C15]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 29386 000018B9 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29387 000018BB 2E833E[E914]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 29388 000018C1 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29389 000018C3 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 29390                                  _$P_Match2_Exit: 			;AN033;
 29391 000018CA 58                      	pop	ax			;AN000;
 29392 000018CB C3                      	retn				;AN000;
 29393                                  
 29394                                  ;***********************************************************************
 29395                                  ; _$P_Remove_Colon;
 29396                                  ;
 29397                                  ; Function: Remove colon at end
 29398                                  ;
 29399                                  ; Input:    cs:SI points to string buffer to be examineed
 29400                                  ;
 29401                                  ; Output:   None
 29402                                  ;
 29403                                  ; Use:	_$P_Chk_DBCS
 29404                                  ;***********************************************************************
 29405                                  
 29406                                  _$P_Remove_Colon:
 29407 000018CC 50                      	push	ax			;AN000;
 29408 000018CD 56                      	push	si			;AN000;
 29409                                  _$P_RCOL_Loop:				;AN000;
 29410 000018CE 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29411 000018D1 08C0                    	or	al,al			;AN000; end of string ?
 29412 000018D3 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 29413                                  
 29414 000018D5 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 29415 000018D7 750D                    	jne	short _$P_RCOL00	;AN000;
 29416                                  
 29417 000018D9 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 29418 000018DE 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 29419                                  
 29420 000018E0 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 29421 000018E4 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 29422                                  
 29423                                  _$P_RCOL00:				;AN000;
 29424 000018E6 E80E04                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 29425 000018E9 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 29426                                  
 29427 000018EB 46                      	inc	si			;AN000; if yes, skip trailing byte
 29428                                  _$P_RCOL01:				;AN000;
 29429 000018EC 46                      	inc	si			;AN000; si points to next byte
 29430 000018ED EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 29431                                  
 29432                                  _$P_RCOL_Exit:				;AN000;
 29433 000018EF 5E                      	pop	si			;AN000;
 29434 000018F0 58                      	pop	ax			;AN000;
 29435 000018F1 C3                      	retn				;AN000;
 29436                                  
 29437                                  ;***********************************************************************
 29438                                  ; _$P_Do_CAPS_String;
 29439                                  ;
 29440                                  ; Function: Perform capitalization along with the file case map table
 29441                                  ;	    or character case map table.
 29442                                  ;
 29443                                  ; Input:    AL = 2 : Use character table
 29444                                  ;	    AL = 4 : Use file table
 29445                                  ;	    cs:SI points to string buffer to be capitalized
 29446                                  ;
 29447                                  ; Output:   None
 29448                                  ;
 29449                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 29450                                  ;***********************************************************************
 29451                                  
 29452                                  _$P_Do_CAPS_String:
 29453 000018F2 56                      	push	si			;AN000;
 29454 000018F3 52                      	push	dx			;AN000;
 29455 000018F4 88C2                    	mov	dl,al			;AN000; save info id
 29456                                  
 29457                                  _$P_DCS_Loop:				;AN000;
 29458 000018F6 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 29459 000018F9 E8FB03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 29460 000018FC 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 29461                                  
 29462 000018FE 08C0                    	or	al,al			;AN000; end of string ?
 29463 00001900 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 29464                                  
 29465 00001902 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 29466 00001905 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 29467 00001908 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 29468                                  _$P_DCS00:				;AN000;
 29469 0000190A 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 29470                                  _$P_DCS01:				;AN000;
 29471 0000190B 46                      	inc	si			;AN000; si point to next byte
 29472 0000190C EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 29473                                  _$P_DCS_Exit:				;AN000;
 29474 0000190E 5A                      	pop	dx			;AN000;
 29475 0000190F 5E                      	pop	si			;AN000;
 29476 00001910 C3                      	retn
 29477                                  
 29478                                  ;***********************************************************************
 29479                                  ; _$P_Do_CAPS_Char;
 29480                                  ;
 29481                                  ; Function: Perform capitalization along with the file case map table
 29482                                  ;	    or character case map table.
 29483                                  ;
 29484                                  ; Input:    DL = 2 : Use character table
 29485                                  ;	    DL = 4 : Use file table
 29486                                  ;	    AL = character to be capitalized
 29487                                  ;
 29488                                  ; Output:   None
 29489                                  ;
 29490                                  ; Use:	INT 21h /w AH=65h
 29491                                  ;***********************************************************************
 29492                                  
 29493                                  _$P_Do_CAPS_Char:
 29494 00001911 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 29495 00001913 730B                    	jae	short _$P_DCC_Go	;AN000;
 29496                                  
 29497 00001915 3C61                    	cmp	al,"a"                  ;AN000; if no,
 29498 00001917 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 29499                                  
 29500 00001919 3C7A                    	cmp	al,"z"                  ;AN000;
 29501 0000191B 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 29502                                  
 29503 0000191D 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 29504                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 29505                                  	; 07/07/2023
 29506 0000191F C3                      	retn
 29507                                  
 29508                                  _$P_DCC_Go:				;AN000;
 29509 00001920 53                      	push	bx			;AN000;
 29510 00001921 06                      	push	es			;AN000;
 29511 00001922 57                      	push	di			;AN000;
 29512                                  
 29513                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 29514                                  	;lea	di,[_$P_Char_CAP_Ptr]
 29515                                  	; 07/09/2023
 29516 00001923 BF[7E15]                	mov	di,_$P_Char_CAP_Ptr
 29517                                  _$P_DCC00:				;AN000;
 29518 00001926 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 29519 00001929 7415                    	je	short _$P_DCC01		;AN000; if no,
 29520                                  
 29521                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 29522                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 29523                                  ; call, regardless of what base register is currently be defined as cs.
 29524                                  
 29525 0000192B 50                      	push	ax			;AN000; get CAPS table thru DOS call
 29526 0000192C 51                      	push	cx			;AN000;
 29527 0000192D 52                      	push	dx			;AN000;
 29528                                  
 29529 0000192E 0E                      	push	cs			;AC036; pass current base seg into
 29530                                  					;(Note: this used to push CS.  BUG...
 29531 0000192F 07                      	pop	es			;AN000;   ES reg, required for
 29532                                  					;get extended country information
 29533                                  	;mov	al,dl ; function	;AN000; upper case table
 29534                                  	; 07/07/2023
 29535 00001930 92                      	xchg	ax,dx
 29536 00001931 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 29537 00001933 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 29538 00001936 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 29539                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 29540                                  	; 07/07/2023
 29541 00001939 89DA                    	mov	dx,bx ; 0FFFFh
 29542                                  					;DI already set to point to buffer
 29543 0000193B CD21                    	int	21h			;AN000; es:di point to buffer that
 29544                                  					;now has been filled in with info
 29545 0000193D 5A                      	pop	dx			;AN000;
 29546 0000193E 59                      	pop	cx			;AN000;
 29547 0000193F 58                      	pop	ax			;AN000;
 29548                                  
 29549                                  _$P_DCC01:				;AN000;
 29550                                  
 29551                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 29552                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 29553                                  ; regardless of which base reg is currently the cs reg.
 29554                                  
 29555                                  	; 14/04/2024
 29556                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 29557                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 29558                                  	; 07/07/2023
 29559 00001940 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 29560 00001944 43                      	inc	bx			;AC035; add '2' to
 29561 00001945 43                      	inc	bx			;AC035;  BX reg
 29562                                  					;AN000; skip length field
 29563 00001946 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 29564                                  	;xlat	es:[bx] 		;AN000; perform case map
 29565 00001948 26                      	es
 29566 00001949 D7                      	xlat
 29567 0000194A 5F                      	pop	di			;AN000;
 29568 0000194B 07                      	pop	es			;AN000;
 29569 0000194C 5B                      	pop	bx			;AN000;
 29570                                  _$P_CAPS_Ret:				;AN000;
 29571 0000194D C3                      	retn				;AN000;
 29572                                  
 29573                                  ;***********************************************************************
 29574                                  ; _$P_Value / _$P_SValue
 29575                                  ;
 29576                                  ; Function:  Make 32bit value from cs:SI and see value list
 29577                                  ;	     and make result buffer.
 29578                                  ;	     _$P_SValue is an entry point for the signed value
 29579                                  ;	     and this will simply call _$P_Value after the handling
 29580                                  ;	     of the sign character, "+" or "-"
 29581                                  ;
 29582                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29583                                  ;	     ES:BX -> CONTROL block
 29584                                  ;
 29585                                  ; Output:    None
 29586                                  ;
 29587                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 29588                                  ;
 29589                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 29590                                  ;***********************************************************************
 29591                                  
 29592                                  	; 26/10/2022 - Retro DOS v4.0
 29593                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 29594                                  
 29595                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29596                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 29597                                  _$P_SValue:				;AN000; when signed value here
 29598 0000194E 50                      	push	ax			;AN000;
 29599 0000194F 2E800E[F514]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 29600 00001955 2E8026[F514]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 29601                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 29602 0000195B 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 29603 0000195E 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 29604 00001960 740A                    	je	short _$P_SVal00	;AN000;
 29605                                  
 29606 00001962 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 29607 00001964 7507                    	jne	short _$P_Sval01	;AN000; else
 29608                                  
 29609 00001966 2E800E[F514]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 29610                                  _$P_SVal00:				;AN000;
 29611 0000196C 46                      	inc	si			;AN000; skip sign char
 29612                                  _$P_Sval01:				;AN000;
 29613 0000196D E80200                  	call	_$P_Value		;AN000; and process value
 29614 00001970 58                      	pop	ax			;AN000;
 29615 00001971 C3                      	retn
 29616                                  
 29617                                  ;***********************************************************************
 29618                                  
 29619                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29620                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 29621                                  
 29622                                  	; 26/10/2022
 29623                                  _$P_Value:				;AN000;
 29624 00001972 50                      	push	ax			;AN000;
 29625 00001973 51                      	push	cx			;AN000;
 29626 00001974 52                      	push	dx			;AN000;
 29627 00001975 56                      	push	si			;AN000;
 29628 00001976 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 29629 00001978 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 29630 0000197A 53                      	push	bx			;AN000; save control pointer
 29631                                  _$P_Value_Loop:				;AN000;
 29632 0000197B 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29633 0000197E 08C0                    	or	al,al			;AN000; end of line ?
 29634 00001980 7438                    	jz	short _$P_Value00	;AN000;
 29635                                  
 29636 00001982 E8DC00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 29637 00001985 722F                    	jc	short _$P_Value_Err0	;AN000;
 29638                                  
 29639 00001987 30E4                    	xor	ah,ah			;AN000;
 29640 00001989 89C5                    	mov	bp,ax			;AN000; save binary number
 29641                                  
 29642                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29643                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 29644                                  ;				Erdogan Tan - July 2023
 29645                                  %if 0
 29646                                  	shl	dx,1			;AN000; to have 2*x
 29647                                  	rcl	cx,1			;AN000; shift left w/ carry
 29648                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29649                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29650                                  
 29651                                  	mov	bx,dx			;AN000; save low(2*x)
 29652                                  	mov	ax,cx			;AN000; save high(2*x)
 29653                                  	shl	dx,1			;AN000; to have 4*x
 29654                                  	rcl	cx,1			;AN000; shift left w/ carry
 29655                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29656                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29657                                  
 29658                                  	shl	dx,1			;AN000; to have 8*x
 29659                                  	rcl	cx,1			;AN000; shift left w/ carry
 29660                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29661                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29662                                  
 29663                                  	add	dx,bx			;AN000; now have 10*x
 29664                                  	adc	cx,ax			;AN000; 32bit ADD
 29665                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29666                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29667                                  
 29668                                  	add	dx,bp			;AN000; Add the current one degree decimal
 29669                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 29670                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29671                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29672                                  
 29673                                  	inc	si			;AN000; update pointer
 29674                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 29675                                  ;_$P_Value_Err0:
 29676                                  %endif
 29677                                  ;****
 29678                                  %if 1
 29679                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29680                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 29681                                  
 29682                                  	; 14/04/2024 - Retro DOS v5.0
 29683                                  	;xor	ah,ah
 29684                                  	;mov	bp,ax			; save binary number
 29685                                  	
 29686 0000198B E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29687 0000198E 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 29688 00001990 89C8                    	mov	ax,cx
 29689 00001992 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29690 00001995 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29691 00001998 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 29692 0000199A 11C1                    	adc	cx,ax
 29693 0000199C E80F00                  	call	_$P_Value_Chk_Add_OVF
 29694 0000199F 01EA                    	add	dx,bp			; Add the current one degree decimal
 29695                                  					; if carry, add 1 to high 16bit
 29696 000019A1 83D100                  	adc	cx,0
 29697 000019A4 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 29698                                  					; then error, exit (without return here)
 29699 000019A7 46                      	inc	si			; update pointer
 29700 000019A8 EBD1                    	jmp	short _$P_Value_Loop
 29701                                  
 29702                                  _$P_Value_2x_OVF:
 29703 000019AA D1E2                    	shl	dx,1 			; to have 2*x
 29704 000019AC D1D1                    	rcl	cx,1			; shift left w/ carry
 29705                                  _$P_Value_Chk_Add_OVF:
 29706 000019AE E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 29707 000019B1 7201                    	jc	short _$P_Value_OVF
 29708 000019B3 C3                      	retn
 29709                                  _$P_Value_OVF:
 29710 000019B4 44                      	inc	sp 			; skip "call" return address to the caller
 29711 000019B5 44                      	inc	sp
 29712                                  
 29713                                  ;_$P_Value_Err0:	
 29714                                  %endif
 29715                                  ;****
 29716                                  
 29717                                  _$P_Value_Err0:				;AN000;
 29718 000019B6 5B                      	pop	bx			;AN000;
 29719 000019B7 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 29720                                  ;
 29721                                  _$P_Value00:				;AN000;
 29722 000019BA 5B                      	pop	bx			;AN000; restore control pointer
 29723 000019BB 2EF606[F514]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 29724 000019C1 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 29725                                  
 29726 000019C3 F7D1                    	not	cx			;AN000; +
 29727 000019C5 F7D2                    	not	dx			;AN000; |- Make 2's complement
 29728 000019C7 83C201                  	add	dx,1			;AN000; |
 29729 000019CA 83D100                  	adc	cx,0			;AN000; +
 29730                                  
 29731                                  _$P_Value01:				;AN000; / nval = 0
 29732 000019CD 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 29733 000019D1 268A04                  	mov	al,[es:si]		;AN000; get nval
 29734                                  	; 07/09/2023
 29735                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 29736                                  	;;*jne	short _$P_Value02	;AN000;
 29737                                  	;;* 07/07/2023
 29738                                  	;je	short _$P_Value05
 29739                                  	; 07/09/2023
 29740 000019D4 08C0                    	or	al,al
 29741 000019D6 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 29742                                  
 29743                                  	;mov	al,_$P_Number		;AN000; Set type
 29744                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29745                                  	; 07/07/2023
 29746                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29747                                  	;*jmp	short _$P_Value_Exit	;AN000;
 29748                                  
 29749                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 29750                                  	; (SYSINIT:1BA5h)
 29751                                  	; 12/12/2022
 29752                                  	;nop	; db  90h
 29753                                  
 29754                                  _$P_Value02:				;AN000; / nval = 1
 29755                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 29756                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 29757                                  ;(tm07) jne	short _$P_Value03	;AN000;
 29758                                  
 29759 000019D8 46                      	inc	si			;AN000;
 29760 000019D9 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 29761                                  	
 29762                                  	; 07/09/2023
 29763                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 29764                                  	;je	short _$P_Value03	;AN000; (tm07)
 29765 000019DC 08C0                    	or	al,al
 29766 000019DE 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 29767                                  
 29768 000019E0 46                      	inc	si			;AN000; si points to 1st item_tag
 29769                                  _$P_Val02_Loop:				;AN000;
 29770 000019E1 2EF606[F514]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 29771 000019E7 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 29772                                  
 29773 000019E9 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 29774 000019ED 7234                    	jb	short _$P_Val02_Next	;AN000;
 29775 000019EF 7706                    	ja	short _$P_Val_In	;AN000;
 29776                                  
 29777 000019F1 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 29778 000019F5 722C                    	jb	short _$P_Val02_Next	;AN000;
 29779                                  
 29780                                  _$P_Val_In:				;AN000;
 29781 000019F7 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 29782 000019FB 7726                    	ja	short _$P_Val02_Next	;AN000;
 29783 000019FD 7237                    	jb	short _$P_Val_Found	;AN000;
 29784                                  
 29785 000019FF 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 29786 00001A03 771E                    	ja	short _$P_Val02_Next	;AN000;
 29787                                  
 29788 00001A05 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 29789                                  
 29790                                  _$P_Val02_Sign:				;AN000;
 29791 00001A07 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 29792 00001A0B 7C16                    	jl	short _$P_Val02_Next	;AN000;
 29793 00001A0D 7F06                    	jg	short _$P_SVal_In	;AN000;
 29794                                  
 29795 00001A0F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 29796 00001A13 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 29797                                  
 29798                                  _$P_SVal_In:				;AN000;
 29799 00001A15 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 29800 00001A19 7F08                    	jg	short _$P_Val02_Next	;AN000;
 29801                                  
 29802 00001A1B 7C19                    	jl	short _$P_Val_Found	;AN000;
 29803                                  
 29804 00001A1D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 29805                                  	;jg	short _$P_Val02_Next	;AN000;
 29806                                  	;jmp	short _$P_Val_Found	;AN000;
 29807                                  	; 07/07/2023
 29808 00001A21 7E13                    	jng	short _$P_Val_Found
 29809                                  
 29810                                  _$P_Val02_Next:				;AN000;
 29811 00001A23 83C609                  	add	si,_$P_Len_Range 	;AN000;
 29812 00001A26 FEC8                    	dec	al			;AN000; loop nrng times in AL
 29813 00001A28 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 29814                                  					; / Not found
 29815 00001A2A 2EC706[E914]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 29816                                  	;mov	al,_$P_Number		;AN000;
 29817                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29818                                  _$P_Value05:		;* 07/07/2023
 29819                                  	; 07/07/2023
 29820 00001A31 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29821 00001A34 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 29822                                  
 29823                                  _$P_Val_Found:				;AN000;
 29824 00001A36 B001                    	mov	al,_$P_Number		;AN000;
 29825 00001A38 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 29826 00001A3B EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 29827                                  
 29828                                  _$P_Value03:				;AN000; / nval = 2
 29829                                  
 29830                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 29831                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 29832                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 29833                                  ;(tm07) inc	si			;AN000;
 29834                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 29835                                  ;	mov	ah,$P_Len_Range 	;AN000;
 29836                                  ;	mul	ah			;AN000;  Skip nrng field
 29837                                  ;	inc	ax			;AN000;
 29838                                  ;	add	si,ax			;AN000; si points to nnval
 29839                                  ;	mov	al,es:[si]		;AN000; get nnval
 29840                                  ;	inc	si			;AN000; si points to 1st item_tag
 29841                                  ;$P_Val03_Loop:				;AN000;
 29842                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 29843                                  ;	jne	$P_Val03_Next		;AN000;
 29844                                  ;
 29845                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 29846                                  ;	je	$P_Val_Found		;AN000;
 29847                                  ;
 29848                                  ;$P_Val03_Next:				;AN000;
 29849                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 29850                                  ;	dec	al			;AN000; loop nval times in AL
 29851                                  ;	jne	$P_Val03_Loop		;AN000;
 29852                                  ;					;AN000; / Not found
 29853                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 29854                                  ;	mov	al,$P_Number		;AN000;
 29855                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 29856                                  ;	jmp	short $P_Value_Exit	;AN000;
 29857                                  ;
 29858                                  ;ENDIF					;AN000;(of Val2SW)
 29859                                  ;$P_Value04:
 29860                                  
 29861                                  _$P_Value_Err:				;AN000;
 29862 00001A3D 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 29863                                  	;mov	al,_$P_String		;AN000; Set type
 29864                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29865                                  	; 07/09/2023
 29866                                  	; 07/07/2023
 29867 00001A44 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29868                                  _$P_Value_Exit:				;AN000;
 29869 00001A47 E855FD                  	call	_$P_Fill_Result		;AN000;
 29870 00001A4A 5E                      	pop	si			;AN000;
 29871 00001A4B 5A                      	pop	dx			;AN000;
 29872 00001A4C 59                      	pop	cx			;AN000;
 29873 00001A4D 58                      	pop	ax			;AN000;
 29874 00001A4E C3                      	retn				;AN000;
 29875                                  
 29876                                  ; 28/03/2019 - Retro DOS v4.0
 29877                                  
 29878                                  ;***********************************************************************
 29879                                  ; _$P_Check_OVF
 29880                                  ;
 29881                                  ; Function:  Check if overflow is occurred with consideration of
 29882                                  ;	     signed or un-signed numeric value
 29883                                  ;
 29884                                  ; Input:     Flag register
 29885                                  ;
 29886                                  ; Output:    CY = 1  :	Overflow
 29887                                  ;
 29888                                  ; Vars:     _$P_Flags(R)
 29889                                  ;***********************************************************************
 29890                                  
 29891                                  	; 26/10/2022
 29892                                  _$P_Check_OVF:
 29893 00001A4F 9C                      	pushf				;AN000;
 29894 00001A50 2EF606[F514]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 29895 00001A56 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 29896                                  
 29897 00001A58 9D                      	popf				;AN000; by the CY bit
 29898 00001A59 C3                      	retn				;AN000;
 29899                                  
 29900                                  _$P_COVF:				;AN000;
 29901 00001A5A 9D                      	popf				;AN000; else,
 29902 00001A5B 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 29903                                  
 29904 00001A5D F8                      	clc				;AN000; indicate it with CY bit
 29905 00001A5E C3                      	retn				;AN000; CY=0 means no overflow
 29906                                  
 29907                                  _$P_COVF00:				;AN000;
 29908 00001A5F F9                      	stc				;AN000; and CY=1 means overflow
 29909 00001A60 C3                      	retn				;AN000;
 29910                                  
 29911                                  ;***********************************************************************
 29912                                  ; _$P_0099;
 29913                                  ;
 29914                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 29915                                  ;
 29916                                  ; Input:     AL = character code
 29917                                  ;
 29918                                  ; Output:    CY = 1 : AL is not number
 29919                                  ;	     CY = 0 : AL contains binary value
 29920                                  ;***********************************************************************
 29921                                  
 29922                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29923                                  %if 0
 29924                                  _$P_0099:
 29925                                  	cmp	al,"0"                  ;AN000;
 29926                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29927                                  	; 12/12/2022
 29928                                  	jb	short _$P_0099Err2  ; cf=1
 29929                                  
 29930                                  	cmp	al,"9"                  ;AN000;
 29931                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29932                                  
 29933                                  	sub	al,"0"                  ;AN000; make char -> bin
 29934                                  	; 12/12/2022
 29935                                  	; cf=0	
 29936                                  	;clc				;AN000; indicate no error
 29937                                  	retn				;AN000;
 29938                                  
 29939                                  _$P_0099Err:				;AN000;
 29940                                  	stc				;AN000; indicate error
 29941                                  _$P_0099Err2: ; 12/12/2022	
 29942                                  	retn				;AN000;
 29943                                  %endif
 29944                                  
 29945                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29946                                  %if 1
 29947                                  _$P_0099:
 29948 00001A61 3C30                    	cmp	al,"0"                  ; cmp al,30h
 29949 00001A63 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 29950 00001A65 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 29951 00001A67 F5                      	cmc				; cf=0 -> cf=1
 29952 00001A68 7202                    	jb	short _$P_0099Err
 29953 00001A6A 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 29954                                  	; cf=0
 29955                                  _$P_0099Err:	; cf=1
 29956 00001A6C C3                      	retn
 29957                                  %endif
 29958                                  
 29959                                  ;***********************************************************************
 29960                                  ; _$P_Simple_String
 29961                                  ;
 29962                                  ; Function:  See value list for the simple string
 29963                                  ;	     and make result buffer.
 29964                                  ;
 29965                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29966                                  ;	     ES:BX -> CONTROL block
 29967                                  ;
 29968                                  ; Output:    None
 29969                                  ;
 29970                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 29971                                  ;
 29972                                  ; Vars: _$P_RC(W)
 29973                                  ;***********************************************************************
 29974                                  
 29975                                  _$P_Simple_String:
 29976 00001A6D 50                      	push	ax			;AN000;
 29977 00001A6E 53                      	push	bx			;AN000;
 29978 00001A6F 52                      	push	dx			;AN000;
 29979 00001A70 57                      	push	di			;AN000;
 29980 00001A71 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 29981 00001A75 268A05                  	mov	al,[es:di]		;AN000; get nval
 29982 00001A78 08C0                    	or	al,al			;AN000; no value list ?
 29983 00001A7A 7504                    	jnz	short _$P_Sim00		;AN000; then
 29984                                  
 29985 00001A7C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29986 00001A7E EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 29987                                  
 29988                                  _$P_Sim00:				;AN000;
 29989                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 29990 00001A80 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 29991 00001A82 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 29992                                  
 29993 00001A84 47                      	inc	di			;AN000;
 29994 00001A85 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 29995 00001A88 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 29996 00001A8A F6E4                    	mul	ah			;AN000; Skip nrng field
 29997 00001A8C 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 29998 00001A8D 01C7                    	add	di,ax			;AN000; di points to nnval
 29999 00001A8F 268A05                  	mov	al,[es:di]		;AN000; get nnval
 30000 00001A92 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 30001 00001A94 F6E4                    	mul	ah			;AN000; Skip nnval field
 30002 00001A96 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 30003 00001A97 01C7                    	add	di,ax			;AN000; di points to nstrval
 30004 00001A99 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 30005 00001A9C 47                      	inc	di			;AC035; add '2' to
 30006 00001A9D 47                      	inc	di			;AC035;  DI reg
 30007                                  					;AN000; di points to 1st string in list
 30008                                  _$P_Sim_Loop:				;AN000;
 30009 00001A9E 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 30010 00001AA1 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 30011 00001AA4 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 30012                                  
 30013 00001AA6 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 30014 00001AA9 FEC8                    	dec	al			;AN000; loop nstval times in AL
 30015 00001AAB 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 30016                                  					;AN000; / Not found
 30017 00001AAD 2EC706[E914]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 30018 00001AB4 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30019 00001AB6 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 30020                                  
 30021                                  _$P_Sim_Found:				;AN000;
 30022 00001AB8 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 30023 00001ABC B002                    	mov	al,_$P_List_Idx		;AN000;
 30024 00001ABE 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 30025 00001AC1 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 30026                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 30027                                  _$P_Sim01:				;AN000;
 30028 00001AC3 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30029 00001ACA B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30030                                  _$P_Sim_Exit:				;AN000;
 30031 00001ACC B003                    	mov	al,_$P_String		;AN000; Set type
 30032                                  _$P_Sim_Exit0:				;AN000;
 30033 00001ACE E8CEFC                  	call	_$P_Fill_Result		;AN000;
 30034 00001AD1 5F                      	pop	di			;AN000;
 30035 00001AD2 5A                      	pop	dx			;AN000;
 30036 00001AD3 5B                      	pop	bx			;AN000;
 30037 00001AD4 58                      	pop	ax			;AN000;
 30038 00001AD5 C3                      	retn				;AN000;
 30039                                  
 30040                                  ;***********************************************************************
 30041                                  ; _$P_String_Comp:
 30042                                  ;
 30043                                  ; Function:  Compare two string
 30044                                  ;
 30045                                  ; Input:     cs:SI -> 1st string
 30046                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30047                                  ;	     ES:BX -> CONTROL block
 30048                                  ;
 30049                                  ; Output:    CY = 1 if not match
 30050                                  ;
 30051                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 30052                                  ;
 30053                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 30054                                  ;***********************************************************************
 30055                                  
 30056                                  _$P_String_Comp:
 30057 00001AD6 50                      	push	ax			;AN000;
 30058 00001AD7 55                      	push	bp			;AN000;
 30059 00001AD8 52                      	push	dx			;AN000;
 30060 00001AD9 56                      	push	si			;AN000;
 30061 00001ADA B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 30062                                  _$P_SCOM_Loop:				;AN000;
 30063 00001ADC 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30064 00001ADF E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 30065 00001AE2 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 30066                                  
 30067 00001AE4 E82AFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 30068                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 30069 00001AE7 2EF606[F514]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 30070 00001AED 740D                    	jz	short _$P_SCOM04	;AN000;
 30071                                  
 30072 00001AEF 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 30073 00001AF1 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 30074                                  
 30075 00001AF3 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 30076 00001AF8 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 30077                                  
 30078 00001AFA EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 30079                                  
 30080                                  _$P_SCOM04:				;AN000;
 30081 00001AFC 2EF606[F514]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 30082 00001B02 740E                    	jz	short _$P_SCOM03	;AN000;
 30083                                  
 30084 00001B04 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 30085 00001B06 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 30086                                  
 30087                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30088                                  	;cmp	byte [es:bp+0],_$P_NULL
 30089                                  	; 11/12/2022
 30090 00001B08 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 30091 00001B0D 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 30092                                  
 30093                                  _$P_SCOM05:				;AN000;   found a match
 30094 00001B0F 46                      	inc	si			;AN000; si points to just after "=" or ":"
 30095 00001B10 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 30096                                  
 30097                                  _$P_SCOM03:				;AN000;
 30098                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 30099                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30100                                  	;cmp	al,[es:bp+0]
 30101                                  	; 11/12/2022
 30102 00001B12 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 30103 00001B16 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 30104                                  
 30105 00001B18 08C0                    	or	al,al			;AN000; end of line
 30106 00001B1A 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 30107                                  
 30108                                  	; 12/12/2022
 30109                                  	;inc	si			;AN000; update operand pointer
 30110                                  	;inc	bp			;AN000;    and synonym pointer
 30111                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30112 00001B1C EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 30113                                  
 30114                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 30115                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30116                                  	;cmp	al,[es:bp+0]
 30117                                  	; 11/12/2022
 30118 00001B1E 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 30119 00001B22 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 30120                                  
 30121 00001B24 46                      	inc	si			;AN000; else, load next byte
 30122 00001B25 2E8A04                  	mov	al,[cs:si]		;AN000; and
 30123 00001B28 45                      	inc	bp			;AN000;
 30124                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30125                                  	;cmp	al,[es:bp+0]
 30126                                  	; 11/12/2022
 30127 00001B29 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 30128 00001B2D 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 30129                                  
 30130                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30131                                  	; 12/12/2022
 30132                                  _$P_SCOM01:
 30133 00001B2F 46                      	inc	si			;AN000; else update operand pointer
 30134 00001B30 45                      	inc	bp			;AN000; 		and synonym pointer
 30135                                  ;_$P_SCOM01:				;AN000;
 30136 00001B31 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 30137                                  
 30138                                  _$P_SCOM_Differ0:			;AN000;
 30139                                  ;IF SwSW				;AN000;(tm10)
 30140 00001B33 2EF606[F514]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 30141 00001B39 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30142                                  
 30143                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30144                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 30145                                  	; 12/12/2022
 30146 00001B3B 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 30147 00001B40 7407                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30148                                  
 30149                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30150                                  	;cmp	byte [es:bp+0],_$P_NULL
 30151                                  	; 11/12/2022
 30152 00001B42 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 30153                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 30154 00001B47 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 30155                                  
 30156                                  _$P_not_applicable:			;AN000;(tm10)
 30157                                  ;ENDIF					;AN000;(tm10)
 30158                                  
 30159                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30160                                  					;AN000; ignore colon option specified ?
 30161                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 30162                                  	; 12/12/2022
 30163 00001B49 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30164                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30165                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 30166 00001B4D 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 30167                                  
 30168 00001B4F 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 30169 00001B51 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 30170                                  
 30171                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30172                                  	;cmp	byte [es:bp+0],_$P_NULL
 30173                                  	; 11/12/2022
 30174 00001B53 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 30175 00001B58 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 30176                                  
 30177 00001B5A EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 30178                                  
 30179                                  _$P_SCOM02:				;AN000;
 30180 00001B5C 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 30181 00001B5E 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 30182                                  
 30183                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30184                                  	;cmp	byte [es:bp+0],_$P_Colon
 30185                                  	; 11/12/2022
 30186 00001B60 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 30187 00001B65 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 30188                                  
 30189                                  _$P_SCOM_Differ: 			;AN000;
 30190 00001B67 F9                      	stc				;AN000; indicate not found
 30191 00001B68 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 30192                                  
 30193                                  _$P_SCOM_Same:				;AN000;
 30194                                  	; 12/12/2022
 30195                                  	; cf=0
 30196 00001B6A 2E8936[F814]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 30197                                  	; 12/12/2022
 30198                                  	;clc				;AN000; indicate found
 30199                                  _$P_SCOM_Exit:				;AN000;
 30200 00001B6F 5E                      	pop	si			;AN000;
 30201 00001B70 5A                      	pop	dx			;AN000;
 30202 00001B71 5D                      	pop	bp			;AN000;
 30203 00001B72 58                      	pop	ax			;AN000;
 30204 00001B73 C3                      	retn
 30205                                  
 30206                                  ; 30/03/2019
 30207                                  
 30208                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 30209                                  
 30210                                  ;***********************************************************************
 30211                                  ; _$P_File_Format;
 30212                                  ;
 30213                                  ; Function:  Check if the input string is valid file spec format.
 30214                                  ;	     And set the result buffer.
 30215                                  ;
 30216                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30217                                  ;	     ES:BX -> CONTROL block
 30218                                  ;
 30219                                  ; Output:    None
 30220                                  ;
 30221                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 30222                                  ;
 30223                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 30224                                  ;	_$P_SaveSI_Cmpx(R)
 30225                                  ;***********************************************************************
 30226                                  
 30227                                  _$P_File_Format:
 30228 00001B74 50                      	push	ax			;AN000;
 30229 00001B75 57                      	push	di			;AN000;
 30230 00001B76 56                      	push	si			;AN000;
 30231 00001B77 2E8B3E[F614]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 30232                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 30233 00001B7C 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 30234 00001B7F 08C0                    	or	al,al			;AN000; end of line ?
 30235 00001B81 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 30236                                  
 30237 00001B83 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 30238 00001B86 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 30239                                  
 30240 00001B88 2EC606[8C15]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 30241                                  					;AN033;AC034;; set error flag- bad char.
 30242 00001B8E 5E                      	pop	si			;AN033;
 30243 00001B8F 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 30244 00001B93 5F                      	pop	di			;AN033;
 30245 00001B94 EB3E                    	jmp	short _$P_FileF02	;AN033;
 30246                                  
 30247                                  _$P_FileF_Err:				;AN000;
 30248 00001B96 5E                      	pop	si			;AN000;
 30249 00001B97 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 30250 00001B9B 5F                      	pop	di			;AN000;
 30251                                  
 30252                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 30253                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 30254                                  	; 12/12/2022
 30255 00001B9C 26F60701                	test	byte [es:bx],_$P_Optional
 30256                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30257                                  	;test	word [es:bx],_$P_Optional
 30258 00001BA0 7532                    	jnz	short _$P_FileF02	;AN000;
 30259                                  
 30260 00001BA2 2EC706[E914]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 30261 00001BA9 EB29                    	jmp	short _$P_FileF02	;AN000;
 30262                                  
 30263                                  _$P_FileF03:				;AN000;
 30264 00001BAB 58                      	pop	ax			;AN000; discard save si
 30265 00001BAC 56                      	push	si			;AN000; save new si
 30266                                  _$P_FileF_Loop1: 			;AN000;
 30267 00001BAD 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 30268 00001BB0 08C0                    	or	al,al			;AN000; end of line ?
 30269 00001BB2 741E                    	jz	short _$P_FileF_RLT	;AN000;
 30270                                  
 30271 00001BB4 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 30272 00001BB7 740B                    	je	short _$P_FileF00	;AN000;
 30273                                  
 30274 00001BB9 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 30275 00001BBC 7302                    	jnc	short _$P_FileF01	;AN000;
 30276 00001BBE 47                      	inc	di			;AN000; if yes, skip next byte
 30277 00001BBF 46                      	inc	si			;AN000;
 30278                                  _$P_FileF01:				;AN000;
 30279 00001BC0 47                      	inc	di			;AN000;
 30280 00001BC1 46                      	inc	si			;AN000;
 30281 00001BC2 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 30282                                  ;
 30283                                  _$P_FileF00:				;AN000;
 30284 00001BC4 2EA2[EF14]              	mov	[cs:_$P_Terminator],al	;AC034;
 30285 00001BC8 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 30286 00001BCC 47                      	inc	di			;AN000;
 30287 00001BCD 2E893E[EB14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 30288                                  _$P_FileF_RLT:				;AN000;
 30289 00001BD2 5E                      	pop	si			;AN000;
 30290 00001BD3 5F                      	pop	di			;AN000;
 30291                                  _$P_FileF02:				;AN000;
 30292 00001BD4 58                      	pop	ax			;AN000; (tm14)
 30293                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 30294                                  	; 08/07/2023
 30295 00001BD5 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 30296 00001BD8 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 30297                                  
 30298 00001BDA 50                      	push	ax			;AN000; (tm14)
 30299                                  	;mov	ah,_$P_No_Tag		;AN000; set
 30300                                  	;mov	al,_$P_File_Spec 	;AN000; result
 30301                                  	; 08/07/2023
 30302 00001BDB B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 30303                                  					      ; set result
 30304 00001BDE E8BEFB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 30305 00001BE1 58                      	pop	ax			;AN000;
 30306                                  
 30307                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 30308 00001BE2 C3                      	retn				;AN000;
 30309                                  
 30310                                  ;***********************************************************************
 30311                                  ; _$P_FileSp_Chk
 30312                                  ;
 30313                                  ; Function:  Check if the input byte is one of file special characters
 30314                                  ;
 30315                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30316                                  ;	     AL = character code to be examineed
 30317                                  ;
 30318                                  ; Output:    ZF = 1 , AL is one of special characters
 30319                                  ;***********************************************************************
 30320                                  
 30321                                  _$P_FileSp_Chk:
 30322 00001BE3 53                      	push	bx			;AN000;
 30323 00001BE4 51                      	push	cx			;AN000;
 30324                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 30325                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 30326                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 30327                                  	; 07/09/2023
 30328 00001BE5 BB[8315]                	mov	bx,_$P_FileSp_Char
 30329 00001BE8 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 30330                                  _$P_FileSp_Loop: 			;AN000;
 30331 00001BEB 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 30332 00001BEE 7404                    	je	short _$P_FileSp_Exit	;AN000;
 30333                                  
 30334 00001BF0 43                      	inc	bx			;AN000;
 30335 00001BF1 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 30336                                  
 30337 00001BF3 41                      	inc	cx			;AN000; reset ZF
 30338                                  _$P_FileSp_Exit: 			;AN000;
 30339 00001BF4 59                      	pop	cx			;AN000;
 30340 00001BF5 5B                      	pop	bx			;AN000;
 30341 00001BF6 C3                      	retn
 30342                                  
 30343                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 30344                                  
 30345                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 30346                                  
 30347                                  ;***********************************************************************
 30348                                  ; _$P_Drive_Format;
 30349                                  ;
 30350                                  ; Function:  Check if the input string is valid drive only format.
 30351                                  ;	     And set the result buffer.
 30352                                  ;
 30353                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30354                                  ;	     ES:BX -> CONTROL block
 30355                                  ;
 30356                                  ; Output:    None
 30357                                  ;
 30358                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 30359                                  ;
 30360                                  ; Vars: _$P_RC(W)
 30361                                  ;***********************************************************************
 30362                                  
 30363                                  _$P_Drive_Format:
 30364 00001BF7 50                      	push	ax			;AN000;
 30365 00001BF8 52                      	push	dx			;AN000;
 30366 00001BF9 2E8A04                  	mov	al,[cs:si]		;AN000;
 30367 00001BFC 08C0                    	or	al,al			;AN000; if null string
 30368 00001BFE 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 30369                                  
 30370 00001C00 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 30371 00001C03 722A                    	jc	short _$P_Drv_Err	;AN000;
 30372                                  
 30373 00001C05 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 30374 00001C0A 740D                    	je	short _$P_DrvF00	;AN000;
 30375                                  
 30376                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30377                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 30378                                  	; 12/12/2022
 30379 00001C0C 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30380                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30381                                  	;test	word [es:bx],_$P_Ig_Colon
 30382 00001C10 741D                    	jz	short _$P_Drv_Err	;AN000;
 30383                                  
 30384 00001C12 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 30385 00001C17 7516                    	jne	short _$P_Drv_Err	;AN000;
 30386                                  
 30387                                  _$P_DrvF00:				;AN000;
 30388 00001C19 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 30389 00001C1B 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 30390 00001C1D 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 30391                                  
 30392 00001C1F 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 30393 00001C21 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 30394                                  
 30395 00001C23 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 30396 00001C25 88C2                    	mov	dl,al			;AN000; set
 30397                                  	;mov	ah,_$P_No_Tag		;AN000; result
 30398                                  	;mov	al,_$P_Drive		;AN000; buffer
 30399                                  	; 08/07/2023
 30400 00001C27 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 30401                                  					      ; set result buffer
 30402 00001C2A E872FB                  	call	_$P_Fill_Result		;AN000; to drive
 30403 00001C2D EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 30404                                  
 30405                                  _$P_Drv_Err:				;AN000;
 30406 00001C2F 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30407                                  _$P_Drv_Exit:				;AN000;
 30408 00001C36 5A                      	pop	dx			;AN000;
 30409 00001C37 58                      	pop	ax			;AN000;
 30410 00001C38 C3                      	retn				;AN000;
 30411                                  
 30412                                  ;ENDIF					;AN000;(of DrvSW)
 30413                                  
 30414                                  ;***********************************************************************
 30415                                  ; _$P_Skip_Delim;
 30416                                  ;
 30417                                  ; Function: Skip delimiters specified in the PARMS list, white space
 30418                                  ;	    and comma.
 30419                                  ;
 30420                                  ; Input:    DS:SI -> Command String
 30421                                  ;	    ES:DI -> Parameter List
 30422                                  ;
 30423                                  ; Output:   CY = 1 if the end of line encounterd
 30424                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 30425                                  ;	    AL = Last examineed character
 30426                                  ;
 30427                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 30428                                  ;
 30429                                  ; Vars:     _$P_Flags(R)
 30430                                  ;***********************************************************************
 30431                                  
 30432                                  _$P_Skip_Delim:
 30433                                  _$P_Skip_Delim_Loop:			;AN000;
 30434 00001C39 AC                      	lodsb				;AN000;
 30435 00001C3A E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 30436 00001C3D 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 30437                                  
 30438 00001C3F E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 30439 00001C42 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 30440                                  
 30441 00001C44 2EF606[F514]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 30442 00001C4A 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 30443                                  
 30444 00001C4C 2EF606[F514]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 30445                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 30446                                  	; 08/07/2023
 30447                                  	; cf=0
 30448 00001C52 7505                    	jnz	short _$P_Skip_Delim_Exit
 30449 00001C54 C3                      	retn
 30450                                  
 30451                                  	;dec	si			;AN000; backup si for next call (tm08)
 30452                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 30453                                  	; 12/12/2022
 30454                                  	; cf=0
 30455                                  	; 08/07/2023
 30456                                  	;jmp	short _$P_Skip_Delim_Exit
 30457                                  
 30458                                  _$P_Skip_Delim_CY:			;AN000;
 30459 00001C55 F9                      	stc				;AN000; indicate EOL
 30460 00001C56 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 30461                                  
 30462                                  _$P_Skip_Delim_NCY:			;AN000;
 30463 00001C58 F8                      	clc				;AN000; indicate non delim
 30464                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 30465 00001C59 4E                      	dec	si			;AN000;  backup index pointer
 30466                                  	; 08/07/2023
 30467                                  	; 12/12/2022
 30468                                  ;_$P_Exit_At_Extra:	 ; cf=0
 30469 00001C5A C3                      	retn				;AN000;
 30470                                  
 30471                                  	; 12/12/2022
 30472                                  ;_$P_Exit_At_Extra:			;AN000;
 30473                                  	;clc				;AN000; indicate extra delim
 30474                                  	;retn				;AN000;
 30475                                  
 30476                                  ;***********************************************************************
 30477                                  ; _$P_Chk_EOL;
 30478                                  ;
 30479                                  ; Function: Check if AL is one of End of Line characters.
 30480                                  ;
 30481                                  ; Input:    AL = character code
 30482                                  ;	    ES:DI -> Parameter List
 30483                                  ;
 30484                                  ; Output:   ZF = 1 if one of End of Line characters
 30485                                  ;**********************************************************************
 30486                                  
 30487                                  _$P_Chk_EOL:
 30488 00001C5B 53                      	push	bx			;AN000;
 30489 00001C5C 51                      	push	cx			;AN000;
 30490 00001C5D 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 30491 00001C5F 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30492 00001C61 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 30493 00001C63 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30494                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 30495 00001C65 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 30496 00001C67 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30497                                  ;ENDIF					;AN028;
 30498 00001C69 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 30499                                  					;AN000; EOL character specified ?
 30500 00001C6E 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 30501 00001C70 31DB                    	xor	bx,bx			;AN000;
 30502 00001C72 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 30503                                  					;AN000; get length of delimiter list
 30504 00001C76 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 30505                                  	; 08/07/2023
 30506 00001C79 31C9                    	xor	cx,cx ; *
 30507 00001C7B 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 30508 00001C7F 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 30509                                  	; 08/07/2023
 30510                                  	;;xor	cx,cx			;AN000; Get number of extra character
 30511                                  	;xor	ch,ch ; *
 30512 00001C81 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 30513                                  _$P_Chk_EOL_Loop:			;AN000;
 30514 00001C84 43                      	inc	bx			;AN000;
 30515 00001C85 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 30516 00001C88 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30517 00001C8A E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 30518                                  	; 08/07/2023
 30519                                  	; cx=0
 30520                                  _$P_Chk_EOL_NZ:				;AN000;
 30521                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 30522                                  	; 08/07/2023
 30523 00001C8C 41                      	inc	cx  ; zf=0  (cx=1) ; *
 30524                                  _$P_Chk_EOL_Exit:			;AN000;
 30525 00001C8D 59                      	pop	cx			;AN000;
 30526 00001C8E 5B                      	pop	bx			;AN000;
 30527 00001C8F C3                      	retn
 30528                                  
 30529                                  ;***********************************************************************
 30530                                  ; _$P_Chk_Delim;
 30531                                  ;
 30532                                  ; Function: Check if AL is one of delimiter characters.
 30533                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 30534                                  ;	    blanks.
 30535                                  ;
 30536                                  ; Input:    AL = character code
 30537                                  ;	    DS:SI -> Next Character
 30538                                  ;	    ES:DI -> Parameter List
 30539                                  ;
 30540                                  ; Output:   ZF = 1 if one of delimiter characters
 30541                                  ;	    SI points to the next character
 30542                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 30543                                  ;***********************************************************************
 30544                                  
 30545                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30546                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 30547                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 30548                                  
 30549                                  _$P_Chk_Delim:
 30550 00001C90 53                      	push	bx			;AN000;
 30551 00001C91 51                      	push	cx			;AN000;
 30552 00001C92 2EC606[EF14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 30553                                  					;AC034; Assume terminated by space
 30554                                  	;and	byte [cs:_$P_Flags20,0DFh
 30555 00001C98 2E8026[F514]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 30556 00001C9E 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 30557 00001CA0 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30558                                  
 30559 00001CA2 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 30560 00001CA4 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30561                                  
 30562 00001CA6 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 30563 00001CA8 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30564                                  
 30565                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 30566                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 30567                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30568                                  ;_$P_Chk_Delim00:
 30569                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 30570                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 30571                                  %if 0
 30572                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30573                                  _$P_Chk_Delim00: 			;AN000;
 30574                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 30575                                  	jne	short _$P_Chk_Delim01	;AN000;
 30576                                  
 30577                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 30578                                  	jne	short _$P_Chk_Delim01	;AN000;
 30579                                  
 30580                                  	mov	al,_$P_Space		;AN000;
 30581                                  	inc	si			;AN000; make si point to next character
 30582                                  	cmp	al,al			;AN000; Set ZF
 30583                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30584                                  %endif
 30585                                  
 30586                                  _$P_Chk_Delim01: 			;AN000;
 30587 00001CAA 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 30588                                  					;AN000; delimiter character specified ?
 30589 00001CAF 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 30590                                  
 30591                                  	;xor	cx,cx			;AN000;
 30592 00001CB1 30ED                    	xor	ch,ch
 30593                                  	;mov	cl,[es:di+3]
 30594 00001CB3 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 30595                                  					;AN000; get length of delimiter list
 30596                                  	;or	cx,cx			;AN000; No extra Delim character ?
 30597                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 30598                                  	; 08/07/2023
 30599 00001CB7 E30B                    	jcxz	_$P_Chk_Delim_NZ
 30600                                  
 30601 00001CB9 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 30602                                  _$P_Chk_Delim_Loop:			;AN000;
 30603 00001CBC 43                      	inc	bx			;AN000;
 30604 00001CBD 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 30605 00001CC0 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30606                                  
 30607 00001CC2 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 30608                                  
 30609                                  _$P_Chk_Delim_NZ:			;AN000;
 30610                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 30611                                  	; 08/07/2023
 30612                                  	; cx=0 here
 30613 00001CC4 41                      	inc	cx ; cx=1, zf=0
 30614                                  _$P_Chk_Delim_Exit:			;AN000;
 30615                                  _$P_ChkDfin:				;AN000;
 30616 00001CC5 59                      	pop	cx			;AN000;
 30617 00001CC6 5B                      	pop	bx			;AN000;
 30618 00001CC7 C3                      	retn				;AN000;
 30619                                  
 30620                                  _$P_Chk_Delim_Exit0:			;AN000;
 30621 00001CC8 2EA2[EF14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 30622 00001CCC 2EF606[F514]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 30623 00001CD2 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 30624                                  
 30625 00001CD4 2E800E[F514]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 30626                                  					;AC034; flag terminated extra delimiter or comma
 30627                                  _$P_No_Set_Extra:			;AN027;
 30628 00001CDA 38C0                    	cmp	al,al			;AN000; set ZF
 30629 00001CDC EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30630                                  
 30631                                  ;***********************************************************************
 30632                                  ; _$P_Chk_Switch;
 30633                                  ;
 30634                                  ; Function: Check if AL is the switch character not in first position of
 30635                                  ;	    _$P_STRING_BUF
 30636                                  ;
 30637                                  ; Input:    AL = character code
 30638                                  ;	    BX = current pointer within _$P_String_Buf
 30639                                  ;	    SI =>next char on command line (following the one in AL)
 30640                                  ;
 30641                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 30642                                  ;		 position, and has no chance of being part of a date string,
 30643                                  ;		 i.e. should be treated as a delimiter.
 30644                                  
 30645                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 30646                                  ;		 position, or is a slash but may be part of a date string, i.e.
 30647                                  ;		 should not be treated as a delimiter.
 30648                                  ;
 30649                                  ; Vars:  _$P_Terminator(W)
 30650                                  
 30651                                  ; Use:	 _$P_0099
 30652                                  ;***********************************************************************
 30653                                  
 30654                                  _$P_Chk_Switch:
 30655                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 30656                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 30657                                  	; 08/07/2023
 30658 00001CDE BD[FE14]                	mov	bp,_$P_STRING_BUF
 30659                                  
 30660                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 30661 00001CE1 39EB                    	cmp	bx,bp			;AN000;
 30662 00001CE3 7406                    	je	short _$P_STRUC_L2	;AN000;
 30663                                  
 30664                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 30665 00001CE5 3C2F                    	cmp	al,_$P_Switch		;AN000;
 30666 00001CE7 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 30667                                  
 30668 00001CE9 F9                      	stc				;AN020;not in first position and is slash
 30669                                  	;jmp     short _$P_STRUC_L1	;AN000;
 30670                                  	; 12/12/2022
 30671 00001CEA C3                      	retn
 30672                                  
 30673                                  ; 12/12/2022
 30674                                  ;_$P_STRUC_L5:				;AN000;
 30675                                  ;	CLC				;AN020;not a slash
 30676                                  ;;	    .ENDIF			;AN020;
 30677                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 30678                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 30679                                  
 30680                                  _$P_STRUC_L2:				;AN000;
 30681                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 30682 00001CEB 3C2F                    	cmp     al,_$P_Switch		;AN000;
 30683 00001CED 7506                    	jne	short _$P_STRUC_L12	;AN000;
 30684                                  
 30685 00001CEF 2E800E[F514]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 30686                                  ;	.ENDIF				;AN020;
 30687                                  
 30688                                  	; 12/12/2022
 30689                                  	; cf=0
 30690                                  	;retn
 30691                                  
 30692                                  _$P_STRUC_L5:
 30693                                  	; 12/12/2022
 30694                                  _$P_STRUC_L12:				;AN000;
 30695 00001CF5 F8                      	clc				;AN020;CF=0 indicating first char
 30696                                  ;	.ENDIF				;AN020;
 30697                                  _$P_STRUC_L1:				;AN000;
 30698 00001CF6 C3                      	retn				;AN000;
 30699                                  
 30700                                  ;**************************************************************************
 30701                                  ; _$P_Chk_DBCS:
 30702                                  ;
 30703                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 30704                                  ;
 30705                                  ;  Input:
 30706                                  ;	  AL	= Code to be examineed
 30707                                  ;
 30708                                  ;  Output:
 30709                                  ;	  If CF is on then a lead byte of DBCS
 30710                                  ;
 30711                                  ; Use: INT 21h w/AH=63
 30712                                  ;
 30713                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 30714                                  ;***************************************************************************
 30715                                  
 30716                                  _$P_Chk_DBCS:
 30717 00001CF7 1E                      	push	ds			;AN000;
 30718 00001CF8 56                      	push	si			;AN000;
 30719 00001CF9 53                      	push	bx			;AN000; (tm11)
 30720                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 30721                                  	;jne	short _$P_DBCS00	;AN000;
 30722                                  	; 08/07/2023
 30723 00001CFA 2E8B36[F214]            	mov	si,[cs:_$P_DBCSEV_SEG]
 30724 00001CFF 21F6                    	and	si,si ; 0 ?
 30725 00001D01 7525                    	jnz	short _$P_DBCS00 ; already set
 30726 00001D03 50                      	push	ax			;AN000;
 30727 00001D04 1E                      	push	ds			;AN000; (tm11)
 30728 00001D05 51                      	push	cx			;AN000;
 30729 00001D06 52                      	push	dx			;AN000;
 30730 00001D07 57                      	push	di			;AN000;
 30731 00001D08 55                      	push	bp			;AN000;
 30732 00001D09 06                      	push	es			;AN000;
 30733                                  	; si = 0 ; 08/07/2023
 30734                                  	;xor	si,si			;AN000;
 30735 00001D0A 8EDE                    	mov	ds,si ; 0		;AN000;
 30736 00001D0C B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 30737 00001D0F CD21                    	int	21h			;AN000;
 30738                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 30739 00001D11 8CDB                    	mov	bx,ds			;AN000; (tm11)
 30740 00001D13 09DB                    	or	bx,bx			;AN000; (tm11)
 30741 00001D15 07                      	pop	es			;AN000;
 30742 00001D16 5D                      	pop	bp			;AN000;
 30743 00001D17 5F                      	pop	di			;AN000;
 30744 00001D18 5A                      	pop	dx			;AN000;
 30745 00001D19 59                      	pop	cx			;AN000;
 30746 00001D1A 1F                      	pop	ds			;AN000; (tm11)
 30747 00001D1B 58                      	pop	ax			;AN000;
 30748 00001D1C 7424                    	jz	short _$P_NON_DBCS	;AN000;
 30749                                  _$P_DBCS02:				;AN000;
 30750 00001D1E 2E8936[F014]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 30751 00001D23 2E891E[F214]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 30752                                  _$P_DBCS00:				;AN000;
 30753                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 30754                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 30755                                  	; 08/07/2023
 30756 00001D28 2EC536[F014]            	lds	si,[cs:_$P_DBCSEV_OFF]
 30757                                  _$P_DBCS_LOOP:				;AN000;
 30758 00001D2D 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 30759 00001D30 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 30760 00001D32 3A04                    	cmp	al,[si] 		;AN000;
 30761 00001D34 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 30762 00001D36 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 30763 00001D39 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 30764 00001D3B F9                      	stc				;AN000; if yes, indicate DBCS and exit
 30765 00001D3C EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 30766                                  _$P_DBCS01:				;AN000;
 30767 00001D3E 46                      	inc	si			;AC035; add '2' to
 30768 00001D3F 46                      	inc	si			;AC035;  SI reg
 30769                                  					;AN000; get next vector
 30770 00001D40 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 30771                                  _$P_NON_DBCS:				;AN000;
 30772                                  	; 12/12/2022
 30773                                  	; cf=0
 30774                                  	;clc				;AN000; indicate SBCS
 30775                                  _$P_DBCS_EXIT:				;AN000;
 30776 00001D42 5B                      	pop	bx			;AN000; (tm11)
 30777 00001D43 5E                      	pop	si			;AN000;
 30778 00001D44 1F                      	pop	ds			;AN000;
 30779 00001D45 C3                      	retn				;AN000;
 30780                                  
 30781                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 30782                                  ; ======================================================================
 30783                                  ; 27/03/2019 - Retro DOS v4.0
 30784                                  
 30785                                  ;control block definitions for parser.
 30786                                  ;-----------------------------------------------------------------------
 30787                                  ; buffer = [n | n,m] {/e}
 30788                                  
 30789                                  ; 30/03/2019
 30790                                  
 30791                                  struc p_parms
 30792 00000000 ????                    	resw	1	; dw ?
 30793 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 30794 00000003 ??                      	resb	1	; db 1	; length is 1
 30795 00000004 ??                      	resb 	1	; db ';' ; delimiter
 30796                                  .size:
 30797                                  endstruc
 30798                                  
 30799                                  struc p_pos
 30800 00000000 ????                    	resw	1	; dw ?	; numeric value??
 30801 00000002 ????                    	resw	1	; dw ?	; function
 30802 00000004 ????                    	resw	1	; dw ?	; result value buffer
 30803                                  
 30804                                  ; note: by defining result_val before this structure, we could remove
 30805                                  ;  the "result_val" from every structure invocation
 30806                                  
 30807 00000006 ????                    	resw	1	; dw ?	; value list
 30808 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 30809                                  .size:
 30810                                  endstruc
 30811                                  
 30812                                  struc	p_range
 30813 00000000 ??                      	resb	1	; db 1	; range definition
 30814 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 30815 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 30816 00000003 ????????                	resd	1	; dd ?	; numeric min
 30817 00000007 ????????                	resd	1	; dd ?	; numeric max
 30818                                  .size:
 30819                                  endstruc
 30820                                  
 30821                                  ;-----------------------------------------------------------------------
 30822                                  
 30823                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30824                                  	; (SYSINIT:1F48h)
 30825                                  
 30826                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30827                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 30828                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 30829                                  
 30830                                  ; buffer = [n | n,m] {/e}
 30831                                  
 30832                                  ;buf_parms p_parms <buf_parmsx>
 30833                                  buf_parms: 
 30834 00001D46 [4B1D]                  	dw	buf_parmsx
 30835 00001D48 01                      	db	1	; an extra delimiter list
 30836 00001D49 01                      	db	1	; length is 1
 30837 00001D4A 3B                      	db	';'	; delimiter
 30838                                  
 30839                                  buf_parmsx:
 30840 00001D4B 0102[551D][691D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 30841 00001D51 01                      	db	1			; one switch
 30842 00001D52 [7D1D]                  	dw	sw_x_ctrl
 30843 00001D54 00                      	db	0			; no keywords
 30844                                  
 30845                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 30846                                  buf_pos1:
 30847 00001D55 0080                    	dw	8000h	; numeric value??
 30848 00001D57 0000                    	dw	0	; function
 30849 00001D59 [8F1D]                  	dw	result_val ; result value buffer	
 30850 00001D5B [5E1D]                  	dw	buf_range_1 ; value list
 30851 00001D5D 00                      	db	0  	; no switches/keywords
 30852                                  
 30853                                  ;buf_range_1 p_range <,,,1,99>		; M050
 30854                                  buf_range_1:
 30855 00001D5E 01                      	db	1	; range definition
 30856 00001D5F 01                      	db	1	; 1 definition of range
 30857 00001D60 01                      	db	1	; item tag for this range
 30858 00001D61 01000000                	dd	1	; numeric min
 30859 00001D65 63000000                	dd	99	; numeric max
 30860                                  
 30861                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 30862                                  buf_pos2:
 30863 00001D69 0180                    	dw	8001h
 30864 00001D6B 0000                    	dw	0
 30865 00001D6D [8F1D]                  	dw	result_val	
 30866 00001D6F [721D]                  	dw	buf_range_2
 30867 00001D71 00                      	db	0
 30868                                  
 30869                                  ;buf_range_2 p_range <,,,0,8>
 30870                                  buf_range_2:
 30871 00001D72 01                      	db	1
 30872 00001D73 01                      	db	1
 30873 00001D74 01                      	db	1
 30874 00001D75 00000000                	dd	0
 30875 00001D79 08000000                	dd	8
 30876                                  
 30877                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 30878                                  sw_x_ctrl:
 30879 00001D7D 0000                    	dw	0
 30880 00001D7F 0000                    	dw	0
 30881 00001D81 [8F1D]                  	dw	result_val	
 30882 00001D83 [8E1D]                  	dw	noval
 30883 00001D85 01                      	db	1	; 1 switch
 30884                                  	
 30885                                  switch_x:
 30886 00001D86 2F5800                  	db	'/X',0		; M016
 30887                                  
 30888                                  p_buffers:
 30889 00001D89 0000                    	dw	0	; local variables
 30890                                  p_h_buffers:
 30891 00001D8B 0000                    	dw	0
 30892                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30893                                  p_buffer_slash_x:
 30894 00001D8D 00                      	db	0 ; 31/03/2019
 30895                                  
 30896                                  ;-- common definitions -------------------------------------------------
 30897                                  
 30898 00001D8E 00                      noval:	db	0
 30899                                  
 30900                                  result_val: 	;label	byte
 30901 00001D8F 00                      	db	0		; type returned
 30902                                  result_val_itag:
 30903 00001D90 00                      	db	0		; item tag returned
 30904                                  result_val_swoff:
 30905 00001D91 0000                    	dw	0		; es:offset of the switch defined
 30906                                  rv_byte:	;label	byte
 30907 00001D93 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 30908                                  
 30909                                  ;-----------------------------------------------------------------------
 30910                                  
 30911                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30912                                  	; (SYSINIT:1F99h)
 30913                                  
 30914                                  ; break = [ on | off ]
 30915                                  
 30916                                  ;brk_parms p_parms  <brk_parmsx>
 30917                                  brk_parms:
 30918 00001D97 [9C1D]                  	dw	brk_parmsx
 30919 00001D99 01                      	db	1	; an extra delimiter list
 30920 00001D9A 01                      	db	1	; length is 1
 30921 00001D9B 3B                      	db	';'	; delimiter
 30922                                  
 30923                                  brk_parmsx:
 30924 00001D9C 0101[A21D]              	dw	101h,brk_pos	; min,max = 1 positional
 30925 00001DA0 00                      	db	0		; no switches
 30926 00001DA1 00                      	db	0		; no keywords
 30927                                  
 30928                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 30929                                  brk_pos:
 30930 00001DA2 0020                    	dw	2000h
 30931 00001DA4 0000                    	dw	0
 30932 00001DA6 [8F1D]                  	dw	result_val	
 30933 00001DA8 [AB1D]                  	dw	on_off_string
 30934 00001DAA 00                      	db	0
 30935                                  
 30936                                  on_off_string:	;label	byte
 30937 00001DAB 03                      	db	3		; signals that there is a string choice
 30938 00001DAC 00                      	db	0		; no range definition
 30939 00001DAD 00                      	db	0		; no numeric values choice
 30940 00001DAE 02                      	db	2		; 2 strings for choice
 30941 00001DAF 01                      	db	1		; the 1st string tag
 30942 00001DB0 [B51D]                  	dw	on_string
 30943 00001DB2 02                      	db	2		; the 2nd string tag
 30944 00001DB3 [B81D]                  	dw	off_string
 30945                                  
 30946                                  on_string:
 30947 00001DB5 4F4E00                  	db	"ON",0
 30948                                  off_string:
 30949 00001DB8 4F464600                	db	"OFF",0
 30950                                  
 30951                                  p_ctrl_break:
 30952 00001DBC 00                      	db	0	; local variable
 30953                                  
 30954                                  ;-----------------------------------------------------------------------
 30955                                  
 30956                                  	; 27/10/2022
 30957                                  
 30958                                  ; country = n {m {path}}
 30959                                  ; or
 30960                                  ; country = n,,path
 30961                                  
 30962                                  ;cntry_parms p_parms <cntry_parmsx>
 30963                                  cntry_parms:
 30964 00001DBD [C21D]                  	dw	cntry_parmsx
 30965 00001DBF 01                      	db	1
 30966 00001DC0 01                      	db	1
 30967 00001DC1 3B                      	db	';'
 30968                                  	
 30969                                  cntry_parmsx:
 30970 00001DC2 0103[CC1D][E01D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 30970 00001DC8 [E91D]             
 30971 00001DCA 00                      	db	0		; no switches
 30972 00001DCB 00                      	db	0		; no keywords
 30973                                  
 30974                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 30975                                  cntry_pos1:
 30976 00001DCC 0080                    	dw	8000h
 30977 00001DCE 0000                    	dw	0
 30978 00001DD0 [8F1D]                  	dw	result_val	
 30979 00001DD2 [D51D]                  	dw	cc_range
 30980 00001DD4 00                      	db	0
 30981                                  
 30982                                  ;cc_range p_range <,,,1,999>
 30983                                  cc_range:
 30984 00001DD5 01                      	db	1
 30985 00001DD6 01                      	db	1
 30986 00001DD7 01                      	db	1
 30987 00001DD8 01000000                	dd	1
 30988 00001DDC E7030000                	dd	999
 30989                                  
 30990                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 30991                                  cntry_pos2:
 30992 00001DE0 0180                    	dw	8001h
 30993 00001DE2 0000                    	dw	0
 30994 00001DE4 [8F1D]                  	dw	result_val	
 30995 00001DE6 [D51D]                  	dw	cc_range
 30996 00001DE8 00                      	db	0
 30997                                  
 30998                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 30999                                  cntry_pos3:
 31000 00001DE9 0102                    	dw	201h
 31001 00001DEB 0000                    	dw	0
 31002 00001DED [8F1D]                  	dw	result_val	
 31003 00001DEF [8E1D]                  	dw	noval
 31004 00001DF1 00                      	db	0	
 31005                                  
 31006                                  p_cntry_code:
 31007 00001DF2 0000                    	dw	0	; local variable
 31008                                  p_code_page:
 31009 00001DF4 0000                    	dw	0	; local variable
 31010                                  
 31011                                  ;-----------------------------------------------------------------------
 31012                                  
 31013                                  	; 27/10/2022
 31014                                  
 31015                                  ; files = n
 31016                                  
 31017                                  ;files_parms p_parms <files_parmsx>
 31018                                  files_parms:
 31019 00001DF6 [FB1D]                  	dw	files_parmsx
 31020 00001DF8 01                      	db	1
 31021 00001DF9 01                      	db	1
 31022 00001DFA 3B                      	db	';'
 31023                                  
 31024                                  files_parmsx:
 31025 00001DFB 0101[011E]              	dw	101h,files_pos	; min,max 1 positional
 31026 00001DFF 00                      	db	0		; no switches
 31027 00001E00 00                      	db	0		; no keywords
 31028                                  
 31029                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 31030                                  files_pos:
 31031 00001E01 0080                    	dw	8000h
 31032 00001E03 0000                    	dw	0
 31033 00001E05 [8F1D]                  	dw	result_val	
 31034 00001E07 [0A1E]                  	dw	files_range
 31035 00001E09 00                      	db	0
 31036                                  
 31037                                  ;files_range p_range <,,,8,255>
 31038                                  files_range:
 31039 00001E0A 01                      	db	1
 31040 00001E0B 01                      	db	1
 31041 00001E0C 01                      	db	1
 31042 00001E0D 08000000                	dd	8
 31043 00001E11 FF000000                	dd	255
 31044                                  
 31045                                  p_files:
 31046 00001E15 00                      	db	0		; local variable
 31047                                  
 31048                                  ;-----------------------------------------------------------------------
 31049                                  
 31050                                  	; 27/10/2022
 31051                                  
 31052                                  ; fcbs = n,m
 31053                                  
 31054                                  ;fcbs_parms p_parms <fcbs_parmsx>
 31055                                  fcbs_parms:
 31056 00001E16 [1B1E]                  	dw	fcbs_parmsx
 31057 00001E18 01                      	db	1
 31058 00001E19 01                      	db	1
 31059 00001E1A 3B                      	db	';'
 31060                                  
 31061                                  fcbs_parmsx:
 31062 00001E1B 0102[231E][371E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 31063 00001E21 00                      	db	0		; no switches
 31064 00001E22 00                      	db	0		; no keywords
 31065                                  
 31066                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 31067                                  fcbs_pos_1:
 31068 00001E23 0080                    	dw	8000h
 31069 00001E25 0000                    	dw	0
 31070 00001E27 [8F1D]                  	dw	result_val	
 31071 00001E29 [2C1E]                  	dw	fcbs_range
 31072 00001E2B 00                      	db	0
 31073                                  
 31074                                  ;fcbs_range p_range <,,,1,255>
 31075                                  fcbs_range:
 31076 00001E2C 01                      	db	1
 31077 00001E2D 01                      	db	1
 31078 00001E2E 01                      	db	1
 31079 00001E2F 01000000                	dd	1
 31080 00001E33 FF000000                	dd	255
 31081                                  
 31082                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 31083                                  fcbs_pos_2:
 31084 00001E37 0080                    	dw	8000h
 31085 00001E39 0000                    	dw	0
 31086 00001E3B [8F1D]                  	dw	result_val	
 31087 00001E3D [401E]                  	dw	fcbs_keep_range
 31088 00001E3F 00                      	db	0
 31089                                  
 31090                                  ;fcbs_keep_range p_range <,,,0,255>
 31091                                  fcbs_keep_range:
 31092 00001E40 01                      	db	1
 31093 00001E41 01                      	db	1
 31094 00001E42 01                      	db	1
 31095 00001E43 00000000                	dd	0
 31096 00001E47 FF000000                	dd	255
 31097                                  
 31098 00001E4B 00                      p_fcbs:	db	0		; local variable
 31099 00001E4C 00                      p_keep:	db	0		; local variable
 31100                                  
 31101                                  ;-----------------------------------------------------------------------
 31102                                  
 31103                                  	; 27/10/2022
 31104                                  
 31105                                  ; lastdrive = x
 31106                                  
 31107                                  ;ldrv_parms p_parms <ldrv_parmsx>
 31108                                  ldrv_parms:
 31109 00001E4D [521E]                  	dw	ldrv_parmsx
 31110 00001E4F 01                      	db	1
 31111 00001E50 01                      	db	1
 31112 00001E51 3B                      	db	';'
 31113                                  
 31114                                  ldrv_parmsx:
 31115 00001E52 0101[581E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 31116 00001E56 00                      	db	0		; no switches
 31117 00001E57 00                      	db	0		; no keywords
 31118                                  
 31119                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 31120                                  ldrv_pos:				    ; remove colon at end
 31121 00001E58 1001                    	dw	110h
 31122 00001E5A 1000                    	dw	10h
 31123 00001E5C [8F1D]                  	dw	result_val	
 31124 00001E5E [8E1D]                  	dw	noval
 31125 00001E60 00                      	db	0
 31126                                  	
 31127 00001E61 00                      p_ldrv:	db	0		; local variable
 31128                                  
 31129                                  ;-----------------------------------------------------------------------
 31130                                  
 31131                                  	; 27/10/2022
 31132                                  
 31133                                  ; stacks = n,m
 31134                                  
 31135                                  ;stks_parms p_parms <stks_parmsx>
 31136                                  stks_parms:
 31137 00001E62 [671E]                  	dw	stks_parmsx
 31138 00001E64 01                      	db	1
 31139 00001E65 01                      	db	1
 31140 00001E66 3B                      	db	';'
 31141                                  
 31142                                  stks_parmsx:
 31143 00001E67 0202[6F1E][831E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 31144 00001E6D 00                      	db	0		; no switches
 31145 00001E6E 00                      	db	0		; no keywords
 31146                                  
 31147                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 31148                                  stks_pos_1:
 31149 00001E6F 0080                    	dw	8000h
 31150 00001E71 0000                    	dw	0
 31151 00001E73 [8F1D]                  	dw	result_val	
 31152 00001E75 [781E]                  	dw	stks_range
 31153 00001E77 00                      	db	0
 31154                                  
 31155                                  ;stks_range p_range <,,,0,64>
 31156                                  stks_range:
 31157 00001E78 01                      	db	1
 31158 00001E79 01                      	db	1
 31159 00001E7A 01                      	db	1
 31160 00001E7B 00000000                	dd	0
 31161 00001E7F 40000000                	dd	64
 31162                                  
 31163                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 31164                                  stks_pos_2:
 31165 00001E83 0080                    	dw	8000h
 31166 00001E85 0000                    	dw	0
 31167 00001E87 [8F1D]                  	dw	result_val	
 31168 00001E89 [8C1E]                  	dw	stk_size_range
 31169 00001E8B 00                      	db	0
 31170                                  
 31171                                  ;stk_size_range p_range <,,,0,512>
 31172                                  stk_size_range:
 31173 00001E8C 01                      	db	1
 31174 00001E8D 01                      	db	1
 31175 00001E8E 01                      	db	1
 31176 00001E8F 00000000                	dd	0
 31177 00001E93 00020000                	dd	512	
 31178                                  
 31179                                  p_stack_count:
 31180 00001E97 0000                    	dw	0	; local variable
 31181                                  p_stack_size:
 31182 00001E99 0000                    	dw	0	; local variable
 31183                                  
 31184                                  ;-----------------------------------------------------------------------
 31185                                  
 31186                                  	; 27/10/2022
 31187                                  
 31188                                  ; multitrack = [ on | off ]
 31189                                  
 31190                                  ;mtrk_parms p_parms <mtrk_parmsx>
 31191                                  mtrk_parms:
 31192 00001E9B [A01E]                  	dw	mtrk_parmsx
 31193 00001E9D 01                      	db	1
 31194 00001E9E 01                      	db	1
 31195 00001E9F 3B                      	db	';'
 31196                                  
 31197                                  mtrk_parmsx:
 31198 00001EA0 0101[A61E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 31199 00001EA4 00                      	db	0		; no switches
 31200 00001EA5 00                      	db	0		; no keywords
 31201                                  
 31202                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31203                                  mtrk_pos:
 31204 00001EA6 0020                    	dw	2000h
 31205 00001EA8 0000                    	dw	0
 31206 00001EAA [8F1D]                  	dw	result_val	
 31207 00001EAC [AB1D]                  	dw	on_off_string
 31208 00001EAE 00                      	db	0
 31209                                  
 31210 00001EAF 00                      p_mtrk:	db	0		; local variable
 31211                                  
 31212                                  ;-----------------------------------------------------------------------
 31213                                  
 31214                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31215                                  	; (SYSINIT:20B2h)
 31216                                  
 31217                                  ; switches=/k
 31218                                  
 31219                                  ;swit_parms p_parms <swit_parmsx>
 31220                                  swit_parms:
 31221 00001EB0 [B51E]                  	dw	swit_parmsx
 31222 00001EB2 01                      	db	1
 31223 00001EB3 01                      	db	1
 31224 00001EB4 3B                      	db	';'
 31225                                  
 31226                                  swit_parmsx:
 31227 00001EB5 0000                    	dw	0		; no positionals
 31228                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 31229                                  	;db	5               ; # of switches
 31230                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31231 00001EB7 06                      	db	6
 31232                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31233                                  	;db	3
 31234 00001EB8 [C51E]                  	dw	swit_k_ctrl	; /k control
 31235                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 31236 00001EBA [D11E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 31237 00001EBC [DD1E]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 31238 00001EBE [E91E]                  	dw	swit_t_ctrl     ; /t control
 31239 00001EC0 [F51E]                  	dw	swit_w_ctrl     ; /w control
 31240                                  	; 14/04/2024 - Retro DOS v5.0 ; **
 31241 00001EC2 [011F]                  	dw	swit_i_ctrl	; /i control
 31242 00001EC4 00                      	db	0		; no keywords
 31243                                  
 31244                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31245                                  swit_k_ctrl:
 31246 00001EC5 00000000[8F1D]-         	dw	0,0,result_val,noval
 31246 00001ECB [8E1D]             
 31247 00001ECD 01                      	db	1
 31248 00001ECE 2F4B00                  swit_k:	db	'/K',0
 31249                                  
 31250                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 31251                                  ; (SYSINIT:220Ch) ; *
 31252                                  
 31253                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31254                                  ;
 31255                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31256                                  swit_n_ctrl: ; *
 31257 00001ED1 00000000[8F1D]-         	dw	0,0,result_val,noval
 31257 00001ED7 [8E1D]             
 31258 00001ED9 01                      	db	1
 31259 00001EDA 2F4E00                  swit_n: db	'/N',0
 31260                                  
 31261                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31262                                  swit_f_ctrl: ; *
 31263 00001EDD 00000000[8F1D]-         	dw	0,0,result_val,noval
 31263 00001EE3 [8E1D]             
 31264 00001EE5 01                      	db	1
 31265 00001EE6 2F4600                  swit_f: db 	'/F',0
 31266                                  
 31267                                  	; 27/10/2022
 31268                                  
 31269                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 31270                                  swit_t_ctrl:
 31271 00001EE9 00000000[8F1D]-         	dw	0,0,result_val,noval
 31271 00001EEF [8E1D]             
 31272 00001EF1 01                      	db	1
 31273 00001EF2 2F5400                  swit_t:	db	'/T',0			   ;				M059
 31274                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 31275                                  swit_w_ctrl:
 31276 00001EF5 00000000[8F1D]-         	dw	0,0,result_val,noval
 31276 00001EFB [8E1D]             
 31277 00001EFD 01                      	db	1
 31278 00001EFE 2F5700                  swit_w:	db	'/W',0			   ;				M063
 31279                                  
 31280                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31281                                  ;;;
 31282                                  ;swit_i_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31283                                  swit_i_ctrl:
 31284 00001F01 0000                    	dw	0
 31285 00001F03 0000                    	dw	0
 31286 00001F05 [8F1D]                  	dw	result_val
 31287 00001F07 [8E1D]                  	dw	noval
 31288 00001F09 01                      	db	1
 31289 00001F0A 2F4900                  swit_i:	db	'/I',0
 31290                                  ;;;
 31291                                  
 31292                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 31293                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 31294                                  ;   in the above table to prevent the parsing code from complaining about them
 31295                                  
 31296 00001F0D 00                      p_swit_k:	db     0	; local variable
 31297 00001F0E 00                      p_swit_t:	db     0	; local variable			M059
 31298 00001F0F 00                      p_swit_w:	db     0	; local variable			M063
 31299                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31300 00001F10 00                      p_swit_i:	db     0
 31301                                  
 31302                                  ;-----------------------------------------------------------------------
 31303                                  
 31304                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31305                                  	; (SYSINIT:20E8h)
 31306                                  
 31307                                  ; DOS = [ high | low ]
 31308                                  
 31309                                  ;dos_parms p_parms  <dos_parmsx>
 31310                                  dos_parms:
 31311 00001F11 [161F]                  	dw	dos_parmsx
 31312 00001F13 01                      	db	1
 31313 00001F14 01                      	db	1
 31314 00001F15 3B                      	db	';'
 31315                                  dos_parmsx:
 31316 00001F16 01                      	db	1		; min parameters
 31317 00001F17 02                      	db	2		; max parameters
 31318 00001F18 [1E1F]                  	dw	dos_pos		; 
 31319 00001F1A [1E1F]                  	dw	dos_pos		; 
 31320 00001F1C 00                      	db	0		; no switches
 31321 00001F1D 00                      	db	0		; no keywords
 31322                                  
 31323                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31324                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31325                                  dos_pos:
 31326 00001F1E 00200000[8F1D]-         	dw	2000h,0,result_val,dos_strings
 31326 00001F24 [301F]             
 31327 00001F26 00                      	db	0
 31328 00001F27 00200000[8F1D]-         	dw	2000h,0,result_val,dos_strings
 31328 00001F2D [301F]             
 31329 00001F2F 00                      	db	0	
 31330                                  
 31331                                  dos_strings:	;label	byte
 31332 00001F30 03                      	db	3		; signals that there is a string choice
 31333 00001F31 00                      	db	0		; no range definition
 31334 00001F32 00                      	db	0		; no numeric values choice
 31335 00001F33 04                      	db	4		; 4 strings for choice
 31336 00001F34 01                      	db	1		; the 1st string tag
 31337 00001F35 [401F]                  	dw	hi_string
 31338 00001F37 02                      	db	2		; the 2nd string tag
 31339 00001F38 [451F]                  	dw	lo_string
 31340 00001F3A 03                      	db	3
 31341 00001F3B [491F]                  	dw	umb_string
 31342 00001F3D 04                      	db	4
 31343 00001F3E [4D1F]                  	dw	noumb_string
 31344                                  
 31345                                  ; 18/03/2025 - MiniDOS 1.0
 31346                                  %if 0
 31347                                  
 31348                                  ; 14/04/2024 - Retro DOS v5.0
 31349                                  ; (PCDOS 7.1 IBMDOS.COM - SYSINIT:273Eh)
 31350                                  ;;;
 31351                                  dosdata_parms:
 31352                                  	dw	dosdata_parmsx	; DOSDATA = UMB|NOUMB
 31353                                  	db	1
 31354                                  	db	1
 31355                                  	db	';'
 31356                                  dosdata_parmsx:
 31357                                  	db	1
 31358                                  	db	1		; min,max = 1 positional
 31359                                  	dw	dosdata_pos
 31360                                  	db	0		; no switches
 31361                                  	db	0		; no keywords
 31362                                  
 31363                                  	; dosdata_pos p_pos <2000h,0,result_val,dosdata_strings>
 31364                                  dosdata_pos:
 31365                                  	dw	2000h		; simple string
 31366                                  	dw	0
 31367                                  	dw	result_val
 31368                                  	dw	dosdata_strings
 31369                                  	db	0
 31370                                  dosdata_strings:
 31371                                  	db	3		; signals that there is a string choice
 31372                                  	db	0		; no range definition
 31373                                  	db	0		; no numeric values choice
 31374                                  	db	2		; 2 strings for choice
 31375                                  	db	1		; the 1st string tag
 31376                                  	dw	umb_string	; "UMB"
 31377                                  	db	2		; the 2nd string tag
 31378                                  	dw	noumb_string	; "NOUMB"
 31379                                  ;;;
 31380                                  %endif
 31381                                  
 31382 00001F40 4849474800              hi_string:	db	"HIGH",0
 31383 00001F45 4C4F5700                lo_string:	db	"LOW",0
 31384 00001F49 554D4200                umb_string:	db	"UMB",0
 31385 00001F4D 4E4F554D4200            noumb_string:	db	"NOUMB",0
 31386                                  
 31387                                  p_dos_hi:
 31388 00001F53 00                      	db	0	; local variable
 31389                                  			; BUGBUG : I dont know whether PARSER uses
 31390                                  			;          this variable or not
 31391                                  	; 14/04/2024 (PCDOS 7.1 IBMBIO.COM)
 31392 00001F54 00                      	db	0
 31393                                  
 31394                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31395                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31396                                  ;%if 0
 31397                                  
 31398                                  ;****************************************************************** RICHID ****
 31399                                  
 31400                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 31401                                  
 31402                                  ; 30/03/2019 - Retro DOS v4.0
 31403                                  ;------------------------------------------------------------------------------
 31404                                  
 31405                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 31406                                  ;
 31407                                  ;   Date:     May 14, 1992
 31408                                  ;
 31409                                  ;******************************************************************************
 31410                                  ;
 31411                                  ;   Modification log:
 31412                                  ;
 31413                                  ;     DATE    WHO      DESCRIPTION
 31414                                  ;   --------  -------  --------------------------------------------------------
 31415                                  ;   05/14/92  t-richj  Original
 31416                                  ;   06/21/92  t-richj  Final revisions before check-in
 31417                                  ;
 31418                                  ;******************************************************************************
 31419                                  ;
 31420                                  ; There are two primary definitions which need to be made, selectively, before
 31421                                  ; this include file should be used.  These are:
 31422                                  ;    HV_Extern - If this has been defined, variables for this module will be
 31423                                  ;                declared as external.  Otherwise, variables will be declared
 31424                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 31425                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 31426                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 31427                                  ;                (as only one module, sysconf.asm, includes this file).
 31428                                  ;    HV_LoadHigh - This should be defined when this module is going into
 31429                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 31430                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 31431                                  ;
 31432                                  ;******************************************************************************
 31433                                  
 31434                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 31435                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 31436                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 31437                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 31438                                  ; space problem (it's just such a nice round number, eh?).
 31439                                  
 31440                                  MAXUMB	equ	16
 31441                                  
 31442                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 31443                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 31444                                  
 31445                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 31446                                  SystemPSPOwner	equ	8
 31447                                  ;JapanPSPOwner	equ	9
 31448                                  
 31449                                  ; for LoadHigh and DeviceHigh:
 31450                                  ;
 31451                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 31452                                  ;	          UnHideUMBs().
 31453                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 31454                                  ;	           line.
 31455                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 31456                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 31457                                  ;	          given a command-line like "/L:3,500;4"
 31458                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 31459                                  ;	          matching its index number was specified on the command-line;
 31460                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 31461                                  ;	          will be set to 1.  All others will be set to 0.
 31462                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 31463                                  ;	          specified by the user for a UMB (in the above example, all
 31464                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 31465                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 31466                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 31467                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 31468                                  ;	           for details).
 31469                                  
 31470 00001F55 00                      fInHigh:  db	0
 31471 00001F56 00                      fUmbTiny: db	0
 31472 00001F57 0000                    SegLoad:  dw	0
 31473 00001F59 00                      UmbLoad:  db	0
 31474 00001F5A 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 31475 00001F6A 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 31476 00001F8A 00                      fm_umb:   db	0
 31477 00001F8B 00                      fm_strat: db	0
 31478 00001F8C 00                      fm_argc:  db	0	
 31479                                  
 31480                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 31481                                  ; UmbLoad is set to the UMB number given.
 31482                                  
 31483                                  UNSPECIFIED	equ	-1
 31484                                  
 31485                                  ;%endif ; 27/10/2022
 31486                                  
 31487                                  ;****************************************************************** RICHID ****
 31488                                  
 31489                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 31490                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 31491                                  
 31492                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31493                                  ; (SYSINIT:212Bh)	
 31494                                  
 31495                                  		;public	DevEntry
 31496                                  
 31497 00001F8D 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 31498 00001F8F 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 31499 00001F91 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 31500 00001F93 00000000                DevEntry:	dd	0	; Entry point to the device driver
 31501 00001F97 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 31502                                  ; 30/12/2022
 31503                                  ; 27/10/2022 
 31504 00001F9B 00                      ConvLoad:	db	0	; Use conventional (dos5-style) InitDevLoad?
 31505                                  ;
 31506 00001F9C 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 31507 00001F9D 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 31508 00001F9F 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 31509 00001FA1 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 31510                                  ;
 31511 00001FA3 00000000                DevXMSAddr:	dd	0
 31512                                  ;
 31513 00001FA7 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 31514 00001FA9 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 31515                                  ;
 31516 00001FAB 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 31517                                  				;  is being loaded into UMB
 31518 00001FAC 0000                    DevSizeOption:	dw	0	; SIZE= option
 31519                                  ;
 31520 00001FAE 00                      Int12Lied:	db	0	; did we trap int 12 ?
 31521 00001FAF 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 31522 00001FB1 50524F544D414E24        ThreeComName:	db	'PROTMAN$' ; 3Com Device name
 31523                                  ;
 31524 00001FB9 00                      FirstUMBLinked:	db	0
 31525 00001FBA 0000                    DevDOSData:	dw	0	; segment of DOS Data
 31526 00001FBC 00000000                DevCmdLine:	dd	0	; Current Command line
 31527 00001FC0 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 31528                                  				; to use the file name in the command line
 31529                                  ; 13/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31530                                  ;	ifdef	dblspace_hooks
 31531 00001FC1 00                      MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 31532                                  ;	endif
 31533                                  
 31534                                  ; ===========================================================================
 31535                                  
 31536                                  ; 31/03/2019 - Retro DOS v4.0
 31537                                  
 31538                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31539                                  ; (SYSINIT:215Eh)
 31540                                  
 31541                                  ;----------------------------------------------------------------------------
 31542                                  ;
 31543                                  ; procedure : doconf
 31544                                  ;
 31545                                  ;             Config file is parsed initially with this routine. For the
 31546                                  ;             Subsequent passes 'multi_pass' entry is used .
 31547                                  ;
 31548                                  ;----------------------------------------------------------------------------
 31549                                  
 31550                                  	; 27/10/2022
 31551                                  doconf:
 31552 00001FC2 0E                      	push	cs
 31553 00001FC3 1F                      	pop	ds
 31554                                  
 31555 00001FC4 B80037                  	mov	ax,3700h
 31556                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 31557 00001FC7 CD21                    	int	21h
 31558 00001FC9 8816[5B45]              	mov	[command_line+1],dl	; set in default command line
 31559                                  
 31560                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 31561                                  ; 27/10/2022
 31562                                  ;;ifdef	MULTI_CONFIG
 31563                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 31564 00001FCD 8816[5945]              	mov	[def_swchr],dl ; 31/03/2019 
 31565                                  ;;endif	;MULTI_CONFIG
 31566                                  
 31567 00001FD1 BA[7044]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 31568 00001FD4 B8003D                  	mov	ax,3D00h
 31569                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 31570 00001FD7 F9                      	stc				;in case of int 24
 31571 00001FD8 CD21                    	int	21h			;function request
 31572 00001FDA 7309                    	jnc	short noprob		; brif opened okay
 31573                                  
 31574                                  ; 31/12/2022
 31575                                  ; 27/10/2022
 31576                                  ;;ifdef	MULTI_CONFIG
 31577 00001FDC E81518                  	call	kbd_read		; we still want to give the guy
 31578                                  ;					; a chance to select clean boot!
 31579                                  ;;endif					; (ie, no autoexec.bat processing)
 31580 00001FDF C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 31581 00001FE4 C3                      	retn
 31582                                  noprob: 				;get file size (note < 64k!!)
 31583 00001FE5 89C3                    	mov	bx,ax  ; File handle
 31584 00001FE7 31C9                    	xor	cx,cx			; 0
 31585 00001FE9 31D2                    	xor	dx,dx			; 0
 31586                                  	;mov	ax,4202h
 31587 00001FEB B80242                  	mov	ax,(LSEEK<<8)|2
 31588 00001FEE CD21                    	int	21h
 31589 00001FF0 A3[5403]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 31590                                  					; 08/09/2023 - Erdogan Tan - Note:
 31591 00001FF3 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 31592                                  					; I am not removing 'xor dx,dx' here
 31593                                  					; for MSDOS compatibility.
 31594                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 31595                                  					; (Error will be same if CONGIG.SYS file
 31596                                  					;  size > 64KB) 
 31597                                  	;mov	ax,4200h
 31598 00001FF5 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 31599 00001FF8 CD21                    	int	21h
 31600                                  
 31601                                  	; 31/12/2022 - Retro DOS v4.2 
 31602 00001FFA 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 31603                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31604                                  	;mov	dx,[top_of_cdss] 
 31605                                  
 31606 00001FFE A1[5403]                	mov	ax,[count]
 31607 00002001 A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 31608 00002004 E865F1                  	call	ParaRound
 31609 00002007 29C2                    	sub	dx,ax
 31610                                  
 31611                                  ; 31/12/2022
 31612                                  ; 27/10/2022
 31613                                  ;ifdef	MULTI_CONFIG
 31614                                  ;
 31615                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 31616                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 31617                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 31618                                  ;  we (may) add a variable to the environment that does not explicity appear
 31619                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 31620                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 31621                                  ;  of extra space, so here we account for it (the worst case of course is
 31622                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 31623                                  ;
 31624 00002009 4A                      	dec	dx                      ;reserve 1 additional paragraph
 31625 0000200A 8916[DA14]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 31626 0000200E 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 31627                                  ;;endif	;MULTI_CONFIG
 31628                                  
 31629 00002010 83EA11                  	sub	dx,11h			;room for header
 31630                                  	
 31631                                  	; 31/12/2022
 31632 00002013 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 31633 00002017 8916[A102]              	mov	[CONFBOT],dx
 31634                                  	
 31635                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31636                                  	;mov	[top_of_cdss],dx
 31637                                  	;call    TempCDS 
 31638                                  	; 31/12/2022
 31639                                  	; 11/12/2022
 31640                                  	; ds <> cs 
 31641                                  	;mov	dx,[cs:top_of_cdss]
 31642                                  
 31643                                  	; 08/09/2023
 31644                                  	; ds = cs
 31645 0000201B 8B0E[5403]              	mov	cx,[count]
 31646                                  	
 31647 0000201F 8EDA                    	mov	ds,dx
 31648 00002021 8EC2                    	mov	es,dx
 31649                                  
 31650 00002023 31D2                    	xor	dx,dx
 31651                                  	; 08/09/2023
 31652                                  	;mov	cx,[cs:count]
 31653 00002025 B43F                    	mov	ah,3Fh
 31654                                  	;mov	ah,READ  ; 3Fh
 31655 00002027 F9                      	stc				;in case of int 24
 31656 00002028 CD21                    	int	21h			;function request
 31657 0000202A 9C                      	pushf
 31658                                  
 31659                                  ; find the eof mark in the file. if present,then trim length.
 31660                                  
 31661 0000202B 50                      	push	ax
 31662 0000202C 57                      	push	di
 31663 0000202D 51                      	push	cx
 31664 0000202E B01A                    	mov	al,1Ah			; eof mark
 31665 00002030 89D7                    	mov	di,dx			; point to buffer
 31666 00002032 E305                    	jcxz	puteol			; no chars
 31667 00002034 F2AE                    	repnz	scasb			; find end
 31668 00002036 7501                    	jnz	short puteol		; none found and count exhausted
 31669                                  
 31670                                  ; we found a 1a. back up
 31671                                  
 31672 00002038 4F                      	dec	di			; backup past 1Ah
 31673                                  
 31674                                  ;  just for the halibut, stick in an extra eol
 31675                                  
 31676                                  puteol:
 31677 00002039 B00D                    	mov	al,cr ; 0Dh
 31678 0000203B AA                      	stosb
 31679 0000203C B00A                    	mov	al,lf  ;0Ah
 31680 0000203E AA                      	stosb
 31681 0000203F 29D7                    	sub	di,dx			; difference moved
 31682                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31683                                  	;mov	[cs:count],di		; new count
 31684                                  
 31685                                  	; 11/12/2022	
 31686                                  	; 31/03/2019 - Retro DOS v4.0
 31687 00002041 0E                      	push	cs
 31688 00002042 1F                      	pop	ds
 31689                                  
 31690 00002043 893E[5403]              	mov	[count],di		; new count
 31691                                  
 31692 00002047 59                      	pop	cx
 31693 00002048 5F                      	pop	di
 31694 00002049 58                      	pop	ax
 31695                                  
 31696                                  	; 11/12/2022
 31697                                  	; 27/10/2022
 31698                                  	;push	cs
 31699                                  	;pop	ds
 31700                                  
 31701 0000204A 50                      	push	ax
 31702                                  	;mov	ah,CLOSE
 31703 0000204B B43E                    	mov	ah,3Eh
 31704 0000204D CD21                    	int	21h
 31705 0000204F 58                      	pop	ax
 31706 00002050 9D                      	popf
 31707 00002051 7204                    	jc	short conferr 		;if not we've got a problem
 31708 00002053 39C1                    	cmp	cx,ax
 31709 00002055 742C                    	jz	short getcom		;couldn't read the file
 31710                                  conferr:
 31711 00002057 BA[7044]                	mov	dx,config		;want to print config error
 31712 0000205A E86A23                  	call	badfil
 31713                                  	; 14/04/2024
 31714                                  endconv:	; 01/01/2023
 31715 0000205D C3                      	retn
 31716                                  
 31717                                  ;----------------------------------------------------------------------------
 31718                                  ;
 31719                                  ; entry : multi_pass
 31720                                  ;
 31721                                  ;             called to execute device=,install= commands
 31722                                  ;
 31723                                  ;----------------------------------------------------------------------------
 31724                                  
 31725                                  	; 27/10/2022
 31726                                  multi_pass:
 31727 0000205E 0E                      	push	cs
 31728 0000205F 1F                      	pop	ds
 31729                                  
 31730 00002060 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 31731                                  ;jae_endconv:
 31732 00002065 73F6                    	jae	short endconv 		; do nothing. just return.
 31733                                  
 31734                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31735 00002067 FF36[A102]              	push	word [CONFBOT]
 31736                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31737                                  	;push	word [top_of_cdss]
 31738 0000206B 07                      	pop	es			; es -> confbot
 31739                                  
 31740 0000206C 8B36[5603]              	mov	si,[org_count]
 31741 00002070 8936[5403]              	mov	[count],si		; set count
 31742 00002074 31F6                    	xor	si,si ; 0
 31743 00002076 8936[5803]                      mov     [chrptr],si		; reset chrptr
 31744 0000207A 8936[AD02]                      mov     [linecount],si		; reset linecount
 31745                                  
 31746 0000207E E8CD20                  	call	getchr
 31747 00002081 EB06                    	jmp	short conflp
 31748                                  
 31749                                  	; 14/04/2024
 31750                                  	; 01/01/2023
 31751                                  ;endconv:
 31752                                  	;retn	
 31753                                  
 31754                                  getcom:
 31755                                  	; 03/01/2023
 31756                                  	; ds = cs
 31757 00002083 E84A15                          call    organize                ; organize the file
 31758 00002086 E8C520                  	call	getchr
 31759                                  conflp: 
 31760 00002089 72D2                    	jc	short endconv
 31761                                  
 31762 0000208B FF06[AD02]                      inc     word [linecount]	; increase linecount
 31763                                  
 31764                                  	; 08/09/2023
 31765 0000208F 30E4                    	xor	ah,ah ; 0
 31766                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 31767                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 31768 00002091 8826[DE14]              	mov	[multdeviceflag],ah ; 0
 31769 00002095 8826[E114]              	mov	[setdevmarkflag],ah ; 0
 31770                                  
 31771 00002099 3C0A                    	cmp	al,lf			; linefeed?
 31772 0000209B 7448                    	je	short blank_line	;  then ignore this line.
 31773                                  
 31774                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31775                                  ; (SYSINIT:23CCh)
 31776                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31777                                  ;%if 0
 31778                                  
 31779                                  ;ifdef	MULTI_CONFIG
 31780                                  
 31781                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 31782                                  ;   number immediately following it....
 31783                                  
 31784 0000209D A2[DC14]                        mov     [config_cmd],al         ; save original command code
 31785                                  	;and	al,NOT CONFIG_OPTION_QUERY
 31786 000020A0 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 31787                                  
 31788                                  	; 08/09/2023
 31789 000020A2 3826[DD14]              	cmp	[config_multi],ah ; 0
 31790                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 31791 000020A6 7427                            je      short not_final		; no, line number is not embedded
 31792                                  
 31793 000020A8 50                              push    ax                      ;
 31794 000020A9 E8A220                          call    getchr                  ; ignore end-of-image errors,
 31795 000020AC 88C4                            mov     ah,al                   ; because if there's an error
 31796 000020AE E89D20                          call    getchr                  ; fetching the line number that's
 31797 000020B1 86E0                            xchg    al,ah                   ; supposed to be there, the next
 31798 000020B3 A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 31799 000020B6 58                              pop     ax
 31800                                  ;
 31801                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 31802                                  ;   which to obtain its original program name, it grovels through all of
 31803                                  ;   memory to find the filename that was used to exec it; it wants to find
 31804                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 31805                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 31806                                  ;   immediately before the filename, but since we are now storing line # info
 31807                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 31808                                  ;   spot.
 31809                                  ;
 31810                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 31811                                  ;   over the line number info, since we no longer need that info anyway. This
 31812                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 31813                                  ;   retrieved.
 31814                                  ;
 31815 000020B7 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 31816 000020BC 7211                            jb	short not_final		; no
 31817                                          ;test	word [install_flag],have_install_cmd
 31818 000020BE F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 31819 000020C3 7407                            jz	short final		; no install cmds, so yes it is
 31820 000020C5 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 31821 000020CA 7203                            jb	short not_final		; no
 31822                                  final:                                  ;
 31823 000020CC 268804                  	mov	[es:si],al		; save backward-compatible command code
 31824                                  not_final:                              ;
 31825                                  ;endif
 31826                                  
 31827                                  ; 31/12/2022
 31828                                  ;%endif ; 27/10/2022
 31829                                  
 31830 000020CF 88C4                    	mov	ah,al
 31831 000020D1 E87A20                  	call	getchr
 31832 000020D4 7314                    	jnc	short tryi
 31833                                  
 31834 000020D6 803E[CB02]02            	cmp	byte [multi_pass_id],2
 31835                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 31836                                  	; 27/10/2022
 31837 000020DB 7380                    	jnb	short endconv	
 31838 000020DD E9A707                  	jmp	badop
 31839                                  	
 31840                                  coff:	
 31841                                  	; 11/12/2022
 31842                                  	; ds = cs
 31843                                  	;push	cs
 31844                                  	;pop	ds
 31845 000020E0 E86220                  	call	newline
 31846 000020E3 EBA4                    	jmp	short conflp	; 13/05/2019
 31847                                  
 31848                                  blank_line:
 31849 000020E5 E86620                  	call	getchr
 31850 000020E8 EB9F                    	jmp	short conflp
 31851                                  
 31852                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31853                                  ; 11/12/2022
 31854                                  ; (there is not a jump or call to here from anywhere!)
 31855                                  ;coff_p:
 31856                                  	;push	cs
 31857                                  	;pop	ds
 31858                                  
 31859                                  ;to handle install= commands,we are going to use multi-pass.
 31860                                  ;the first pass handles the other commands and only set install_flag when
 31861                                  ;it finds any install command. the second pass will only handle the
 31862                                  ;install= command.
 31863                                  
 31864                                  ;------------------------------------------------------------------------------
 31865                                  ;install command
 31866                                  ;------------------------------------------------------------------------------
 31867                                  
 31868                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31869                                  	; (SYSINIT:2250h)
 31870                                  tryi:
 31871 000020EA 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 31872 000020EF 7503                    	jne	short not_init_pass
 31873 000020F1 E98101                  	jmp	multi_try_doshi
 31874                                  not_init_pass:
 31875 000020F4 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 31876                                          ; 11/12/2022
 31877                                  	;je	short multi_pass_coff2	; now it is NOPs
 31878 000020F9 74E5                    	je	short coff
 31879                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31880                                  	;je	short multi_pass_coff	
 31881                                  					; This pass can be made use of if
 31882                                  					; we want do some config.sys process
 31883                                  					; after device drivers are loaded
 31884                                  					; and before install= commands
 31885                                  					; are processed
 31886                                  
 31887 000020FB 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 31888 00002100 741D                    	je	short multi_try_i
 31889 00002102 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 31890                                  	; 11/12/2022
 31891                                  	;je	short multi_pass_coff2
 31892 00002105 74D9                    	je	short coff
 31893                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31894                                  	;je	short multi_pass_coff	
 31895                                  
 31896                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 31897                                  ;       but don't process them now.        
 31898                                          
 31899 00002107 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 31900                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31901 0000210A 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 31902                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31903                                  	;jne	short tryb	
 31904                                  	
 31905                                  	;or	word [install_flag],have_install_cmd ; set the flag
 31906 0000210C 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 31907                                  multi_pass_coff2:
 31908 00002111 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 31909                                  
 31910                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31911                                  ; (SYSINIT:2448h)
 31912                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31913                                  ;%if 0
 31914                                  precheck_installhigh:
 31915 00002113 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 31916 00002116 756B                    	jne     short tryb		; carry on with normal processing
 31917                                  	;or	word [install_flag],have_install_cmd
 31918 00002118 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 31919 0000211D EBC1                    	jmp	short coff
 31920                                  ;%endif ; 27/10/2022
 31921                                  
 31922                                  multi_try_i:
 31923 0000211F 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 31924                                  	; 31/12/2022 - Retro DOS v4.2
 31925 00002122 750A                    	jne	short multi_try_n	; no, check for installhigh
 31926                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31927                                  	;jne	short multi_pass_filter
 31928                                  
 31929                                  ; 31/12/2022
 31930                                  ;%if 1 
 31931                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31932                                  ;%if 0
 31933                                  ;ifdef	MULTI_CONFIG
 31934 00002124 E8941E                  	call	query_user              ; query the user if config_cmd
 31935 00002127 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31936                                  ;endif
 31937                                  ;%endif ; 27/10/2022
 31938                                  
 31939 00002129 E8C4EF                  	call	do_install_exec 	;install it.
 31940 0000212C EBB2                    	jmp	short coff		;to handle next install= command.
 31941                                  
 31942                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31943                                  ; (SYSINIT:2463h)
 31944                                  ;%if 1
 31945                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31946                                  ;%if 0
 31947                                  
 31948                                  multi_try_n:
 31949 0000212E 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 31950 00002131 7537                            jne	short multi_pass_filter	; no. ignore this.
 31951                                  ;ifdef	MULTI_CONFIG
 31952 00002133 E8851E                          call    query_user              ; query the user if config_cmd
 31953 00002136 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31954                                  ;endif
 31955                                  
 31956                                  ;       The memory environment is in its normal DOS state, so do
 31957                                  ;       the standard calls to set the alloc strategy for loading high
 31958                                  
 31959 00002138 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 31960 0000213B CD21                    	int	21h			;get alloc strategy
 31961 0000213D 89C3                    	mov	bx,ax
 31962 0000213F 53                              push    bx                      ; save for the return
 31963                                  
 31964 00002140 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 31965 00002144 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 31966 00002147 CD21                    	int	21h			;set alloc strategy
 31967                                  
 31968 00002149 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 31969 0000214C CD21                            int     21h                     ; get link state
 31970 0000214E 30E4                            xor     ah,ah                   ; clear top byte
 31971 00002150 50                              push    ax                      ; save for return
 31972                                  
 31973 00002151 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 31974 00002154 BB0100                  	mov	bx,1
 31975 00002157 CD21                    	int	21h			;link in UMBs
 31976                                  
 31977 00002159 E894EF                  	call	do_install_exec 	;install it.
 31978                                  
 31979 0000215C B80358                          mov     ax,(ALLOCOPER<<8)|3
 31980 0000215F 5B                              pop     bx                      ; recover original link state
 31981 00002160 CD21                            int     21h
 31982 00002162 5B                              pop     bx                      ; recover original alloc strategy
 31983 00002163 B80158                          mov     ax,(ALLOCOPER<<8)|1
 31984 00002166 CD21                            int     21h
 31985                                  
 31986                                  	;jmp	short coff		;to handle next install= command.
 31987                                  	; 01/01/2023
 31988 00002168 EBA7                    	jmp	short multi_pass_coff2
 31989                                  
 31990                                  ;%endif ; 27/10/2022
 31991                                  
 31992                                  multi_pass_filter:
 31993 0000216A 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 31994 0000216D 740A                    	je	short multi_pass_adjust
 31995 0000216F 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 31996 00002172 7405                    	je	short multi_pass_adjust
 31997 00002174 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 31998 00002177 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 31999                                  
 32000                                  multi_pass_adjust:			; these commands need to
 32001 00002179 FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 32002 0000217D FF06[5403]              	inc	word [count]		;  for newline proc.
 32003                                  
 32004                                  multi_pass_coff:
 32005                                  	; 11/12/2022
 32006                                  	;jmp	short coff		; to handle next install= commands.
 32007                                  	; 01/01/2023
 32008 00002181 EB8E                    	jmp	short multi_pass_coff2
 32009                                  
 32010                                  ;------------------------------------------------------------------------------
 32011                                  ; buffer command
 32012                                  ;------------------------------------------------------------------------------
 32013                                  
 32014                                  ;******************************************************************************
 32015                                  ;									      *
 32016                                  ; function: parse the parameters of buffers= command.			      *
 32017                                  ;									      *
 32018                                  ; input :								      *
 32019                                  ;	es:si -> parameters in command line.				      *
 32020                                  ; output:								      *
 32021                                  ;	buffers set							      *
 32022                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 32023                                  ;	h_buffers set if secondary buffer cache specified.		      *
 32024                                  ;									      *
 32025                                  ; subroutines to be called:						      *
 32026                                  ;	sysinit_parse							      *
 32027                                  ; logic:								      *
 32028                                  ; {									      *
 32029                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 32030                                  ;	set dx,cx to 0; 						      *
 32031                                  ;	reset buffer_slash_x;						      *
 32032                                  ;	while (end of command line)					      *
 32033                                  ;	{ sysinit_parse;						      *
 32034                                  ;	  if (no error) then						      *
 32035                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 32036                                  ;		    buffer_slash_x = 1					      *
 32037                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 32038                                  ;			  buffers = result_val._$P_picked_val;		      *
 32039                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 32040                                  ;	  else	{show error message;error exit} 			      *
 32041                                  ;	};								      *
 32042                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 32043                                  ; };									      *
 32044                                  ;									      *
 32045                                  ;******************************************************************************
 32046                                  
 32047                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32048                                  	; (SYSINIT:229Ch)
 32049                                  tryb:
 32050 00002183 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 32051 00002186 755F                    	jne	short tryc
 32052                                  
 32053                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32054                                  ; (SYSINIT:24BFh)
 32055                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32056                                  ;%if 0
 32057                                  ;ifdef	MULTI_CONFIG
 32058 00002188 E8301E                  	call	query_user		; query the user if config_cmd
 32059 0000218B 725A                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 32060                                  ;endif
 32061                                  ;%endif ; 27/10/2022
 32062                                  
 32063                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32064                                  	; 18/12/2022
 32065 0000218D 31C9                    	xor	cx,cx
 32066                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 32067 0000218F 880E[8D1D]              	mov	[p_buffer_slash_x],cl ; 0
 32068                                  
 32069 00002193 BF[461D]                	mov	di,buf_parms
 32070                                  	;xor	cx,cx	; 18/12/2022
 32071                                  	; 03/01/2023
 32072                                  	;mov	dx,cx
 32073                                  do7:
 32074 00002196 E8CF06                  	call	sysinit_parse
 32075 00002199 7306                    	jnc	short if7		; parse error,
 32076                                  	;call	badparm_p		;  and show messages and end the search loop.
 32077                                  	;;jmp	short sr7
 32078                                  	; 31/12/2022
 32079                                  ;sr7:
 32080                                  	;jmp	coff
 32081                                  
 32082                                  	; 24/03/2025 - MiniDOS 1.0
 32083                                  	; 03/01/2023
 32084                                  	;jmp	badparm_p_coff
 32085                                  
 32086                                  ; 24/03/2025 - MiniDOS 1.0
 32087                                  %if 1
 32088                                  badparm_p_coff:
 32089 0000219B E8F506                  	call	badparm_p
 32090 0000219E E93FFF                  	jmp	coff
 32091                                  %endif
 32092                                  
 32093                                  if7:
 32094 000021A1 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 32095 000021A4 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 32096                                  	;cmp	word [result_val_swoff],switch_x
 32097 000021A6 813E[911D][861D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 32098                                  	;jne	short if11
 32099                                  	; 31/12/2022
 32100 000021AC 74E8                    	je	short do7 ;je short en11
 32101                                  
 32102                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 32103                                  	;jmp	short en11 ; 31/12/2022
 32104                                  if11:
 32105                                  	;mov	ax,[rv_dword]
 32106 000021AE A1[931D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 32107 000021B1 83F901                  	cmp	cx,1
 32108 000021B4 7505                    	jne	short if13
 32109                                  
 32110 000021B6 A3[891D]                	mov	[p_buffers],ax
 32111                                  	;jmp	short en11
 32112                                  	; 31/12/2022
 32113 000021B9 EBDB                    	jmp	short do7
 32114                                  if13:
 32115 000021BB A3[8B1D]                	mov	[p_h_buffers],ax
 32116                                  en11:
 32117 000021BE EBD6                    	jmp	short do7
 32118                                  en7:
 32119 000021C0 833E[891D]63            	cmp	word [p_buffers],99
 32120 000021C5 760B                    	jbe	short if18
 32121                                  
 32122                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 32123                                  ;	jne	short if18
 32124                                  
 32125 000021C7 E8C906                  	call	badparm_p
 32126 000021CA C706[8B1D]0000          	mov	word [p_h_buffers],0
 32127 000021D0 EB12                    	jmp	short sr7
 32128                                  if18:
 32129 000021D2 A1[891D]                	mov	ax,[p_buffers]	; we don't have any problem.
 32130 000021D5 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 32131                                  
 32132 000021D8 A1[8B1D]                	mov	ax,[p_h_buffers]
 32133 000021DB A3[9902]                	mov	[h_buffers],ax
 32134                                  
 32135                                  ;	mov	al,[p_buffer_slash_x]	; M016
 32136                                  ;	mov	[buffer_slash_x],al
 32137                                  
 32138 000021DE A1[AD02]                	mov	ax,[linecount]
 32139 000021E1 A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 32140                                  	; 31/12/2022
 32141                                  	;jmp	short sr7
 32142                                  	; 03/01/2023
 32143                                  sr7:
 32144 000021E4 E9F9FE                  	jmp	coff
 32145                                  
 32146                                  ;------------------------------------------------------------------------------
 32147                                  ; break command
 32148                                  ;------------------------------------------------------------------------------
 32149                                  
 32150                                  ;****************************************************************************
 32151                                  ;									    *
 32152                                  ; function: parse the parameters of break = command.			    *
 32153                                  ;									    *
 32154                                  ; input :								    *
 32155                                  ;	es:si -> parameters in command line.				    *
 32156                                  ; output:								    *
 32157                                  ;	turn the control-c check on or off.				    *
 32158                                  ;									    *
 32159                                  ; subroutines to be called:						    *
 32160                                  ;	sysinit_parse							    *
 32161                                  ; logic:								    *
 32162                                  ; {									    *
 32163                                  ;	set di to brk_parms;						    *
 32164                                  ;	set dx,cx to 0; 						    *
 32165                                  ;	while (end of command line)					    *
 32166                                  ;	{ sysinit_parse;						    *
 32167                                  ;	  if (no error) then						    *
 32168                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 32169                                  ;		   set p_ctrl_break,on;					    *
 32170                                  ;	       else					  /*off 	 */ *
 32171                                  ;		   set p_ctrl_break,off;				    *
 32172                                  ;	  else {show message;error_exit};				    *
 32173                                  ;	};								    *
 32174                                  ;	if (no error) then						    *
 32175                                  ;	   dos function call to set ctrl_break check according to	    *
 32176                                  ; };									    *
 32177                                  ;									    *
 32178                                  ;****************************************************************************
 32179                                  
 32180                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32181                                  	; (SYSINIT:22FFh)
 32182                                  tryc:
 32183 000021E7 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 32184 000021EA 7538                    	jne	short trym
 32185                                  
 32186                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32187                                  ; (SYSINIT:2527h)
 32188                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32189                                  ;%if 0
 32190                                  ;ifdef	MULTI_CONFIG
 32191 000021EC E8CC1D                  	call	query_user              ; query the user if config_cmd
 32192 000021EF 7233                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 32193                                  ;endif
 32194                                  ;%endif ; 27/10/2022
 32195                                  
 32196 000021F1 BF[971D]                	mov	di,brk_parms
 32197 000021F4 31C9                    	xor	cx,cx
 32198                                  	; 03/01/2023
 32199                                  	;mov	dx,cx
 32200                                  do22:
 32201 000021F6 E86F06                  	call	sysinit_parse
 32202 000021F9 7302                    	jnc	short if22		; parse error
 32203                                  	;call	badparm_p		;  show message and end the search loop.
 32204                                  	;;jmp	short sr22
 32205                                  	; 31/12/2022
 32206                                  ;sr22:
 32207                                  	;jmp	coff
 32208                                  	; 03/01/2023
 32209 000021FB EB9E                    	jmp	badparm_p_coff
 32210                                  if22:
 32211 000021FD 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32212 00002200 7415                    	je	short en22		; then end the $endloop
 32213                                  
 32214                                  	;cmp	byte [result_val_itag],1
 32215 00002202 803E[901D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32216 00002207 7507                    	jne	short if26
 32217                                  
 32218 00002209 C606[BC1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 32219                                  	;jmp	short en26
 32220                                  	; 31/12/2022
 32221 0000220E EBE6                    	jmp	short do22
 32222                                  if26:
 32223 00002210 C606[BC1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 32224                                  en26:
 32225 00002215 EBDF                    	jmp	short do22		; we actually set the ctrl break
 32226                                  en22:
 32227 00002217 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 32228 00002219 B001                    	mov	al,1
 32229 0000221B 8A16[BC1D]              	mov	dl,[p_ctrl_break]
 32230 0000221F CD21                    	int	21h
 32231                                  	; 31/12/2022
 32232                                  	;jmp	short sr22
 32233                                  	; 03/01/2023
 32234                                  sr22:
 32235 00002221 E9BCFE                  	jmp	coff
 32236                                  
 32237                                  ; 24/03/2025 - MiniDOS 1.0
 32238                                  %if 0
 32239                                  badparm_p_coff:
 32240                                  	call	badparm_p
 32241                                  	jmp	coff
 32242                                  %endif
 32243                                  
 32244                                  ;------------------------------------------------------------------------------
 32245                                  ; multitrack command
 32246                                  ;------------------------------------------------------------------------------
 32247                                  
 32248                                  ;******************************************************************************
 32249                                  ;									      *
 32250                                  ; function: parse the parameters of multitrack= command.		      *
 32251                                  ;									      *
 32252                                  ; input :								      *
 32253                                  ;	es:si -> parameters in command line.				      *
 32254                                  ; output:								      *
 32255                                  ;	turn multrk_flag on or off.					      *
 32256                                  ;									      *
 32257                                  ; subroutines to be called:						      *
 32258                                  ;	sysinit_parse							      *
 32259                                  ; logic:								      *
 32260                                  ; {									      *
 32261                                  ;	set di to brk_parms;						      *
 32262                                  ;	set dx,cx to 0; 						      *
 32263                                  ;	while (end of command line)					      *
 32264                                  ;	{ sysinit_parse;						      *
 32265                                  ;	  if (no error) then						      *
 32266                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 32267                                  ;		   set p_mtrk,on;					      *
 32268                                  ;	       else					  /*off 	 */   *
 32269                                  ;		   set p_mtrk,off;					      *
 32270                                  ;	  else {show message;error_exit};				      *
 32271                                  ;	};								      *
 32272                                  ;	if (no error) then						      *
 32273                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 32274                                  ;									      *
 32275                                  ; };									      *
 32276                                  ;									      *
 32277                                  ;******************************************************************************
 32278                                  
 32279                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32280                                  trym:
 32281 00002224 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 32282 00002227 7573                    	jne	short tryu
 32283                                  
 32284                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32285                                  ; (SYSINIT:2569h)
 32286                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32287                                  ;%if 0
 32288                                  ;ifdef	MULTI_CONFIG
 32289 00002229 E88F1D                  	call	query_user      ; query the user if config_cmd
 32290 0000222C 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 32291                                  ;endif
 32292                                  ;%endif	; 27/10/2022
 32293                                  
 32294 0000222E BF[9B1E]                	mov	di,mtrk_parms
 32295 00002231 31C9                    	xor	cx,cx
 32296                                  	; 03/01/2023
 32297                                  	;mov	dx,cx
 32298                                  do31:
 32299 00002233 E83206                  	call	sysinit_parse
 32300 00002236 7303                    	jnc	short if31	; parse error
 32301                                  	;call	badparm_p	;  show message and end the search loop.
 32302                                  	;;jmp	short sr31
 32303                                  	; 31/12/2022
 32304                                  ;sr31:
 32305                                  	;jmp	coff
 32306                                  	; 03/01/2023
 32307 00002238 E960FF                  	jmp	badparm_p_coff
 32308                                  if31:
 32309 0000223B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 32310 0000223E 7415                    	je	short en31	; then end the $endloop
 32311                                  
 32312                                  	;cmp	byte [result_val_itag],1
 32313 00002240 803E[901D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32314 00002245 7507                    	jne	short if35
 32315                                  
 32316 00002247 C606[AF1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 32317                                  	;jmp	short en35
 32318                                  	; 31/12/2022
 32319 0000224C EBE5                    	jmp	short do31
 32320                                  if35:
 32321 0000224E C606[AF1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 32322                                  en35:
 32323 00002253 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 32324                                  en31:
 32325 00002255 1E                      	push	ds
 32326                                  	;;mov	ax,Bios_Data ; 70h
 32327                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 32328                                  	; 21/10/2022
 32329 00002256 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 32330 00002259 8ED8                    	mov	ds,ax
 32331                                  
 32332 0000225B 2E803E[AF1E]00          	cmp	byte [cs:p_mtrk],0
 32333 00002261 7508                    	jne	short if39
 32334                                  
 32335 00002263 C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 32336 00002269 EB06                    	jmp	short en39
 32337                                  if39:
 32338 0000226B C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 32339                                  en39:
 32340 00002271 1F                      	pop	ds
 32341                                  	; 31/12/2022
 32342                                  	;jmp	short sr31
 32343                                  	; 03/01/2023
 32344                                  sr31:
 32345 00002272 E96BFE                  	jmp	coff
 32346                                  
 32347                                  ;----------------------------------------------------------------------------
 32348                                  ; DOS=HIGH/LOW command
 32349                                  ;----------------------------------------------------------------------------
 32350                                  
 32351                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32352                                  multi_try_doshi:
 32353 00002275 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 32354 00002278 7403                    	je	short it_is_h
 32355                                  skip_it:
 32356 0000227A E9EDFE                  	jmp	multi_pass_filter
 32357                                  it_is_h:				; M003 - removed initing DevUMB
 32358                                  					;	 & runhigh
 32359                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32360                                  ; (SYSINIT:25C1h)
 32361                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32362                                  ;%if 0
 32363                                  ;ifdef	MULTI_CONFIG
 32364 0000227D E83B1D                  	call	query_user              ; query the user if config_cmd
 32365 00002280 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 32366                                  ;endif
 32367                                  ;%endif ; 27/10/2022
 32368                                  
 32369 00002282 BF[111F]                	mov	di,dos_parms
 32370 00002285 31C9                    	xor	cx,cx
 32371                                  	; 03/01/2023
 32372                                  	;mov	dx,cx
 32373                                  h_do_parse:
 32374 00002287 E8DE05                  	call	sysinit_parse
 32375 0000228A 7303                    	jnc	short h_parse_ok	; parse error
 32376                                  h_badparm:
 32377                                  	; 03/01/2023
 32378                                  	;call	badparm_p		; show message and end the search loop.
 32379                                  	;;jmp	short h_end
 32380                                  	; 11/12/2022
 32381                                  ;h_end:
 32382                                  	;jmp	coff
 32383                                  	; 03/01/2023
 32384 0000228C E90CFF                  	jmp	badparm_p_coff	
 32385                                  h_parse_ok:
 32386 0000228F 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32387 00002292 7405                    	je	short h_end		; then end the $endloop
 32388 00002294 E85306                  	call	ProcDOS
 32389 00002297 EBEE                    	jmp	short h_do_parse
 32390                                  	; 11/12/2022
 32391                                  	; 03/01/2023
 32392                                  h_end:
 32393 00002299 E944FE                  	jmp	coff
 32394                                  
 32395                                  ;-----------------------------------------------------------------------------
 32396                                  ; devicehigh command
 32397                                  ;-----------------------------------------------------------------------------
 32398                                  
 32399                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32400                                  tryu:
 32401 0000229C 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 32402 0000229F 7554                    	jne	short tryd
 32403                                  
 32404                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32405                                  ; (SYSINIT:25E9h)
 32406                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32407                                  ;%if 0
 32408                                  ;ifdef	MULTI_CONFIG
 32409 000022A1 E8171D                  	call	query_user              ; query the user if config_cmd
 32410 000022A4 724F                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 32411                                  ;endif
 32412                                  ;%endif ; 28/10/2022
 32413                                  
 32414                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32415                                  ;%if 0
 32416                                  	; 01/01/2023
 32417                                  	; ds = cs
 32418                                  
 32419 000022A6 E8D606                  	call	InitVar
 32420 000022A9 E8AA0E                  	call	ParseSize		; process the size= option
 32421                                  	;jnc	short tryu_0
 32422                                  	; 31/12/2022
 32423 000022AC 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 32424                                  
 32425                                  ;%endif ; 28/10/2022
 32426                                  
 32427                                  ; 31/12/2022
 32428                                  %if 0
 32429                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32430                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 32431                                  	;mov	[cs:badparm_seg], es
 32432                                  	; 11/12/2022
 32433                                  	; ds = cs
 32434                                  	mov	[badparm_off], si
 32435                                  	mov	[badparm_seg], es
 32436                                  
 32437                                  	; 31/12/2022
 32438                                  	;call	ParseSize
 32439                                  	;jnc	short tryu_2	; 28/10/2022
 32440                                  	
 32441                                  	;call	badparm_p
 32442                                  	;jmp	coff
 32443                                  	; 03/01/2023
 32444                                  	jmp	badparm_p_coff
 32445                                  %endif
 32446                                  
 32447                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32448                                  ; (SYSINIT:2606h)
 32449                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32450                                  ;%if 0
 32451                                  tryu_0:
 32452                                  	;mov	ax,[cs:DevSizeOption]
 32453                                  	; 31/12/2022
 32454 000022AE A1[AC1F]                	mov	ax,[DevSizeOption] ; ds = cs
 32455 000022B1 09C0                    	or	ax,ax
 32456 000022B3 7510                    	jnz	short tryu_2
 32457                                  
 32458 000022B5 E85907                  	call	ParseVar
 32459 000022B8 730B                    	jnc	short tryu_2
 32460                                  tryu_1:
 32461                                  	; 31/12/2022
 32462                                  	; ds = cs
 32463 000022BA 8936[E314]              	mov	[badparm_off], si
 32464 000022BE 8C06[E514]              	mov	[badparm_seg], es
 32465                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 32466                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 32467                                  	
 32468                                  	;call	badparm_p		; so all we have to do is choke and
 32469                                  	;jmp	coff			; die, rather verbosely.
 32470                                  	; 03/01/2023
 32471 000022C2 E9D6FE                  	jmp	badparm_p_coff
 32472                                  
 32473                                  ;%endif ; 28/10/2022
 32474                                  
 32475                                  tryu_2:	
 32476 000022C5 56                      	push	si
 32477 000022C6 06                      	push	es
 32478                                  
 32479                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 32480                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 32481                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 32482                                  tryu_3:
 32483 000022C7 268A04                  	mov	al,[es:si]
 32484 000022CA 3C0D                    	cmp	al,cr
 32485                                  	; 14/04/2024
 32486                                  	;je	short tryu_4
 32487                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32488 000022CC 740C                    	je	short tryu_5
 32489 000022CE 3C0A                    	cmp	al,lf
 32490 000022D0 740A                    	je	short tryu_4
 32491 000022D2 E8541E                  	call	delim
 32492 000022D5 7405                    	jz	short tryu_4
 32493 000022D7 46                      	inc	si
 32494 000022D8 EBED                    	jmp	short tryu_3
 32495                                  
 32496                                  	; 14/04/2024
 32497                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32498                                  tryu_5:
 32499 000022DA B020                    	mov     al,20h ; ' '   ; blank instead of cr
 32500                                  
 32501                                  tryu_4:	
 32502                                  	; 11/12/2022
 32503                                  	; ds = cs
 32504 000022DC A2[C01F]                	mov	[DevSavedDelim],al
 32505                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 32506                                  					;  it with null
 32507                                  	; 18/12/2022
 32508 000022DF 29DB                    	sub	bx,bx
 32509 000022E1 26881C                  	mov	[es:si],bl ; 0
 32510                                   	;mov	byte [es:si],0
 32511                                  
 32512 000022E4 07                      	pop	es
 32513 000022E5 5E                      	pop	si	; 14/04/2024
 32514                                  
 32515                                  ;------------------------------------------------------------------------------
 32516                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32517                                  ;------------------------------------------------------------------------------
 32518                                  
 32519                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32520                                  ; (SYSINIT:2642h)
 32521                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32522                                  ;%if 0
 32523                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32524                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 32525                                  %if 1
 32526                                  	; 01/01/2023
 32527                                  	; ds = cs
 32528 000022E6 E8950B                  	call	UmbTest			; See if UMBs are around...
 32529                                  	; 01/01/2023
 32530                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 32531                                  	
 32532                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 32533                                  	; 31/12/2022
 32534                                  	; ds = cs, bx = 0
 32535                                  	;mov	byte [DeviceHi],bl ; 0
 32536                                  	;jmp	short LoadDevice
 32537                                  	; 01/01/2023
 32538 000022E9 7222                    	jc	short LoadDevice ; bl = 0
 32539                                  %endif
 32540                                  ;%endif
 32541                                  ;------------------------------------------------------------------------------
 32542                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32543                                  ;------------------------------------------------------------------------------
 32544                                  
 32545                                  NrmTst:
 32546                                  	; 11/12/2022
 32547                                  	; ds = cs
 32548                                  	;;mov	byte [cs:DeviceHi],0
 32549                                  	;mov	byte [DeviceHi],0
 32550                                  	; 18/12/2022
 32551                                  	; bx = 0
 32552 000022EB 381E[9C1F]              	cmp	[DevUMB],bl ; 0
 32553                                  	;cmp	byte [DevUMB],0
 32554                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 32555 000022EF 741C                    	je	short LoadDevice	; no, we don't
 32556                                  	;mov	byte [cs:DeviceHi],1
 32557                                  	; 11/12/2022
 32558                                  	;mov	byte [DeviceHi],1
 32559                                  	; 18/12/2022
 32560 000022F1 FEC3                    	inc	bl ; mov bl,1 ; (*)
 32561                                  	; 11/12/2022
 32562                                  	;jmp	short LoadDevice2	; 11/12/2022
 32563 000022F3 EB18                    	jmp	short LoadDevice
 32564                                  
 32565                                  ;------------------------------------------------------------------------------
 32566                                  ; device command
 32567                                  ;------------------------------------------------------------------------------
 32568                                  
 32569                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32570                                  	; (SYSINIT:2665h)
 32571                                  
 32572                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32573                                  	; (SYSINIT:2401h)
 32574                                  tryd:
 32575                                  	; 11/12/2022
 32576                                  	;xor 	bx,bx ; 31/12/2022
 32577                                  	;
 32578 000022F5 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 32579 000022F8 7403                    	je	short gotd
 32580                                  skip_it2:
 32581 000022FA E9BA02                  	jmp	tryq
 32582                                  gotd:
 32583                                  
 32584                                  ; 31/12/2022 - Retro DOS v4.2
 32585                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32586                                  ;%if 0
 32587                                  ;ifdef	MULTI_CONFIG
 32588 000022FD E8BB1C                  	call	query_user              ; query the user if config_cmd
 32589 00002300 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 32590                                  ;endif
 32591                                  ;%endif ; 28/10/2022
 32592                                  
 32593                                  	; 31/12/2022
 32594 00002302 29DB                    	sub	bx,bx
 32595                                  	; bx = 0
 32596                                  	; 11/12/2022
 32597                                  	; ds = cs
 32598                                  	;mov	byte [DeviceHi],0
 32599                                  	;mov	word [DevSizeOption],0
 32600 00002304 891E[AC1F]              	mov	[DevSizeOption],bx ; 0
 32601 00002308 C606[C01F]20            	mov	byte [DevSavedDelim],' '
 32602                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 32603                                  	;mov	word [cs:DevSizeOption],0
 32604                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 32605                                  					;  be replaced with a ' '
 32606                                  LoadDevice:                             ; device= or devicehigh= command.
 32607                                  	; 11/12/2022
 32608                                  	;mov	byte [DeviceHi],0
 32609 0000230D 881E[AB1F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 32610                                  LoadDevice2:
 32611                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 32612                                  	;
 32613                                  	;push    cs
 32614                                          ;pop     ds
 32615                                  	;
 32616                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 32617                                  	;mov	[bpb_addr+2],es
 32618                                  	;
 32619                                  	;mov	[DevCmdLine],si		; save it for ourself
 32620                                  	;mov	[DevCmdLine+2],es
 32621                                  	;
 32622                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 32623                                  
 32624                                  	; 11/12/2022
 32625                                  	; ds = cs
 32626                                  	;mov	bx,cs
 32627                                  	;mov	ds,bx
 32628                                  
 32629                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 32630 00002311 8936[7A03]              	mov	[bpb_addr],si
 32631                                  	;mov	[cs:bpb_addr+2],es
 32632 00002315 8C06[7C03]              	mov	[bpb_addr+2],es
 32633                                  
 32634                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 32635 00002319 8936[BC1F]              	mov	[DevCmdLine],si
 32636                                  	;mov	[cs:DevCmdLine+2],es	
 32637 0000231D 8C06[BE1F]              	mov	[DevCmdLine+2],es
 32638                                  
 32639                                  	; 31/12/2022 - Retro DOS v4.2
 32640 00002321 C606[E214]00            	mov	byte [driver_units],0	; clear total block units for driver	
 32641                                  
 32642 00002326 E8681E                  	call	round
 32643                                  	
 32644 00002329 E8360D                  	call	SizeDevice
 32645 0000232C 723F                    	jc	short BadFile
 32646                                  
 32647                                  	; 11/12/2022
 32648                                  	; ds = cs
 32649                                  
 32650                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 32651                                  
 32652                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32653                                  ; (SYSINIT:26A4h)
 32654                                  
 32655                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32656                                  ;%if 0
 32657 0000232E C606[9B1F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 32658                                  
 32659                                  	; 22/07/2023
 32660                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 32661 00002333 800E[AB1F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 32662                                  	; 10/07/2023
 32663                                  	;or	al,al
 32664 00002338 741E                    	jz	short DevConvLoad	; the actual load.
 32665                                  
 32666                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 32667 0000233A A0[591F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 32668                                  
 32669 0000233D 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 32670 0000233F 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 32671                                  
 32672 00002341 FE0E[9B1F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 32673                                  
 32674 00002345 E8FE08                  	call	GetLoadSize		; Returns size of first UMB specified
 32675 00002348 09C0                    	or	ax,ax
 32676 0000234A 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 32677                                  
 32678 0000234C 3B06[8D1F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 32679 00002350 7D06                    	jge	short DevConvLoad
 32680                                  tryd_1:
 32681 00002352 A1[8D1F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 32682 00002355 E8FA08                  	call	StoLoadSize		; minsize for load UMB.
 32683                                  
 32684                                  ;%endif ; 28/10/2022
 32685                                  
 32686                                  ; - End DeviceHigh primary logic changes --------------------------------------
 32687                                  
 32688                                  DevConvLoad:
 32689                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32690 00002358 E80B0C                  	call	InitDevLoad
 32691                                  
 32692                                  	; 11/12/2022
 32693                                  	; ds = cs
 32694 0000235B A1[8F1F]                	mov	ax,[DevLoadAddr]
 32695 0000235E 0306[8D1F]              	add	ax,[DevSize]
 32696 00002362 7206                    	jc	short NoMem
 32697 00002364 3906[911F]              	cmp	[DevLoadEnd],ax
 32698 00002368 7315                    	jae	short LoadDev
 32699                                  	
 32700                                  	; 11/12/2022
 32701                                  	;mov	ax,[cs:DevLoadAddr]
 32702                                  	;add	ax,[cs:DevSize]
 32703                                  	;jc	short NoMem
 32704                                  	;cmp	[cs:DevLoadEnd],ax
 32705                                  	;jae	short LoadDev
 32706                                  NoMem:
 32707                                  	; 11/12/2022
 32708                                  	; ds = cs
 32709                                  	;jmp	mem_err
 32710 0000236A E9631E                  	jmp	mem_err2
 32711                                  
 32712                                  BadFile:
 32713                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32714                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 32715                                  	;;cmp	byte [es:si],' '
 32716                                          ;;jae	short tryd_2
 32717                                  	; 31/12/2022	
 32718                                  	;cmp	byte [es:si],0Dh	; cr
 32719                                          ;jne	short tryd_2
 32720                                  	;jmp	badop
 32721                                  	; 31/12/2022
 32722                                  	; ds = cs
 32723                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32724                                  	; (SYSINIT:26E6h)
 32725 0000236D E8530D                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 32726 00002370 26803C20                	cmp	byte [es:si],' ' 
 32727                                  	;cmp	byte [es:si],20h ; space
 32728 00002374 7303                    	jnb	short tryd_2
 32729 00002376 E90E05                  	jmp	badop
 32730                                  tryd_2:
 32731 00002379 E84F20                  	call	badload
 32732 0000237C E961FD                  	jmp	coff
 32733                                  
 32734                                  LoadDev:
 32735 0000237F 06                      	push	es
 32736 00002380 1F                      	pop	ds
 32737                                  
 32738 00002381 89F2                    	mov	dx,si			;ds:dx points to file name
 32739 00002383 E8210D                  	call	ExecDev			; load device driver using exec call
 32740                                  badldreset:
 32741 00002386 1E                      	push	ds
 32742 00002387 07                      	pop	es			;es:si back to config.sys
 32743 00002388 0E                      	push	cs
 32744 00002389 1F                      	pop	ds			;ds back to sysinit
 32745 0000238A 72E1                    	jc	short BadFile
 32746                                  goodld:
 32747                                  	; 11/12/2022
 32748                                  	; ds = cs
 32749                                  
 32750 0000238C 06                      	push	es ; +	; 31/12/2022
 32751 0000238D 56                      	push	si ; ++
 32752 0000238E E8430D                  	call	RemoveNull
 32753 00002391 06                      	push	es
 32754 00002392 56                      	push	si
 32755                                  
 32756 00002393 0E                      	push	cs
 32757 00002394 07                      	pop	es
 32758                                  
 32759 00002395 1E                      	push	ds ; **  ; ds = cs
 32760 00002396 56                      	push	si
 32761                                  
 32762                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 32763                                  	; 31/12/2022
 32764                                  	; ds = cs
 32765 00002397 C536[931F]              	lds	si,[DevEntry]
 32766                                  
 32767                                  	;test	word [si+4],8000h
 32768                                  	; 11/12/2022
 32769 0000239B F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 32770                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 32771 0000239F 7514                    	jnz	short got_device_com_cont   ; no.
 32772                                  
 32773 000023A1 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 32774                                  	;cmp	byte [si+32],26
 32775 000023A6 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 32776 000023AA 7209                    	jb	short got_device_com_cont
 32777                                  
 32778 000023AC 5E                      	pop	si
 32779 000023AD 1F                      	pop	ds ; **
 32780                                  
 32781 000023AE 5E                      	pop	si			; clear the stack
 32782 000023AF 07                      	pop	es
 32783                                  
 32784                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32785                                  	;call	RetFromUM
 32786                                  	; 31/12/2022
 32787                                  	; ds = cs ; **
 32788 000023B0 E8100D                  	call	RetFromUM		; Do this before we leave
 32789                                  
 32790                                  	;jmp	short badnumblock
 32791                                  	; 31/12/2022
 32792 000023B3 EB73                    	jmp	short badnumblock2  ; ds = cs
 32793                                  
 32794                                  got_device_com_cont:
 32795 000023B5 5E                      	pop	si
 32796 000023B6 1F                      	pop	ds
 32797                                  
 32798                                  	; 11/12/2022
 32799                                  	; ds = cs
 32800                                  
 32801 000023B7 E85305                  	call	LieInt12Mem
 32802 000023BA E8B005                  	call	UpdatePDB		; update the PSP:2 value M020
 32803                                  
 32804                                  	; 11/12/2022
 32805                                  	; ds = cs
 32806                                  	; 08/09/2023
 32807 000023BD 31C0                    	xor	ax, ax ; 0
 32808 000023BF 3806[DE14]              	cmp	byte [multdeviceflag],al ; 0
 32809                                  	;cmp	byte [multdeviceflag],0
 32810                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 32811                                  					;  driver in the file ; M027
 32812 000023C3 750B                    	jne	short skip_pass_limit	;		      ; M027
 32813                                  
 32814                                  	; 11/12/2022
 32815                                  	; ds = cs
 32816                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 32817                                  	;mov	bx,[cs:DevLoadEnd]
 32818                                  	;mov	[cs:break_addr+2],bx
 32819                                  
 32820                                  	;mov	word [break_addr],0
 32821                                  	; 08/09/2023
 32822 000023C5 A3[7603]                	mov	[break_addr],ax ; 0
 32823 000023C8 8B1E[911F]              	mov	bx,[DevLoadEnd]
 32824 000023CC 891E[7803]              	mov	[break_addr+2],bx
 32825                                  
 32826                                  skip_pass_limit:
 32827                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 32828                                  ;	number of installed devices (including DblSpace drives) where
 32829                                  ;	"drivenumber" is the number that the next block device will
 32830                                  ;	be assigned to. Because some naughty device drivers (like
 32831                                  ;	interlnk) look at the internal DOS variable instead of the
 32832                                  ;	value we pass it, we'll temporarily stick our value into
 32833                                  ;	DOS DATA while we're initializing the device drivers.
 32834                                  ;
 32835                                  ;	Note that this will make it impossible for this device
 32836                                  ;	driver to access the DblSpace drive letters, whether
 32837                                  ;	they are swapped-hosts or unswapped compressed drives,
 32838                                  ;	during its initialization phase.
 32839                                  
 32840                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32841                                  ; (SYSINIT:2752h)
 32842                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32843                                  ;%if 0
 32844                                  	; 31/12/2022
 32845                                  	;push	ds
 32846                                  	
 32847                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32848                                  	; 31/12/2022
 32849                                  	; ds = cs
 32850                                  	; 08/09/2023
 32851                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32852                                  
 32853                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 32854                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 32855                                  	;mov	ah,al
 32856                                  
 32857                                  	; 08/09/2023
 32858                                  	; ds = cs
 32859 000023D0 A0[7E03]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 32860 000023D3 A2[7E03]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 32861 000023D6 88C4                    	mov	ah,al
 32862 000023D8 C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32863                                  
 32864 000023DC 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 32865                                  	; 31/12/2022
 32866                                  	;pop	ds
 32867                                  	
 32868 000023DF 50                      	push	ax			; save real sysi_numio/ncds in ax
 32869                                  
 32870                                  ;%endif ; 29/10/2022
 32871                                  
 32872                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32873                                  	; (SYSINIT:24B9h)
 32874                                  
 32875 000023E0 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 32876 000023E3 E8F31D                  	call	calldev 		; calldev (sdevstrat);
 32877 000023E6 BB0800                  	mov	bx,SYSDEV.INT ; 8
 32878 000023E9 E8ED1D                  	call	calldev 		; calldev (sdevint);
 32879                                  
 32880                                  	; 11/12/2022
 32881                                  	; ds <> cs (from calldev) ; 31/12/2022
 32882                                  
 32883                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32884                                  ; (SYSINIT:2773h)
 32885                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32886                                  ;%if 0
 32887 000023EC 58                      	pop	ax			; get real sysi_numio value
 32888                                  	; 31/12/2022
 32889                                  	;push	ds
 32890 000023ED 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32891 000023F2 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 32892                                  	; 31/12/2022
 32893                                  	;pop	ds
 32894                                  
 32895                                  ;%endif ; 29/10/2022
 32896                                  
 32897                                  	; 11/12/2022
 32898 000023F5 0E                      	push	cs
 32899 000023F6 1F                      	pop	ds
 32900                                  
 32901 000023F7 E84105                  	call	TrueInt12Mem
 32902                                  
 32903                                  	; 11/12/2022
 32904                                  	; ds = cs
 32905                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 32906                                  	;mov	[cs:DevBrkAddr],ax
 32907                                  	;mov	ax,[cs:break_addr+2]
 32908                                  	;mov	[cs:DevBrkAddr+2],ax
 32909 000023FA A1[7603]                	mov	ax,[break_addr]	
 32910 000023FD A3[971F]                	mov	[DevBrkAddr],ax
 32911 00002400 A1[7803]                	mov	ax,[break_addr+2]
 32912 00002403 A3[991F]                	mov	[DevBrkAddr+2],ax
 32913                                  
 32914                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32915                                  	;call	RetFromUM		; There we go... all done.
 32916                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32917                                  	; (SYSINIT:2791h)
 32918 00002406 E8BA0C                  	call	RetFromUM		; There we go... all done.	
 32919                                  
 32920                                  	; 31/12/2022
 32921                                  	; ds = cs
 32922                                  
 32923                                  	; 11/12/2022
 32924 00002409 803E[9C1F]00            	cmp	byte [DevUMB],0	
 32925                                  	;cmp	byte [cs:DevUMB],0
 32926 0000240E 7403                    	je	short tryd_3
 32927 00002410 E8A50E                  	call	AllocUMB
 32928                                  	; 31/12/2022
 32929                                  	; ds = cs
 32930                                  tryd_3:
 32931                                  
 32932                                  ;ifndef ROMDOS
 32933                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 32934                                  
 32935                                  	; 11/12/2022
 32936                                  	; ds = cs
 32937                                  	
 32938                                  	;cmp	byte [cs:runhigh],0FFh
 32939 00002413 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 32940 00002418 7503                    	jne	short tryd_4
 32941                                  	
 32942                                  	; 11/12/2022
 32943                                  	; ds = cs
 32944 0000241A E861E5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 32945                                  tryd_4:
 32946                                  ;endif ; ROMDOS
 32947                                  
 32948 0000241D 5E                      	pop	si
 32949 0000241E 1F                      	pop	ds
 32950 0000241F C60400                  	mov	byte [si],0		; *p = 0;
 32951                                  
 32952 00002422 0E                      	push	cs
 32953 00002423 1F                      	pop	ds
 32954                                  
 32955 00002424 EB1F                    	jmp	short was_device_com
 32956                                  
 32957                                  ;----------------------------------------------------------------------------
 32958                                  
 32959                                  ; 02/04/2019 - Retro DOS v4.0
 32960                                  
 32961                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32962                                  ; (SYSINIT:27B3h)
 32963                                  
 32964                                  badnumblock:
 32965 00002426 0E                      	push	cs
 32966 00002427 1F                      	pop	ds
 32967                                  badnumblock2:	; 31/12/2022 (ds=cs)
 32968 00002428 BA[FC4A]                	mov	dx,badblock
 32969 0000242B E8C51F                  	call	print
 32970                                  
 32971                                  ;------ fall thru -----------------------------------------------------------
 32972                                  
 32973                                  	; 31/12/2022 - Retro DOS v4.2
 32974                                  
 32975                                  erase_dev_do:				; modified to show message "error in config.sys..."
 32976                                  	
 32977                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 32978                                  				; (Note: 'call CheckDoubleSpace'
 32979                                  				; has been removed at 'erase_dev_do:' pos
 32980                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 32981                                  				; Erdogan Tan - 10/07/2023
 32982 0000242E 5E                      	pop	si ; ++
 32983 0000242F 07                      	pop	es ; + ; 31/12/2022
 32984                                  
 32985 00002430 0E                      	push	cs
 32986 00002431 1F                      	pop	ds
 32987                                  
 32988                                  skip1_resetmemhi:
 32989                                  	; 11/12/2022
 32990                                  	; ds = cs
 32991 00002432 833E[7F03]00            	cmp	word [configmsgflag],0
 32992                                  	;cmp	word [cs:configmsgflag],0
 32993 00002437 7409                    	je	short no_error_line_msg
 32994                                  
 32995 00002439 E87F04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 32996                                  	; 11/12/2022
 32997                                  	; ds = cs
 32998                                  	;mov	word [cs:configmsgflag],0
 32999 0000243C C706[7F03]0000          	mov	word [configmsgflag],0	; set the default value again.
 33000                                  
 33001                                  no_error_line_msg:
 33002 00002442 E99BFC                  	jmp	coff
 33003                                  
 33004                                  ;----------------------------------------------------------------------------
 33005                                  
 33006                                  was_device_com:
 33007                                  	; 14/12/2022
 33008                                  	; ds = cs
 33009 00002445 A1[991F]                	mov	ax,[DevBrkAddr+2]
 33010                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 33011 00002448 3B06[911F]              	cmp	ax,[DevLoadEnd]
 33012                                  	;cmp	ax,[cs:DevLoadEnd]
 33013 0000244C 7605                    	jbe	short breakok
 33014                                  
 33015 0000244E 5E                      	pop	si
 33016 0000244F 07                      	pop	es
 33017 00002450 E91AFF                  	jmp	BadFile
 33018                                  
 33019                                  breakok:
 33020                                  	; 14/12/2022
 33021                                  	; ds = cs
 33022 00002453 C43E[6D02]              	les	di,[DOSINFO] 
 33023 00002457 C516[931F]              	lds	dx,[DevEntry]
 33024                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 33025 0000245B 89D6                    	mov	si,dx
 33026                                  
 33027                                  	; 14/11/2022
 33028                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 33029                                  
 33030                                  	; 14/12/2022
 33031                                  	; ds <> cs
 33032                                  	
 33033                                  	;mov	ax,[si+4]
 33034 0000245D 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 33035                                  	; 12/12/2022
 33036 00002460 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 33037                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 33038 00002463 7426                    	jz	short isblock
 33039                                  
 33040                                  ;------ lets deal with character devices
 33041                                  
 33042 00002465 2E800E[E114]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33043 0000246B E8990C                  	call	DevSetBreak		;go ahead and alloc mem for device
 33044                                  jc_edd:
 33045 0000246E 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 33046                                  
 33047                                  	; 12/12/2022
 33048 00002470 A801                    	test	al,ISCIN
 33049                                  	;test	ax,ISCIN ; 1		;is it a console in?
 33050 00002472 7408                    	jz	short tryclk
 33051                                  
 33052 00002474 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 33053 00002478 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 33054                                  tryclk: 
 33055                                  	; 12/12/2022
 33056 0000247C A808                    	test	al,ISCLOCK
 33057                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 33058 0000247E 7408                    	jz	short golink
 33059                                  
 33060 00002480 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 33061 00002484 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 33062                                  golink: 
 33063 00002488 E9DF00                  	jmp	linkit
 33064                                  
 33065                                  ;------ deal with block device drivers
 33066                                  
 33067                                  isblock:
 33068 0000248B 2EA0[7503]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 33069 0000248F 08C0                    	or	al,al
 33070 00002491 749B                    	jz	short erase_dev_do
 33071                                  	;mov	[si+10],al
 33072 00002493 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 33073                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33074                                  	;add	[cs:driver_units],al
 33075                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33076 00002496 2E0006[E214]            	add	[cs:driver_units],al	; keep total for all drivers in file
 33077                                  perdrv:
 33078 0000249B 98                      	cbw				; warning no device > 127 units
 33079 0000249C 89C1                    	mov	cx,ax
 33080 0000249E 88E6                    	mov	dh,ah
 33081                                  	;mov	dl,[es:di+32]
 33082 000024A0 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 33083 000024A4 88D4                    	mov	ah,dl
 33084 000024A6 00C4                    	add	ah,al			; check for too many devices
 33085 000024A8 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 33086 000024AB 7603                    	jbe	short ok_block
 33087 000024AD E976FF                  	jmp	badnumblock
 33088                                  
 33089                                  ok_block:
 33090 000024B0 2E800E[E114]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33091 000024B6 E84E0C                  	call	DevSetBreak		; alloc the device
 33092 000024B9 72B3                    	jc	short jc_edd
 33093 000024BB 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 33094                                  
 33095 000024BF 2E0006[7E03]            	add	[cs:drivenumber],al	; remember amount for next device
 33096 000024C4 2EC51E[7A03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 33097                                  perunit:
 33098 000024C9 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 33099                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 33100                                  	; 11/12/2022
 33101 000024CE 26C46E00                	les	bp,[es:bp]
 33102                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33103                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 33104                                  scandpb:
 33105                                  	;cmp	word [es:bp+25],-1
 33106 000024D2 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 33107 000024D7 7406                    	je	short foundpb
 33108                                  	;les	bp,[es:bp+25]
 33109 000024D9 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 33110 000024DD EBF3                    	jmp	short scandpb
 33111                                  foundpb:
 33112 000024DF 2EA1[971F]              	mov	ax,[cs:DevBrkAddr]
 33113 000024E3 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 33114 000024E7 2EA1[991F]              	mov	ax,[cs:DevBrkAddr+2]
 33115 000024EB 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 33116                                  
 33117 000024EF 2EC42E[971F]            	les	bp,[cs:DevBrkAddr]
 33118 000024F4 2E8306[971F]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 33119                                  				; 08/09/2023
 33120                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 33121 000024FA E8E90B                  	call	RoundBreakAddr
 33122                                  
 33123 000024FD 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 33124 00002503 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 33125                                  
 33126 00002508 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 33127 0000250A 43                      	inc	bx
 33128 0000250B 43                      	inc	bx			;point to next guy
 33129                                  	;mov	[es:bp+DPB.DRIVE],dx
 33130                                  	; 11/12/2022
 33131 0000250C 26895600                	mov	[es:bp],dx ; 13/05/2019
 33132                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33133                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 33134                                  
 33135                                  	; 13/04/2024 - Retro DOS v5.0
 33136                                  	; PCDOS 7.1 IBMBIO.COM
 33137                                  	;;;
 33138 00002510 52                      	push	dx
 33139 00002511 51                      	push	cx		; initialize FAT32 extended DPB parameters/fields
 33140 00002512 BA5241                  	mov	dx,4152h	; 'AR' signature for FAT32 extended DPB
 33141 00002515 31C9                    	xor	cx,cx	; 0
 33142                                  	;mov	[es:bp+1Dh],cx
 33143 00002517 26894E1D                	mov	[es:bp+DPB.NEXT_FREE],cx ; last allocated cluster #
 33144                                  	;cmp	[si+0Bh],cx	; BPB.fatsecs16 
 33145 0000251B 394C0B                  	cmp	[si+A_BPB.SECTORSPERFAT],cx ; 0
 33146 0000251E 7514                    	jnz	short set_dpb	; FAT DPB (33 bytes)   -jnz-
 33147                                  				; FAT32 DPB (61 bytes) -jz-
 33148                                  	;mov	[es:bp+39h],cx
 33149 00002520 26894E39                	mov	[es:bp+DPB.FAT32_NXTFREE],cx ; 0
 33150                                  	;mov	[es:bp+3Bh],cx
 33151 00002524 26894E3B                	mov	[es:bp+DPB.FAT32_NXTFREE+2],cx ; 0
 33152 00002528 49                      	dec	cx	; 0FFFFh ; -1
 33153                                  	;mov	[es:bp+1Fh],cx
 33154 00002529 26894E1F                	mov	[es:bp+DPB.FREE_CNT],cx ; -1 = unknown
 33155                                  	;mov	[es:bp+21h],cx
 33156 0000252D 26894E21                	mov	[es:bp+DPB.FREE_CNT+2],cx ; -1 = unknown
 33157 00002531 B95845                  	mov	cx,4558h       ; 'EX' signature for FAT32 extended DPB
 33158                                  set_dpb:
 33159                                  	;;;
 33160                                  
 33161 00002534 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 33162 00002536 CD21                    	int	21h
 33163                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 33164                                  			; DS:SI -> BPB (BIOS Parameter Block)
 33165                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 33166                                  	; 13/04/2024
 33167                                  	;;;
 33168 00002538 59                      	pop	cx
 33169 00002539 5A                      	pop	dx
 33170                                  	;;;
 33171                                  
 33172                                  	;mov	ax,[es:bp+2]
 33173 0000253A 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 33174 0000253E 06                      	push	es
 33175 0000253F 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 33176                                  	;cmp	ax,[es:di+10h]
 33177 00002544 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 33178 00002548 07                      	pop	es
 33179                                  	; 13/04/2024
 33180                                  	;jna	short iblk_1
 33181                                  	;jmp	bad_bpb_size_sector
 33182                                  	; 29/10/2022
 33183 00002549 775E                    	ja	short bad_bpb_size_sector
 33184                                  iblk_1:
 33185 0000254B 1E                      	push	ds
 33186 0000254C 52                      	push	dx
 33187                                  
 33188 0000254D 2EC516[931F]            	lds	dx,[cs:DevEntry]
 33189                                  	;mov	[es:bp+13h],dx
 33190 00002552 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 33191                                  	;mov	[es:bp+15h],ds
 33192 00002556 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 33193                                  
 33194 0000255A 5A                      	pop	dx
 33195 0000255B 1F                      	pop	ds
 33196                                  
 33197 0000255C 42                      	inc	dx
 33198 0000255D FEC6                    	inc	dh
 33199                                  	;loop	perunit
 33200                                  	; 13/04/2024
 33201                                  	;;;
 33202 0000255F 49                      	dec	cx		; cx = cx - 1
 33203                                  				; cx = remain count from [cs:unitcount]
 33204 00002560 7403                    	jz	short iblk_2	; cx = 0 -> done
 33205 00002562 E964FF                  	jmp	perunit		; loop until cx is 0
 33206                                  iblk_2:
 33207                                  	;;;
 33208                                  	
 33209 00002565 0E                      	push	cs
 33210 00002566 1F                      	pop	ds
 33211                                  
 33212 00002567 E81FE7                  	call	TempCDS 		; set cds for new drives
 33213                                  	; 31/12/2022
 33214                                  	; ds <> cs
 33215                                  linkit:
 33216 0000256A 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 33217 0000256F 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 33218 00002573 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 33219                                  
 33220 00002577 2EC536[931F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 33221 0000257C 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 33222 00002580 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 33223 00002584 8B04                    	mov	ax,[si]			;get pointer to next device
 33224 00002586 2EA3[931F]              	mov	[cs:DevEntry],ax	;and save it
 33225                                  
 33226 0000258A 890C                    	mov	[si],cx			;link in the driver
 33227 0000258C 895402                  	mov	[si+2],dx
 33228                                  enddev:
 33229 0000258F 5E                      	pop	si
 33230 00002590 07                      	pop	es
 33231 00002591 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 33232 00002592 740B                    	jz	short coffj3
 33233                                  
 33234 00002594 2EFE06[DE14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 33235 00002599 E88D0B                  	call	DevBreak		; M009
 33236                                  	; 11/12/2022
 33237                                  	; ds = cs (DevBreak)
 33238                                  
 33239                                  	; 03/04/2019 - Retro DOS v4.0
 33240                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 33241 0000259C E9EDFD                  	jmp	goodld			; otherwise pretend we loaded it in
 33242                                  coffj3: 
 33243                                  	; 18/12/2022
 33244                                  	; ax = 0
 33245 0000259F 2EA2[DE14]              	mov	[cs:multdeviceflag],al ; 0
 33246                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 33247 000025A3 E8830B                  	call	DevBreak
 33248                                  	; 11/12/2022
 33249                                  	; ds = cs (DevBreak)
 33250                                  	
 33251                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33252                                  	; (SYSINIT:2919h)
 33253                                  	; 11/07/2023
 33254                                  	; 07/03/2025 - MiniDOS 1.0
 33255                                  	;call	CheckProtmanArena
 33256                                  	
 33257                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 33258                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 33259                                  ;					;  created a bogus arena to try
 33260                                  ;					;  to protect some of its resident-
 33261                                  ;					;  init code.
 33262                                  	; 13/04/2024 - Retro DOS v5.0
 33263                                  	; PCDOS 7.1 IBMBIO.COM
 33264                                  	;;call	CheckDoubleSpace
 33265                                  	
 33266                                  	; 07/03/2025 - MiniDOS 1.0
 33267 000025A6 E937FB                  	jmp	coff
 33268                                  
 33269                                  ;----------------------------------------------------------------------------
 33270                                  
 33271                                  ; 03/04/2019 - Retro DOS v4.0
 33272                                  
 33273                                  bad_bpb_size_sector:
 33274 000025A9 5E                      	pop	si
 33275 000025AA 07                      	pop	es
 33276 000025AB BA[1E4A]                	mov	dx,badsiz_pre
 33277 000025AE BB[FC49]                	mov	bx,crlfm
 33278 000025B1 E81D1E                  	call	prnerr
 33279                                  
 33280 000025B4 E929FB                  	jmp	coff
 33281                                  
 33282                                  ;------------------------------------------------------------------------------
 33283                                  ; country command
 33284                                  ;      the syntax is:
 33285                                  ;	country=country id {,codepage {,path}}
 33286                                  ;	country=country id {,,path}	:default codepage id in dos
 33287                                  ;------------------------------------------------------------------------------
 33288                                  
 33289                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33290                                  	; (SYSINIT:2663h)
 33291                                  tryq:
 33292 000025B7 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 33293 000025BA 7403                    	je	short tryq_cont
 33294                                  skip_it3:
 33295 000025BC E90D01                  	jmp	tryf
 33296                                  tryq_cont:
 33297                                  
 33298                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33299                                  ; (SYSINIT:297Eh)
 33300                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33301                                  ;%if 0
 33302                                  ;ifdef	MULTI_CONFIG
 33303 000025BF E8F919                  	call	query_user		; query the user if config_cmd
 33304 000025C2 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 33305                                  ;endif
 33306                                  ;%endif ; 02/11/2022
 33307                                  
 33308                                  	; 31/12/2022
 33309                                  	;xor	bx,bx
 33310 000025C4 31C9                    	xor	cx,cx
 33311                                  	; 14/12/2022
 33312                                  	; ds = cs
 33313                                  	; bx = 0
 33314                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 33315                                  	;mov	word [cs:p_code_page],0
 33316                                  	; 31/12/2022
 33317                                  	; cx = 0
 33318                                  	;mov	[cntry_drv],bl ; 0
 33319                                  	;mov	[p_code_page],bx ; 0
 33320 000025C6 880E[7C44]              	mov	[cntry_drv],cl ; 0
 33321 000025CA 890E[F41D]              	mov	[p_code_page],cx ; 0	
 33322                                  
 33323 000025CE BF[BD1D]                	mov	di,cntry_parms
 33324                                  	;xor	cx,cx	; 31/12/2022
 33325                                  	; 03/01/2023
 33326                                  	;mov	dx,cx
 33327                                  do52:
 33328 000025D1 E89402                  	call	sysinit_parse
 33329 000025D4 730B                    	jnc	short if52		; parse error,check error code and
 33330                                  
 33331 000025D6 E8E000                  	call	cntry_error		; show message and end the search loop.
 33332                                  	; 14/12/2022
 33333                                  	; ds = cs
 33334 000025D9 C706[F21D]FFFF          	mov	word [p_cntry_code],-1
 33335                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 33336 000025DF EB34                    	jmp	short sr52
 33337                                  if52:
 33338 000025E1 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33339 000025E4 742F                    	jz	short sr52		; then end the search loop
 33340                                  
 33341                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 33342                                  	; 14/12/2022
 33343                                  	; ds = cs
 33344 000025E6 803E[8F1D]01            	cmp	byte [result_val],_$P_Number	
 33345                                  	;cmp	byte [cs:result_val],_$P_Number
 33346 000025EB 7512                    	jnz	short if56
 33347                                  
 33348                                  	;;mov	ax,[cs:rw_dword]
 33349                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33350                                  	; 14/12/2022
 33351 000025ED A1[931D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33352 000025F0 83F901                  	cmp	cx,1
 33353 000025F3 7505                    	jne	short if57
 33354                                  
 33355                                  	;mov	[cs:p_cntry_code],ax
 33356                                  	; 14/12/2022
 33357 000025F5 A3[F21D]                	mov	[p_cntry_code],ax
 33358                                  
 33359                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33360                                  	;jmp	short en57
 33361                                  	; 12/12/2022
 33362                                  	;jmp	short en56
 33363 000025F8 EBD7                    	jmp	short do52
 33364                                  if57:
 33365                                  	;mov	[cs:p_code_page],ax
 33366                                  	; 14/12/2022
 33367                                  	; ds = cs
 33368 000025FA A3[F41D]                	mov	[p_code_page],ax
 33369                                  en57:
 33370                                  	;jmp	short en56		; path entered
 33371                                  	; 12/12/2022
 33372 000025FD EBD2                    	jmp	short do52
 33373                                  if56:
 33374 000025FF 1E                      	push	ds
 33375 00002600 06                      	push	es
 33376 00002601 56                      	push	si
 33377 00002602 57                      	push	di
 33378                                  
 33379 00002603 0E                      	push	cs
 33380 00002604 07                      	pop	es
 33381                                  
 33382                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 33383                                  	; 14/12/2022
 33384 00002605 C536[931D]              	lds	si,[rv_dword]
 33385 00002609 BF[7C44]                	mov	di,cntry_drv
 33386 0000260C E8B11D                  	call	move_asciiz
 33387                                  
 33388 0000260F 5F                      	pop	di
 33389 00002610 5E                      	pop	si
 33390 00002611 07                      	pop	es
 33391 00002612 1F                      	pop	ds
 33392                                  en56:
 33393 00002613 EBBC                    	jmp	short do52
 33394                                  sr52:
 33395                                  	; 14/12/2022
 33396                                  	; ds = cs
 33397 00002615 833E[F21D]FF            	cmp	word [p_cntry_code],-1
 33398                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 33399 0000261A 7509                    	jne	short tryq_open
 33400 0000261C E9C1FA                  	jmp	coff
 33401                                  
 33402                                  tryqbad:				;"invalid country code or code page"
 33403 0000261F F9                      	stc
 33404 00002620 BA[654A]                	mov     dx,badcountry
 33405 00002623 EB79                    	jmp     tryqchkerr
 33406                                  
 33407                                  tryq_open:
 33408                                  	; 14/12/2022
 33409                                  	; ds = cs
 33410 00002625 803E[7C44]00            	cmp	byte [cntry_drv],0
 33411                                  	;cmp	byte [cs:cntry_drv],0
 33412 0000262A 7405                    	je	short tryq_def
 33413 0000262C BA[7C44]                	mov	dx,cntry_drv
 33414 0000262F EB03                    	jmp	short tryq_openit
 33415                                  
 33416                                  tryq_def:
 33417 00002631 BA[7E44]                	mov	dx,cntry_root
 33418                                  tryq_openit:
 33419 00002634 B8003D                  	mov	ax,3D00h		;open a file
 33420 00002637 F9                      	stc
 33421 00002638 CD21                    	int	21h
 33422 0000263A 7242                    	jc	short tryqfilebad	;open failure
 33423                                  
 33424                                  	; 14/12/2022
 33425                                  	; ds = cs
 33426 0000263C A3[5A03]                	mov	[cntryfilehandle],ax
 33427                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 33428 0000263F 89C3                    	mov	bx,ax
 33429 00002641 A1[F21D]                	mov	ax,[p_cntry_code]
 33430 00002644 8B16[F41D]              	mov	dx,[p_code_page]
 33431                                  	;mov	ax,[cs:p_cntry_code]
 33432                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 33433                                  	;mov	cx,[cs:memhi]
 33434 00002648 8B0E[6203]              	mov	cx,[memhi]
 33435 0000264C 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 33436                                  					;M023
 33437                                  	; 14/12/2022
 33438                                  	; ds = cs
 33439 00002650 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 33440                                  	;cmp	cx,[cs:ALLOCLIM]
 33441 00002654 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 33442                                  
 33443 00002656 BE[7C44]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 33444 00002659 803C00                  	cmp	byte [si],0 		;default path?
 33445 0000265C 7502                    	jne	short tryq_set_for_dos
 33446                                  
 33447 0000265E 46                      	inc	si
 33448 0000265F 46                      	inc	si			;ds:si -> cntry_root
 33449                                  
 33450                                  tryq_set_for_dos:
 33451                                  	; 14/12/2022
 33452                                  	; ds = cs
 33453 00002660 C43E[7902]              	les	di,[sysi_country]
 33454                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 33455 00002664 57                      	push	di			;save di
 33456                                  	;add	di,8
 33457 00002665 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 33458 00002668 E8551D                  	call	move_asciiz		;set the path to country.sys in dos.
 33459 0000266B 5F                      	pop	di			;es:di -> country info tab again.
 33460                                  
 33461                                  	; 14/12/2022	
 33462 0000266C 8B0E[6203]              	mov	cx,[memhi]
 33463                                  	;mov	cx,[cs:memhi]
 33464 00002670 8ED9                    	mov	ds,cx
 33465 00002672 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 33466 00002674 E8E51B                  	call	setdoscountryinfo	;now do the job!!!
 33467                                  	; ds <> cs ; 14/12/2022
 33468 00002677 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 33469                                  
 33470 00002679 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 33471 0000267C 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 33472                                  
 33473                                  tryqfilebad:
 33474 0000267E 0E                      	push	cs
 33475 0000267F 07                      	pop	es
 33476 00002680 2E803E[7C44]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 33477 00002686 7405                    	je	short tryqdefbad
 33478                                  
 33479 00002688 BE[7C44]                	mov	si,cntry_drv
 33480 0000268B EB03                    	jmp	short tryqbadload
 33481                                  
 33482                                  tryqdefbad:				;default file has been used.
 33483 0000268D BE[7E44]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 33484                                  tryqbadload:
 33485 00002690 E8381D                  	call	badload 		;ds will be restored to sysinit_seg
 33486                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33487                                  	; (SYSINIT:2A69h)
 33488 00002693 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 33489                                  	;mov	cx,[cs:CONFBOT]
 33490                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33491                                  	;mov	cx,[cs:top_of_cdss]
 33492                                  	; 11/12/2022
 33493                                  	; ds = cs
 33494                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 33495 00002697 8EC1                    	mov	es,cx			;restore es -> confbot.
 33496 00002699 EB13                    	jmp	short coffj4
 33497                                  
 33498                                  tryqmemory:
 33499 0000269B BA[A84A]                	mov	dx,insufmemory
 33500                                  tryqchkerr:
 33501                                  	;mov	cx,[cs:CONFBOT]
 33502                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33503                                  	;mov	cx,[cs:top_of_cdss]
 33504                                  	; 12/12/2022
 33505 0000269E 0E                      	push	cs
 33506 0000269F 1F                      	pop	ds
 33507                                  	; 31/12/2022 - Retro DOS v4.2
 33508 000026A0 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 33509                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 33510 000026A4 8EC1                    	mov	es,cx			;restore es -> confbot seg
 33511                                  	;push	cs
 33512                                  	;pop	ds			;restore ds to sysinit_seg
 33513 000026A6 7306                    	jnc	short coffj4		;if no error,then exit
 33514                                  
 33515 000026A8 E8481D                  	call	print			;else show error message
 33516 000026AB E80D02                  	call	error_line
 33517                                  coffj4:
 33518                                  	;mov	bx,[cs:cntryfilehandle]
 33519                                  	; 11/12/2022
 33520                                  	; ds = cs
 33521 000026AE 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 33522 000026B2 B43E                    	mov	ah,3Eh
 33523 000026B4 CD21                    	int	21h			;close a file. don't care even if it fails.
 33524 000026B6 E927FA                  	jmp	coff
 33525                                  
 33526                                  ;--------------------------------------------
 33527                                  
 33528                                  cntry_error:
 33529                                  
 33530                                  ;function: show "invalid country code or code page" messages,or
 33531                                  ;		"error in country command" depending on the error code
 33532                                  ;		in ax returned by sysparse;
 33533                                  ;in:	ax - error code
 33534                                  ;	ds - sysinitseg
 33535                                  ;	es - confbot
 33536                                  ;out:	show message.  dx destroyed.
 33537                                  
 33538 000026B9 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 33539 000026BC 7505                    	jne	short if64
 33540 000026BE BA[654A]                	mov	dx,badcountry		;"invalid country code or code page"
 33541 000026C1 EB03                    	jmp	short en64
 33542                                  if64:
 33543 000026C3 BA[8B4A]                	mov	dx,badcountrycom	;"error in contry command"
 33544                                  en64:
 33545 000026C6 E82A1D                  	call	print
 33546                                  	;call	error_line
 33547                                  	;retn
 33548                                  	; 11/12/2022
 33549 000026C9 E9EF01                  	jmp	error_line
 33550                                  
 33551                                  ;------------------------------------------------------------------------------
 33552                                  ; files command
 33553                                  ;------------------------------------------------------------------------------
 33554                                  
 33555                                  ;******************************************************************************
 33556                                  ; function: parse the parameters of files= command.			      *
 33557                                  ;									      *
 33558                                  ; input :								      *
 33559                                  ;	es:si -> parameters in command line.				      *
 33560                                  ; output:								      *
 33561                                  ;	variable files set.						      *
 33562                                  ;									      *
 33563                                  ; subroutines to be called:						      *
 33564                                  ;	sysinit_parse							      *
 33565                                  ; logic:								      *
 33566                                  ; {									      *
 33567                                  ;	set di points to files_parms;					      *
 33568                                  ;	set dx,cx to 0; 						      *
 33569                                  ;	while (end of command line)					      *
 33570                                  ;	{ sysinit_parse;						      *
 33571                                  ;	  if (no error) then						      *
 33572                                  ;	     files = result_val._$P_picked_val				      *
 33573                                  ;	  else								      *
 33574                                  ;	     error exit;						      *
 33575                                  ;	};								      *
 33576                                  ; };									      *
 33577                                  ;									      *
 33578                                  ;******************************************************************************
 33579                                  
 33580                                  tryf:
 33581 000026CC 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 33582 000026CF 7528                    	jne	short tryl
 33583                                  
 33584                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33585                                  ; (SYSINIT:2AABh)
 33586                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33587                                  ;%if 0
 33588                                  ;ifdef	MULTI_CONFIG
 33589 000026D1 E8E718                  	call	query_user              ; query the user if config_cmd
 33590 000026D4 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 33591                                  ;endif
 33592                                  ;%endif ; 30/10/2022
 33593                                  
 33594                                  	; 14/12/2022
 33595                                  	; ds = cs
 33596                                  
 33597 000026D6 BF[F61D]                	mov	di,files_parms
 33598 000026D9 31C9                    	xor	cx,cx
 33599                                  	; 03/01/2023
 33600                                  	;mov	dx,cx
 33601                                  do67:
 33602 000026DB E88A01                  	call	sysinit_parse
 33603 000026DE 7303                    	jnc	short if67		; parse error
 33604                                  	;call	badparm_p		;  and show messages and end the search loop.
 33605                                  	;jmp	short sr67
 33606                                  	; 03/01/2023
 33607 000026E0 E9B8FA                  	jmp	badparm_p_coff
 33608                                  if67:
 33609 000026E3 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33610 000026E6 7408                    	je	short en67		; then end the $endloop
 33611                                  
 33612                                  	; 14/12/2022
 33613                                  	; ds = cs
 33614                                  	;;mov	al,[cs:rv_dword]
 33615                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33616                                  	;mov	[cs:p_files],al		; save it temporarily
 33617                                  	;mov	al,[rv_dword]
 33618 000026E8 A0[931D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 33619 000026EB A2[151E]                	mov	[p_files],al
 33620                                  
 33621 000026EE EBEB                    	jmp	short do67
 33622                                  en67:
 33623                                  	; 14/12/2022
 33624                                  	; ds = cs
 33625 000026F0 A0[151E]                	mov	al,[p_files]
 33626 000026F3 A2[9D02]                	mov	[FILES],al	
 33627                                  	;mov	al,[cs:p_files]
 33628                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 33629                                  sr67:
 33630 000026F6 E9E7F9                  	jmp	coff
 33631                                  
 33632                                  ; 04/04/2019 - Retro DOS v4.0
 33633                                  
 33634                                  ;------------------------------------------------------------------------------
 33635                                  ; lastdrive command
 33636                                  ;------------------------------------------------------------------------------
 33637                                  
 33638                                  ;******************************************************************************
 33639                                  ; function: parse the parameters of lastdrive= command. 		      *
 33640                                  ;									      *
 33641                                  ; input :								      *
 33642                                  ;	es:si -> parameters in command line.				      *
 33643                                  ; output:								      *
 33644                                  ;	set the variable num_cds.					      *
 33645                                  ;									      *
 33646                                  ; subroutines to be called:						      *
 33647                                  ;	sysinit_parse							      *
 33648                                  ; logic:								      *
 33649                                  ; {									      *
 33650                                  ;	set di points to ldrv_parms;					      *
 33651                                  ;	set dx,cx to 0; 						      *
 33652                                  ;	while (end of command line)					      *
 33653                                  ;	{ sysinit_parse;						      *
 33654                                  ;	  if (no error) then						      *
 33655                                  ;	     set num_cds to the returned value; 			      *
 33656                                  ;	  else	/*error exit*/						      *
 33657                                  ;	     error exit;						      *
 33658                                  ;	};								      *
 33659                                  ; };									      *
 33660                                  ;									      *
 33661                                  ;******************************************************************************
 33662                                  
 33663                                  tryl:
 33664 000026F9 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 33665 000026FC 7528                    	jne	short tryp
 33666                                  
 33667                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33668                                  ; (SYSINIT:2AE0h)
 33669                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33670                                  ;%if 0
 33671 000026FE E8BA18                  	call	query_user      ; query the user if config_cmd
 33672 00002701 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 33673                                  ;endif
 33674                                  ;%endif ; 30/10/2022
 33675                                  
 33676                                  	; 14/12/2022
 33677                                  	; ds = cs
 33678                                  
 33679 00002703 BF[4D1E]                	mov	di,ldrv_parms
 33680 00002706 31C9                    	xor	cx,cx
 33681                                  	; 03/01/2023
 33682                                  	;mov	dx,cx
 33683                                  do73:
 33684 00002708 E85D01                  	call	sysinit_parse
 33685 0000270B 7303                    	jnc	short if73	; parse error
 33686                                  	;call	badparm_p	;  and show messages and end the search loop.
 33687                                  	;jmp	short sr73
 33688                                  	; 03/01/2023
 33689 0000270D E98BFA                  	jmp	badparm_p_coff
 33690                                  if73:
 33691 00002710 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 33692 00002713 7408                    	je	short en73	; then end the $endloop
 33693                                  
 33694                                  	; 14/12/2022
 33695                                  	; ds = cs
 33696                                  	;;mov	al,[cs:rv_dword]
 33697                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 33698                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 33699                                  
 33700                                  	;mov	al,[rv_dword]
 33701 00002715 A0[931D]                	mov	al,[rv_byte]
 33702 00002718 A2[611E]                	mov	[p_ldrv],al
 33703                                  
 33704 0000271B EBEB                    	jmp	short do73
 33705                                  en73:
 33706                                  	; 14/12/2022
 33707                                  	; ds = cs
 33708 0000271D A0[611E]                	mov	al,[p_ldrv]
 33709 00002720 A2[A002]                	mov	[NUM_CDS],al
 33710                                  	;mov	al,[cs:p_ldrv]
 33711                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 33712                                  sr73:
 33713 00002723 E9BAF9                  	jmp	coff
 33714                                  
 33715                                  ;--------------------------------------------------------------------------
 33716                                  ; setting drive parameters
 33717                                  ;--------------------------------------------------------------------------
 33718                                  
 33719                                  tryp:
 33720 00002726 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 33721 00002729 7516                    	jne	short tryk
 33722                                  
 33723                                  ; 31/12/2022 - Retro DOS v4.2
 33724                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33725                                  ;%if 0
 33726                                  ;ifdef	MULTI_CONFIG
 33727 0000272B E88D18                  	call	query_user      ; query the user if config_cmd
 33728 0000272E 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 33729                                  ;endif
 33730                                  ;%endif ; 30/10/2022
 33731                                  
 33732 00002730 E8B60D                  	call	parseline
 33733 00002733 7209                    	jc	short trypbad
 33734 00002735 E8EC0C                  	call	setparms
 33735 00002738 E8110D                  	call	diddleback
 33736                                  
 33737                                  ; No error check here, because setparms and diddleback have no error 
 33738                                  ; returns, and setparms as coded now can return with carry set. 
 33739                                  ;       jc	short trypbad
 33740                                  
 33741                                  	; 12/12/2022
 33742                                  	; cf = 0
 33743                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33744                                  	;jc	short trypbad
 33745                                  	
 33746 0000273B E9A2F9                  	jmp	coff
 33747                                  trypbad:
 33748 0000273E E94601                  	jmp	badop
 33749                                  
 33750                                  ;--------------------------------------------------------------------------
 33751                                  ; setting internal stack parameters
 33752                                  ; stacks=m,n where
 33753                                  ;	m is the number of stacks (range 8 to 64,default 9)
 33754                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 33755                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 33756                                  ;	any combinations that are not within the specified limits will
 33757                                  ;	result in "unrecognized command" error.
 33758                                  ;--------------------------------------------------------------------------
 33759                                  
 33760                                  ;**************************************************************************
 33761                                  ;									  *
 33762                                  ; function: parse the parameters of stacks= command.			  *
 33763                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 33764                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 33765                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 33766                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 33767                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 33768                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 33769                                  ;	    (or if "0,0" pair has been entered.)			  *
 33770                                  ; input :								  *
 33771                                  ;	es:si -> parameters in command line.				  *
 33772                                  ; output:								  *
 33773                                  ;	set the variables stack_count,stack_size.			  *
 33774                                  ;									  *
 33775                                  ; subroutines to be called:						  *
 33776                                  ;	sysinit_parse							  *
 33777                                  ; logic:								  *
 33778                                  ; {									  *
 33779                                  ;	set di points to stks_parms;					  *
 33780                                  ;	set dx,cx to 0; 						  *
 33781                                  ;	while (end of command line)					  *
 33782                                  ;	{ sysinit_parse;						  *
 33783                                  ;	  if (no error) then						  *
 33784                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 33785                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 33786                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 33787                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 33788                                  ;	     }								  *
 33789                                  ;	  else	/*error exit*/						  *
 33790                                  ;	     error exit;						  *
 33791                                  ;	};								  *
 33792                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 33793                                  ;	if o.k.,then set stack_count,stack_size;			  *
 33794                                  ;	 else error_exit;						  *
 33795                                  ; };									  *
 33796                                  ;**************************************************************************
 33797                                  
 33798                                  tryk:
 33799                                          ;if      stacksw
 33800                                  
 33801 00002741 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 33802 00002744 7402                    	je	short do_tryk
 33803                                  skip_it4:
 33804 00002746 EB79                    	jmp	short trys	; 15/12/2022
 33805                                  do_tryk:
 33806                                  
 33807                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33808                                  ; (SYSINIT:2B33h)
 33809                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33810                                  ;%if 0
 33811                                  ;ifdef	MULTI_CONFIG
 33812 00002748 E87018                         call	query_user              ; query the user if config_cmd
 33813 0000274B 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 33814                                  ;endif
 33815                                  ;%endif	; 30/10/2022
 33816                                  
 33817                                  	; 14/12/2022
 33818                                  	; ds = cs
 33819                                  
 33820 0000274D BF[621E]                	mov	di,stks_parms
 33821 00002750 31C9                    	xor	cx,cx
 33822                                  	; 03/01/2023
 33823                                  	;mov	dx,cx
 33824                                  do79:
 33825 00002752 E81301                  	call	sysinit_parse
 33826 00002755 730B                    	jnc	short if79		; parse error
 33827                                  
 33828 00002757 BA[174B]                	mov	dx,badstack		; "invalid stack parameter"
 33829 0000275A E8961C                  	call	print			;  and show messages and end the search loop.
 33830 0000275D E85B01                  	call	error_line
 33831                                  	;jmp	sr79
 33832                                  	; 11/12/2022
 33833 00002760 EB39                    	jmp	short sr79
 33834                                  if79:
 33835 00002762 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33836 00002765 7412                    	je	short en79		; then end the $endloop
 33837                                  
 33838                                  	; 14/12/2022
 33839                                  	; ds = cs
 33840                                  
 33841                                  	;;mov	ax,[cs:rv_dword]
 33842                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33843                                  	;mov	ax,[rv_dword]
 33844 00002767 A1[931D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33845                                  
 33846 0000276A 83F901                  	cmp	cx,1
 33847 0000276D 7505                    	jne	short if83
 33848                                  
 33849                                  	; 14/12/2022
 33850                                  	;mov	[cs:p_stack_count],ax
 33851                                  	;jmp	short en83
 33852 0000276F A3[971E]                	mov	[p_stack_count],ax
 33853 00002772 EBDE                    	jmp	short do79
 33854                                  if83:
 33855                                  	; 14/12/2022
 33856                                  	;mov	[cs:p_stack_size],ax
 33857 00002774 A3[991E]                	mov	[p_stack_size],ax
 33858                                  en83:
 33859 00002777 EBD9                    	jmp	short do79
 33860                                  en79:
 33861                                  	; 14/12/2022
 33862                                  	; ds = cs
 33863 00002779 A1[971E]                	mov	ax,[p_stack_count]
 33864 0000277C 09C0                    	or	ax,ax
 33865 0000277E 741E                    	jz	short if87		
 33866                                  
 33867                                  	; 14/12/2022
 33868                                  	;cmp	word [p_stack_count],0
 33869                                  	;;cmp	word [cs:p_stack_count],0
 33870                                  	;je	short if87
 33871                                  
 33872                                  	; 14/12/2022
 33873 00002780 83F808                  	cmp	ax, mincount ; 8
 33874                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 33875                                  	; 15/12/2022
 33876 00002783 721F                    	jb	short en87
 33877 00002785 833E[991E]20            	cmp	word [p_stack_size],minsize ; 32
 33878                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 33879                                  	; 15/12/2022
 33880 0000278A 7218                    	jb	short en87
 33881                                  if94:
 33882                                  	; 14/12/2022
 33883                                  	; ds = cs
 33884                                  	; ax = [p_stack_count]
 33885                                  	;mov	ax,[p_stack_count]
 33886                                  	;;mov	ax,[cs:p_stack_count]
 33887 0000278C A3[8A02]                	mov	[stack_count],ax
 33888                                  	;mov	[cs:stack_count],ax
 33889                                  	;mov	ax,[cs:p_stack_size]
 33890 0000278F A1[991E]                	mov	ax,[p_stack_size]
 33891                                  	;mov	[cs:stack_size],ax
 33892 00002792 A3[8C02]                	mov	[stack_size],ax
 33893                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33894 00002795 C706[8E02]FFFF          	mov	word [stack_addr],-1
 33895                                  sr79:
 33896 0000279B E942F9                  	jmp	coff
 33897                                  
 33898                                  if87:
 33899                                  	; 14/12/2022
 33900 0000279E 3906[991E]              	cmp	[p_stack_size],ax ; 0
 33901 000027A2 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 33902                                  	;cmp	word [cs:p_stack_size],0
 33903                                  	;je	short if94
 33904                                  en87:
 33905                                  	; 15/12/2022
 33906                                  	; ([p_stack_count] is invalid, use default values)
 33907                                  	; 14/12/2022
 33908                                  	; ds = cs
 33909 000027A4 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 33910 000027AA C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 33911 000027B0 C706[8E02]0000          	mov	word [stack_addr],0
 33912                                  	;mov	word [cs:stack_count],defaultcount ; 9
 33913                                  	;				; reset to default value.
 33914                                  	;mov	word [cs:stack_size],defaultsize ; 128
 33915                                  	;mov	word [cs:stack_addr],0
 33916                                  
 33917 000027B6 BA[174B]                	mov	dx,badstack
 33918 000027B9 E8371C                  	call	print
 33919 000027BC E8FC00                  	call	error_line
 33920 000027BF EBDA                    	jmp	short sr79
 33921                                  
 33922                                  ; 15/12/2022
 33923                                  %if 0
 33924                                  	mov	di,stks_parms
 33925                                  	xor	cx,cx
 33926                                  	; 03/01/2023
 33927                                  	;mov	dx,cx
 33928                                  do79:
 33929                                  	call	sysinit_parse
 33930                                  	jnc	short if79		; parse error
 33931                                  
 33932                                  	mov	dx,badstack		; "invalid stack parameter"
 33933                                  	call	print			;  and show messages and end the search loop.
 33934                                  	call	error_line
 33935                                  	;jmp	sr79
 33936                                  	; 11/12/2022
 33937                                  	jmp	short sr79
 33938                                  if79:
 33939                                  	cmp	ax,_$P_RC_EOL		; end of line?
 33940                                  	je	short en79		; then end the $endloop
 33941                                  
 33942                                  	;mov	ax,[cs:rv_dword]
 33943                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33944                                  	cmp	cx,1
 33945                                  	jne	short if83
 33946                                  
 33947                                  	mov	[cs:p_stack_count],ax
 33948                                  	jmp	short en83
 33949                                  if83:
 33950                                  	mov	[cs:p_stack_size],ax
 33951                                  en83:
 33952                                  	jmp	short do79
 33953                                  en79:
 33954                                  	cmp	word [cs:p_stack_count],0
 33955                                  	je	short if87
 33956                                  
 33957                                  	cmp	word [cs:p_stack_count],mincount ; 8
 33958                                  	jb	short ll88
 33959                                  	cmp	word [cs:p_stack_size],minsize ; 32
 33960                                  	jnb	short if88
 33961                                  ll88:
 33962                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33963                                  if88:
 33964                                  	jmp	short en87
 33965                                  
 33966                                  	; 11/12/2022
 33967                                  if94:
 33968                                  	mov	ax,[cs:p_stack_count]
 33969                                  	mov	[cs:stack_count],ax
 33970                                  	mov	ax,[cs:p_stack_size]
 33971                                  	mov	[cs:stack_size],ax
 33972                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33973                                  sr79:
 33974                                  	jmp	coff
 33975                                  
 33976                                  if87:
 33977                                  	cmp	word [cs:p_stack_size],0
 33978                                  	je	short en87
 33979                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33980                                  en87:
 33981                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 33982                                  	jne	short if94
 33983                                  
 33984                                  	mov	word [cs:stack_count],defaultcount ; 9
 33985                                  					; reset to default value.
 33986                                  	mov	word [cs:stack_size],defaultsize ; 128
 33987                                  	mov	word [cs:stack_addr],0
 33988                                  
 33989                                  	mov	dx,badstack
 33990                                  	call	print
 33991                                  	call	error_line
 33992                                  	jmp	short sr79
 33993                                  
 33994                                  %endif
 33995                                  
 33996                                  ; 11/12/2022
 33997                                  %if 0 
 33998                                  if94:
 33999                                  	mov	ax,[cs:p_stack_count]
 34000                                  	mov	[cs:stack_count],ax
 34001                                  	mov	ax,[cs:p_stack_size]
 34002                                  	mov	[cs:stack_size],ax
 34003                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34004                                  sr79:
 34005                                  	jmp	coff
 34006                                  %endif
 34007                                  	;endif
 34008                                  
 34009                                  ;------------------------------------------------------------------------
 34010                                  ; shell command
 34011                                  ;------------------------------------------------------------------------
 34012                                  
 34013                                  trys:
 34014 000027C1 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 34015                                  	;jne	short tryx
 34016                                  	; 24/03/2025 - MiniDOS 1.0
 34017 000027C4 755A                     	jne	short tryv
 34018                                  
 34019                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34020                                  ; (SYSINIT:2BE1h)
 34021                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34022                                  ;%if 0
 34023                                  ;ifdef	MULTI_CONFIG
 34024 000027C6 E8F217                  	call	query_user              ; query the user if config_cmd
 34025                                  	;jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 34026                                  	; 24/03/2025 - MiniDOS 1.0
 34027 000027C9 7555                     	jne	short tryv
 34028                                  
 34029                                  	; 14/04/2024
 34030                                  	; ds = cs
 34031                                  	;mov	byte [cs:newcmd],1
 34032 000027CB C606[C944]01            	mov	byte [newcmd],1
 34033                                  ;endif
 34034                                  ;%endif ; 30/10/2022
 34035                                  
 34036                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 34037                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34038                                  	;mov	byte [cs:command_line+1],0
 34039                                  	; 15/12/2022
 34040                                  	; ds = cs
 34041                                  	; 08/09/2023
 34042                                  	;mov	byte [command_line+1],0
 34043 000027D0 C706[5A45]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 34044                                  
 34045 000027D6 BF[CD44]                        mov     di,commnd+1		; we already have the first char
 34046 000027D9 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 34047                                  storeshell:
 34048 000027DC E86F19                  	call	getchr
 34049 000027DF 08C0                            or      al,al                   ; this is the normal case: "organize"
 34050 000027E1 741C                            jz	short getshparms	; put a ZERO right after the filename
 34051                                  
 34052 000027E3 3C20                            cmp     al," "                  ; this may happen if there are no args
 34053 000027E5 7209                            jb	short endofshell	; I suppose...
 34054 000027E7 8805                    	mov	[di],al
 34055 000027E9 47                      	inc	di
 34056                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 34057                                          ;jb	short storeshell	; commnd (the filename)
 34058                                          ;jmp	short endofshell
 34059                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34060                                  	;jmp	short storeshell
 34061                                  	; 03/01/2023
 34062 000027EA 81FF[0B45]              	cmp	di,commnd+63		; this makes sure we don't overflow
 34063 000027EE 72EC                            jb	short storeshell	; commnd (the filename)
 34064                                  	;jmp	short endofshell
 34065                                  
 34066                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34067                                  ;getshparms:
 34068                                  ;	mov     byte [di],0		; zero-terminate the filename
 34069                                  ;	mov     di,command_line+1	; prepare to process the command-line
 34070                                  ;
 34071                                  ;parmloop:
 34072                                  ;	call	getchr
 34073                                  ;	cmp	al," "
 34074                                  ;	jb	short endofparms
 34075                                  ;	mov	[di],al
 34076                                  ;	inc	di
 34077                                  ;	cmp     di,command_line+126
 34078                                  ;	jb	short parmloop
 34079                                  ;endofparms:
 34080                                  ;	mov     cx,di
 34081                                  ;	sub     cx,command_line+1
 34082                                  ;	mov     [cs:command_line],cl
 34083                                  ;
 34084                                  ;endofshell:
 34085                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 34086                                  ;					; the command-line as the case may be)
 34087                                  ;skipline:
 34088                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34089                                  ;       je	short endofline		; the line: watch for ever-present LF
 34090                                  ;call	getchr
 34091                                  ;       jnc	short skipline		; keep it up as long as there are chars
 34092                                  ;
 34093                                  ;endofline:
 34094                                  ;       jmp     conflp
 34095                                  
 34096                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34097                                  endofshell:
 34098 000027F0 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 34099                                  					; the command-line as the case may be)
 34100                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34101                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34102                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 34103                                  	;call	getchr
 34104                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34105 000027F3 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34106 000027F5 7405                    	je	short endofline		; the line: watch for ever-present LF
 34107 000027F7 E85419                  	call	getchr
 34108                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 34109                                  	; (SYSINIT:2C3Ah)
 34110 000027FA 73F7                    	jnb	short skipline
 34111                                  	
 34112                                  endofline:
 34113 000027FC E98AF8                  	jmp     conflp
 34114                                  
 34115                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34116                                  getshparms:
 34117                                  	; 18/12/2022
 34118                                  	; al = 0
 34119 000027FF 8805                    	mov	[di],al ; 0
 34120                                  	;mov	byte [di],0		; zero-terminate the filename
 34121 00002801 BF[5B45]                	mov     di,command_line+1	; prepare to process the command-line
 34122                                  parmloop:
 34123 00002804 E84719                  	call	getchr
 34124 00002807 3C20                    	cmp	al," " ; 20h
 34125                                  	;jb	short endofshell
 34126                                  	; 03/01/2023
 34127 00002809 7209                    	jb	short endofparms
 34128                                  
 34129 0000280B 8805                    	mov	[di],al
 34130 0000280D 47                      	inc	di
 34131                                  	;jmp	short parmloop
 34132                                  	; 03/01/2023 - Retro DOS v4.2
 34133 0000280E 81FF[D845]              	cmp     di,command_line+126
 34134 00002812 72F0                    	jb	short parmloop
 34135                                  
 34136                                  	; 03/01/2023 - Retro DOS v4.2
 34137                                  endofparms:
 34138 00002814 89F9                    	mov	cx,di
 34139 00002816 81E9[5B45]              	sub	cx,command_line+1
 34140                                  	;mov	[cs:command_line],cl
 34141                                  	; 03/01/2023
 34142 0000281A 880E[5A45]              	mov	[command_line],cl
 34143 0000281E EBD0                    	jmp	short endofshell
 34144                                  
 34145                                  
 34146                                  ; 24/03/2025 - MiniDOS v1.0
 34147                                  %if 0
 34148                                  
 34149                                  ;------------------------------------------------------------------------
 34150                                  ; fcbs command
 34151                                  ;------------------------------------------------------------------------
 34152                                  
 34153                                  ;************************************************************************
 34154                                  ; function: parse the parameters of fcbs= command.			*
 34155                                  ;									*
 34156                                  ; input :								*
 34157                                  ;	es:si -> parameters in command line.				*
 34158                                  ; output:								*
 34159                                  ;	set the variables fcbs,keep.					*
 34160                                  ;									*
 34161                                  ; subroutines to be called:						*
 34162                                  ;	sysinit_parse							*
 34163                                  ; logic:								*
 34164                                  ; {									*
 34165                                  ;	set di points to fcbs_parms;					*
 34166                                  ;	set dx,cx to 0; 						*
 34167                                  ;	while (end of command line)					*
 34168                                  ;	{ sysparse;							*
 34169                                  ;	  if (no error) then						*
 34170                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 34171                                  ;		   fcbs = result_val._$P_picked_val;			*
 34172                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 34173                                  ;		   keep = result_val._$P_picked_val;			*
 34174                                  ;	     }								*
 34175                                  ;	  else	/*error exit*/						*
 34176                                  ;	     error exit;						*
 34177                                  ;	};								*
 34178                                  ; };									*
 34179                                  ;************************************************************************
 34180                                  
 34181                                  tryx:
 34182                                          cmp     ah,CONFIG_FCBS  ; 'X'
 34183                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34184                                  	jne	short try1
 34185                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34186                                  	;jne	short tryy	; comment command
 34187                                  
 34188                                  ; 31/12/2022 - Retro DOS v4.2
 34189                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34190                                  ;%if 0
 34191                                  ;ifdef	MULTI_CONFIG
 34192                                  	call	query_user      ; query the user if config_cmd
 34193                                  	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 34194                                  ;endif
 34195                                  ;%endif ; 30/10/2022
 34196                                  
 34197                                  	mov	di,fcbs_parms
 34198                                  	xor	cx,cx
 34199                                  	; 03/01/2023
 34200                                  	;mov	dx,cx
 34201                                  do98:
 34202                                  	call	sysinit_parse
 34203                                          ; 03/01/2023
 34204                                  	;jnc	short if98	; parse error
 34205                                          ;call	badparm_p	;  and show messages and end the search loop.
 34206                                  	;jmp	short sr98
 34207                                  	;------------------------
 34208                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34209                                  	jc	short badparm_p_coff
 34210                                  if98:
 34211                                  	cmp	ax,_$P_RC_EOL	; end of line?
 34212                                  	je	short en98	; then end the $endloop
 34213                                  
 34214                                  	;;mov	al,[cs:rv_dword]
 34215                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34216                                  	; 15/12/2022
 34217                                  	; ds = cs
 34218                                  	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34219                                  	cmp	cx,1		; the first positional?
 34220                                  	jne	short if102
 34221                                  	;mov	[cs:p_fcbs],al
 34222                                  	; 15/12/2022
 34223                                  	mov	[p_fcbs],al
 34224                                  	;jmp	short en102
 34225                                  	jmp	short do98
 34226                                  if102:
 34227                                  	;mov	[cs:p_keep],al
 34228                                  	; 15/12/2022
 34229                                  	mov	[p_keep],al
 34230                                  en102:
 34231                                  	jmp	short do98
 34232                                  en98:
 34233                                  	; 15/12/2022
 34234                                  	; ds = cs
 34235                                  	mov	al,[p_fcbs]
 34236                                  	mov	[FCBS],al
 34237                                  	mov	byte [KEEP],0
 34238                                  	;mov	al,[cs:p_fcbs]	 ; M017
 34239                                  	;mov	[cs:FCBS],al	 ; M017
 34240                                  	;mov	byte [cs:KEEP],0 ; M017
 34241                                  sr98:
 34242                                  	jmp	coff
 34243                                  
 34244                                  %endif
 34245                                  
 34246                                  ; 31/12/2022 - Retro DOS v4.2
 34247                                  %if 0
 34248                                  
 34249                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34250                                  ;-------------------------------------------------------------------------
 34251                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34252                                  ;		line number
 34253                                  ;-------------------------------------------------------------------------
 34254                                  
 34255                                  tryy:
 34256                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34257                                  	jne	short try0
 34258                                  
 34259                                  donothing:
 34260                                  	; 15/12/2022
 34261                                  	; ds = cs
 34262                                  	dec	word [chrptr]
 34263                                  	inc	word [count]
 34264                                  	; 02/11/2022
 34265                                  	;dec	word [cs:chrptr]
 34266                                  	;inc	word [cs:count]
 34267                                  
 34268                                  	jmp	coff
 34269                                  
 34270                                  ;------------------------------------------------------------------------
 34271                                  ; rem command
 34272                                  ;------------------------------------------------------------------------
 34273                                  
 34274                                  try0:				; do nothing with this line.
 34275                                  	cmp     ah,CONFIG_REM ; '0'
 34276                                  	je	short donothing
 34277                                  
 34278                                  %endif
 34279                                  
 34280                                  ; 18/03/2025 - MiniDOS 1.0
 34281                                  %if 0
 34282                                  
 34283                                  ; 07/04/2019 - Retro DOS v4.0
 34284                                  
 34285                                  ;-----------------------------------------------------------------------
 34286                                  ; switches command
 34287                                  ;-----------------------------------------------------------------------
 34288                                  
 34289                                  ;***********************************************************************
 34290                                  ;								       *
 34291                                  ; function: parse the option switches specified.		       *
 34292                                  ; note - this command is intended for the future use also.	       *
 34293                                  ; when we need to set system data flag,use this command.	       *
 34294                                  ;								       *
 34295                                  ; input :							       *
 34296                                  ;	es:si -> parameters in command line.			       *
 34297                                  ; output:							       *
 34298                                  ;	p_swit_k set if /k option chosen.			       *
 34299                                  ;								       *
 34300                                  ; subroutines to be called:					       *
 34301                                  ;	sysinit_parse						       *
 34302                                  ; logic:							       *
 34303                                  ; {								       *
 34304                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 34305                                  ;	set dx,cx to 0; 					       *
 34306                                  ;	while (end of command line)				       *
 34307                                  ;	{ sysinit_parse;					       *
 34308                                  ;	  if (no error) then					       *
 34309                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 34310                                  ;		    p_swit_k = 1				       *
 34311                                  ;	       endif						       *
 34312                                  ;	  else {show error message;error exit}			       *
 34313                                  ;	};							       *
 34314                                  ; };								       *
 34315                                  ;								       *
 34316                                  ;***********************************************************************
 34317                                  
 34318                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 34319                                  
 34320                                  try1:
 34321                                          cmp     ah,CONFIG_SWITCHES ; '1'
 34322                                  	je	short do_try1	; switches= command entered?
 34323                                  skip_it5:
 34324                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34325                                  	; (SYSINIT:2C8Ah)
 34326                                  	jmp	tryv
 34327                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34328                                  	;jmp	tryz
 34329                                  
 34330                                  do_try1:
 34331                                  
 34332                                  ; 31/12/2022 - Retro DOS v4.2
 34333                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34334                                  ;%if 0
 34335                                  ;ifdef	MULTI_CONFIG
 34336                                  	call	query_user      ; query the user if config_cmd
 34337                                  	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 34338                                  ;endif
 34339                                  ;%endif ; 30/10/2022
 34340                                  
 34341                                  	mov	di,swit_parms
 34342                                  	xor	cx,cx
 34343                                  	; 03/01/2023
 34344                                  	;mov	dx,cx
 34345                                  do110:
 34346                                  	call	sysinit_parse
 34347                                  	jnc	short if110	; parse error
 34348                                  	;call	badparm_p	;  and show messages and end the search loop.
 34349                                  	;jmp	short sr110
 34350                                  	; -----------------------
 34351                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34352                                  badparm_p_coff:
 34353                                  	call	badparm_p
 34354                                  	jmp	coff
 34355                                  	;------------------------
 34356                                  if110:
 34357                                  	cmp	ax,_$P_RC_EOL	; end of line?
 34358                                  	je	short en110	; then jmp to $endloop for semantic check
 34359                                  
 34360                                  	; 15/12/2022
 34361                                  	; ds = cs
 34362                                  	;;cmp	word [cs:result_val_swoff],swit_k
 34363                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34364                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34365                                  	jne	short if115	;				;M059
 34366                                  	; 15/12/2022
 34367                                  	mov	byte [p_swit_k],1
 34368                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 34369                                  	jmp	short do110
 34370                                  if115:	
 34371                                  	; 15/12/2022							;M059
 34372                                  	;;cmp	word [cs:result_val_swoff],swit_t
 34373                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 34374                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 34375                                  	;jne	short if116					;M059 M063
 34376                                  	; 14/04/2024
 34377                                  	;;;
 34378                                  	jne	short if118  ; (PCDOS 7.1 IBMBIO.COM)
 34379                                  	;;; 
 34380                                  	; 15/12/2022
 34381                                  	mov	byte [p_swit_t],1
 34382                                  	;mov	byte [cs:p_swit_t],1				;M059
 34383                                  	jmp	short do110					;M059
 34384                                  
 34385                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34386                                  	;;;
 34387                                  if118:
 34388                                  	;;cmp	word [cs:result_val_swoff],swit_i ; offset "/I"
 34389                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34390                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34391                                  	jne	short if116
 34392                                  	;mov	byte [cs:p_swit_i],1	; set the flag
 34393                                  	mov	byte [p_swit_i],1
 34394                                  	jmp     short do110
 34395                                  	;;;
 34396                                  if116:
 34397                                  	; 15/12/2022
 34398                                  	;;cmp	word [cs:result_val_swoff],swit_w
 34399                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 34400                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 34401                                  	jne	short do110					;M063
 34402                                  	; 15/12/2022
 34403                                  	mov	byte [p_swit_w],1
 34404                                  	;mov	byte [cs:p_swit_w],1				;M063
 34405                                  	jmp	short do110					;M063
 34406                                  en110:
 34407                                  	; 15/12/2022
 34408                                  	; ds = cs
 34409                                  	cmp	byte [p_swit_k],1
 34410                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 34411                                  	push	ds
 34412                                  	;;mov	ax,Bios_Data
 34413                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 34414                                  	; 21/10/2022
 34415                                  	mov	ax,DOSBIODATASEG ; 0070h
 34416                                  	mov	ds,ax
 34417                                  	jne	short if117
 34418                                  	; 14/04/2024
 34419                                  	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 34420                                  				; BIOSDATA:047Eh for PCDOS 7.1 IBMBIO.COM
 34421                                  	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 34422                                  				; BIOSDATA:047Fh for PCDOS 7.1 IBMBIO.COM
 34423                                  if117:
 34424                                  	; 15/12/2022
 34425                                  	; ds <> cs
 34426                                  	mov	al,[cs:p_swit_t]				;M059
 34427                                  	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 34428                                  		; 14/04/2024	; BIOSDATA:048Bh for PCDOS 7.1 IBMBIO.COM
 34429                                  	cmp	byte [cs:p_swit_w],0				;M063
 34430                                  	je	short skip_dos_flag				;M063
 34431                                  	push	es
 34432                                  	push	bx
 34433                                  	mov	ah,GET_IN_VARS ; 52h				;M063
 34434                                  	int	21h						;M063
 34435                                  			; DOS - 2+ internal - GET LIST OF LISTS
 34436                                  			; Return: ES:BX -> DOS list of lists
 34437                                  	;or	bytes [es:86h],2
 34438                                  	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 34439                                  	pop	bx
 34440                                  	pop	es
 34441                                  skip_dos_flag:							;M063
 34442                                  	pop	ds
 34443                                  sr110:
 34444                                  	jmp	coff
 34445                                  
 34446                                  ; 18/03/2025
 34447                                  %endif
 34448                                  
 34449                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34450                                  ; (SYSINIT:2D14h)
 34451                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34452                                  ;%if 0
 34453                                  
 34454                                  tryv:
 34455                                  
 34456                                  ;ifdef	MULTI_CONFIG
 34457                                  ;------------------------------------------------------------------------
 34458                                  ; set command (as in "set var=value<cr/lf>")
 34459                                  ;------------------------------------------------------------------------
 34460                                  
 34461 00002820 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 34462 00002823 7510                    	jne	short tryn
 34463 00002825 E89317                  	call	query_user      ; query the user if config_cmd
 34464 00002828 720B                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 34465 0000282A E88A13                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 34466                                  chk_err: ; 24/03/2025	
 34467 0000282D 7303                    	jnc	short sr110	; no error
 34468                                  err:    
 34469 0000282F E88900                  	call	error_line      ; whoops, display error in line XXX
 34470                                  	;jmp	short sr110     ; jump to coff (to skip to next line)
 34471                                  	; 24/03/2025 - MiniDOS 1.0
 34472                                  sr110:
 34473 00002832 E9ABF8                  	jmp	coff
 34474                                  
 34475                                  ;------------------------------------------------------------------------
 34476                                  ; numlock command (as in "numlock=on|off")
 34477                                  ;------------------------------------------------------------------------
 34478                                  tryn:
 34479 00002835 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 34480                                  	; 18/03/2025 - MiniDOS 1.0
 34481 00002838 750A                    	jne	short tryy
 34482                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34483                                  	;jne	short tryt
 34484                                  
 34485 0000283A E87E17                  	call	query_user      ; query the user if config_cmd
 34486 0000283D 7205                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 34487 0000283F E83A10                  	call	set_numlock
 34488                                  	; 24/03/2025 - MiniDOS 1.0
 34489                                  	;jc	short err
 34490                                  	;jmp	short sr110	; all done
 34491 00002842 EBE9                    	jmp	short chk_err
 34492                                  	
 34493                                  
 34494                                  ;endif	;MULTI_CONFIG
 34495                                  
 34496                                  ; 18/03/2025
 34497                                  %if 0
 34498                                  
 34499                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34500                                  ;------------------------------------------------------------------------
 34501                                  ; dosdata command
 34502                                  ;------------------------------------------------------------------------
 34503                                  tryt:
 34504                                  	;cmp	ah,54h ; 'T'
 34505                                  	cmp	ah,CONFIG_DOSDATA ; 'T' ; PCDOS 7 new config cmd
 34506                                  	jne	short tryy
 34507                                  
 34508                                  	call	query_user
 34509                                  	jc	short tryy
 34510                                  
 34511                                  	mov	di,dosdata_parms
 34512                                  	xor	cx,cx
 34513                                  	; 14/04/2024 - Retro DOS v5.0
 34514                                  	;mov	dx,cx ; 0
 34515                                  do120:
 34516                                  	call	sysinit_parse
 34517                                  	jnc	short if120
 34518                                  
 34519                                  	;call	badparm_p
 34520                                  	;jmp	short en120
 34521                                  	; 14/04/2024 - Retro DOS v5.0
 34522                                  	jmp	badparm_p_coff
 34523                                  if120:
 34524                                  	;cmp	ax,0FFFFh
 34525                                  	cmp	ax,_$P_RC_EOL ; -1 ; end of line?
 34526                                  	jz	short en120
 34527                                  	cmp	byte [result_val_itag],1 ; tag 1 (UMB)
 34528                                  				; [result_val+_$P_Result_Blk.Item_Tag]
 34529                                   	jnz	short if121
 34530                                  	mov	byte [dosdata_umb],1 ; DOSDATA=UMB (1) NOUMB (0)
 34531                                  	;jmp	short sr120
 34532                                  	; 14/04/2024
 34533                                  	jmp	short do120
 34534                                  if121:
 34535                                  	mov	byte [dosdata_umb],0 ; DOSDATA=UMB (1) NOUMB (0)
 34536                                  sr120:
 34537                                  	jmp	short do120
 34538                                  	; 14/04/2024
 34539                                  ;en120:
 34540                                  	;jmp	coff
 34541                                  
 34542                                  %endif
 34543                                  
 34544                                  
 34545                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34546                                  ;-------------------------------------------------------------------------
 34547                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34548                                  ;		line number
 34549                                  ;-------------------------------------------------------------------------
 34550                                  
 34551                                  	; 31/12/2022
 34552                                  tryy:
 34553 00002844 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34554 00002847 750B                    	jne	short try0
 34555                                  
 34556                                  donothing:
 34557                                  	; 15/12/2022
 34558                                  	; ds = cs
 34559 00002849 FF0E[5803]              	dec	word [chrptr]
 34560 0000284D FF06[5403]              	inc	word [count]
 34561                                  	; 02/11/2022
 34562                                  	;dec	word [cs:chrptr]
 34563                                  	;inc	word [cs:count]
 34564                                  en120:		; 14/04/2024
 34565 00002851 E98CF8                  	jmp	coff
 34566                                  
 34567                                  ;------------------------------------------------------------------------
 34568                                  ; rem command
 34569                                  ;------------------------------------------------------------------------
 34570                                  
 34571                                  try0:				; do nothing with this line.
 34572 00002854 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 34573 00002857 74F0                    	je	short donothing
 34574                                  
 34575                                  ;%endif	; 30/10/2022
 34576                                  
 34577                                  ; 30/10/2022
 34578                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 34579                                  
 34580                                  ;------------------------------------------------------------------------
 34581                                  ; bogus command
 34582                                  ;------------------------------------------------------------------------
 34583                                  
 34584                                  tryz:
 34585 00002859 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 34586                                  	; 31/12/2022
 34587 0000285C 74EB                    	je	short donothing
 34588                                  	; 02/11/2022
 34589                                  	;je	short tryz_donothing
 34590                                  
 34591 0000285E FF0E[5803]              	dec	word [chrptr]
 34592 00002862 FF06[5403]              	inc	word [count]
 34593 00002866 EB1F                    	jmp	short badop
 34594                                  
 34595                                  ; 31/12/2022
 34596                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34597                                  ;tryz_donothing:
 34598                                  ;	jmp	donothing
 34599                                  
 34600                                  ;------------------------------------------------------------------------------
 34601                                  
 34602                                  sysinit_parse:
 34603                                  
 34604                                  ;------------------------------------------------------------------------------
 34605                                  ;set up registers for sysparse
 34606                                  ;in)	es:si -> command line in confbot
 34607                                  ;	di -> offset of the parse control definition.
 34608                                  ;
 34609                                  ;out)	calls sysparse.
 34610                                  ;	carry will set if parse error.
 34611                                  ;	*** the caller should check the eol condition by looking at ax
 34612                                  ;	*** after each call.
 34613                                  ;	*** if no parameters are found,then ax will contain a error code.
 34614                                  ;	*** if the caller needs to look at the synomym@ of the result,
 34615                                  ;	***  the caller should use cs:@ instead of es:@.
 34616                                  ;	cx register should be set to 0 at the first time the caller calls this
 34617                                  ;	 procedure.
 34618                                  ;	ax - exit code
 34619                                  ;	bl - terminated delimeter code
 34620                                  ;	cx - new positional ordinal
 34621                                  ;	si - set to pase scanned operand
 34622                                  ;	dx - selected result buffer
 34623                                  ;------------------------------------------------------------------------------
 34624                                  
 34625                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34626                                  	; (SYSINIT:2D78h)
 34627                                  
 34628                                  	; 14/04/2024 - Retro DOS v5.0
 34629                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:32F3h)
 34630                                  
 34631                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34632                                  	; ds = cs
 34633 00002868 8C06[E514]              	mov	[badparm_seg],es	;save the pointer to the parm
 34634 0000286C 8936[E314]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 34635                                  
 34636                                  	; 24/10/2022
 34637 00002870 06                      	push	es			;save es,ds
 34638 00002871 1E                      	push	ds
 34639                                  
 34640 00002872 06                      	push	es
 34641 00002873 1F                      	pop	ds			;now ds:si -> command line
 34642                                  
 34643 00002874 0E                      	push	cs
 34644 00002875 07                      	pop	es			;now es:di -> control definition
 34645                                  
 34646                                  	; 09/09/2023
 34647                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 34648                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 34649                                  	
 34650                                  	;mov	dx,0
 34651                                  	; 04/01/2023
 34652 00002876 29D2                    	sub	dx,dx ; 0
 34653 00002878 E812ED                  	call	SysParse
 34654                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 34655                                  	; 06/09/2023
 34656 0000287B 21C0                    	and	ax,ax
 34657                                  
 34658                                  ;**cas note: when zero true after cmp, carry clear
 34659                                  
 34660                                  	;je	short ll4
 34661                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 34662                                  	; 12/12/2022
 34663 0000287D 7405                    	je	short en4 ; cf=0
 34664 0000287F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 34665                                  	;jne	short if4
 34666                                  	; 12/12/2022
 34667 00002882 7400                    	je	short en4 ; cf=0
 34668                                  	; 06/09/2023
 34669                                  	; cf=1
 34670                                  
 34671                                  ; 12/12/2022
 34672                                  ;ll4:
 34673                                  ;	; 12/12/2022
 34674                                  ;	; cf=0
 34675                                  ;	;clc
 34676                                  ;	jmp	short en4
 34677                                  
 34678                                  if4:
 34679                                  	; 24/10/2022
 34680                                  	; 06/09/2023 (cf=1)
 34681                                  	;stc
 34682                                  en4:
 34683 00002884 1F                      	pop	ds
 34684 00002885 07                      	pop	es
 34685 00002886 C3                      	retn
 34686                                  
 34687                                  ; 11/12/2022
 34688                                  %if 0
 34689                                  
 34690                                  ;----------------------------------------------------------------------------
 34691                                  ;
 34692                                  ; procedure : badop_p
 34693                                  ;
 34694                                  ;             same thing as badop,but will make sure to set ds register back
 34695                                  ;             to sysinitseg and return back to the caller.
 34696                                  ;
 34697                                  ;----------------------------------------------------------------------------
 34698                                  
 34699                                  badop_p:
 34700                                  	push	cs
 34701                                  	pop	ds		;set ds to configsys seg.
 34702                                  	mov	dx,badopm
 34703                                  	call	print
 34704                                          ;call	error_line
 34705                                  	;retn
 34706                                  	; 11/12/2022
 34707                                  	jmp	error_line
 34708                                  
 34709                                  %endif
 34710                                  
 34711                                  ;----------------------------------------------------------------------------
 34712                                  ;
 34713                                  ; label : badop
 34714                                  ;
 34715                                  ;----------------------------------------------------------------------------
 34716                                  
 34717                                  badop:	
 34718 00002887 BA[D849]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 34719 0000288A E8661B                  	call	print
 34720 0000288D E82B00                  	call	error_line	;show "error in config.sys ..." .
 34721 00002890 E94DF8                  	jmp	coff
 34722                                  
 34723                                  ;----------------------------------------------------------------------------
 34724                                  ;
 34725                                  ; procedure : badparm_p
 34726                                  ;
 34727                                  ;             show "bad command or parameters - xxxxxx"
 34728                                  ;             in badparm_seg,badparm_off -> xxxxx
 34729                                  ;
 34730                                  ;----------------------------------------------------------------------------
 34731                                  
 34732                                  	; 24/10/2022
 34733                                  badparm_p:
 34734                                  	; 11/12/2022
 34735                                  	; ds = cs
 34736                                  	; 11/12/2022
 34737                                  	;push	ds ; *
 34738 00002893 52                      	push	dx
 34739 00002894 56                      	push	si
 34740                                  
 34741                                  	; 11/12/2022
 34742                                  	; ds = cs
 34743                                  	;push	cs
 34744                                  	;pop	ds
 34745                                  
 34746 00002895 BA[FF49]                	mov	dx,badparm
 34747 00002898 E8581B                  	call	print			; "bad command or parameters - "
 34748 0000289B C536[E314]              	lds	si,[badparm_ptr]
 34749                                  
 34750                                  ;	print "xxxx" until cr.
 34751                                  
 34752                                  do1:
 34753 0000289F 8A14                    	mov	dl,[si]			; get next character
 34754 000028A1 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 34755 000028A4 7407                    	je	short en1		; exit loop if so
 34756                                  
 34757 000028A6 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 34758 000028A8 CD21                    	int	21h			; display character
 34759 000028AA 46                      	inc	si			; next character
 34760 000028AB EBF2                    	jmp	short do1
 34761                                  en1:
 34762 000028AD 0E                      	push	cs
 34763 000028AE 1F                      	pop	ds
 34764                                  
 34765 000028AF BA[FC49]                	mov	dx,crlfm
 34766 000028B2 E83E1B                  	call	print
 34767 000028B5 E80300                  	call	error_line
 34768                                  
 34769 000028B8 5E                      	pop	si
 34770 000028B9 5A                      	pop	dx
 34771                                  	; 11/12/2022
 34772                                  	;pop	ds ; *
 34773                                  badparmp_ret:
 34774 000028BA C3                      	retn
 34775                                  
 34776                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34777                                  %if 0
 34778                                  
 34779                                  ;----------------------------------------------------------------------------
 34780                                  ;
 34781                                  ; procedure : getchr
 34782                                  ;
 34783                                  ;----------------------------------------------------------------------------
 34784                                  
 34785                                  	; 24/10/2022
 34786                                  getchr:
 34787                                  	; 12/12/2022
 34788                                  	;push	cx
 34789                                  	;mov	cx,[count]
 34790                                  	;jcxz	nochar
 34791                                  	; 12/12/2022
 34792                                  	cmp	word [count],1 
 34793                                  	jb	short nochar ; cf=1 ([count] = 0)
 34794                                  	
 34795                                  	mov	si,[chrptr]
 34796                                  	mov	al,[es:si]
 34797                                  	dec	word [count]
 34798                                  	inc	word [chrptr]
 34799                                  	; 12/12/202
 34800                                  	; cf=0
 34801                                  	;clc
 34802                                  ;get_ret:
 34803                                  	;pop	cx
 34804                                  	;retn
 34805                                  nochar: 
 34806                                  	; 12/12/2022
 34807                                  	; cf=1
 34808                                  	;stc
 34809                                  	;jmp	short get_ret
 34810                                  	
 34811                                  	retn
 34812                                  %endif
 34813                                  
 34814                                  ; 11/12/2022
 34815                                  %if 0
 34816                                  
 34817                                  ;----------------------------------------------------------------------------
 34818                                  ;
 34819                                  ; procedure : incorrect_order
 34820                                  ;
 34821                                  ;             show "incorrect order in config.sys ..." message.
 34822                                  ;
 34823                                  ;----------------------------------------------------------------------------
 34824                                  
 34825                                  incorrect_order:
 34826                                  	mov	dx,badorder
 34827                                  	call	print
 34828                                  	call	showlinenum
 34829                                  	retn
 34830                                  
 34831                                  %endif
 34832                                  
 34833                                  ;----------------------------------------------------------------------------
 34834                                  ;
 34835                                  ; procedure : error_line
 34836                                  ;
 34837                                  ;             show "error in config.sys ..." message.
 34838                                  ;
 34839                                  ;----------------------------------------------------------------------------
 34840                                  
 34841                                  	; 11/12/2022
 34842                                  	; 24/10/2022
 34843                                  error_line:
 34844                                  	; 11/12/2022
 34845                                  	; ds = cs
 34846                                  	;push	cs
 34847                                  	;pop	ds
 34848                                  
 34849 000028BB BA[344B]                	mov	dx,errorcmd
 34850 000028BE E8321B                  	call	print
 34851                                  	;call	showlinenum
 34852                                  	;retn
 34853                                  	; 11/12/2022
 34854                                  	;jmp	short shortlinemum
 34855                                  
 34856                                  ;----------------------------------------------------------------------------
 34857                                  ;
 34858                                  ; procedure : showlinenum
 34859                                  ;
 34860                                  ; convert the binary linecount to decimal ascii string in showcount
 34861                                  ; and display showcount at the current curser position.
 34862                                  ; in.) linecount
 34863                                  ;
 34864                                  ; out) the number is printed.
 34865                                  ;
 34866                                  ;----------------------------------------------------------------------------
 34867                                  
 34868                                  	; 11/12/2022
 34869                                  	; ds = cs
 34870                                  	; 24/10/2022
 34871                                  showlinenum:
 34872 000028C1 06                      	push	es
 34873                                  	; 11/12/2022
 34874                                  	;push	ds
 34875 000028C2 57                      	push	di
 34876                                  
 34877 000028C3 0E                      	push	cs
 34878 000028C4 07                      	pop	es		; es=cs
 34879                                  
 34880                                  	; 11/12/2022
 34881                                  	;push	cs
 34882                                  	;pop	ds
 34883                                  
 34884 000028C5 BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 34885 000028C8 B90A00                  	mov	cx,10		; decimal divide factor
 34886                                  	;mov	ax,[cs:linecount]
 34887                                  	; 11/12/2022
 34888 000028CB A1[AD02]                	mov	ax,[linecount]
 34889                                  sln_loop:
 34890                                  	; 11/12/2022
 34891 000028CE 39C8                    	cmp	ax,cx ; < 10 ?
 34892                                  	;cmp	ax,10		; < 10?
 34893 000028D0 720C                    	jb	short sln_last
 34894                                  
 34895 000028D2 31D2                    	xor	dx,dx
 34896 000028D4 F7F1                    	div	cx	; cx = 10
 34897 000028D6 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 34898 000028D9 8815                    	mov	[di],dl
 34899 000028DB 4F                      	dec	di
 34900 000028DC EBF0                    	jmp	short sln_loop
 34901                                  
 34902                                  sln_last:
 34903 000028DE 0C30                    	or	al,30h	; "0"
 34904 000028E0 8805                    	mov	[di],al
 34905 000028E2 89FA                    	mov	dx,di
 34906 000028E4 E80C1B                  	call	print		; show it.
 34907 000028E7 5F                      	pop	di
 34908                                  	; 11/12/2022
 34909                                  	;pop	ds
 34910 000028E8 07                      	pop	es
 34911 000028E9 C3                      	retn
 34912                                  
 34913                                  ; 07/04/2019 - Retro DOS v4.0
 34914                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 34915                                  
 34916                                  ;----------------------------------------------------------------------------
 34917                                  ;
 34918                                  ; procedure : ProcDOS
 34919                                  ;
 34920                                  ;	Process the result of DOS= parsing
 34921                                  ;
 34922                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 34923                                  ;				= 2 for DOS=LOW
 34924                                  ;				= 3 for DOS=UMB
 34925                                  ;				= 4 for DOS=NOUMB
 34926                                  ;----------------------------------------------------------------------------
 34927                                  
 34928                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 34929                                  	; (SYTSINIT:2AB5h)
 34930                                  ProcDOS:
 34931                                  	; 01/01/2023
 34932                                  	; ds = cs
 34933 000028EA 30E4                    	xor	ah,ah
 34934                                  	;;mov	al,[cs:result_val_itag]
 34935                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 34936                                  	; 01/01/2023
 34937 000028EC A0[901D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 34938 000028EF 48                      	dec	ax
 34939 000028F0 7415                    	jz	short pd_hi
 34940 000028F2 48                      	dec	ax
 34941 000028F3 740E                    	jz	short pd_lo
 34942 000028F5 48                      	dec	ax
 34943 000028F6 7405                    	jz	short pd_umb
 34944                                  	;;mov	byte [cs:DevUMB],0
 34945                                  	; 18/12/2022
 34946                                  	;mov	byte [cs:DevUMB],ah ; 0
 34947                                  	; 01/01/2023
 34948 000028F8 8826[9C1F]              	mov	byte [DevUMB],ah ; 0
 34949 000028FC C3                      	retn
 34950                                  pd_umb:
 34951                                  	; 01/01/2023
 34952 000028FD C606[9C1F]FF            	mov	byte [DevUMB],0FFh
 34953                                  	;mov	byte [cs:DevUMB],0FFh
 34954 00002902 C3                      	retn
 34955                                  pd_lo:
 34956                                  	; 01/01/2023
 34957 00002903 A2[6C02]                	mov	[runhigh],al ; 0
 34958                                  	; 18/12/2022
 34959                                  	;mov	[cs:runhigh],al ; 0
 34960                                  	;;mov	byte [cs:runhigh],0
 34961 00002906 C3                      	retn
 34962                                  pd_hi:
 34963                                  	; 01/01/2023
 34964 00002907 C606[6C02]FF            	mov	byte [runhigh],0FFh
 34965                                  	;mov	byte [cs:runhigh],0FFh
 34966                                  limx:	; 11/12/2022
 34967 0000290C C3                      	retn
 34968                                  
 34969                                  ;----------------------------------------------------------------------------
 34970                                  ;
 34971                                  ; procedure : LieInt12Mem
 34972                                  ;
 34973                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 34974                                  ;		alloclim set to the limit of low memory.
 34975                                  ;
 34976                                  ;	Output : none
 34977                                  ;
 34978                                  ;	Changes the ROM BIOS variable which stores the total low memory
 34979                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 34980                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 34981                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 34982                                  ;	converted into Ks and stored in 40:13h
 34983                                  ;
 34984                                  ;----------------------------------------------------------------------------
 34985                                  
 34986                                  LieInt12Mem:
 34987                                  	; 11/12/2022
 34988                                  	; ds = cs
 34989 0000290D A1[A302]                	mov	ax,[ALLOCLIM]
 34990                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 34991                                  					; assuming that it is 3Com
 34992 00002910 E84200                  	call	IsIt3Com		; Is it 3Com driver?
 34993 00002913 740A                    	jz	short lim_set		; yes, lie to him differently
 34994                                  	; 13/05/2019
 34995                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 34996                                  	;je	short limx		; no, don't lie
 34997                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 34998                                  	; 11/12/2022
 34999                                  	; ds = cs
 35000 00002915 803E[AB1F]00            	cmp	byte [DeviceHi],0
 35001 0000291A 74F0                    	je	short limx
 35002 0000291C A1[911F]                	mov	ax,[DevLoadEnd]
 35003                                  lim_set:
 35004                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35005                                  	; 11/12/2022
 35006                                  	;call	SetInt12Mem
 35007                                  ;limx:
 35008                                  	;retn
 35009                                  	
 35010                                  	;jmp	short SetInt12Mem 
 35011                                  
 35012                                  ;----------------------------------------------------------------------------
 35013                                  ;
 35014                                  ; procedure : SetInt12Mem
 35015                                  ;
 35016                                  ;	Input : AX = Memory size to be set (in paras)
 35017                                  ;	Output : none
 35018                                  ;
 35019                                  ;	Sets the variable 40:13 to the memory size passed in AX
 35020                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 35021                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 35022                                  ;	restoring the value of 40:13
 35023                                  ;
 35024                                  ;----------------------------------------------------------------------------
 35025                                  
 35026                                  	; 01/11/2022
 35027                                  SetInt12Mem:
 35028 0000291F 1E                      	push	ds
 35029 00002920 BB4000                  	mov	bx,40h
 35030 00002923 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 35031 00002925 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 35032                                  	;mov	[cs:OldInt12Mem],bx	; save it
 35033 00002929 B106                    	mov	cl,6
 35034 0000292B D3E8                    	shr	ax,cl			; convert paras into Ks
 35035 0000292D A31300                  	mov	[13h],ax		; Lie
 35036                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 35037 00002930 1F                      	pop	ds
 35038                                  	; 14/04/2024
 35039                                  	; ds = cs
 35040 00002931 891E[AF1F]              	mov	[OldInt12Mem],bx
 35041 00002935 C606[AE1F]FF            	mov	byte [Int12Lied],0FFh
 35042                                  ;limx:
 35043 0000293A C3                      	retn
 35044                                  
 35045                                  ;----------------------------------------------------------------------------
 35046                                  ;
 35047                                  ; procedure : TrueInt12Mem
 35048                                  ;
 35049                                  ;	Input : Int12Lied = 0 if we are not lying currently
 35050                                  ;			  = 0ffh if we are lying
 35051                                  ;		OldInt12Mem = Saved value of 40:13h
 35052                                  ;
 35053                                  ;	Output : none
 35054                                  ;
 35055                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 35056                                  ;	and resets the flag which indicates that we were lying
 35057                                  ;
 35058                                  ;----------------------------------------------------------------------------
 35059                                  
 35060                                  TrueInt12Mem:
 35061                                  	; 11/12/2022
 35062                                  	; ds = cs
 35063 0000293B 803E[AE1F]00            	cmp	byte [Int12Lied],0
 35064                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 35065                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 35066                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 35067 00002940 7412                    	je	short timx		; no, we weren't
 35068                                  	; 18/12/2022
 35069 00002942 B84000                  	mov	ax,40h
 35070 00002945 8826[AE1F]              	mov	[Int12Lied],ah ; 0
 35071                                  	;mov	byte [Int12Lied],0
 35072                                  	;mov	byte [cs:Int12Lied],0
 35073 00002949 1E                      	push	ds
 35074                                  	;mov	ax,40h
 35075 0000294A 8ED8                    	mov	ds,ax
 35076 0000294C 2EA1[AF1F]              	mov	ax,[cs:OldInt12Mem]
 35077 00002950 A31300                  	mov	[13h],ax		; restore INT 12 memory
 35078 00002953 1F                      	pop	ds
 35079                                  timx:
 35080 00002954 C3                      	retn
 35081                                  
 35082                                  ;----------------------------------------------------------------------------
 35083                                  ;
 35084                                  ; procedure : IsIt3Com?
 35085                                  ;
 35086                                  ;	Input : DevEntry = Seg:0 of device driver
 35087                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 35088                                  ;		 else Zero flag is reset
 35089                                  ;
 35090                                  ;----------------------------------------------------------------------------
 35091                                  
 35092                                  IsIt3Com:
 35093                                  	; 11/12/2022
 35094                                  	; ds = cs
 35095 00002955 1E                      	push	ds
 35096 00002956 06                      	push	es
 35097 00002957 56                      	push	si
 35098                                  	; 11/12/2022
 35099 00002958 C536[931F]              	lds	si,[DevEntry]
 35100                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 35101 0000295C 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 35102 0000295F 0E                      	push	cs
 35103 00002960 07                      	pop	es
 35104 00002961 BF[B11F]                	mov	di,ThreeComName
 35105 00002964 B90800                  	mov	cx,8			; name length
 35106 00002967 F3A6                    	rep	cmpsb
 35107 00002969 5E                      	pop	si
 35108 0000296A 07                      	pop	es
 35109 0000296B 1F                      	pop	ds
 35110 0000296C C3                      	retn
 35111                                  
 35112                                  ;M020 : BEGIN
 35113                                  ;----------------------------------------------------------------------------
 35114                                  
 35115                                  UpdatePDB:
 35116 0000296D 1E                      	push	ds
 35117 0000296E B462                    	mov	ah,62h
 35118 00002970 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 35119 00002972 8EDB                    	mov	ds,bx
 35120 00002974 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 35121                                  	;mov	[2],bx
 35122 00002979 891E0200                	mov	[PDB.BLOCK_LEN],bx
 35123 0000297D 1F                      	pop	ds
 35124 0000297E C3                      	retn
 35125                                  
 35126                                  ; M020 : END
 35127                                  
 35128                                  ;----------------------------------------------------------------------------
 35129                                  
 35130                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35131                                  ;%if 0
 35132                                  
 35133                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35134                                  ; (SYSINIT:2EEEh)
 35135                                  
 35136                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 35137                                  ;include highexit.inc	; umb's, etc
 35138                                  
 35139                                  ; ----------------------------------------------------------------------
 35140                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 35141                                  ; ----------------------------------------------------------------------
 35142                                  ; 07/04/2019 - Retro DOS v4.0
 35143                                  
 35144                                  ;******************************************************************************
 35145                                  ;
 35146                                  ; This file contains routines needed to parse and implement user-given
 35147                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 35148                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 35149                                  ; the variables in highvar.inc, for use by the rest of the routines.
 35150                                  ;
 35151                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 35152                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 35153                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 35154                                  ;    DH/LH module opts
 35155                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 35156                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 35157                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 35158                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 35159                                  ; available during the load.
 35160                                  ;
 35161                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 35162                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 35163                                  ; upper-memory block which was not specified by the user... in addition, if
 35164                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 35165                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 35166                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 35167                                  ; free any UMBs so allocated.
 35168                                  ;
 35169                                  ; When a device driver loads, there is the additional problem of allocating its
 35170                                  ; initial load site; this should be restricted to the first UMB specified on
 35171                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 35172                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 35173                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 35174                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 35175                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 35176                                  ;
 35177                                  ;******************************************************************************
 35178                                  
 35179                                  SWTCH	equ	'/'		; Switch character
 35180                                  
 35181                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 35182                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 35183                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 35184                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 35185                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 35186                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 35187                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 35188                                  
 35189                                  CR	equ	0Dh		; Carriage Return
 35190                                  LF	equ	0Ah		; Line Feed
 35191                                  TAB	equ	09h		; Tab character (^I)
 35192                                  
 35193                                  ; -----------------------------------------------------------------------------
 35194                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 35195                                  ; -----------------------------------------------------------------------------
 35196                                  ; ENTRY:       None
 35197                                  ; EXIT:        Variables listed in highvar.inc are initialized
 35198                                  ; ERROR EXIT:  None
 35199                                  ; USES:        Flags, variables in highvar.inc
 35200                                  ; -----------------------------------------------------------------------------
 35201                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 35202                                  ; are largely ignored, but it is initialized nonetheless.
 35203                                  ; -----------------------------------------------------------------------------
 35204                                  
 35205                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35206                                  ; (SYSINIT:2EEEh)
 35207                                  
 35208                                  InitVar:
 35209                                  	; 01/01/2023
 35210                                  	; ds = cs
 35211                                  
 35212                                  	;pushreg <ax, cx, di, es>
 35213                                  	; 03/01/2023
 35214                                  	;push	ax
 35215                                  	;push	cx
 35216                                  	;push	di
 35217 0000297F 06                      	push	es
 35218                                  
 35219                                  	;dataseg es			;Point ES into appropriate data segment
 35220 00002980 0E                      	push	cs
 35221 00002981 07                      	pop	es
 35222                                  
 35223 00002982 31C0                    	xor	ax,ax
 35224                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 35225                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 35226                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 35227                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 35228                                  	;				;Later is the # of the 1st spec'd UMB
 35229                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 35230                                  
 35231                                  	; 01/01/2023
 35232                                  	; ds = cs
 35233 00002984 A2[561F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 35234 00002987 A2[551F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 35235 0000298A A3[571F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 35236 0000298D C606[591F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 35237                                  					;Later is the # of the 1st spec'd UMB
 35238 00002992 A2[8C1F]                	mov	[fm_argc], al		;Start with zero args having been read
 35239                                  
 35240 00002995 FC                      	cld
 35241                                  
 35242 00002996 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 35243 00002999 BF[5A1F]                	mov	di,UmbUsed		;on the UmbUsed array,
 35244 0000299C F3AA                    	rep	stosb			;	Store 0
 35245                                  
 35246                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 35247                                  	; 01/01/2033
 35248 0000299E B110                    	mov	cl,MAXUMB ; 16
 35249 000029A0 BF[6A1F]                	mov	di,UmbSize		;on the UmbSize array,
 35250 000029A3 F3AB                    	rep	stosw			;	Store 0
 35251                                  
 35252                                  	;normseg es			; Return ES
 35253                                  
 35254                                  	;popreg	<es, di, cx, ax>
 35255 000029A5 07                      	pop	es
 35256                                  	; 03/01/2023
 35257                                  	;pop	di
 35258                                  	;pop	cx
 35259                                  	;pop	ax	 	
 35260                                  
 35261 000029A6 C3                      	retn
 35262                                  
 35263                                  ; -----------------------------------------------------------------------------
 35264                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 35265                                  ; -----------------------------------------------------------------------------
 35266                                  ; ENTRY   : None
 35267                                  ; EXIT    : None
 35268                                  ; ERROR   : None
 35269                                  ; USES    : Flags, fm_umb, fm_strat
 35270                                  ; -----------------------------------------------------------------------------
 35271                                  
 35272                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35273                                  	; (SYSINIT:2F22h)
 35274                                  FixMem:
 35275                                  	; 01/01/2023
 35276                                  	;push	ax
 35277                                  	;push	bx
 35278                                  	;push	cx
 35279                                  	;push	dx
 35280 000029A7 06                      	push	es
 35281                                  
 35282 000029A8 E84900                  	call	fm_link		; Link in UMBs
 35283                                  
 35284 000029AB E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 35285 000029AE 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 35286                                  
 35287 000029B0 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 35288                                  
 35289                                  ; - Walk MCB Chain ------------------------------------------------------------
 35290                                  
 35291 000029B2 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 35292 000029B4 89D1                    	mov 	cx,dx		; in CX... and the last owner
 35293 000029B6 42                      	inc	dx		; in dx as we go through the loop:
 35294                                  
 35295                                  ; ------------------------------------------
 35296                                  ; FM10--DX  = last MCB's owner's PSP address
 35297                                  ;       CX  = last MCB's address (segment)
 35298                                  ; ------------------------------------------
 35299                                  
 35300 000029B7 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 35301 000029BB 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 35302 000029C0 09D3                    	or	bx,dx			; dx was owner of previous MCB
 35303 000029C2 7516                    	jnz	short fm30		; If not both zero, don't cat.
 35304                                  
 35305                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 35306                                  
 35307 000029C4 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 35308 000029C9 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 35309 000029CB 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 35310                                  
 35311 000029CF 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 35312                                  	;add	bx,1			; And add one for the header
 35313                                  	; 11/07/2023
 35314 000029D4 43                      	inc	bx
 35315 000029D5 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 35316                                  
 35317                                  	; ---------------------------------------------------------------------
 35318                                  
 35319 000029DA 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 35320 000029DC 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 35321                                  
 35322 000029E1 8CC3                    	mov	bx,es			; Move to the next MCB
 35323 000029E3 26031E0300              	add	bx,[es:ARENA.SIZE]
 35324 000029E8 43                      	inc	bx
 35325 000029E9 8EC3                    	mov	es,bx
 35326                                  
 35327                                  	;cmp	al,'Z'
 35328 000029EB 3C5A                    	cmp	al,arena_signature_end
 35329 000029ED 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 35330                                  fmX:	
 35331 000029EF E81300                  	call	fm_unlink		; Unlink UMBs
 35332                                  
 35333 000029F2 07                      	pop	es
 35334                                  	; 01/01/2023
 35335                                  	;pop	dx
 35336                                  	;pop	cx
 35337                                  	;pop	bx
 35338                                  	;pop	ax
 35339                                  
 35340 000029F3 C3                      	retn
 35341                                  
 35342                                  ; -----------------------------------------------------------------------------
 35343                                  ;*** fm_link - links UMBs not already linked in
 35344                                  ; -----------------------------------------------------------------------------
 35345                                  ; ENTRY:    None
 35346                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 35347                                  ; ERROR:    None
 35348                                  ; USES:     AX, BX, fm_umb
 35349                                  ; -----------------------------------------------------------------------------
 35350                                  
 35351                                  	; 01/01/2023 - Retro DOS v4.2
 35352                                  fm_link:
 35353 000029F4 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 35354 000029F7 CD21                    	int	21h			; Current link-state is now in al
 35355                                  
 35356                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 35357                                  	;
 35358                                  	;push	es
 35359                                  	;push	cs
 35360                                  	;pop	es
 35361                                  	;mov	[es:fm_umb],al
 35362                                  	;pop	es
 35363                                  	
 35364                                  	; 01/01/2023
 35365                                  	; ds = cs
 35366                                  	;mov	[cs:fm_umb],al
 35367 000029F9 A2[8A1F]                	mov	[fm_umb],al
 35368                                  
 35369 000029FC B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35370 000029FF BB0100                  	mov	bx,1
 35371 00002A02 CD21                    	int	21h
 35372 00002A04 C3                      	retn
 35373                                  
 35374                                  ; -----------------------------------------------------------------------------
 35375                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 35376                                  ; -----------------------------------------------------------------------------
 35377                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 35378                                  ; EXIT:     None
 35379                                  ; ERROR:    None
 35380                                  ; USES:     AX, BX
 35381                                  ; -----------------------------------------------------------------------------
 35382                                  
 35383                                  	; 01/01/2023 - Retro DOS v4.2
 35384                                  fm_unlink:
 35385 00002A05 31DB                    	xor	bx,bx
 35386                                  	
 35387                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 35388                                  	;
 35389                                  	;push	ds
 35390                                  	;push	cs
 35391                                  	;pop	ds
 35392                                  	;mov	bl,[fm_umb]	
 35393                                  	;pop	ds
 35394                                  	
 35395                                  	; 01/01/2023
 35396                                  	; ds = cs
 35397                                  	;mov	bl,[cs:fm_umb]
 35398 00002A07 8A1E[8A1F]              	mov	bl,[fm_umb]
 35399                                  
 35400 00002A0B B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35401 00002A0E CD21                    	int	21h			; so just use that, and call int 21h
 35402 00002A10 C3                      	retn
 35403                                  
 35404                                  ; 08/04/2019 - Retro DOS v4.0
 35405                                  
 35406                                  ; -----------------------------------------------------------------------------
 35407                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 35408                                  ; laid out in highvar.inc
 35409                                  ; -----------------------------------------------------------------------------
 35410                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 35411                                  ; EXIT:     ES:SI points to first character in child program name
 35412                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 35413                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 35414                                  ; -----------------------------------------------------------------------------
 35415                                  ; Error codes (in AX if carry set on return):
 35416                                  ;
 35417                                  PV_InvArg	equ	1	; Invalid argument passed
 35418                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 35419                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 35420                                  ;
 35421                                  ; This routine exects ES:SI to point to a string much like the following:
 35422                                  ;    "/S/L:1,200;2 module options"
 35423                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 35424                                  ; required, though that's what this routine is supposed to parse.
 35425                                  ;
 35426                                  optS		equ	'S'	; /S
 35427                                  optL		equ	'L'	; /L:...
 35428                                  ;
 35429                                  ; -----------------------------------------------------------------------------
 35430                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 35431                                  ; a command-line for spawning a child process. For a typical LH command, say,
 35432                                  ;     lh /l:1,1000;2 print/d:lpt2
 35433                                  ; the arguments would look like (one per line):
 35434                                  ;     lh
 35435                                  ;     /l
 35436                                  ;     1
 35437                                  ;     1000
 35438                                  ;     2
 35439                                  ;     print
 35440                                  ;     /d
 35441                                  ;     :lpt2
 35442                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 35443                                  ; arg was the filename. So, inside this routine, we keep a running counter
 35444                                  ; of the number of arguments LH will need to skip in order to get to the
 35445                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 35446                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 35447                                  ; for:
 35448                                  ;    Each /L
 35449                                  ;    Each /S (there should be only one)
 35450                                  ;    Each UMB number (they follow ":" or ";")
 35451                                  ;    Each UMB size   (they follow ",")
 35452                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 35453                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 35454                                  ; -----------------------------------------------------------------------------
 35455                                  
 35456                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35457                                  	; (SYSINIT:2F9Fh)
 35458                                  
 35459                                  ParseVar:
 35460                                  	;pushreg <di, ds, es>
 35461                                  	; 01/01/2023
 35462                                  	;push	di ; * ; (not required) ; 01/01/2023
 35463 00002A11 1E                      	push	ds
 35464 00002A12 06                      	push	es
 35465                                  
 35466 00002A13 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 35467 00002A14 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 35468 00002A15 FC                      	cld
 35469                                  
 35470                                  ; ------------------------------------------------
 35471                                  ; PV10--ES:SI = any whitespace on the command-line
 35472                                  ; ------------------------------------------------
 35473                                  
 35474 00002A16 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 35475 00002A17 E8A200                  	call	isWhite
 35476 00002A1A 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 35477                                  	;cmp	al,'/'
 35478 00002A1C 3C2F                    	cmp	al,SWTCH
 35479 00002A1E 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 35480                                  
 35481 00002A20 4E                      	dec	si		; Backup--it's now "odule options", and we need
 35482 00002A21 F8                      	clc			; that "m" we just read (or whatever it is).
 35483 00002A22 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 35484                                  
 35485 00002A24 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 35486                                  	;toUpper al		; So we make it upper-case, and...
 35487 00002A25 24DF                    	and	al,0DFh
 35488                                  	;cmp	al,'S'
 35489 00002A27 3C53                    	cmp	al,optS		; just read 'S'?
 35490 00002A29 750D                    	jne	short pv30
 35491                                  
 35492                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 35493 00002A2B 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35494                                  
 35495                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 35496                                  	;
 35497                                  	;push	es
 35498                                  	;push	cs
 35499                                  	;pop	es
 35500                                  	;mov	[es:fUmbTiny],1	
 35501                                  	;pop	es
 35502                                  
 35503 00002A30 2EC606[561F]01          	mov	byte [cs:fUmbTiny],1
 35504                                  
 35505 00002A36 EBDE                    	jmp	short pv10	; possibly even "/L...".
 35506                                  
 35507                                  pv30:	;cmp	al,'L'
 35508 00002A38 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 35509 00002A3A 750D                    	jne	short pvE1		; switch!
 35510                                  
 35511                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 35512 00002A3C 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35513                                  
 35514 00002A41 E80E00                  	call	parseL
 35515 00002A44 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 35516                                  
 35517 00002A46 4E                      	dec	si		; Else, back up and exit.
 35518 00002A47 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 35519                                  
 35520                                  pvE1:	;mov	ax,3
 35521 00002A49 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 35522 00002A4C 4E                      pvErr:	dec	si
 35523 00002A4D 4E                      	dec	si
 35524 00002A4E F9                      	stc
 35525                                  pvX:	;popreg	<es, ds, di>
 35526 00002A4F 07                      	pop	es
 35527 00002A50 1F                      	pop	ds
 35528                                  	; 01/01/2023
 35529                                  	;pop	di ; * ; (not required) ; 01/01/2023
 35530 00002A51 C3                      	retn
 35531                                  
 35532                                  ; -----------------------------------------------------------------------------
 35533                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 35534                                  ; -----------------------------------------------------------------------------
 35535                                  ; ENTRY:    ES:SI points to colon
 35536                                  ; EXIT:     ES:SI points to first character not parsed
 35537                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 35538                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 35539                                  ; -----------------------------------------------------------------------------
 35540                                  ; If the string here is terminated with anything other than whitespace or a
 35541                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 35542                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 35543                                  ; makes sure the app /L: is reported as being the culprit.
 35544                                  ; -----------------------------------------------------------------------------
 35545                                  
 35546                                  parseL:
 35547 00002A52 AC                      	lodsb
 35548 00002A53 3C3A                    	cmp	al,':'		; Make sure they did /L:
 35549 00002A55 754E                    	jne	short plE1	; If they didn't, return with carry set.
 35550                                  
 35551                                  ; ------------------------------------------
 35552                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 35553                                  ; ------------------------------------------
 35554                                  
 35555 00002A57 E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 35556 00002A5A 724F                    	jc	short plE2	; And error if it's a bad number.
 35557 00002A5C E89D01                  	call	convUMB		; Convert any address to a UMB number
 35558                                  
 35559 00002A5F 88C1                    	mov	cl,al		; Remember the UMB number
 35560 00002A61 E87600                  	call	stowUMB		; Mark this UMB # as used;
 35561 00002A64 7245                    	jc	short plE2	; If it was already marked, it'll error
 35562                                  
 35563                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 35564 00002A66 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35565                                  
 35566 00002A6B AC                      	lodsb
 35567 00002A6C 3C3B                    	cmp	al,';'		; Did "umb;" ?
 35568 00002A6E 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 35569                                  
 35570 00002A70 E84900                  	call	isWhite		; Did "umb " ?
 35571 00002A73 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 35572                                  
 35573 00002A75 E83900                  	call	isEOL		; Did "umb" ?
 35574 00002A78 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35575                                  
 35576                                  	;cmp	al,'/'
 35577 00002A7A 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 35578 00002A7C 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 35579                                  
 35580 00002A7E 3C2C                    	cmp	al,','		; Did "umb," ?
 35581 00002A80 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 35582                                  
 35583                                  ; --- Read a size -------------------------------------------------------------
 35584                                  
 35585 00002A82 E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 35586 00002A85 721E                    	jc	short plE1	; And error if it's a bad size.
 35587                                  
 35588 00002A87 E81601                  	call	toPara		; Convert from bytes to paragraphs
 35589                                  
 35590 00002A8A E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 35591                                  
 35592                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 35593 00002A8D 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35594                                  
 35595 00002A92 AC                      	lodsb
 35596 00002A93 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 35597 00002A95 74C0                    	je	short pl10	;
 35598                                  
 35599 00002A97 E82200                  	call	isWhite		; Did it end with whitespace?
 35600 00002A9A 7414                    	jz	short plX	; If so, we're done here--go back.
 35601                                  
 35602 00002A9C E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 35603 00002A9F 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35604                                  
 35605                                  	;cmp	al,'/'
 35606 00002AA1 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 35607 00002AA3 740A                    	je	short plSwX	; If so, again, we're done here.
 35608                                  plE1:	
 35609                                  	;mov	ax,1
 35610 00002AA5 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 35611 00002AA8 4E                      	dec	si
 35612 00002AA9 F9                      	stc
 35613 00002AAA C3                      	retn
 35614                                  
 35615                                  plE2:	;mov	ax,2
 35616 00002AAB B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 35617                                  	; 12/12/2022
 35618                                  	; cf=1
 35619                                  	;stc
 35620 00002AAE C3                      	retn
 35621                                  plSwX:	
 35622 00002AAF 4E                      	dec	si		; If we hit a '/' character, back up one char
 35623                                  				; so the whitespace checker will see it too.
 35624                                  plX:	; 12/12/2022
 35625                                  	; cf=0
 35626                                  	;clc			; Then just return with carry clear, so
 35627 00002AB0 C3                      	retn			; ParseVar will go about its business.
 35628                                  
 35629                                  ; -----------------------------------------------------------------------------
 35630                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 35631                                  ; -----------------------------------------------------------------------------
 35632                                  ; ENTRY:    None
 35633                                  ; EXIT:     None
 35634                                  ; ERROR:    None
 35635                                  ; USES:     fm_argc, flags
 35636                                  ; -----------------------------------------------------------------------------
 35637                                  
 35638                                  ;incArgc:
 35639                                  	;push	ax
 35640                                  
 35641                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 35642                                  
 35643                                  	;mov	al,[cs:fm_argc]
 35644                                  
 35645                                  	;inc	al		; Increment it,
 35646                                  
 35647                                  	;;putdata fm_argc, al	; And store it right back.
 35648                                  
 35649                                  	;mov	[cs:fm_argc],al
 35650                                  
 35651                                  	;pop	ax
 35652                                  	;retn
 35653                                  
 35654                                  ; -----------------------------------------------------------------------------
 35655                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 35656                                  ; -----------------------------------------------------------------------------
 35657                                  ; ENTRY:    AL contains character to test
 35658                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 35659                                  ; ERROR:    None
 35660                                  ; USES:     ZF
 35661                                  ; -----------------------------------------------------------------------------
 35662                                  
 35663                                  isEOL:
 35664 00002AB1 3C00                    	cmp	al,0		; Null-terminator
 35665 00002AB3 7406                    	je	short ieX
 35666 00002AB5 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 35667 00002AB7 7402                    	je	short ieX
 35668 00002AB9 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 35669                                  ieX:	
 35670 00002ABB C3                      	retn
 35671                                  
 35672                                  ; -----------------------------------------------------------------------------
 35673                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 35674                                  ; -----------------------------------------------------------------------------
 35675                                  ; ENTRY:    AL contains character to test
 35676                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 35677                                  ; ERROR:    None
 35678                                  ; USES:     ZF
 35679                                  ; -----------------------------------------------------------------------------
 35680                                  
 35681                                  isWhite:
 35682 00002ABC 3C20                    	cmp	al,' '		; Space
 35683 00002ABE 7406                    	je	short iwX
 35684 00002AC0 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 35685 00002AC2 7402                    	je	short iwX
 35686 00002AC4 3C09                    	cmp	al,tab ; 9	; Tab
 35687                                  iwX:	
 35688 00002AC6 C3                      	retn
 35689                                  
 35690                                  ; -----------------------------------------------------------------------------
 35691                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 35692                                  ; -----------------------------------------------------------------------------
 35693                                  ; ENTRY:    AL contains UMB number
 35694                                  ; EXIT:     None
 35695                                  ; ERROR:    None
 35696                                  ; USES:     Flags, variables in highvar.inc
 35697                                  ; -----------------------------------------------------------------------------
 35698                                  
 35699                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35700                                  
 35701                                  unMarkUMB:
 35702                                  	; 02/01/2023
 35703                                  	;push	ax
 35704                                  	;push	bx
 35705                                  	;push	di
 35706                                  	;push	es
 35707                                  	;
 35708                                  	;push	cs
 35709                                  	;pop	es
 35710                                  
 35711 00002AC7 30E4                    	xor	ah,ah
 35712 00002AC9 89C3                    	mov	bx,ax
 35713                                  
 35714                                  	; 19/04/2019
 35715                                  	
 35716                                  	;;mov	byte [es:bx+UmbUsed],0
 35717                                  	;mov	[es:bx+UmbUsed],ah ; 0
 35718                                  	; 02/01/2023
 35719                                  	; ds= cs
 35720                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 35721 00002ACB 88A7[5A1F]              	mov	[bx+UmbUsed],ah ; 0
 35722                                  
 35723 00002ACF 3806[591F]              	cmp	[UmbLoad],al
 35724                                  	;cmp	[cs:UmbLoad],al
 35725                                  	;;cmp	[es:UmbLoad],al
 35726 00002AD3 7504                    	jne	short umu10
 35727                                  
 35728                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 35729                                  	;mov	[es:UmbLoad],ah ; 0
 35730                                  	; 02/01/2023
 35731                                  	; ds = cs
 35732                                  	;mov	[cs:UmbLoad],ah ; 0
 35733 00002AD5 8826[591F]              	mov	[UmbLoad],ah ; 0
 35734                                  umu10:	
 35735                                  	;pop	es
 35736                                  	;pop	di
 35737                                  	;pop	bx
 35738                                  	;pop	ax
 35739 00002AD9 C3                      	retn
 35740                                  
 35741                                  ; -----------------------------------------------------------------------------
 35742                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 35743                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 35744                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 35745                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 35746                                  ; -----------------------------------------------------------------------------
 35747                                  ; ENTRY:    AL contains UMB number, as specified by the user
 35748                                  ; EXIT:     None
 35749                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 35750                                  ; USES:     AX, Flags, variables in highvar.inc
 35751                                  ; -----------------------------------------------------------------------------
 35752                                  
 35753                                  	; 01/01/2023 - Retro DOS v4.2
 35754                                  stowUMB:
 35755 00002ADA 3C10                    	cmp	al,MAXUMB ; 16
 35756 00002ADC 7202                    	jb	short su10
 35757 00002ADE F9                      	stc
 35758 00002ADF C3                      	retn			; Ooops-- UMB>=MAXUMB
 35759                                  su10:	
 35760                                  	; 01/01/2023
 35761                                  	;push	bx
 35762                                  	;push	di
 35763                                  	;push	si
 35764                                  	;push	ds
 35765                                  	;push	es
 35766                                  	;push	cs
 35767                                  	;pop	es
 35768                                  	;push	cs
 35769                                  	;pop	ds
 35770                                  
 35771                                  	; 01/01/2023
 35772                                  	; ds <> cs
 35773                                  	;cmp	byte [cs:UmbLoad],0FFh
 35774 00002AE0 2E803E[591F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 35775                                  				; If this, we haven't been here before
 35776 00002AE6 7504                    	jne	short su20
 35777 00002AE8 2EA2[591F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 35778                                  
 35779                                  	;;cmp	byte [UmbLoad],0FFh
 35780                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 35781                                  	;jne	short su20
 35782                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 35783                                  su20:	
 35784 00002AEC 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 35785 00002AEE 740E                    	jz	short su30	; that we should do here.
 35786                                  
 35787                                  	;mov	bl,al
 35788                                  	;xor	bh,bh
 35789                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 35790                                  	; 01/01/2023
 35791 00002AF0 30E4                    	xor	ah,ah
 35792 00002AF2 89C3                    	mov	bx,ax
 35793 00002AF4 B001                    	mov	al,1
 35794                                  
 35795                                  	;xchg	[es:bx+UmbUsed],al
 35796                                  	; 01/01/2023
 35797 00002AF6 2E8687[5A1F]            	xchg	[cs:bx+UmbUsed],al
 35798                                  
 35799                                  	;or	al,al		; If it was already 1, then al==1... and that
 35800                                  	;jz	short su30	; means an error.
 35801                                  	;
 35802                                  	;stc			; OOOPS!  This one's been used before.  :(
 35803                                  	
 35804                                  	; 01/01/2023
 35805 00002AFB 3C01                    	cmp	al,1
 35806 00002AFD F5                      	cmc 	; if al > 0 -> cf = 1
 35807                                  su30:	
 35808                                  	; 01/01/2023
 35809                                  	;pop	es
 35810                                  	;pop	ds
 35811                                  	;pop	si
 35812                                  	;pop	di
 35813                                  	;pop	bx
 35814 00002AFE C3                      	retn
 35815                                  
 35816                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35817                                  %if 0
 35818                                  ; -----------------------------------------------------------------------------
 35819                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 35820                                  ; -----------------------------------------------------------------------------
 35821                                  ; ENTRY:    CL contains UMB number, AX contains size
 35822                                  ; EXIT:     None
 35823                                  ; ERROR:    None
 35824                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 35825                                  ; -----------------------------------------------------------------------------
 35826                                  
 35827                                  ; 13/05/2019
 35828                                  
 35829                                  	; 01/01/2023 - Retro DOS v4.2
 35830                                  stowSiz:
 35831                                  	; 01/01/2023
 35832                                  	;push	bx
 35833                                  	;;push	di ; ?
 35834                                  	;push	es
 35835                                  
 35836                                  	;push	cs
 35837                                  	;pop	es	
 35838                                  
 35839                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 35840                                  	mov	bh,0			;     bx==UMB number, AX==size
 35841                                  	shl	bl,1			;     bx==offset into array, AX=size
 35842                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 35843                                  	; 01/01/2023
 35844                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 35845                                  
 35846                                  	; 01/01/2023
 35847                                  	;pop	es
 35848                                  	;;pop	di ; ?
 35849                                  	;pop	bx
 35850                                  
 35851                                  	retn
 35852                                  %endif
 35853                                  
 35854                                  ; -----------------------------------------------------------------------------
 35855                                  ;*** toDigit - converts a character-digit to its binary counterpart
 35856                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 35857                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 35858                                  ; A-F are considered valid iff gnradix is 16.
 35859                                  ; -----------------------------------------------------------------------------
 35860                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 35861                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 35862                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 35863                                  ; USES:     CL, Flags
 35864                                  ; -----------------------------------------------------------------------------
 35865                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35866                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35867                                  ; will be 10 or 16.
 35868                                  ; -----------------------------------------------------------------------------
 35869                                  
 35870                                  gnradix:
 35871 00002AFF 0000                    	dw	0		; Must be a word--16x16 multiplication
 35872                                  
 35873                                  toDigit:
 35874 00002B01 2E833E[FF2A]10          	cmp	word [cs:gnradix],16
 35875 00002B07 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 35876                                  
 35877                                  toDigit_hex:
 35878 00002B09 80F961                  	cmp	cl,'a'	; 61h
 35879 00002B0C 7209                    	jb	short td10
 35880 00002B0E 80F966                  	cmp	cl,'f'	; 66h
 35881 00002B11 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 35882 00002B13 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 35883                                  	;clc			; <- CLC is implicit from last SUB
 35884 00002B16 C3                      	retn
 35885                                  td10:	
 35886 00002B17 80F941                  	cmp	cl,'A'  ; 41h
 35887 00002B1A 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 35888 00002B1C 80F946                  	cmp	cl,'F'	; 46h
 35889 00002B1F 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 35890 00002B21 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 35891                                  	;clc			; <- CLC is implicit from last SUB
 35892 00002B24 C3                      	retn
 35893                                  toDigit_dec:
 35894                                  td20:	
 35895 00002B25 80F930                  	cmp	cl,'0'		; If less than zero,
 35896                                  	;jb	short tdE	; Done.
 35897 00002B28 720A                    	jb	short tdEr ; 08/04/2019
 35898 00002B2A 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 35899 00002B2D 7704                    	ja	short tdE	; Done.
 35900 00002B2F 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 35901                                  	;clc			; <- CLC is implicit from last SUB
 35902 00002B32 C3                      	retn
 35903                                  tdE:	
 35904 00002B33 F9                      	stc
 35905                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 35906 00002B34 C3                      	retn
 35907                                  
 35908                                  ; -----------------------------------------------------------------------------
 35909                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 35910                                  ; -----------------------------------------------------------------------------
 35911                                  ; ENTRY:    ES:SI points to an ascii string to scan
 35912                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 35913                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 35914                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 35915                                  ; -----------------------------------------------------------------------------
 35916                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35917                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35918                                  ; will be 10 or 16.
 35919                                  ; -----------------------------------------------------------------------------
 35920                                  
 35921                                  ; 08/04/2019 - Retro DOS v4.0
 35922                                  
 35923                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35924                                  ; (SYSINIT:3109h)
 35925                                  
 35926                                  GetXNum:
 35927                                  	;pushreg <bx, cx, ds>
 35928                                  	; 01/01/2023
 35929                                  	;push	bx
 35930 00002B35 51                      	push	cx ; *
 35931                                  	;push	ds
 35932                                  
 35933 00002B36 FC                      	cld
 35934 00002B37 31C0                    	xor	ax,ax
 35935 00002B39 31DB                    	xor	bx,bx
 35936 00002B3B 31C9                    	xor	cx,cx
 35937 00002B3D 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 35938                                  
 35939 00002B3F 2EC706[FF2A]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 35940                                  
 35941 00002B46 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 35942                                  	;call	toDigit
 35943 00002B49 E8D9FF                  	call	toDigit_dec
 35944                                  	;jc	short gxnE		; If it's not a digit, leave now.
 35945                                  	; 01/01/2023
 35946 00002B4C 7233                    	jc	short gxnX
 35947                                  
 35948 00002B4E 08C9                    	or	cl,cl
 35949 00002B50 7517                    	jnz	short gxn20		; Doesn't have '0x'
 35950 00002B52 268A4C01                	mov	cl,[es:si+1]
 35951 00002B56 80F978                  	cmp	cl,'x'			; Either 'x'...
 35952 00002B59 7405                    	je	short gxn10
 35953 00002B5B 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 35954 00002B5E 7509                    	jne	short gxn20
 35955                                  
 35956                                  gxn10:	
 35957 00002B60 2EC706[FF2A]1000        	mov	word [cs:gnradix], 16
 35958 00002B67 46                      	inc	si			; Since we read "0x", march over it.
 35959 00002B68 46                      	inc	si
 35960                                  
 35961                                  ; ------------------------------------------------------
 35962                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 35963                                  ;        DX:AX = current total
 35964                                  ;        BX    = 0
 35965                                  ;        CH    = 0
 35966                                  ; ------------------------------------------------------
 35967                                  
 35968                                  gxn20:	
 35969 00002B69 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 35970 00002B6C 46                      	inc	si
 35971                                  
 35972 00002B6D E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 35973 00002B70 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 35974                                  
 35975 00002B72 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 35976 00002B75 720A                    	jc	short gxnX	; (if it's too big, error out)
 35977                                  
 35978 00002B77 01C8                    	add	ax,cx		; Add the digit
 35979 00002B79 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 35980                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 35981                                  	;jmp	short gxn20
 35982 00002B7B 73EC                    	jnc	short gxn20
 35983                                  gxnE:	
 35984                                  	;stc			; In this case, we need to set the carry
 35985 00002B7D EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 35986                                  gxnQ:	
 35987 00002B7F 4E                      	dec	si		; Don't read in the offensive character.
 35988 00002B80 F8                      	clc			; And clear carry, so they know it's okay.
 35989                                  gxnX:	
 35990                                  	; 01/01/2023
 35991                                  	;pop	ds
 35992 00002B81 59                      	pop	cx ; *
 35993                                  	;pop	bx
 35994 00002B82 C3                      	retn
 35995                                  
 35996                                  ; -----------------------------------------------------------------------------
 35997                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 35998                                  ; -----------------------------------------------------------------------------
 35999                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 36000                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 36001                                  ; ERROR:   Carry set if number was too large
 36002                                  ; USES:    Flags, AX, DX
 36003                                  ; -----------------------------------------------------------------------------
 36004                                  
 36005                                  mul32:
 36006 00002B83 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 36007 00002B84 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 36008 00002B86 2EF726[FF2A]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 36009 00002B8B 7211                    	jc	short m32E	; Too big?
 36010                                  
 36011 00002B8D 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 36012 00002B8F 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 36013                                  
 36014 00002B90 87DA                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 36015 00002B92 2EF726[FF2A]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 36016 00002B97 87DA                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36017 00002B99 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36018 00002B9B 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 36019 00002B9D C3                      	retn
 36020                                  m32E:	
 36021 00002B9E 58                      	pop	ax
 36022 00002B9F C3                      	retn
 36023                                  
 36024                                  ; -----------------------------------------------------------------------------
 36025                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 36026                                  ; -----------------------------------------------------------------------------
 36027                                  ; ENTRY:   DX:AX = the number to be divided
 36028                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 36029                                  ; ERROR:   None
 36030                                  ; USES:    Flags, AX, DX
 36031                                  ; -----------------------------------------------------------------------------
 36032                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 36033                                  ;       can't ensure a 386 host machine. Sorry.
 36034                                  ; -----------------------------------------------------------------------------
 36035                                  
 36036                                  	; 01/01/2023 - Retro DOS v4.2
 36037                                  toPara:
 36038 00002BA0 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 36039                                  
 36040 00002BA1 B104                    	mov	cl,4		;
 36041 00002BA3 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 36042 00002BA5 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 36043 00002BA6 B10C                    	mov	cl,12
 36044 00002BA8 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 36045 00002BAA 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 36046                                  
 36047 00002BAC 59                      	pop	cx
 36048 00002BAD C3                      	retn
 36049                                  
 36050                                  ; -----------------------------------------------------------------------------
 36051                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 36052                                  ; -----------------------------------------------------------------------------
 36053                                  ; ENTRY:  Nothing
 36054                                  ; EXIT:   AX contains 0x9FFF for most systems
 36055                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 36056                                  ; USES:   Flags, AX
 36057                                  ; -----------------------------------------------------------------------------
 36058                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 36059                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 36060                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 36061                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 36062                                  ; -----------------------------------------------------------------------------
 36063                                  
 36064                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36065                                  UmbHead:
 36066                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 36067                                  
 36068                                  	;push	si ; ?
 36069                                  	;push	ds ; ? 
 36070                                  	;push	es
 36071                                  	;push	bx ; *	
 36072                                  
 36073                                  	; 09/04/2019
 36074                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 36075                                  
 36076 00002BAE B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 36077 00002BB0 CD21                    	int	21h
 36078                                  
 36079 00002BB2 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 36080                                  	
 36081                                  	; 01/01/2023
 36082 00002BB6 83F8FF                  	cmp	ax,0FFFFh
 36083 00002BB9 F5                      	cmc
 36084                                  	; if AX=0FFFFh -> CF=1
 36085 00002BBA C3                      	retn
 36086                                  
 36087                                  ; 01/01/2023
 36088                                  ;%if 0
 36089                                  ;	cmp	ax,0FFFFh
 36090                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 36091                                  ;
 36092                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 36093                                  ;	;jmp	short uhX
 36094                                  ;	; 12/12/2022
 36095                                  ;	retn
 36096                                  ;uhE:	
 36097                                  ;	stc
 36098                                  ;uhX:	
 36099                                  ;	;pop	bx ; *
 36100                                  ;	;pop	es
 36101                                  ;	;pop	ds ; ?
 36102                                  ;	;pop	si ; ?
 36103                                  ;	retn
 36104                                  ;%endif
 36105                                  
 36106                                  ; -----------------------------------------------------------------------------
 36107                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 36108                                  ; -----------------------------------------------------------------------------
 36109                                  ; ENTRY:  ES:0 should point to a valid MCB
 36110                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 36111                                  ; USES:   Flags
 36112                                  ; -----------------------------------------------------------------------------
 36113                                  
 36114                                  isSysMCB:
 36115                                  	;push	ax
 36116                                  
 36117                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 36118                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 36119                                  	;je	short ism10
 36120                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 36121                                  	;;je	short ism10
 36122                                  	;;jmp	short ismX		; Anything else isn't.
 36123                                  	;jne	short ismX
 36124 00002BBB 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 36125 00002BC1 7507                    	jne	short ismX 
 36126                                  ism10:	
 36127                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 36128                                  	;cmp	ax,'SC' ; 4353h
 36129 00002BC3 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 36130                                  ismX:	
 36131                                  	;pop	ax
 36132 00002BCA C3                      	retn
 36133                                  
 36134                                  ; 09/04/2019 - Retro DOS v4.0
 36135                                  
 36136                                  ; -----------------------------------------------------------------------------
 36137                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 36138                                  ; -----------------------------------------------------------------------------
 36139                                  ; ENTRY:  AX contains a segment address
 36140                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 36141                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 36142                                  ; USES:   Flags, AX
 36143                                  ; -----------------------------------------------------------------------------
 36144                                  ; An address in the following areas is treated as:
 36145                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 36146                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 36147                                  ;      ...
 36148                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 36149                                  ; -----------------------------------------------------------------------------
 36150                                  
 36151                                  	; 01/01/2023 - Retro DOS v4.2
 36152                                  AddrToUmb:
 36153                                  	; 01/01/2023
 36154                                  	;push	cx
 36155                                  	;push	dx
 36156 00002BCB 06                      	push	es
 36157                                  
 36158 00002BCC 89C2                    	mov	dx,ax		; DX = address to search for
 36159                                  
 36160 00002BCE E8DDFF                  	call	UmbHead		; AX = first segment
 36161 00002BD1 7222                    	jc	short atuE	; If it couldn't get it, error out.
 36162                                  
 36163                                  	; 22/07/2023
 36164                                  	;mov	es,ax ; *	; ES = first UMB segment
 36165 00002BD3 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 36166                                  
 36167                                  	; 22/07/2023
 36168                                  atu10:
 36169 00002BD5 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 36170                                  ; ----------------------------------------
 36171                                  ; ATU10--ES - Current MCB address
 36172                                  ;        DX - Address given for conversion
 36173                                  ;        CX - Current UMB #
 36174                                  ; ----------------------------------------
 36175                                  
 36176                                  ;atu10:	
 36177                                  	;mov	ax,es ; * ; 18/07/2023
 36178 00002BD7 39D0                            cmp	ax,dx		; Present segment >= given segment?
 36179 00002BD9 731D                    	jae	short atuX	; Yep--done.
 36180                                  
 36181 00002BDB E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 36182 00002BDE 7501                    	jnz	short atu20
 36183                                  
 36184 00002BE0 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 36185                                  atu20:	
 36186                                  	;mov	al,[es:ARENA.SIGNATURE]
 36187                                  	;cmp	al,arena_signature_end  ; 'Z'
 36188                                  	; 22/07/2023
 36189                                  	; ax = es
 36190                                  	;mov	ax,es ; **
 36191 00002BE1 2603060300              	add	ax,[es:ARENA.SIZE]
 36192 00002BE6 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36193 00002BEC 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 36194                                  
 36195                                  	;NextMCB es,ax
 36196                                  
 36197                                  	;mov	ax,es ; **
 36198                                  	;;add	ax,[es:3]
 36199                                  	;add	ax,[es:ARENA.SIZE]
 36200 00002BEE 40                      	inc	ax
 36201                                  	; 22/07/2023
 36202                                  	;mov	es,ax ; *
 36203 00002BEF EBE4                    	jmp	short atu10
 36204                                  
 36205                                  ; -----------------------------------------------------------------------------
 36206                                  ; if we get to atu30, they specified a number that was past the last MCB.
 36207                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 36208                                  ; -----------------------------------------------------------------------------
 36209                                  
 36210                                  atu30:	
 36211                                  	; 22/07/2023
 36212                                  	; ax = es + [es:ARENA.SIZE] 
 36213                                  	;mov	ax,es ; **
 36214                                  	;add	ax,[es:ARENA.SIZE] ; **
 36215 00002BF1 39D0                    	cmp	ax,dx		; Present >= given?
 36216 00002BF3 7303                    	jae	short atuX	; Yep! It _was_ inside.
 36217                                  atuE:	
 36218 00002BF5 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 36219 00002BF7 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 36220                                  atuX:	
 36221 00002BF8 89C8                    	mov	ax,cx		; Return the UMB number in AX
 36222                                  	
 36223 00002BFA 07                      	pop	es	
 36224                                  	; 01/01/2023
 36225                                  	;pop	dx
 36226                                  	;pop	cx
 36227 00002BFB C3                      	retn
 36228                                  
 36229                                  ; -----------------------------------------------------------------------------
 36230                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 36231                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 36232                                  ; address rather than a UMB number... and use that address to look up a UMB.
 36233                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 36234                                  ; -----------------------------------------------------------------------------
 36235                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 36236                                  ; EXIT:   AX will contain a UMB number
 36237                                  ; ERROR:  None
 36238                                  ; USES:   Flags, AX
 36239                                  ; -----------------------------------------------------------------------------
 36240                                  
 36241                                  	; 01/01/2023 - Retro DOS v4.2
 36242                                  convUMB:
 36243 00002BFC 2E833E[FF2A]10          	cmp	word [cs:gnradix],16
 36244 00002C02 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 36245 00002C04 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 36246                                  	;cmp	ax,0FFFFh
 36247                                  	;jne	short cu10
 36248                                  	;inc	ax		; If too high, ignore it (make it conventional)
 36249                                  	; 01/01/2023
 36250 00002C07 40                      	inc	ax
 36251 00002C08 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 36252 00002C0A 48                      	dec	ax
 36253                                  cu10:	
 36254 00002C0B C3                      	retn
 36255                                  
 36256                                  ; 01/01/2023 - Retro DOS v4.2
 36257                                  ;%if 0
 36258                                  ;
 36259                                  ;; -----------------------------------------------------------------------------
 36260                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 36261                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 36262                                  ;; of the usual HIGH_FIRST. See the code.
 36263                                  ;; -----------------------------------------------------------------------------
 36264                                  ;; ENTRY:  None
 36265                                  ;; EXIT:   None
 36266                                  ;; ERROR:  None
 36267                                  ;; USES:   Flags, fm_umb, fm_strat
 36268                                  ;; -----------------------------------------------------------------------------
 36269                                  ;
 36270                                  ;setUMBs:
 36271                                  ;	push	ax
 36272                                  ;	push	bx
 36273                                  ;	call	fm_link
 36274                                  ;	pop	bx
 36275                                  ;	pop	ax
 36276                                  ;	retn
 36277                                  ;
 36278                                  ;%endif
 36279                                  
 36280                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36281                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 36282                                  %if 0
 36283                                  
 36284                                  ; -----------------------------------------------------------------------------
 36285                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 36286                                  ; -----------------------------------------------------------------------------
 36287                                  ; ENTRY:  None
 36288                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 36289                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 36290                                  ; ERROR:  None
 36291                                  ; USES:   Flags, fm_strat, fm_umb
 36292                                  ; -----------------------------------------------------------------------------
 36293                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 36294                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 36295                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 36296                                  ; such that the load UMB is too small, and shouldn't be used.
 36297                                  ; -----------------------------------------------------------------------------
 36298                                  
 36299                                  loadLow:
 36300                                  	;push	ds
 36301                                  	;push	cs		; Point DS into appropriate data segment
 36302                                  	;pop	ds	
 36303                                  
 36304                                  	;mov	al,[UmbLoad]
 36305                                  	mov	al,[cs:UmbLoad]
 36306                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 36307                                  	jne	short ll10
 36308                                  
 36309                                  	stc
 36310                                  ll15:
 36311                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 36312                                  	;stc
 36313                                  	;jmp	short llX
 36314                                  	retn
 36315                                  ll10:	
 36316                                  	or	al,al		; AL=the load UMB: Is it == 0?
 36317                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 36318                                  
 36319                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 36320                                  	retn
 36321                                  
 36322                                  	;mov	al,1
 36323                                  	;clc
 36324                                  ;llX:
 36325                                  	;pop	ds		; Return DS to where it was
 36326                                  	;retn
 36327                                  
 36328                                  %endif
 36329                                  
 36330                                  ; -----------------------------------------------------------------------------
 36331                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 36332                                  ; -----------------------------------------------------------------------------
 36333                                  ; ENTRY:  None
 36334                                  ; EXIT:   None
 36335                                  ; ERROR:  None
 36336                                  ; USES:   Flags, fm_strat, fm_umb
 36337                                  ; -----------------------------------------------------------------------------
 36338                                  
 36339                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36340                                  	; (SYSINIT:322Fh)
 36341                                  HideUMBs:
 36342                                  	; 01/01/2023
 36343                                  	;push	ax
 36344                                  	;push	cx
 36345                                  	;push	ds
 36346 00002C0C 06                      	push	es
 36347                                  
 36348                                  	; 01/01/2023
 36349                                  	; ds = cs
 36350                                  
 36351 00002C0D E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 36352 00002C10 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 36353                                  
 36354 00002C12 E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 36355                                  	
 36356                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 36357                                  	; 01/01/2023
 36358 00002C15 E8DCFD                  	call	fm_link
 36359                                  
 36360                                  	;putdata fInHigh,1	; Remember that we're now running high
 36361                                  	;mov	byte [cs:fInHigh],1
 36362                                  	; 01/01/2023
 36363 00002C18 C606[551F]01            	mov	byte [fInHigh],1
 36364                                  
 36365                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 36366                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 36367                                  	; 01/01/2023
 36368 00002C1D A0[591F]                	mov	al,[UmbLoad]
 36369                                  
 36370 00002C20 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 36371 00002C22 7420                    	je	short husX	; then we shouldn't do this loop:
 36372                                  
 36373 00002C24 31C9                    	xor	cx,cx
 36374                                  
 36375                                  ; -----------------------------------------------
 36376                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 36377                                  ; -----------------------------------------------
 36378                                  
 36379 00002C26 41                      hus10:	inc	cx		; For each UMB:
 36380                                  	; 01/01/2023
 36381 00002C27 80F910                  	cmp	cl,MAXUMB
 36382                                  	;cmp	cx,MAXUMB ; 16
 36383 00002C2A 730E                    	jae	short hus20
 36384                                  
 36385 00002C2C 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 36386 00002C2E 06                      	push	es
 36387 00002C2F E8A200                  	call	findUMB		; valid range of UMBs)
 36388 00002C32 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 36389 00002C33 7205                    	jc	short hus20
 36390                                  	
 36391                                  	; 02/01/2023
 36392                                  	;push	cx ; *
 36393 00002C35 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 36394                                  	;pop	cx ; *
 36395                                  
 36396 00002C38 EBEC                    	jmp	short hus10
 36397                                  hus20:	
 36398                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 36399                                  	; 01/01/2023
 36400                                  	; ds = cs
 36401                                  	;mov	al,[UmbLoad]
 36402                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 36403 00002C3A 800E[591F]00            	or	byte [UmbLoad],0
 36404                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 36405 00002C3F 7503                    	jnz	short husX	; If not, we're done.
 36406                                  
 36407 00002C41 E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 36408                                  husX:	
 36409 00002C44 07                      	pop	es
 36410                                  	; 01/01/2023
 36411                                  	;pop	ds
 36412                                  	;pop	cx
 36413                                  	;pop	ax
 36414 00002C45 C3                      	retn
 36415                                  
 36416                                  ; -----------------------------------------------------------------------------
 36417                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 36418                                  ; -----------------------------------------------------------------------------
 36419                                  ; ENTRY:  None
 36420                                  ; EXIT:   AL == load UMB
 36421                                  ; ERROR:  None
 36422                                  ; USES:   Flags, AX
 36423                                  ; -----------------------------------------------------------------------------
 36424                                  
 36425                                  ;GetLoadUMB:
 36426                                  ;	;getdata al, UmbLoad
 36427                                  ;	push	ds
 36428                                  ;	push	cs
 36429                                  ;	pop	ds
 36430                                  ;	mov	al,[UmLoad]
 36431                                  ;	pop	ds
 36432                                  ;	retn
 36433                                  
 36434                                  ; -----------------------------------------------------------------------------
 36435                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36436                                  ; -----------------------------------------------------------------------------
 36437                                  ; ENTRY:  None
 36438                                  ; EXIT:   AX == load UMB minimum size
 36439                                  ; ERROR:  None
 36440                                  ; USES:   Flags, AX
 36441                                  ; -----------------------------------------------------------------------------
 36442                                  
 36443                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36444                                  %if 0
 36445                                  	; 01/01/2023 - Retro DOS v4.2
 36446                                  GetLoadSize:
 36447                                  	; 09/04/2019 - Retro DOS v4.0
 36448                                  	;mov	al,[cs:UmbLoad]
 36449                                  	; 01/01/2023
 36450                                  	; ds = cs
 36451                                  	mov	al,[UmbLoad] 
 36452                                  	;jmp	short GetSize
 36453                                  
 36454                                  	;push	bx
 36455                                  	;;push	si
 36456                                  	;push	ds
 36457                                  	;push	cs
 36458                                  	;pop	ds
 36459                                  
 36460                                  	;mov	al,[UmbLoad]
 36461                                  
 36462                                  	;xor	ah,ah			;    ax==UMB
 36463                                  	;mov	bx,UmbSize		;    bx==array
 36464                                  	;shl	al,1	                ;    ax==offset
 36465                                  	;;add	ax,bx			;    ax==element index
 36466                                  	;;mov	si,ax			; ds:si==element index
 36467                                  
 36468                                  	;;lodsw				;    hh
 36469                                  
 36470                                  	;add	bx,ax
 36471                                  	;mov	ax,[bx]
 36472                                  
 36473                                  	;pop	ds
 36474                                  	;;pop	si
 36475                                  	;pop	bx
 36476                                  	;retn
 36477                                  %endif
 36478                                  
 36479                                  ; -----------------------------------------------------------------------------
 36480                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 36481                                  ; -----------------------------------------------------------------------------
 36482                                  ; ENTRY:  AL == a UMB number
 36483                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 36484                                  ; ERROR:  None
 36485                                  ; USES:   Flags, AX
 36486                                  ; -----------------------------------------------------------------------------
 36487                                  
 36488                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36489                                  GetLoadSize:
 36490                                  	; ds = cs
 36491                                  	;mov	al,[UmbLoad]
 36492                                  	; al = [UmbLoad] 
 36493                                  	; ....
 36494                                  
 36495                                  	; 01/01/2023 - Retro DOS v4.2
 36496                                  GetSize:
 36497                                  	; 09/04/2019 - Retro DOS v4.0
 36498                                  
 36499                                  	;push	bx ; 01/01/2023
 36500                                  	;push	si
 36501                                  	;push	ds
 36502                                  	;push	cs
 36503                                  	;pop	ds
 36504                                  
 36505 00002C46 30E4                    	xor	ah,ah			;    ax==UMB
 36506 00002C48 BB[6A1F]                	mov	bx,UmbSize		;    bx==array
 36507 00002C4B D0E0                    	shl	al,1	                ;    ax==offset
 36508                                  	;add	ax,bx			;    ax==element index
 36509                                  	;mov	si,ax			; ds:si==element index
 36510                                  
 36511                                  	;lodsw				;    ax==size
 36512                                  
 36513 00002C4D 01C3                    	add	bx,ax
 36514                                  	; 01/01/2023
 36515                                  	; ds = cs
 36516 00002C4F 8B07                    	mov	ax,[bx]
 36517                                  	;mov	ax,[cs:bx]
 36518                                  
 36519                                  	;pop	ds
 36520                                  	;pop	si
 36521                                  	;pop	bx ; 01/01/2023
 36522                                  sls10:	; 08/09/2023
 36523 00002C51 C3                      	retn
 36524                                  
 36525                                  ; -----------------------------------------------------------------------------
 36526                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 36527                                  ; -----------------------------------------------------------------------------
 36528                                  ; ENTRY:   AL == new load UMB
 36529                                  ; EXIT:    None
 36530                                  ; ERROR:   None
 36531                                  ; USES:    Flags, AX
 36532                                  ; -----------------------------------------------------------------------------
 36533                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 36534                                  ;          time you would ever need this, so that's okay.
 36535                                  ; -----------------------------------------------------------------------------
 36536                                  
 36537                                  ; StoLoadUMB subroutine is not used anywhere
 36538                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 36539                                  ; Erdogan Tan - 18/07/2023
 36540                                  
 36541                                  ;StoLoadUMB:
 36542                                  ;	;putdata UmbLoad, al
 36543                                  ;	push	es
 36544                                  ;	push	cs
 36545                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 36546                                  ;	mov	[es:UmbLoad],al
 36547                                  ;	pop	es
 36548                                  ;	retn
 36549                                  
 36550                                  ; -----------------------------------------------------------------------------
 36551                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36552                                  ; -----------------------------------------------------------------------------
 36553                                  ; ENTRY:  AL == new load size
 36554                                  ; EXIT:   None
 36555                                  ; ERROR:  None
 36556                                  ; USES:   Flags, AX
 36557                                  ; -----------------------------------------------------------------------------
 36558                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 36559                                  	; 01/01/2023 - Retro DOS v4.2
 36560                                  StoLoadSize:
 36561                                  	; 01/01/2023
 36562                                  	;push	dx
 36563                                  
 36564                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 36565                                  	;
 36566                                  	;push	ds
 36567                                  	;push	cs
 36568                                  	;pop	ds
 36569                                  	;mov	dl,[UmbLoad]
 36570                                  	;pop	ds	
 36571                                  
 36572                                  	; 08/09/2023
 36573                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 36574                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 36575                                  
 36576                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 36577                                  					; instead of DL (*) ; 18/07/2023
 36578                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 36579                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 36580                                  	;je	short sls10
 36581                                  			
 36582                                  		; BUG ! stowSiz uses CL instead of DL !
 36583                                  		; (CL is set in ParseL which calls stowSiz)
 36584                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 36585                                  		; Erdogan Tan - 18/07/2023
 36586                                  
 36587                                  	; 08/09/2023 (BugFix)
 36588                                  	;mov	cl,[cs:UmbLoad]
 36589                                  	; 08/09/2023 
 36590                                  	; ds = cs
 36591 00002C52 8A0E[591F]              	mov	cl,[UmbLoad]
 36592 00002C56 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 36593 00002C59 74F6                    	je	short sls10 
 36594                                  
 36595                                  	; 08/09/2023
 36596                                  ;	call	stowSiz			; We've got a function to do just this
 36597                                  ;sls10:	
 36598                                  ;	; 01/01/2023
 36599                                  ;	;pop	dx
 36600                                  ;	retn
 36601                                  	
 36602                                  	; 08/09/2023
 36603                                  	;;jmp	stowSiz
 36604                                  	;jmp	short stowSiz
 36605                                  
 36606                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36607                                  %if 1
 36608                                  ; -----------------------------------------------------------------------------
 36609                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36610                                  ; -----------------------------------------------------------------------------
 36611                                  ; ENTRY:    CL contains UMB number, AX contains size
 36612                                  ; EXIT:     None
 36613                                  ; ERROR:    None
 36614                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36615                                  ; -----------------------------------------------------------------------------
 36616                                  
 36617                                  ; 13/05/2019
 36618                                  
 36619                                  	; 01/01/2023 - Retro DOS v4.2
 36620                                  stowSiz:
 36621                                  	; 01/01/2023
 36622                                  	;push	bx
 36623                                  	;;push	di ; ?
 36624                                  	;push	es
 36625                                  
 36626                                  	;push	cs
 36627                                  	;pop	es	
 36628                                  
 36629 00002C5B 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 36630 00002C5D B700                    	mov	bh,0			;     bx==UMB number, AX==size
 36631 00002C5F D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 36632                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36633                                  	; 01/01/2023
 36634 00002C61 2E8987[6A1F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 36635                                  
 36636                                  	; 01/01/2023
 36637                                  	;pop	es
 36638                                  	;;pop	di ; ?
 36639                                  	;pop	bx
 36640                                  
 36641 00002C66 C3                      	retn
 36642                                  %endif
 36643                                  
 36644                                  ; -----------------------------------------------------------------------------
 36645                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 36646                                  ; -----------------------------------------------------------------------------
 36647                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 36648                                  ; EXIT:     None; free elements in UMB marked as hidden
 36649                                  ; ERROR:    None
 36650                                  ; USES:     Flags
 36651                                  ; -----------------------------------------------------------------------------
 36652                                  
 36653                                  	; 01/01/2023 - Retro DOS v4.2
 36654                                  hideUMB:
 36655                                  	; 02/01/2023
 36656 00002C67 52                      	push	dx ; (*)
 36657                                  	; 01/01/2023
 36658                                  	;push	ax
 36659 00002C68 06                      	push	es
 36660                                  
 36661 00002C69 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 36662 00002C6C 7224                    	jc	short huX
 36663                                  
 36664                                  ; ------------------------------------------------
 36665                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 36666                                  ;            we're not in the same UMB, so exit.
 36667                                  ; ------------------------------------------------
 36668                                  
 36669 00002C6E E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36670 00002C71 741F                    	jz	short huX	; If it is, we've finished the UMB.
 36671                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 36672 00002C73 26830E010000            	or	word [es:ARENA.OWNER],0
 36673 00002C79 7503                    	jnz	short hu20
 36674                                  
 36675 00002C7B E81700                  	call	hideMCB
 36676                                  hu20:	
 36677                                  	;mov	al,[es:ARENA.SIGNATURE]
 36678                                  	;cmp	al,arena_signature_end  ;'Z'
 36679                                  	; 19/07/2023
 36680 00002C7E 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 36681 00002C84 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 36682                                  
 36683                                  	;NextMCB es,ax		; Go on forward.
 36684 00002C86 8CC0                    	mov     ax,es
 36685                                  	;add	ax,[es:3]
 36686 00002C88 2603060300              	add     ax,[es:ARENA.SIZE]
 36687 00002C8D 40                      	inc     ax
 36688 00002C8E 8EC0                    	mov     es,ax
 36689                                  
 36690 00002C90 EBDC                    	jmp	short hu10
 36691                                  huX:	
 36692 00002C92 07                      	pop	es
 36693                                  	; 01/01/2023
 36694                                  	;pop	ax
 36695                                  	; 02/01/2023
 36696 00002C93 5A                      	pop	dx ; (*)
 36697 00002C94 C3                      	retn
 36698                                  
 36699                                  ; 02/01/2023
 36700                                  %if 0
 36701                                  
 36702                                  ; -----------------------------------------------------------------------------
 36703                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 36704                                  ; -----------------------------------------------------------------------------
 36705                                  ; ENTRY:    None
 36706                                  ; EXIT:     ZF set if user DIDN'T specify /S
 36707                                  ; ERROR:    None
 36708                                  ; USES:     Flags
 36709                                  ; -----------------------------------------------------------------------------
 36710                                  
 36711                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36712                                  isTiny:
 36713                                  	; 02/01/2023
 36714                                  	;push	ax
 36715                                  
 36716                                  	;getdata al,fUmbTiny
 36717                                  	;
 36718                                  	;push	ds
 36719                                  	;push	cs
 36720                                  	;pop	ds
 36721                                  	;mov	al,[fUmbTiny]
 36722                                  	;pop	ds
 36723                                  
 36724                                  	; 09/09/2023
 36725                                  	;mov	al,[cs:fUmbTiny]
 36726                                  	; 02/01/2023
 36727                                  	; ds = cs
 36728                                  	mov	al,[fUmbTiny]
 36729                                  
 36730                                  	or	al,al
 36731                                  	; 02/01/2023
 36732                                  	;pop	ax
 36733                                  	retn
 36734                                  
 36735                                  %endif
 36736                                  
 36737                                  ; -----------------------------------------------------------------------------
 36738                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 36739                                  ; -----------------------------------------------------------------------------
 36740                                  ; ENTRY:    ES:0 should point to an MCB
 36741                                  ; EXIT:     ZF set if MCB is free, else !ZF
 36742                                  ; ERROR:    None
 36743                                  ; USES:     Flags
 36744                                  ; -----------------------------------------------------------------------------
 36745                                  
 36746                                  ;isFreeMCB:
 36747                                  ;	or	word [es:ARENA.OWNER],0
 36748                                  ;	retn
 36749                                  
 36750                                  ; -----------------------------------------------------------------------------
 36751                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 36752                                  ; -----------------------------------------------------------------------------
 36753                                  ; ENTRY:    ES:0 should point to an MCB
 36754                                  ; EXIT:     None; MCB marked as HIDDEN
 36755                                  ; ERROR:    None
 36756                                  ; USES:     None
 36757                                  ; -----------------------------------------------------------------------------
 36758                                  
 36759                                  hideMCB:
 36760 00002C95 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 36761 00002C9C 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 36762 00002CA3 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 36763 00002CAA 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 36764 00002CB1 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 36765 00002CB8 C3                      	retn
 36766                                  
 36767                                  ; -----------------------------------------------------------------------------
 36768                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 36769                                  ; -----------------------------------------------------------------------------
 36770                                  ; ENTRY:    ES:0 should point to an MCB
 36771                                  ; EXIT:     None; MCB marked as FREE
 36772                                  ; ERROR:    None
 36773                                  ; USES:     None
 36774                                  ; -----------------------------------------------------------------------------
 36775                                  
 36776                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36777                                  
 36778                                  unHideMCB:
 36779                                  	; 03/01/2023
 36780                                  	;push	ax
 36781 00002CB9 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 36782 00002CC0 B82020                  	mov	ax,'  ' ; 2020h
 36783 00002CC3 26A30800                	mov	[es:ARENA.NAME+0],ax
 36784 00002CC7 26A30A00                	mov	[es:ARENA.NAME+2],ax
 36785 00002CCB 26A30C00                	mov	[es:ARENA.NAME+4],ax
 36786 00002CCF 26A30E00                	mov	[es:ARENA.NAME+6],ax
 36787                                  	; 03/01/2023
 36788                                  	;pop	ax
 36789 00002CD3 C3                      	retn
 36790                                  
 36791                                  ; -----------------------------------------------------------------------------
 36792                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 36793                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 36794                                  ; -----------------------------------------------------------------------------
 36795                                  ; ENTRY:    AL should be to a valid UMB number
 36796                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 36797                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 36798                                  ; USES:     Flags, ES
 36799                                  ; -----------------------------------------------------------------------------
 36800                                  
 36801                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36802                                  	; (SYSINIT:3344h)
 36803                                  findUMB:
 36804                                  	; 01/01/2023
 36805                                  	;push	ax
 36806                                  	; 02/01/2023
 36807 00002CD4 51                      	push	cx ; *
 36808                                  	;push	dx
 36809                                  
 36810 00002CD5 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 36811                                  
 36812 00002CD7 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 36813                                  
 36814 00002CD9 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 36815                                  	; 22/07/2023
 36816                                  	;mov	es,ax ; *
 36817 00002CDC 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 36818                                  
 36819                                  	; 22/07/2023
 36820                                  fu10:
 36821 00002CDE 8EC0                    	mov	es,ax ; * ; **
 36822                                  ; ---------------------------------------------
 36823                                  ; FU10--CX - This UMB number; 0 == conventional
 36824                                  ;       DX - The UMB number they're looking for
 36825                                  ;       ES - The current MCB address
 36826                                  ; ---------------------------------------------
 36827                                  
 36828                                  ;fu10:	
 36829 00002CE0 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 36830 00002CE2 7417                    	je	short fuX	; searching for--so exit.
 36831                                  
 36832 00002CE4 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36833 00002CE7 7501                    	jnz	short fu20
 36834                                  
 36835 00002CE9 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 36836                                  fu20:	
 36837                                  	;mov	al,[es:ARENA.SIGNATURE]
 36838                                  	;cmp	al,arena_signature_end ; 'Z'
 36839                                  	; 19/07/2023
 36840 00002CEA 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 36841 00002CF0 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 36842                                  
 36843                                  	;NextMCB es,ax		; Go on forward.
 36844                                  	; 22/07/2023
 36845                                  	; ax = es
 36846                                  	;mov	ax,es ; * ; 22/07/2023
 36847                                  	;add	ax,[es:3]
 36848 00002CF2 2603060300              	add	ax,[es:ARENA.SIZE]
 36849 00002CF7 40                      	inc	ax
 36850                                  	; 22/07/2023
 36851                                  	;mov	es,ax ; **
 36852 00002CF8 EBE4                    	jmp	short fu10
 36853                                  fuE:	
 36854 00002CFA F9                      	stc
 36855                                  fuX:
 36856                                  	; 01/01/2023
 36857                                  	;pop	dx
 36858                                  	; 02/01/2023
 36859 00002CFB 59                      	pop	cx ; *
 36860                                  	;pop	ax		; The address is already in ES.
 36861 00002CFC C3                      	retn
 36862                                  
 36863                                  ; -----------------------------------------------------------------------------
 36864                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 36865                                  ; -----------------------------------------------------------------------------
 36866                                  ; ENTRY:    AL should be to a valid UMB number
 36867                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 36868                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 36869                                  ; USES:     Flags, ES
 36870                                  ; -----------------------------------------------------------------------------
 36871                                  
 36872                                  	; 01/01/2023 - Retro DOS v4.2
 36873                                  BigFree:
 36874                                  	; 01/01/2023
 36875                                  	;push	bx
 36876 00002CFD 51                      	push	cx
 36877                                  
 36878 00002CFE E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 36879 00002D01 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 36880                                  
 36881 00002D03 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 36882 00002D05 31C9                    	xor	cx,cx			; Size of largest free MCB
 36883                                  
 36884                                  ; ---------------------------------------------
 36885                                  ; BF10--ES - Current MCB address
 36886                                  ;       BX - Address of largest free MCB so far
 36887                                  ;       CX - Size of largest free MCB so far
 36888                                  ; ---------------------------------------------
 36889                                  
 36890                                  bf10:	
 36891 00002D07 E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 36892 00002D0A 7428                    	jz	short bf30
 36893                                  
 36894                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 36895 00002D0C 26830E010000            	or	word [es:ARENA.OWNER],0
 36896 00002D12 750C                    	jnz	short bf20
 36897                                  
 36898 00002D14 26A10300                	mov	ax,[es:ARENA.SIZE]
 36899                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 36900 00002D18 39C1                    	cmp	cx,ax
 36901                                  	;jg	short bf20		; Unless we're bigger,
 36902                                  	; 19/07/2023
 36903 00002D1A 7D04                    	jge	short bf20
 36904                                  
 36905 00002D1C 8CC3                    	mov	bx,es			; Store this new element's address,
 36906                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 36907 00002D1E 89C1                    	mov	cx,ax
 36908                                  
 36909                                  bf20:	
 36910                                  	;mov	al,[es:ARENA.SIGNATURE]
 36911                                  	;cmp	al,arena_signature_end	; 'Z'
 36912                                  	; 19/07/2023
 36913                                  	;cmp	byte [es:0],'Z'
 36914 00002D20 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36915 00002D26 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 36916                                  
 36917                                  	;NextMCB es,ax			; Go on forward.
 36918 00002D28 8CC0                    	mov     ax,es
 36919                                  	;add	ax,[es:3]
 36920 00002D2A 2603060300              	add     ax,[es:ARENA.SIZE]
 36921 00002D2F 40                      	inc     ax
 36922 00002D30 8EC0                    	mov     es,ax
 36923                                  
 36924 00002D32 EBD3                    	jmp	short bf10
 36925                                  
 36926 00002D34 8EC3                    bf30:	mov	es,bx			; Return the address
 36927 00002D36 89C8                    	mov	ax,cx			; Return the size
 36928 00002D38 09DB                    	or	bx,bx
 36929 00002D3A 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 36930                                  bfE:	
 36931 00002D3C F9                      	stc
 36932                                  bfX:
 36933 00002D3D 59                      	pop	cx
 36934                                  	; 01/01/2023
 36935                                  	;pop	bx
 36936 00002D3E C3                      	retn
 36937                                  
 36938                                  ; -----------------------------------------------------------------------------
 36939                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36940                                  ; -----------------------------------------------------------------------------
 36941                                  ; ENTRY:    AL should be to a valid UMB number
 36942                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 36943                                  ; ERROR:    None
 36944                                  ; USES:     Flags
 36945                                  ; -----------------------------------------------------------------------------
 36946                                  
 36947                                  	; 02/01/2023 - Retro DOS v4.2
 36948                                  
 36949                                  isSpecified:
 36950                                  	; 02/01/2023
 36951                                  	;push	ax
 36952                                  
 36953 00002D3F 30FF                    	xor	bh,bh
 36954 00002D41 88C3                    	mov	bl,al
 36955                                  
 36956                                  	;getdata al,DS:UmbUsed[bx]
 36957                                  	;
 36958                                  	;push	ds
 36959                                  	;push	cs
 36960                                  	;pop	ds
 36961                                  	;mov	al,[bx+UmbUsed]
 36962                                  	;pop	ds
 36963                                  	
 36964                                  	;mov	al,[cs:bx+UmbUsed]
 36965                                  	; 02/01/2023
 36966                                  	; ds = cs
 36967 00002D43 8A87[5A1F]              	mov	al,[bx+UmbUsed]
 36968                                  
 36969 00002D47 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 36970                                  
 36971                                  	; 09/09/2023
 36972                                  	; 02/01/2023
 36973                                  	;pop	ax
 36974                                  
 36975 00002D49 C3                      	retn
 36976                                  
 36977                                  ; -----------------------------------------------------------------------------
 36978                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 36979                                  ; -----------------------------------------------------------------------------
 36980                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 36981                                  ; EXIT:     None; MCB broken if carry clear
 36982                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 36983                                  ; USES:     Flags
 36984                                  ; -----------------------------------------------------------------------------
 36985                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 36986                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 36987                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 36988                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 36989                                  ; minimum for performing a split.
 36990                                  ; -----------------------------------------------------------------------------
 36991                                  
 36992                                  MIN_SPLIT_SIZE	equ	20h
 36993                                  
 36994                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36995                                  
 36996                                  shrinkMCB:
 36997                                  	;pushreg <bx,cx,es>
 36998                                  	; 02/01/2023
 36999                                  	;push	bx
 37000 00002D4A 51                      	push	cx
 37001 00002D4B 06                      	push	es
 37002                                  
 37003 00002D4C 89C3                    	mov	bx,ax			; Move things around... and
 37004                                  	; 02/01/2023
 37005                                  	;mov	ax,es			; save this one for later.
 37006                                  
 37007 00002D4E 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 37008                                  	; 02/01/2023
 37009 00002D53 89C8                    	mov	ax,cx 
 37010                                  
 37011 00002D55 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 37012                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 37013                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37014                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37015                                  	; 18/12/2022
 37016                                  	;cmp	cx,bx
 37017                                  	; 02/01/2023
 37018 00002D58 39D8                    	cmp	ax,bx
 37019 00002D5A 7228                    	jb	short smE ; (*)
 37020                                  
 37021 00002D5C 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 37022                                  	
 37023                                  	;mov	cx,[es:ARENA.SIZE]
 37024                                  	; 02/01/2023
 37025 00002D61 8CC0                    	mov	ax,es
 37026                                  
 37027 00002D63 26891E0300              	mov	[es:ARENA.SIZE],bx
 37028 00002D68 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 37029                                  
 37030 00002D6E 01D8                    	add	ax,bx
 37031 00002D70 40                      	inc	ax
 37032 00002D71 8EC0                    	mov	es,ax			; Move to new arena area
 37033                                  
 37034 00002D73 89C8                    	mov	ax,cx
 37035 00002D75 29D8                    	sub	ax,bx
 37036                                  	; 12/12/2022
 37037                                  	; ax > 0
 37038 00002D77 48                      	dec	ax			; And prepare the new size
 37039                                  
 37040                                  	; 18/12/2022
 37041 00002D78 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 37042                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 37043 00002D7D 26A30300                	mov	[es:ARENA.SIZE],ax
 37044                                  	;mov	ax,'  ' ; 2020h
 37045                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 37046                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 37047                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 37048                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 37049                                  
 37050                                  	; 18/12/2022
 37051 00002D81 E8A801                  	call	freeMCB	; (**)
 37052                                  
 37053                                  	; 12/12/2022
 37054                                  	; cf=0
 37055                                  	;clc
 37056                                  	; 18/12/2022
 37057                                  	;jmp	short smX
 37058                                  smE:	
 37059                                  	; 18/12/2022
 37060                                  	; cf=1 (*)
 37061                                  	;stc
 37062                                  smX:	
 37063                                  	;popreg	<es,cx,bx>
 37064 00002D84 07                      	pop	es
 37065 00002D85 59                      	pop	cx
 37066                                  	; 02/01/2023
 37067                                  	;pop	bx
 37068 00002D86 C3                      	retn
 37069                                  
 37070                                  ; -----------------------------------------------------------------------------
 37071                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37072                                  ; -----------------------------------------------------------------------------
 37073                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37074                                  ; EXIT:     None; UMB is hidden as necessary
 37075                                  ; ERROR:    None
 37076                                  ; USES:     Flags, AX, CX
 37077                                  ; -----------------------------------------------------------------------------
 37078                                  ; PRIMARY LOGIC:
 37079                                  ;
 37080                                  ; If the UMB is specified in the DH/LH statement, then:
 37081                                  ;    If the largest free segment is too small (check specified size), then:
 37082                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37083                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37084                                  ;       If /S was given on the command-line, then:
 37085                                  ;          Break that element into two pieces
 37086                                  ;          Set a flag that we're shrinking
 37087                                  ;       Endif
 37088                                  ;    Endif
 37089                                  ; Endif
 37090                                  ; If the UMB is NOT specified (or was removed by the above):
 37091                                  ;    Hide all free elements in the UMB
 37092                                  ;    If the flag that we're shrinking was set, then:
 37093                                  ;       UN-hide the lower portion of the shrunken UMB
 37094                                  ;    ENDIF
 37095                                  ; ENDIF
 37096                                  ; -----------------------------------------------------------------------------
 37097                                  
 37098                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37099                                  	; (SYSINIT:3426h)
 37100                                  _hideUMB_:
 37101                                  	; 02/01/2023
 37102                                  	; ds = cs
 37103                                  
 37104                                  	; 01/01/2023
 37105                                  	;push	bx
 37106                                  	;push	dx
 37107 00002D87 06                      	push	es
 37108                                  
 37109 00002D88 88C8                    	mov	al,cl
 37110 00002D8A E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37111 00002D8D 742D                    	jz	short hu_20
 37112                                  
 37113 00002D8F 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37114 00002D91 E869FF                  	call	BigFree		; free element in AX; put its address in ES
 37115 00002D94 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 37116                                  
 37117 00002D96 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37118 00002D97 88C8                    	mov	al,cl		; Retrieve the user's specified
 37119 00002D99 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 37120 00002D9C 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37121                                  
 37122 00002D9D 09C0                    	or	ax,ax		; If they didn't specify one,
 37123 00002D9F 741B                    	jz	short hu_20	; Skip over all this.
 37124                                  
 37125 00002DA1 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37126 00002DA3 7607                    	jbe	short hu_10
 37127                                  
 37128 00002DA5 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37129 00002DA7 E81DFD                  	call	unMarkUMB
 37130 00002DAA EB10                    	jmp	short hu_20
 37131                                  hu_10:	
 37132                                  	;call	isTiny		; Returns ZF clear if user specified /S
 37133                                  	;jz	short hu_20
 37134                                  	; 02/01/2023
 37135                                  ;isTiny:
 37136                                  	;mov	al,[fUmbTiny] ; ds = cs
 37137                                  	;or	al,al
 37138 00002DAC 800E[561F]00            	or	byte [fUmbTiny],0
 37139 00002DB1 7409                    	jz	short hu_20
 37140                                  
 37141 00002DB3 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37142 00002DB6 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 37143                                  
 37144 00002DB8 8CC2                    	mov	dx,es
 37145 00002DBA EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 37146                                  
 37147 00002DBC 89C8                    hu_20:	mov	ax,cx
 37148 00002DBE E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 37149 00002DC1 7510                    	jnz	short hu_X	; so leave.
 37150                                  
 37151 00002DC3 31D2                    	xor	dx,dx
 37152                                  hu_30:	
 37153 00002DC5 88C8                    	mov	al,cl
 37154                                  
 37155 00002DC7 E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 37156                                  
 37157 00002DCA 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37158 00002DCC 7405                    	jz	short hu_X	; So we should leave.
 37159                                  
 37160 00002DCE 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37161 00002DD0 E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37162                                  hu_X:	
 37163 00002DD3 07                      	pop	es
 37164                                  	; 01/01/2023
 37165                                  	;pop	dx
 37166                                  	;pop	bx
 37167 00002DD4 C3                      	retn
 37168                                  
 37169                                  ; -----------------------------------------------------------------------------
 37170                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 37171                                  ; -----------------------------------------------------------------------------
 37172                                  ; Entry:  None
 37173                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 37174                                  ; Error:  None
 37175                                  ; Uses:   Flags
 37176                                  ; -----------------------------------------------------------------------------
 37177                                  
 37178                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37179                                  UnFreeze:
 37180                                  	; 03/01/2023
 37181                                  	;push	ax
 37182 00002DD5 06                      	push	es
 37183                                  
 37184 00002DD6 E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 37185 00002DD9 721C                    	jc	short ufX
 37186                                  
 37187                                  	; 22/07/2023
 37188                                  uf10:
 37189 00002DDB 8EC0                    	mov	es,ax ; *
 37190                                  
 37191                                  ; ------------------------------
 37192                                  ; UF10--ES - Current MCB address
 37193                                  ; ------------------------------
 37194                                  
 37195                                  ;uf10:	
 37196 00002DDD E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 37197 00002DE0 7505                    	jnz	short uf20
 37198 00002DE2 E8D4FE                  	call	unHideMCB
 37199                                  	; 09/09/2023
 37200                                  	; ax <> es
 37201 00002DE5 8CC0                    	mov	ax,es ; *
 37202                                  uf20:	
 37203                                  	;mov	al,[es:ARENA.SIGNATURE]
 37204                                  	;cmp	al,arena_signature_end ; 'Z'
 37205                                  	; 22/07/2023
 37206 00002DE7 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37207 00002DED 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 37208                                  
 37209                                  	;NextMCB es,ax		; Go on forward.
 37210                                  	; 22/07/2023
 37211                                  	; ax = es
 37212                                  	;mov	ax,es ; *
 37213                                  	;add	ax,[es:3]
 37214 00002DEF 2603060300              	add	ax,[es:ARENA.SIZE]
 37215 00002DF4 40                      	inc	ax
 37216                                  	; 22/07/2023
 37217                                  	;mov	es,ax
 37218 00002DF5 EBE4                    	jmp	short uf10
 37219                                  ufX:	
 37220 00002DF7 07                      	pop	es
 37221                                  	; 03/01/2023
 37222                                  	;pop	ax
 37223 00002DF8 C3                      	retn
 37224                                  
 37225                                  ; -----------------------------------------------------------------------------
 37226                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 37227                                  ; -----------------------------------------------------------------------------
 37228                                  ; ENTRY:    ES:0 should point to an MCB
 37229                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 37230                                  ; ERROR:    None
 37231                                  ; USES:     Flags
 37232                                  ; -----------------------------------------------------------------------------
 37233                                  
 37234                                  isFrozMCB:
 37235                                  	;push	ax
 37236                                  
 37237                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37238                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37239 00002DF9 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 37240 00002DFF 7522                    	jne	short ifmX
 37241                                  
 37242                                  	;mov	ax,[es:ARENA.NAME+0]
 37243                                  	;cmp	ax,'FR' ; 5246h
 37244 00002E01 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 37245 00002E08 7519                    	jne	short ifmX
 37246                                  	;mov	ax,[es:ARENA.NAME+2]
 37247                                  	;cmp	ax,'OZ' ; 5A4Fh
 37248 00002E0A 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 37249 00002E11 7510                    	jne	short ifmX
 37250                                  	;mov	ax,[es:ARENA.NAME+4]
 37251                                  	;cmp	ax,'EN' ; 4E45h
 37252 00002E13 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37253 00002E1A 7507                    	jne	short ifmX
 37254                                  	;mov	ax,[es:ARENA.NAME+6]
 37255                                  	;cmp	ax,'  ' ; 2020h
 37256 00002E1C 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37257                                  ifmX:	
 37258                                  	;pop	ax
 37259 00002E23 C3                      	retn
 37260                                  
 37261                                  ; -----------------------------------------------------------------------------
 37262                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 37263                                  ; -----------------------------------------------------------------------------
 37264                                  ; ENTRY:    ES:0 should point to an MCB
 37265                                  ; EXIT:     None; MCB frozen
 37266                                  ; ERROR:    None
 37267                                  ; USES:     None
 37268                                  ; -----------------------------------------------------------------------------
 37269                                  
 37270                                  frezMCB:
 37271 00002E24 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37272 00002E2B 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 37273 00002E32 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 37274 00002E39 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 37275 00002E40 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 37276 00002E47 C3                      	retn
 37277                                  
 37278                                  ; -----------------------------------------------------------------------------
 37279                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 37280                                  ; -----------------------------------------------------------------------------
 37281                                  ; Entry:  None
 37282                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 37283                                  ; Error:  None
 37284                                  ; Uses:   Flags
 37285                                  ; -----------------------------------------------------------------------------
 37286                                  
 37287                                  	; 01/01/2023 - Retro DOS v4.2  
 37288                                  FreezeUM:
 37289                                  	; 01/01/2023
 37290                                  	;push	ax
 37291                                  	;push	cx
 37292                                  	;push	dx
 37293 00002E48 06                      	push	es
 37294                                  
 37295                                  	;;call	GetLoadUMB
 37296                                  	; 01/01/2023
 37297                                  	; ds = cs
 37298                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 37299 00002E49 A0[591F]                	mov	al,[UmbLoad] 	
 37300                                  
 37301 00002E4C 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37302 00002E4E 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 37303                                  
 37304 00002E50 E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 37305                                  	; 22/07/2023
 37306                                  	;mov	es,ax ; *
 37307 00002E53 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37308                                  
 37309                                  	; 22/07/2023
 37310                                  fum10:
 37311 00002E55 8EC0                    	mov	es,ax ; *
 37312                                  
 37313                                  ; -----------------------------------------
 37314                                  ; FUM10--ES - Current MCB address
 37315                                  ;        CX - Current UMB number
 37316                                  ;        DX - UMB number to skip (load UMB)
 37317                                  ; -----------------------------------------
 37318                                  
 37319                                  ;fum10:	
 37320 00002E57 E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37321 00002E5A 7501                    	jnz	short fum20
 37322                                  
 37323 00002E5C 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37324                                  fum20:	
 37325 00002E5D 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 37326 00002E5F 740B                    	je	short fum30	; freeze anything... so skip that section.
 37327                                  
 37328                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 37329 00002E61 26830E010000            	or	word [es:ARENA.OWNER],0
 37330 00002E67 7503                    	jnz	short fum30	; either.
 37331                                  
 37332 00002E69 E8B8FF                  	call	frezMCB
 37333                                  fum30:	
 37334                                  	;mov	al,[es:ARENA.SIGNATURE]
 37335                                  	;cmp	al,arena_signature_end ; 'Z'
 37336                                  	; 22/07/2023
 37337 00002E6C 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37338 00002E72 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 37339                                  
 37340                                  	;NextMCB es, ax		; Go on forward.
 37341                                  	; 22/07/2023
 37342                                  	; ax = es
 37343                                  	;mov	ax,es
 37344                                  	;add	ax,[es:3]
 37345 00002E74 2603060300              	add	ax,[es:ARENA.SIZE]
 37346 00002E79 40                      	inc	ax
 37347                                  	; 22/07/2023
 37348                                  	;mov	es,ax ; *
 37349 00002E7A EBD9                    	jmp	short fum10
 37350                                  
 37351 00002E7C 07                      fumX:	pop	es
 37352                                  	; 01/01/2023
 37353                                  	;pop	dx
 37354                                  	;pop	cx
 37355                                  	;pop	ax
 37356 00002E7D C3                      	retn
 37357                                  
 37358                                  ; -----------------------------------------------------------------------------
 37359                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 37360                                  ; -----------------------------------------------------------------------------
 37361                                  ; ENTRY:    None
 37362                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 37363                                  ; ERROR:    None
 37364                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 37365                                  ; -----------------------------------------------------------------------------
 37366                                  
 37367                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37368                                  UmbTest:
 37369                                  	; 01/01/2023
 37370                                  	;push	ax
 37371 00002E7E 53                      	push	bx ; *
 37372                                  	;push	ds
 37373 00002E7F 06                      	push	es ; **
 37374                                  
 37375                                  	; 01/01/2023
 37376                                  	; ds = cs
 37377                                  
 37378 00002E80 E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 37379 00002E83 E80800                  	call	WalkMem			; Check to see if they're really linked
 37380 00002E86 9C                      	pushf				; And remember what we found out
 37381 00002E87 E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 37382 00002E8A 9D                      	popf				; And restore what we found out.
 37383                                  
 37384 00002E8B 07                      	pop	es ; **
 37385                                  	; 01/01/2023
 37386                                  	;pop	ds
 37387 00002E8C 5B                      	pop	bx ; *
 37388                                  	;pop	ax
 37389 00002E8D C3                      	retn
 37390                                  
 37391                                  ; -----------------------------------------------------------------------------
 37392                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 37393                                  ; -----------------------------------------------------------------------------
 37394                                  ; ENTRY:    None
 37395                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 37396                                  ; ERROR:    None
 37397                                  ; USES:     Flags
 37398                                  ; -----------------------------------------------------------------------------
 37399                                  
 37400                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37401                                  	; (SYSINIT:3541h)
 37402                                  
 37403                                  WalkMem:
 37404                                  	;push	ax ; ?
 37405                                  	;push	bx ; ?
 37406                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 37407                                  	;push	es ; ? no need to save contents of these registers ?
 37408                                  		   	
 37409 00002E8E B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37410 00002E90 CD21                    	int	21h
 37411                                  
 37412 00002E92 268B47FE                	mov	ax,[es:bx-2]
 37413                                  	; 22/07/2023
 37414                                  um10:
 37415 00002E96 8EC0                    	mov	es,ax ; * ; **
 37416                                  
 37417                                  ; ------------------------------
 37418                                  ; UM10: ES = Current MCB pointer
 37419                                  ; ------------------------------
 37420                                  
 37421                                  ;um10:
 37422                                  	;mov	al,[es:ARENA.SIGNATURE]
 37423                                  	;cmp	al,arena_signature_end ; 'Z'
 37424                                  	; 22/07/2023
 37425 00002E98 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37426 00002E9E 7408                    	je	short um20		; If signature == 'Z', hay no more.
 37427                                  
 37428                                  	;NextMCB es,bx			; Move to the next MCB
 37429                                  
 37430                                  	;mov	bx,es
 37431                                  	;;add	bx,[es:3]
 37432                                  	;add	bx,[es:ARENA.SIZE]
 37433                                  	;inc	bx
 37434                                  	;mov	es,bx
 37435                                  	; 22/07/2023
 37436                                  	; ax = es
 37437                                  	;mov	ax,es ; *
 37438 00002EA0 2603060300              	add	ax,[es:ARENA.SIZE]
 37439 00002EA5 40                      	inc	ax
 37440                                  	;mov	es,ax ; **
 37441                                  	
 37442 00002EA6 EBEE                    	jmp	short um10		; And restart the loop.
 37443                                  um20:	
 37444                                  	; 22/07/2023
 37445                                  	; ax = es
 37446                                  	;mov	ax,es
 37447                                  
 37448 00002EA8 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 37449                                  
 37450                                  	;pop	es ; ?
 37451                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 37452                                  	;pop	bx ; ?
 37453                                  	;pop	ax ; ?
 37454                                  	
 37455 00002EAB C3                      	retn
 37456                                  
 37457                                  ; -----------------------------------------------------------------------------
 37458                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 37459                                  ; -----------------------------------------------------------------------------
 37460                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37461                                  ; EXIT:     None
 37462                                  ; ERROR:    None
 37463                                  ; USES:     AX, BX
 37464                                  ; -----------------------------------------------------------------------------
 37465                                  
 37466                                  	; 01/01/2023 - Retro DOS v4.2
 37467                                  hl_unlink:
 37468 00002EAC 30FF                    	xor	bh,bh
 37469                                  
 37470                                  	;getdata bl,fm_umb		; Restore original link-state
 37471                                  	;
 37472                                  	;push	ds
 37473                                  	;push	cs
 37474                                  	;pop	ds
 37475                                  	;mov	bl,[fm_umb]
 37476                                  	;pop	ds
 37477                                  
 37478                                  	; 01/01/2023
 37479                                  	; ds = cs
 37480                                  	;mov	bl,[cs:fm_umb]
 37481 00002EAE 8A1E[8A1F]              	mov	bl,[fm_umb]
 37482                                  
 37483 00002EB2 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37484 00002EB5 CD21                    	int	21h
 37485 00002EB7 C3                      	retn
 37486                                  
 37487                                  ; ----------------------------------------------------------------------
 37488                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 37489                                  ; ----------------------------------------------------------------------
 37490                                  ; 09/04/2019 - Retro DOS v4.0
 37491                                  
 37492                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 37493                                  ;   Date:     May 14, 1992
 37494                                  
 37495                                  ;   Modification log:
 37496                                  ;
 37497                                  ;     DATE    WHO      DESCRIPTION
 37498                                  ;   --------  -------  --------------------------------------------------------
 37499                                  ;   05/14/92  t-richj  Original
 37500                                  ;   06/21/92  t-richj  Final revisions before check-in
 37501                                  
 37502                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 37503                                  
 37504                                  ; -----------------------------------------------------------------------------
 37505                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 37506                                  ; -----------------------------------------------------------------------------
 37507                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 37508                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 37509                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 37510                                  ; ERROR:  None
 37511                                  ; USES:   fInHigh (from highvar.inc), carry flag
 37512                                  ; -----------------------------------------------------------------------------
 37513                                  
 37514                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37515                                  	; (SYSINIT:357Bh)
 37516                                  
 37517                                  UnHideUMBs:
 37518 00002EB8 50                      	push	ax		; Save ax for what we're about to do
 37519                                  
 37520                                  ; -----------------------------------------------------------------------------
 37521                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 37522                                  ;    length of time. Those six constitute a check of whether or not we should
 37523                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 37524                                  ;    will destroy the current link-state and memory-allocation strategy after
 37525                                  ;    every command execution.
 37526                                  ; -----------------------------------------------------------------------------
 37527                                  
 37528                                  	;getdata al,fInHigh	; Get InHigh from data segment
 37529                                  	;
 37530                                  	;push	ds
 37531                                  	;push	cs
 37532                                  	;pop	ds
 37533                                  	;mov	al,[fInHigh]
 37534                                  	;pop	ds	
 37535                                  
 37536                                  	;mov	al,[cs:fInHigh]
 37537                                  	; 31/12/2022
 37538                                  	; ds = cs
 37539 00002EB9 A0[551F]                	mov	al,[fInHigh]	
 37540                                  
 37541 00002EBC 08C0                    	or	al,al
 37542 00002EBE 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 37543                                  
 37544 00002EC0 58                      	pop	ax		; then there's nothing to do here... so
 37545 00002EC1 F9                      	stc			; restore everything and return. Just like
 37546 00002EC2 C3                      	retn			; that.
 37547                                  uhu10:	
 37548 00002EC3 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 37549 00002EC6 E81200                  	call	FreeUMBs
 37550                                  
 37551                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 37552                                  	;
 37553                                  	;push	es
 37554                                  	;push	cs
 37555                                  	;pop	es
 37556                                  	;mov	byte [es:fInHigh],0
 37557                                  	;pop	ds
 37558                                  
 37559                                  	; 31/12/2022
 37560                                  	; ds = cs	
 37561                                  	;mov	byte [cs:fInHigh],0
 37562 00002EC9 C606[551F]00            	mov	byte [fInHigh],0
 37563                                  
 37564                                  	;call	he_unlink	; Unlink UMBs
 37565                                  	; 31/12/2022
 37566                                  ;;he_unlink:
 37567 00002ECE 30FF                    	xor	bh,bh
 37568                                  
 37569                                  	;getdata bl,fm_umb	; Restore original link-state
 37570                                  	;mov	bl,[cs:fm_umb]	
 37571 00002ED0 8A1E[8A1F]              	mov	bl,[fm_umb]
 37572                                  
 37573 00002ED4 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37574 00002ED7 CD21                    	int	21h
 37575                                  	;;retn
 37576                                  
 37577 00002ED9 58                      	pop	ax
 37578                                  	; 12/12/2022
 37579                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 37580 00002EDA C3                      	retn
 37581                                  
 37582                                  ; 31/12/2022
 37583                                  ;%if 0
 37584                                  ;
 37585                                  ;; -----------------------------------------------------------------------------
 37586                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 37587                                  ;; -----------------------------------------------------------------------------
 37588                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37589                                  ;; EXIT:     None
 37590                                  ;; ERROR:    None
 37591                                  ;; USES:     AX, BX
 37592                                  ;; -----------------------------------------------------------------------------
 37593                                  ;
 37594                                  ;he_unlink:
 37595                                  ;	xor	bh, bh
 37596                                  ;
 37597                                  ;	;getdata bl, fm_umb	; Restore original link-state
 37598                                  ;	mov	bl,[cs:fm_umb]	
 37599                                  ;
 37600                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 37601                                  ;	int	21h
 37602                                  ;	retn
 37603                                  ;
 37604                                  ;%endif
 37605                                  
 37606                                  ; -----------------------------------------------------------------------------
 37607                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 37608                                  ; -----------------------------------------------------------------------------
 37609                                  ; ENTRY:    None
 37610                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 37611                                  ; ERROR:    None (ignore CF)
 37612                                  ; USES:     Flags
 37613                                  ; -----------------------------------------------------------------------------
 37614                                  
 37615                                  FreeUMBs:
 37616 00002EDB 50                      	push	ax
 37617 00002EDC 06                      	push	es
 37618                                  
 37619 00002EDD E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 37620 00002EE0 721C                    	jc	short fusX
 37621                                  fus10:
 37622 00002EE2 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 37623                                  ;fus10:	
 37624 00002EE4 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 37625 00002EE7 7505                    	jnz	short fus20
 37626 00002EE9 E84000                  	call	freeMCB
 37627                                  	; 09/09/2023
 37628                                  	; ax <> es
 37629 00002EEC 8CC0                    	mov	ax,es
 37630                                  fus20:	   
 37631                                  	;mov	al,[es:ARENA.SIGNATURE]
 37632                                  	;cmp	al,arena_signature_end ; 'Z'
 37633                                  	; 22/07/2023
 37634 00002EEE 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37635 00002EF4 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 37636                                  	
 37637                                  	; 22/07/2023
 37638                                  	; ax = es
 37639                                  	;mov	ax,es
 37640 00002EF6 2603060300              	add	ax,[es:ARENA.SIZE]
 37641 00002EFB 40                      	inc	ax
 37642                                  	; 22/07/2023
 37643                                  	;mov	es,ax
 37644 00002EFC EBE4                    	jmp	short fus10	; Go on forward.
 37645                                  fusX:	
 37646 00002EFE 07                      	pop	es
 37647 00002EFF 58                      	pop	ax
 37648 00002F00 C3                      	retn
 37649                                  
 37650                                  ; -----------------------------------------------------------------------------
 37651                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 37652                                  ; -----------------------------------------------------------------------------
 37653                                  ; ENTRY:    ES:0 should point to an MCB
 37654                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 37655                                  ; ERROR:    None
 37656                                  ; USES:     Flags
 37657                                  ; -----------------------------------------------------------------------------
 37658                                  
 37659                                  isHideMCB:
 37660                                  	;push	ax
 37661                                  
 37662 00002F01 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 37663 00002F07 7522                    	jne	short ihm_x				; then check for HIDDEN
 37664                                  
 37665                                  	;mov	ax,[es:ARENA.NAME]
 37666                                  	;cmp	ax,'HI' ; 4948h
 37667 00002F09 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 37668 00002F10 7519                    	jne	short ihm_x
 37669                                  	;mov	ax,[es:ARENA.NAME+2]
 37670                                  	;cmp	ax,'DD' ; 4444h
 37671 00002F12 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 37672 00002F19 7510                    	jne	short ihm_x
 37673                                  	;mov	ax,[es:ARENA.NAME+4]
 37674                                  	;cmp	ax,'EN' ; 4E45h
 37675 00002F1B 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37676 00002F22 7507                    	jne	short ihm_x
 37677                                  	;mov	ax,[es:ARENA.NAME+6]
 37678                                  	;cmp	ax,'  ' ; 2020h
 37679 00002F24 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37680                                  ihm_x:	
 37681                                  	;pop	ax
 37682 00002F2B C3                      	retn
 37683                                  
 37684                                  ; -----------------------------------------------------------------------------
 37685                                  ;*** freeMCB - marks as free the MCB at ES:0
 37686                                  ; -----------------------------------------------------------------------------
 37687                                  ; ENTRY:    ES:0 should point to an MCB
 37688                                  ; EXIT:     None; MCB free'd
 37689                                  ; ERROR:    None
 37690                                  ; USES:     AX
 37691                                  ; -----------------------------------------------------------------------------
 37692                                  
 37693                                  freeMCB:
 37694 00002F2C 26C70601000000          	mov	word [es:ARENA.OWNER],0
 37695 00002F33 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 37696 00002F36 26A30800                	mov	[es:ARENA.NAME+0],ax
 37697 00002F3A 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37698 00002F3E 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37699 00002F42 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37700 00002F46 C3                      	retn
 37701                                  
 37702                                  ; -----------------------------------------------------------------------------
 37703                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 37704                                  ; -----------------------------------------------------------------------------
 37705                                  ; ENTRY:  Nothing
 37706                                  ; EXIT:   AX contains 0x9FFF for most systems
 37707                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37708                                  ; USES:   Flags, AX
 37709                                  ; -----------------------------------------------------------------------------
 37710                                  
 37711                                  HeadUmb:
 37712                                  	; 13/05/2019
 37713                                  
 37714                                  	;push	si ; ?
 37715                                  	;push	ds ; ?
 37716                                  	;push	es
 37717                                  	;push	bx ; *
 37718                                  
 37719                                  	; 09/04/2019
 37720                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 37721                                  
 37722 00002F47 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37723 00002F49 CD21                    	int	21h
 37724                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37725                                  			; Return: ES:BX -> DOS list of lists
 37726                                  	;mov	ax,[es:8Ch]
 37727 00002F4B 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 37728 00002F4F 83F8FF                  	cmp	ax,0FFFFh
 37729                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 37730                                  
 37731                                  	;clc				; Else, it isn't.
 37732                                  	;jmp	short xhu_x
 37733                                  xhu_e:	
 37734                                  	;stc
 37735 00002F52 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 37736                                  xhu_x:	
 37737                                  	;pop	bx ; *
 37738                                  	;pop	es	
 37739                                  	;pop	ds ; ?
 37740                                  	;pop	si ; ?
 37741 00002F53 C3                      	retn
 37742                                  
 37743                                  ; -----------------------------------------------------------------------------
 37744                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 37745                                  ; -----------------------------------------------------------------------------
 37746                                  ; ENTRY:    None
 37747                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37748                                  ; ERROR:    None
 37749                                  ; USES:     AX, BX, fm_umb
 37750                                  ; -----------------------------------------------------------------------------
 37751                                  
 37752                                  linkumb:
 37753 00002F54 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 37754 00002F57 CD21                    	int	21h			; Current link-state is now in al
 37755                                  
 37756 00002F59 08C0                    	or	al,al			; BUGBUG: proper check?
 37757 00002F5B 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 37758                                  
 37759 00002F5D B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37760 00002F60 BB0100                  	mov	bx,1
 37761 00002F63 CD21                    	int	21h
 37762                                  lumbX:
 37763 00002F65 C3                      	retn
 37764                                  
 37765                                  ;%endif
 37766                                  
 37767                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37768                                  ; (SYSINIT:2B5Fh)
 37769                                  
 37770                                  ; ----------------------------------------------------------------------
 37771                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 37772                                  ; ----------------------------------------------------------------------
 37773                                  ; 09/04/2019 - Retro DOS v4.0
 37774                                  
 37775                                  ;----------------------------------------------------------------------------
 37776                                  ;
 37777                                  ; procedure : InitDevLoad
 37778                                  ;
 37779                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 37780                                  ;			 = 1 indicates load in UMB:
 37781                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 37782                                  ;		                    = 1 indicates a DOS 5-style load
 37783                                  ;		DevSize  = Size of the device driver file in paras
 37784                                  ;
 37785                                  ;	Output : none
 37786                                  ;
 37787                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 37788                                  ;	Also sets up a header for the Device driver entry for mem utility
 37789                                  ;
 37790                                  ;----------------------------------------------------------------------------
 37791                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 37792                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 37793                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 37794                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 37795                                  ;----------------------------------------------------------------------------
 37796                                  
 37797                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37798                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37799                                  	; (SYSINIT:364Ah)
 37800                                  InitDevLoad:
 37801                                  	; 01/01/2023
 37802                                  	;push	es ; *
 37803                                  
 37804                                  	; 11/12/2022
 37805                                  	; ds = cs
 37806 00002F66 803E[AB1F]00            	cmp	byte [DeviceHi],0
 37807                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 37808                                  	;je	short InitForLo		; no, init for lo mem
 37809 00002F6B 7439                    	je	short initforlo_x ; 09/04/2019
 37810                                  
 37811                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37812                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37813                                  ; %if 0
 37814                                  	; 01/01/2023
 37815 00002F6D 803E[9B1F]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 37816                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 37817 00002F72 7413                    	je	short InitForConv
 37818                                  
 37819                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 37820                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 37821                                  ; any areas left in upper-memory, except for elements in the load UMB...
 37822                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 37823                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 37824                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 37825                                  
 37826 00002F74 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 37827                                  
 37828 00002F77 E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 37829 00002F7A E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 37830 00002F7D E85700                  	call	GetUMBForDev		; And grab that load area as needed
 37831 00002F80 9C                      	pushf
 37832 00002F81 E851FE                  	call	UnFreeze		; Then unhide everything frozen
 37833 00002F84 9D                      	popf
 37834                                  	;jc	short InitForLo		; (if carry, it's loading low)
 37835                                  	;jmp	short InitForHi
 37836                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 37837 00002F85 EB0B                    	jmp	short idl0
 37838                                  
 37839                                  ;%endif ; 01/11/2022
 37840                                  
 37841                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37842                                  	; (SYSINIT:2B67h)
 37843                                  InitForConv:
 37844                                  	; 11/12/2022
 37845                                  	; ds = cs
 37846 00002F87 E83700                  	call	SpaceInUMB		; Do we have space left in the
 37847                                  					;  current UMB ?
 37848 00002F8A 7308                    	jnc	short InitForHi		; yes, we have
 37849 00002F8C E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 37850 00002F8F E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 37851                                  idl0: ; 06/07/2023
 37852 00002F92 720D                    	jc	short InitForLo		; we didn't succeed, so load
 37853                                  					;  in low memory
 37854                                  InitForHi:
 37855                                  	; 11/12/2022
 37856                                  	; ds = cs
 37857                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 37858                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 37859                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 37860 00002F94 A1[A11F]                	mov	ax,[DevUMBFree]
 37861 00002F97 8B16[9D1F]              	mov	dx,[DevUMBAddr]
 37862 00002F9B 0316[9F1F]              	add	dx,[DevUMBSize]
 37863 00002F9F EB0C                    	jmp	short idl1
 37864                                  
 37865                                  InitForLo:
 37866                                  	; 11/12/2022
 37867                                  	; ds = cs
 37868                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 37869 00002FA1 C606[AB1F]00            	mov	byte [DeviceHi],0
 37870                                  initforlo_x:
 37871                                  	; 11/12/2022
 37872                                  	; ds = cs
 37873                                  					;  into UMB indicate that
 37874                                  					;  we are loading low
 37875                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 37876                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 37877 00002FA6 A1[6203]                	mov	ax,[memhi]
 37878 00002FA9 8B16[A302]              	mov	dx,[ALLOCLIM]
 37879                                  idl1:
 37880 00002FAD E86600                  	call	DevSetMark		; setup a sub-arena for DD
 37881                                  	; 11/12/2022
 37882                                  	; ds = cs
 37883                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 37884                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 37885                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 37886                                  	;mov	[cs:DevEntry+2],ax
 37887 00002FB0 A3[8F1F]                	mov	[DevLoadAddr],ax
 37888 00002FB3 8916[911F]              	mov	[DevLoadEnd],dx
 37889 00002FB7 C706[931F]0000          	mov	word [DevEntry],0
 37890 00002FBD A3[951F]                	mov	[DevEntry+2],ax
 37891                                  	; 01/01/2023
 37892                                  	;pop	es ; *
 37893 00002FC0 C3                      	retn
 37894                                  
 37895                                  ;----------------------------------------------------------------------------
 37896                                  ;
 37897                                  ; procedure : SpaceInUMB?
 37898                                  ;
 37899                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 37900                                  ;	Output : Carry set if no space in UMB
 37901                                  ;		 Carry clear if Space is available for the device in
 37902                                  ;		   current UMB
 37903                                  ;
 37904                                  ;----------------------------------------------------------------------------
 37905                                  
 37906                                  SpaceInUMB:
 37907                                  	; 11/12/2022
 37908                                  	; ds = cs
 37909                                  	;mov	ax,[cs:DevUMBSize]
 37910                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 37911                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 37912 00002FC1 A1[9F1F]                	mov	ax,[DevUMBSize]
 37913 00002FC4 0306[9D1F]              	add	ax,[DevUMBAddr]		; End of UMB
 37914 00002FC8 2B06[A11F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 37915                                  	; 11/12/2022
 37916                                  	;or	ax,ax			; Nospace ?
 37917                                  	;jnz	short spcinumb1
 37918                                  	;stc
 37919                                  	;retn
 37920                                  	; 11/12/2022
 37921 00002FCC 83F801                  	cmp	ax,1
 37922 00002FCF 7205                    	jb	short spcinumb2	; cf=1
 37923                                  spcinumb1:
 37924 00002FD1 48                      	dec	ax			; space for sub-arena
 37925                                  	; 11/12/2022
 37926                                  	; ds = cs
 37927 00002FD2 3B06[8D1F]              	cmp	ax,[DevSize]
 37928                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 37929                                  spcinumb2:
 37930 00002FD6 C3                      	retn
 37931                                  
 37932                                  ;----------------------------------------------------------------------------
 37933                                  ;
 37934                                  ; procedure : PrepareMark
 37935                                  ;
 37936                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 37937                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 37938                                  ;
 37939                                  ;----------------------------------------------------------------------------
 37940                                  
 37941                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37942                                  ;
 37943                                  ;PrepareMark:
 37944                                  ;	push	ds
 37945                                  ;	mov	ds,ax
 37946                                  ;	mov	word [ARENA.OWNER],8
 37947                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 37948                                  ;	pop	ds
 37949                                  ;
 37950                                  ;	inc	ax
 37951                                  ;	mov	[cs:DevUMBAddr],ax
 37952                                  ;	mov	[cs:DevUMBFree],ax
 37953                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 37954                                  ;	retn
 37955                                  
 37956                                  ;----------------------------------------------------------------------------
 37957                                  ;
 37958                                  ; procedure : GetUMBForDev
 37959                                  ;
 37960                                  ;	Input : DevSize
 37961                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 37962                                  ;		 the device.
 37963                                  ;		 If success carry clear
 37964                                  ;
 37965                                  ;	Allocates the biggest UMB for loading devices and updates
 37966                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 37967                                  ;	UMB.
 37968                                  ;
 37969                                  ;	This routine relies on the fact that all of the low memory
 37970                                  ;	is allocated, and any DOS alloc calls should return memory
 37971                                  ;	from the UMB pool.
 37972                                  ;
 37973                                  ;----------------------------------------------------------------------------
 37974                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37975                                  	; (SYSINIT:2BC6h)
 37976                                  
 37977                                  GetUMBForDev:
 37978                                  	; 11/12/2022
 37979                                  	; ds = cs
 37980 00002FD7 BBFFFF                  	mov	bx,0FFFFh
 37981 00002FDA B80048                  	mov	ax,4800h
 37982 00002FDD CD21                    	int	21h
 37983                                  		; DOS - 2+ - ALLOCATE MEMORY
 37984                                  		; BX = number of 16-byte paragraphs desired
 37985                                  
 37986 00002FDF 09DB                    	or	bx,bx
 37987                                  	;jz	short gufd_err
 37988                                  	; 09/09/2023
 37989 00002FE1 742E                    	jz	short gufd_error ; bx = 0
 37990                                  
 37991 00002FE3 4B                      	dec	bx
 37992                                  	; 11/12/2022
 37993                                  	; ds = cs
 37994 00002FE4 391E[8D1F]              	cmp	[DevSize],bx
 37995                                  	;cmp	[cs:DevSize],bx
 37996 00002FE8 7725                    	ja	short gufd_err
 37997                                  
 37998 00002FEA 43                      	inc	bx
 37999                                  
 38000 00002FEB B80048                  	mov	ax,4800h
 38001 00002FEE CD21                    	int	21h
 38002 00002FF0 721D                    	jc	short gufd_err
 38003                                  
 38004                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38005                                  	;dec	ax
 38006                                  	;call	PrepareMark
 38007                                  	;
 38008                                  PrepareMark:
 38009 00002FF2 1E                      	push	ds
 38010 00002FF3 48                      	dec	ax
 38011 00002FF4 8ED8                    	mov	ds,ax
 38012 00002FF6 C70601000800            	mov	word [ARENA.OWNER],8
 38013 00002FFC C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 38014 00003002 40                      	inc	ax
 38015 00003003 1F                      	pop	ds
 38016                                  	; 11/12/2022
 38017                                  	; ds = cs
 38018                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 38019                                  	;mov	[cs:DevUMBAddr],ax
 38020                                  	;mov	[cs:DevUMBFree],ax
 38021                                  gufd_x:		; 09/09/2023
 38022 00003004 891E[9F1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 38023 00003008 A3[9D1F]                	mov	[DevUMBAddr],ax
 38024 0000300B A3[A11F]                	mov	[DevUMBFree],ax
 38025                                  	;
 38026                                  	; 11/12/2022
 38027                                  	; cf=0
 38028                                  	;clc				; mark no error
 38029 0000300E C3                      	retn
 38030                                  
 38031                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38032                                  %if 1
 38033                                  gufd_err:
 38034 0000300F 31DB                    	xor	bx,bx ; 0
 38035                                  gufd_error:
 38036 00003011 31C0                    	xor	ax,ax ; 0
 38037 00003013 F9                      	stc	; cf=1
 38038 00003014 EBEE                    	jmp	short gufd_x	
 38039                                  %endif
 38040                                  
 38041                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38042                                  %if 0
 38043                                  gufd_err:
 38044                                  	xor	ax,ax ; 0
 38045                                  	; 11/12/2022
 38046                                  	; ds = cs
 38047                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 38048                                  	;mov	[cs:DevUMBAddr],ax
 38049                                  	;mov	[cs:DevUMBFree],ax
 38050                                  	mov	[DevUMBSize],ax		; erase the previous values
 38051                                  	mov	[DevUMBAddr],ax
 38052                                  	mov	[DevUMBFree],ax
 38053                                  	stc
 38054                                  	retn
 38055                                  %endif
 38056                                  
 38057                                  ;----------------------------------------------------------------------------
 38058                                  ;
 38059                                  ; procedure : DevSetMark
 38060                                  ;
 38061                                  ;	Input : AX - Free segment were device is going to be loaded
 38062                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 38063                                  ;
 38064                                  ;	Creates a sub-arena for the device driver
 38065                                  ;	puts 'D' marker in the sub-arena
 38066                                  ;	Put the owner of the sub-arena as (AX+1)
 38067                                  ;	Copies the file name into sub-arena name field
 38068                                  ;
 38069                                  ;	Size field of the sub-arena will be set only at succesful
 38070                                  ;	completion of Device load.
 38071                                  ;
 38072                                  ;----------------------------------------------------------------------------
 38073                                  
 38074                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38075                                  	; (SYSINIT:2C13h)
 38076                                  
 38077                                  DevSetMark:
 38078 00003016 06                      	push	es
 38079                                  	; 03/01/2023
 38080                                  	;push	di
 38081 00003017 1E                      	push	ds
 38082 00003018 56                      	push	si
 38083 00003019 8EC0                    	mov	es,ax
 38084 0000301B 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 38085 00003021 40                      	inc	ax
 38086 00003022 26A30100                	mov	[es:devmark.seg],ax
 38087                                  
 38088                                  ;-------------- Copy file name
 38089                                  
 38090 00003026 50                      	push	ax			; save load addr
 38091                                  
 38092                                  	; 09/09/2023
 38093                                  	; ds = cs
 38094                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 38095 00003027 C536[7A03]              	lds	si,[bpb_addr]
 38096                                  
 38097 0000302B 89F7                    	mov	di,si
 38098 0000302D FC                      	cld
 38099                                  dsm_again:
 38100 0000302E AC                      	lodsb
 38101 0000302F 3C3A                    	cmp	al,':'
 38102 00003031 7504                    	jne	short isit_slash
 38103 00003033 89F7                    	mov	di,si
 38104 00003035 EBF7                    	jmp	short dsm_again
 38105                                  isit_slash:
 38106 00003037 3C5C                    	cmp	al, '\'
 38107 00003039 7504                    	jne	short isit_null
 38108 0000303B 89F7                    	mov	di,si
 38109 0000303D EBEF                    	jmp	short dsm_again
 38110                                  isit_null:
 38111 0000303F 08C0                    	or	al,al
 38112 00003041 75EB                    	jnz	short dsm_again
 38113 00003043 89FE                    	mov	si,di
 38114                                  
 38115 00003045 BF0800                  	mov	di,devmark.filename ; 8
 38116 00003048 B90800                  	mov	cx,8			; maximum 8 characters
 38117                                  dsm_next_char:
 38118 0000304B AC                      	lodsb
 38119 0000304C 08C0                    	or	al, al
 38120 0000304E 7407                    	jz	short blankout
 38121 00003050 3C2E                    	cmp	al, '.'
 38122 00003052 7403                    	je	short blankout
 38123 00003054 AA                      	stosb
 38124 00003055 E2F4                    	loop	dsm_next_char
 38125                                  blankout:
 38126 00003057 E304                    	jcxz	dsm_exit
 38127 00003059 B020                    	mov	al, ' '
 38128 0000305B F3AA                    	rep	stosb			; blank out the rest
 38129                                  dsm_exit:
 38130 0000305D 58                      	pop	ax			; restore load addr
 38131 0000305E 5E                      	pop	si
 38132 0000305F 1F                      	pop	ds
 38133                                  	; 03/01/2023
 38134                                  	;pop	di
 38135 00003060 07                      	pop	es
 38136 00003061 C3                      	retn
 38137                                  
 38138                                  ;----------------------------------------------------------------------------
 38139                                  ;
 38140                                  ; procedure : SizeDevice
 38141                                  ;
 38142                                  ;	Input : ES:SI - points to device file to be sized
 38143                                  ;
 38144                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 38145                                  ;
 38146                                  ;	Calculates the size of the device file in paras and stores it
 38147                                  ;	in DevSize
 38148                                  ;
 38149                                  ;----------------------------------------------------------------------------
 38150                                  
 38151                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38152                                  SizeDevice:
 38153                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38154                                  	; 11/12/2022 ; *
 38155 00003062 1E                      	push	ds ; *
 38156 00003063 06                      	push	es
 38157 00003064 1F                      	pop	ds
 38158 00003065 89F2                    	mov	dx,si			; ds:dx -> file name
 38159 00003067 B8003D                  	mov	ax,3D00h		; open
 38160 0000306A CD21                    	int	21h
 38161 0000306C 7237                    	jc	short sd_err		; open failed
 38162                                  
 38163 0000306E 89C3                    	mov	bx,ax			; BX - file handle
 38164 00003070 B80242                  	mov	ax,4202h		; seek
 38165 00003073 31C9                    	xor	cx,cx
 38166 00003075 89CA                    	mov	dx,cx			; to end of file
 38167 00003077 CD21                    	int	21h
 38168 00003079 7223                    	jc	short sd_close		; did seek fail (impossible)
 38169 0000307B 83C00F                  	add	ax,15			; para convert
 38170 0000307E 83D200                  	adc	dx,0
 38171 00003081 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 38172                                  	;jz	short szdev1		; no
 38173                                  	; 22/07/2023
 38174 00003085 7409                    	jz	short sd_ctp
 38175 00003087 2EC706[8D1F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 38176                                  					; assuming that we fail later
 38177 0000308E EB0E                    	jmp	short sd_close
 38178                                  sd_ctp:	
 38179                                  	; 22/07/2023
 38180                                  ;szdev1:
 38181 00003090 B104                    	mov	cl,4			; convert it to paras
 38182 00003092 D3E8                    	shr	ax,cl
 38183 00003094 B10C                    	mov	cl,12
 38184 00003096 D3E2                    	shl	dx,cl
 38185 00003098 09D0                    	or	ax,dx ; * ; cf=0
 38186                                  	;
 38187                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 38188                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 38189                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38190                                  	;cmp	ax,[cs:DevSizeOption]
 38191                                  	;ja	short szdev2
 38192                                  	;mov	ax,[cs:DevSizeOption]
 38193                                  	; 12/12/2022
 38194                                  	;clc
 38195                                  ;szdev2:
 38196 0000309A 2EA3[8D1F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 38197                                  	; 22/07/2023
 38198                                  	;clc ; cf=0 ; *	; CLC is not needed here
 38199                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 38200                                  
 38201                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38202                                  	; 12/12/2022
 38203                                  	; cf=0
 38204                                  	;clc
 38205                                  sd_close:
 38206 0000309E 9C                      	pushf				; let close not spoil our
 38207                                  					;  carry flag
 38208 0000309F B8003E                  	mov	ax,3E00h		; close
 38209 000030A2 CD21                    	int	21h			; we are not checking for err
 38210 000030A4 9D                      	popf
 38211                                  sd_err:
 38212                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38213                                  	; 11/12/2022 ; *
 38214 000030A5 1F                      	pop     ds ; *
 38215 000030A6 C3                      	retn
 38216                                  
 38217                                  ;----------------------------------------------------------------------------
 38218                                  ;
 38219                                  ; procedure : ExecDev
 38220                                  ;
 38221                                  ;	Input : ds:dx -> device to be executed
 38222                                  ;		DevLoadAddr - contains where device has to be loaded
 38223                                  ;
 38224                                  ;	Output : Carry if error
 38225                                  ;		 Carry clear if no error
 38226                                  ;
 38227                                  ;	Loads a device driver using the 4b03h function call
 38228                                  ;
 38229                                  ;----------------------------------------------------------------------------
 38230                                  
 38231                                  	; 01/11/2022
 38232                                  ExecDev:
 38233 000030A7 2E8B1E[8F1F]            	mov	bx,[cs:DevLoadAddr]
 38234 000030AC 2E891E[A71F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 38235                                  					;  block for exec with
 38236                                  					;  load address
 38237 000030B1 2E891E[A91F]            	mov	[cs:DevExecReloc],bx
 38238 000030B6 8CCB                    	mov	bx,cs
 38239 000030B8 8EC3                    	mov	es,bx
 38240 000030BA BB[A71F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 38241                                  	;mov	al,3	; (load program only)
 38242                                  	;mov	ah,EXEC ; 4Bh
 38243                                  	; 04/07/2023
 38244 000030BD B8034B                  	mov	ax,(EXEC<<8)|03h
 38245 000030C0 CD21                    	int	21h			; load in the device driver
 38246                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 38247                                  		; DS:DX -> ASCIZ filename
 38248                                  		; ES:BX -> parameter block
 38249                                  		; AL = subfunction 
 38250 000030C2 C3                      	retn
 38251                                  
 38252                                  ;----------------------------------------------------------------------------
 38253                                  ;
 38254                                  ; procedure : RetFromUM
 38255                                  ;
 38256                                  ;	Input : None
 38257                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 38258                                  ;		 ConvLoad clear if did.
 38259                                  ;
 38260                                  ;	Prepares memory for more devices after returning from loading one
 38261                                  ;	using the DOS 6 options (/L:... etc).
 38262                                  ;
 38263                                  ;----------------------------------------------------------------------------
 38264                                  
 38265                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38266                                  ;  (SYSINIT:37D1h)
 38267                                  
 38268                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38269                                  ;%if 0
 38270                                  RetFromUM:
 38271                                  	; 31/12/2022
 38272                                  	; ds = cs
 38273 000030C3 9C                      	pushf
 38274                                  	;mov	byte [cs:ConvLoad],1
 38275 000030C4 C606[9B1F]01            	mov	byte [ConvLoad],1
 38276 000030C9 E8ECFD                  	call	UnHideUMBs
 38277 000030CC 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 38278                                  	; 31/12/2022
 38279                                  	; ds = cs
 38280                                  	;;mov	byte [cs:ConvLoad],0
 38281                                  	;mov	byte [ConvLoad],0
 38282                                  	; 09/09/2023
 38283 000030CE FE0E[9B1F]              	dec	byte [ConvLoad] ; -> 0
 38284                                  rfUM1:	
 38285 000030D2 9D                      	popf
 38286 000030D3 C3                      	retn
 38287                                  
 38288                                  ;%endif ; 01/11/2022
 38289                                  
 38290                                  ;----------------------------------------------------------------------------
 38291                                  ;
 38292                                  ; procedure : RemoveNull
 38293                                  ;
 38294                                  ;	Input : ES:SI points to a null terminated string
 38295                                  ;
 38296                                  ;	Output : none
 38297                                  ;
 38298                                  ;	Replaces the null at the end of a string with blank
 38299                                  ;
 38300                                  ;----------------------------------------------------------------------------
 38301                                  
 38302                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38303                                  	; (SYSINIT:2CCEh)
 38304                                  RemoveNull:
 38305                                  	; 11/12/2022
 38306                                  	; ds = cs
 38307                                  rn_next:
 38308 000030D4 268A1C                  	mov	bl,[es:si]
 38309 000030D7 08DB                    	or	bl,bl			; null ?
 38310 000030D9 7403                    	jz	short rn_gotnull
 38311 000030DB 46                      	inc	si			; advance the pointer
 38312 000030DC EBF6                    	jmp	short rn_next
 38313                                  rn_gotnull:
 38314                                  	; 11/12/2022
 38315 000030DE 8A1E[C01F]              	mov	bl,[DevSavedDelim]
 38316                                  	;mov	bl,[cs:DevSavedDelim]
 38317 000030E2 26881C                  	mov	[es:si],bl		; replace null with blank
 38318                                  	; 02/11/2022
 38319                                  ; 11/12/2022
 38320                                  rba_ok:		; 10/04/2019
 38321 000030E5 C3                      	retn
 38322                                  
 38323                                  ;----------------------------------------------------------------------------
 38324                                  ;
 38325                                  ; procedure : RoundBreakAddr
 38326                                  ;
 38327                                  ;	Input : DevBrkAddr
 38328                                  ;	Output : DevBrkAddr
 38329                                  ;
 38330                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 38331                                  ;
 38332                                  ;----------------------------------------------------------------------------
 38333                                  
 38334                                  RoundBreakAddr:
 38335 000030E6 2EA1[971F]              	mov	ax,[cs:DevBrkAddr]
 38336 000030EA E87FE0                  	call	ParaRound
 38337 000030ED 2E0106[991F]            	add	[cs:DevBrkAddr+2],ax
 38338 000030F2 2EC706[971F]0000        	mov	word [cs:DevBrkAddr],0
 38339 000030F9 2EA1[911F]              	mov	ax,[cs:DevLoadEnd]
 38340 000030FD 2E3906[991F]            	cmp	[cs:DevBrkAddr+2],ax
 38341 00003102 76E1                    	jbe	short rba_ok
 38342 00003104 E9C710                  	jmp	mem_err
 38343                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38344                                  	; 11/12/2022
 38345                                  ;rba_ok:
 38346                                  ;	retn
 38347                                  
 38348                                  ;----------------------------------------------------------------------------
 38349                                  ;
 38350                                  ; procedure : DevSetBreak
 38351                                  ;
 38352                                  ;	Input : DevBrkAddr
 38353                                  ;	Output : Carry set if Device returned Init failed
 38354                                  ;		 Else carry clear
 38355                                  ;
 38356                                  ;----------------------------------------------------------------------------
 38357                                  
 38358                                  DevSetBreak:
 38359 00003107 50                      	push	ax
 38360                                  
 38361 00003108 2EA1[991F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 38362 0000310C 2E803E[DE14]00          	cmp	byte [cs:multdeviceflag],0
 38363 00003112 750F                    	jne	short set_break_continue ;do not check it.
 38364 00003114 2E3B06[8F1F]            	cmp	ax,[cs:DevLoadAddr]
 38365 00003119 7508                    	jne	short set_break_continue ;if not same, then o.k.
 38366                                  
 38367                                  	;cmp	word [cs:DevBrkAddr],0
 38368                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 38369                                  	; 12/12/2022
 38370 0000311B 2E833E[971F]01          	cmp	word [cs:DevBrkAddr],1
 38371 00003121 7204                    	jb	short break_failed
 38372                                  
 38373                                  set_break_continue:
 38374 00003123 E8C0FF                  	call	RoundBreakAddr
 38375                                  	; 12/12/2022
 38376 00003126 F8                      	clc
 38377                                  break_failed:
 38378 00003127 58                      	pop	ax
 38379                                  	;clc
 38380 00003128 C3                      	retn
 38381                                  
 38382                                  	; 12/12/2022
 38383                                  ;break_failed:
 38384                                  	;pop	ax
 38385                                  	;stc
 38386                                  	;retn
 38387                                  
 38388                                  ;----------------------------------------------------------------------------
 38389                                  ;
 38390                                  ; procedure : DevBreak
 38391                                  ;
 38392                                  ;	Input : DevLoadAddr & DevBrkAddr
 38393                                  ;	Output : none
 38394                                  ;
 38395                                  ;	Marks a succesful install of a device driver
 38396                                  ;	Sets device size field in sub-arena &
 38397                                  ;	Updates Free ptr in UMB or adjusts memhi
 38398                                  ;
 38399                                  ;----------------------------------------------------------------------------
 38400                                  
 38401                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38402                                  DevBreak:
 38403                                  	;push	ds ; 11/12/2022
 38404                                  
 38405                                  	; 11/12/2022
 38406 00003129 0E                      	push	cs
 38407 0000312A 1F                      	pop	ds
 38408                                  	;mov	ax,[cs:DevLoadAddr]
 38409                                  	;mov	bx,[cs:DevBrkAddr+2]
 38410 0000312B A1[8F1F]                	mov	ax,[DevLoadAddr]
 38411 0000312E 8B1E[991F]              	mov	bx,[DevBrkAddr+2]
 38412                                  	; 11/12/2022
 38413 00003132 1E                      	push	ds
 38414                                  
 38415 00003133 48                      	dec	ax			; seg of sub-arena
 38416 00003134 8ED8                    	mov	ds,ax
 38417 00003136 40                      	inc	ax			; Back to Device segment
 38418 00003137 29D8                    	sub	ax,bx
 38419 00003139 F7D8                    	neg	ax			; size of device in paras
 38420 0000313B A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 38421                                  	
 38422                                  	; 11/12/2022
 38423 0000313E 1F                      	pop	ds
 38424                                  	; ds = cs
 38425                                   	
 38426 0000313F 803E[AB1F]00            	cmp	byte [DeviceHi],0
 38427                                  	;cmp	byte [cs:DeviceHi],0
 38428 00003144 7405                    	je	short db_lo
 38429                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 38430                                  	;jmp	short db_exit
 38431                                  	; 11/12/2022
 38432 00003146 891E[A11F]              	mov	[DevUMBFree],bx
 38433 0000314A C3                      	retn	
 38434                                  db_lo:
 38435                                  	; 11/12/2022
 38436                                  	; ds = cs
 38437                                  	;mov	[cs:memhi],bx
 38438                                  	;mov	word [cs:memlo],0
 38439 0000314B 891E[6203]              	mov	[memhi],bx
 38440 0000314F C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 38441                                  db_exit:
 38442                                  	;pop	ds ; 11/12/2022
 38443                                  sd_ret:		; 09/09/2023
 38444 00003155 C3                      	retn
 38445                                  
 38446                                  ; 10/04/2019 - Retro DOS v4.0
 38447                                  
 38448                                  ;----------------------------------------------------------------------------
 38449                                  ;
 38450                                  ; procedure : ParseSize
 38451                                  ;
 38452                                  ;	Parses the command line for SIZE= command
 38453                                  ;
 38454                                  ;	ES:SI = command line to parsed
 38455                                  ;
 38456                                  ;	returns ptr to command line after SIZE= option in ES:SI
 38457                                  ;	updates the DevSizeOption variable with value supplied
 38458                                  ;	in SIZE=option
 38459                                  ;	Returns carry if the SIZE option was invalid
 38460                                  ;
 38461                                  ;----------------------------------------------------------------------------
 38462                                  
 38463                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38464                                  	; (SYSINIT:2D5Ah)
 38465                                  
 38466                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 38467                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 38468                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 38469                                  ParseSize:
 38470                                  	;push	bx
 38471                                  	;mov	bx,si
 38472                                  
 38473                                  	; 09/09/2023
 38474 00003156 56                      	push	si ; * ; mov bx,si
 38475                                  
 38476                                  	; 11/12/2022
 38477                                  	; ds = cs
 38478                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 38479                                  	;mov	[cs:DevCmdLine],si
 38480                                  	;mov	[cs:DevCmdLine+2],es
 38481 00003157 C706[AC1F]0000          	mov	word [DevSizeOption],0 ; init the value
 38482 0000315D 8936[BC1F]              	mov	[DevCmdLine],si
 38483 00003161 8C06[BE1F]              	mov	[DevCmdLine+2],es	
 38484 00003165 E82400                  	call	SkipDelim
 38485 00003168 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 38486 0000316D 7528                    	jne	short ps_no_size
 38487 0000316F 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 38488 00003175 7520                    	jne	short ps_no_size
 38489 00003177 268A4404                	mov	al,[es:si+4]
 38490 0000317B E8AB0F                  	call	delim
 38491                                  	;jne	short ps_no_size
 38492                                  	; 22/07/2023
 38493 0000317E 7518                    	jne	short ps_no_size_2 ; cf=0 here
 38494 00003180 83C605                  	add	si,5
 38495 00003183 E81400                  	call	GetHexNum
 38496 00003186 7210                    	jc	short ps_err
 38497                                  	; 11/12/2022
 38498                                  	; ds = cs
 38499                                  	;mov	[cs:DevSizeOption],ax
 38500 00003188 A3[AC1F]                	mov	[DevSizeOption],ax
 38501                                  	
 38502                                  	; 09/09/2023
 38503 0000318B 58                      	pop	ax  ; * (discard previous si value on top of stack)
 38504                                  
 38505                                  ;	call	SkipDelim ; **
 38506                                  ;	
 38507                                  ;	; 22/07/2023
 38508                                  ;;ps_no_size_2:
 38509                                  ;	; cf = 0
 38510                                  ;	retn
 38511                                  
 38512                                  	; 09/09/2023
 38513                                  	;jmp	short SkipDelim
 38514                                  
 38515                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38516                                  %if 1
 38517                                  	; 01/11/2022
 38518                                  SkipDelim:
 38519                                  sd_next_char:
 38520 0000318C 268A04                  	mov	al,[es:si]
 38521 0000318F E8970F                  	call	delim
 38522 00003192 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 38523 00003194 46                      	inc	si
 38524 00003195 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 38525                                  	; 11/12/2022
 38526                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38527                                  ;sd_ret:
 38528                                  	;retn
 38529                                  %endif
 38530                                  
 38531                                  	;;;call	SkipDelim ; **
 38532                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38533                                  	;mov	bx,si
 38534                                  ps_no_size:
 38535                                  	;mov	si,bx
 38536                                  	;pop	bx
 38537 00003197 F8                      	clc	; cf=0
 38538                                  	;retn
 38539                                  	; 11/12/2022
 38540                                  ps_err:		; cf=1
 38541                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 38542                                  	; 09/09/2023
 38543 00003198 5E                      	pop	si ; * ; mov si,bx
 38544                                  ;sd_ret:	; cf=?
 38545 00003199 C3                      	retn
 38546                                  
 38547                                  ;ps_err:
 38548                                  	; 02/11/2022
 38549                                  	;pop	bx
 38550                                  	;stc
 38551                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38552                                  	; 11/12/2022
 38553                                  	; cf=1
 38554                                  	;stc
 38555                                  	; 11/12/2022
 38556                                  ;sd_ret: 
 38557                                  	; 22/07/2023
 38558                                  	; 12/04/2019
 38559                                  	;retn
 38560                                  
 38561                                  ; 12/04/2019 - Retro DOS v4.0
 38562                                  
 38563                                  ;----------------------------------------------------------------------------
 38564                                  ;
 38565                                  ; procedure : SkipDelim
 38566                                  ;
 38567                                  ;	Skips delimiters in the string pointed to by ES:SI
 38568                                  ;	Returns ptr to first non-delimiter character in ES:SI
 38569                                  ;
 38570                                  ;----------------------------------------------------------------------------
 38571                                  
 38572                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38573                                  %if 0
 38574                                  	; 01/11/2022
 38575                                  SkipDelim:
 38576                                  sd_next_char:
 38577                                  	mov	al,[es:si]
 38578                                  	call	delim
 38579                                  	jnz	short sd_ret
 38580                                  	inc	si
 38581                                  	jmp	short sd_next_char ; 01/11/2022
 38582                                  	; 11/12/2022
 38583                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38584                                  ;sd_ret:
 38585                                  	;retn
 38586                                  %endif
 38587                                  
 38588                                  ;----------------------------------------------------------------------------
 38589                                  ;
 38590                                  ; procedure : GetHexNum
 38591                                  ;
 38592                                  ;	Converts an ascii string terminated by a delimiter into binary.
 38593                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 38594                                  ;
 38595                                  ;	Returns in AX the number number of paras equivalent to the
 38596                                  ;	hex number of bytes specified by the hexadecimal string.
 38597                                  ;
 38598                                  ;	Returns carry in case it encountered a non-hex character or
 38599                                  ;	if it encountered crlf
 38600                                  ;
 38601                                  ;----------------------------------------------------------------------------
 38602                                  
 38603                                  ; 13/05/2019
 38604                                  
 38605                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38606                                  	; (SYSINIT:38C5h)
 38607                                  
 38608                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38609                                  	; (SYSINIT:2DA5h)
 38610                                  GetHexNum:
 38611 0000319A 31C0                    	xor	ax,ax
 38612 0000319C 31D2                    	xor	dx,dx
 38613                                  ghn_next:
 38614 0000319E 268A1C                  	mov	bl,[es:si]
 38615 000031A1 80FB0D                  	cmp	bl,cr  ; 0Dh
 38616 000031A4 7436                    	je	short ghn_err
 38617 000031A6 80FB0A                  	cmp	bl,lf  ; 0Ah
 38618 000031A9 7431                    	je	short ghn_err
 38619 000031AB 50                      	push	ax
 38620 000031AC 88D8                    	mov	al,bl
 38621 000031AE E8780F                  	call	delim
 38622 000031B1 58                      	pop	ax
 38623                                  	; 03/01/2023
 38624 000031B2 B90400                  	mov	cx,4
 38625 000031B5 7410                    	jz	short ghn_into_paras
 38626 000031B7 E82400                  	call	GetNibble
 38627                                  	;jc	short ghn_err
 38628                                  	; 11/12/2022
 38629 000031BA 7221                    	jc	short ghn_ret ; cf=1
 38630                                  	; 03/01/2023
 38631                                  	;mov	cx,4
 38632                                  ghn_shift1:
 38633 000031BC D1E0                    	shl	ax,1
 38634 000031BE D1D2                    	rcl	dx,1
 38635 000031C0 E2FA                    	loop	ghn_shift1
 38636 000031C2 08D8                    	or	al,bl
 38637 000031C4 46                      	inc	si
 38638 000031C5 EBD7                    	jmp	short ghn_next
 38639                                  ghn_into_paras:
 38640 000031C7 83C00F                  	add	ax,15
 38641 000031CA 83D200                  	adc	dx,0
 38642 000031CD F7C2F0FF                	test	dx,0FFF0h
 38643 000031D1 7509                    	jnz	short ghn_err
 38644                                  	; 03/01/2023
 38645                                  	;mov	cx,4
 38646                                  ghn_shift2:
 38647 000031D3 F8                      	clc
 38648 000031D4 D1DA                    	rcr	dx,1
 38649 000031D6 D1D8                    	rcr	ax,1
 38650 000031D8 E2F9                    	loop	ghn_shift2
 38651 000031DA F8                      	clc
 38652 000031DB C3                      	retn
 38653                                  	; 11/12/2022
 38654                                  ghn_err:
 38655                                  gnib_err:
 38656 000031DC F9                      	stc
 38657                                  ghn_ret:
 38658                                  gnib_ret:
 38659 000031DD C3                      	retn
 38660                                  
 38661                                  ;----------------------------------------------------------------------------
 38662                                  ;
 38663                                  ; procedure : GetNibble
 38664                                  ;
 38665                                  ;	Convert one nibble (hex digit) in BL into binary
 38666                                  ;
 38667                                  ;	Returns binary value in BL
 38668                                  ;
 38669                                  ;	Returns carry if BL contains non-hex digit
 38670                                  ;
 38671                                  ;----------------------------------------------------------------------------
 38672                                  
 38673                                  GetNibble:
 38674 000031DE 80FB30                  	cmp	bl,'0'
 38675                                  	;jb	short gnib_err
 38676                                  	; 11/12/2022
 38677 000031E1 72FA                    	jb	short gnib_ret ; cf=1
 38678 000031E3 80FB39                  	cmp	bl,'9'
 38679 000031E6 7704                    	ja	short is_it_hex
 38680 000031E8 80EB30                  	sub	bl,'0'		; clc
 38681 000031EB C3                      	retn
 38682                                  is_it_hex:
 38683 000031EC 80FB41                  	cmp	bl,'A'
 38684                                  	;jb	short gnib_err
 38685                                  	; 11/12/2022
 38686 000031EF 72EC                    	jb	short gnib_ret ; cf=1
 38687 000031F1 80FB46                  	cmp	bl,'F'
 38688 000031F4 77E6                    	ja	short gnib_err ; 11/12/2022
 38689 000031F6 80EB37                  	sub	bl,'A'- 10	; clc
 38690 000031F9 C3                      	retn
 38691                                  
 38692                                  	; 11/12/2022
 38693                                  ;gnib_err:
 38694                                  ;	stc
 38695                                  ;gnib_ret:
 38696                                  ;	retn
 38697                                  
 38698                                  ;============================================================================
 38699                                  
 38700                                  ; 12/04/2019 - Retro DOS v4.0
 38701                                  
 38702                                  ; umb.inc (MSDOS 6.0, 1991)
 38703                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 38704                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 38705                                  
 38706                                  XMM_REQUEST_UMB	equ 10h
 38707                                  XMM_RELEASE_UMB	equ 11h
 38708                                  
 38709                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38710                                  
 38711                                  ;---------------------------------------------------------------------------
 38712                                  ;
 38713                                  ; Procedure Name	: umb_insert
 38714                                  ;
 38715                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 38716                                  ;			: BX = seg address of UMB to be linked in
 38717                                  ;			: DX = size of UMB to be linked in paras
 38718                                  ;			; DS = data
 38719                                  ;
 38720                                  ; Outputs		: links the UMB into the arena chain
 38721                                  ;
 38722                                  ; Uses			: AX, CX, ES, DX, BX
 38723                                  ;
 38724                                  ;---------------------------------------------------------------------------
 38725                                  
 38726                                  umb_insert:
 38727 000031FA 1E                      	push	ds
 38728                                  
 38729                                  	; 31/12/2022
 38730                                  	; ds = cs
 38731                                  
 38732                                  	;mov	ds,[cs:DevDOSData]
 38733 000031FB 8E1E[BA1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 38734                                  	;mov	ds,[8Ch]
 38735 000031FF 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 38736 00003203 8CD8                    	mov	ax,ds
 38737 00003205 8EC0                    	mov	es,ax
 38738                                  ui_next:
 38739 00003207 39D8                    	cmp	ax,bx			; Q: is current block above
 38740                                  					;    new block
 38741 00003209 770F                    	ja	short ui_insert		; Y: insert it
 38742                                  					; Q: is current block the
 38743                                  					;    last
 38744 0000320B 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38745 00003211 745C                    	je	short ui_append		; Y: append new block to chain
 38746                                  					; N: get next block
 38747 00003213 8ED8                    	mov	ds,ax			; M005
 38748                                  	;call	get_next		; ax = es = next block
 38749 00003215 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 38750 00003218 EBED                    	jmp	short ui_next
 38751                                  
 38752                                  ui_insert:
 38753 0000321A 8CD9                    	mov	cx,ds			; ds = previous arena
 38754 0000321C 41                      	inc	cx			; top of previous block
 38755                                  
 38756 0000321D 29D9                    	sub	cx,bx
 38757 0000321F F7D9                    	neg	cx			; cx = size of used block
 38758                                  	;mov	byte [0],'M'
 38759 00003221 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38760                                  	;mov	word [1],8
 38761 00003226 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 38762                                  	;mov	[3],cx
 38763 0000322C 890E0300                	mov	[ARENA.SIZE],cx	
 38764                                  	;mov	word [8],4353h ; 'SC'
 38765 00003230 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 38766                                  
 38767                                  ; prepare the arena at start of new block
 38768                                  
 38769 00003236 8EC3                    	mov	es,bx
 38770 00003238 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38771 0000323E 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 38772                                  					; mark as free
 38773 00003245 83EA02                  	sub	dx,2			; make room for arena at
 38774                                  					; start & end of new block
 38775 00003248 2689160300              	mov	[es:ARENA.SIZE],dx
 38776                                  
 38777                                  ; prepare arena at end of new block
 38778                                  	
 38779 0000324D 01D3                    	add	bx,dx
 38780 0000324F 43                      	inc	bx
 38781 00003250 8EC3                    	mov	es,bx			; es=arena at top of new block
 38782 00003252 43                      	inc	bx			; bx=top of new block
 38783                                  
 38784                                  					; ax contains arena just above
 38785                                  					; this block
 38786 00003253 29D8                    	sub	ax,bx			; ax = size of used block
 38787                                  	
 38788 00003255 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38789 0000325B 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38790 00003262 26A30300                	mov	[es:ARENA.SIZE],ax	
 38791 00003266 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 38792                                  
 38793 0000326D EB47                    	jmp	short ui_done
 38794                                  
 38795                                  ui_append:
 38796                                  					; es = arena of last block	
 38797 0000326F 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 38798 00003274 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 38799                                  					; going to rsrv on top of this 
 38800                                  					; block for the next arena.
 38801                                  	; 13/05/2019
 38802 0000327A 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38803                                  
 38804 00003280 89C1                    	mov	cx,ax			; cx=top of prev block-1
 38805 00003282 40                      	inc	ax
 38806 00003283 29D8                    	sub	ax,bx			; ax=top of prev block - 
 38807                                  					;    seg. address of new block
 38808 00003285 F7D8                    	neg	ax
 38809                                  
 38810 00003287 8EC1                    	mov	es,cx			; ds = arena of unused block
 38811                                  
 38812 00003289 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38813 0000328F 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38814 00003296 26A30300                	mov	[es:ARENA.SIZE],ax	
 38815 0000329A 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 38816                                  
 38817                                  ; prepare the arena at start of new block
 38818 000032A1 8EC3                    	mov	es,bx
 38819 000032A3 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 38820 000032A9 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 38821                                  					; mark as free
 38822 000032B0 4A                      	dec	dx			; make room for arena
 38823 000032B1 2689160300              	mov	[es:ARENA.SIZE],dx	
 38824                                  ui_done:
 38825                                  uc_done: ; 31/12/2022 ; *!
 38826 000032B6 1F                      	pop	ds
 38827                                  	; ds = cs ; 31/12/2022
 38828                                  ;uc_done:	; 18/12/2022
 38829                                  au_exit:	; 09/09/2023
 38830 000032B7 C3                      	retn
 38831                                  
 38832                                  ;----------------------------------------------------------------------------
 38833                                  ;
 38834                                  ; procedure : AllocUMB
 38835                                  ;
 38836                                  ;	Allocate all UMBs and link it to DOS arena chain
 38837                                  ;
 38838                                  ;----------------------------------------------------------------------------
 38839                                  
 38840                                  AllocUMB:
 38841                                  	; 31/12/2022
 38842                                  	; ds = cs
 38843 000032B8 E84700                  	call	InitAllocUMB		; link in the first UMB
 38844 000032BB 72FA                    	jc	short au_exit		; quit on error
 38845                                  au_next:
 38846 000032BD E87000                  	call	umb_allocate		; allocate
 38847 000032C0 7205                    	jc	short au_coalesce
 38848 000032C2 E835FF                  	call	umb_insert		; & insert till no UMBs
 38849 000032C5 EBF6                    	jmp	short au_next
 38850                                  au_coalesce:
 38851                                  	; 09/09/2023
 38852                                  ;	call	umb_coalesce		; coalesce all UMBs
 38853                                  ;au_exit:
 38854                                  ;	; 31/12/2022
 38855                                  ;	; ds = cs
 38856                                  ;	retn
 38857                                  
 38858                                  	; 09/09/2023
 38859                                  	;jmp	short umb_coalesce
 38860                                  
 38861                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38862                                  
 38863                                  ; 13/04/2019 - Retro DOS v4.0
 38864                                  
 38865                                  ;----------------------------------------------------------------------------
 38866                                  ;
 38867                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 38868                                  ;
 38869                                  ;	Coalesce adds the block following the argument to the argument block,
 38870                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 38871                                  ;	some callers (such as $setblock) use it to join a free block to it's
 38872                                  ;	preceeding allocated block.
 38873                                  ;
 38874                                  ;	EXIT	'C' clear if OK
 38875                                  ;		  (ds) unchanged, this block updated
 38876                                  ;		  (ax) = address of next block, IF not at end
 38877                                  ;		'C' set if arena trashed
 38878                                  ;	USES	cx, di, ds, es
 38879                                  ;
 38880                                  ;----------------------------------------------------------------------------
 38881                                  
 38882                                  umb_coalesce:
 38883                                  	; 31/12/2022
 38884                                  	; ds = cs
 38885 000032C7 1E                      	push	ds ; *!
 38886                                  
 38887 000032C8 31FF                    	xor	di, di
 38888                                  
 38889                                  	;mov	es,[cs:DevDOSData]
 38890                                  	; 31/12/2022
 38891 000032CA 8E06[BA1F]              	mov	es,[DevDOSData]
 38892 000032CE 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 38893                                  uc_nextfree:
 38894 000032D3 8CC0                    	mov	ax,es
 38895 000032D5 8ED8                    	mov	ds,ax
 38896                                  	;cmp	[es:1],di
 38897 000032D7 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 38898 000032DC 7407                    	je	short uc_again		; Y: try to coalesce with next block
 38899                                  					; N: get next arena
 38900 000032DE E86B00                  	call	get_next		; es, ax = next arena
 38901 000032E1 72D3                    	jc	short uc_done	; *!
 38902 000032E3 EBEE                    	jmp	short uc_nextfree
 38903                                  uc_again:
 38904 000032E5 E86400                  	call	get_next		; es, ax = next arena
 38905 000032E8 72CC                    	jc	short uc_done	; *!
 38906                                  uc_check:
 38907 000032EA 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 38908 000032EF 75E2                    	jne	short uc_nextfree	; N: get next free arena
 38909                                  					; Y: coalesce
 38910 000032F1 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 38911 000032F6 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 38912                                  	;add	[3],cx
 38913 000032F7 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 38914 000032FB 268A0D                  	mov     cl,[es:di]              ; move up signature
 38915 000032FE 880D                    	mov     [di],cl
 38916 00003300 EBE3                    	jmp     short uc_again		; try again
 38917                                  
 38918                                  	; 18/12/2022
 38919                                  ;uc_done:
 38920                                  	;retn
 38921                                  
 38922                                  ;----------------------------------------------------------------------------
 38923                                  ;
 38924                                  ; procedure : InitAllocUMB
 38925                                  ;
 38926                                  ;----------------------------------------------------------------------------
 38927                                  
 38928                                  InitAllocUMB:
 38929                                  	; 31/12/2022
 38930                                  	; ds = cs
 38931 00003302 E8BBD7                  	call	IsXMSLoaded
 38932 00003305 7527                    	jnz	short iau_err		; quit on no XMS driver
 38933 00003307 B452                    	mov	ah,52h
 38934 00003309 CD21                    	int	21h			; get DOS DATA seg
 38935                                  	; 31/12/2022
 38936                                  	; ds = cs
 38937                                  	;mov	[cs:DevDOSData],es	; & save it for later
 38938 0000330B 8C06[BA1F]              	mov	[DevDOSData],es		; & save it for later
 38939 0000330F B81043                  	mov	ax,4310h
 38940 00003312 CD2F                    	int	2Fh
 38941                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 38942                                  	;mov	[cs:DevXMSAddr+2],es
 38943 00003314 891E[A31F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 38944 00003318 8C06[A51F]              	mov	[DevXMSAddr+2],es	
 38945                                  	; 31/12/2022
 38946 0000331C 803E[B91F]00            	cmp	byte [FirstUMBLinked],0 
 38947                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 38948                                  	;jne	short ia_1		; quit if we already did it
 38949                                  	; 12/12/2022
 38950 00003321 770A                    	ja	short ia_1 ; cf=0
 38951 00003323 E83900                  	call	LinkFirstUMB		; else link the first UMB
 38952                                  	;jc	short iau_err
 38953                                  	; 12/12/2022
 38954 00003326 7207                    	jc	short iau_err2  ; cf=1
 38955                                  	; 31/12/2022
 38956                                  	; ds = cs
 38957 00003328 C606[B91F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38958                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38959                                  ia_1:
 38960                                  	; 12/12/2022
 38961                                  	; cf=0
 38962                                  	;clc
 38963 0000332D C3                      	retn
 38964                                  iau_err:
 38965 0000332E F9                      	stc
 38966                                  iau_err2:
 38967 0000332F C3                      	retn
 38968                                  
 38969                                  ;-------------------------------------------------------------------------
 38970                                  ;
 38971                                  ; Procedure Name	: umb_allocate
 38972                                  ;
 38973                                  ; Inputs		: DS = data
 38974                                  ;
 38975                                  ; Outputs		: if UMB available
 38976                                  ;				Allocates the largest available UMB and 
 38977                                  ;			  	BX = segment of allocated block
 38978                                  ;				DX = size of allocated block
 38979                                  ;				NC
 38980                                  ;			  else 
 38981                                  ;				CY
 38982                                  ;
 38983                                  ; Uses			: BX, DX
 38984                                  ;
 38985                                  ;-------------------------------------------------------------------------
 38986                                  
 38987                                  umb_allocate:
 38988                                  	; 31/12/2022
 38989                                  	; ds = cs
 38990 00003330 50                      	push	ax
 38991 00003331 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 38992 00003333 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 38993                                  					;   possible
 38994                                  	; 31/12/2022
 38995 00003336 FF1E[A31F]              	call	far [DevXMSAddr]
 38996                                  	;call	far [cs:DevXMSAddr]
 38997                                  					; dx now contains the size of
 38998                                  					; the largest UMB
 38999 0000333A 09D2                    	or	dx,dx
 39000 0000333C 740B                    	jz	short ua_err
 39001                                  	
 39002 0000333E B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39003                                  
 39004                                  	; 31/12/2022
 39005 00003340 FF1E[A31F]              	call	far [DevXMSAddr]
 39006                                  	;call	far [cs:DevXMSAddr]
 39007                                  
 39008 00003344 83F801                  	cmp	ax,1			; Q: was the reqst successful
 39009                                  	;jne	short ua_err		; N: error
 39010                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39011 00003347 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 39012                                  ua_err:
 39013 00003349 F9                      	stc	
 39014                                  
 39015                                  	;clc
 39016                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39017                                  	; 12/12/2022
 39018                                  	; cf=0
 39019                                  	;clc 
 39020                                  ua_done:
 39021 0000334A 58                      	pop	ax
 39022 0000334B C3                      	retn
 39023                                  	; 27/07/2023
 39024                                  ;ua_err:
 39025                                  	;stc
 39026                                  	;jmp	short ua_done
 39027                                  
 39028                                  ;----------------------------------------------------------------------------
 39029                                  ;
 39030                                  ;**	get_next - Find Next item in Arena
 39031                                  ;
 39032                                  ;	ENTRY	dS - pointer to block head
 39033                                  ;	EXIT	AX,ES - pointers to next head
 39034                                  ;		'C' set if arena damaged
 39035                                  ;
 39036                                  ;----------------------------------------------------------------------------
 39037                                  
 39038                                  	; 01/11/2022
 39039                                  get_next:
 39040 0000334C 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 39041 00003351 740A                    	je	short gn_err
 39042                                  _get_next_:
 39043 00003353 8CD8                    	mov     ax,ds                   ; ax=current block
 39044 00003355 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 39045 00003359 40                      	inc     ax                      ; remember that header!
 39046 0000335A 8EC0                    	mov	es,ax
 39047                                  	;clc
 39048                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39049                                  	; 11/12/2022
 39050                                  	; cf=0
 39051                                  	;clc
 39052 0000335C C3                      	retn
 39053                                  gn_err:
 39054 0000335D F9                      	stc
 39055                                  	; 11/12/2022	
 39056                                  lfu_err:	 ; cf=1
 39057 0000335E C3                      	retn
 39058                                  
 39059                                  ;----------------------------------------------------------------------------
 39060                                  ;
 39061                                  ; procedure : LinkFirstUMB
 39062                                  ;
 39063                                  ;----------------------------------------------------------------------------
 39064                                  
 39065                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39066                                  	; (SYSINIT:2F81h)
 39067                                  LinkFirstUMB:
 39068                                  	; 31/12/2022
 39069                                  	; ds = cs
 39070 0000335F E8CEFF                  	call	umb_allocate
 39071 00003362 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 39072                                  
 39073                                  ; bx = segment of allocated UMB
 39074                                  ; dx = size of UMB
 39075                                  
 39076                                  	; 31/12/2022
 39077                                  	; ds = cs
 39078                                  
 39079 00003364 CD12                    	int	12h			; ax = size of memory
 39080 00003366 B106                    	mov	cl,6
 39081 00003368 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 39082                                  
 39083 0000336A 89C1                    	mov	cx,ax			; cx = size in paras
 39084 0000336C 29D8                    	sub	ax,bx			; ax = - size of unused block
 39085                                  
 39086 0000336E F7D8                    	neg	ax
 39087                                  
 39088                                  	;sub	cx,1			; cx = first umb_arena
 39089                                  	; 09/09/2023
 39090 00003370 49                      	dec	cx
 39091 00003371 8EC1                    	mov	es,cx			; es = first umb_arena
 39092                                  	
 39093 00003373 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39094 00003379 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39095                                  					
 39096 00003380 26A30300                	mov	[es:ARENA.SIZE],ax	
 39097 00003384 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39098                                  
 39099                                  ; put in the arena for the first UMB
 39100                                  
 39101 0000338B 8EC3                    	mov	es,bx			; es has first free umb seg
 39102 0000338D 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39103 00003393 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 39104                                  					; mark as free 
 39105 0000339A 4A                      	dec	dx			; make room for arena
 39106 0000339B 2689160300              	mov	[es:ARENA.SIZE],dx	
 39107                                  
 39108                                  	;mov	es,[cs:DevDOSData]
 39109                                  	; 31/12/2022
 39110 000033A0 8E06[BA1F]              	mov	es,[DevDOSData] ; ds = cs
 39111 000033A4 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 39112 000033A7 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 39113                                  					;  data segment with the arena
 39114                                  					;  just below Top of Mem
 39115                                  
 39116                                  ; we must now scan the arena chain and update the size of the last arena
 39117                                  
 39118 000033AA BF2400                  	mov	di,DOS_ARENA ; 24h
 39119 000033AD 268E05                  	mov	es,[es:di]		; es = start arena
 39120 000033B0 31FF                    	xor	di,di
 39121                                  ;scan_next
 39122                                  ; 09/12/2022
 39123                                  scannext:
 39124 000033B2 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 39125 000033B6 740C                    	je	short got_last
 39126                                  	
 39127 000033B8 8CC0                    	mov	ax,es
 39128 000033BA 2603060300              	add	ax,[es:ARENA.SIZE]
 39129 000033BF 40                      	inc	ax
 39130 000033C0 8EC0                    	mov	es,ax
 39131                                  	;jmp	short scan_next
 39132                                  	; 09/12/2022
 39133 000033C2 EBEE                    	jmp	short scannext
 39134                                  got_last:
 39135                                  	;sub	word [es:ARENA.SIZE],1
 39136                                  	; 09/09/2023
 39137 000033C4 26FF0E0300              	dec	word [es:ARENA.SIZE]
 39138                                  
 39139 000033C9 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39140                                  	;clc
 39141                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39142                                  	; 11/12/2022
 39143                                  	; cf=0
 39144                                  	;clc
 39145 000033CF C3                      	retn
 39146                                  
 39147                                  ; 11/12/2022
 39148                                  ;;lfu_err:
 39149                                  ;	;stc
 39150                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39151                                  ;	; 11/12/2022
 39152                                  ;	; cf=1
 39153                                  ;	;stc
 39154                                  ;	retn
 39155                                  
 39156                                  ;----------------------------------------------------------------------------
 39157                                  ;
 39158                                  ; procedure : ShrinkUMB
 39159                                  ;
 39160                                  ;	Shrinks the current UMB in use, so that the unused portions
 39161                                  ;	of the UMB is given back to the DOS free mem pool
 39162                                  ;
 39163                                  ;----------------------------------------------------------------------------
 39164                                  
 39165                                  ShrinkUMB:
 39166                                  	; 12/12/2022
 39167                                  	; ds = cs
 39168 000033D0 833E[9D1F]00            	cmp	word [DevUMBAddr],0
 39169                                  	;cmp	word [cs:DevUMBAddr],0
 39170 000033D5 741F                    	je	short su_exit
 39171 000033D7 06                      	push	es
 39172                                  	; 01/01/2023
 39173                                  	;push	bx
 39174                                  	; 12/12/2022
 39175                                  	;mov	bx,[cs:DevUMBFree]
 39176                                  	;sub	bx,[cs:DevUMBAddr]
 39177                                  	;mov	es,[cs:DevUMBAddr]
 39178 000033D8 8B1E[A11F]              	mov	bx,[DevUMBFree]
 39179 000033DC 2B1E[9D1F]              	sub	bx,[DevUMBAddr]
 39180 000033E0 8E06[9D1F]              	mov	es,[DevUMBAddr]
 39181                                  	
 39182 000033E4 B8004A                  	mov	ax,4A00h
 39183 000033E7 CD21                    	int	21h
 39184                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 39185                                  		; ES = segment address of block to change
 39186                                  		; BX = new size in paragraphs
 39187 000033E9 8CC0                    	mov	ax,es
 39188 000033EB 48                      	dec	ax
 39189 000033EC 8EC0                    	mov	es,ax
 39190 000033EE 26C70601000800          	mov	word [es:ARENA.OWNER],8
 39191                                  	; 01/01/2023
 39192                                  	;pop	bx
 39193 000033F5 07                      	pop	es
 39194                                  su_exit:
 39195 000033F6 C3                      	retn
 39196                                  
 39197                                  ;----------------------------------------------------------------------------
 39198                                  ;
 39199                                  ; procedure : UnlinkUMB
 39200                                  ;
 39201                                  ;	Unlinks the UMBs from the DOS arena chain
 39202                                  ;
 39203                                  ;----------------------------------------------------------------------------
 39204                                  
 39205                                  UnlinkUMB:
 39206                                  	; 12/12/2022
 39207                                  	; ds = cs
 39208 000033F7 1E                      	push	ds
 39209 000033F8 06                      	push	es
 39210                                  	; 12/12/2022
 39211 000033F9 803E[B91F]00            	cmp	byte [FirstUMBLinked],0
 39212                                  	;cmp	byte [cs:FirstUMBLinked],0
 39213 000033FE 7420                    	je	short ulu_x		; nothing to unlink
 39214                                  	; 12/12/2022
 39215 00003400 8E06[BA1F]              	mov	es,[DevDOSData]
 39216                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 39217 00003404 268E1E2400              	mov	ds,[es:DOS_ARENA]
 39218 00003409 268B3E8C00              	mov	di,[es:UMB_ARENA]
 39219                                  ulu_next:
 39220 0000340E E83BFF                  	call	get_next
 39221 00003411 720D                    	jc	short ulu_x
 39222 00003413 39C7                    	cmp	di,ax			; is the next one UMB ?
 39223 00003415 7404                    	je	short ulu_found
 39224 00003417 8ED8                    	mov	ds,ax
 39225 00003419 EBF3                    	jmp	short ulu_next
 39226                                  ulu_found:
 39227                                  	;mov	byte [0],'Z'
 39228 0000341B C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39229                                  ulu_x:
 39230 00003420 07                      	pop	es
 39231 00003421 1F                      	pop	ds
 39232 00003422 C3                      	retn
 39233                                  
 39234                                  ; ----------------------------------------------------------------------
 39235                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 39236                                  ; ----------------------------------------------------------------------
 39237                                  ; 14/04/2019 - Retro DOS v4.0
 39238                                  
 39239                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 39240                                  ;
 39241                                  ; Summary:
 39242                                  ;
 39243                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 39244                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 39245                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 39246                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 39247                                  ;   and/or config.inc for the full list.
 39248                                  ;
 39249                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 39250                                  ;   configuration support. blockname is either MENU, which contains one
 39251                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 39252                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 39253                                  ;   INCLUDE allows the current block to name another block for inclusion
 39254                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 39255                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 39256                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 39257                                  ;
 39258                                  ; Example:
 39259                                  ;
 39260                                  ;   [menu]
 39261                                  ;   menuitem=misc,Miscellaneous
 39262                                  ;   menuitem=network,Network Configuration
 39263                                  ;   menudefault=network,15
 39264                                  ;
 39265                                  ;   [network]
 39266                                  ;   include misc
 39267                                  ;   device=foo
 39268                                  ;
 39269                                  ;   [misc]
 39270                                  ;   device=bar
 39271                                  ;   include alternate
 39272                                  ;
 39273                                  ;   [alternate]
 39274                                  ;   device=tar
 39275                                  ;
 39276                                  ;
 39277                                  ;   When the menu is displayed
 39278                                  ;
 39279                                  ;    1. Miscellaneous
 39280                                  ;    2. Network Configuration
 39281                                  ;
 39282                                  ;   #2 is highlighted as the default option, and will be automatically
 39283                                  ;   selected after 15 seconds. It will invoke the following lines in the
 39284                                  ;   following order:
 39285                                  ;
 39286                                  ;       DEVICE=BAR
 39287                                  ;       DEVICE=TAR
 39288                                  ;       DEVICE=FOO
 39289                                  ;
 39290                                  
 39291                                  ;MULTI_CONFIG equ 1
 39292                                  
 39293                                  ; the following depend on the positions of the various letters in switchlist
 39294                                  
 39295                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 39296                                  
 39297                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 39298                                  flagdrive	equ 00001000b ; 8 
 39299                                  flagcyln	equ 00010000b ; 16
 39300                                  flagseclim	equ 00100000b ; 32
 39301                                  flagheads	equ 01000000b ; 64
 39302                                  flagff		equ 10000000b ; 128
 39303                                  
 39304                                  ;----------------------------------------------------------------------------
 39305                                  ; 19/04/2019 - Retro DOS v4.0
 39306                                  
 39307                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 39308                                  
 39309                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39310                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 39311                                  
 39312 00003423 00                      insert_blank:	db 	0
 39313                                  
 39314                                  ;----------------------------------------------------------------------------
 39315                                  ;
 39316                                  ; procedure : setparms
 39317                                  ;
 39318                                  ; the following set of routines is used to parse the drivparm = command in
 39319                                  ; the config.sys file to change the default drive parameters.
 39320                                  ;
 39321                                  ;----------------------------------------------------------------------------
 39322                                  
 39323                                  setparms:
 39324 00003424 1E                      	push	ds
 39325 00003425 50                      	push	ax
 39326 00003426 53                      	push	bx
 39327 00003427 51                      	push	cx
 39328 00003428 52                      	push	dx
 39329                                  
 39330 00003429 0E                      	push	cs
 39331 0000342A 1F                      	pop	ds
 39332                                  
 39333 0000342B 31DB                    	xor	bx,bx
 39334 0000342D 8A1E[A848]              	mov	bl,[drive]
 39335                                  	; 18/12/2022
 39336 00003431 43                      	inc	bx
 39337                                  	;inc	bl			; get it correct for ioctl call
 39338                                  					; (1=a,2=b...)
 39339 00003432 BA[4A47]                	mov	dx,deviceparameters
 39340                                  	;mov	ah,IOCTL ; 44h
 39341                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 39342                                  	; 04/07/2023
 39343 00003435 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 39344                                  	;mov	ch,RAWIO ; 8
 39345                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 39346                                  	; 04/07/2023
 39347 00003438 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 39348 0000343B CD21                    	int	21h
 39349                                  
 39350                                  ; 18/03/2025 - MiniDOS v1.0
 39351                                  %if 0
 39352                                  
 39353                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39354                                  	mov	ah,[switches]
 39355                                  	;mov	al,[deviceparameters+20]
 39356                                  	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39357                                  	mov	cl,[drive]
 39358                                  ;
 39359                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39360                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 39361                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 39362                                  ;	; 21/10/2022
 39363                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 39364                                  ;	;mov	ds,ax			; set Bios_Data segment
 39365                                  ;
 39366                                  ;	; 27/07/2023
 39367                                  ;	;;test	word [cs:switches],flagec35 ; 4
 39368                                  ;	;test	byte [cs:switches],flagec35
 39369                                  ;	;jz	short not_ec35
 39370                                  ;
 39371                                  ;	; 27/07/2023
 39372                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39373                                  ;	;;test	word [switches],flagec35 ; 4
 39374                                  ;	; 12/12/2022
 39375                                  ;	;test	byte [switches],flagec35 ; 4
 39376                                  ;	;jz	short eot_ok
 39377                                  ;	
 39378                                  	;mov	cl,[cs:drive]		; which drive was this for?
 39379                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39380                                  	;mov	cl,[drive]
 39381                                  	; 27/07/2023
 39382                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 39383                                  	;mov	ds,ax
 39384                                  
 39385                                  	mov	dx,DOSBIODATASEG
 39386                                  	mov	ds,dx
 39387                                  
 39388                                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 39389                                  	jz	short not_ec35
 39390                                  
 39391                                  	;mov	al,1			; assume drive 0
 39392                                  	;shl	al,cl			; set proper bit depending on drive
 39393                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 39394                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 39395                                  	; 27/07/2023
 39396                                  	mov	ah,1
 39397                                  	shl	ah,cl
 39398                                  	or	[ec35_flag],ah
 39399                                  
 39400                                  ; 18/03/2025
 39401                                  %endif
 39402                                  
 39403                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39404                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 39405                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39406                                  not_ec35:
 39407                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 39408                                  ;	sectors per track than any old ones.
 39409                                  
 39410                                  	; 27/07/2023
 39411                                  	;;mov	al,[cs:deviceparameters+20]
 39412                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39413                                  	
 39414                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 39415 0000343D 3A06[2C01]              	cmp	al,[eot]
 39416 00003441 7603                    	jbe	short eot_ok
 39417 00003443 A2[2C01]                	mov	[eot],al
 39418                                  eot_ok:
 39419 00003446 5A                      	pop	dx			; fix up all the registers
 39420 00003447 59                      	pop	cx
 39421 00003448 5B                      	pop	bx
 39422 00003449 58                      	pop	ax
 39423 0000344A 1F                      	pop	ds ; 13/05/2019
 39424 0000344B C3                      	retn
 39425                                  
 39426                                  ;----------------------------------------------------------------------------
 39427                                  ;
 39428                                  ; procedure : diddleback
 39429                                  ;
 39430                                  ; replace default values for further drivparm commands
 39431                                  ;
 39432                                  ;----------------------------------------------------------------------------
 39433                                  
 39434                                  diddleback:
 39435 0000344C 1E                      	push	ds
 39436 0000344D 0E                      	push	cs
 39437 0000344E 1F                      	pop	ds
 39438                                  	;mov	word [deviceparameters+4],80
 39439 0000344F C706[4E47]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39440                                  	;mov	byte [deviceparameters+1],2
 39441 00003455 C606[4B47]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 39442                                  	;mov	word [deviceparameters+2],0
 39443 0000345A C706[4C47]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 39444 00003460 C706[A948]0000          	mov	word [switches],0	    ; zero all switches
 39445 00003466 1F                      	pop	ds
 39446 00003467 C3                      	retn
 39447                                  
 39448                                  ; 03/01/2023
 39449                                  %if 0
 39450                                  
 39451                                  ; 15/04/2019 - Retro DOS v4.0
 39452                                  
 39453                                  ;----------------------------------------------------------------------------
 39454                                  ;
 39455                                  ; procedure : parseline
 39456                                  ;
 39457                                  ; entry point is parseline. al contains the first character in command line.
 39458                                  ;
 39459                                  ;----------------------------------------------------------------------------
 39460                                  
 39461                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39462                                  	; (SYSINIT:3EDFh)
 39463                                  
 39464                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39465                                  	; (SYSINIT:30ACh)
 39466                                  parseline:
 39467                                  	; 03/01/2023
 39468                                  	; ds = cs ; *
 39469                                  
 39470                                  	;push	ds ; *
 39471                                  
 39472                                  	;push	cs ; *
 39473                                  	;pop	ds ; *
 39474                                  
 39475                                  nextswtch:
 39476                                  	cmp	al,cr			; carriage return?
 39477                                  	je	short done_line
 39478                                  	cmp	al,lf			; linefeed?
 39479                                  	je	short put_back		; put it back and done
 39480                                  
 39481                                  ; anything less or equal to a space is ignored.
 39482                                  
 39483                                  	cmp	al,' '                  ; space?
 39484                                  	jbe	short getnext		; skip over space
 39485                                  	cmp	al,'/'
 39486                                  	je	short getparm
 39487                                  	stc				; mark error invalid-character-in-input
 39488                                  	;jmp	short exitpl
 39489                                  	; 03/01/2023
 39490                                  swterr:
 39491                                  	retn
 39492                                  
 39493                                  getparm:
 39494                                  	call	check_switch
 39495                                  	mov	[switches],bx		; save switches read so far
 39496                                  	jc	short swterr
 39497                                  getnext:
 39498                                  	call	getchr
 39499                                  	;jc	short done_line
 39500                                  	;jmp	short nextswtch
 39501                                  	; 03/01/2023
 39502                                  	jnc	short nextswtch
 39503                                  ;swterr:
 39504                                  	;jmp	short exitpl		; exit if error
 39505                                  
 39506                                  done_line:
 39507                                  	; 12/12/2022
 39508                                  	test	byte [switches],flagdrive ; 8
 39509                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39510                                  	jnz	short okay
 39511                                  	stc				; mark error no-drive-specified
 39512                                  	;jmp	short exitpl
 39513                                  	; 03/01/2023
 39514                                  	retn
 39515                                  
 39516                                  okay:
 39517                                  	mov	ax,[switches]
 39518                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39519                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39520                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39521                                  	;clc			    ; everything is fine
 39522                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39523                                  	; 12/12/2022
 39524                                  	; cf=0
 39525                                  	;clc
 39526                                  	;call	setdeviceparameters
 39527                                  	; 03/01/2023
 39528                                  	jmp	setdeviceparameters
 39529                                  ;exitpl:
 39530                                  	; 03/01/2023
 39531                                  	; ds = cs
 39532                                  	;pop	ds ; *
 39533                                  	retn
 39534                                  put_back:
 39535                                  	inc	word [count]		; one more char to scan
 39536                                  	dec	word [chrptr]		; back up over linefeed
 39537                                  	jmp	short done_line
 39538                                  
 39539                                  %endif
 39540                                  
 39541                                  ;----------------------------------------------------------------------------
 39542                                  ;
 39543                                  ; procedure : check_switch
 39544                                  ;
 39545                                  ; processes a switch in the input. it ensures that the switch is valid, and
 39546                                  ; gets the number, if any required, following the switch. the switch and the
 39547                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 39548                                  ; error.
 39549                                  ;
 39550                                  ;----------------------------------------------------------------------------
 39551                                  
 39552                                  ; 09/09/2023
 39553                                  
 39554                                  err_swtch:
 39555 00003468 31CB                    	xor	bx,cx			; remove this switch from the records
 39556                                  err_check:
 39557 0000346A F9                      	stc
 39558                                  err_chk:
 39559                                  done_swtch:	; 09/09/2023 (cf=0)
 39560 0000346B C3                      	retn
 39561                                  
 39562                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39563                                  
 39564                                  check_switch:
 39565 0000346C E8DF0C                  	call	getchr
 39566                                  	;jc	short err_check
 39567 0000346F 72FA                    	jc	short err_chk
 39568 00003471 24DF                            and     al,0DFh                 ; convert it to upper case
 39569 00003473 3C41                    	cmp	al,'A'
 39570                                  	;jb	short err_check
 39571 00003475 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 39572 00003477 3C5A                    	cmp	al,'Z'
 39573 00003479 77EF                    	ja	short err_check
 39574                                  
 39575 0000347B 06                      	push	es
 39576                                  
 39577 0000347C 0E                      	push	cs
 39578 0000347D 07                      	pop	es
 39579                                  
 39580                                  	;mov	cl,[switchlist]		; get number of valid switches
 39581                                  	;mov	ch,0
 39582                                  	;mov	di,1+switchlist		; point to string of valid switches
 39583                                  	; 09/09/2023
 39584 0000347E BF[CE49]                	mov	di,switchlist
 39585 00003481 8A0D                    	mov	cl,[di]
 39586 00003483 B500                    	mov	ch,0
 39587 00003485 47                      	inc	di	; 1+switchlist
 39588                                  
 39589 00003486 F2AE                    	repne	scasb
 39590                                  
 39591 00003488 07                      	pop	es
 39592 00003489 75DF                    	jnz	short err_check
 39593                                  
 39594 0000348B B80100                  	mov	ax,1
 39595 0000348E D3E0                    	shl	ax,cl			; set bit to indicate switch
 39596 00003490 8B1E[A948]              	mov	bx,[switches]		; get switches so far
 39597 00003494 09C3                    	or	bx,ax			; save this with other switches
 39598 00003496 89C1                    	mov	cx,ax
 39599                                  	; 12/12/2022
 39600 00003498 A8F8                    	test	al,switchnum ; 0F8h
 39601                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 39602 0000349A 74CF                    	jz	short done_swtch
 39603                                  
 39604 0000349C E8AF0C                  	call	getchr
 39605 0000349F 72C7                    	jc	short err_swtch
 39606                                  
 39607 000034A1 3C3A                    	cmp	al,':'
 39608 000034A3 75C3                    	jne	short err_swtch
 39609                                  
 39610 000034A5 E8A60C                  	call	getchr
 39611 000034A8 53                      	push	bx			; preserve switches
 39612                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39613                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 39614                                  	; 12/12/2022
 39615                                  	; ds = cs
 39616 000034A9 C606[AC02]20            	mov	byte [sepchr],' '
 39617 000034AE E8530D                  	call	getnum
 39618                                  	;mov	byte [cs:sepchr],0
 39619                                  	; 12/12/2022
 39620 000034B1 C606[AC02]00            	mov	byte [sepchr],0
 39621 000034B6 5B                      	pop	bx			; restore switches
 39622                                  
 39623                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 39624                                  ; not check for carry set here. if there is an error, it will be detected
 39625                                  ; further on (hopefully).
 39626                                  
 39627                                  	; 09/09/2023
 39628                                  	;call	process_num
 39629                                  	;jmp	short process_num
 39630                                  
 39631                                  ;done_swtch:
 39632                                  ;	;clc
 39633                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39634                                  ;	; 12/12/2022
 39635                                  ;	; cf=0
 39636                                  ;	;clc
 39637                                  ;	retn
 39638                                  
 39639                                  ;----------------------------------------------------------------------------
 39640                                  ;
 39641                                  ; procedure : process_num
 39642                                  ;
 39643                                  ; this routine takes the switch just input, and the number following (if any),
 39644                                  ; and sets the value in the appropriate variable. if the number input is zero
 39645                                  ; then it does nothing - it assumes the default value that is present in the
 39646                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 39647                                  ;
 39648                                  ;----------------------------------------------------------------------------
 39649                                  
 39650                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39651                                  	; (SYSINIT:3156h)
 39652                                  process_num:
 39653 000034B7 850E[A948]              	test	[switches],cx		; if this switch has been done before,
 39654 000034BB 752B                    	jnz	short done_ret		; ignore this one.
 39655                                  	; 12/12/2022
 39656 000034BD F6C108                  	test	cl,flagdrive ; 8
 39657                                  	;test	cx,flagdrive ; 8
 39658 000034C0 7404                    	jz	short try_f
 39659 000034C2 A2[A848]                	mov	byte [drive],al
 39660                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39661                                  	;jmp	short done_ret
 39662                                  	; 12/12/2022
 39663                                  	; cf=0
 39664 000034C5 C3                      	retn	; 13/05/2019
 39665                                  try_f:
 39666                                  	; 12/12/2022
 39667 000034C6 F6C180                  	test	cl,flagff ; 80h
 39668                                  	;test	cx,flagff ; 80h
 39669 000034C9 7404                    	jz	short try_t
 39670                                  
 39671                                  ; ensure that we do not get bogus form factors that are not supported
 39672                                  
 39673                                  	;mov	[deviceparameters+1],al
 39674 000034CB A2[4B47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 39675                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39676                                  	;jmp	short done_ret
 39677                                  	; 12/12/2022
 39678                                  	; cf=0
 39679 000034CE C3                      	retn	; 13/05/2019
 39680                                  try_t:
 39681 000034CF 09C0                    	or	ax,ax
 39682 000034D1 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 39683                                  	; 12/12/2022
 39684 000034D3 F6C110                  	test	cl,flagcyln ; 10h
 39685                                  	;test	cx,flagcyln ; 10h
 39686 000034D6 7404                    	jz	short try_s
 39687                                  
 39688                                  	;mov	[deviceparameters+4],ax
 39689 000034D8 A3[4E47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 39690                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39691                                  	;jmp	short done_ret
 39692                                  	; 12/12/2022
 39693                                  	; cf=0
 39694 000034DB C3                      	retn	; 13/05/2019
 39695                                  try_s:
 39696                                  	; 12/12/2022
 39697 000034DC F6C120                  	test	cl,flagseclim ; 20h
 39698                                  	;test	cx,flagseclim ; 20h
 39699 000034DF 7404                    	jz	short try_h
 39700 000034E1 A3[A648]                	mov	[slim],ax
 39701                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39702                                  	;jmp	short done_ret
 39703                                  	; 12/12/2022
 39704                                  	; cf=0
 39705 000034E4 C3                      	retn	; 13/05/2019
 39706                                  
 39707                                  ; must be for number of heads
 39708                                  
 39709                                  try_h:
 39710 000034E5 A3[A448]                	mov	[hlim],ax
 39711                                  done_ret:
 39712                                  	;clc
 39713                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39714                                  	; 12/12/2022
 39715                                  	; cf=0 (test instruction resets cf)
 39716                                  	;clc
 39717 000034E8 C3                      	retn
 39718                                  
 39719                                  
 39720                                  ; 16/04/2024 - Retro DOS v5.0
 39721                                  ; 03/01/2023 - Retro DOS v4.2
 39722                                  %if 1
 39723                                  
 39724                                  ; 15/04/2019 - Retro DOS v4.0
 39725                                  
 39726                                  ;----------------------------------------------------------------------------
 39727                                  ;
 39728                                  ; procedure : parseline
 39729                                  ;
 39730                                  ; entry point is parseline. al contains the first character in command line.
 39731                                  ;
 39732                                  ;----------------------------------------------------------------------------
 39733                                  
 39734                                  	; 16/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 39735                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4151h)
 39736                                  
 39737                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39738                                  	; (SYSINIT:3EDFh)
 39739                                  
 39740                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39741                                  	; (SYSINIT:30ACh)
 39742                                  
 39743                                  parseline:
 39744                                  	; 03/01/2023
 39745                                  	; ds = cs ; *
 39746                                  
 39747                                  	;push	ds ; *
 39748                                  
 39749                                  	;push	cs ; *
 39750                                  	;pop	ds ; *
 39751                                  
 39752                                  nextswtch:
 39753 000034E9 3C0D                    	cmp	al,cr			; carriage return?
 39754 000034EB 741C                    	je	short done_line
 39755 000034ED 3C0A                    	cmp	al,lf			; linefeed?
 39756 000034EF 7421                    	je	short put_back		; put it back and done
 39757                                  
 39758                                  ; anything less or equal to a space is ignored.
 39759                                  
 39760 000034F1 3C20                    	cmp	al,' '                  ; space?
 39761 000034F3 760F                    	jbe	short getnext		; skip over space
 39762 000034F5 3C2F                    	cmp	al,'/'
 39763 000034F7 7402                    	je	short getparm
 39764 000034F9 F9                      	stc				; mark error invalid-character-in-input
 39765                                  	;jmp	short exitpl
 39766                                  	; 03/01/2023
 39767                                  swterr:
 39768 000034FA C3                      	retn
 39769                                  
 39770                                  getparm:
 39771 000034FB E86EFF                  	call	check_switch
 39772 000034FE 891E[A948]              	mov	[switches],bx		; save switches read so far
 39773 00003502 72F6                    	jc	short swterr
 39774                                  getnext:
 39775 00003504 E8470C                  	call	getchr
 39776                                  	;jc	short done_line
 39777                                  	;jmp	short nextswtch
 39778                                  	; 03/01/2023
 39779 00003507 73E0                    	jnc	short nextswtch
 39780                                  ;swterr:
 39781                                  	;jmp	short exitpl		; exit if error
 39782                                  
 39783                                  done_line:
 39784                                  	; 12/12/2022
 39785 00003509 F606[A948]08            	test	byte [switches],flagdrive ; 8
 39786                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39787 0000350E 750C                    	jnz	short okay
 39788 00003510 F9                      	stc				; mark error no-drive-specified
 39789                                  	;jmp	short exitpl
 39790                                  	; 03/01/2023
 39791 00003511 C3                      	retn
 39792                                  
 39793                                  ;exitpl:
 39794                                  	; 03/01/2023
 39795                                  	; ds = cs
 39796                                  	;;pop	ds ; *
 39797                                  	;retn
 39798                                  
 39799                                  put_back:
 39800 00003512 FF06[5403]              	inc	word [count]		; one more char to scan
 39801 00003516 FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 39802 0000351A EBED                    	jmp	short done_line
 39803                                  
 39804                                  okay:
 39805 0000351C A1[A948]                	mov	ax,[switches]
 39806 0000351F 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39807 00003522 A3[4C47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39808                                  	; 16/04/2024
 39809                                  	;mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39810                                  	;;;
 39811 00003525 C706[A647]0000          	mov	word [deviceparameters+92],0 ; PCDOS 7.1 IBMBIO.COM	
 39812                                  	;;;
 39813                                  	;clc			    ; everything is fine
 39814                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39815                                  	; 12/12/2022
 39816                                  	; cf=0
 39817                                  	;clc
 39818                                  	;call	setdeviceparameters
 39819                                  	; 03/01/2023
 39820                                  	;jmp	short setdeviceparameters
 39821                                  
 39822                                  %endif
 39823                                  
 39824                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 39825                                  
 39826                                  ;----------------------------------------------------------------------------
 39827                                  ;
 39828                                  ; procedure : setdeviceparameters
 39829                                  ;
 39830                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 39831                                  ; system based on the form factor. it is assumed that the bpbs for the
 39832                                  ; various form factors are present in the bpbtable. for hard files,
 39833                                  ; the recommended bpb is the same as the bpb on the drive.
 39834                                  ; no attempt is made to preserve registers since we are going to jump to
 39835                                  ; sysinit straight after this routine.
 39836                                  ;
 39837                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 39838                                  ;	  we always return no carry
 39839                                  ;
 39840                                  ;	note:  there is a routine by the same name in msdioctl.asm
 39841                                  ;
 39842                                  ;----------------------------------------------------------------------------
 39843                                  
 39844                                  ; 15/04/2019 - Retro DOS v4.0
 39845                                  
 39846                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39847                                  
 39848                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39849                                  	; (SYSINIT:3FC4h)
 39850                                  
 39851                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39852                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 39853                                  
 39854                                  setdeviceparameters:
 39855                                  	; 03/01/2023
 39856                                  	; ds = cs
 39857                                  
 39858 0000352B 06                      	push	es
 39859                                  
 39860 0000352C 0E                      	push	cs
 39861 0000352D 07                      	pop	es
 39862                                  
 39863 0000352E 31DB                    	xor	bx,bx
 39864 00003530 8A1E[4B47]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 39865 00003534 80FB00                  	cmp	bl,DEV_5INCH ; 0
 39866 00003537 7506                    	jne	short got_80
 39867                                  
 39868 00003539 C706[4E47]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39869                                  							; 48 tpi=40 cyl
 39870                                  got_80:
 39871 0000353F D1E3                    	shl	bx,1			; get index into bpb table
 39872 00003541 8BB7[BA49]              	mov	si,[bpbtable+bx]	; get address of bpb
 39873                                  
 39874                                  	;mov	di,deviceparameters+7	
 39875                                  	; 02/11/2022
 39876 00003545 BF[5147]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 39877 00003548 B93B00                  	mov	cx,A_BPB.size ; 31
 39878                                  	; 09/09/2023
 39879                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 39880 0000354B FC                      	cld
 39881                                  	;repe	movsb
 39882                                  	; 02/11/2022
 39883 0000354C F3A4                    	rep	movsb
 39884                                  
 39885 0000354E 07                      	pop	es
 39886                                  
 39887                                  	; 12/12/2022
 39888 0000354F F606[A948]20            	test	byte [switches],flagseclim ; 20h
 39889                                  	;test	word [switches],flagseclim ; 20h
 39890 00003554 7406                    	jz	short see_heads
 39891                                  
 39892 00003556 A1[A648]                	mov	ax,[slim]
 39893                                  	;mov	[deviceparameters+20],ax
 39894 00003559 A3[5E47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 39895                                  
 39896                                  see_heads:
 39897                                  	; 12/12/2022
 39898 0000355C F606[A948]40            	test	byte [switches],flagheads ; 40h
 39899                                  	;test	word [switches],flagheads ; 40h
 39900 00003561 7406                    	jz	short heads_not_altered
 39901                                  
 39902 00003563 A1[A448]                	mov	ax,[hlim]
 39903                                  	;mov	[deviceparameters+22],ax	
 39904 00003566 A3[6047]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 39905                                  
 39906                                  heads_not_altered:
 39907                                  
 39908                                  ; set up correct media descriptor byte and sectors/cluster
 39909                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 39910                                  
 39911                                  	;mov	byte [deviceparameters+9],2
 39912                                  	; 02/11/2022
 39913                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 39914                                  	; 03/01/2023
 39915 00003569 B80200                  	mov	ax,2	
 39916 0000356C A2[5347]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 39917                                  
 39918 0000356F B3F0                    	mov	bl,0F0h			; get default mediabyte
 39919                                  
 39920                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 39921                                  
 39922                                  	;mov	bh,[deviceparameters+17]
 39923                                  	; 02/11/2022
 39924 00003571 8A3E[5B47]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 39925                                  	
 39926                                  	; 03/01/2023
 39927                                  	; ax = 2
 39928 00003575 3906[6047]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 39929                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 39930 00003579 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 39931                                  
 39932 0000357B 7524                    	jne	short only_one_head	; one head, do one head stuff
 39933                                  
 39934                                  ;	two head drives will use the mediadescriptor from the bpb
 39935                                  
 39936 0000357D 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 39937                                  
 39938                                  ;	two sided drives have two special cases to look for. One is
 39939                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 39940                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 39941                                  ;	   one sector/cluster.
 39942                                  
 39943                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 39944                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 39945                                  ;	   type of 2 headed drive is all set.
 39946                                  
 39947 0000357F 833E[5E47]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 39948 00003584 7509                    	jne	short not_144m
 39949 00003586 833E[4E47]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39950 0000358B 7502                    	jne	short not_144m
 39951                                  
 39952                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 39953                                  
 39954 0000358D EB24                    	jmp	short got_one_secperclus_drive
 39955                                  
 39956                                  ;	check for 320K
 39957                                  
 39958                                  not_144m:
 39959 0000358F 833E[4E47]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39960 00003594 7521                    	jne	short got_correct_mediad
 39961 00003596 833E[5E47]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39962 0000359B 751A                    	jne	short got_correct_mediad
 39963                                  
 39964 0000359D B3FC                    	mov	bl,0FCh
 39965 0000359F EB16                    	jmp	short got_correct_mediad
 39966                                  
 39967                                  only_one_head:
 39968                                  
 39969                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 39970                                  
 39971 000035A1 803E[4B47]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 39972 000035A6 740B                    	je	short got_one_secperclus_drive
 39973                                  
 39974                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 39975                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 39976                                  ;	  besides 8 will be considered 0fch
 39977                                  
 39978 000035A8 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 39979 000035AA 833E[5E47]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39980                                  	; 12/12/2022
 39981 000035AF 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 39982                                  
 39983 000035B1 B3FE                    	mov	bl,0FEh			; 160K mediaid
 39984                                  
 39985                                  ;	we've either got a one sided drive, or a 1.44M drive
 39986                                  ;	  either case we'll use 1 sector per cluster instead of 2
 39987                                  
 39988                                  got_one_secperclus_drive:
 39989                                  	; 03/01/2023
 39990                                  	; ax = 2
 39991 000035B3 48                      	dec	ax  ; ax = 1
 39992 000035B4 A2[5347]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 39993                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 39994                                  
 39995                                  got_correct_mediad:
 39996 000035B7 881E[5B47]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 39997                                  
 39998                                  ;	 Calculate the correct number of Total Sectors on medium
 39999                                  
 40000 000035BB A1[4E47]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 40001 000035BE F726[6047]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 40002 000035C2 F726[5E47]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 40003 000035C6 A3[5947]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 40004 000035C9 F8                      	clc				; we currently return no errors
 40005                                  
 40006 000035CA C3                      	retn
 40007                                  
 40008                                  ;	M047 -- end rewritten routine
 40009                                  
 40010                                  ;----------------------------------------------------------------------------
 40011                                  ;
 40012                                  ; procedure : organize
 40013                                  ;
 40014                                  ;----------------------------------------------------------------------------
 40015                                  
 40016                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40017                                  %if 1
 40018                                  end_commd_line:
 40019 000035CB AA                      	stosb				; store line feed char in buffer for the linecount.
 40020                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40021                                  	; 03/01/2023
 40022                                  	; ds = cs
 40023                                  	;mov	byte [com_level],0
 40024                                  	;jmp	short org1
 40025                                  	; 09/09/2023
 40026 000035CC EB0E                    	jmp	short org0
 40027                                  nochar1:
 40028 000035CE F9                      	stc
 40029 000035CF C3                      	retn
 40030                                  %endif
 40031                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40032                                  	; (SYSINIT:3234h)
 40033                                  
 40034                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40035                                  	; (SYSINIT:4067h)
 40036                                  
 40037                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40038                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 40039                                  
 40040                                  organize:
 40041                                  	; 03/01/2023
 40042                                  	; ds = cs
 40043 000035D0 8B0E[5403]              	mov	cx,[count]
 40044                                  	;mov	cx,[cs:count]
 40045 000035D4 E3F8                    	jcxz	nochar1
 40046                                  
 40047                                  ;ifndef	MULTI_CONFIG
 40048                                  ;
 40049                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 40050                                  ;;   because we the case of values in SET commands preserved
 40051                                  ;
 40052                                  ;	call	mapcase
 40053                                  ;endif
 40054                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40055                                  	; 03/01/2023 - Retro DOS v4.2
 40056                                  	;call	mapcase
 40057                                  
 40058 000035D6 31F6                    	xor	si,si
 40059 000035D8 89F7                    	mov	di,si
 40060 000035DA 31C0                    	xor	ax,ax
 40061                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 40062                                  	;;mov	byte [cs:com_level],0
 40063                                  	; 12/12/2022
 40064                                  	;mov	[cs:com_level],al ; 0
 40065                                  	; 03/01/2023
 40066                                  	; ds = cs
 40067                                  	; 09/09/2023
 40068                                  	;mov	[com_level],al ; 0
 40069                                  org0:
 40070 000035DC C606[4E03]00            	mov	byte [com_level],0 ; 09/09/2023
 40071                                  org1:
 40072 000035E1 E8DA01                  	call	skip_comment
 40073 000035E4 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 40074 000035E6 E8BB01                  	call	get2			; not a comment string. then get a char.
 40075 000035E9 3C0A                    	cmp	al,lf ; 0Ah
 40076 000035EB 74DE                    	je	short end_commd_line	; starts with a blank line.
 40077 000035ED 3C20                    	cmp	al,' ' ; 20h
 40078 000035EF 76F0                    	jbe	short org1		; skip leading control characters
 40079                                  	; 09/09/2023
 40080                                  	;jmp	short findit
 40081                                  
 40082                                  ; 09/09/2023
 40083                                  %if 0
 40084                                  end_commd_line:
 40085                                  	stosb				; store line feed char in buffer for the linecount.
 40086                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40087                                  	; 03/01/2023
 40088                                  	; ds = cs
 40089                                  	mov	byte [com_level],0
 40090                                  	jmp	short org1
 40091                                  
 40092                                  nochar1:
 40093                                  	stc
 40094                                  	retn
 40095                                  %endif
 40096                                  
 40097                                  findit:
 40098 000035F1 51                      	push	cx
 40099 000035F2 56                      	push	si
 40100 000035F3 57                      	push	di
 40101 000035F4 89F5                    	mov	bp,si
 40102 000035F6 4D                      	dec	bp
 40103 000035F7 BE[7146]                        mov     si,comtab		; prepare to search command table
 40104 000035FA B500                    	mov	ch,0
 40105                                  findcom:
 40106 000035FC 89EF                    	mov	di,bp
 40107 000035FE 8A0C                    	mov	cl,[si]
 40108 00003600 46                      	inc	si
 40109 00003601 E345                    	jcxz	nocom
 40110                                  
 40111                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40112                                  
 40113                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40114                                  
 40115                                  ;ifdef	MULTI_CONFIG
 40116                                  
 40117                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 40118                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 40119                                  ;   anything in particular)
 40120                                  
 40121 00003603 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 40122 00003607 7430                    	je	short semicolon
 40123                                  loopcom:
 40124                                  	;mov	al,[es:di]
 40125                                  	;inc	di
 40126                                  	;and	al,~20h ; 0DFh		; force upper case
 40127                                  	;inc	si                      ; compare to byte @es:di
 40128                                  	;cmp	al,[si-1]
 40129                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40130 00003609 268A25                  	mov	ah,[es:di]
 40131 0000360C 47                      	inc	di
 40132 0000360D 80E4DF                  	and	ah,~20h ; 0DFh		
 40133 00003610 AC                      	lodsb			; mov al,[si]
 40134                                  				; inc si
 40135                                  	;cmp	al,ah
 40136                                  	;loope	loopcom
 40137                                  	; 28/07/2023
 40138 00003611 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 40139 00003613 E1F4                    	loopz	loopcom
 40140                                  ;else
 40141                                  ;	repe	cmpsb
 40142                                  ;endif
 40143                                  	; 02/11/2022
 40144                                  	; 03/01/2023 - Retro DOS v4.2
 40145                                  	;repe	cmpsb
 40146                                  
 40147                                  	; 28/07/2023
 40148                                  	;lahf
 40149 00003615 01CE                            add     si,cx                   ; bump to next position without affecting flags
 40150                                  	;sahf
 40151 00003617 AC                              lodsb                           ; get indicator letter
 40152                                  	;jnz	short findcom
 40153                                          ; 28/07/2023
 40154 00003618 08E4                    	or	ah,ah			; (*)
 40155 0000361A 75E0                    	jnz	short findcom		
 40156                                  	
 40157 0000361C 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 40158 00003620 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 40159 00003622 26803D0A                	cmp	byte [es:di],lf
 40160 00003626 741B                    	je	short gotcom0
 40161                                  
 40162                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40163                                  
 40164                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40165                                  
 40166                                  ;ifdef	MULTI_CONFIG
 40167                                  
 40168                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 40169                                  
 40170 00003628 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 40171 0000362A 7417                    	je	short gotcom0
 40172                                  ;endif
 40173 0000362C 50                      	push	ax
 40174 0000362D 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 40175                                  
 40176                                  ;ifdef	MULTI_CONFIG
 40177                                  
 40178                                  ;   If keyword is *immediately* followed by a question mark (?), then
 40179                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 40180                                  ;   stored in the CONFIG.SYS memory image.
 40181                                  
 40182 00003630 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 40183 00003632 7509                    	jne	short no_query		; no
 40184 00003634 58                      	pop	ax                      ; yes, so retrieve the original code
 40185                                  	;or	al,80h ; 03/01/2023
 40186 00003635 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 40187 00003637 EB0A                    	jmp	short gotcom0           ;
 40188                                  semicolon:
 40189 00003639 B030                    	mov	al,CONFIG_REM ; '0'
 40190 0000363B EB06                    	jmp	short gotcom0
 40191                                  no_query:
 40192                                  ;endif  ;MULTI_CONFIG
 40193                                  
 40194                                  	; 02/11/2022
 40195                                  	; 03/01/2023 - Retro DOS v4.2
 40196                                  	;push	ax
 40197                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 40198                                  
 40199 0000363D E8E90A                  	call	delim
 40200                                  no_delim:
 40201 00003640 58                      	pop	ax
 40202 00003641 75B9                    	jnz	short findcom
 40203                                  gotcom0:
 40204 00003643 5F                      	pop	di
 40205 00003644 5E                      	pop	si
 40206 00003645 59                      	pop	cx
 40207 00003646 EB10                    	jmp	short gotcom
 40208                                  nocom:
 40209 00003648 5F                      	pop	di
 40210 00003649 5E                      	pop	si
 40211 0000364A 59                      	pop	cx
 40212 0000364B B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 40213 0000364D AA                      	stosb				; save indicator char.
 40214                                  _skipline:
 40215 0000364E E85301                  	call	get2
 40216 00003651 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 40217 00003653 75F9                            jne     short _skipline
 40218                                  	;jmp	short end_commd_line	; handle next command line
 40219                                  	; 09/09/2023
 40220 00003655 E973FF                  	jmp	end_commd_line
 40221                                  gotcom:
 40222 00003658 AA                              stosb                           ; save indicator char in buffer
 40223                                  
 40224                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40225                                  
 40226                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40227                                  
 40228                                  ;ifdef	MULTI_CONFIG
 40229                                  
 40230                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 40231                                  ;   it screws up the direct comparisons below.
 40232                                  
 40233 00003659 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 40234                                  ;endif
 40235                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 40236                                  	; 03/01/2023
 40237                                  	; ds = cs
 40238 0000365B A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.
 40239                                  
 40240                                  ;ifdef	MULTI_CONFIG
 40241                                  
 40242                                  ;   There is no whitespace/delimiter between the "begin block" character
 40243                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 40244                                  ;   skipping code
 40245                                  
 40246 0000365E 3C5B                    	cmp	al,CONFIG_BEGIN
 40247 00003660 7429                    	je	short org31
 40248 00003662 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 40249 00003664 740F                    	je	short no_mapcase
 40250 00003666 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 40251 00003668 740B                    	je	short no_mapcase
 40252 0000366A 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 40253 0000366C 7407                    	je	short no_mapcase
 40254 0000366E 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 40255 00003670 7403                    	je	short no_mapcase
 40256 00003672 E8F00A                  	call	mapcase			; map case of rest of line to UPPER
 40257                                  no_mapcase:
 40258                                  ;endif
 40259                                  	;; 02/11/2022
 40260                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 40261                                  	;; 03/01/2023
 40262                                  	;; ds = cs
 40263                                  	;mov	[cmd_indicator],al
 40264                                  org2:	
 40265 00003675 E82C01                  	call    get2                    ; skip the command name until delimiter
 40266 00003678 3C0A                            cmp     al,lf 	    ; 0Ah
 40267 0000367A 7412                    	je	short org21
 40268 0000367C 3C0D                    	cmp	al,cr 	    ; 0Dh	
 40269 0000367E 740E                    	je	short org21
 40270                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40271                                  	; 03/01/2023 - Retro DOS v4.2
 40272 00003680 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 40273 00003682 740A                    	je	short org21		; T-RICHJ: to be parsed properly.
 40274                                  
 40275 00003684 E8A20A                  	call	delim
 40276 00003687 75EC                            jnz	short org2
 40277 00003689 EB05                    	jmp	short org3
 40278                                  
 40279                                  ; 24/03/2025 - MiniDOS 1.0
 40280                                  %if 1
 40281                                  org31:
 40282 0000368B E9AC00                  	jmp	org4
 40283                                  %endif
 40284                                  
 40285                                  org21:					;if cr or lf then
 40286 0000368E 4E                      	dec	si			; undo si, cx register
 40287 0000368F 41                      	inc	cx			;  and continue
 40288                                  org3:	
 40289                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 40290                                  	;je	short get_cmt_token
 40291                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40292                                  	; 03/01/2023 - Retro DOS v4.2	
 40293                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40294                                  	;je	short org_file
 40295                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 40296                                  	;je	short org_file
 40297                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40298                                  	;je	short org_file
 40299                                  	; 02/11/2022
 40300                                  	; 03/01/2023 - Retro DOS v4.2
 40301                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40302                                  	;;je	short org_file
 40303                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 40304                                  	;je	short org_file
 40305                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 40306                                  	;je	short org_switch
 40307                                  
 40308                                  	; 03/01/2023
 40309                                  	; ds = cs
 40310                                  
 40311 00003690 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 40312 00003695 7445                    	je	short get_cmt_token
 40313                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40314                                  	; 03/01/2023 - Retro DOS v4.2	
 40315 00003697 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40316 0000369C 7418                    	je	short org_file
 40317 0000369E 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 40318 000036A3 7411                    	je	short org_file
 40319 000036A5 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40320 000036AA 740A                    	je	short org_file
 40321                                  	; 02/11/2022
 40322                                  	; 03/01/2023 - Retro DOS v4.2
 40323                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40324                                  	;je	short org_file
 40325 000036AC 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 40326                                  	; 18/03/2025
 40327 000036B1 7403                    	je	short org_file
 40328                                  	; 24/03/2025 - MiniDOS 1.0
 40329 000036B3 E98400                  	jmp	org4
 40330                                  
 40331                                  ; 18/03/2025 - MiniDOS 1.0
 40332                                  %if 0
 40333                                          cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 40334                                  	je	short org_switch
 40335                                  
 40336                                  org31:
 40337                                  	jmp	org4
 40338                                  
 40339                                  org_switch:
 40340                                  	call	skip_comment
 40341                                  	jz	short end_commd_line_brdg
 40342                                  
 40343                                  	call	get2
 40344                                  	call	org_delim
 40345                                  	jz	short org_switch
 40346                                  
 40347                                  	stosb
 40348                                  	jmp	org5
 40349                                  %endif
 40350                                  
 40351                                  
 40352                                  org_file:			; get the filename and put 0 at end
 40353 000036B6 E80501                  	call	skip_comment
 40354 000036B9 7464                    	jz	short org_put_zero
 40355                                  
 40356 000036BB E8E600                  	call	get2		; not a comment
 40357 000036BE E8680A                  	call	delim
 40358 000036C1 74F3                    	jz	short org_file	; skip the possible delimiters
 40359                                  
 40360 000036C3 AA                      	stosb			; copy the first non delim char found in buffer
 40361                                  
 40362                                  org_copy_file:
 40363 000036C4 E8F700                  	call	skip_comment	; comment char in the filename?
 40364 000036C7 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 40365                                  
 40366 000036C9 E8D800                  	call	get2
 40367 000036CC 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 40368 000036CE 7457                    	je	short end_file_slash ; this will be the special case.
 40369                                  
 40370 000036D0 AA                      	stosb			; save the char. in buffer
 40371 000036D1 E8550A                  	call	delim
 40372 000036D4 7459                    	jz	short end_copy_file
 40373                                  
 40374 000036D6 3C20                    	cmp	al, ' '
 40375 000036D8 77EA                    	ja	short org_copy_file ; keep copying
 40376 000036DA EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 40377                                  
 40378                                  get_cmt_token:			; get the token. just max. 2 char.
 40379 000036DC E8C500                  	call	get2
 40380 000036DF 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 40381 000036E1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 40382 000036E3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 40383 000036E5 74F5                    	je	short get_cmt_token ;  character.)
 40384 000036E7 3C3D                    	cmp	al,'='		; = is special in this case.
 40385 000036E9 74F1                    	je	short get_cmt_token
 40386 000036EB 3C0D                    	cmp	al,cr
 40387 000036ED 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 40388 000036EF 3C0A                    	cmp	al,lf
 40389 000036F1 7422                    	je	short get_cmt_end
 40390                                  
 40391                                  	; 03/01/2023
 40392                                  	; ds = cs
 40393                                  	;mov	[cs:cmmt1],al	; store it
 40394                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 40395 000036F3 A2[5003]                	mov	[cmmt1],al	; store it
 40396 000036F6 C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 40397 000036FB E8A600                  	call	get2
 40398 000036FE 3C20                    	cmp	al,' ' ; 20h
 40399 00003700 7413                    	je	short get_cmt_end
 40400 00003702 3C09                    	cmp	al,tab ; 9
 40401 00003704 740F                    	je	short get_cmt_end
 40402 00003706 3C0D                    	cmp	al,cr  ; 0Dh
 40403 00003708 740B                    	je	short get_cmt_end
 40404 0000370A 3C0A                    	cmp	al,lf  ; 0Ah
 40405 0000370C 740E                    	je	short end_commd_line_brdg
 40406                                  
 40407                                  	;mov	[cs:cmmt2],al
 40408                                  	;inc	byte [cs:cmmt]
 40409                                  	; 03/01/2023
 40410 0000370E A2[5103]                	mov	[cmmt2],al
 40411 00003711 FE06[4F03]              	inc	byte [cmmt]
 40412                                  
 40413                                  get_cmt_end:
 40414 00003715 E88C00                  	call	get2
 40415 00003718 3C0A                    	cmp	al,lf
 40416 0000371A 75F9                    	jne	short get_cmt_end	; skip it.
 40417                                  end_commd_line_brdg: 
 40418 0000371C E9ACFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 40419                                  
 40420                                  org_put_zero:				; make the filename in front of
 40421 0000371F 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 40422 00003723 47                      	inc	di
 40423 00003724 E9A4FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 40424                                  
 40425                                  end_file_slash: 			; al = "/" option char.
 40426 00003727 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 40427 0000372B 47                      	inc	di			; and
 40428 0000372C AA                      	stosb				; store "/" after that.
 40429 0000372D EB1A                    	jmp	short org5		; continue with the rest of the line
 40430                                  
 40431                                  end_copy_file:
 40432 0000372F 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 40433 00003734 3C0A                    	cmp	al,lf
 40434 00003736 74E4                    	je	short end_commd_line_brdg
 40435 00003738 EB0F                    	jmp	short org5
 40436                                  
 40437                                  org4:					; org4 skips all delimiters after the command name except for '/'
 40438 0000373A E88100                  	call	skip_comment
 40439 0000373D 74DD                    	jz	short end_commd_line_brdg
 40440                                  
 40441 0000373F E86200                  	call	get2
 40442 00003742 E8EC09                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 40443 00003745 74F3                    	jz	short org4
 40444 00003747 EB08                    	jmp	short org51
 40445                                  
 40446                                  org5:					; rest of the line
 40447 00003749 E87200                  	call	skip_comment		; comment?
 40448 0000374C 74CE                    	jz	short end_commd_line_brdg
 40449 0000374E E85300                  	call	get2			; not a comment.
 40450                                  
 40451                                  org51:
 40452 00003751 AA                      	stosb				; copy the character
 40453 00003752 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 40454 00003754 743A                    	je	short at_quote
 40455 00003756 3C20                    	cmp	al,' '  ; 20h
 40456 00003758 77EF                    	ja	short org5
 40457                                  
 40458                                  	; 09/09/2023
 40459                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 40460                                  
 40461                                  					; M051 - Start
 40462                                  	; 03/01/2023
 40463                                  	; ds = cs
 40464 0000375A 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 40465                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 40466 0000375F 7514                    	jne	short not_dh		; N: 
 40467 00003761 3C0A                    	cmp	al,lf			; Q: is this line feed
 40468 00003763 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 40469 00003765 3C0D                    	cmp	al,cr			; Q: is this a cr
 40470 00003767 75E0                    	jne	short org5		; N: 
 40471 00003769 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 40472 0000376E AA                      	stosb				; put cr after blank
 40473 0000376F FE06[2334]              	inc	byte [insert_blank]
 40474                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 40475                                  					; inserted
 40476 00003773 EBD4                    	jmp	short org5
 40477                                  not_dh:					; M051 - End
 40478                                  
 40479 00003775 3C0A                    	cmp	al,lf			; line feed?
 40480 00003777 740F                    	je	short org1_brdg		; handles the next command line.
 40481 00003779 EBCE                    	jmp	short org5		; handles next char in this line.
 40482                                  
 40483                                  org_dhlf:				; M051 - Start
 40484                                  	; 03/01/2023
 40485                                  	; ds = cs
 40486 0000377B 803E[2334]01            	cmp	byte [insert_blank],1
 40487                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 40488 00003780 7406                    	je	short org1_brdg		; Y:
 40489 00003782 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 40490 00003787 AA                      	stosb				; put lf after blank
 40491                                  					; M051 - End
 40492                                  org1_brdg:
 40493 00003788 C606[2334]00            	mov	byte [insert_blank],0 
 40494                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 40495                                  					; M051: devicehigh
 40496 0000378D E951FE                  	jmp	org1
 40497                                  
 40498                                  at_quote:
 40499 00003790 803E[4E03]00            	cmp	byte [com_level],0
 40500                                  	;cmp	byte [cs:com_level],0
 40501 00003795 7407                    	je	short up_level
 40502                                  	;mov	byte [cs:com_level],0	; reset it.
 40503 00003797 C606[4E03]00            	mov	byte [com_level],0
 40504 0000379C EBAB                    	jmp	short org5
 40505                                  
 40506                                  up_level:
 40507                                  	;inc	byte [cs:com_level]	; set it.
 40508 0000379E FE06[4E03]              	inc	byte [com_level]
 40509 000037A2 EBA5                    	jmp	short org5
 40510                                  
 40511                                  ;----------------------------------------------------------------------------
 40512                                  ;
 40513                                  ; procedure : get2
 40514                                  ;
 40515                                  ;----------------------------------------------------------------------------
 40516                                  
 40517                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40518                                  	; (SYSINIT:33FAh)
 40519                                  
 40520                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40521                                  	; (SYSINIT:4270h)
 40522                                  get2:
 40523 000037A4 E304                    	jcxz	noget
 40524                                  	;
 40525                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40526                                  	;;lods	byte ptr es:[si]
 40527                                  	; 12/12/2022
 40528 000037A6 26                      	es	
 40529 000037A7 AC                      	lodsb
 40530                                  	;mov	al, [es:si]
 40531                                  	;inc	si
 40532                                  	;
 40533 000037A8 49                      	dec	cx
 40534 000037A9 C3                      	retn
 40535                                  noget:
 40536 000037AA 59                      	pop	cx
 40537                                  	; 03/01/2023
 40538                                  	; ds = cs
 40539                                  	;mov	[cs:count],di ; 13/05/2019
 40540                                  	;mov	[cs:org_count],di
 40541 000037AB 893E[5403]              	mov	[count],di
 40542 000037AF 893E[5603]              	mov	[org_count],di
 40543 000037B3 31F6                    	xor	si,si
 40544                                  	;mov	[cs:chrptr],si
 40545 000037B5 8936[5803]              	mov	[chrptr],si
 40546                                  
 40547                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40548                                  
 40549                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40550                                  
 40551                                  ;ifndef MULTI_CONFIG
 40552                                  ;	retn
 40553                                  ;else
 40554                                  
 40555                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 40556                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 40557                                  ;   and the new boot menu stuff...
 40558                                  
 40559 000037B9 89F9                    	mov     cx,di
 40560 000037BB E9E300                  	jmp     menu_check
 40561                                  
 40562                                  ;endif
 40563                                  	; 02/11/2022
 40564                                  	; 03/01/2023 - Retro DOS v4.2
 40565                                  	;retn
 40566                                  
 40567                                  ;----------------------------------------------------------------------------
 40568                                  ;
 40569                                  ; procedure : skip_comment
 40570                                  ;
 40571                                  ;skip the commented string until lf, if current es:si-> a comment string.
 40572                                  ;in) es:si-> string
 40573                                  ;	 cx -> length.
 40574                                  ;out) zero flag not set if not found a comment string.
 40575                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 40576                                  ;	  the line feed character at this moment when return.
 40577                                  ;	  ax register destroyed.
 40578                                  ;	  if found, si, cx register adjusted accordingly.
 40579                                  ;
 40580                                  ;----------------------------------------------------------------------------
 40581                                  
 40582                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40583                                  	; (SYSINIT:428Dh)
 40584                                  
 40585                                  skip_comment:
 40586 000037BE E3EA                    	jcxz	noget		; get out of the organize routine.
 40587                                  
 40588                                  	; 03/01/2023
 40589                                  	; ds = cs	
 40590                                  
 40591 000037C0 803E[4E03]00            	cmp	byte [com_level],0
 40592                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 40593 000037C5 752C                    	jne	short no_commt	 ; (not inside quotations)
 40594                                  
 40595 000037C7 803E[4F03]01            	cmp	byte [cmmt],1
 40596                                  	;cmp	byte [cs:cmmt],1
 40597 000037CC 7225                    	jb	short no_commt
 40598                                  
 40599 000037CE 268A04                  	mov	al,[es:si]
 40600                                  	
 40601 000037D1 3806[5003]              	cmp	[cmmt1],al
 40602                                  	;cmp	[cs:cmmt1],al
 40603 000037D5 751C                    	jne	short no_commt
 40604                                  
 40605 000037D7 803E[4F03]02            	cmp	byte [cmmt],2
 40606                                  	;cmp	byte [cs:cmmt],2
 40607 000037DC 750A                    	jne	short skip_cmmt
 40608                                  
 40609 000037DE 268A4401                	mov	al,[es:si+1]
 40610                                  	
 40611 000037E2 3806[5103]              	cmp	[cmmt2],al
 40612                                  	;cmp	[cs:cmmt2],al
 40613 000037E6 750B                    	jne	short no_commt
 40614                                  skip_cmmt:
 40615 000037E8 E3C0                    	jcxz	noget		; get out of organize routine.
 40616 000037EA 268A04                  	mov	al,[es:si]
 40617 000037ED 46                      	inc	si
 40618 000037EE 49                      	dec	cx
 40619 000037EF 3C0A                    	cmp	al,lf		; line feed?
 40620 000037F1 75F5                    	jne	short skip_cmmt
 40621                                  no_commt:
 40622 000037F3 C3                      	retn
 40623                                  
 40624                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40625                                  ; (SYSINIT:42C8h)
 40626                                  
 40627                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40628                                  ;%if 0
 40629                                  
 40630                                  ;ifdef	MULTI_CONFIG
 40631                                  
 40632                                  ;----------------------------------------------------------------------------
 40633                                  ;
 40634                                  ;   kbd_read: wait for keystroke
 40635                                  ;
 40636                                  ;   INPUT
 40637                                  ;       DS == CS == sysinitseg
 40638                                  ;
 40639                                  ;   OUTPUT
 40640                                  ;       Carry SET to clean boot, CLEAR otherwise
 40641                                  ;
 40642                                  ;   OTHER REGS USED
 40643                                  ;       All
 40644                                  ;
 40645                                  ;   HISTORY
 40646                                  ;       Created 16-Nov-1992 by JeffPar
 40647                                  ;
 40648                                  ;----------------------------------------------------------------------------
 40649                                  
 40650                                  kbd_read:
 40651 000037F4 F606[2046]02                    test    byte [bDisableUI],2
 40652 000037F9 7520                            jnz     short kbd_nodelay
 40653                                  
 40654 000037FB 1E                              push    ds              ; the bios timer tick count is incremented
 40655 000037FC 29C0                            sub     ax,ax           ; 18.2 times per second;
 40656 000037FE 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 40657                                  	;mov	dx,[046Ch]	; get initial value
 40658                                  kbd_loop:
 40659 00003800 B401                            mov     ah,1            ;
 40660 00003802 CD16                            int     16h             ; peek the keyboard
 40661 00003804 7514                            jnz	short kbd_loopdone ; something's there, get out
 40662 00003806 B402                            mov     ah,2            ; peek the shift states
 40663 00003808 CD16                            int     16h             ;
 40664 0000380A A803                            test    al,03h          ; either right or left shift key bits set?
 40665 0000380C 750C                            jnz	short kbd_loopdone ; yes
 40666 0000380E A16C04                          mov     ax,[046Ch]	;
 40667                                  	;sub	ax,dx           ; get difference
 40668                                  	; 15/04/2019 - Retro DOS v4.0
 40669 00003811 2E2B06[8403]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 40670                                  
 40671 00003816 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 40672 00003818 72E6                            jb	short kbd_loop	; not yet
 40673                                  kbd_loopdone:
 40674 0000381A 1F                              pop     ds              ; delay complete!
 40675                                  kbd_nodelay:
 40676 0000381B 29DB                            sub     bx,bx           ; assume clean boot
 40677 0000381D B402                            mov     ah,2            ; peek the shift states
 40678 0000381F CD16                            int     16h             ;
 40679 00003821 A803                            test    al,03h          ; either right or left shift key bits set?
 40680 00003823 7407                            jz      short kbd_notshift ; no
 40681 00003825 43                              inc     bx              ; yes
 40682 00003826 43                              inc     bx
 40683                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 40684 00003827 800E[2446]04            	or	byte [bQueryOpt],4
 40685                                  kbd_notshift:                   ;
 40686 0000382C B401                            mov     ah,1            ; peek the keyboard
 40687 0000382E CD16                            int     16h             ;
 40688 00003830 743E                            jz	short kbd_test	; no key present
 40689 00003832 08C0                            or      al,al           ; is it a function key?
 40690 00003834 753A                            jnz	short kbd_test	; no
 40691                                  
 40692                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 40693 00003836 80FC62                          cmp     ah,62h          ; CTRL F5
 40694 00003839 7405                            je	short kbd_cfg_bypass
 40695                                  	
 40696 0000383B 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 40697 0000383E 750D                            jne	short kbd_notf5	; no
 40698                                  kbd_cfg_bypass:
 40699 00003840 BA[884B]                        mov     dx,_$CleanMsg
 40700 00003843 E8AD0B                          call    print
 40701                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 40702 00003846 800E[2446]04            	or	byte [bQueryOpt],4 
 40703 0000384B EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 40704                                  kbd_notf5:
 40705                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 40706 0000384D 80FC65                          cmp     ah,65h          ; CTRL F8
 40707 00003850 7405                            je	short kbd_cfg_confirm
 40708                                  
 40709 00003852 80FC42                          cmp     ah,42h          ; F8 function key?
 40710 00003855 7523                            jne	short kbd_exit	; no
 40711                                  kbd_cfg_confirm:
 40712 00003857 BA[C64B]                        mov     dx,_$InterMsg
 40713 0000385A E8960B                          call    print           ;
 40714 0000385D B301                            mov     bl,1            ; yes, interactive-boot option enabled
 40715 0000385F 881E[2446]                      mov     [bQueryOpt],bl  ; change default setting
 40716                                  kbd_eat:                        ;
 40717 00003863 B400                            mov     ah,0            ;
 40718 00003865 CD16                            int     16h             ; eat the key we assumed was a signal
 40719 00003867 C606[2A46]FF                    mov	byte [secElapsed],-1
 40720 0000386C 09DB                            or      bx,bx           ;
 40721 0000386E 7405                            jz	short kbd_clean	;
 40722                                  kbd_test:                       ;
 40723 00003870 80FB02                          cmp     bl,2            ;
 40724 00003873 7205                            jb	short kbd_exit	;
 40725                                  kbd_clean:                      ;
 40726 00003875 E83E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 40727 00003878 F9                              stc                     ; set carry to indicate abort
 40728 00003879 C3                              retn			;
 40729                                  kbd_exit:                       ;
 40730 0000387A F8                              clc                     ; clear carry to indicate success
 40731 0000387B C3                              retn			;
 40732                                  
 40733                                  ;----------------------------------------------------------------------------
 40734                                  ;
 40735                                  ;   set_numlock: set numlock LED
 40736                                  ;
 40737                                  ;   INPUT
 40738                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 40739                                  ;
 40740                                  ;   OUTPUT
 40741                                  ;       None
 40742                                  ;
 40743                                  ;   OTHER REGS USED
 40744                                  ;       None
 40745                                  ;
 40746                                  ;   HISTORY
 40747                                  ;       Created 16-Nov-1992 by JeffPar
 40748                                  ;
 40749                                  ;----------------------------------------------------------------------------
 40750                                  
 40751                                  	; 04/01/2023 - Retro DOS v4.2
 40752                                  
 40753                                  set_numlock:
 40754                                          ; 04/01/2023
 40755                                  	;push	ax
 40756 0000387C 1E                              push    ds
 40757 0000387D 29C0                            sub     ax,ax
 40758 0000387F 8ED8                            mov     ds,ax
 40759 00003881 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 40760 00003884 2E3B06[504B]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 40761 00003889 7507                            jne	short not_off	; no
 40762 0000388B 80261704DF                      and     byte [0417h],~20h ; 0DFh
 40763 00003890 EB0D                            jmp     short set_done
 40764                                  not_off:
 40765 00003892 2E3B06[4E4B]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 40766 00003897 F9                              stc
 40767 00003898 7505                            jne	short set_done	; no
 40768 0000389A 800E170420                      or      byte [0417h],20h
 40769                                  set_done:
 40770 0000389F 1F                              pop     ds
 40771                                  	; 04/01/2023
 40772                                  	;pop	ax
 40773 000038A0 C3                              retn
 40774                                  
 40775                                  ; 16/04/2019 - Retro DOS v4.0
 40776                                  
 40777                                  ;----------------------------------------------------------------------------
 40778                                  ;
 40779                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 40780                                  ;
 40781                                  ;   INPUT
 40782                                  ;       CX == "organized" config.sys memory image length
 40783                                  ;    ES:SI -> "organized" config.sys memory image
 40784                                  ;       DS == CS == sysinitseg
 40785                                  ;
 40786                                  ;   OUTPUT
 40787                                  ;       Same as above; the idea is that menu_check simply transforms
 40788                                  ;       a block-structured config.sys image into a conventional image,
 40789                                  ;       based on the user's block selection and any other boot-time options
 40790                                  ;       the user may have employed...
 40791                                  ;
 40792                                  ;   OTHER REGS USED
 40793                                  ;       All
 40794                                  ;
 40795                                  ;   NOTES
 40796                                  ;       [count] and [org_count] are set to the new config.sys image length
 40797                                  ;
 40798                                  ;   HISTORY
 40799                                  ;       Created 16-Mar-1992 by JeffPar
 40800                                  ;
 40801                                  ;----------------------------------------------------------------------------
 40802                                  
 40803                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40804                                  	; (SYSINIT:4378h)
 40805                                  
 40806                                  menu_check:
 40807                                  
 40808                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 40809                                  ;   disable clean/interactive boot options
 40810                                  
 40811 000038A1 51                              push    cx              ;
 40812 000038A2 56                              push    si              ;
 40813 000038A3 29DB                            sub     bx,bx           ; remains ZERO until first block
 40814                                  swchk_loop:                     ;
 40815 000038A5 E80507                          call    get_char        ; get first char of current line
 40816 000038A8 721C                            jc	short swchk_end	; hit eof
 40817 000038AA 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 40818 000038AC 7503                            jne	short swchk_next1 ;
 40819 000038AE 43                              inc     bx              ; remember that we've seen a block
 40820 000038AF EB10                            jmp     short swchk_nextline
 40821                                  swchk_next1:                    ;
 40822 000038B1 3C4E                            cmp     al,CONFIG_NUMLOCK
 40823                                          ;jne	short swchk_next2
 40824                                  	; 18/03/2025 - MiniDOS 1.0
 40825 000038B3 750C                    	jne	short swchk_nextline
 40826                                  
 40827 000038B5 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 40828 000038B7 7508                            jnz	short swchk_nextline ; before the first block
 40829 000038B9 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 40830 000038BC 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 40831                                  
 40832                                  ; 18/03/2025 - MiniDOS 1.0
 40833                                  %if 0
 40834                                          jmp     short swchk_nextline
 40835                                  swchk_next2:                    ;
 40836                                          cmp     al,CONFIG_SWITCHES
 40837                                          jne	short swchk_nextline ; this line ain't it
 40838                                  swchk_scan:                     ;
 40839                                          call    get_char        ; look for /N or /F
 40840                                  swchk_scan1:                    ;
 40841                                          cmp     al,LF           ; end of line?
 40842                                          je	short swchk_nextline ; yes
 40843                                          cmp     al,'/'          ; switch-char?
 40844                                          jne	short swchk_scan ; no
 40845                                          call    get_char        ;
 40846                                          and     al,~20h ; 0DFh	; convert to upper case
 40847                                          cmp     al,[swit_n+1]	; 'N'
 40848                                          jne	short swchk_scan2 ; no
 40849                                          or      byte [bDisableUI],1
 40850                                          jmp	short swchk_scan ; continue looking for switches of interest
 40851                                  swchk_scan2:                    ;
 40852                                          cmp     al,[swit_f+1]	; 'F'
 40853                                          jne	short swchk_scan1 ; no
 40854                                          or      byte [bDisableUI],2
 40855                                          jmp     short swchk_scan ; continue looking for switches of interest
 40856                                  %endif
 40857                                  
 40858                                  swchk_nextline:                 ;
 40859 000038C1 E8C306                          call    skip_opt_line   ;
 40860 000038C4 EBDF                            jmp     short swchk_loop ;
 40861                                  swchk_end:                      ;
 40862 000038C6 5E                              pop     si              ;
 40863 000038C7 59                              pop     cx              ;
 40864                                  
 40865                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 40866                                  ;   the DisableUI flag is still clear
 40867                                  
 40868 000038C8 F606[2046]01                    test    byte [bDisableUI],1
 40869 000038CD 7508                            jnz	short menu_search
 40870                                  ;
 40871                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 40872                                  ;   there is anything at all in the keyboard buffer
 40873                                  ;
 40874 000038CF E822FF                          call    kbd_read
 40875 000038D2 7303                            jnc	short menu_search
 40876 000038D4 E9EE01                          jmp	menu_abort
 40877                                  
 40878                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 40879                                  
 40880                                  menu_search:
 40881 000038D7 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 40882 000038D9 BF[6546]                        mov     di,szMenu	;
 40883 000038DC E80304                          call    find_block      ; find the MENU block
 40884 000038DF 7337                            jnc	short menu_found ;
 40885 000038E1 C606[5D46]00                    mov     byte [szBoot],0
 40886 000038E6 E90C02                          jmp	no_selection ; not found
 40887                                  
 40888                                  ;   Process the requested menu color(s)
 40889                                  
 40890                                  menu_color:
 40891 000038E9 51                      	push	cx              ;
 40892 000038EA 52                      	push	dx              ;
 40893                                  	;;mov	dx,0007h        ; default color setting
 40894                                  	; 10/09/2023
 40895                                  	;mov	dl,7 ; !*!
 40896 000038EB E89E06                  	call	get_number	; get first number
 40897 000038EE 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 40898 000038F1 88DD                    	mov	ch,bl           ; save it in CH
 40899                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 40900                                  	; (high nibble of dl is 0)
 40901                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 40902                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 40903 000038F3 88DA                    	mov	dl,bl	; 14/08/2023
 40904 000038F5 E83108                  	call	delim           ; did we hit a delimiter
 40905 000038F8 750E                    	jne	short check_color ; no, all done
 40906 000038FA E88F06                  	call	get_number	; get next number
 40907 000038FD 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 40908 00003900 88DE                    	mov	dh,bl           ; save it in DH
 40909                                  	; 10/09/2023
 40910                                  	;and	dl,0Fh	; !**!	;
 40911 00003902 B104                    	mov	cl,4            ;
 40912 00003904 D2E3                    	shl	bl,cl           ;
 40913 00003906 08DA                    	or	dl,bl           ;
 40914                                  check_color:
 40915 00003908 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 40916 0000390A 7503                    	jne	short set_color	; no
 40917 0000390C 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 40918                                  set_color:
 40919 0000390F 8816[1B46]              	mov	[bMenuColor],dl ;
 40920 00003913 5A                      	pop	dx              ;
 40921 00003914 59                      	pop	cx              ;
 40922 00003915 E9A900                  	jmp	menu_nextitem
 40923                                  
 40924                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 40925                                  ;   above is there simply to alleviate short jump problems)
 40926                                  
 40927                                  menu_found:
 40928 00003918 C606[2546]01                    mov     byte [bDefBlock],1
 40929                                          ;mov	word [offDefBlock],0
 40930 0000391D C606[2946]FF                    mov     byte [secTimeOut],-1
 40931 00003922 8026[2446]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 40932                                  	; 10/09/2023
 40933 00003927 29D2                    	sub	dx,dx
 40934 00003929 8916[2746]              	mov	[offDefBlock],dx ; 0
 40935                                  
 40936 0000392D E85706                          call    skip_opt_line   ; skip to next line
 40937                                  	; 10/09/2023
 40938                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 40939                                  
 40940                                  ;   Process the menu block now
 40941                                  
 40942                                  menu_process:
 40943 00003930 E87A06                          call    get_char        ; get first char of current line
 40944 00003933 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 40945 00003935 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 40946 00003937 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 40947 00003939 7428                            je	short to_menu_getdefault
 40948 0000393B 3C4F                            cmp     al,CONFIG_SUBMENU
 40949 0000393D 744D                            je	short menu_item	; go process sub-menu
 40950 0000393F 3C45                            cmp     al,CONFIG_MENUITEM
 40951 00003941 7449                            je	short menu_item	; go process menu item
 40952 00003943 3C41                            cmp     al,CONFIG_MENUDEFAULT
 40953 00003945 741E                            je	short menu_default ; go process menu default
 40954 00003947 3C52                            cmp     al,CONFIG_MENUCOLOR
 40955 00003949 749E                            je	short menu_color ; go process menu color
 40956 0000394B 3C4E                            cmp     al,CONFIG_NUMLOCK
 40957 0000394D 740F                            je	short menu_numlock ;
 40958 0000394F 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 40959 00003951 746E                            je	short menu_nextitem ;
 40960 00003953 E8C307                          call    any_delim       ; allow blank lines and such
 40961 00003956 7469                            je	short menu_nextitem ;
 40962 00003958 F9                              stc                     ;
 40963 00003959 E82607                          call    print_error     ; non-MENU command!
 40964 0000395C EB63                            jmp     short menu_nextitem
 40965                                  menu_numlock:
 40966 0000395E E81BFF                          call    set_numlock
 40967 00003961 EB5E                            jmp     short menu_nextitem
 40968                                  to_menu_getdefault:
 40969 00003963 EB62                            jmp     short menu_getdefault
 40970                                  
 40971                                  ;   Save the offset of the default block name, we'll need it later
 40972                                  
 40973                                  menu_default:
 40974 00003965 8936[2746]                      mov     [offDefBlock],si; save address of default block name
 40975 00003969 803E[2A46]00                    cmp     byte [secElapsed],0
 40976 0000396E 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 40977 00003970 E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 40978 00003973 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 40979 00003975 E8FB05                          call    skip_delim      ; something is typed
 40980 00003978 7247                            jc	short menu_nextitem ;
 40981 0000397A 89DE                            mov     si,bx           ;
 40982 0000397C E80D06                          call    get_number      ; get number (of seconds for timeout)
 40983 0000397F 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 40984                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 40985 00003982 7602                            jna	short timeout_ok ; 01/08/2023
 40986 00003984 B35A                    	mov     bl,90           ;  display function can handle)
 40987                                  timeout_ok:                    ;
 40988 00003986 881E[2946]                      mov     [secTimeOut],bl ;
 40989                                  timeout_skip:
 40990 0000398A EB35                            jmp     short menu_nextitem
 40991                                  
 40992                                  ;   Verify that this is a valid menu item by searching for the named block
 40993                                  
 40994                                  menu_item:
 40995                                  	;cmp	dl,9	; 04/01/2023
 40996 0000398C 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 40997 0000398F 7330                            jae	short menu_nextitem ;
 40998 00003991 89F7                            mov     di,si           ; DS:DI -> block name to search for
 40999 00003993 E83303                          call    srch_block      ;
 41000 00003996 7406                            je	short menu_itemfound ;
 41001 00003998 F9                              stc                     ;
 41002 00003999 E8E606                          call    print_error     ; print error and pause
 41003 0000399C EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 41004                                  
 41005                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 41006                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 41007                                  ;   and CX are unmodified
 41008                                  
 41009                                  menu_itemfound:
 41010 0000399E 42                              inc     dx              ; otherwise, increment total block count
 41011 0000399F 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 41012 000039A1 8887[2B46]                      mov	[abBlockType+bx],al
 41013 000039A5 01DB                            add     bx,bx           ; of recorded block names and descriptions
 41014                                  
 41015                                  ;   There should be a description immediately following the block name on
 41016                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 41017                                  ;   description...
 41018                                  
 41019 000039A7 89B7[3546]                      mov     [aoffBlockName+bx],si
 41020 000039AB 89B7[4946]                      mov     [aoffBlockDesc+bx],si
 41021 000039AF 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 41022 000039B1 E8A905                          call    skip_token      ;
 41023 000039B4 720B                            jc	short menu_nextitem ; hit eol/eof
 41024 000039B6 E8BA05                          call    skip_delim      ;
 41025 000039B9 7206                            jc	short menu_nextitem ; hit eol/eof
 41026 000039BB 87FB                            xchg    bx,di           ;
 41027 000039BD 89BF[4946]                      mov     [aoffBlockDesc+bx],di
 41028                                  
 41029                                  menu_nextitem:
 41030 000039C1 E8C305                          call    skip_opt_line   ;
 41031 000039C4 E969FF                          jmp     menu_process    ; go back for more lines
 41032                                  
 41033                                  ;   Display menu items now, after determining which one is default
 41034                                  
 41035                                  menu_getdefault:
 41036 000039C7 08D2                            or      dl,dl           ; where there any valid blocks at all?
 41037 000039C9 7505                            jnz	short menu_valid ; yes
 41038 000039CB 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 41039 000039CD E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 41040                                  menu_valid:
 41041 000039D0 29DB                            sub     bx,bx           ;
 41042 000039D2 8816[2646]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 41043 000039D6 8B3E[2746]                      mov     di,[offDefBlock];
 41044 000039DA 09FF                            or      di,di           ; does a default block exist?
 41045 000039DC 741C                            jz	short menu_nodefault ; no
 41046 000039DE 43                              inc     bx              ; yes, walk name table, looking for default
 41047                                  menu_chkdefault:
 41048 000039DF 53                              push    bx              ;
 41049 000039E0 01DB                            add     bx,bx           ;
 41050 000039E2 8BB7[3546]                      mov     si,[aoffBlockName+bx]
 41051 000039E6 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 41052 000039E9 1E                              push    ds              ;
 41053 000039EA 06                              push    es              ;
 41054 000039EB 1F                              pop     ds              ;
 41055 000039EC E81A03                          call    comp_names      ; is this block the same as the default?
 41056 000039EF 1F                              pop     ds              ;
 41057 000039F0 5B                              pop     bx              ;
 41058 000039F1 7409                            je	short menu_setdefault ; yes
 41059 000039F3 43                              inc     bx              ;
 41060 000039F4 3A1E[2646]                      cmp     bl,[bMaxBlock]  ; all done searching?
 41061 000039F8 76E5                            jbe	short menu_chkdefault ; not yet
 41062                                  menu_nodefault:
 41063 000039FA B301                            mov     bl,1            ; if no default, force default to #1
 41064                                  menu_setdefault:
 41065 000039FC 881E[2546]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 41066                                  
 41067                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 41068                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 41069                                  ;   supposed to skip menu display and run with the specified default block;
 41070                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 41071                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 41072                                  ;   with no timeout)
 41073                                  
 41074 00003A00 803E[2946]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 41075 00003A05 750A                            jne	short menu_display ; no
 41076 00003A07 F606[2446]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 41077 00003A0C 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 41078 00003A0E E9C700                          jmp     not_topmenu	;
 41079                                  
 41080                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 41081                                  
 41082                                  menu_display:
 41083 00003A11 B40F                            mov     ah,0Fh          ; get current video mode
 41084 00003A13 CD10                            int     10h             ;
 41085 00003A15 B400                            mov     ah,00h          ; just re-select that mode
 41086 00003A17 CD10                            int     10h             ;
 41087 00003A19 06                              push    es              ;
 41088 00003A1A B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 41089 00003A1D 8EC0                            mov     es,ax           ; and save the current (default) video page
 41090 00003A1F 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 41091 00003A23 A3[2246]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 41092 00003A26 26A06200                        mov     al,[es:0062h]   ;
 41093 00003A2A A2[2146]                        mov     [bCRTPage],al   ;
 41094 00003A2D A1[1C46]                        mov     ax,[bMenuPage]	; select new page for menu
 41095 00003A30 CD10                            int     10h             ;
 41096 00003A32 B80006                          mov     ax,0600h        ; clear entire screen
 41097 00003A35 8A3E[1B46]                      mov     bh,[bMenuColor] ; using this color
 41098 00003A39 29C9                            sub     cx,cx           ; upper left row/col
 41099                                          ;mov	dl,[es:CRT_Cols] 
 41100 00003A3B 268A164A00                      mov	dl,[es:4Ah]
 41101 00003A40 FECA                    	dec     dl              ;
 41102                                          ;mov	dh,[es:CRT_Rows];
 41103 00003A42 268A368400                      mov	dh,[es:84h]
 41104 00003A47 08F6                    	or      dh,dh           ; # of rows valid?
 41105 00003A49 7504                            jnz	short menu_clear ; hopefully
 41106 00003A4B 8A36[1F46]                      mov     dh,[bLastRow]   ; no, use a default
 41107                                  menu_clear:
 41108 00003A4F CD10                            int     10h             ; clear the screen using the req. attribute
 41109 00003A51 07                              pop     es              ;
 41110 00003A52 8836[1F46]                      mov     [bLastRow],dh   ; save DH
 41111 00003A56 BA[034C]                        mov     dx,_$MenuHeader
 41112 00003A59 E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 41113                                  
 41114 00003A5C F606[2046]01                    test    byte [bDisableUI],1
 41115 00003A61 751F                            jnz     short menu_nostatus
 41116 00003A63 8A3E[1C46]                      mov     bh,[bMenuPage]  ;
 41117 00003A67 8A36[1F46]                      mov     dh,[bLastRow]   ; restore DH
 41118 00003A6B B200                            mov     dl,0            ; print the status line on row DH, col 0,
 41119 00003A6D B402                            mov     ah,02h          ; now that we can trash the cursor position
 41120 00003A6F CD10                            int     10h             ;
 41121 00003A71 BA[4F4C]                        mov     dx,_$StatusLine
 41122 00003A74 E87C09                          call    print           ;
 41123 00003A77 B403                            mov     ah,3            ; get cursor position
 41124 00003A79 CD10                            int     10h             ;
 41125 00003A7B 80EA02                          sub     dl,2            ;
 41126 00003A7E 8816[1E46]                      mov     [bLastCol],dl   ; save column where status char will go
 41127                                  
 41128                                  menu_nostatus:
 41129 00003A82 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 41130                                  menu_disploop:
 41131 00003A85 E8B002                          call    print_item	; print item #BL
 41132 00003A88 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 41133 00003A89 3A1E[2646]                      cmp     bl,[bMaxBlock]  ; all done?
 41134 00003A8D 76F6                            jbe	short menu_disploop ; not yet
 41135                                  
 41136                                  ;   Set cursor position to just below the menu items
 41137                                  
 41138 00003A8F B200                            mov     dl,0            ; select column
 41139 00003A91 88DE                            mov     dh,bl           ;
 41140 00003A93 80C604                          add     dh,4            ; select row below menu
 41141 00003A96 8A3E[1C46]                      mov     bh,[bMenuPage]  ;
 41142 00003A9A B402                            mov     ah,02h          ; set cursor position beneath the block list
 41143 00003A9C CD10                            int     10h             ;
 41144                                  
 41145 00003A9E BA[3C4C]                        mov     dx,_$MenuPrmpt
 41146 00003AA1 E84F09                          call    print           ;
 41147 00003AA4 E82903                          call    select_item     ; make a selection, return # in BX
 41148 00003AA7 BA[FC49]                        mov     dx,crlfm	
 41149 00003AAA E84609                          call    print           ;
 41150 00003AAD FF36[2046]                      push    word [bDisableUI]
 41151 00003AB1 800E[2046]01                    or      byte [bDisableUI],1
 41152 00003AB6 E86704                          call    show_status     ; clear the status line now
 41153 00003AB9 8F06[2046]                      pop     word [bDisableUI]
 41154                                  
 41155                                  ;   Now begins the "re-organization" process...
 41156                                  
 41157                                  menu_autoselect:
 41158 00003ABD 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 41159 00003AC0 7508                            jne	short normal_boot ; no
 41160 00003AC2 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 41161                                  menu_abort:
 41162 00003AC5 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 41163 00003AC7 E9E400                          jmp	menu_exit	;
 41164                                  
 41165                                  normal_boot:
 41166 00003ACA 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 41167 00003ACD 7509                            jne	short not_topmenu ; no
 41168 00003ACF 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 41169 00003AD3 29F6                            sub     si,si           ;
 41170 00003AD5 E9FFFD                          jmp     menu_search
 41171                                  
 41172                                  not_topmenu:
 41173 00003AD8 80BF[2B46]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 41174 00003ADD 7510                            jne	short not_submenu
 41175 00003ADF 01DB                            add     bx,bx           ;
 41176 00003AE1 8BBF[3546]                      mov     di,[aoffBlockName+bx]
 41177 00003AE5 E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 41178 00003AE8 89FE                            mov     si,di           ;
 41179 00003AEA 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 41180 00003AEC E929FE                          jmp     menu_found
 41181                                  
 41182                                  not_submenu:
 41183 00003AEF 01DB                            add     bx,bx           ; get BX -> name of selected block
 41184 00003AF1 8B9F[3546]                      mov     bx,[aoffBlockName+bx]
 41185                                  
 41186                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 41187                                  ;   the offset relative to ES of the block name to be processed (along with
 41188                                  ;   all the "common" lines of course)
 41189                                  
 41190                                  no_selection:
 41191 00003AF5 891E[2746]                      mov     [offDefBlock],bx; save selection
 41192 00003AF9 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 41193 00003AFD 29F6                            sub     si,si           ;
 41194 00003AFF 1E                              push    ds              ;
 41195 00003B00 8E1E[DA14]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 41196 00003B04 29FF                            sub     di,di           ;
 41197                                  
 41198                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 41199                                  ;
 41200                                  ;   Work our way through the config.sys image again, this time copying
 41201                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 41202                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 41203                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 41204                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 41205                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 41206                                  ;
 41207                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 41208                                  ;   stack we're running on, then we should check it inside copy_block
 41209                                  
 41210                                  copyblock_loop:
 41211 00003B06 53                              push    bx              ; save selected block name
 41212 00003B07 E82F01                          call    copy_block      ; process (named or common) block
 41213 00003B0A 5B                              pop     bx              ;
 41214 00003B0B 7232                            jc	short move_config ; hit eof
 41215                                  
 41216                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 41217                                  
 41218                                  copyblock_begin:
 41219                                  
 41220                                  ; 10/09/2023
 41221                                  %if 0
 41222                                          push    ax              ;
 41223                                          push    cx              ;
 41224                                          push    si              ;
 41225                                          push    di              ; always do "common" blocks
 41226                                          mov     di,szCommon
 41227                                          push    ds              ;
 41228                                          push    cs              ;
 41229                                          pop     ds              ;
 41230                                          call    comp_names      ;
 41231                                          pop     ds              ;
 41232                                          pop     di              ;
 41233                                          pop     si              ;
 41234                                          pop     cx              ;
 41235                                          pop     ax              ;
 41236                                          je	short copyblock_check
 41237                                  %endif
 41238                                  	; 10/09/2023
 41239 00003B0D 57                      	push	di
 41240 00003B0E BF[6A46]                	mov	di,szCommon	; always do "common" blocks
 41241 00003B11 E81602                  	call	comp_names_x	; (comp_names_safe)
 41242 00003B14 5F                      	pop	di
 41243 00003B15 740F                    	je	short copyblock_check
 41244                                  
 41245 00003B17 09DB                            or      bx,bx           ; is there a block name to check?
 41246 00003B19 7414                            jz	short copyblock_skip ; no
 41247 00003B1B 57                              push    di              ;
 41248 00003B1C 89DF                            mov     di,bx           ; check block against given block name
 41249 00003B1E 1E                              push    ds              ;
 41250 00003B1F 06                              push    es              ;
 41251 00003B20 1F                              pop     ds              ;
 41252 00003B21 E8E501                          call    comp_names      ; is this the block we really want to do?
 41253 00003B24 1F                              pop     ds              ;
 41254 00003B25 5F                              pop     di              ;
 41255                                  copyblock_check:
 41256 00003B26 7217                            jc	short move_config ; hit eof
 41257 00003B28 7505                            jne	short copyblock_skip ;
 41258 00003B2A E85A04                          call    skip_opt_line   ;
 41259 00003B2D EBD7                            jmp	short copyblock_loop
 41260                                  
 41261                                  copyblock_skip:                 ;
 41262 00003B2F E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 41263 00003B32 E87804                          call    get_char        ;
 41264 00003B35 7208                            jc	short move_config ; hit eof
 41265 00003B37 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41266 00003B39 3C5B                            cmp     al,CONFIG_BEGIN ;
 41267 00003B3B 74D0                            je	short copyblock_begin
 41268 00003B3D EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 41269                                  ;
 41270                                  ;   To create as little risk to the rest of SysInit as little as possible,
 41271                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 41272                                  ;   copy the new config.sys image to "confbot"
 41273                                  ;
 41274                                  move_config:
 41275 00003B3F 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 41276 00003B41 51                              push    cx              ;
 41277                                  ;
 41278                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 41279                                  ;   since the configuration name only currently exists in the "confbot" area
 41280                                  ;
 41281                                   	;mov	cx,7
 41282 00003B42 B90700                  	mov     cx,szMenu-szBoot-1
 41283 00003B45 BE[5D46]                        mov     si,szBoot	; first copy the CONFIG= part
 41284 00003B48 47                              inc     di              ; skip a byte, in case absolutely nothing
 41285                                                                  ; was copied to the workspace, because we always
 41286                                                                  ; zero the first byte of the workspace (below)
 41287                                  copy_boot: 
 41288                                  	;lods    byte ptr cs:[si];
 41289 00003B49 2E                              cs
 41290 00003B4A AC                      	lodsb
 41291 00003B4B 8805                    	mov     [di],al         ;
 41292 00003B4D 47                              inc     di              ;
 41293 00003B4E E2F9                            loop    copy_boot       ;
 41294                                  
 41295 00003B50 06                              push    es              ; then copy the configuration name
 41296                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 41297                                  	; 04/01/2023
 41298 00003B51 B179                    	mov	cl,128-7
 41299 00003B53 2E8B36[2746]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 41300 00003B58 09F6                            or      si,si           ; valid?
 41301 00003B5A 7505                            jnz	short l1	; yes
 41302 00003B5C 0E                              push    cs              ;
 41303 00003B5D 07                              pop     es              ;
 41304 00003B5E BE[6A46]                        mov     si,szCommon
 41305 00003B61 268A04                  l1:     mov     al,[es:si]      ;
 41306 00003B64 E8B205                          call    any_delim       ;
 41307 00003B67 7406                            je	short l2	;
 41308 00003B69 8805                            mov     [di],al         ;
 41309 00003B6B 46                              inc     si              ;
 41310 00003B6C 47                              inc     di              ;
 41311 00003B6D E2F2                            loop    l1              ;
 41312 00003B6F C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 41313 00003B72 07                              pop     es              ;
 41314                                  
 41315                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 41316                                  
 41317 00003B73 29FF                            sub     di,di           ;
 41318 00003B75 2E893E[D814]                    mov     [cs:config_envlen],di
 41319 00003B7A 29F6                            sub     si,si           ;
 41320 00003B7C 59                              pop     cx              ; recover the size of "config_wrkseg"
 41321                                  
 41322 00003B7D 51                              push    cx              ;
 41323 00003B7E F3A4                            rep     movsb           ; moved!
 41324 00003B80 59                              pop     cx              ;
 41325 00003B81 8CD8                            mov     ax,ds           ;
 41326 00003B83 1F                              pop     ds              ;
 41327                                  
 41328                                  ;   Now that the config_wrkseg is available once again, we shall
 41329                                  ;   use it to create an environment. The first thing to go in will be
 41330                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 41331                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 41332                                  ;   is empty.
 41333                                  
 41334 00003B84 06                              push    es              ;
 41335 00003B85 8EC0                            mov     es,ax           ;
 41336 00003B87 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 41337 00003B88 26C606000000                    mov     byte [es:0],0	;empty the environment block
 41338 00003B8E E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 41339 00003B91 07                              pop     es
 41340                                  
 41341                                  ;   Before returning, restore the default video page setting but do NOT
 41342                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 41343                                  ;   displayed on a different page, then it's because we don't want to see
 41344                                  ;   all the device driver/TSR goop (which goes to the default page)
 41345                                  
 41346                                  menu_done:
 41347 00003B92 803E[1C46]00                    cmp     byte [bMenuPage],0
 41348 00003B97 7415                            je	short menu_exit	;
 41349 00003B99 06                              push    es              ;
 41350 00003B9A B84000                          mov     ax,40h          ;
 41351 00003B9D 8EC0                            mov     es,ax           ;
 41352 00003B9F A1[2246]                        mov     ax,[wCRTStart]  ;
 41353 00003BA2 26A34E00                        mov     [es:004Eh],ax   ;
 41354 00003BA6 A0[2146]                        mov     al,[bCRTPage]   ;
 41355 00003BA9 26A26200                        mov     [es:0062h],al   ;
 41356 00003BAD 07                              pop     es              ;
 41357                                  menu_exit:
 41358 00003BAE 890E[5403]                      mov     [count],cx      ; set new counts
 41359 00003BB2 890E[5603]                      mov     [org_count],cx  ;
 41360                                          ; 10/09/2023 (*) - Erdogan Tan
 41361                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 41362                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 41363                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 41364 00003BB6 C3                      	retn
 41365                                  
 41366                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 41367                                  ;	position (then 'retn' just after it)
 41368                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 41369                                  
 41370                                  ;----------------------------------------------------------------------------
 41371                                  ;
 41372                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 41373                                  ;
 41374                                  ;   INPUT
 41375                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 41376                                  ;
 41377                                  ;   OUTPUT
 41378                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 41379                                  ;       carry set if error (eg, missing =); clear otherwise
 41380                                  ;
 41381                                  ;   OTHER REGS USED
 41382                                  ;       None
 41383                                  ;
 41384                                  ;   NOTES
 41385                                  ;       None
 41386                                  ;
 41387                                  ;   HISTORY
 41388                                  ;       Created 29-Mar-1992 by JeffPar
 41389                                  ;
 41390                                  ;----------------------------------------------------------------------------
 41391                                  
 41392                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41393                                  	; (SYSINIT:46D4h)
 41394                                  
 41395                                  copy_envvar:
 41396 00003BB7 51                              push    cx              ;
 41397 00003BB8 56                              push    si              ;
 41398 00003BB9 1E                              push    ds              ;
 41399 00003BBA 06                              push    es              ;
 41400 00003BBB 06                              push    es              ;
 41401 00003BBC 8E06[DA14]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 41402 00003BC0 1F                              pop     ds                 ; DS:SI to point to envvar
 41403                                  
 41404                                  ;   Have to calculate the length of the variable name (and if we hit
 41405                                  ;   the end of the line before we hit '=', then it's curtains for this
 41406                                  ;   config.sys line)
 41407                                  ;
 41408                                  ;   The check for NULL is important because copy_envvar is also used to copy
 41409                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 41410                                  ;   menu block existed (in order to prevent the creation of an environment)
 41411                                  
 41412 00003BC1 29C9                            sub     cx,cx           ;
 41413                                  copy_varlen:                    ;
 41414 00003BC3 AC                              lodsb                   ;
 41415 00003BC4 08C0                            or      al,al           ; NULL?
 41416                                          ;stc	; 10/09/2023 (x)
 41417 00003BC6 746B                            jz	short copy_envexit ; yes, abort
 41418 00003BC8 3C0D                            cmp     al,cr           ;
 41419                                          ;stc	; 10/09/2023 (x)
 41420 00003BCA 7467                            je	short copy_envexit
 41421 00003BCC 3C0A                            cmp     al,lf           ;
 41422                                          ;stc	; 10/09/2023 (x)
 41423 00003BCE 7463                            je	short copy_envexit
 41424 00003BD0 41                              inc     cx              ;
 41425 00003BD1 3C3D                            cmp     al,'='          ;
 41426 00003BD3 75EE                            jne	short copy_varlen
 41427 00003BD5 B000                            mov     al,0            ;
 41428 00003BD7 8A24                            mov     ah,[si]         ; save char after '='
 41429 00003BD9 29CE                            sub     si,cx           ; back up to given varname
 41430 00003BDB 49                              dec     cx              ; CX == # of bytes in varname
 41431 00003BDC 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 41432                                  copy_varsrch:
 41433 00003BDE 263805                          cmp     byte [es:di],al
 41434 00003BE1 7425                            je	short copy_envprep ; search failed, just copy var
 41435 00003BE3 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 41436 00003BE5 51                              push    cx              ;
 41437 00003BE6 56                              push    si              ;
 41438 00003BE7 F3A6                            repe    cmpsb           ;
 41439 00003BE9 5E                              pop     si              ;
 41440 00003BEA 59                              pop     cx              ;
 41441 00003BEB 7531                            jne	short copy_varnext ; no match, skip to next varname
 41442 00003BED 26803D3D                        cmp     byte [es:di],'='
 41443 00003BF1 752B                            jne     short copy_varnext ; no match, there's more characters
 41444                                  
 41445                                  ;   Previous occurrence of variable has been found; determine the
 41446                                  ;   entire length and then destroy it
 41447                                  
 41448 00003BF3 B9FFFF                          mov     cx,-1           ;
 41449 00003BF6 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 41450 00003BF8 56                              push    si              ;
 41451 00003BF9 89FE                            mov     si,di           ;
 41452 00003BFB 89DF                            mov     di,bx           ;
 41453 00003BFD 2E8B0E[D814]                    mov     cx,[cs:config_envlen]
 41454 00003C02 29F1                            sub     cx,si           ; destroy variable now
 41455                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 41456                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 41457                                  
 41458 00003C04 F3                      	rep	; 0F3h
 41459 00003C05 26                      	es	; 26h
 41460 00003C06 A4                      	movsb	; 0A4h
 41461                                  
 41462 00003C07 5E                      	pop     si
 41463                                  copy_envprep:
 41464 00003C08 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 41465 00003C0B 741D                            je	short copy_envdel ; then just exit with variable deleted
 41466 00003C0D 80FC0A                          cmp     ah,lf           ;
 41467 00003C10 7418                            je	short copy_envdel
 41468                                          ;jmp	short copy_envloop
 41469                                  	; 04/01/2023
 41470                                  copy_envloop:                  ;
 41471 00003C12 AC                      	lodsb                   ;
 41472 00003C13 3C0D                    	cmp	al,cr           ;
 41473 00003C15 7410                    	je	short copy_envdone
 41474 00003C17 3C0A                    	cmp	al,lf           ;
 41475 00003C19 740C                    	je	short copy_envdone
 41476 00003C1B AA                      	stosb                   ;
 41477 00003C1C EBF4                    	jmp	short copy_envloop
 41478                                  
 41479                                  copy_varnext:                   ;
 41480 00003C1E 51                              push    cx              ;
 41481 00003C1F B9FFFF                          mov     cx,-1           ;
 41482 00003C22 F2AE                            repne   scasb           ;
 41483 00003C24 59                              pop     cx              ;
 41484 00003C25 EBB7                            jmp	short copy_varsrch
 41485                                  
 41486                                  	; 04/01/2023
 41487                                  ;copy_envloop:                  ;
 41488                                  ;	lodsb                   ;
 41489                                  ;	cmp	al,cr           ;
 41490                                  ;	je	short copy_envdone
 41491                                  ;	cmp	al,lf           ;
 41492                                  ;	je	short copy_envdone
 41493                                  ;	stosb                   ;
 41494                                  ;	jmp	short copy_envloop
 41495                                  
 41496                                  copy_envdone:                   ;
 41497 00003C27 28C0                            sub     al,al           ; do SUB to clear carry as well
 41498 00003C29 AA                              stosb                   ; always null-terminate these puppies
 41499                                  copy_envdel:                    ;
 41500 00003C2A 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 41501 00003C2D 2E893E[D814]                    mov     [cs:config_envlen],di
 41502                                  	; 10/09/2023 (x) - Erdogan Tan
 41503 00003C32 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 41504                                  copy_envexit:                   ;
 41505 00003C33 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 41506 00003C34 07                              pop     es              ;
 41507 00003C35 1F                              pop     ds              ;
 41508 00003C36 5E                              pop     si              ;
 41509 00003C37 59                              pop     cx              ;
 41510                                  
 41511                                  copy_done:	; 18/12/2022
 41512 00003C38 C3                              retn
 41513                                  
 41514                                  ;----------------------------------------------------------------------------
 41515                                  ;
 41516                                  ;   copy_block:  copy the current block to the new config.sys workspace
 41517                                  ;
 41518                                  ;   INPUT
 41519                                  ;       CX == remaining bytes in "organized" config.sys memory image
 41520                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 41521                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 41522                                  ;             config.sys image) where the current block is to be copied
 41523                                  ;
 41524                                  ;   OUTPUT
 41525                                  ;       Same as above
 41526                                  ;       AL also equals the last character read from the organized image
 41527                                  ;
 41528                                  ;   OTHER REGS USED
 41529                                  ;       All
 41530                                  ;
 41531                                  ;   NOTES
 41532                                  ;       None
 41533                                  ;
 41534                                  ;   HISTORY
 41535                                  ;       Created 16-Mar-1992 by JeffPar
 41536                                  ;
 41537                                  ;----------------------------------------------------------------------------
 41538                                  
 41539                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41540                                  	; (SYSINIT:4759h)
 41541                                  
 41542                                  copy_block:
 41543 00003C39 E87103                          call    get_char        ; check for include
 41544 00003C3C 72FA                            jc	short copy_done	;
 41545 00003C3E 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41546 00003C40 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 41547 00003C42 74F4                            je	short copy_done ;
 41548                                  
 41549 00003C44 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 41550 00003C46 88E0                            mov     al,ah           ; AL == the original line code
 41551 00003C48 753A                            jne	short copy_line	; not an "include" line
 41552                                  
 41553                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 41554                                  ;   never try to include the block again (no infinite include loops please),
 41555                                  ;   then search for the named block and call copy_block again.
 41556                                  
 41557 00003C4A 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 41558 00003C4F 57                              push    di              ;
 41559                                  
 41560 00003C50 BF[6546]                        mov     di,szMenu
 41561 00003C53 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 41562 00003C56 7426                            je	short copy_skip	;
 41563                                  
 41564 00003C58 BF[6A46]                        mov     di,szCommon
 41565 00003C5B E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 41566 00003C5E 741E                            je	short copy_skip	;
 41567                                  
 41568 00003C60 89F7                            mov     di,si           ; try to find the block
 41569 00003C62 E86400                          call    srch_block      ;
 41570 00003C65 89FA                            mov     dx,di           ;
 41571                                  	; 10/09/2023
 41572                                  	;pop    di              ;
 41573 00003C67 7514                            jne	short copy_error ; no such block
 41574 00003C69 5F                      	pop	di  ; 10/09/2023
 41575 00003C6A 51                              push    cx              ;
 41576 00003C6B 89D9                            mov     cx,bx           ;
 41577 00003C6D 56                              push    si              ;
 41578 00003C6E 4A                              dec     dx              ;
 41579 00003C6F 89D6                            mov     si,dx           ;
 41580 00003C71 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 41581 00003C74 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 41582 00003C77 5E                              pop     si              ;
 41583 00003C78 59                              pop     cx              ;
 41584 00003C79 28C0                            sub     al,al           ; force skip_opt_line to skip...
 41585 00003C7B EB2B                            jmp     short copy_nextline
 41586                                  
 41587                                  copy_error:
 41588                                  	; 10/09/2023
 41589 00003C7D F8                      	clc
 41590                                  copy_skip:
 41591 00003C7E 5F                              pop     di
 41592                                  ;copy_error:
 41593                                  	; 10/09/2023 (cf=0)
 41594                                  	;clc                    ;
 41595 00003C7F E80004                          call    print_error     ; note that carry is clear, no pause
 41596 00003C82 EB24                            jmp     short copy_nextline
 41597                                  
 41598                                  ;   Copy the line at ES:SI to the current location at DS:DI
 41599                                  
 41600                                  copy_line:
 41601 00003C84 8805                            mov     [di],al         ;
 41602 00003C86 47                              inc     di              ;
 41603 00003C87 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 41604 00003C89 721D                            jb	short copy_nextline ; no
 41605 00003C8B 2E803E[DD14]00                  cmp     byte [cs:config_multi],0
 41606 00003C91 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 41607 00003C93 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 41608 00003C96 891D                            mov     [di],bx         ; stash it immediately following the line code
 41609 00003C98 47                              inc     di              ;
 41610 00003C99 47                              inc     di              ;
 41611 00003C9A EB08                            jmp     short copy_next ;
 41612                                  copy_loop:                      ;
 41613 00003C9C E80E03                          call    get_char        ;
 41614 00003C9F 7297                            jc	short copy_done ; end of file
 41615 00003CA1 8805                            mov     [di],al         ;
 41616 00003CA3 47                              inc     di              ;
 41617                                  copy_next:
 41618 00003CA4 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 41619 00003CA6 75F4                            jne	short copy_loop	; nope
 41620                                  
 41621                                  copy_nextline:
 41622 00003CA8 E8DC02                          call    skip_opt_line   ;
 41623 00003CAB EB8C                            jmp     short copy_block
 41624                                  
 41625                                  	; 18/12/2022
 41626                                  ;copy_done:
 41627                                          ;retn
 41628                                  
 41629                                  ;----------------------------------------------------------------------------
 41630                                  ;
 41631                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 41632                                  ;
 41633                                  ;   INPUT
 41634                                  ;    ES:SI -> some line in the config.sys memory image
 41635                                  ;
 41636                                  ;   OUTPUT
 41637                                  ;       BX == line # (relative to 1)
 41638                                  ;
 41639                                  ;   OTHER REGS USED
 41640                                  ;       DX
 41641                                  ;
 41642                                  ;   NOTES
 41643                                  ;       None
 41644                                  ;
 41645                                  ;   HISTORY
 41646                                  ;       Created 16-Mar-1992 by JeffPar
 41647                                  ;
 41648                                  ;----------------------------------------------------------------------------
 41649                                  
 41650                                  get_linenum:
 41651 00003CAD 50                              push    ax              ;
 41652 00003CAE 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 41653 00003CB0 51                              push    cx              ;
 41654 00003CB1 89F2                            mov     dx,si           ; DX == the offset we're looking for
 41655 00003CB3 56                              push    si              ;
 41656 00003CB4 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 41657 00003CB9 29F6                            sub     si,si           ; prepare to scan entire file
 41658                                  get_linenum_loop:               ;
 41659 00003CBB E8C402                          call    skip_line       ;
 41660 00003CBE 7205                            jc	short get_linenum_done
 41661 00003CC0 43                              inc     bx              ;
 41662 00003CC1 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 41663 00003CC3 72F6                            jb	short get_linenum_loop ; no
 41664                                  get_linenum_done:               ;
 41665 00003CC5 5E                              pop     si              ;
 41666 00003CC6 59                              pop     cx              ;
 41667 00003CC7 58                              pop     ax              ;
 41668 00003CC8 C3                              retn
 41669                                  
 41670                                  ;----------------------------------------------------------------------------
 41671                                  ;
 41672                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 41673                                  ;
 41674                                  ;   INPUT
 41675                                  ;       ES -> config.sys image
 41676                                  ;    ES:DI -> block name to find
 41677                                  ;
 41678                                  ;   OUTPUT
 41679                                  ;       ZF flag set, if found
 41680                                  ;    ES:DI -> just past the name in the block heading, if found
 41681                                  ;       BX == # bytes remaining from that point, if found
 41682                                  ;
 41683                                  ;   OTHER REGS USED
 41684                                  ;       None
 41685                                  ;
 41686                                  ;   NOTES
 41687                                  ;       This differs from "find_block" in that it searches the ENTIRE
 41688                                  ;       config.sys image, not merely the remaining portion, and that it
 41689                                  ;       takes a pointer to block name that is *elsewhere* in the image
 41690                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 41691                                  ;
 41692                                  ;   HISTORY
 41693                                  ;       Created 16-Mar-1992 by JeffPar
 41694                                  ;
 41695                                  ;----------------------------------------------------------------------------
 41696                                  
 41697                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 41698 00003CC9 50                              push    ax              ;
 41699 00003CCA 51                              push    cx              ;
 41700 00003CCB 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 41701 00003CD0 56                              push    si              ;
 41702 00003CD1 29F6                            sub     si,si           ;
 41703 00003CD3 1E                              push    ds              ;
 41704 00003CD4 06                              push    es              ;
 41705 00003CD5 1F                              pop     ds              ;
 41706 00003CD6 E80900                          call    find_block      ;
 41707 00003CD9 89F7                            mov     di,si           ;
 41708 00003CDB 89CB                            mov     bx,cx           ;
 41709 00003CDD 1F                              pop     ds              ;
 41710 00003CDE 5E                              pop     si              ;
 41711 00003CDF 59                              pop     cx              ;
 41712 00003CE0 58                              pop     ax              ;
 41713                                  find_exit: ; 16/04/2019
 41714 00003CE1 C3                              retn			;
 41715                                  
 41716                                  ;----------------------------------------------------------------------------
 41717                                  ;
 41718                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 41719                                  ;
 41720                                  ;   INPUT
 41721                                  ;    DS:DI -> block name to find
 41722                                  ;    ES:SI -> remainder of config.sys image
 41723                                  ;       CX == remaining size of config.sys image
 41724                                  ;
 41725                                  ;   OUTPUT
 41726                                  ;       ZF flag set, if found (also, CF set if EOF)
 41727                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 41728                                  ;       CX == # bytes remaining from that point
 41729                                  ;
 41730                                  ;   OTHER REGS USED
 41731                                  ;       AX
 41732                                  ;
 41733                                  ;   NOTES
 41734                                  ;       This differs from "srch_block" in that it searches only the
 41735                                  ;       remaining portion of the config.sys image and leaves SI and CX
 41736                                  ;       pointing to where the search left off, and that it takes a pointer
 41737                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 41738                                  ;
 41739                                  ;   HISTORY
 41740                                  ;       Created 16-Mar-1992 by JeffPar
 41741                                  ;
 41742                                  ;----------------------------------------------------------------------------
 41743                                  
 41744                                  find_block:
 41745 00003CE2 E8C802                          call    get_char        ; get line code
 41746 00003CE5 72FA                            jc	short find_exit	; end of file
 41747 00003CE7 247F                            and     al,~CONFIG_OPTION_QUERY
 41748 00003CE9 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 41749 00003CEB 740C                            je	short check_line ; no
 41750 00003CED 3C4A                            cmp     al,CONFIG_INCLUDE
 41751 00003CEF 7513                            jne	short next_line	;
 41752 00003CF1 2E800E[DD14]01                  or	byte [cs:config_multi],1
 41753 00003CF7 EB0B                            jmp     short next_line ;
 41754                                  check_line:
 41755 00003CF9 2E800E[DD14]01                  or      byte [cs:config_multi],1
 41756 00003CFF E80700                          call    comp_names      ; compare block names
 41757 00003D02 76DD                            jbe	short find_exit	; end of file, or names matched
 41758                                  next_line:
 41759 00003D04 E88002                          call    skip_opt_line   ; no, so skip to next line
 41760 00003D07 EBD9                            jmp	short find_block  ;
 41761                                  ;find_exit:
 41762                                  ;	retn
 41763                                  
 41764                                  ;----------------------------------------------------------------------------
 41765                                  ;
 41766                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 41767                                  ;
 41768                                  ;   INPUT
 41769                                  ;    DS:DI -> keyword to compare
 41770                                  ;    ES:SI -> position in config.sys
 41771                                  ;       CX == remaining bytes in config.sys
 41772                                  ;
 41773                                  ;   OUTPUT
 41774                                  ;       ZF flag set, if match (also, CF set if EOF)
 41775                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 41776                                  ;       CX == # bytes remaining from that point
 41777                                  ;
 41778                                  ;   OTHER REGS USED
 41779                                  ;       AX
 41780                                  ;
 41781                                  ;   NOTES
 41782                                  ;       None
 41783                                  ;
 41784                                  ;   HISTORY
 41785                                  ;       Created 16-Mar-1992 by JeffPar
 41786                                  ;
 41787                                  ;----------------------------------------------------------------------------
 41788                                  
 41789                                  comp_names:
 41790 00003D09 57                              push    di              ;
 41791                                  comp_loop:                      ;
 41792 00003D0A E8A002                          call    get_char        ;
 41793 00003D0D 7210                            jc	short comp_exit	;
 41794 00003D0F E80704                          call    any_delim       ; is next character a delimiter?
 41795 00003D12 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 41796 00003D14 740B                            je	short comp_almost ; yes, it *could* be a match
 41797 00003D16 47                              inc     di              ;
 41798 00003D17 25DFDF                          and     ax,~2020h ; 0DFDFh 
 41799                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 41800 00003D1A 38E0                            cmp     al,ah           ; match?
 41801 00003D1C 74EC                            je	short comp_loop ; yes, keep looking at the characters
 41802 00003D1E F8                              clc                     ; prevent erroneous eof indication: clear carry
 41803                                  comp_exit:                      ;
 41804 00003D1F 5F                              pop     di              ;
 41805 00003D20 C3                              retn			;
 41806                                  comp_almost:                    ;
 41807 00003D21 86E0                            xchg    al,ah           ; we don't know for sure if it's a match
 41808 00003D23 E8F303                          call    any_delim       ; until we verify that the second string has
 41809 00003D26 86E0                            xchg    al,ah           ; been exhausted also...
 41810 00003D28 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 41811                                  
 41812                                  ;----------------------------------------------------------------------------
 41813                                  
 41814                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 41815                                  comp_names_x:
 41816                                  	;
 41817                                  comp_names_safe:
 41818 00003D2A 50                              push    ax
 41819 00003D2B 51                              push    cx
 41820 00003D2C 56                              push	si
 41821 00003D2D 1E                              push    ds
 41822 00003D2E 0E                              push    cs
 41823 00003D2F 1F                              pop     ds
 41824 00003D30 E8D6FF                          call    comp_names
 41825 00003D33 1F                              pop     ds
 41826 00003D34 5E                      	pop	si
 41827 00003D35 59                              pop     cx
 41828 00003D36 58                              pop     ax
 41829 00003D37 C3                              retn
 41830                                  
 41831                                  ;----------------------------------------------------------------------------
 41832                                  ;
 41833                                  ;   print_item:  display menu item #BL
 41834                                  ;
 41835                                  ;   INPUT
 41836                                  ;       BL == menu item # to display
 41837                                  ;
 41838                                  ;   OUTPUT
 41839                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 41840                                  ;
 41841                                  ;   OTHER REGS USED
 41842                                  ;       None
 41843                                  ;
 41844                                  ;   NOTES
 41845                                  ;       This function saves/restores the current cursor position, so you
 41846                                  ;       needn't worry about it.
 41847                                  ;
 41848                                  ;   HISTORY
 41849                                  ;       Created 16-Mar-1992 by JeffPar
 41850                                  ;
 41851                                  ;----------------------------------------------------------------------------
 41852                                  
 41853                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41854                                  	; (SYSINIT:485Ah)
 41855                                  
 41856                                  print_item:		; prints menu item #BL (1 to N)
 41857 00003D38 50                              push    ax              ;
 41858 00003D39 53                              push    bx              ;
 41859 00003D3A 51                              push    cx              ;
 41860 00003D3B 52                              push    dx              ;
 41861 00003D3C 56                              push    si              ;
 41862 00003D3D B403                            mov     ah,03h          ; get cursor position
 41863 00003D3F 8A3E[1C46]                      mov     bh,[bMenuPage]  ; always page zero
 41864 00003D43 CD10                            int     10h             ; DH/DL = row/column
 41865 00003D45 52                              push    dx              ; save it
 41866 00003D46 B402                            mov     ah,02h          ; set cursor position
 41867 00003D48 88DE                            mov     dh,bl           ;
 41868 00003D4A 80C603                          add     dh,3            ;
 41869 00003D4D B205                            mov     dl,5            ;
 41870 00003D4F CD10                            int     10h             ; set cursor position for correct row/col
 41871 00003D51 88D8                            mov     al,bl           ;
 41872 00003D53 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 41873 00003D55 8A26[1B46]                      mov     ah,[bMenuColor] ; normal attribute
 41874 00003D59 3A1E[2546]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 41875 00003D5D 7510                            jne	short print_other ; no
 41876 00003D5F 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 41877 00003D62 88E5                            mov     ch,ah           ;
 41878 00003D64 B104                            mov     cl,4            ;
 41879 00003D66 D2C5                            rol     ch,cl           ;
 41880 00003D68 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 41881 00003D6A 7503                            jne	short print_other ; no
 41882 00003D6C 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 41883                                  print_other:                    ;
 41884 00003D6F B700                            mov     bh,0            ;
 41885 00003D71 01DB                            add     bx,bx           ;
 41886 00003D73 8BBF[4946]                      mov     di,[aoffBlockDesc+bx]
 41887 00003D77 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 41888 00003D79 8A3E[1C46]                      mov     bh,[bMenuPage]  ; get correct video page #
 41889 00003D7D B409                            mov     ah,09h          ; write char/attr
 41890 00003D7F B90100                          mov     cx,1            ;
 41891 00003D82 CD10                            int     10h             ;
 41892 00003D84 FEC2                            inc     dl              ; increment column
 41893 00003D86 B402                            mov     ah,02h          ;
 41894 00003D88 CD10                            int     10h             ;
 41895                                          ;mov	ax,0900h+'.'    ;
 41896 00003D8A B82E09                          mov	ax,092Eh
 41897 00003D8D CD10                    	int     10h             ; display '.'
 41898 00003D8F FEC2                            inc     dl              ; increment column
 41899 00003D91 B402                            mov     ah,02h          ;
 41900 00003D93 CD10                            int     10h             ;
 41901                                          ;mov	ax,0900h+' '    ;
 41902 00003D95 B82009                          mov	ax,0920h
 41903 00003D98 CD10                    	int     10h             ; display ' '
 41904 00003D9A FEC2                            inc     dl              ; increment column
 41905 00003D9C B402                            mov     ah,02h          ;
 41906 00003D9E CD10                            int     10h             ;
 41907 00003DA0 06                              push    es              ;
 41908                                  print_loop:                     ;
 41909 00003DA1 268A05                          mov     al,[es:di]	; get a character of the description
 41910 00003DA4 47                              inc     di              ;
 41911 00003DA5 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 41912 00003DA7 7502                            jne	short print_nontab ;
 41913 00003DA9 B020                            mov     al,' '          ;
 41914                                  print_nontab:                   ;
 41915 00003DAB 3C20                            cmp     al,' '          ;
 41916 00003DAD 7215                            jb	short print_done ; stop at the 1st character < space
 41917 00003DAF 3C24                            cmp     al,'$'          ;
 41918 00003DB1 7411                            je	short print_done ; also stop on $
 41919 00003DB3 B409                            mov     ah,09h          ; display function #
 41920 00003DB5 CD10                            int     10h             ;
 41921 00003DB7 FEC2                            inc     dl              ; increment column
 41922 00003DB9 80FA4E                          cmp     dl,78           ; far enough?
 41923 00003DBC 7306                            jae	short print_done ; yes
 41924 00003DBE B402                            mov     ah,02h          ;
 41925 00003DC0 CD10                            int     10h             ;
 41926 00003DC2 EBDD                            jmp	short  print_loop
 41927                                  print_done:                     ;
 41928 00003DC4 07                              pop     es              ;
 41929 00003DC5 5A                              pop     dx              ;
 41930 00003DC6 B402                            mov     ah,02h          ;
 41931 00003DC8 CD10                            int     10h             ; restore previous row/col
 41932 00003DCA 5E                              pop     si              ;
 41933 00003DCB 5A                              pop     dx              ;
 41934 00003DCC 59                              pop     cx              ;
 41935 00003DCD 5B                              pop     bx              ;
 41936 00003DCE 58                              pop     ax              ;
 41937 00003DCF C3                              retn			;
 41938                                  
 41939                                  ;----------------------------------------------------------------------------
 41940                                  ;
 41941                                  ;   select_item:  wait for user to select menu item, with time-out
 41942                                  ;
 41943                                  ;   INPUT
 41944                                  ;       None
 41945                                  ;
 41946                                  ;   OUTPUT
 41947                                  ;       BX == menu item # (1-N), or -1 for clean boot
 41948                                  ;       Selected menu item highlighted
 41949                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 41950                                  ;
 41951                                  ;   OTHER REGS USED
 41952                                  ;       None
 41953                                  ;
 41954                                  ;   NOTES
 41955                                  ;       None
 41956                                  ;
 41957                                  ;   HISTORY
 41958                                  ;       Created 16-Mar-1992 by JeffPar
 41959                                  ;
 41960                                  ;----------------------------------------------------------------------------
 41961                                  
 41962                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 41963 00003DD0 8A1E[2546]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 41964 00003DD4 88D8                            mov     al,bl           ;
 41965 00003DD6 E83701                          call    disp_num        ;
 41966 00003DD9 E84401                          call    show_status     ; display current interactive status
 41967 00003DDC 803E[2946]FF                    cmp     byte [secTimeOut],-1
 41968 00003DE1 7452                            je	short input_key	; no time-out, just go to input
 41969 00003DE3 B42C                            mov     ah,GET_TIME ; 2Ch
 41970 00003DE5 CD21                            int     21h             ;
 41971 00003DE7 88F7                            mov     bh,dh           ; BH = initial # of seconds
 41972                                  check_time:
 41973 00003DE9 A0[2946]                        mov     al,[secTimeOut] ;
 41974 00003DEC 2A06[2A46]                      sub     al,[secElapsed] ;
 41975 00003DF0 730D                            jae	short show_time	;
 41976 00003DF2 800E[2446]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 41977 00003DF7 C606[2A46]00                    mov     byte [secElapsed],0
 41978 00003DFC E9F600                          jmp	select_done	; time's up!
 41979                                  show_time:
 41980 00003DFF 53                              push    bx              ;
 41981 00003E00 88C3                            mov     bl,al           ; save # in BL
 41982 00003E02 8A3E[1C46]                      mov     bh,[bMenuPage]  ;
 41983 00003E06 B403                            mov     ah,03h          ; get cursor position
 41984 00003E08 CD10                            int     10h             ;
 41985 00003E0A 52                              push    dx              ;
 41986 00003E0B 80C208                  	add	dl,8		; move cursor to the right
 41987 00003E0E B402                            mov     ah,02h          ; set cursor position
 41988 00003E10 CD10                            int     10h             ;
 41989 00003E12 BA[B34C]                        mov     dx,_$TimeOut
 41990 00003E15 E8DB05                          call    print           ; print the "Time remaining: " prompt
 41991 00003E18 88D8                            mov     al,bl           ; recover # from BL
 41992 00003E1A 98                              cbw                     ; this works because AL is always <= 90
 41993 00003E1B B10A                            mov     cl,10           ;
 41994 00003E1D F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 41995 00003E1F 88E1                            mov     cl,ah           ;
 41996 00003E21 0430                            add     al,'0'          ;
 41997 00003E23 B40E                            mov     ah,0Eh          ;
 41998 00003E25 CD10                            int     10h             ; write TTY tens digit
 41999 00003E27 88C8                            mov     al,cl           ;
 42000 00003E29 0430                            add     al,'0'          ;
 42001 00003E2B B40E                            mov     ah,0Eh          ;
 42002 00003E2D CD10                            int     10h             ; write TTY ones digit
 42003 00003E2F 5A                              pop     dx
 42004 00003E30 B402                            mov     ah,02h          ; set cursor position back to where it was
 42005 00003E32 CD10                            int     10h             ;
 42006 00003E34 5B                              pop     bx              ;
 42007                                  input_key:
 42008 00003E35 B406                            mov     ah,RAW_CON_IO ; 6
 42009 00003E37 B2FF                            mov     dl,0FFh         ; input request
 42010 00003E39 CD21                            int     21h             ;
 42011 00003E3B 751F                            jnz	short got_key	;
 42012 00003E3D 803E[2946]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 42013 00003E42 74F1                            je	short input_key	; no, just go back to input
 42014 00003E44 B42C                            mov     ah,GET_TIME     ;
 42015 00003E46 CD21                            int     21h             ; DH = seconds
 42016 00003E48 88F4                            mov     ah,dh           ;
 42017 00003E4A 28FE                            sub     dh,bh           ; should generally be zero or one
 42018 00003E4C 88E7                            mov     bh,ah           ;
 42019 00003E4E 7302                            jnc	short got_time	;
 42020 00003E50 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 42021                                  got_time:
 42022 00003E52 08F6                            or      dh,dh           ; any change?
 42023 00003E54 74DF                            jz	short input_key	; no
 42024 00003E56 0036[2A46]                      add     [secElapsed],dh ;
 42025 00003E5A EB8D                            jmp	short check_time ;
 42026                                  got_key:
 42027 00003E5C 50                              push    ax              ;
 42028 00003E5D B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 42029 00003E60 8706[2946]                      xchg    [secTimeOut],ax
 42030 00003E64 3CFF                            cmp     al,-1           ; was time-out already disabled?
 42031 00003E66 740E                            je	short timeout_disabled ; yes
 42032 00003E68 53                              push    bx              ; let's disable # seconds display
 42033 00003E69 B8200A                          mov     ax,0A20h        ; write multiple spaces
 42034 00003E6C 8B1E[1B46]                      mov     bx,[bMenuColor]
 42035 00003E70 B95000                          mov     cx,80           ; 80 of them, to be safe
 42036 00003E73 CD10                            int     10h             ; to completely obliterate # seconds display
 42037 00003E75 5B                              pop     bx   		;
 42038                                  
 42039                                  timeout_disabled:
 42040 00003E76 58                              pop     ax              ;
 42041 00003E77 08C0                            or      al,al           ; extended key pressed?
 42042 00003E79 755A                            jnz	short normal_key ; no
 42043 00003E7B CD21                            int     21h             ; get the next part of the key then
 42044 00003E7D 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 42045                                  
 42046 00003E7F 3C48                            cmp     al,48h          ; up arrow?
 42047 00003E81 7510                            jne	short not_up	; no
 42048 00003E83 80FB01                          cmp     bl,1            ; are we as up as up can get?
 42049 00003E86 76AD                            jbe	short input_key	; yes, ignore it
 42050 00003E88 FE0E[2546]                      dec     byte [bDefBlock] ;
 42051 00003E8C E8A9FE                          call    print_item      ; re-print the current item
 42052 00003E8F FECB                            dec     bl              ; and then print the new current item
 42053 00003E91 EB12                            jmp     short print1
 42054                                  not_up:
 42055 00003E93 3C50                            cmp     al,50h          ; down arrow?
 42056 00003E95 7518                            jne	short not_down	; no
 42057 00003E97 3A1E[2646]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 42058 00003E9B 7310                            jae	short to_input_key ; yes, ignore it
 42059 00003E9D FE06[2546]                      inc     byte [bDefBlock] ;
 42060 00003EA1 E894FE                          call    print_item      ; re-print the current item
 42061 00003EA4 43                              inc     bx              ; and then print the new current item
 42062                                  print1: 
 42063 00003EA5 88D8                    	mov     al,bl           ;
 42064                                  print2: 
 42065 00003EA7 E88EFE                  	call    print_item      ;
 42066 00003EAA E86300                          call    disp_num        ;
 42067                                  to_input_key:
 42068 00003EAD EB86                            jmp	short input_key ; 10/09/2023
 42069                                  not_down:
 42070 00003EAF F606[2046]01                    test    byte [bDisableUI],1
 42071 00003EB4 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 42072 00003EB6 3C42                            cmp     al,42h          ; F8 function key?
 42073 00003EB8 750B                            jne	short not_f8	; no
 42074 00003EBA 8036[2446]01                    xor     byte [bQueryOpt],1
 42075 00003EBF E85E00                          call    show_status     ;
 42076 00003EC2 E970FF                          jmp     input_key	;
 42077                                  not_f8:
 42078 00003EC5 3C3F                            cmp     al,3Fh          ; F5 function key?
 42079 00003EC7 75E4                            jne	short to_input_key ; no
 42080                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42081                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 42082                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 42083 00003EC9 800E[2446]04            	or	byte [bQueryOpt],4 ; no more queries
 42084 00003ECE BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 42085 00003ED1 B020                            mov     al,' '          ; don't want to display anything really;
 42086 00003ED3 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 42087                                  
 42088                                  normal_key:
 42089 00003ED5 3C0D                            cmp     al,0Dh          ; Enter?
 42090 00003ED7 741C                            je	short select_done ; yes
 42091 00003ED9 3C08                            cmp     al,08h          ; backspace?
 42092 00003EDB 7504                            jne	short not_backspace ; no
 42093 00003EDD BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 42094 00003EE0 C3                              retn			;
 42095                                  not_backspace:
 42096 00003EE1 2C30                            sub     al,'0'          ; is greater than '0'?
 42097 00003EE3 76C8                            jbe	short to_input_key ; no
 42098 00003EE5 3A06[2646]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 42099 00003EE9 77C2                            ja	short to_input_key ; no
 42100 00003EEB A2[2546]                        mov	[bDefBlock],al  ;
 42101 00003EEE E847FE                          call    print_item      ; redisplay the current selection
 42102 00003EF1 88C3                            mov     bl,al           ; set new selection
 42103 00003EF3 EBB2                            jmp	short print2
 42104                                  
 42105                                  select_done:
 42106 00003EF5 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 42107 00003EF7 88D8                            mov     al,bl           ;
 42108 00003EF9 0430                            add     al,'0'          ; convert it into a digit, then display it
 42109                                  
 42110                                  	; fall into disp_input
 42111                                  
 42112                                  ; 16/04/2019 - Retro DOS v4.0
 42113                                  
 42114                                  ;----------------------------------------------------------------------------
 42115                                  ;
 42116                                  ;   disp_input:  display a single character + cr/lf
 42117                                  ;
 42118                                  ;   INPUT
 42119                                  ;       AL == character to display
 42120                                  ;
 42121                                  ;   OUTPUT
 42122                                  ;       None
 42123                                  ;
 42124                                  ;   OTHER REGS USED
 42125                                  ;       None
 42126                                  ;
 42127                                  ;   NOTES
 42128                                  ;       This function is used not only for the menu input selection but
 42129                                  ;       also for the interactive line prompting (the y/n/a thing).
 42130                                  ;
 42131                                  ;   HISTORY
 42132                                  ;       Created 16-Mar-1992 by JeffPar
 42133                                  ;
 42134                                  ;----------------------------------------------------------------------------
 42135                                  
 42136                                  
 42137                                  disp_input:
 42138 00003EFB 50                      	push	ax
 42139                                  	;cmp	al,' '
 42140                                  	;jae	short disp_ok
 42141                                  	;mov	al,' '
 42142                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 42143 00003EFC B220                    	mov	dl,' ' ; 20h
 42144 00003EFE 38D0                    	cmp	al,dl
 42145 00003F00 7602                    	jna	short disp_input_ok
 42146                                  disp_ok:
 42147 00003F02 88C2                    	mov	dl,al
 42148                                  disp_input_ok:
 42149 00003F04 B402                    	mov	ah,STD_CON_OUTPUT ; 2
 42150 00003F06 CD21                    	int	21h
 42151 00003F08 BA[FC49]                	mov	dx,crlfm
 42152 00003F0B E8E504                  	call	print
 42153 00003F0E 58                      	pop	ax
 42154 00003F0F C3                      	retn
 42155                                  
 42156                                  ;----------------------------------------------------------------------------
 42157                                  
 42158                                  disp_num:
 42159 00003F10 53                              push    bx
 42160 00003F11 0430                            add     al,'0'
 42161 00003F13 B40A                            mov     ah,0Ah
 42162 00003F15 8B1E[1B46]                      mov     bx,[bMenuColor]
 42163 00003F19 B90100                          mov     cx,1
 42164 00003F1C CD10                            int     10h
 42165 00003F1E 5B                              pop     bx
 42166 00003F1F C3                              retn
 42167                                  
 42168                                  ;----------------------------------------------------------------------------
 42169                                  ;
 42170                                  ;   show_status:  display current interactive mode setting (on/off/none)
 42171                                  ;
 42172                                  ;   INPUT
 42173                                  ;       None
 42174                                  ;
 42175                                  ;   OUTPUT
 42176                                  ;       None
 42177                                  ;
 42178                                  ;   OTHER REGS USED
 42179                                  ;       None
 42180                                  ;
 42181                                  ;   NOTES
 42182                                  ;       None
 42183                                  ;
 42184                                  ;   HISTORY
 42185                                  ;       Created 16-Mar-1992 by JeffPar
 42186                                  ;
 42187                                  ;----------------------------------------------------------------------------
 42188                                  
 42189                                  show_status:
 42190 00003F20 53                              push    bx              ; BL = video page #
 42191 00003F21 8B1E[1B46]                      mov     bx,[bMenuColor]
 42192 00003F25 B403                            mov     ah,03h          ; get cursor position
 42193 00003F27 CD10                            int     10h             ;
 42194 00003F29 52                              push    dx              ; save it
 42195 00003F2A B402                            mov     ah,02h          ; set cursor position
 42196 00003F2C 8B16[1E46]                      mov     dx,[bLastCol]   ; set correct row/col
 42197 00003F30 F606[2046]01                    test    byte [bDisableUI],1
 42198 00003F35 740C                            jz	short show_onoff ; just show on/off
 42199 00003F37 B200                            mov     dl,0            ;
 42200 00003F39 CD10                            int     10h             ;
 42201 00003F3B B8200A                          mov     ax,0A20h        ; write multiple spaces
 42202 00003F3E B95000                          mov     cx,80           ; 80 of them, to be exact
 42203                                  	; 10/09/2023
 42204                                  	;int	10h             ; to obliterate the status line
 42205 00003F41 EB11                            jmp     short show_done ;
 42206                                  show_onoff: 
 42207 00003F43 CD10                            int     10h
 42208                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 42209                                  		; AL = character, BH = display page - alpha mode
 42210                                  		; BL = color of character (graphics mode, PCjr only)
 42211                                  		; CX = number of times to write character
 42212                                  
 42213 00003F45 A0[AF4C]                        mov     al,[_$NO]	; assume OFF
 42214 00003F48 803E[2446]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 42215 00003F4D 7503                            jne	short show_noton ; no
 42216 00003F4F A0[AB4C]                        mov     al,[_$YES]	; yes
 42217                                  show_noton:                     ;
 42218 00003F52 B40E                            mov     ah,0Eh          ; write TTY
 42219                                  show_done:	; 10/09/2023
 42220 00003F54 CD10                            int     10h             ;
 42221                                  ;show_done:                     ;
 42222 00003F56 5A                              pop     dx              ;
 42223 00003F57 B402                            mov     ah,02h          ;
 42224 00003F59 CD10                            int     10h             ; restore original cursor position
 42225 00003F5B 5B                              pop     bx              ;
 42226 00003F5C C3                              retn			;
 42227                                  
 42228                                  ; 16/04/2019 - Retro DOS v4.0
 42229                                  
 42230                                  ;----------------------------------------------------------------------------
 42231                                  ;
 42232                                  ;   skip_token: advances ES:SI/CX past the current token
 42233                                  ;
 42234                                  ;   INPUT
 42235                                  ;    ES:SI -> position in config.sys
 42236                                  ;       CX == remaining bytes in config.sys
 42237                                  ;
 42238                                  ;   OUTPUT
 42239                                  ;       CF set if EOL/EOF hit
 42240                                  ;       AL == 1st char of delimiter
 42241                                  ;    ES:SI -> just past the delimiter
 42242                                  ;       CX == # bytes remaining from that point
 42243                                  ;
 42244                                  ;   OTHER REGS USED
 42245                                  ;       AX
 42246                                  ;
 42247                                  ;   NOTES
 42248                                  ;       None
 42249                                  ;
 42250                                  ;   HISTORY
 42251                                  ;       Created 16-Mar-1992 by JeffPar
 42252                                  ;
 42253                                  ;----------------------------------------------------------------------------
 42254                                  
 42255                                  skip_token:
 42256 00003F5D E84D00                          call    get_char
 42257 00003F60 7210                            jc	short skip_token_done
 42258 00003F62 E8B401                          call    any_delim
 42259 00003F65 75F6                            jne	short skip_token
 42260                                  skip_check_eol:
 42261 00003F67 3C0D                            cmp     al,cr ; 0Dh
 42262 00003F69 7406                            je	short skip_token_eol
 42263 00003F6B 3C0A                            cmp     al,lf ; 0Ah
 42264 00003F6D 7402                            je	short skip_token_eol
 42265 00003F6F F8                              clc
 42266                                          ;jmp	short skip_token_done
 42267 00003F70 C3                      	retn
 42268                                  skip_token_eol:
 42269 00003F71 F9                              stc
 42270                                  skip_token_done:
 42271 00003F72 C3                              retn
 42272                                  
 42273                                  ;----------------------------------------------------------------------------
 42274                                  ;
 42275                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 42276                                  ;
 42277                                  ;   INPUT
 42278                                  ;    ES:SI -> position in config.sys
 42279                                  ;       CX == remaining bytes in config.sys
 42280                                  ;
 42281                                  ;   OUTPUT
 42282                                  ;       CF set if EOF hit
 42283                                  ;       AL == 1st char of token
 42284                                  ;    ES:SI -> just past the token
 42285                                  ;       CX == # bytes remaining from that point
 42286                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 42287                                  ;
 42288                                  ;   OTHER REGS USED
 42289                                  ;       AX
 42290                                  ;
 42291                                  ;   NOTES
 42292                                  ;       None
 42293                                  ;
 42294                                  ;   HISTORY
 42295                                  ;       Created 16-Mar-1992 by JeffPar
 42296                                  ;
 42297                                  ;----------------------------------------------------------------------------
 42298                                  
 42299                                  skip_delim:	; returns carry set if eol/eof
 42300 00003F73 E83700                          call    get_char        ;
 42301 00003F76 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 42302 00003F79 72F7                            jc	short skip_token_done ;
 42303 00003F7B E8AB01                          call    delim           ;
 42304 00003F7E 74F3                            je	short skip_delim ;
 42305 00003F80 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 42306                                  
 42307                                  ;----------------------------------------------------------------------------
 42308                                  ;
 42309                                  ;   skip_opt_line: same as skip_line provided AL != LF
 42310                                  ;
 42311                                  ;   INPUT
 42312                                  ;       AL == last character read
 42313                                  ;    ES:SI -> position in config.sys
 42314                                  ;       CX == remaining bytes in config.sys
 42315                                  ;
 42316                                  ;   OUTPUT
 42317                                  ;       CF set if EOF hit
 42318                                  ;       AL == 1st char of new line
 42319                                  ;    ES:SI -> just past 1st char of new line
 42320                                  ;       CX == # bytes remaining from that point
 42321                                  ;
 42322                                  ;   OTHER REGS USED
 42323                                  ;       AX
 42324                                  ;
 42325                                  ;   NOTES
 42326                                  ;       In other words, the purpose here is to skip to the next line,
 42327                                  ;       unless ES:SI is already sitting at the front of the next line (which
 42328                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 42329                                  ;
 42330                                  ;   HISTORY
 42331                                  ;       Created 16-Mar-1992 by JeffPar
 42332                                  ;
 42333                                  ;----------------------------------------------------------------------------
 42334                                  
 42335                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42336                                  ;skip_opt_line:
 42337                                  ;	cmp     al,lf ; 0Ah
 42338                                  ;	je	short skip_line_done
 42339                                       
 42340                                  	; fall into skip_line
 42341                                  
 42342                                  ;----------------------------------------------------------------------------
 42343                                  ;
 42344                                  ;   skip_line: skip to the next line
 42345                                  ;
 42346                                  ;   INPUT
 42347                                  ;    ES:SI -> position in config.sys
 42348                                  ;       CX == remaining bytes in config.sys
 42349                                  ;
 42350                                  ;   OUTPUT
 42351                                  ;       CF set if EOF hit
 42352                                  ;    ES:SI -> just past 1st char of new line
 42353                                  ;       CX == # bytes remaining from that point
 42354                                  ;
 42355                                  ;   OTHER REGS USED
 42356                                  ;       AX
 42357                                  ;
 42358                                  ;   NOTES
 42359                                  ;       None
 42360                                  ;
 42361                                  ;   HISTORY
 42362                                  ;       Created 16-Mar-1992 by JeffPar
 42363                                  ;
 42364                                  ;----------------------------------------------------------------------------
 42365                                  
 42366                                  skip_line:
 42367 00003F82 E82800                          call    get_char
 42368 00003F85 7204                            jc	short skip_line_done
 42369                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42370 00003F87 3C0A                            cmp     al,lf ; 0Ah
 42371 00003F89 75F7                            jne	short skip_line
 42372                                  skip_line_done:
 42373                                  num_done:	; 18/12/2022
 42374 00003F8B C3                              retn
 42375                                  
 42376                                  ;----------------------------------------------------------------------------
 42377                                  ;
 42378                                  ;   get_number: return binary equivalent of numeric string
 42379                                  ;
 42380                                  ;   INPUT
 42381                                  ;    ES:SI -> position in config.sys
 42382                                  ;       CX == remaining bytes in config.sys
 42383                                  ;
 42384                                  ;   OUTPUT
 42385                                  ;       AL == non-digit encountered
 42386                                  ;       BX == binary #
 42387                                  ;    ES:SI -> just past 1st non-digit
 42388                                  ;       CX == # bytes remaining from that point
 42389                                  ;
 42390                                  ;   OTHER REGS USED
 42391                                  ;       AX
 42392                                  ;
 42393                                  ;   NOTES
 42394                                  ;       None
 42395                                  ;
 42396                                  ;   HISTORY
 42397                                  ;       Created 16-Mar-1992 by JeffPar
 42398                                  ;
 42399                                  ;----------------------------------------------------------------------------
 42400                                  
 42401                                  ; 13/05/2019
 42402                                  
 42403                                  get_number:
 42404 00003F8C 29DB                            sub     bx,bx           ; BX = result
 42405                                  num_loop:
 42406 00003F8E E81C00                          call    get_char        ;
 42407 00003F91 72F8                            jc	short num_done	;
 42408 00003F93 3C30                            cmp     al,'0'          ; convert to value
 42409 00003F95 72F4                            jb	short num_done	; no more number
 42410 00003F97 3C39                            cmp     al,'9'          ;
 42411 00003F99 77F0                            ja	short num_done	;
 42412 00003F9B 50                              push    ax              ;
 42413 00003F9C B80A00                          mov     ax,10           ;
 42414 00003F9F 52                              push    dx              ;
 42415 00003FA0 F7E3                            mul     bx              ;
 42416 00003FA2 5A                              pop     dx              ;
 42417 00003FA3 89C3                            mov     bx,ax           ;
 42418 00003FA5 58                              pop     ax              ;
 42419 00003FA6 2C30                            sub     al,'0'          ;
 42420 00003FA8 98                              cbw                     ;
 42421 00003FA9 01C3                            add     bx,ax           ;
 42422 00003FAB EBE1                            jmp	short num_loop	;
 42423                                  
 42424                                  	; 18/12/2022
 42425                                  ;num_done:
 42426                                          ;retn
 42427                                  
 42428                                  ;----------------------------------------------------------------------------
 42429                                  ;
 42430                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 42431                                  ;
 42432                                  ;   INPUT
 42433                                  ;    ES:SI -> position in config.sys
 42434                                  ;       CX == remaining bytes in config.sys
 42435                                  ;
 42436                                  ;   OUTPUT
 42437                                  ;       AL == next character
 42438                                  ;    ES:SI -> just past next character
 42439                                  ;       CX == # bytes remaining from that point
 42440                                  ;
 42441                                  ;   OTHER REGS USED
 42442                                  ;       AX
 42443                                  ;
 42444                                  ;   NOTES
 42445                                  ;       None
 42446                                  ;
 42447                                  ;   HISTORY
 42448                                  ;       Created 16-Mar-1992 by JeffPar
 42449                                  ;
 42450                                  ;----------------------------------------------------------------------------
 42451                                  
 42452                                  get_char:
 42453 00003FAD 83E901                          sub     cx,1            ; use SUB to set carry,zero
 42454 00003FB0 7205                            jb	short get_fail	; out of data
 42455                                          ;lods	byte ptr es:[si] ;
 42456 00003FB2 26                      	es	
 42457 00003FB3 AC                      	lodsb
 42458 00003FB4 88C4                            mov     ah,al           ;
 42459 00003FB6 C3                              retn			;
 42460                                  get_fail:                       ; restore CX to zero
 42461 00003FB7 B90000                          mov     cx,0            ; leave carry set, zero not set
 42462                                  nearby_ret:
 42463 00003FBA C3                              retn
 42464                                  
 42465                                  ;----------------------------------------------------------------------------
 42466                                  ;
 42467                                  ;   query_user: ask user whether to execute current config.sys command
 42468                                  ;
 42469                                  ;   INPUT
 42470                                  ;       AL == current command code
 42471                                  ;    ES:SI -> current command line in config.sys
 42472                                  ;    config_cmd == current command code, but with QUERY bit intact
 42473                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 42474                                  ;
 42475                                  ;   OUTPUT
 42476                                  ;       CF set if command should be ignored (it is also REM'ed out)
 42477                                  ;
 42478                                  ;   OTHER REGS USED
 42479                                  ;       BX, CX, DX, DI
 42480                                  ;
 42481                                  ;   NOTES
 42482                                  ;       None
 42483                                  ;
 42484                                  ;   HISTORY
 42485                                  ;       Created 16-Mar-1992 by JeffPar
 42486                                  ;
 42487                                  ;----------------------------------------------------------------------------
 42488                                  
 42489                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 42490                                  	; (SYSINIT:4AE5h)
 42491                                  
 42492                                  	; 12/12/2022
 42493                                  query_user:
 42494 00003FBB F606[2446]04                    test    byte [bQueryOpt],4	; answer no to everything?
 42495                                  	; 01/01/2023
 42496 00003FC0 7403                    	jz	short qu_1		;
 42497 00003FC2 E9B900                  	jmp	skip_all
 42498                                  	; 12/12/2022
 42499                                  	;;jmp	short skip_all		;
 42500                                  	;jnz	short skip_all
 42501                                  qu_1:
 42502 00003FC5 F606[2446]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 42503 00003FCA 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 42504 00003FCC 50                              push    ax                      ;
 42505 00003FCD A0[DC14]                        mov     al,[config_cmd]         ;
 42506 00003FD0 F606[2446]01                    test    byte [bQueryOpt],1	; query every command?
 42507 00003FD5 7506                            jnz	short query_all		; yes
 42508 00003FD7 A880                            test    al,CONFIG_OPTION_QUERY  ;
 42509                                  	; 01/01/2023
 42510 00003FD9 7502                    	jnz	short query_all		;
 42511                                  	; 12/12/2022
 42512                                  	;;jmp	short do_cmd		;
 42513                                  	;jz	short do_cmd ; cf=0
 42514                                  
 42515                                  	; 01/01/2023
 42516 00003FDB 58                      	pop	ax
 42517 00003FDC C3                      	retn
 42518                                  
 42519                                  query_all:
 42520                                  
 42521                                  ;   Search for the command code (AL) in "comtab", and then print
 42522                                  ;   out the corresponding keyword, followed by the rest of the actual
 42523                                  ;   line pointed to by ES:SI
 42524                                  
 42525 00003FDD 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 42526 00003FDE BA[0E4D]                        mov     dx,_$AutoPrmpt    	;
 42527 00003FE1 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42528 00003FE3 7450                            jz	short generic_prompt	; config_cmd must have been 0
 42529                                  
 42530 00003FE5 88C6                            mov     dh,al                   ; save config_cmd in DH
 42531 00003FE7 29DB                            sub     bx,bx                   ;
 42532 00003FE9 BF[7146]                        mov     di,comtab		;
 42533                                  find_match:                             ;
 42534 00003FEC 8A1D                            mov     bl,[di]                 ; get size of current keyword
 42535 00003FEE 08DB                            or      bl,bl                   ;
 42536 00003FF0 7425                            jz	short line_print	; end of table
 42537 00003FF2 47                              inc     di                      ;
 42538 00003FF3 3A01                            cmp     al,[di+bx]              ; match?
 42539 00003FF5 7405                            je	short cmd_match		; yes
 42540 00003FF7 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 42541                                  	; 13/05/2019	
 42542 00003FFA EBF0                            jmp	short find_match	; loop
 42543                                  cmd_match:                              ;
 42544 00003FFC 8A4DFF                          mov     cl,[di-1]               ;
 42545 00003FFF B500                            mov	ch,0                    ;
 42546 00004001 B402                            mov     ah,STD_CON_OUTPUT ; 2
 42547                                  cmd_print:                              ;
 42548 00004003 8A05                            mov     al,[di]                 ;
 42549 00004005 47                              inc     di                      ;
 42550 00004006 88C2                            mov     dl,al                   ;
 42551 00004008 CD21                            int     21h                     ;
 42552 0000400A E2F7                            loop    cmd_print               ;
 42553 0000400C B23D                            mov     dl,'='                  ;
 42554 0000400E 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 42555 00004011 7502                            jne	short cmd_notset	;
 42556 00004013 B220                            mov     dl,' '                  ;
 42557                                  cmd_notset:
 42558 00004015 CD21                            int     21h                     ; '=' looks funny on SET commands
 42559                                  line_print:                             ;
 42560                                  	;lods	byte ptr es:[si]        ;
 42561 00004017 26                              es
 42562 00004018 AC                      	lodsb
 42563 00004019 08C0                    	or      al,al                   ;
 42564 0000401B 7502                            jnz	short non_null		;
 42565 0000401D B020                            mov     al,' '                  ;
 42566                                  non_null:                               ;
 42567 0000401F 3C20                            cmp     al,' '                  ; control code?
 42568 00004021 720F                            jb	short prompt_user	; yes, assume end of line
 42569 00004023 7505                            jne	short non_space		;
 42570                                          ; 10/09/2023
 42571 00004025 263804                  	cmp	[es:si],al ; 20h
 42572                                  	;cmp	byte [es:si],' '	;
 42573 00004028 7208                            jb	short prompt_user	;
 42574                                  non_space:                              ;
 42575 0000402A 88C2                            mov     dl,al                   ;
 42576 0000402C B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 42577 0000402E CD21                            int     21h                     ;
 42578 00004030 EBE5                            jmp	short line_print	;
 42579                                  
 42580                                  prompt_user:                            ;
 42581 00004032 BA[9F4C]                        mov     dx,_$InterPrmpt		;
 42582                                  
 42583                                  generic_prompt:
 42584 00004035 E8BB03                          call    print                   ;
 42585                                  input_loop:                             ;
 42586 00004038 B400                            mov     ah,0                    ; read a key
 42587 0000403A CD16                            int     16h                     ;
 42588 0000403C 08C0                            or      al,al                   ; is it a function key?
 42589 0000403E 750F                            jnz	short not_func		; no
 42590 00004040 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 42591 00004043 75F3                            jne	short input_loop	; no
 42592 00004045 A0[AF4C]                        mov     al,[_$NO]                  ;
 42593 00004048 800E[2446]04                    or      byte [bQueryOpt],4	; no more queries
 42594 0000404D EB21                            jmp     short legal_char        ;
 42595                                  not_func:
 42596 0000404F 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 42597 00004051 3A06[AF4C]                      cmp     al,[_$NO]		; verify character is legal
 42598 00004055 7419                            je	short legal_char	;
 42599 00004057 3A06[AB4C]                      cmp     al,[_$YES]		;
 42600 0000405B 7413                            je	short legal_char	;
 42601 0000405D 803E[DC14]00                    cmp     byte [config_cmd],0	;
 42602 00004062 74D4                            je	short input_loop	; don't allow Esc on this query
 42603 00004064 3C1B                            cmp     al,1Bh                  ; Esc?
 42604 00004066 75D0                            jne	short input_loop	;
 42605 00004068 800E[2446]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 42606 0000406D A0[AB4C]                        mov     al,[_$YES]
 42607                                  legal_char:                             ;
 42608 00004070 E888FE                          call    disp_input              ;
 42609 00004073 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 42610                                  
 42611 00004074 3A06[AF4C]                      cmp     al,[_$NO]		; process line?
 42612 00004078 7403                            je	short skip_cmd		; no
 42613                                  	; 12/12/2022
 42614 0000407A F8                      	clc
 42615                                  do_cmd:
 42616 0000407B 58                      	pop     ax			;
 42617                                  	; 12/12/2022
 42618                                  	; cf=0
 42619                                  	;clc				; just do the command
 42620 0000407C C3                      	retn
 42621                                  
 42622                                  skip_cmd:
 42623 0000407D 58                      	pop     ax			;
 42624                                  skip_all:
 42625 0000407E B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 42626 00004080 F9                      	stc
 42627 00004081 C3                      	retn
 42628                                  
 42629                                  ;----------------------------------------------------------------------------
 42630                                  ;
 42631                                  ;   print_error: displays multi-config error conditions
 42632                                  ;
 42633                                  ;   INPUT
 42634                                  ;    Carry set to pause, clear to not
 42635                                  ;    ES:SI -> current command line in config.sys
 42636                                  ;
 42637                                  ;   OUTPUT
 42638                                  ;       None
 42639                                  ;
 42640                                  ;   OTHER REGS USED
 42641                                  ;       None
 42642                                  ;
 42643                                  ;   NOTES
 42644                                  ;       None
 42645                                  ;
 42646                                  ;   HISTORY
 42647                                  ;       Created 16-Mar-1992 by JeffPar
 42648                                  ;
 42649                                  ;----------------------------------------------------------------------------
 42650                                  
 42651                                  print_error:
 42652 00004082 50                              push    ax
 42653 00004083 53                              push    bx
 42654 00004084 51                              push    cx
 42655 00004085 52                              push    dx
 42656 00004086 1E                              push    ds
 42657 00004087 0E                              push    cs
 42658 00004088 1F                              pop     ds
 42659 00004089 9C                              pushf
 42660 0000408A E820FC                          call    get_linenum
 42661 0000408D 891E[AD02]                      mov     [linecount],bx
 42662 00004091 E827E8                          call    error_line
 42663 00004094 9D                              popf
 42664 00004095 7319                            jnc	short pe_ret
 42665 00004097 BA[694B]                        mov     dx,_$PauseMsg
 42666 0000409A E85603                          call    print
 42667 0000409D B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 42668 000040A0 CD21                            int     21h			; wait for a key
 42669 000040A2 08C0                            or      al,al			; extended key?
 42670 000040A4 7504                            jnz	short pe_1		; no
 42671 000040A6 B407                            mov     ah,07h			; yes
 42672 000040A8 CD21                            int     21h			; eat it too
 42673                                  pe_1:     
 42674 000040AA BA[FC49]                	mov     dx,crlfm
 42675 000040AD E84303                          call    print
 42676                                  pe_ret: 
 42677 000040B0 1F                      	pop     ds
 42678 000040B1 5A                              pop     dx
 42679 000040B2 59                              pop     cx
 42680 000040B3 5B                              pop     bx
 42681 000040B4 58                              pop     ax
 42682 000040B5 C3                      	retn
 42683                                  
 42684                                  ;----------------------------------------------------------------------------
 42685                                  
 42686                                  ;   This function is very simple: it merely prepends a "/D" to the
 42687                                  ;   command-line for the shell; this (undocumented) switch disables
 42688                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 42689                                  ;   displayed when there's no AUTOEXEC.BAT.
 42690                                  
 42691                                  disable_autoexec:
 42692                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 42693                                  	; 17/04/2019 - Retro DOS v4.0
 42694                                  
 42695 000040B6 F606[2446]04            	test	byte [bQueryOpt],4
 42696 000040BB 7443                    	jz	short disable_exit
 42697 000040BD F606[1A46]01            	test	byte [dae_flag],1
 42698 000040C2 753C                    	jnz	short disable_exit
 42699 000040C4 800E[1A46]01            	or	byte [dae_flag],1
 42700                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 42701 000040C9 810E[2446]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 42702 000040CF BA4420                  	mov     dx,'D ' ; 2044h
 42703                                  dae_1:
 42704                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42705 000040D2 A0[5945]                        mov	al,[def_swchr]
 42706                                  	;mov	al,[command_line-1]     ; get default switchchar
 42707 000040D5 08C0                            or      al,al                   ; anything there?
 42708 000040D7 7427                            jz	short disable_exit	; no, disable_autoexec already called
 42709 000040D9 8A1E[5A45]                      mov     bl,[command_line]       ;
 42710 000040DD B700                            mov     bh,0                    ; BX == command-line length
 42711 000040DF 89D9                            mov     cx,bx                   ;
 42712 000040E1 80C303                          add     bl,3                    ;
 42713 000040E4 80FB7E                          cmp     bl,126                  ;
 42714 000040E7 7717                            ja	short disable_exit	;
 42715 000040E9 881E[5A45]                      mov     [command_line],bl       ; update length
 42716 000040ED 81C3[5B45]                      add     bx,command_line+1	; make sure we move the NULL too
 42717 000040F1 41                              inc     cx                      ; (just for consistency sake)
 42718                                  disable_loop:                           ;
 42719 000040F2 8A67FD                          mov     ah,[bx-3]               ;
 42720 000040F5 8827                            mov     [bx],ah                 ;
 42721 000040F7 4B                              dec     bx                      ;
 42722 000040F8 E2F8                            loop    disable_loop            ;
 42723 000040FA 8847FE                          mov     [bx-2],al               ;
 42724                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 42725 000040FD 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 42726                                          ;mov	byte [command_line-1],0 ;
 42727                                  disable_exit:                           ;
 42728 00004100 C3                              retn
 42729                                  
 42730                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 42731 00004101 803E[2446]01            	cmp     byte [bQueryOpt],1
 42732 00004106 75F8                    	jnz     short disable_exit
 42733 00004108 F606[1A46]02            	test	byte [dae_flag],2
 42734 0000410D 75F1                    	jnz     short disable_exit
 42735 0000410F 800E[1A46]02            	or      byte [dae_flag],2
 42736                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 42737                                  	; 10/09/2023 (BugFix)
 42738 00004114 BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 42739 00004117 EBB9                    	jmp     short dae_1
 42740                                  
 42741                                  ;endif  ;MULTI_CONFIG
 42742                                  
 42743                                  ;%endif	; 02/11/2022
 42744                                  
 42745                                  
 42746                                  ; 19/04/2019 - Retro DOS v4.0
 42747                                  
 42748                                  ;----------------------------------------------------------------------------
 42749                                  ;
 42750                                  ; procedure : delim
 42751                                  ;
 42752                                  ;----------------------------------------------------------------------------
 42753                                  
 42754                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42755                                  ; (SYSINIT:4C45h)
 42756                                  
 42757                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42758                                  ;%if 0
 42759                                  ;;ifdef	MULTI_CONFIG
 42760                                  ;
 42761                                  any_delim:
 42762 00004119 3C0D                    	cmp	al,cr
 42763 0000411B 7427                    	je	short delim_ret
 42764 0000411D 3C0A                    	cmp	al,lf
 42765 0000411F 7423                    	je	short delim_ret
 42766 00004121 3C5B                    	cmp	al,'['
 42767 00004123 741F                    	je	short delim_ret
 42768 00004125 3C5D                    	cmp	al,']'
 42769 00004127 741B                    	je	short delim_ret
 42770                                  ;
 42771                                  ;;endif ;MULTI_CONFIG
 42772                                  ;%endif ; 02/11/2022
 42773                                  
 42774                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42775                                  	; (SYSINIT:3450h)	
 42776                                  delim:
 42777 00004129 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 42778 0000412B 7417                    	je	short delim_ret
 42779                                  
 42780 0000412D 3C00                    	cmp	al,0		; special case for sysinit!!!
 42781 0000412F 7413                    	je	short delim_ret
 42782                                  
 42783                                  org_delim:			; used by organize routine except for getting
 42784 00004131 3C20                    	cmp	al,' '          ; the filename.
 42785 00004133 740F                    	je	short delim_ret
 42786 00004135 3C09                            cmp     al,tab ; 9
 42787 00004137 740B                    	je	short delim_ret
 42788 00004139 3C3D                    	cmp	al,'='
 42789 0000413B 7407                    	je	short delim_ret
 42790 0000413D 3C2C                    	cmp	al,','
 42791 0000413F 7403                    	je	short delim_ret
 42792 00004141 3C3B                    	cmp	al,';'
 42793                                  
 42794                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42795                                  
 42796                                  ; 04/01/2023 - Retro DOS v4.2
 42797                                  ;ifdef	MULTI_CONFIG
 42798                                  ;   Make sure there's no chance of a false EOF indication
 42799 00004143 F8                      	clc
 42800                                  ;endif
 42801                                  	; 02/11/2022
 42802                                  delim_ret:
 42803                                  	; 04/01/2023
 42804                                  	; cf = 0
 42805                                  nl_ret:	; 10/09/2023
 42806 00004144 C3                      	retn
 42807                                  
 42808                                  ;----------------------------------------------------------------------------
 42809                                  ;
 42810                                  ; procedure : newline
 42811                                  ;
 42812                                  ;  newline returns with first character of next line
 42813                                  ;
 42814                                  ;----------------------------------------------------------------------------
 42815                                  
 42816                                  newline:
 42817 00004145 E80600                  	call	getchr			;skip non-control characters
 42818 00004148 72FA                    	jc	short nl_ret
 42819 0000414A 3C0A                    	cmp	al,lf			;look for line feed
 42820 0000414C 75F7                    	jne	short newline
 42821                                  
 42822                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42823                                  	;call	getchr
 42824                                  ;nl_ret:
 42825                                  	;retn
 42826                                  	; 10/09/2023
 42827                                  	;jmp	short getchr
 42828                                  
 42829                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42830                                  %if 1
 42831                                  
 42832                                  ;----------------------------------------------------------------------------
 42833                                  ;
 42834                                  ; procedure : getchr
 42835                                  ;
 42836                                  ;----------------------------------------------------------------------------
 42837                                  
 42838                                  	; 24/10/2022
 42839                                  getchr:
 42840                                  	; 12/12/2022
 42841                                  	;push	cx
 42842                                  	;mov	cx,[count]
 42843                                  	;jcxz	nochar
 42844                                  	; 12/12/2022
 42845 0000414E 833E[5403]01            	cmp	word [count],1 
 42846 00004153 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 42847                                  	
 42848 00004155 8B36[5803]              	mov	si,[chrptr]
 42849 00004159 268A04                  	mov	al,[es:si]
 42850 0000415C FF0E[5403]              	dec	word [count]
 42851 00004160 FF06[5803]              	inc	word [chrptr]
 42852                                  	; 12/12/202
 42853                                  	; cf=0
 42854                                  	;clc
 42855                                  ;get_ret:
 42856                                  	;pop	cx
 42857                                  	;retn
 42858                                  nochar: 
 42859                                  	; 12/12/2022
 42860                                  	; cf=1
 42861                                  	;stc
 42862                                  	;jmp	short get_ret
 42863                                  	
 42864 00004164 C3                      	retn
 42865                                  %endif
 42866                                  
 42867                                  ;----------------------------------------------------------------------------
 42868                                  ; 
 42869                                  ; procedure : mapcase
 42870                                  ;
 42871                                  ;----------------------------------------------------------------------------
 42872                                  
 42873                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 42874                                  
 42875                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 42876                                  	; (SYSINIT:4C7Eh)
 42877                                  mapcase:
 42878 00004165 51                      	push	cx
 42879 00004166 56                      	push	si
 42880 00004167 1E                      	push	ds
 42881                                  
 42882 00004168 06                      	push	es
 42883 00004169 1F                      	pop	ds
 42884                                  
 42885                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42886                                  
 42887                                  ; 04/01/2023 - Retro DOS 4.2
 42888                                  
 42889                                  ;ifdef	MULTI_CONFIG
 42890 0000416A 88C3                    	mov	bl,al			; same cmd code this line
 42891                                  ;else
 42892                                  ;	xor	si,si
 42893                                  ;endif
 42894                                  	; 02/11/2022
 42895                                  	; 04/01/2023 - Retro DOS 4.2
 42896                                  	;xor	si, si
 42897                                  
 42898                                  convloop:
 42899 0000416C AC                      	lodsb
 42900 0000416D 3C61                    	cmp	al,'a'
 42901 0000416F 7209                    	jb	short noconv
 42902 00004171 3C7A                    	cmp	al,'z'
 42903 00004173 7705                    	ja	short noconv
 42904 00004175 2C20                    	sub	al,20h
 42905 00004177 8844FF                  	mov	[si-1],al
 42906                                  noconv:
 42907                                  
 42908                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42909                                  
 42910                                  ; 04/01/2023 - Retro DOS 4.2
 42911                                  ;ifdef	MULTI_CONFIG
 42912                                  
 42913                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 42914                                  ;   upper-case a line at a time, after we've been able to figure out whether
 42915                                  ;   the line is a SET command or not (since we don't want to upper-case
 42916                                  ;   anything after the "=" in a SET)
 42917                                  ;
 42918 0000417A 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 42919 0000417D 7504                    	jne	short check_eol		; no, just check for end-of-line
 42920 0000417F 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 42921 00004181 740A                    	je	short convdone		; yes
 42922                                  check_eol:
 42923 00004183 3C0D                    	cmp	al,cr
 42924 00004185 7406                    	je	short convdone
 42925 00004187 3C0A                    	cmp	al,lf
 42926 00004189 7402                    	je	short convdone
 42927                                  ;endif
 42928                                  	; 02/11/2022
 42929 0000418B E2DF                    	loop	convloop
 42930                                  convdone:
 42931 0000418D 1F                      	pop	ds
 42932 0000418E 5E                      	pop	si
 42933 0000418F 59                      	pop	cx
 42934 00004190 C3                      	retn
 42935                                  
 42936                                  ;----------------------------------------------------------------------------
 42937                                  ;
 42938                                  ; procedure : round
 42939                                  ;
 42940                                  ; round the values in memlo and memhi to paragraph boundary.
 42941                                  ; perform bounds check.
 42942                                  ;
 42943                                  ;----------------------------------------------------------------------------
 42944                                  
 42945                                  round:
 42946                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42947 00004191 1E                      	push	ds
 42948 00004192 0E                      	push	cs
 42949 00004193 1F                      	pop	ds
 42950                                  
 42951 00004194 50                      	push	ax
 42952                                  	;mov	ax,[cs:memlo]
 42953 00004195 A1[6003]                	mov	ax,[memlo]
 42954                                  
 42955 00004198 E8D1CF                  	call	ParaRound		; para round up
 42956                                  
 42957                                  	;add	[cs:memhi],ax
 42958 0000419B 0106[6203]              	add	[memhi],ax
 42959                                  	;mov	word [cs:memlo],0
 42960 0000419F C706[6003]0000          	mov	word [memlo],0
 42961                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 42962 000041A5 A1[6203]                	mov	ax,[memhi]
 42963                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 42964 000041A8 3B06[A302]              	cmp	ax,[ALLOCLIM]
 42965                                  	;jae	short mem_err
 42966                                  	; 13/04/2024
 42967 000041AC 7322                    	jae	short mem_err2 ; ds = cs
 42968                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 42969 000041AE F606[E114]02            	test	byte [setdevmarkflag],for_devmark ; 2
 42970 000041B3 7416                    	jz	short skip_set_devmarksize
 42971 000041B5 06                      	push	es
 42972 000041B6 56                      	push	si
 42973                                  	;mov	si,[cs:devmark_addr]
 42974 000041B7 8B36[DF14]              	mov	si,[devmark_addr]
 42975 000041BB 8EC6                    	mov	es,si
 42976 000041BD 29F0                    	sub	ax,si
 42977 000041BF 48                      	dec	ax
 42978                                  	;mov	[es:3],ax
 42979 000041C0 26A30300                	mov	[es:devmark.size],ax	; paragraph
 42980                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 42981 000041C4 8026[E114]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 42982 000041C9 5E                      	pop	si
 42983 000041CA 07                      	pop	es
 42984                                  skip_set_devmarksize:
 42985 000041CB 58                      	pop	ax
 42986                                  
 42987                                  	; 10/09/2023
 42988 000041CC 1F                      	pop	ds
 42989                                  
 42990                                  	; 11/12/2022
 42991                                  	; cf = 0
 42992                                  	; 02/11/2022
 42993                                  	;clc	; ? (not needed here)	; clear carry
 42994 000041CD C3                      	retn
 42995                                  
 42996                                  ;----------------------------------------------------------------------------
 42997                                  
 42998                                  mem_err:
 42999                                  	; 11/12/2022
 43000 000041CE 0E                      	push	cs
 43001 000041CF 1F                      	pop	ds
 43002                                  mem_err2:
 43003 000041D0 BA[D54A]                	mov	dx,badmem
 43004                                  	;push	cs
 43005                                  	;pop	ds
 43006 000041D3 E81D02                  	call	print
 43007 000041D6 E9CCCF                  	jmp	stall
 43008                                  
 43009                                  ;----------------------------------------------------------------------------
 43010                                  ;
 43011                                  ; procedure : calldev
 43012                                  ;
 43013                                  ;----------------------------------------------------------------------------
 43014                                  
 43015                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43016                                  	; (SYSINIT:34E0h)
 43017                                  
 43018                                  	; 13/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 43019                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4F3Eh)
 43020                                  
 43021                                  calldev:
 43022 000041D9 2E8E1E[951F]            	mov	ds,[cs:DevEntry+2]
 43023 000041DE 2E031E[931F]            	add	bx,[cs:DevEntry]	; do a little relocation
 43024 000041E3 8B07                    	mov	ax,[bx]
 43025                                  
 43026 000041E5 2EFF36[931F]            	push	word [cs:DevEntry]
 43027 000041EA 2EA3[931F]              	mov	[cs:DevEntry],ax
 43028 000041EE BB[6803]                	mov	bx,packet
 43029 000041F1 2EFF1E[931F]            	call	far [cs:DevEntry]
 43030 000041F6 2E8F06[931F]            	pop	word [cs:DevEntry]
 43031 000041FB C3                      	retn
 43032                                  
 43033                                  ;----------------------------------------------------------------------------
 43034                                  ;
 43035                                  ; procedure : todigit
 43036                                  ;
 43037                                  ;----------------------------------------------------------------------------
 43038                                  
 43039                                  todigit:
 43040 000041FC 2C30                    	sub	al,'0'
 43041                                  	;jb	short notdig  ; 02/11/2022
 43042                                  	; 12/12/2022
 43043 000041FE 7203                    	jb	short notdig2
 43044                                  	;cmp	al,9
 43045                                  	;ja	short notdig
 43046                                  	;clc
 43047                                  	;retn
 43048                                  	; 12/12/2022
 43049 00004200 3C0A                    	cmp	al,10
 43050 00004202 F5                      	cmc
 43051                                  notdig:
 43052                                  	;stc
 43053                                  notdig2:
 43054 00004203 C3                      	retn
 43055                                  
 43056                                  ;----------------------------------------------------------------------------
 43057                                  ;
 43058                                  ; procedure : getnum
 43059                                  ;
 43060                                  ; getnum parses a decimal number.
 43061                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 43062                                  ; error), if number is bad carry is set, zero is set, ax=0.
 43063                                  ;
 43064                                  ;----------------------------------------------------------------------------
 43065                                  
 43066                                  getnum:
 43067 00004204 53                      	push	bx
 43068 00004205 31DB                    	xor	bx,bx			; running count is zero
 43069                                  b2:
 43070 00004207 E8F2FF                  	call	todigit 		; do we have a digit ?
 43071 0000420A 7247                    	jc	short badnum		; no, bomb
 43072                                  
 43073 0000420C 93                      	xchg	ax,bx			; put total in ax
 43074 0000420D 53                      	push	bx			; save digit (0 to 9)
 43075                                  	;mov	bx,10			; base of arithmetic
 43076                                  	; 12/12/2022
 43077 0000420E B30A                    	mov	bl,10
 43078 00004210 F7E3                    	mul	bx			; shift by one decimal digit
 43079 00004212 5B                      	pop	bx			; get back digit (0 to 9)
 43080 00004213 00D8                    	add	al,bl			; get total
 43081 00004215 80D400                  	adc	ah,0			; make that 16 bits
 43082 00004218 7239                    	jc	short badnum		; too big a number
 43083                                  
 43084 0000421A 93                      	xchg	ax,bx			; stash total
 43085                                  
 43086 0000421B E830FF                  	call	getchr			;get next digit
 43087 0000421E 722D                    	jc	short b1		; no more characters
 43088 00004220 3C20                    	cmp	al,' ' 			; space?
 43089 00004222 741F                    	je	short b15		; then end of digits
 43090 00004224 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 43091 00004226 741B                    	je	short b15		; then end of digits.
 43092 00004228 3C09                    	cmp	al, tab ; 9		; tab
 43093 0000422A 7417                    	je	short b15
 43094 0000422C 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 43095 00004231 7410                    	je	short b15
 43096 00004233 3C2F                    	cmp	al,'/'			; see if another switch follows
 43097                                  	; 12/12/2022
 43098                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43099                                  	;nop				; cas - remnant of old bad code
 43100                                  	;nop
 43101 00004235 740C                    	je	short b15
 43102 00004237 3C0A                    	cmp	al,lf			; line-feed?
 43103 00004239 7408                    	je	short b15
 43104 0000423B 3C0D                    	cmp	al,cr			; carriage return?
 43105 0000423D 7404                    	je	short b15
 43106 0000423F 08C0                    	or	al,al			; end of line separator?
 43107 00004241 75C4                    	jnz	short b2		; no, try as a valid char...
 43108                                  b15:
 43109 00004243 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 43110 00004248 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 43111                                  b1:
 43112 0000424D 89D8                    	mov	ax,bx			; get proper count
 43113 0000424F 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 43114 00004251 5B                      	pop	bx
 43115 00004252 C3                      	retn
 43116                                  badnum:
 43117                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43118                                  	;mov	byte [cs:sepchr],0
 43119 00004253 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 43120                                  	; 12 /12/2022
 43121 00004255 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 43122 00004259 5B                      	pop	bx
 43123 0000425A F9                      	stc				; and carry set
 43124 0000425B C3                      	retn
 43125                                  
 43126                                  ;****************************************************************************
 43127                                  
 43128                                  setdoscountryinfo:
 43129                                  
 43130                                  ;----------------------------------------------------------------------------
 43131                                  ;input: es:di -> pointer to dos_country_cdpg_info
 43132                                  ;	ds:0  -> buffer.
 43133                                  ;	si = 0
 43134                                  ;	ax = country id
 43135                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 43136                                  ;	bx = file handle
 43137                                  ;	this routine can handle maximum 438 country_data entries.
 43138                                  ;
 43139                                  ;output: dos_country_cdpg_info set.
 43140                                  ;	 carry set if any file read failure or wrong information in the file.
 43141                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 43142                                  ;	 codepage_id in the file.
 43143                                  ;----------------------------------------------------------------------------
 43144                                  
 43145                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43146                                  	; (SYSINIT:4D83h)
 43147                                  
 43148                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43149                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 43150                                  
 43151 0000425C 57                      	push	di
 43152 0000425D 50                      	push	ax
 43153 0000425E 52                      	push	dx
 43154                                  
 43155 0000425F 31C9                    	xor	cx,cx
 43156 00004261 31D2                    	xor	dx,dx
 43157 00004263 B80002                  	mov	ax,512			;read 512 bytes
 43158 00004266 E84301                  	call	readincontrolbuffer	;read the file header
 43159 00004269 724A                    	jc	short setdosdata_fail
 43160                                  
 43161 0000426B 06                      	push	es
 43162 0000426C 56                      	push	si
 43163                                  
 43164 0000426D 0E                      	push	cs
 43165 0000426E 07                      	pop	es
 43166                                  
 43167 0000426F BF[BF44]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 43168 00004272 B90800                  	mov	cx,8			;length of the signature
 43169 00004275 F3A6                    	repz	cmpsb
 43170                                  
 43171 00004277 5E                      	pop	si
 43172 00004278 07                      	pop	es
 43173 00004279 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 43174                                  
 43175 0000427B 83C612                  	add	si,18			;si -> county info type
 43176 0000427E 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 43177 00004281 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 43178                                  
 43179 00004283 46                      	inc	si			;si -> file offset
 43180 00004284 8B14                    	mov	dx,[si]			;get the info file offset.
 43181 00004286 8B4C02                  	mov	cx,[si+2]
 43182 00004289 B80018                  	mov	ax,6144			;read 6144 bytes.
 43183 0000428C E81D01                  	call	readincontrolbuffer	;read info
 43184 0000428F 7224                    	jc	short setdosdata_fail
 43185                                  
 43186 00004291 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 43187 00004293 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 43188 00004297 771C                    	ja	short setdosdata_fail
 43189                                  
 43190 00004299 46                      	inc	si
 43191 0000429A 46                      	inc	si			;si -> entry information packet
 43192 0000429B 5A                      	pop	dx			;restore code page id
 43193 0000429C 58                      	pop	ax			;restore country id
 43194 0000429D 5F                      	pop	di
 43195                                  
 43196                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 43197 0000429E 3B4402                  	cmp	ax,[si+2]		;compare country_id
 43198 000042A1 7509                    	jne	short setdoscntry_next
 43199                                  
 43200                                  	;cmp	dx,0			;no user specified code page ?
 43201                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 43202                                  	; 10/09/2023
 43203 000042A3 09D2                    	or	dx,dx ; cmp dx,0
 43204 000042A5 7413                    	jz	short setdoscntry_any_codepage
 43205 000042A7 3B5404                  	cmp	dx,[si+4]		;compare code page id
 43206 000042AA 7411                    	je	short setdoscntry_got_it
 43207                                  
 43208                                  setdoscntry_next:
 43209 000042AC 0334                    	add	si,[si]			;next entry
 43210 000042AE 46                      	inc	si
 43211 000042AF 46                      	inc	si			;take a word for size of entry itself
 43212 000042B0 E2EC                    	loop	setdoscntry_find
 43213                                  
 43214                                  	;mov	cx,-1			;signals that bad country id entered.
 43215                                  	; 10/09/2023
 43216 000042B2 49                      	dec	cx ; 0 -> -1
 43217                                  setdoscntry_fail:
 43218 000042B3 F9                      	stc
 43219 000042B4 C3                      	retn
 43220                                  
 43221                                  setdosdata_fail:
 43222 000042B5 5E                      	pop	si
 43223 000042B6 59                      	pop	cx
 43224 000042B7 5F                      	pop	di
 43225 000042B8 EBF9                    	jmp	short setdoscntry_fail
 43226                                  
 43227                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 43228 000042BA 8B5404                  	mov	dx,[si+4]
 43229                                  
 43230                                  setdoscntry_got_it:			;found the matching entry
 43231 000042BD 2E8916[C744]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 43232 000042C2 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 43233 000042C5 8B4C0C                  	mov	cx,[si+12]
 43234 000042C8 B80002                  	mov	ax,512 			;read 512 bytes
 43235 000042CB E8DE00                  	call	readincontrolbuffer
 43236 000042CE 72E3                    	jc	short setdoscntry_fail
 43237                                  
 43238 000042D0 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 43239 000042D2 46                      	inc	si
 43240 000042D3 46                      	inc	si			;si -> first entry
 43241                                  
 43242                                  setdoscntry_data:
 43243 000042D4 57                      	push	di			;es:di -> dos_country_cdpg_info
 43244 000042D5 51                      	push	cx			;save # of entry left
 43245 000042D6 56                      	push	si			;si -> current entry in control buffer
 43246                                  
 43247 000042D7 8A4402                  	mov	al,[si+2]		;get data entry id
 43248 000042DA E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 43249 000042DD 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 43250                                  
 43251 000042DF 8B5404                  	mov	dx,[si+4]		;get offset of data
 43252 000042E2 8B4C06                  	mov	cx,[si+6]
 43253 000042E5 B80042                  	mov	ax,4200h
 43254 000042E8 F9                      	stc
 43255 000042E9 CD21                    	int	21h			;move pointer
 43256 000042EB 72C8                    	jc	short setdosdata_fail
 43257                                  
 43258 000042ED BA0002                  	mov	dx,512			;start of data buffer
 43259 000042F0 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 43260 000042F3 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 43261 000042F5 F9                      	stc
 43262 000042F6 CD21                    	int	21h			;read the country.sys data
 43263 000042F8 72BB                    	jc	short setdosdata_fail 	;read failure
 43264                                  
 43265 000042FA 39C8                    	cmp	ax,cx
 43266 000042FC 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 43267                                  
 43268 000042FE 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 43269 00004301 8B4C06                  	mov	cx,[si+6]
 43270 00004304 B80042                  	mov	ax,4200h
 43271 00004307 F9                      	stc
 43272 00004308 CD21                    	int	21h			;move pointer back again
 43273 0000430A 72A9                    	jc	short setdosdata_fail
 43274                                  
 43275 0000430C 56                      	push	si
 43276 0000430D BE0802                  	mov	si,(512+8)		;get length of the data from the file
 43277 00004310 8B0C                    	mov	cx,[si]
 43278 00004312 5E                      	pop	si
 43279 00004313 BA0002                  	mov	dx,512			;start of data buffer
 43280 00004316 83C10A                  	add	cx,10			;signature + a word for the length itself
 43281 00004319 B43F                    	mov	ah,3Fh			;read the data from the file.
 43282 0000431B F9                      	stc
 43283 0000431C CD21                    	int	21h
 43284 0000431E 7295                    	jc	short setdosdata_fail
 43285                                  
 43286 00004320 39C8                    	cmp	ax,cx
 43287 00004322 7591                    	jne	short setdosdata_fail
 43288                                  
 43289 00004324 8A4402                  	mov	al,[si+2]		;save data id for future use.
 43290 00004327 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 43291 0000432A 8B0C                    	mov	cx,[si]			;get the length of the file
 43292 0000432C 41                      	inc	cx			;take care of a word for lenght of tab
 43293 0000432D 41                      	inc	cx			;itself.
 43294 0000432E 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 43295 00004332 7781                    	ja	short setdosdata_fail
 43296                                  
 43297                                  	;if	bugfix
 43298 00004334 E83100                  	call	setdbcs_before_copy
 43299                                  	;endif
 43300                                  
 43301 00004337 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 43302 00004339 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 43303                                  
 43304 0000433B 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 43305                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 43306 0000433F 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 43307                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 43308                                  	
 43309 00004343 57                      	push	di			;save di
 43310                                  
 43311                                  	;push	ax
 43312                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 43313                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 43314                                  	;pop	ax
 43315                                  	; 10/09/2023
 43316 00004344 2EFF36[C744]            	push	word [cs:cntrycodepage_id]
 43317 00004349 8F4404                  	pop	word [si+4]
 43318                                  
 43319                                  setdoscntry_mov:
 43320 0000434C F3A4                    	rep	movsb			;copy the table into dos
 43321 0000434E 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 43322 00004350 7509                    	jne	short setdoscntry_data_next
 43323                                  
 43324 00004352 5F                      	pop	di			;restore di
 43325 00004353 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 43326                                  	;pop	word [es:di+26]		;restore
 43327 00004357 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 43328                                  	;pop	word [es:di+24]
 43329                                  
 43330                                  setdoscntry_data_next:
 43331 0000435B 5E                      	pop	si			;restore control buffer pointer
 43332 0000435C 59                      	pop	cx			;restore # of entries left
 43333 0000435D 5F                      	pop	di			;restore pointer to dso_country_cdpg
 43334 0000435E 0334                    	add	si,[si]			;try to get the next entry
 43335 00004360 46                      	inc	si
 43336 00004361 46                      	inc	si			;take a word of entry length itself
 43337 00004362 49                      	dec	cx
 43338                                  	; 10/09/2023
 43339 00004363 741B                    	jz	short setdoscntry_ok 
 43340                                  	;cmp	cx,0
 43341                                  	;je	short setdoscntry_ok
 43342 00004365 E96CFF                  	jmp	setdoscntry_data
 43343                                  
 43344                                  	; 18/12/2022
 43345                                  ;setdoscntry_ok:
 43346                                  	;retn
 43347                                  
 43348                                  ;----------------------------------------------------------------------------
 43349                                  	
 43350                                  	;if	bugfix
 43351                                  
 43352                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43353                                  
 43354                                  setdbcs_before_copy:
 43355 00004368 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 43356 0000436A 7514                    	jne	short sdbcsbc		; jump if not
 43357                                  	
 43358                                  	; 10/09/2023
 43359 0000436C 50                      	push	ax
 43360 0000436D 31C0                    	xor	ax,ax
 43361 0000436F 263905                  	cmp	[es:di],ax ; 0
 43362 00004372 740B                    	je	short sdbcsbc_pop
 43363                                  	
 43364                                  	;cmp	word [es:di],0		; zero byte data block?
 43365                                  	;je	short sdbcsbc		; jump if so
 43366                                  
 43367 00004374 57                      	push	di
 43368                                  	; 10/09/2023
 43369                                  	;push	ax
 43370 00004375 51                      	push	cx
 43371 00004376 268B0D                  	mov	cx,[es:di]		; load block length
 43372                                  	;add	di,2			; points actual data
 43373 00004379 47                      	inc	di
 43374 0000437A 47                      	inc	di
 43375                                  	;xor	al,al			; fill bytes
 43376 0000437B F3AA                    	rep	stosb			; clear data block
 43377 0000437D 59                      	pop	cx
 43378                                  	;pop	ax
 43379 0000437E 5F                      	pop	di
 43380                                  
 43381                                  sdbcsbc_pop:	; 10/09/2023
 43382 0000437F 58                      	pop	ax
 43383                                  sdbcsbc:
 43384                                  setdoscntry_ok:	; 18/12/2022
 43385 00004380 C3                      	retn
 43386                                  
 43387                                  	;endif
 43388                                  
 43389                                  ;----------------------------------------------------------------------------
 43390                                  
 43391                                  getcountrydestination:
 43392                                  
 43393                                  ;----------------------------------------------------------------------------
 43394                                  ;get the destination address in the dos country info table.
 43395                                  ;
 43396                                  ;input: al - data id
 43397                                  ;	es:di -> dos_country_cdpg_info
 43398                                  ;on return:
 43399                                  ;	es:di -> destination address of the matching data id
 43400                                  ;	carry set if no matching data id found in dos.
 43401                                  ;----------------------------------------------------------------------------
 43402                                  
 43403                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43404                                  	; (SYSINIT:4EB2h)
 43405                                  
 43406                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43407                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 43408                                  
 43409 00004381 51                      	push	cx
 43410                                  	;add	di,74
 43411 00004382 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 43412                                  					;skip the reserved area, syscodepage etc.
 43413 00004385 268B0D                  	mov	cx,[es:di]		;get the number of entries
 43414 00004388 47                      	inc	di
 43415 00004389 47                      	inc	di			;si -> the first start entry id
 43416                                  
 43417                                  getcntrydest:
 43418 0000438A 263805                  	cmp	byte [es:di],al
 43419 0000438D 7413                    	je	short getcntrydest_ok
 43420                                  
 43421 0000438F 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 43422 00004393 7405                    	je	short getcntrydest_1
 43423                                  
 43424 00004395 83C705                  	add	di,5			;next data id
 43425 00004398 EB03                    	jmp	short getcntrydest_loop
 43426                                  
 43427                                  getcntrydest_1:
 43428                                  	;add	di,41
 43429 0000439A 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 43430                                  getcntrydest_loop:
 43431 0000439D E2EB                    	loop	getcntrydest
 43432 0000439F F9                      	stc
 43433                                  	;jmp	short getcntrydest_exit
 43434                                  getcntrydest_exit:
 43435                                  	; 10/09/2023
 43436 000043A0 59                      	pop	cx
 43437 000043A1 C3                      	retn
 43438                                  
 43439                                  getcntrydest_ok:
 43440                                  	; 10/09/2023
 43441 000043A2 47                      	inc	di
 43442                                  
 43443                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 43444                                  ;	jne	short getcntrydest_ok1
 43445                                  ;
 43446                                  ;	;inc	di			;now di -> cccountryinfolen
 43447                                  ;	jmp	short getcntrydest_exit
 43448                                  
 43449                                  	; 10/09/2023
 43450 000043A3 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 43451 000043A5 74F9                    	je	short getcntrydest_exit
 43452                                  
 43453                                  getcntrydest_ok1:
 43454                                  	;les	di,[es:di+1]		;get the destination in es:di
 43455                                  	; 10/09/2023
 43456 000043A7 26C43D                  	les	di,[es:di]
 43457                                  ;getcntrydest_exit:
 43458 000043AA 59                      	pop	cx
 43459 000043AB C3                      	retn
 43460                                  
 43461                                  ;----------------------------------------------------------------------------
 43462                                  
 43463                                  readincontrolbuffer:
 43464                                  
 43465                                  ;----------------------------------------------------------------------------
 43466                                  ;move file pointer to cx:dx
 43467                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 43468                                  ;si will be set to 0 hence ds:si points to the control buffer.
 43469                                  ;
 43470                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 43471                                  ;	 be moved.
 43472                                  ;	 ax - # of bytes to read
 43473                                  ;	 bx - file handle
 43474                                  ;	 ds - buffer seg.
 43475                                  ;return: the control data information is read into ds:0 - ds:0200.
 43476                                  ;	 cx,dx value destroyed.
 43477                                  ;	 carry set if error in reading file.
 43478                                  ;----------------------------------------------------------------------------
 43479                                  
 43480 000043AC 50                      	push	ax			;# of bytes to read
 43481 000043AD B80042                  	mov	ax,4200h
 43482 000043B0 F9                      	stc
 43483 000043B1 CD21                    	int	21h			;move pointer
 43484 000043B3 59                      	pop	cx			;# of bytes to read
 43485 000043B4 7209                    	jc	short ricb_exit
 43486                                  
 43487 000043B6 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 43488 000043B8 31F6                    	xor	si,si
 43489 000043BA B43F                    	mov	ah,3Fh			;read into the buffer
 43490 000043BC F9                      	stc
 43491 000043BD CD21                    	int	21h			;should be less than 1024 bytes.
 43492                                  ricb_exit:
 43493 000043BF C3                      	retn
 43494                                  
 43495                                  ;----------------------------------------------------------------------------
 43496                                  
 43497                                  ;! set_country_path procedure is not called from anywhere !
 43498                                  ; Erdogan Tan - 04/08/2023
 43499                                  %if 0
 43500                                  
 43501                                  set_country_path:
 43502                                  
 43503                                  ;----------------------------------------------------------------------------
 43504                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 43505                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 43506                                  ;     assumes current directory is the root directory.
 43507                                  ;out: ds:di -> full path (cntry_drv).
 43508                                  ;     set the cntry_drv string from the country=,,path command.
 43509                                  ;     ds, es, si value saved.
 43510                                  ;----------------------------------------------------------------------------
 43511                                  
 43512                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43513                                  	; (SYSINIT:4EF4h)
 43514                                  
 43515                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43516                                  	; (Retrodos v5.0 Pre-Works)
 43517                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 43518                                  
 43519                                  	push	si
 43520                                  
 43521                                  	push	ds			;switch ds, es
 43522                                  	push	es
 43523                                  	pop	ds
 43524                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 43525                                  
 43526                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 43527                                  	jc	short scp_default_drv 	;no, use current default drive.
 43528                                  
 43529                                  	mov	al,[si]
 43530                                  	inc	si
 43531                                  	inc	si			;si -> next char after ":"
 43532                                  	jmp	short scp_setdrv
 43533                                  
 43534                                  scp_default_drv:
 43535                                  	mov	ah,19h
 43536                                  	int	21h
 43537                                  	add	al,"A"			;convert it to a character.
 43538                                  
 43539                                  scp_setdrv:
 43540                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 43541                                  	mov	di,cntry_path
 43542                                  	mov	al,[si]
 43543                                  	cmp	al, "\"
 43544                                  	je	short scp_root_dir
 43545                                  
 43546                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 43547                                  	;je	short scp_root_dir
 43548                                  	;jmp	short scp_path
 43549                                  	; 04/01/2023
 43550                                  	jne	short scp_path
 43551                                  
 43552                                  scp_root_dir:
 43553                                  	dec	di			;di -> cntry_root
 43554                                  scp_path:
 43555                                  	call	move_asciiz		;copy it
 43556                                  
 43557                                  	mov	di,cntry_drv
 43558                                  scpath_exit:
 43559                                  
 43560                                  	push	ds			;switch ds, es
 43561                                  	push	es
 43562                                  	pop	ds
 43563                                  	pop	es			;ds, es value restored
 43564                                  
 43565                                  	pop	si
 43566                                  	retn
 43567                                  
 43568                                  ;----------------------------------------------------------------------------
 43569                                  
 43570                                  chk_drive_letter:
 43571                                  
 43572                                  ;check if ds:[si] is a drive letter followed by ":".
 43573                                  ;assume that every alpha character is already converted to upper case.
 43574                                  ;carry set if not.
 43575                                  
 43576                                  	; 04/01/2023 - Retrodos v4.2
 43577                                  
 43578                                  	push	ax
 43579                                  	cmp	byte [si],"A"
 43580                                  	;jb	short cdletter_no
 43581                                  	jb	short cdletter_exit
 43582                                  	cmp	byte [si],"Z"
 43583                                  	ja	short cdletter_no
 43584                                  	cmp	byte [si+1],":"
 43585                                  	;jne	short cdletter_no
 43586                                  	;jmp	short cdletter_exit
 43587                                  	; 04/01/2023
 43588                                  	je	short cdletter_exit
 43589                                  
 43590                                  cdletter_no:
 43591                                  	stc
 43592                                  cdletter_exit:
 43593                                  	pop	ax
 43594                                  	retn
 43595                                  
 43596                                  %endif
 43597                                  
 43598                                  ;----------------------------------------------------------------------------
 43599                                  
 43600                                  move_asciiz:
 43601                                  
 43602                                  ;in: ds:si -> source es:di -> target
 43603                                  ;out: copy the string until 0.
 43604                                  ;assumes there exists a 0.
 43605                                  
 43606                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43607                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 43608                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 43609                                  
 43610                                  masciiz_loop:
 43611                                  	; 10/09/2023
 43612 000043C0 F604FF                  	test	byte [si],0FFh
 43613 000043C3 A4                      	movsb
 43614                                  	;cmp	byte [si-1],0	; was it 0?
 43615                                  	;jne	short masciiz_loop
 43616 000043C4 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 43617 000043C6 C3                      	retn
 43618                                  
 43619                                  ;----------------------------------------------------------------------------
 43620                                  
 43621                                  ;	ds:dx points to string to output (asciz)
 43622                                  ;
 43623                                  ;	prints <badld_pre> <string> <badld_post>
 43624                                  
 43625                                  badfil:
 43626 000043C7 0E                      	push	cs
 43627 000043C8 07                      	pop	es
 43628                                  
 43629 000043C9 89D6                    	mov	si,dx
 43630                                  badload:
 43631 000043CB BA[3F4A]                	mov	dx,badld_pre	; want to print config error
 43632 000043CE BB[FC49]                	mov	bx,crlfm
 43633                                  prnerr:
 43634 000043D1 0E                      	push	cs
 43635 000043D2 1F                      	pop	ds ; *
 43636 000043D3 E81D00                  	call	print
 43637                                  prn1:
 43638 000043D6 268A14                  	mov	dl,[es:si]
 43639 000043D9 08D2                    	or	dl,dl
 43640 000043DB 7407                    	jz	short prn2
 43641 000043DD B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 43642 000043DF CD21                    	int	21h
 43643 000043E1 46                      	inc	si
 43644 000043E2 EBF2                    	jmp	short prn1
 43645                                  prn2:
 43646 000043E4 89DA                    	mov	dx,bx
 43647 000043E6 E80A00                  	call	print
 43648                                  	; 11/12/2022
 43649                                  	; ds = cs ; *
 43650 000043E9 803E[5303]01            	cmp	byte [donotshownum],1
 43651                                  				; suppress line number when handling command.com
 43652                                  	;cmp	byte [cs:donotshownum],1 
 43653 000043EE 7407                    	je	short prnexit
 43654                                  	
 43655                                  	; 18/12/2022
 43656                                  	;call	error_line
 43657 000043F0 E9C8E4                  	jmp	error_line
 43658                                  ;prnexit:
 43659                                  	;retn
 43660                                  
 43661                                  ;----------------------------------------------------------------------------
 43662                                  
 43663                                  print:
 43664 000043F3 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 43665 000043F5 CD21                    	int	21h
 43666                                  prnexit:	; 18/12/2022
 43667 000043F7 C3                      	retn
 43668                                  
 43669                                  ;----------------------------------------------------------------------------
 43670                                  
 43671                                  ;  open device pointed to by dx, al has access code
 43672                                  ;   if unable to open do a device open null device instead
 43673                                  
 43674                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43675                                  	; (SYSINIT:3764h)
 43676                                  open_dev:
 43677 000043F8 E80500                  	call	open_file
 43678 000043FB 7309                    	jnc	short open_dev3
 43679                                  
 43680                                  open_dev1:
 43681 000043FD BA[6044]                	mov	dx,nuldev
 43682                                  	; 18/12/2022
 43683                                  	;call	open_file
 43684                                  ;of_retn:
 43685                                  	;retn
 43686                                  	; 18/12/2022
 43687                                  	;jmp	short open_file
 43688                                  open_file:
 43689 00004400 B43D                    	mov	ah,OPEN	; 3Dh
 43690 00004402 F9                      	stc
 43691 00004403 CD21                    	int	21h
 43692                                  of_retn:	; 18/12/2022
 43693 00004405 C3                      	retn
 43694                                  
 43695                                  open_dev3:
 43696 00004406 89C3                    	mov	bx,ax			; handle from open to bx
 43697                                  	;;xor	ax,ax			; get device info
 43698                                  	;;mov	ah,IOCTL ; 44h
 43699                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 43700                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43701                                  	;xor	ax,ax
 43702                                  	;mov	ah,44h	; IOCTL
 43703                                  	; 11/12/2022
 43704 00004408 B80044                  	mov	ax,4400h ; IOCTL<<8 
 43705                                  
 43706 0000440B CD21                    	int	21h
 43707                                  
 43708 0000440D F6C280                  	test	dl,10000000b ; 80h
 43709 00004410 75F3                    	jnz	short of_retn
 43710                                  
 43711 00004412 B43E                    	mov	ah,CLOSE ; 3Eh
 43712 00004414 CD21                    	int	21h
 43713 00004416 EBE5                    	jmp	short open_dev1
 43714                                  
 43715                                  ;----------------------------------------------------------------------------
 43716                                  
 43717                                  ; 18/12/2022
 43718                                  %if 0
 43719                                  open_file:
 43720                                  	mov	ah,OPEN	; 3Dh
 43721                                  	stc
 43722                                  	int	21h
 43723                                  	retn
 43724                                  %endif
 43725                                  
 43726                                  ;----------------------------------------------------------------------------
 43727                                  
 43728                                  ; test int24. return back to dos with the fake user response of "fail"
 43729                                  
 43730                                  int24:
 43731 00004418 B003                    	mov	al,3			; fail the system call
 43732 0000441A CF                      	iret				; return back to dos.
 43733                                  
 43734                                  ; 19/04/2019 - Retro DOS v4.0
 43735                                  
 43736                                  ;----------------------------------------------------------------------------
 43737                                  ; DATA
 43738                                  ;----------------------------------------------------------------------------
 43739                                  
 43740                                  ;include copyrigh.inc			; copyright statement
 43741                                  
 43742                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 43743                                  
 43744                                  ;MsDosVersion6Copyr:
 43745                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 43746                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 43747                                  
 43748                                  ; 22/10/2022
 43749                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 43750                                  
 43751                                  ; 28/12/2022
 43752                                  %if 0
 43753                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43754                                  MsDosVersion5Copyr:
 43755                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 43756                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 43757                                  %endif
 43758                                  
 43759                                  ; 13/04/2024 - Retro DOS v5.0
 43760                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:51EAh	(IBMBIO.COM offset 42266)
 43761                                  %if 0
 43762                                  IBMDOSV71COPYR:
 43763                                  	db 'IBM DOS Version 7.1 (C)Copyright 1981-2002 IBM Corporation '
 43764                                  	db 'Licensed Material - Property of IBM All rights reserved '
 43765                                  %endif
 43766                                  
 43767                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43768                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 43769                                  ; 20/04/2019 - Retro DOS v4.0
 43770                                  ;BOOTMES:
 43771                                  ;	db      13
 43772                                  ;	db      10
 43773                                  ;	db      "MS-DOS version "
 43774                                  ;	db      MAJOR_VERSION + "0"
 43775                                  ;	db      "."
 43776                                  ;	db      (MINOR_VERSION / 10) + "0"
 43777                                  ;	db      (MINOR_VERSION % 10) + "0"
 43778                                  ;	db      13,10
 43779                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 43780                                  ;	; 22/10/2022
 43781                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 43782                                  ;	;
 43783                                  ;	db	0
 43784                                  
 43785                                  	; 01/01/2023 - Retro DOS v4.2
 43786                                  
 43787                                  	; 28/12/2022 - Retro DOS v4.1
 43788                                  ;MsDosVersion5Copyr:
 43789                                  ;  	db	13,10,"MS DOS Version 5.0"
 43790                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 43791                                  
 43792                                  	; 12/12/2022
 43793 0000441B 00                      	db	0
 43794                                  ; 12/12/2022
 43795                                  BOOTMES:
 43796 0000441C 0D0A                    	db	13,10
 43797                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 43798                                  	; 28/12/2022
 43799                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 43800                                  	; 01/01/2023
 43801                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 43802                                  	; 30/12/2023
 43803                                  	;db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 43804                                  	; 09/03/2025
 43805 0000441E 4D696E69444F532076-     	db	"MiniDOS v1.0 (Simplified PCDOS 7.1) "
 43805 00004427 312E30202853696D70-
 43805 00004430 6C6966696564205043-
 43805 00004439 444F5320372E312920 
 43806                                  	
 43807 00004442 0D0A                    	db	13,10
 43808                                  	;db	"by Erdogan Tan [2024] " ; 01/01/2024
 43809 00004444 6279204572646F6761-     	db	"by Erdogan Tan [2025] " ; 09/03/2025
 43809 0000444D 6E2054616E205B3230-
 43809 00004456 32355D20           
 43810 0000445A 0D0A                    	db	13,10
 43811 0000445C 0D0A2400                	db	13,10,"$",0
 43812                                  
 43813 00004460 4E554C00                nuldev:	db	"NUL",0
 43814 00004464 434F4E00                condev:	db	"CON",0
 43815 00004468 41555800                auxdev:	db	"AUX",0
 43816 0000446C 50524E00                prndev:	db	"PRN",0
 43817                                  
 43818                                  ;IFDEF	CONFIGPROC
 43819 00004470 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 43819 00004479 595300             
 43820                                  
 43821 0000447C 413A                    cntry_drv:  db	"A:"
 43822 0000447E 5C                      cntry_root: db	"\"
 43823 0000447F 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 43823 00004488 595300             
 43824                                  	    ;db	52 dup (0)
 43825 0000448B 00<rep 34h>             	    times 52 db 0	
 43826                                  
 43827                                  country_file_signature:
 43828 000044BF FF434F554E545259        	db	0FFh,'COUNTRY'
 43829                                  
 43830                                  cntrycodepage_id: 
 43831 000044C7 0000                    	dw	0 	
 43832                                  
 43833                                  ;ENDIF ; CONFIGPROC
 43834                                  
 43835                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43836                                  ; (SYSINIT:5081h)
 43837                                  
 43838                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43839                                  ;ifdef	MULTI_CONFIG
 43840 000044C9 00                      newcmd:  db	0			; non-zero if non-std shell specified
 43841 000044CA 40                      tmplate: db	64                      ; must precede commnd
 43842                                  ;endif
 43843                                  
 43844                                  ;ifdef ROMEXEC
 43845                                  ;	db      7                       ; size of commnd line (excl. null)
 43846                                  ;commnd: db	"COMMAND",0
 43847                                  ;	db	56 dup (0)
 43848                                  ;else
 43849                                  	; 02/11/2022
 43850 000044CB 0C                      	db	12                      ; size of commnd line (excl. null)
 43851 000044CC 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 43851 000044D5 434F4D00           
 43852                                  	;db	51 dup (0)
 43853 000044D9 00<rep 33h>             	times	51 db 0
 43854                                  ;endif
 43855                                  
 43856                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43857                                  ;ifdef	MULTI_CONFIG
 43858 0000450C 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 43858 00004515 434F4D00           
 43859 00004519 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 43860 0000451D 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 43860 00004526 4D4D414E442E434F4D-
 43860 0000452F 00                 
 43861 00004530 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 43861 00004539 202F5000           
 43862 0000453D 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 43862 00004546 414E442E434F4D00   
 43863 0000454E 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 43863 00004557 5000               
 43864                                  def_swchr:	
 43865 00004559 00                      	 db	0			; default switchchar (referenced as command_line-1)
 43866                                  ;endif
 43867                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43868                                  command_line:
 43869 0000455A 022F50                  	db	2,"/P"			; default command.com args
 43870                                  	;db	125 dup (0)
 43871 0000455D 00<rep 7Dh>             	times	125 db 0
 43872                                  
 43873                                  pathstring:
 43874                                  	;db	64 dup (0)
 43875 000045DA 00<rep 40h>             	times	64 db 0
 43876                                  
 43877                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43878                                  ; (SYSINIT:51D3h)
 43879                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43880                                  ;%if 0
 43881                                  
 43882                                  dae_flag:
 43883 0000461A 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 43884                                  
 43885                                  ;ifdef	MULTI_CONFIG
 43886                                  
 43887                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 43888                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 43889                                  
 43890                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 43891                                  
 43892 0000461B 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 43893 0000461C 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 43894 0000461D 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 43895 0000461E 00                      bLastCol:	db      0               ; ending column on status line
 43896 0000461F 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 43897 00004620 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 43898                                                                          ; 2=disable default 2-second delay
 43899 00004621 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 43900 00004622 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 43901 00004624 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 43902 00004625 01                      bDefBlock:	db      1               ; default block #
 43903 00004626 00                      bMaxBlock:	db      0               ; maxmimum block #
 43904 00004627 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 43905 00004629 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 43906 0000462A 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 43907 0000462B 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 43908 00004635 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 43909 00004649 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 43910                                  
 43911 0000465D 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 43912 00004665 4D454E5500              szMenu:		db      "MENU",0
 43913 0000466A 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 43914                                  
 43915                                  ;endif	;MULTI_CONFIG
 43916                                  
 43917                                  	; 10/09/2023
 43918                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 43919                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 43920                                  
 43921                                  comtab:	 ; label byte
 43922                                  
 43923                                  ;            cmd len    command         cmd code
 43924                                  ;            -------    -------         --------
 43925                                  
 43926                                  ;ifdef MULTI_CONFIG
 43927 00004671 015B5B                          db      1,      "[",            CONFIG_BEGIN
 43928                                  ;endif
 43929 00004674 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 43930 0000467B 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 43931 00004684 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 43932 0000468D 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 43933 00004696 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 43934 0000469E 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43934 000046A7 474855             
 43935 000046AA 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 43936 000046AF 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43936 000046B8 50                 
 43937 000046B9 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 43938 000046BF 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 43939                                  ;ifdef MULTI_CONFIG
 43940 000046C6 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 43941                                  ;endif
 43942 000046CF 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 43943 000046D8 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 43943 000046E1 49474857           
 43944 000046E5 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43944 000046EE 454C               
 43945                                  ;ifdef MULTI_CONFIG
 43946 000046F0 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 43947 000046F9 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 43947 00004702 5252               
 43948 00004704 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 43948 0000470D 554C5441           
 43949 00004711 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 43949 0000471A 45                 
 43950                                  ;endif
 43951 0000471B 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43951 00004724 434B4D             
 43952                                  ;ifdef MULTI_CONFIG
 43953 00004727 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 43954                                  ;endif
 43955 00004730 0352454D30                      db      3,      "REM",          CONFIG_REM
 43956                                  ;ifdef MULTI_CONFIG
 43957 00004735 0353455456                      db      3,      "SET",          CONFIG_SET
 43958                                  ;endif
 43959 0000473A 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 43960                                  ;if    STACKSW
 43961 00004741 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 43962                                  ;endif
 43963                                  
 43964                                  ; 18/03/2025 - MiniDOS v1.0
 43965                                  %if 0
 43966                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 43967                                  %endif
 43968                                  	; 18/03/2025
 43969 00004749 00                      	db	0
 43970                                  
 43971                                  ; 18/03/2025 - MiniDOS 1.0
 43972                                  %if 0
 43973                                  	; 10/09/2023
 43974                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h
 43975                                  	; 13/04/2024 - Retro DOS v5.0
 43976                                  	db	7,	"DOSDATA",	CONFIG_DOSDATA ; 'T'
 43977                                  	db	0
 43978                                  %endif
 43979                                  
 43980                                  ;%endif ; 02/11/2022
 43981                                  
 43982                                  ; 01/01/2023 - Retro DOS v4.2
 43983                                  %if 0
 43984                                  
 43985                                  comtab:
 43986                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43987                                  	; (SYSINIT:38EDh)
 43988                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 43989                                  	db      5,      "BREAK",        CONFIG_BREAK
 43990                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 43991                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43992                                  	db      5,      "FILES",        CONFIG_FILES
 43993                                  	db      4,      "FCBS",         CONFIG_FCBS
 43994                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43995                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43996                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43997                                  	db      6,      "STACKS",       CONFIG_STACKS
 43998                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 43999                                  	db      5,      "SHELL",        CONFIG_SHELL
 44000                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 44001                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 44002                                  	db      3,      "REM",          CONFIG_REM
 44003                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 44004                                  	db      3,      "DOS",          CONFIG_DOS
 44005                                  	db	0
 44006                                  
 44007                                  %endif
 44008                                  
 44009                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44010                                  ; (SYSINIT:530Ch)
 44011                                  
 44012                                  ; 13/04/2024 - Retro DOS v5.0
 44013                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:555Ah)
 44014                                  
 44015                                  deviceparameters:	
 44016                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 44017                                  devp.specialfunc:	; deviceparameters +
 44018 0000474A 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 44019                                  devp.devtype:
 44020 0000474B 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 44021                                  devp.devattr:
 44022 0000474C 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 44023                                  devp.cylinders:
 44024 0000474E 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 44025                                  
 44026                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44027                                  
 44028                                  	;times	286	db 0
 44029                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 44030 00004750 00                      	db	0
 44031                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 44032                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 44033 00004751 0000                    	dw	0
 44034                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 44035 00004753 00                      	db	0	
 44036 00004754 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 44037 00004756 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 44038 00004757 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 44039                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 44040 00004759 0000                    	dw	0
 44041                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 44042 0000475B 00                      	db	0
 44043 0000475C 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 44044                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 44045 0000475E 0000                    	dw	0
 44046                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 44047 00004760 0000                    	dw	0	
 44048                                  
 44049                                  	; 13/04/2024 - Retro DOS v5.0
 44050                                  	; (PCDOS 7.1 IBMBIO.COM)
 44051 00004762 00<rep 44h>             	times	68 db 0	; PCDOS 7.1 (FAT32 BPB)
 44052                                  	;;times	14 db 0	; MSDOS 6.21
 44053                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 44054                                  	;dw	0
 44055                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 44056                                  	;dw	0
 44057                                  	;times	6 db 0	
 44058                                  
 44059                                  devp.trktblents:
 44060 000047A6 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 44061                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 44062 000047A8 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 44063                                  			; 63*4 bytes
 44064                                  
 44065                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44066                                  ; (SYSINIT:5430h)
 44067                                  
 44068                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44069                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:56B4h)
 44070                                  	
 44071 000048A4 0200                    hlim:	dw	2
 44072 000048A6 0900                    slim:	dw	9
 44073                                  
 44074 000048A8 00                      drive:	db	0
 44075                                  
 44076                                  switches:
 44077 000048A9 0000                    	dw	0
 44078                                  
 44079                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44080                                  ; (SYSINIT:5437h)
 44081                                  
 44082                                  ; the following are the recommended bpbs for the media that
 44083                                  ; we know of so far.
 44084                                  
 44085                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44086                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 44087                                  
 44088                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44089                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 44090                                  
 44091                                  ; 48 tpi diskettes
 44092                                  
 44093 000048AB 0002                    bpb48t:	dw	512
 44094 000048AD 02                      	db	2
 44095 000048AE 0100                    	dw	1
 44096 000048B0 02                      	db	2
 44097 000048B1 7000                    	dw	112
 44098 000048B3 D002                    	dw	2*9*40 ; 720
 44099 000048B5 FD                      	db	0FDh
 44100 000048B6 0200                    	dw	2
 44101 000048B8 0900                    	dw	9
 44102 000048BA 0200                    	dw	2
 44103 000048BC 00000000                	dd	0
 44104 000048C0 00000000                        dd      0
 44105                                  	; 27/12/2023
 44106 000048C4 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44107 000048E0 90                      	db	90h	
 44108                                  
 44109                                  ; 96tpi diskettes
 44110                                  
 44111 000048E1 0002                    bpb96t:	dw	512
 44112 000048E3 01                      	db	1
 44113 000048E4 0100                    	dw	1
 44114 000048E6 02                      	db	2
 44115 000048E7 E000                    	dw	224
 44116 000048E9 6009                    	dw	2*15*80 ; 2400
 44117 000048EB F9                      	db	0F9h
 44118 000048EC 0700                    	dw	7
 44119 000048EE 0F00                    	dw	15
 44120 000048F0 0200                    	dw	2
 44121 000048F2 00000000                	dd	0
 44122 000048F6 00000000                        dd      0
 44123                                  	; 27/12/2023
 44124 000048FA 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44125 00004916 90                      	db	90h	
 44126                                  
 44127                                  ; 3 1/2 inch diskette bpb
 44128                                  
 44129 00004917 0002                    bpb35:	dw	512
 44130 00004919 02                      	db	2
 44131 0000491A 0100                    	dw	1
 44132 0000491C 02                      	db	2
 44133 0000491D 7000                    	dw	112
 44134 0000491F A005                    	dw	2*9*80 ; 1440
 44135 00004921 F9                      	db	0F9h
 44136 00004922 0300                    	dw	3
 44137 00004924 0900                    	dw	9
 44138 00004926 0200                    	dw	2
 44139 00004928 00000000                	dd	0
 44140 0000492C 00000000                        dd      0
 44141                                  	; 27/12/2023
 44142 00004930 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44143 0000494C 90                      	db	90h
 44144                                        
 44145 0000494D 0002                    bpb35h:	dw	512
 44146 0000494F 01                      	db	1
 44147 00004950 0100                    	dw	1
 44148 00004952 02                      	db	2
 44149 00004953 E000                    	dw	224
 44150 00004955 400B                    	dw	2*18*80 ; 2880
 44151 00004957 F0                      	db	0F0h
 44152 00004958 0900                    	dw	9
 44153 0000495A 1200                    	dw	18
 44154 0000495C 0200                    	dw	2
 44155 0000495E 00000000                	dd	0
 44156 00004962 00000000                        dd      0
 44157                                  	; 27/12/2023
 44158 00004966 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44159 00004982 90                      	db	90h
 44160                                  
 44161                                  ; m037 - BEGIN
 44162                                  
 44163 00004983 0002                    bpb288:	dw	512
 44164 00004985 02                      	db	2
 44165 00004986 0100                    	dw	1
 44166 00004988 02                      	db	2
 44167 00004989 F000                    	dw	240
 44168 0000498B 8016                    	dw	2*36*80 ; 5760
 44169 0000498D F0                      	db	0F0h
 44170 0000498E 0900                    	dw	9
 44171 00004990 2400                    	dw	36
 44172 00004992 0200                    	dw	2
 44173 00004994 00000000                	dd	0
 44174 00004998 00000000                        dd      0
 44175                                  	; 27/12/2023
 44176 0000499C 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44177 000049B8 90                      	db	90h
 44178                                  
 44179                                  ; m037 - END
 44180                                  
 44181                                  ; 12/05/2019
 44182                                  
 44183 000049B9 90                      align 2
 44184                                  
 44185                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44186                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 44187                                  
 44188                                  ; 13/04/2024 - Retro DOS v5.0
 44189                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5738h)
 44190                                  
 44191 000049BA [AB48]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 44192 000049BC [E148]                  	    dw	    bpb96t		; 96tpi drives
 44193 000049BE [1749]                  	    dw	    bpb35		; 3.5" drives
 44194                                  ; the following are not supported, so default to 3.5" media layout
 44195 000049C0 [1749]                  	    dw	    bpb35		; not used - 8" drives
 44196 000049C2 [1749]                  	    dw	    bpb35		; not used - 8" drives
 44197 000049C4 [1749]                  	    dw	    bpb35		; not used - hard files
 44198 000049C6 [1749]                  	    dw	    bpb35		; not used - tape drives
 44199 000049C8 [4D49]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 44200 000049CA [1749]                  	    dw	    bpb35		; ERIMO				m037
 44201 000049CC [8349]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 44202                                  
 44203                                  switchlist: 
 44204 000049CE 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 44205                                  
 44206                                  ;----------------------------------------------------------------------------
 44207                                  ; Messages
 44208                                  ;----------------------------------------------------------------------------
 44209                                  
 44210                                  ; 19/04/2019 - Retro DOS v4.0
 44211                                  
 44212                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 44213                                  
 44214 000049D7 00                      	db 	0
 44215                                  
 44216                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44217                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 44218                                  
 44219                                  ; 13/04/2024
 44220                                  ; MSDOS 6.22 IO.SYS - SYSINIT:559Eh
 44221                                  
 44222                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44223                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5756h
 44224                                  
 44225                                  badopm:
 44226 000049D8 0D0A                    	db	0Dh,0Ah 
 44227 000049DA 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 44227 000049E3 7A656420636F6D6D61-
 44227 000049EC 6E6420696E20434F4E-
 44227 000049F5 4649472E535953     
 44228                                  crlfm:
 44229 000049FC 0D0A24                  	db	0Dh,0Ah,'$'
 44230                                  badparm:
 44231 000049FF 0D0A                    	db	0Dh,0Ah
 44232 00004A01 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 44232 00004A0A 6E64206F7220706172-
 44232 00004A13 616D6574657273202D-
 44232 00004A1C 2024               
 44233                                  badsiz_pre:
 44234 00004A1E 0D0A                    	db	0Dh,0Ah
 44235 00004A20 536563746F72207369-     	db	'Sector size too large in file $'
 44235 00004A29 7A6520746F6F206C61-
 44235 00004A32 72676520696E206669-
 44235 00004A3B 6C652024           
 44236                                  badld_pre:
 44237 00004A3F 0D0A                    	db	0Dh,0Ah
 44238 00004A41 426164206F72206D69-     	db	'Bad or missing $'
 44238 00004A4A 7373696E672024     
 44239                                  badcom:
 44240 00004A51 436F6D6D616E642049-     	db	'Command Interpreter',0
 44240 00004A5A 6E7465727072657465-
 44240 00004A63 7200               
 44241                                  badcountry:
 44242 00004A65 0D0A                    	db	0Dh,0Ah
 44243 00004A67 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 44243 00004A70 6F756E74727920636F-
 44243 00004A79 6465206F7220636F64-
 44243 00004A82 6520706167650D0A24 
 44244                                  badcountrycom:
 44245 00004A8B 0D0A                    	db	0Dh,0Ah
 44246 00004A8D 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 44246 00004A96 434F554E5452592063-
 44246 00004A9F 6F6D6D616E640D0A24 
 44247                                  insufmemory:
 44248 00004AA8 0D0A                    	db	0Dh,0Ah
 44249 00004AAA 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 44249 00004AB3 656E74206D656D6F72-
 44249 00004ABC 7920666F7220434F55-
 44249 00004AC5 4E5452592E53595320-
 44249 00004ACE 66696C650D0A24     
 44250                                  badmem:
 44251 00004AD5 0D0A                    	db	0Dh,0Ah
 44252 00004AD7 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 44252 00004AE0 74696F6E20746F6F20-
 44252 00004AE9 6C6172676520666F72-
 44252 00004AF2 206D656D6F72790D0A-
 44252 00004AFB 24                 
 44253                                  badblock:
 44254 00004AFC 0D0A                    	db	0Dh,0Ah
 44255 00004AFE 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 44255 00004B07 626C6F636B20646576-
 44255 00004B10 696365730D0A24     
 44256                                  badstack:
 44257 00004B17 0D0A                    	db	0Dh,0Ah
 44258 00004B19 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 44258 00004B22 5441434B2070617261-
 44258 00004B2B 6D65746572730D0A24 
 44259                                  	; 18/12/2022
 44260                                  ;badorder:
 44261                                  	;db	0Dh,0Ah
 44262                                  	;db	'Incorrect order in CONFIG.SYS line $'
 44263                                  errorcmd:
 44264 00004B34 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 44264 00004B3D 434F4E4649472E5359-
 44264 00004B46 53206C696E652024   
 44265                                  
 44266                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44267                                  ; (SYSINIT:566Eh)
 44268                                  
 44269                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44270                                  ;%if 0
 44271                                  
 44272 00004B4E 4F4E                    OnOff:	db	'ON'
 44273 00004B50 4F4646                  OnOff2:	db	'OFF'
 44274                                  
 44275                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44276                                  	; (SYSINIT:5673h)
 44277                                  ;StartMsg:
 44278                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 44279                                  ;	db	0Ah,0
 44280                                  
 44281                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44282                                  	; (SYSINIT:58F7h)
 44283                                  StartMsg:
 44284 00004B53 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 44284 00004B5C 504320444F532E2E2E-
 44284 00004B65 0D0A               
 44285 00004B67 0A00                    	db	0Ah,0
 44286                                  
 44287                                  _$PauseMsg:
 44288                                  	; 17/12/2023
 44289                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 44290                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 44291 00004B69 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 44291 00004B72 206B657920746F2063-
 44291 00004B7B 6F6E74696E75652E2E-
 44291 00004B84 2E0D0A24           
 44292                                  _$CleanMsg:
 44293                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44294                                  	; 17/12/2023
 44295 00004B88 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44295 00004B91 20627970617373696E-
 44295 00004B9A 6720796F757220434F-
 44295 00004BA3 4E4649472E53595320-
 44295 00004BAC 616E64204155544F45-
 44295 00004BB5 5845432E4241542066-
 44295 00004BBE 696C65732E0D0A24   
 44296                                  _$InterMsg:
 44297                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44298                                  	; 17/12/2023
 44299 00004BC6 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44299 00004BCF 6C6C2070726F6D7074-
 44299 00004BD8 20796F7520746F2063-
 44299 00004BE1 6F6E6669726D206561-
 44299 00004BEA 636820434F4E464947-
 44299 00004BF3 2E53595320636F6D6D-
 44299 00004BFC 616E642E0D0A24     
 44300                                  _$MenuHeader:
 44301 00004C03 0D0A                    	db	0Dh,0Ah
 44302                                  	; 17/12/2023
 44303                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 44304                                  	;db	'  '
 44305                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44306                                  	;db 	0Dh,0Ah,'$'
 44307                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 44308 00004C05 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 44308 00004C0E 372E31205374617274-
 44308 00004C17 7570204D656E750D0A 
 44309 00004C20 2020                    	db	'  '
 44310 00004C22 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44311 00004C39 0D0A24                  	db 	0Dh,0Ah,'$'
 44312                                  _$MenuPrmpt:
 44313 00004C3C 2020456E7465722061-     	db	'  Enter a choice: $'
 44313 00004C45 2063686F6963653A20-
 44313 00004C4E 24                 
 44314                                  _$StatusLine:
 44315 00004C4F 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 44315 00004C58 207374617274757020-
 44315 00004C61 66696C65732046383D-
 44315 00004C6A 436F6E6669726D2065-
 44315 00004C73 616368206C696E6520-
 44315 00004C7C 6F6620434F4E464947-
 44315 00004C85 2E53595320         
 44316 00004C8A 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 44316 00004C93 5845432E424154205B-
 44316 00004C9C 205D24             
 44317                                  _$InterPrmpt:
 44318                                  	;db	' [Y,N]?$'
 44319                                  	; 13/04/2024
 44320                                  	; 04/08/2023
 44321 00004C9F 205B592C4E2C455343-     	db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 44321 00004CA8 5D3F24             
 44322 00004CAB 59455324                _$YES:	db	'YES$'
 44323 00004CAF 4E4F2024                _$NO:	db	'NO $'
 44324                                  _$TimeOut:
 44325 00004CB3 54696D652072656D61-     	db	'Time remaining: $'
 44325 00004CBC 696E696E673A2024   
 44326                                  badcomprmpt:
 44327                                  	;db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 44328                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 44329 00004CC4 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (for example, C:\COMMAND.COM)'
 44329 00004CCD 72656374206E616D65-
 44329 00004CD6 206F6620436F6D6D61-
 44329 00004CDF 6E6420496E74657270-
 44329 00004CE8 72657465722028666F-
 44329 00004CF1 72206578616D706C65-
 44329 00004CFA 2C20433A5C434F4D4D-
 44329 00004D03 414E442E434F4D29   
 44330 00004D0B 0D0A24                  	db	0Dh,0Ah,'$'
 44331                                  _$AutoPrmpt:
 44332 00004D0E 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 44332 00004D17 55544F455845432E42-
 44332 00004D20 4154205B592C4E5D3F-
 44332 00004D29 24                 
 44333                                  
 44334                                  ;%endif ; 02/11/2022
 44335                                  
 44336                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44337                                  ; (SYSINIT:5840h)
 44338                                  
 44339                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44340                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 44341                                  
 44342                                  TooManyDrivesMsg:
 44343 00004D2A 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 44343 00004D33 4C6F676963616C2064-
 44343 00004D3C 726976657320706173-
 44343 00004D45 74205A3A2065786973-
 44343 00004D4E 7420616E642077696C-
 44343 00004D57 6C2062652069676E6F-
 44343 00004D60 7265640D0A24       
 44344                                  
 44345                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 44346                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 44347                                  	;db	7 dup(0)
 44348                                  
 44349                                  	;times	7 db 0
 44350                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44351                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 44352                                  	; 09/12/2022
 44353                                  	;times 4 db 0
 44354                                  
 44355                                  	; 08/04/2024 - Retro DOS v5.0
 44356                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 44357                                  baddblspace:
 44358 00004D66 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 44358 00004D6F 73797374656D20636F-
 44358 00004D78 6D706F6E656E742069-
 44358 00004D81 73206E6F7420696E73-
 44358 00004D8A 74616C6C65640D0A24-
 44358 00004D93 00                 
 44359                                  	;db	7 dup(0)
 44360                                  
 44361                                  ;----------------------------------------------------------------------------
 44362                                  		; 09/12/2022
 44363                                  		;db 0
 44364                                  
 44365                                  number3div	equ ($-SYSINIT$)
 44366                                  number3mod	equ (number3div % 16)
 44367                                  
 44368                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 44369 00004D94 00<rep Ch>              		times (16-number3mod) db 0
 44370                                  %endif
 44371                                  
 44372                                  ;---------------------------------------------------------------------------- 
 44373                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 44374                                  ;---------------------------------------------------------------------------- 
 44375                                  
 44376                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 44377                                  
 44378                                  ;----------------------------------------------------------------------------
 44379                                  ; 20/04/2019 - Retro DOS v4.0
 44380                                  
 44381                                  ; 09/12/2022
 44382                                  ;
 44383                                  ;bss_start:
 44384                                  ;
 44385                                  ;ABSOLUTE bss_start
 44386                                  ;
 44387                                  ;alignb 16
 44388                                  
 44389                                  SI_end:  ; SI_end equ $
 44390                                  
 44391                                  ;----------------------------------------------------------------------------
 44392                                  
 44393                                  ;sysinitseg	ends
 44394                                  
 44395                                  ; ***************************************************************************
 44396                                  
 44397                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 44398                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 44399                                  
 44400                                  SYSINITSIZE	equ SI_end - SYSINIT$
 44401                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 44402                                  
 44403                                  ;----------------------------------------------------------------------------
 44404                                  ; End of Retro DOS v5.0 IBMBIO.COM (IO.SYS) source by Erdogan Tan (2023)
 44405                                  ;----------------------------------------------------------------------------
 44406                                  
 44407                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 44408                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 44409                                  ;----------------------------------------------------------------------------
 44410                                  ;----------------------------------------------------------------------------
 44411                                  
 44412                                  ; ----------------------------------------------------------------------------
 44413                                  ; START OF PCDOS 7.1 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 44414                                  ; ----------------------------------------------------------------------------
 44415                                  ; 02/10/2023 - Retro DOS v5.0
 44416                                  ; 03/03/2025 - MiniDOS v1.0
 44417                                  
 44418                                  ;MSDOS_BIN_OFFSET:
 44419                                  IBMDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 44420                                  		
 44421                                  		; 10/07/2024
 44422                                  		; 07/07/2024
 44423                                  		; 08/05/2024
 44424                                  		; 14/04/2024
 44425                                  		; 02/10/2023 - Retro DOS v5.0 - PCDOS 7.1 KERNEL
 44426                                  		;incbin	'IBMDOS7.BIN'
 44427                                  
 44428                                  		; 16/03/2025
 44429                                  		; 07/03/2025
 44430                                  		; 03/03/2025 - MiniDOS v1.0 - PCDOS 7.1 KERNEL
 44431 00004DA0 <bin 989Ch>             		incbin	'KERNEL.BIN'
 44432                                  
 44433                                  ; 28/09/2023	
 44434                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 44435                                  
 44436                                  align 2
 44437                                  
 44438                                  ; 21/12/2022
 44439                                  ;;END_OF_KERNEL:
 44440                                  ;END_OF_KERNEL equ $
 44441                                  
 44442                                  ; 28/09/2023
 44443                                  S3SIZE equ $-$$
 44444                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 44445                                  
 44446                                  ;=============================================================================
 44447                                  ;	END
 44448                                  ;=============================================================================
 44449                                  ; Retro DOS v5.0 by Erdogan Tan (Redevelopment of PC-DOS 7.1 KERNEL via NASM)
 44450                                  ; ------------------------------
 44451                                  ; APRIL 2024, ISTANBUL - TURKIYE.
