     1                                  ; ****************************************************************************
     2                                  ; MINIDOS.S (PCDOS 7.1 - MiniDOS 1.0 Kernel) - ERDOGAN TAN - 03/03/2025
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Modified from Retro DOS v5.0 'retrodos5.s' (17/07/2024) ((PCDOS 7.1 Kernel))
     5                                  ;
     6                                  ; Last Update: 16/03/2025
     7                                  ;
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	   ((nasm retrodos5.s -l retrodos5.txt -o PCDOS.SYS -Z error.txt))
    12                                  ; ---------------------------------------------------------------------------- 
    13                                  ; Included binary file: KERNEL.BIN (MiniDOS 1.0 - Kernel file) 
    14                                  ; ****************************************************************************
    15                                  
    16                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    17                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    18                                  ; as below:
    19                                  ;
    20                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    21                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    22                                  ;
    23                                  ;    2) Labels, names, comments, explanations and structure definitions
    24                                  ;	about procedures and code details are almost entirely taken from
    25                                  ;	the original MSDOS 6.0 source code, except for the details that
    26                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    27                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    28                                  ;	the originality of the descriptions.)
    29                                  ;
    30                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    31                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    32                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    33                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    34                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    35                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    36                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    37                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    38                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    39                                  ;	than the original PCDOS/MSDOS. It does not include 
    40                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    41                                  ;	files are almost identical except their INIT codes.)
    42                                  ;
    43                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    44                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    45                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    46                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    47                                  		
    48                                  ; ----------------------------------------------------------------------------
    49                                  
    50                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    51                                  ;
    52                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    53                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    54                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    55                                  ;
    56                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    57                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    58                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    59                                  ; 		
    60                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    61                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    62                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    63                                  
    64                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    65                                  ;     (as included binary, 'IOSYS5.BIN') 
    66                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    67                                  ;						        (except MSLOAD code)
    68                                        
    69                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    70                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    71                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    72                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    73                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    74                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    75                                  
    76                                  ; ----------------------------------------------------------------------------
    77                                  
    78                                  ;=============================================================================
    79                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    80                                  ; by Erdogan Tan, 10/09/2018
    81                                  ;=============================================================================
    82                                  
    83                                  ; MSBIO (IO.SYS 6.0) source files:
    84                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    85                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    86                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    87                                  
    88                                  ;=============================================================================
    89                                  ; MSBIO
    90                                  ;=============================================================================
    91                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    92                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    93                                  ;msend,msbio,msbio;
    94                                  
    95                                  ;=============================================================================
    96                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    97                                  ;=============================================================================
    98                                  
    99                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
   100                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
   101                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
   102                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
   103                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
   104                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
   105                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
   106                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
   107                                  
   108                                  ;(*) unfinished, draft, canceled (failed in 2019)
   109                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
   110                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
   111                                  
   112                                  ;Disassembly: (reverse engineering via IDA Pro Free)
   113                                  
   114                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
   115                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
   116                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
   117                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
   118                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
   119                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
   120                                  
   121                                  ;-----------------------------------------------------------------------------
   122                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
   123                                  ;-----------------------------------------------------------------------------
   124                                  
   125                                  SECTOR_SIZE     equ     0200h		; size of a sector
   126                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
   127                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
   128                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
   129                                  KEYBUF          equ     041Eh		; keyboard buffer data
   130                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
   131                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
   132                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
   133                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
   134                                  
   135                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
   136                                  ; The following structure defines the disk parameter table
   137                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   138                                  
   139                                  struc	DISK_PARMS
   140 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   141 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   142 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   143 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   144 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   145 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   146 00000006 ??                      .DISK_DTL:	  resb	1
   147 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   148 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   149 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   150 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   151                                  .size:
   152                                  endstruc
   153                                  
   154                                  ; 09/03/2019 - Retro DOS v4.0
   155                                  ; -------------------------------------------------------------------------
   156                                  ; MSEQU.INC, MSDOS 6.0, 1991
   157                                  
   158                                  ftoobig 	equ	80h
   159                                  fbig		equ	40h
   160                                  ; 12/09/2023
   161                                  fbigbig		equ	20h  ; Retro DOS 5.0 ; PCDOS 7.1 ; FAT32 FS flag
   162                                  romstatus	equ	1
   163                                  romread 	equ	2
   164                                  romwrite	equ	3
   165                                  romverify	equ	4
   166                                  romformat	equ	5
   167                                  
   168                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   169                                  ; -------------------------------------------------------------------------
   170                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   171                                  ;
   172                                  ;  BDS is the Bios Data Structure.
   173                                  ;
   174                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   175                                  ;  are linked together in a list with the pointer to the first BDS being
   176                                  ;  found in START_BDS. The BDS hold various values important to the disk
   177                                  ;  drive. For example there is a field for last time accesses. As actions
   178                                  ;  take place in the system the BDS are update to reflect the actions.
   179                                  ;  For example is there is a read to a disk the last access field for the
   180                                  ;  BDS for that drive is update to the current time.
   181                                  ;
   182                                  ; Values for various flags in BDS.flags.
   183                                  ;
   184                                  
   185                                  fnon_removable	    equ     01h 	;For non-removable media
   186                                  fchangeline	    equ     02h 	;If changeline supported on drive
   187                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   188                                  					; just return the fake one
   189                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   190                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   191                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   192                                  fchanged	    equ     40h 	;Indicates media changed
   193                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   194                                  fchanged_by_format  equ    100h		;Media changed by format
   195                                  ; MSDOS 6.0
   196                                  unformatted_media   equ    200h 	;Fixed disk only
   197                                  
   198                                  ;
   199                                  ; Various form factors to describe media
   200                                  ;
   201                                  
   202                                  ff48tpi 	    equ     0
   203                                  ff96tpi 	    equ     1
   204                                  ffSmall 	    equ     2
   205                                  ffHardFile	    equ     5
   206                                  ffOther 	    equ     7
   207                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   208                                  ff288		    equ     9	; 2.88 MB drive
   209                                  ; Retro DOS v4.0 feature only !
   210                                  ;ff144		    equ	   10	; 1.44 MB drive
   211                                  
   212                                  ; 12/09/2023
   213                                  ; Retro DOS v4 (MDOS 5.0-6.22) BDS structure
   214                                  ; -------------------------------------------------------------------------
   215                                  ; 100 bytes
   216                                   
   217                                  %if 0
   218                                  
   219                                  ; 26/05/2019
   220                                  
   221                                  struc	BDS	; BDS_Type
   222                                  .link:		resd 1		; Link to next BDS
   223                                  .drivenum:	resb 1		; Physical drive number
   224                                  .drivelet:	resb 1		; DOS drive number
   225                                  
   226                                  	;We want to embed a BPB declaration here, but we can't initialize
   227                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   228                                  	;of the BPB declaration.
   229                                  .BPB:	
   230                                  .bytespersec:	resw 1		; bytes per sectors ; def = 512
   231                                  .secperclus:	resb 1		; sectors per cluster
   232                                  .resectors:	resw 1		; reserved sectors
   233                                  .fats:		resb 1		; number of fats
   234                                  .direntries:	resw 1		; number of root directory entries
   235                                  .totalsecs16:	resw 1		; total sectors on medium
   236                                  .media:		resb 1		; media descriptor byte ; def = 0F8h
   237                                  .fatsecs: 	resw 1		; number of fat sectors
   238                                  .secpertrack:	resw 1		; sectors per track
   239                                  .heads:		resw 1		; number of heads
   240                                  ;.hiddensecs:	resw 1		; hidden sectors
   241                                  ; MSDOS 6.0
   242                                  .hiddensecs:	resd 1		; hidden sectors
   243                                  .totalsecs32:	resd 1		; big total sectors
   244                                  ;
   245                                  .fatsiz:	resb 1		; flags...
   246                                  .opcnt:		resw 1		; open ref. count
   247                                  ;.volid:	resb 12		; volume ID of medium
   248                                  .formfactor:	resb 1		; form factor index
   249                                  .flags:		resw 1		; various flags ; def: 0020h
   250                                  .cylinders:	resw 1		; number of cylinders
   251                                  ;
   252                                  .R_BPB:  			; recommended BPB
   253                                  .rbytespersec:	resw 1
   254                                  .rsecperclus:	resb 1
   255                                  .rresectors: 	resw 1
   256                                  .rfats:		resb 1
   257                                  .rdirentries:	resw 1
   258                                  .rtotalsecs16:	resw 1
   259                                  .rmedia: 	resb 1
   260                                  .rfatsecs:	resw 1
   261                                  .rsecpertrack: 	resw 1
   262                                  .rheads:	resw 1
   263                                  .rhidsecs: 	resd 1
   264                                  .rtotalsecs32: 	resd 1
   265                                  .rreserved:	resb 6		; not used (reserved)
   266                                  ;
   267                                  .track:		resb 1		; last track accessed on drive
   268                                  .bdsm_ismini:
   269                                  .tim_lo:	resw 1		; time of last access. keep
   270                                  .bdsm_hidden_trks:
   271                                  .tim_hi:	resw 1		; these contiguous.
   272                                  .volid:		resb 12		; volume id of medium
   273                                  	       ;db "NO NAME    ",0
   274                                  .vol_serial:	resd 1	; current volume serial number from boot record
   275                                  .filesys_id:	resb 9	; current file system id from boot record
   276                                  	       ;db "FAT12   ",0
   277                                  .size:	
   278                                  endstruc
   279                                  
   280                                  %endif
   281                                  
   282                                  ; 12/09/2023 - Retro DOS 5.0 - PCDOS 7.1 (FAT32 compatible) BDS structure
   283                                  ; -------------------------------------------------------------------------
   284                                  ; 150 bytes
   285                                  
   286                                  %if 1
   287                                  
   288                                  struc	BDS	; BDS_Type
   289 00000000 ????????                .link:		resd 1		; Link to next BDS
   290 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   291 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   292                                  
   293                                  	;We want to embed a BPB declaration here, but we can't initialize
   294                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   295                                  	;of the BPB declaration.
   296                                  .BPB:	
   297 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   298 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   299 00000009 ????                    .resectors:	resw 1		; reserved sectors
   300 0000000B ??                      .fats:		resb 1		; number of fats
   301 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   302 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   303 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   304 00000011 ????                    .fatsecs16: 	resw 1		; number of fat sectors
   305 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   306 00000015 ????                    .heads:		resw 1		; number of heads
   307 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors
   308 0000001B ????????                .totalsecs32:	resd 1		; big total sectors
   309                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0 -----------
   310 0000001F ????????                .fatsecs32:	resd 1		; BPB_FATSz32   ; FAT32 FAT size in sectors
   311 00000023 ????                    .extflags:	resw 1		; BPB_ExtFlags  ; FAT32 Extended Flags
   312 00000025 ????                    .fsver:		resw 1		; BPB_FSVer	; FAT32 volume version number
   313 00000027 ????????                .rootdirclust:	resd 1		; BPB_RootClus  ; FAT32 root dir's 1st clust num
   314 0000002B ????                    .fsinfo:	resw 1		; BPB_FSInfo	; FAT32 FSINFO sector number
   315 0000002D ????                    .bkbootsec:	resw 1		; BPB_BkBootSec ; FAT32 backup boot sector number
   316 0000002F <res Ch>                .reserved:	resb 12		; BPB_Reserved	; FAT32 reserved field = 0, 12 bytes
   317                                  ; -----------------------------------------------
   318 0000003B ??                      .fatsiz:	resb 1		; flags...
   319 0000003C ????                    .opcnt:		resw 1		; open ref. count
   320 0000003E ??                      .formfactor:	resb 1		; form factor index
   321 0000003F ????                    .flags:		resw 1		; various flags ; def: 0020h
   322 00000041 ????                    .cylinders:	resw 1		; number of cylinders
   323                                  ;
   324                                  .R_BPB:  			; recommended BPB
   325 00000043 ????                    .rbytespersec:	resw 1		
   326 00000045 ??                      .rsecperclus:	resb 1
   327 00000046 ????                    .rresectors: 	resw 1
   328 00000048 ??                      .rfats:		resb 1
   329 00000049 ????                    .rdirentries:	resw 1
   330 0000004B ????                    .rtotalsecs16:	resw 1
   331 0000004D ??                      .rmedia: 	resb 1
   332 0000004E ????                    .rfatsecs:	resw 1
   333 00000050 ????                    .rsecpertrack: 	resw 1
   334 00000052 ????                    .rheads:	resw 1
   335 00000054 ????????                .rhidsecs: 	resd 1
   336 00000058 ????????                .rtotalsecs32: 	resd 1
   337                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0
   338 0000005C ????????                .rfatsecs32:	resd 1		; 
   339 00000060 ????                    .rextflags:	resw 1		; 
   340 00000062 ????                    .rfsver:	resw 1		; 
   341 00000064 ????????                .rrootdirclust:	resd 1		; 
   342 00000068 ????                    .rfsinfo:	resw 1		; default/initial value = -1
   343 0000006A ????                    .rbkbootsec:	resw 1		; default/initial value = -1
   344 0000006C <res Ch>                .rreserved:	resb 12		; default value = 0
   345                                  ; -----------------------------------------------
   346                                  ;
   347 00000078 ??                      .track:		resb 1		; last track accessed on drive (def=-1)
   348                                  .bdsm_ismini:
   349 00000079 ????                    .tim_lo:	resw 1		; time of last access. keep
   350                                  .bdsm_hidden_trks:
   351 0000007B ????                    .tim_hi:	resw 1		; these contiguous.
   352 0000007D <res Ch>                .volid:		resb 12		; volume id of medium
   353                                  	       ;db "NO NAME    ",0
   354 00000089 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   355 0000008D <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   356                                  	       ;db "FAT12   ",0
   357                                  .size:
   358                                  endstruc
   359                                  
   360                                  %endif
   361                                  ; -------------------------------------------------------------------------
   362                                  
   363                                  ;The assembler will generate bad data for "size bds_volid",
   364                                  ;so we'll define an equate here.
   365                                  
   366                                  VOLID_SIZ	equ	12
   367                                  
   368                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   369                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   370                                  
   371                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   372                                  
   373                                  ; 29/12/2018
   374                                  ; Retro DOS v4.0
   375                                  ;
   376                                  ; MSDOS 6.0 - BOOTFORM.INC
   377                                  
   378                                  BOOT_SIZE	    EQU	 512
   379                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   380                                  
   381                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   382                                  
   383                                  struc EBPB ; EXT_BPB_INFO
   384 00000000 ????                    .BYTESPERSECTOR:    resw 1
   385 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   386 00000003 ????                    .RESERVEDSECTORS:   resw 1
   387 00000005 ??                      .NUMBEROFFATS:	    resb 1
   388 00000006 ????                    .ROOTENTRIES:	    resw 1
   389 00000008 ????                    .TOTALSECTORS:	    resw 1
   390 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   391 0000000B ????                    .SECTORSPERFAT:	    resw 1
   392 0000000D ????                    .SECTORSPERTRACK:   resw 1
   393 0000000F ????                    .HEADS:		    resw 1
   394 00000011 ????????                .HIDDENSECTORS:	    resd 1
   395 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   396                                  .size:
   397                                  endstruc
   398                                  
   399                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   400                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   401 00000000 ??????                  .JUMP:		resb 3
   402 00000003 ????????????????        .OEM:		resb 8
   403 0000000B <res 19h>               .BPB:		resb EBPB.size ; 25 bytes
   404 00000024 ??                      .PHYDRV:	resb 1
   405 00000025 ??                      .CURHD:		resb 1
   406 00000026 ??                      .SIG:		resb 1
   407 00000027 ????????                .SERIAL:	resd 1
   408 0000002B <res Bh>                .VOL_LABEL:	resb 11
   409 00000036 ????????????????        .SYSTEM_ID:	resb 8
   410                                  .size:
   411                                  endstruc
   412                                  
   413                                  ; 12/09/2023
   414                                  ; ----------------------------
   415                                  ; Retro DOS v5.0 (PCDOS 7.1) - FAT32 Boot Sector Parameters
   416                                  
   417                                  struc XBPB ; FAT32_BPB_INFO ; 12/09/2023
   418 00000000 ????                    .BYTESPERSECTOR:    resw 1
   419 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   420 00000003 ????                    .RESERVEDSECTORS:   resw 1
   421 00000005 ??                      .NUMBEROFFATS:	    resb 1
   422 00000006 ????                    .ROOTENTRIES:	    resw 1
   423 00000008 ????                    .TOTALSECTORS:	    resw 1
   424 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   425 0000000B ????                    .SECTORSPERFAT:	    resw 1
   426 0000000D ????                    .SECTORSPERTRACK:   resw 1
   427 0000000F ????                    .HEADS:		    resw 1
   428 00000011 ????????                .HIDDENSECTORS:	    resd 1
   429 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   430                                  ;............ FAT32 ......  + 28
   431 00000019 ????????                .FATSIZE32:	    resd 1
   432 0000001D ????                    .EXTFLAGS:	    resw 1
   433 0000001F ????                    .FSVER:		    resw 1
   434 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   435 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   436 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   437 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   438                                  .size:
   439                                  endstruc
   440                                  
   441                                  struc FAT32_EXT_BOOT ; FAT32_IBMBOOT_HEADER ; 12/09/2023
   442 00000000 ??????                  .JUMP:		resb 3
   443 00000003 ????????????????        .OEM:		resb 8
   444 0000000B <res 35h>               .BPB:		resb XBPB.size ; 53 bytes (25+28)
   445 00000040 ??                      .PHYDRV:	resb 1
   446 00000041 ??                      .CURHD:		resb 1
   447 00000042 ??                      .SIG:		resb 1
   448 00000043 ????????                .SERIAL:	resd 1
   449 00000047 <res Bh>                .VOL_LABEL:	resb 11
   450 00000052 ????????????????        .SYSTEM_ID:	resb 8
   451                                  .size:
   452                                  endstruc
   453                                  
   454                                  ; ----------------------------
   455                                  
   456                                  ; 23/03/2018
   457                                  
   458                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   459                                  STRUC SRHEAD
   460 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   461 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   462 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   463 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   464 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   465                                  .size:
   466                                  endstruc
   467                                  
   468                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   469                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   470                                  ;
   471                                  struc IOCTL_REQ
   472 00000000 <res Dh>                		resb SRHEAD.size	
   473                                  			    	;GENERIC IOCTL ADDITION.
   474 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   475 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   476 0000000F ????                    .REG_SI:	resw 1
   477 00000011 ????                    .REG_DI:	resw 1
   478 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   479                                  endstruc
   480                                  
   481                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   482                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   483                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   484                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   485                                  IOC_SC		EQU	3	; SCREEN CONTROL
   486                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   487                                  IOC_PC		EQU	5	; PRINTER CONTROL
   488                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   489                                  
   490                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   491                                  GEN_IOCTL_WRT_TRK   EQU   40H
   492                                  GEN_IOCTL_RD_TRK    EQU   60H
   493                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   494                                  
   495                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   496                                  ;.RC_COUNT:	resw 	1
   497                                  ;endstruc
   498                                  
   499                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   500                                  
   501                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   502                                  
   503                                  ;struc SYSDEV
   504                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   505                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   506                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   507                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   508                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   509                                  ; .size:
   510                                  ;endstruc
   511                                  
   512                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   513                                  
   514                                  ;
   515                                  ; ATTRIBUTE BIT MASKS
   516                                  ;
   517                                  ; CHARACTER DEVICES:
   518                                  ;
   519                                  ; BIT 15 -> MUST BE 1
   520                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   521                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   522                                  ;     12 -> UNUSED
   523                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   524                                  ;     10 -> MUST BE 0
   525                                  ;      9 -> MUST BE 0
   526                                  ;      8 -> UNUSED
   527                                  ;      7 -> UNUSED
   528                                  ;      6 -> UNUSED
   529                                  ;      5 -> UNUSED
   530                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   531                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   532                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   533                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   534                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   535                                  ;
   536                                  ; BLOCK DEVICES:
   537                                  ;
   538                                  ; BIT 15 -> MUST BE 0
   539                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   540                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   541                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   542                                  ;	    THE SAME PLACE.
   543                                  ;     12 -> UNUSED
   544                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   545                                  ;     10 -> MUST BE 0
   546                                  ;      9 -> MUST BE 0
   547                                  ;      8 -> UNUSED
   548                                  ;      7 -> UNUSED
   549                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   550                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   551                                  ;      5 -> UNUSED
   552                                  ;      4 -> UNUSED
   553                                  ;      3 -> UNUSED
   554                                  ;      2 -> UNUSED
   555                                  ;      1 -> UNUSED
   556                                  ;      0 -> UNUSED
   557                                  ;
   558                                  
   559                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   560                                  CHARDEV        EQU   8000H
   561                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   562                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   563                                  				    ;  COMP MEDIA.
   564                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   565                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   566                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   567                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   568                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   569                                  				    ;  ENTRY POINTS, 0 IF NOT
   570                                  
   571                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   572                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   573                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   574                                  				    ;  ITS CURRENT FORM.
   575                                  
   576                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   577                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   578                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   579                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   580                                  
   581                                  ; 18/03/2019 - Retro DOS v4.0
   582                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   583                                  
   584                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   585                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   586                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   587                                  				    ;GENERIC IOCTL CALLS.
   588                                  				    ;FOR CHARACTER DEVICES, THIS
   589                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   590                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   591                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   592                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   593                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   594                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   595                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   596                                  ; 23/07/2019 - Retro DOS v4.0
   597                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   598                                  
   599                                  ; 27/05/2018 - Retro DOS v3.0 
   600                                  ; [MSDOS 3.3, MSDISK.ASM]
   601                                  
   602                                  struc INT13FRAME
   603 00000000 ????                    .oldbp:	resw 1
   604 00000002 ????                    .oldax:	resw 1
   605 00000004 ????                    .oldbx:	resw 1
   606 00000006 ????                    .oldcx:	resw 1
   607 00000008 ????                    .olddx:	resw 1
   608 0000000A ????????                .olddd:	resd 1
   609 0000000E ????                    .oldf:	resw 1
   610                                  .size:
   611                                  endstruc
   612                                  
   613                                  ; 02/06/2018 - Retro DOS v3.0
   614                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   615                                  
   616                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   617 00000000 ????                    .bios_sd_leng:		resw 1				  
   618 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   619                                  .bios_sd_scnd_modelbyte: 
   620 00000003 ??                      			resb 1					  
   621 00000004 ??                      			resb 1					  
   622 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   623 00000006 ????????                			resb 4					  
   624                                  endstruc
   625                                  
   626                                  ;-----------------------------------------------------------------------------
   627                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   628                                  ;-----------------------------------------------------------------------------
   629                                  ; 11/03/2019 - Retro DOS v4.0
   630                                  
   631                                  ; 18/03/2019
   632                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   633                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   634                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   635                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   636                                  					  ; or system turns
   637                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   638                                  ; ............................................................................
   639                                  
   640                                  ;*** J.K.
   641                                  ;General Guide -
   642                                  ;Category Code:
   643                                  ; 0... .... DOS Defined
   644                                  ; 1... .... User defined
   645                                  ; .xxx xxxx Code
   646                                  
   647                                  ;Function Code:
   648                                  ; 0... .... Return error if unsupported
   649                                  ; 1... .... Ignore if unsupported
   650                                  ; .0.. .... Intercepted by DOS
   651                                  ; .1.. .... Passed to driver
   652                                  ; ..0. .... Sends data/commands to device
   653                                  ; ..1. .... Quries data/info from device
   654                                  ; ...x .... Subfunction
   655                                  ;
   656                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   657                                  ; function set.  It plays no critical role; some functions may contain both
   658                                  ; command and query elements. The convention is that such commands are
   659                                  ; defined as "sends data".
   660                                  
   661                                  ;*****************************;*
   662                                  ; BLOCK DRIVERS 	      ;*
   663                                  ;*****************************;*
   664                                  
   665                                  ; IOCTL SUB-FUNCTIONS
   666                                  IOCTL_GET_DEVICE_INFO	EQU	0
   667                                  IOCTL_SET_DEVICE_INFO	EQU	1
   668                                  IOCTL_READ_HANDLE	EQU	2
   669                                  IOCTL_WRITE_HANDLE	EQU	3
   670                                  IOCTL_READ_DRIVE	EQU	4
   671                                  IOCTL_WRITE_DRIVE	EQU	5
   672                                  IOCTL_GET_INPUT_STATUS	EQU	6
   673                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   674                                  IOCTL_CHANGEABLE?	EQU	8
   675                                  IOCTL_DeviceLocOrRem?	EQU	9
   676                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   677                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   678                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   679                                  GENERIC_IOCTL		EQU	0Dh   ;13
   680                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   681                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   682                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   683                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   684                                  
   685                                  ; GENERIC IOCTL SUB-FUNCTIONS
   686                                  RAWIO			EQU	8
   687                                  
   688                                  ; RAWIO SUB-FUNCTIONS
   689                                  GET_DEVICE_PARAMETERS	EQU	60H
   690                                  SET_DEVICE_PARAMETERS	EQU	40H
   691                                  READ_TRACK		EQU	61H
   692                                  WRITE_TRACK		EQU	41H
   693                                  VERIFY_TRACK		EQU	62H
   694                                  FORMAT_TRACK		EQU	42H
   695                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   696                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   697                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   698                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   699                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   700                                  
   701                                  
   702                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   703                                  BUILD_DEVICE_BPB	EQU	000000001B
   704                                  
   705                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   706                                  INSTALL_FAKE_BPB	EQU	000000001B
   707                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   708                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   709                                  
   710                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   711                                  STATUS_FOR_FORMAT	EQU	000000001B
   712                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   713                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   714                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   715                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   716                                  
   717                                  ; DEVICETYPE VALUES
   718                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   719                                  DEV_5INCH		EQU	0
   720                                  DEV_5INCH96TPI		EQU	1
   721                                  DEV_3INCH720KB		EQU	2
   722                                  DEV_8INCHSS		EQU	3
   723                                  DEV_8INCHDS		EQU	4
   724                                  DEV_HARDDISK		EQU	5
   725                                  DEV_OTHER		EQU	7
   726                                  ;DEV_3INCH1440KB	EQU	7
   727                                  DEV_3INCH2880KB		EQU	9
   728                                  ; Retro DOS v2.0 - 26/03/2018
   729                                  ;;DEV_TAPE		EQU	6
   730                                  ;;DEV_ERIMO		EQU	8
   731                                  ;DEV_3INCH2880KB	EQU	9
   732                                  DEV_3INCH1440KB		EQU	10
   733                                  
   734                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   735                                  					; CURRENTLY SUPPORT.
   736                                  MAX_DEV_TYPE		EQU	10
   737                                  
   738                                  struc A_SECTORTABLE
   739 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   740 00000002 ????                    .ST_SECTORSIZE:		resw	1
   741                                  .size:
   742                                  endstruc
   743                                  
   744                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
   745                                  
   746                                  ; MSDOS 6.0 - BPB.INC - 1991
   747                                  ; ####
   748                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   749                                  ;
   750                                  ;	The BPB contains information about the disk structure.  It dates
   751                                  ;	back to the earliest FAT systems and so FAT information is
   752                                  ;	intermingled with physical driver information.
   753                                  ;
   754                                  ;	A boot sector contains a BPB for its device; for other disks
   755                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   756                                  ;	information in the DPB.
   757                                  ;
   758                                  ;	The BDS structure contains a BPB within it.
   759                                  
   760                                  ; 01/01/2024
   761                                  %if 0
   762                                  
   763                                  struc A_BPB
   764                                  .BPB_BYTESPERSECTOR:	resw	1
   765                                  .BPB_SECTORSPERCLUSTER:	resb	1
   766                                  .BPB_RESERVEDSECTORS:	resw	1
   767                                  .BPB_NUMBEROFFATS:	resb	1
   768                                  .BPB_ROOTENTRIES: 	resw	1
   769                                  .BPB_TOTALSECTORS:	resw	1
   770                                  .BPB_MEDIADESCRIPTOR:	resb	1
   771                                  .BPB_SECTORSPERFAT:	resw	1
   772                                  .BPB_SECTORSPERTRACK:	resw	1
   773                                  .BPB_HEADS:		resw	1
   774                                  .BPB_HIDDENSECTORS:	resw	1
   775                                  			resw	1
   776                                  .BPB_BIGTOTALSECTORS:	resw	1
   777                                  			resw	1
   778                                  			resb	6	; NOTE:  many times these
   779                                  ;					; 	 6 bytes are omitted
   780                                  ;					;	 when BPB manipulations
   781                                  ;					;	 are performed!
   782                                  .size:
   783                                  endstruc
   784                                  
   785                                  %else
   786                                  
   787                                  ; 14/04/2024
   788                                  ; 01/01/2024 - Retro DOS v5.0
   789                                  
   790                                  struc A_BPB
   791 00000000 ????                    .BYTESPERSECTOR:    resw 1
   792 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   793 00000003 ????                    .RESERVEDSECTORS:   resw 1
   794 00000005 ??                      .NUMBEROFFATS:	    resb 1
   795 00000006 ????                    .ROOTENTRIES:	    resw 1
   796 00000008 ????                    .TOTALSECTORS:	    resw 1
   797 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   798 0000000B ????                    .SECTORSPERFAT:	    resw 1
   799 0000000D ????                    .SECTORSPERTRACK:   resw 1
   800 0000000F ????                    .HEADS:		    resw 1
   801 00000011 ????????                .HIDDENSECTORS:	    resd 1
   802 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   803                                  ;............ FAT32 ......  + 28
   804 00000019 ????????                .FATSIZE32:	    resd 1
   805 0000001D ????                    .EXTFLAGS:	    resw 1
   806 0000001F ????                    .FSVER:		    resw 1
   807 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   808 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   809 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   810 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   811                                  		; 14/04/2024
   812 00000035 ????????????            		    resb 6  ; A_BPB.size must be 59
   813                                  .size:
   814                                  endstruc
   815                                  
   816                                  %endif
   817                                  
   818                                  struc A_DEVICEPARAMETERS
   819 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   820 00000001 ??                      .DP_DEVICETYPE:		resb	1
   821 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   822 00000004 ????                    .DP_CYLINDERS:		resw	1
   823 00000006 ??                      .DP_MEDIATYPE:		resb	1
   824 00000007 <res 3Bh>               .DP_BPB:		resb	A_BPB.size
   825 00000042 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   826 00000044 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   827                                  endstruc
   828                                  
   829                                  struc A_TRACKREADWRITEPACKET
   830 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   831 00000001 ????                    .TRWP_HEAD:		resw	1
   832 00000003 ????                    .TRWP_CYLINDER:		resw	1
   833 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   834 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   835 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   836                                  endstruc
   837                                  
   838                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   839                                  struc A_FORMATPACKET
   840 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   841 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   842 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   843 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   844                                  endstruc
   845                                  
   846                                  struc A_VERIFYPACKET
   847 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   848 00000001 ????                    .VP_HEAD: 		resw	1
   849 00000003 ????                    .VP_CYLINDER:		resw	1
   850                                  endstruc
   851                                  
   852                                  struc A_MEDIA_ID_INFO
   853 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   854 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   855 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   856 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   857                                  endstruc
   858                                  
   859                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   860 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   861 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   862                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   863                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   864                                  
   865                                  
   866                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   867 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   868 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   869 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   870 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   871                                  endstruc
   872                                  
   873                                  ;********************************;*
   874                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   875                                  ;********************************;*
   876                                  
   877                                  ;RAWIO SUB-FUNCTIONS
   878                                  GET_RETRY_COUNT 	EQU	65H
   879                                  SET_RETRY_COUNT 	EQU	45H
   880                                  
   881                                  struc A_RETRYCOUNT
   882 00000000 ????                    .RC_COUNT:		resw 1
   883                                  endstruc
   884                                  
   885                                  ;********************************;*		;J.K. 4/29/86
   886                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   887                                  ;********************************;*		;J.K. 4/29/86
   888                                  ;
   889                                  ;SC_MODE_INFO	 struc
   890                                  ;SC_INFO_LENGTH 	 DW	 9
   891                                  ;SC_MODE		 DB	 0
   892                                  ;SC_COLORS		 DW	 0
   893                                  ;SC_WIDTH		 DW	 0
   894                                  ;SC_LENGTH		 DW	 0
   895                                  ;SC_MODE_INFO	 ends
   896                                  ;
   897                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   898                                  
   899                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   900                                  ;GET_SC_MODE		 EQU	 60h
   901                                  ;SET_SC_MODE		 EQU	 40h
   902                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   903                                  ;console devices. - J.K. 4/29/86
   904                                  ;Get_active_codepage	 equ	 6Ah
   905                                  ;Invoke_active_codepage  equ	 4Ah
   906                                  ;Start_designate_codepage equ	 4Ch
   907                                  ;End_designate_codepage  equ	 4Dh
   908                                  ;Get_list_of_designated_codepage equ 6Bh
   909                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   910                                  
   911                                  ;-----------------------------------------------------------------------------
   912                                  ; MULT.INC - MSDOS 6.0 - 1991
   913                                  ;-----------------------------------------------------------------------------
   914                                  ; 18/03/2019
   915                                  
   916                                  ; The current set of defined multiplex channels is (* means documented):
   917                                  ;
   918                                  ;   Channel(h)  Issuer          Receiver    Function
   919                                  ;      00       server          PSPRINT     print job control
   920                                  ;     *01       print/apps      PRINT       Queueing of files
   921                                  ;      02       BIOS            REDIR       signal open/close of printers
   922                                  ;
   923                                  ;      05       command         REDIR       obtain text of net int 24 message
   924                                  ;     *06       server/assign   ASSIGN      Install check
   925                                  ;
   926                                  ;      08       external driver IBMBIO      interface to internal routines
   927                                  ;
   928                                  ;      10       sharer/server   Sharer      install check
   929                                  ;      11       DOS/server      Redir       install check/redirection funcs
   930                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   931                                  ;      13       MSNET           MSNET       movement of NCBs
   932                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   933                                  ;                                           of alternative INT_13 drivers after
   934                                  ;                                           boot_up
   935                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   936                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   937                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   938                                  ;      16       WIN386          WIN386      Windows communications
   939                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   940                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   941                                  ;      19       Shell
   942                                  ;      1A       Ansi.sys
   943                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   944                                  ;
   945                                  ;      40h      OS/2
   946                                  ;      41h      Lanman
   947                                  ;      42h      Lanman
   948                                  ;      43h      Himem
   949                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   950                                  ;                               AL = 30h    reserved for Himem external A20 code
   951                                  ;      44h      Dosextender
   952                                  ;      45H      Windows profiler
   953                                  ;      46h      Windows/286 DOS extender
   954                                  ;      47h      Basic Compiler Vn. 7.0
   955                                  ;      48h      Doskey
   956                                  ;      49h      DOS 5.x install 
   957                                  ;      4Ah      Multi Purpose
   958                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   959                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   960                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   961                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   962                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   963                                  ;
   964                                  ;                multSmartdrv           10h
   965                                  ;                multMagicdrv           11h
   966                                  ;      4Bh      Task Switcher API
   967                                  ;
   968                                  ;      4Ch      APPS            APM             Advanced power management
   969                                  ;      4Dh      Kana Kanji Converter, MSKK
   970                                  ;
   971                                  ;      51h      ODI real mode support driver (for Chicago)
   972                                  ;
   973                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   974                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   975                                  ;
   976                                  ;      55h      COMMAND.COM
   977                                  ;                multCOMFIRST           0 - API to determine whether 1st
   978                                  ;                                           instance of command.com
   979                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   980                                  ;                                           instance of ROM COMMAND
   981                                  ;      56h      Sewell Development
   982                                  ;               INTERLNK
   983                                  ;
   984                                  ;      57h      Iomega Corp.
   985                                  ;
   986                                  ;      AB       Unspecified IBM use
   987                                  ;      AC       Graphics
   988                                  ;      AD       NLS (toronto)
   989                                  ;      AE
   990                                  ;      AF       Mode
   991                                  ;      B0       GRAFTABL        GRAFTABL
   992                                  ;
   993                                  ;      D7       Banyan VINES
   994                                  
   995                                  multMULT	  equ	4Ah
   996                                  
   997                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   998                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   999                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
  1000                                  multMULTTASKSHELL equ	5	; Shell/switcher API
  1001                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
  1002                                  
  1003                                  ;-----------------------------------------------------------------------------
  1004                                  ; WIN386.INC - MSDOS 6.0 - 1991
  1005                                  ;-----------------------------------------------------------------------------
  1006                                  ; 18/03/2019
  1007                                  
  1008                                  ; WIN386.INC
  1009                                  ;
  1010                                  ;  Symbols and structures relating to WIN386 support.
  1011                                  ;
  1012                                  ;  Used by files in both the DOS and the BIOS.
  1013                                  ;
  1014                                  ;  Created: 7-13-89 by MRW
  1015                                  ;
  1016                                  
  1017                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  1018                                  
  1019                                  MultWin386		equ     16h	; Int 2f multiplex number
  1020                                  
  1021                                  Win386_Init		equ	05h	; Win386 initialization
  1022                                  Win386_Exit		equ	06h	; Win386 exit
  1023                                  Win386_Devcall		equ	07h	; Win386 device call out
  1024                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  1025                                  
  1026                                  ; ============================================================================
  1027                                  
  1028                                  ;-----------------------------------------------------------------------------
  1029                                  ;
  1030                                  ; +-------------------------------------------------------------------------+
  1031                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
  1032                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
  1033                                  ; |			 Licensed to: Freeware version			    |
  1034                                  ; +-------------------------------------------------------------------------+
  1035                                  ;
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038                                  ;		.386
  1039                                  ;		.model flat
  1040                                  
  1041                                  ; ============================================================================
  1042                                  
  1043                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1044                                  ; 10/12/2022
  1045                                  ; 09/12/2022
  1046                                  ; 21/10/2022
  1047                                  ; 19/10/2022
  1048                                  ; 17/10/2022, 18/10/2022
  1049                                  ; 15/10/2022, 16/10/2022
  1050                                  ; 03/10/2022
  1051                                  ; 02/10/2022
  1052                                  ; 01/10/2022 - Erdogan Tan
  1053                                  
  1054                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
  1055                                  
  1056                                  ;-----------------------------------------------------------------------------
  1057                                  ; Start of PC-DOS 7.1 IBMBIO.COM  (IO.SYS)
  1058                                  ;-----------------------------------------------------------------------------
  1059                                  
  1060                                  		; [ORG 0]		; segment 0x0070h
  1061                                  
  1062                                  ;=============================================================================
  1063                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  1064                                  ;=============================================================================
  1065                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  1066                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  1067                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  1068                                  
  1069                                  section .BIOSDATA vstart=0
  1070                                  
  1071                                  ;--- DOSBIOS data segment ----------------------------------------------------
  1072                                  ;-----------------------------------------------------------------------------
  1073                                  
  1074                                  ;Bios_Data segment
  1075                                  
  1076                                  BData_start:
  1077 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  1078                                  ; ----------------------------------------------------------------------------
  1079                                  
  1080 00000003 0000                    DosDataSg:	dw 0
  1081                                  
  1082                                  ; DOS's int 2f handler will exit via a jump through here.
  1083                                  ; This is how the BIOS hooks int2f
  1084                                  
  1085                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  1086                                  			
  1087 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  1088                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1089                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  1090                                  		;dw int_2f
  1091                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  1092 00000006 [2B16]                  		dw i2f_handler
  1093                                  bios_i2f_seg:	; 10/08/2023
  1094 00000008 0203                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  1095                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  1096                                  
  1097 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  1098                                  					; This is to maintain binary compatibility
  1099                                  					; with DISK based DOS 5.0
  1100                                  
  1101                                  ; This is a byte used for special key handling in the resident
  1102                                  ; console device driver. It must be here so that it can be included
  1103                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  1104                                  
  1105 0000000C 00                      altah:		db 0			; special key handling
  1106                                  			
  1107 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  1108 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  1109                                  
  1110                                  ; PTRSAV - pointer save
  1111                                  ;
  1112                                  ; This variable holds the pointer to the Request Header passed by a program
  1113                                  ; wishing to use a device driver. When the strategy routine is called it 
  1114                                  ; puts the address of the Request header in this variable and returns.
  1115                                  		
  1116 00000012 00000000                ptrsav:		dd 0			
  1117                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  1118 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  1119 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  1120 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  1121 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  1122 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  1123 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  1124                                  
  1125                                  ;-----------------------------------------------------------------------------
  1126                                  
  1127                                  res_dev_list:
  1128                                  
  1129                                  ; Device Header for the CON Device Driver
  1130                                  
  1131                                  CONHeader:				; HEADER FOR DEVICE "CON"
  1132 00000023 [3500]                  		dw auxdev2
  1133 00000025 7000                    		dw 70h	
  1134 00000027 1380                    word_727:	dw 8013h
  1135 00000029 [1506]                  		dw strategy
  1136 0000002B [2006]                  		dw con_entry
  1137 0000002D 434F4E2020202020        aCon:		db 'CON     '
  1138 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  1139 00000037 7000                    		dw 70h
  1140 00000039 0080                    		dw 8000h
  1141 0000003B [1506]                  		dw strategy
  1142 0000003D [4106]                  		dw aux0_entry
  1143 0000003F 4155582020202020        aAux:		db 'AUX     '
  1144 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  1145 00000049 7000                    		dw 70h
  1146 0000004B C0A0                    word_74B:	dw 0A0C0h
  1147 0000004D [1506]                  		dw strategy
  1148 0000004F [2506]                  		dw prn0_entry
  1149 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  1150 00000059 [6B00]                  timdev:		dw dskdev
  1151 0000005B 7000                    		dw 70h
  1152 0000005D 0880                    		dw 8008h
  1153 0000005F [1506]                  		dw strategy
  1154 00000061 [5906]                  		dw tim_entry
  1155 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  1156 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  1157 0000006D 7000                    		dw 70h
  1158                                  		;dw 8C2h
  1159                                  		; 02/10/2023 - Retro DOS v5.0
  1160 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  1161                                  		;dw offset strategy
  1162                                  		;dw offset dsk_entry
  1163                                  		; 19/10/2022
  1164 00000071 [1506]                  		dw strategy
  1165 00000073 [5E06]                  		dw dsk_entry
  1166                                  
  1167                                  ; maximum number of drives
  1168                                  
  1169 00000075 04                      drvmax:		db 4
  1170 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  1171 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  1172                                  					; 96tpi support		
  1173 00000078 00                      single:		db 0			; used to detect single drive systems
  1174 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  1175                                  					; used by console driver.
  1176 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  1177                                  					; drive. (examined by checksingle).
  1178                                  		
  1179 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  1180 0000007D 7000                    		dw 70h
  1181 0000007F 0080                    		dw 8000h
  1182 00000081 [1506]                  		dw strategy
  1183 00000083 [4106]                  		dw aux0_entry
  1184 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  1185 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  1186 0000008F 7000                    		dw 70h
  1187 00000091 C0A0                    		dw 0A0C0h
  1188 00000093 [1506]                  		dw strategy
  1189 00000095 [2C06]                  		dw prn1_entry
  1190 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1191 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  1192 000000A1 7000                    		dw 70h
  1193 000000A3 C0A0                    		dw 0A0C0h
  1194 000000A5 [1506]                  		dw strategy
  1195 000000A7 [3306]                  		dw prn2_entry
  1196 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1196 000000B2 0000               
  1197                                  
  1198                                  ;M058; Start of changes
  1199                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1200                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1201                                  ;cannot change for them to work. Even ProComm does this.
  1202                                  
  1203 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  1204                                  
  1205 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1206 000000BA 7000                    		dw 70h
  1207 000000BC C0A0                    		dw 0A0C0h
  1208 000000BE [1506]                  		dw strategy
  1209 000000C0 [3A06]                  		dw prn3_entry
  1210 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1211 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1212 000000CC 7000                    		dw 70h
  1213 000000CE 0080                    		dw 8000h
  1214 000000D0 [1506]                  		dw strategy
  1215 000000D2 [4706]                  		dw aux1_entry
  1216                                  		; 19/10/2022
  1217 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1218                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1219 000000DC [EE00]                  		dw com4dev
  1220 000000DE 7000                    		dw 70h
  1221 000000E0 0080                    		dw 8000h
  1222                                  		;dw offset strategy
  1223                                  		;dw offset aux2_entry
  1224 000000E2 [1506]                  		dw strategy
  1225 000000E4 [4D06]                  		dw aux2_entry	
  1226 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1227 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  1228 000000F0 7000                    		dw 70h
  1229 000000F2 0080                    		dw 8000h
  1230 000000F4 [1506]                  		dw strategy
  1231 000000F6 [5306]                  		dw aux3_entry
  1232 000000F8 434F4D3420202020        		db 'COM4    '
  1233                                  
  1234                                  ;-----------------------------------------------------------------------------
  1235                                  
  1236 00000100 10                      RomVectors:	db 10h			
  1237 00000101 00000000                Old10:		dd 0
  1238 00000105 13                      		db 13h
  1239 00000106 00000000                Old13:		dd 0			
  1240 0000010A 15                      		db 15h
  1241 0000010B 00000000                Old15:		dd 0			
  1242 0000010F 19                      		db 19h
  1243 00000110 00000000                Old19:		dd 0
  1244 00000114 1B                      		db 1Bh
  1245 00000115 00000000                Old1B:		dd 0
  1246                                  
  1247                                  ;EndRomVectors	equ $
  1248                                  
  1249                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1250                                  
  1251                                  ;-----------------------------------------------------------------------------
  1252                                  
  1253 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1254 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1255                                  
  1256                                  ; (MSDOS 3.3) NOTE:
  1257                                  ; Some floppy drives do not have changeline support. The result is a
  1258                                  ; large amount of inefficiency in the code. A media-check always returns
  1259                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1260                                  ; always discard any cached data.
  1261                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1262                                  ; The following three items are used to do this. The logical door latch is
  1263                                  ; based on the premise that it is not physically possible to change floppy
  1264                                  ; disks in a drive in under two seconds (most people take about 10). The
  1265                                  ; logical door latch is implemented by saving the time of the last successful
  1266                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1267                                  ; current time is compared to the saved time. If less than two seconds have
  1268                                  ; passed then the value "No Change" is returned. If more than two seconds
  1269                                  ; have passed the value "Don't Know" is returned.
  1270                                  ;    There is one complecation to this algorithm. Some programs change the
  1271                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1272                                  ; This possibility is detected by counting the number of disk operations
  1273                                  ; which occur without any time passing. If this count exceeds the value of
  1274                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1275                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1276                                  ; of disk operation which occur without the time changing.
  1277                                  
  1278 0000011D 00                      accesscount:	db 0			
  1279 0000011E FF                      tim_drv:	db 0FFh			
  1280 0000011F 00                      medbyt:		db 0
  1281                                  wrtverify:	; 15/10/2022			
  1282 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1283 00000121 00                      verify:		db 0			; 1 if verify after write
  1284 00000122 0000                    seccnt:		dw 0			
  1285 00000124 00                      		db 0			; -- pad where hardnum was
  1286 00000125 01                      dsktnum:	db 1			; number of diskette drives
  1287                                  
  1288                                  ; (MSDOS 3.3) NOTE:
  1289                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1290                                  ; have to be made to read the diskette. Consequently a large head settle
  1291                                  ; time was always used in the I/O operations. To get around this problem
  1292                                  ; we need to continually adjust the head settle time. The following
  1293                                  ; algorithm is used:
  1294                                  ;
  1295                                  ;   Get the current head settle value.
  1296                                  ;   If it is 1, then
  1297                                  ;	set slow = 15
  1298                                  ;   else
  1299                                  ;	set slow = value
  1300                                  ;   ...
  1301                                  ;   if we are seeking and writing then
  1302                                  ;	use slow
  1303                                  ;   else
  1304                                  ;	use fast
  1305                                  ;   ...
  1306                                  ;   restore current head settle value
  1307                                  
  1308 00000126 00                      motorstartup:	db 0			; value from table
  1309 00000127 00                      settlecurrent:	db 0			; value from table
  1310 00000128 00                      settleslow:	db 0			; slow settle value
  1311 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1312 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1313 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1314 0000012C 09                      eot:		db 9			
  1315 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1316 00000131 00                      cursec:		db 0			; current sector
  1317 00000132 00                      curhd:		db 0			; current head
  1318 00000133 0000                    curtrk:		dw 0			; current track
  1319 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1320 00000137 08                      formt_eot:	db 8			; eot used for format
  1321 00000138 00                      hdnum:		db 0			; head number
  1322 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1323 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1324                                  
  1325                                  ;-----------------------------------------------------------------------------
  1326                                  
  1327                                  ; disk errors returned from the IBM rom
  1328                                  
  1329 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  1330 0000013D 80                      		db 80h			; write fault (hard disk)
  1331 0000013E 40                      		db 40h			; seek failed
  1332 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  1333 00000140 08                      		db 8			; dma overrun
  1334 00000141 06                      		db 6			; disk changed (floppy)
  1335 00000142 04                      		db 4			; sector not found/read error
  1336 00000143 03                      		db 3			; disk write-protected
  1337                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  1338 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  1339 00000145 B2                      		db 0B2h			; volume not removable	
  1340                                  		;
  1341 00000146 00                      lsterr:		db 0			; all other errors
  1342                                  
  1343                                  ; returned error codes corresponding to above
  1344                                  
  1345 00000147 0A                      errout:		db 10			; write	fault error
  1346 00000148 02                      		db 2			; no response (timeout)
  1347 00000149 06                      		db 6			; seek failure
  1348 0000014A 04                      		db 4			; bad crc
  1349 0000014B 04                      		db 4			; dma overrun
  1350 0000014C 0F                      		db 15			; invalid media	change
  1351 0000014D 08                      		db 8			; sector not found
  1352 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  1353                                  		; 02/10/2023
  1354 0000014F 03                      		db 3			; unknown command error
  1355 00000150 03                      		db 3			; unknown command error
  1356                                  		;
  1357 00000151 0C                      		db 12			; general error
  1358                                  
  1359                                  ;-----------------------------------------------------------------------------
  1360                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  1361                                  
  1362                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1363                                  %if 1
  1364                                  disksector:	;times 174 db 0
  1365                                  NUM174 equ 512-$
  1366 00000152 00<rep AEh>             		times NUM174 db 0
  1367                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  1368 00000200 4A                      		dec	dx
  1369 00000201 42                      		inc	dx	
  1370 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  1371                                  
  1372 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  1372 0000020E 30312E323030332E62-
  1372 00000217 75696C645F312E3332-
  1372 00000220 23402049424D42494F-
  1372 00000229 2E434F4D2855534129-
  1372 00000232 00                 
  1373                                  		
  1374                                  		;times 287 db 0
  1375 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  1376                                  %endif
  1377                                  
  1378                                  ;-----------------------------------------------------------------------------
  1379                                  
  1380                                  ; 30/12/2018 - Retro DOS v4.0
  1381                                  
  1382                                  ; read in boot sector here, read done in readboot.
  1383                                  ; also read sector for dma check for hard disk.
  1384                                  ;
  1385                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1386                                  ; in them which causes the byte after the buffer to be trashed
  1387                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1388                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1389                                  ; makes that system more-or-less work.
  1390                                  
  1391                                  ; 02/10/2023
  1392                                  %if 0
  1393                                  
  1394                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1395                                  		; 19/10/2022
  1396                                  		times 512 db 0
  1397                                  %endif
  1398                                  
  1399                                  ;-----------------------------------------------------------------------------
  1400                                  
  1401                                  ; 02/10/2023 - Retro DOS v5.0
  1402                                  ; 30/12/2018 - Retro DOS v4.0
  1403                                  ;-----------------------------------------------------------------------------
  1404                                  ; 25/05/2018 (04/04/2018)
  1405                                  ;*****************************************************************************
  1406                                  ;	"bds" contains information for each drive in the system.
  1407                                  ;	various values are patched whenever actions are performed.
  1408                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1409                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1410                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1411                                  ;	that the parameters have not been set.
  1412                                  
  1413                                  bds1:		;dw offset bds2
  1414 00000352 [E803]                  		dw bds2	; 19/10/2022
  1415 00000354 7000                    		dw 70h			; dword	link to	next structure
  1416 00000356 00                      		db 0			; int 13h drive	number
  1417 00000357 00                      		db 0			; logical drive	letter
  1418 00000358 0002                    fdrive1:	dw 512			
  1419                                  					; physical sector size in bytes
  1420 0000035A FF                      		db 0FFh			; sectors/allocation unit
  1421 0000035B 0100                    		dw 1			; reserved sectors for dos
  1422 0000035D 02                      		db 2			; no of	file allocation	tables
  1423 0000035E 4000                    		dw 64			; number of root directory entries
  1424 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  1425 00000362 00                      		db 0			; media	descriptor, initially 0
  1426 00000363 0200                    		dw 2			; number of fat	sectors
  1427 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  1428 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  1429                                  		;
  1430                                  		; 02/10/2023
  1431                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  1432                                  		;dw 0			; hidden sector	count (low word)
  1433                                  		;dw 0			; hidden sector	(high)
  1434                                  		;dw 0			; number sectors (low)
  1435                                  		;dw 0			; number sectors (high)
  1436                                  		;db 0			; true => large	fats
  1437                                  		; 02/10/2023
  1438                                  		; PCDOS 7.1 (FAT32 support)
  1439 00000369 00000000                		dd 0			; hidden sector count
  1440 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  1441 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  1442                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  1443                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  1444                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  1445                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  1446 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  1447 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  1448 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  1449 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  1450 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  1451 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  1452 0000038D 00                      		db 0			; true => large	fats
  1453                                  		;
  1454 0000038E 0000                    		dw 0			; open ref. count
  1455 00000390 03                      		db 3			; form factor
  1456 00000391 2000                    		dw 20h			; various flags
  1457 00000393 2800                    		dw 40			; number of cylinders
  1458 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1459 00000397 01                      		db 1
  1460 00000398 0100                    		dw 1
  1461 0000039A 02                      		db 2
  1462 0000039B E000                    		dw 224			; number of root directory entries
  1463 0000039D 6801                    		dw 360
  1464 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1465 000003A0 0200                    		dw 2
  1466 000003A2 0900                    		dw 9
  1467 000003A4 0200                    		dw 2
  1468                                  		;
  1469                                  		; 02/10/2023
  1470                                  		;dw 0
  1471                                  		;dw 0
  1472                                  		;dw 0
  1473                                  		;dw 0
  1474                                  		;;db 6 dup(0)
  1475                                  		;times 6 db 0		; 19/10/2022
  1476 000003A6 00000000                		dd 0
  1477 000003AA 00000000                		dd 0
  1478 000003AE 00000000                		dd 0
  1479 000003B2 0000                    		dw 0
  1480 000003B4 0000                    		dw 0
  1481 000003B6 00000000                		dd 0
  1482 000003BA FFFF                    		dw 0FFFFh
  1483 000003BC FFFF                    		dw 0FFFFh	
  1484                                  		;db 12 dup(0)
  1485 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  1486                                  		;
  1487 000003CA FF                      		db 0FFh			; last track accessed on this drive
  1488 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1489 000003CD FFFF                    		dw 0FFFFh
  1490 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1490 000003D8 202000             
  1491 000003DB 00000000                		dd 0			; current volume serial	from boot record
  1492 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1493                                  ; ----
  1494                                  
  1495                                  ; 02/10/2023
  1496                                  ; PCDOS 7.1
  1497                                  %if 1
  1498                                  
  1499                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1500 000003E8 FFFF                    		dw 0FFFFh ; -1
  1501 000003EA 7000                    		dw 70h
  1502 000003EC 00                      		db 0
  1503 000003ED 00                      		db 0
  1504 000003EE 0002                    fdrive2:	dw 512
  1505 000003F0 FF                      		db 0FFh
  1506 000003F1 0100                    		dw 1
  1507 000003F3 02                      		db 2
  1508 000003F4 4000                    		dw 64
  1509 000003F6 6801                    		dw 360
  1510 000003F8 00                      		db 0
  1511 000003F9 0200                    		dw 2
  1512 000003FB 0900                    		dw 9
  1513 000003FD 0100                    		dw 1
  1514 000003FF 00000000<rep 5h>        		times 5 dd 0
  1515 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  1516 00000417 00000000<rep 3h>        		times 3 dd 0
  1517 00000423 00                      		db 0
  1518 00000424 0000                    		dw 0
  1519 00000426 03                      		db 3
  1520 00000427 2000                    		dw 20h
  1521 00000429 2800                    		dw 40
  1522                                  recbpb2:
  1523 0000042B 0002                    		dw 512
  1524 0000042D 01                                      db 1
  1525 0000042E 0100                                    dw 1
  1526 00000430 02                                      db 2
  1527 00000431 E000                                    dw 224
  1528 00000433 6801                                    dw 360
  1529 00000435 F0                                      db 0F0h
  1530 00000436 0200                                    dw 2
  1531 00000438 0900                                    dw 9
  1532 0000043A 0200                                    dw 2
  1533 0000043C 00000000<rep 5h>        		times 5 dd 0
  1534 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  1535 00000454 00000000<rep 3h>                        times 3 dd 0
  1536 00000460 FF                                      db 0FFh
  1537 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  1538 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  1538 0000046E 202000             
  1539 00000471 00000000                                dd 0
  1540 00000475 464154313220202000                      db 'FAT12   ',0
  1541                                  %endif
  1542                                  
  1543                                  ; ----
  1544                                  
  1545                                  ; 02/10/2023
  1546                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  1547                                  %if 0
  1548                                  
  1549                                  bds2:		dw bds3
  1550                                  		dw 70h
  1551                                  		db 0
  1552                                  		db 0
  1553                                  fdrive2:	dw 512			
  1554                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1555                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1556                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1557                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1558                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1559                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1560                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1561                                  
  1562                                  bds3:		dw bds4
  1563                                  		dw 70h
  1564                                  		db 0
  1565                                  		db 0
  1566                                  fdrive3:	dw 512			
  1567                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1568                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1569                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1570                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1571                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1572                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1573                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1574                                  ; ----
  1575                                  
  1576                                  bds4:		dw 0FFFFh
  1577                                  		dw 70h
  1578                                  		db 0
  1579                                  		db 0
  1580                                  fdrive4:	dw 512			
  1581                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1582                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1583                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1584                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1585                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1586                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1587                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1588                                  
  1589                                  ;-----------------------------------------------------------------------------
  1590                                  
  1591                                  sm92:		db 3			; .spf
  1592                                  		db 9			; .spt
  1593                                  		db 112	; 70h		; .cdire
  1594                                  		dw 1440	; 2*9*80	; .csec
  1595                                  		db 2			; .spau
  1596                                  		db 2			; .chead
  1597                                  
  1598                                  %endif
  1599                                  
  1600 0000047E 00                      keyrd_func:	db 0			
  1601 0000047F 01                      keysts_func:	db 1			
  1602 00000480 00                      printdev:	db 0			; printer device index
  1603                                  
  1604                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1605 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1606                                  
  1607 00000489 0000                    daycnt:		dw 0			
  1608 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  1609 0000048C 00                      havecmosclock:	db 0			
  1610 0000048D 13                      base_century:	db 19			
  1611 0000048E 50                      base_year:	db 80			
  1612                                  
  1613 0000048F 1F                      month_tab:	db 31
  1614 00000490 1C                      february:	db 28 ; 08/08/2023
  1615 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1615 0000049A 1F                 
  1616                                  
  1617                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1618                                  %if 0  
  1619                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1620                                  		dw 70h ; 17/10/2022	
  1621                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1622                                  		dw 70h ; 17/10/2022
  1623                                  %endif
  1624                                  
  1625 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  1626                                  
  1627                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1628                                  ;fat_12_id:	db 'FAT12   ',0         
  1629                                  ;fat_16_id:	db 'FAT16   ',0         
  1630                                  ;vol_no_name:	db 'NO NAME    ',0      
  1631                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  1632                                  
  1633 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  1634 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  1635 000004A0 0000                    multrk_flag:	dw 0			
  1636 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1637 000004A3 0000                    vretry_cnt:	dw 0			
  1638 000004A5 0000                    soft_ecc_cnt:	dw 0			
  1639 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1640 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1641                                  
  1642                                  ; variables for msdioctl.asm module
  1643                                  
  1644                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1645                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1646                                  ;	n	bytes per sector
  1647                                  ;      ---	----------------
  1648                                  ;	0	      128
  1649                                  ;	1	      256
  1650                                  ;	2	      512
  1651                                  ;	3	     1024
  1652                                  
  1653                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1654                                  ;					; we support (was 40 in dos 3.2)
  1655                                  
  1656 000004AA 2400                    sectorspertrack: dw 36
  1657 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  1658 000004B0 00000202                		db 0, 0, 2, 2
  1659 000004B4 00000302                		db 0, 0, 3, 2
  1660 000004B8 00000402                		db 0, 0, 4, 2
  1661 000004BC 00000502                		db 0, 0, 5, 2
  1662 000004C0 00000602                		db 0, 0, 6, 2
  1663 000004C4 00000702                		db 0, 0, 7, 2
  1664 000004C8 00000802                		db 0, 0, 8, 2
  1665 000004CC 00000902                		db 0, 0, 9, 2
  1666 000004D0 00000A02                		db 0, 0, 10, 2
  1667 000004D4 00000B02                		db 0, 0, 11, 2
  1668 000004D8 00000C02                		db 0, 0, 12, 2
  1669 000004DC 00000D02                		db 0, 0, 13, 2
  1670 000004E0 00000E02                		db 0, 0, 14, 2
  1671 000004E4 00000F02                		db 0, 0, 15, 2
  1672 000004E8 00001002                		db 0, 0, 16, 2
  1673 000004EC 00001102                		db 0, 0, 17, 2
  1674 000004F0 00001202                		db 0, 0, 18, 2
  1675 000004F4 00001302                		db 0, 0, 19, 2
  1676 000004F8 00001402                		db 0, 0, 20, 2
  1677 000004FC 00001502                		db 0, 0, 21, 2
  1678 00000500 00001602                		db 0, 0, 22, 2
  1679 00000504 00001702                		db 0, 0, 23, 2
  1680 00000508 00001802                		db 0, 0, 24, 2
  1681 0000050C 00001902                		db 0, 0, 25, 2
  1682 00000510 00001A02                		db 0, 0, 26, 2
  1683 00000514 00001B02                		db 0, 0, 27, 2
  1684 00000518 00001C02                		db 0, 0, 28, 2
  1685 0000051C 00001D02                		db 0, 0, 29, 2
  1686 00000520 00001E02                		db 0, 0, 30, 2
  1687 00000524 00001F02                		db 0, 0, 31, 2
  1688 00000528 00002002                		db 0, 0, 32, 2
  1689 0000052C 00002102                		db 0, 0, 33, 2
  1690 00000530 00002202                		db 0, 0, 34, 2
  1691 00000534 00002302                		db 0, 0, 35, 2
  1692 00000538 00002402                		db 0, 0, 36, 2
  1693                                  
  1694                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1695                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  1696                                  
  1697                                  		;times 108 db 0		; 19/10/2022
  1698                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1699                                  					; times	((4*63)	- 144) db 0
  1700                                  dskdrvs:	
  1701 0000053C [5803]                  		dw fdrive1
  1702 0000053E [EE03]                  		dw fdrive2 
  1703                                  	
  1704                                  		;dw 52 dup(0)
  1705 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  1706                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  1707                                  
  1708                                  ;-----------------------------------------------------------------------------
  1709                                  
  1710                                  ; this is a real ugly place to put this
  1711                                  ; it should really go in the bds
  1712                                  
  1713 000005A8 00                      mediatype:	db 0
  1714 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1715                                  					; type for format call
  1716 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  1717                                  					; failed.
  1718                                  
  1719                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1720                                  ; the one passed by "new roms" before we perform a format operation. the old
  1721                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1722                                  ; this table does not contain the previously saved dpt.
  1723                                  		
  1724 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1725 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  1726 000005B0 00                      secondary_model_byte: db 0
  1727                                  		
  1728 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  1729                                  					; initialization is complete
  1730                                  		
  1731                                  ;; we assume the following remain contiguous and their order doesn't change
  1732                                  ;i19_lst:
  1733                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1734                                  ;	public	int19old&aa
  1735                                  ;		db	aa&h	; store the number as a byte
  1736                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1737                                  ;	endm
  1738                                  
  1739                                  ; 21/10/2022
  1740                                  
  1741 000005B2 02                      i19_lst:	db 2
  1742                                  					; Int19old&aa
  1743 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1744 000005B7 08                      		db 8
  1745 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1746 000005BC 09                      		db 9
  1747 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1748 000005C1 0A                      		db 0Ah
  1749 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1750 000005C6 0B                      		db 0Bh
  1751 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1752 000005CB 0C                      		db 0Ch
  1753 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1754 000005D0 0D                      		db 0Dh
  1755 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1756 000005D5 0E                      		db 0Eh
  1757 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1758 000005DA 70                      		db 70h
  1759 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1760 000005DF 72                      		db 72h
  1761 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1762 000005E4 73                      		db 73h
  1763 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1764 000005E9 74                      		db 74h
  1765 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1766 000005EE 76                      		db 76h
  1767 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1768 000005F3 77                      		db 77h
  1769 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1770                                  
  1771                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1772                                  
  1773                                  ;-----------------------------------------------------------------------------
  1774                                  
  1775                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1776                                  ; 
  1777                                  ;dskdrvs:	dw fdrive1
  1778                                  ;		dw fdrive2
  1779                                  ;		dw fdrive3
  1780                                  ;		dw fdrive4
  1781                                  ;
  1782                                  ;;M011 -- made all hard drive stuff variable
  1783                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  1784                                  ;		times 22 dw 0	; 19/10/2022
  1785                                  
  1786                                  ;-----------------------------------------------------------------------------
  1787                                  
  1788                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1789                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1790                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1791                                  
  1792                                  ;variables for dynamic relocatable modules
  1793                                  ;these should be stay resident.
  1794                                  
  1795 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1796                                  					; for p12 machine
  1797                                  
  1798                                  ; data structures for real-time date and time
  1799                                  			
  1800 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1801                                  
  1802                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1803                                  %if 0
  1804                                  month_table:	dw 0			; january
  1805                                  		dw 31			; february
  1806                                  		dw 59
  1807                                  		dw 90
  1808                                  		dw 120
  1809                                  		dw 151
  1810                                  		dw 181
  1811                                  		dw 212
  1812                                  		dw 243
  1813                                  		dw 273
  1814                                  		dw 304
  1815                                  		dw 334			; december
  1816                                  %endif
  1817                                  
  1818 00000600 0000                    daycnt2:	dw 0
  1819                                  ; 08/08/2023
  1820                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1821                                  
  1822                                  ;-----------------------------------------------------------------------------
  1823                                  ;
  1824                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1825                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1826                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1827                                  
  1828                                  ; ----------------------------------------------------------------------------
  1829                                  
  1830                                  ;************************************************************************
  1831                                  ;*									*
  1832                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1833                                  ;*	  are plugged in by seg_reinit.					*
  1834                                  ;*									*
  1835                                  ;************************************************************************
  1836                                  
  1837                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1838                                  ; BIOSCODE_SEGMENT equ 2C7h
  1839                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1840                                  
  1841                                  ; 01/10/2022 - Erdogan Tan
  1842                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1843                                  ;  addresses, they will be changed to table labels later)
  1844                                  
  1845                                  ; 09/12/2022
  1846                                  %if 0
  1847                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1848                                  					; at 2C7h:43h =	70h:25B3h
  1849                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1850                                  					; at 2C7h:396h = 70h:2906h
  1851                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1852                                  					; at 2C7h:1302h	= 70h:3872h
  1853                                  i13x:		dw 154Bh, 2C7h		; i13z
  1854                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1855                                  %endif
  1856                                  
  1857                                  ; 30/12/2022
  1858                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1859                                  
  1860                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1861                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  1862                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  1863                                  
  1864                                  ; 09/12/2022
  1865 00000602 [4700]0203              cdev:		dw chardev_entry, IOSYSCODESEG
  1866 00000606 [A003]0203              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1867                                  ; 07/08/2023
  1868                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1869 0000060A [5718]0203              i13x:		dw i13z, IOSYSCODESEG
  1870                                  
  1871                                  end_BC_entries:	; 15/10/2022
  1872                                  
  1873                                  ;************************************************************************
  1874                                  ;*									*
  1875                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1876                                  ;*									*
  1877                                  ;************************************************************************
  1878                                  
  1879                                  cbreak:					
  1880 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1881                                  					; indicate break key set
  1882                                  intret:					
  1883 00000614 CF                      		iret
  1884                                  
  1885                                  ; =============== S U B	R O U T	I N E ========================================
  1886                                  
  1887                                  
  1888                                  ;************************************************************************
  1889                                  ;*									*
  1890                                  ;*	strategy - store es:bx (device driver request packet)		*
  1891                                  ;*		     away at [ptrsav] for next driver function call	*
  1892                                  ;*									*
  1893                                  ;************************************************************************
  1894                                  
  1895                                  strategy:	; proc far		
  1896 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1897                                  					; away at [ptrsav] for next driver function call
  1898 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1899 0000061F CB                      		retf
  1900                                  
  1901                                  ; ----------------------------------------------------------------------------
  1902                                  
  1903                                  ;************************************************************************
  1904                                  ;*									*
  1905                                  ;*	device driver entry points. these are the initial		*
  1906                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1907                                  ;*	  in the case of our resident drivers, they'll just		*
  1908                                  ;*	  stick a fake return address on the stack which		*
  1909                                  ;*	  points to dispatch tables and possibly some unit		*
  1910                                  ;*	  numbers, and then call through a common entry point		*
  1911                                  ;*	  which can take care of a20 switching				*
  1912                                  ;*									*
  1913                                  ;************************************************************************
  1914                                  
  1915                                  ; 01/10/2022 - Erdogan Tan
  1916                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1917                                  ;  addresses, they will be changed to table labels later)
  1918                                  
  1919                                  ; 09/12/2022
  1920                                  
  1921                                  ; 02/10/2023 - Retro DOS v5.0
  1922                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  1923                                  
  1924                                  con_entry:				
  1925 00000620 E84000                  		call	cdev_entry
  1926                                  ; ----------------------------------------------------------------------------
  1927                                  		;dw 0E4h		; con_table
  1928 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  1929                                  					; 2C7h:0E4h = 70h:2654h
  1930                                  ; ----------------------------------------------------------------------------
  1931                                  
  1932                                  prn0_entry:				
  1933 00000625 E83B00                  		call	cdev_entry
  1934                                  ; ----------------------------------------------------------------------------
  1935                                  		;dw 0FBh		; prn_table
  1936 00000628 [FB00]                  		dw prn_table
  1937                                  					; 2C7h:0FBh = 70h:266Bh
  1938 0000062A 0000                    		db 0, 0
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  prn1_entry:				
  1942 0000062C E83400                  		call	cdev_entry
  1943                                  ; ----------------------------------------------------------------------------
  1944                                  		;dw 0FBh		; prn_table
  1945 0000062F [FB00]                  		dw prn_table
  1946                                  					; 2C7h:0FBh = 70h:266Bh
  1947 00000631 0001                    		db 0, 1
  1948                                  ; ----------------------------------------------------------------------------
  1949                                  
  1950                                  prn2_entry:				
  1951 00000633 E82D00                  		call	cdev_entry
  1952                                  ; ----------------------------------------------------------------------------
  1953                                  		;dw 0FBh		; prn_table
  1954 00000636 [FB00]                  		dw prn_table
  1955                                  					; 2C7h:0FBh = 70h:266Bh
  1956 00000638 0102                    		db 1, 2
  1957                                  ; ----------------------------------------------------------------------------
  1958                                  
  1959                                  prn3_entry:				
  1960 0000063A E82600                  		call	cdev_entry
  1961                                  ; ----------------------------------------------------------------------------
  1962                                  		;dw 0FBh		; prn_table
  1963 0000063D [FB00]                  		dw prn_table
  1964                                  					; 2C7h:0FBh = 70h:266Bh
  1965 0000063F 0203                    		db 2, 3
  1966                                  ; ----------------------------------------------------------------------------
  1967                                  
  1968                                  aux0_entry:				
  1969 00000641 E81F00                  		call	cdev_entry
  1970                                  ; ----------------------------------------------------------------------------
  1971                                  		;dw 130h		; aux_table
  1972 00000644 [3001]                  		dw aux_table
  1973                                  					; 2C7h:130h = 70h:26A0h
  1974 00000646 00                      		db 0
  1975                                  ; ----------------------------------------------------------------------------
  1976                                  
  1977                                  aux1_entry:				
  1978 00000647 E81900                  		call	cdev_entry
  1979                                  ; ----------------------------------------------------------------------------
  1980                                  		;dw 130h		; aux_table
  1981 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  1982                                  					; 2C7h:130h = 70h:26A0h
  1983 0000064C 01                      		db 1
  1984                                  ; ----------------------------------------------------------------------------
  1985                                  
  1986                                  aux2_entry:				
  1987 0000064D E81300                  		call	cdev_entry
  1988                                  ; ----------------------------------------------------------------------------
  1989                                  		;dw 130h		; aux_table
  1990 00000650 [3001]                  		dw aux_table
  1991                                  					; 2C7h:130h = 70h:26A0h
  1992 00000652 02                      		db 2
  1993                                  ; ----------------------------------------------------------------------------
  1994                                  
  1995                                  aux3_entry:				
  1996 00000653 E80D00                  		call	cdev_entry
  1997                                  ; ----------------------------------------------------------------------------
  1998                                  		;dw 130h		; aux_table
  1999 00000656 [3001]                  		dw aux_table
  2000                                  					; 2C7h:130h = 70h:26A0h
  2001 00000658 03                      		db 3
  2002                                  ; ----------------------------------------------------------------------------
  2003                                  
  2004                                  tim_entry:				
  2005 00000659 E80700                  		call	cdev_entry
  2006                                  ; ----------------------------------------------------------------------------
  2007                                  		;dw 147h		; tim_table
  2008 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  2009                                  					; 2C7h:147h = 70h:26B7h
  2010                                  ; ----------------------------------------------------------------------------
  2011                                  
  2012                                  ; 15/10/2022
  2013                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  2014                                  ; 09/12/2022
  2015                                  DSKTBL equ dsktbl
  2016                                  
  2017                                  dsk_entry:				
  2018 0000065E E80200                  		call	cdev_entry
  2019                                  ; ----------------------------------------------------------------------------
  2020                                  		;dw 4A2h		; dsktbl
  2021 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  2022                                  					; 2C7h:4A2h = 70h:2A12h
  2023                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  2024                                  					; 364h:579h = 70h:34B9h
  2025                                  
  2026                                  ; =============== S U B	R O U T	I N E ========================================
  2027                                  
  2028                                  ;************************************************************************
  2029                                  ;*									*
  2030                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  2031                                  ;*	This code assumes that if Segment of Device request packet is	*
  2032                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  2033                                  ;*	A20 is already on.						*
  2034                                  ;*									*
  2035                                  ;************************************************************************
  2036                                  
  2037                                  cdev_entry:	; proc near		
  2038 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2039 00000669 740D                    		jz	short ce_enter_codeseg
  2040                                  				; optimized for DOS in HMA
  2041 0000066B 50                      		push	ax
  2042 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  2043 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  2044 00000675 58                      		pop	ax
  2045 00000676 7505                    		jnz	short not_from_dos
  2046                                  				; jump is coded this way to fall thru
  2047                                  				; in 99.99% of the cases
  2048                                  ce_enter_codeseg:
  2049 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  2050                                  		;jmp	dword ptr cs:cdev
  2051                                  ;-----------------------------------------------------------------------------
  2052                                  
  2053                                  not_from_dos:				
  2054 0000067D E8AA00                  		call	EnsureA20On
  2055 00000680 EBF6                    		jmp	short ce_enter_codeseg
  2056                                  
  2057                                  ;************************************************************************
  2058                                  ;*									*
  2059                                  ;*	outchr - this is our int 29h handler. it writes the		*
  2060                                  ;*	   character in al on the display using int 10h ttywrite	*
  2061                                  ;*									*
  2062                                  ;************************************************************************
  2063                                  
  2064                                  	; 17/07/2024
  2065                                  	; 02/10/2023
  2066                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  2067                                  outchr:
  2068 00000682 50                      		push	ax		; int 29h handler
  2069 00000683 56                      		push	si
  2070 00000684 57                      		push	di
  2071 00000685 55                      		push	bp
  2072 00000686 53                      		push	bx
  2073                                  		;;;
  2074                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  2075                                  		;mov	ah,0Eh
  2076                                  		;mov	bx,7
  2077                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2078                                  		;		; AL = character, BH = display page (alpha modes)
  2079                                  		;		; BL = foreground color	(graphics modes)
  2080                                  		; 17/07/2024
  2081                                  		; 02/10/2023
  2082 00000687 1E                      		push	ds ; *
  2083 00000688 31DB                    		xor	bx,bx ; 0
  2084 0000068A 8EDB                    		mov	ds,bx ; 0
  2085 0000068C B40E                    		mov	ah,0Eh
  2086 0000068E B307                    		mov	bl,7
  2087 00000690 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  2088                                  		; 17/07/2024
  2089                                  		;jnz	short win_outchr ; *
  2090                                  		;push	ds ; *
  2091                                  		;mov	ds,bx ; 0
  2092                                  		;mov	ah,0Eh
  2093                                  		;mov	bl,7
  2094 00000695 7508                    		jnz	short win_outchr ; Running on Windows
  2095 00000697 9C                      		pushf			; far call (simulate INT)
  2096 00000698 FA                      		cli	; disable interrupts
  2097 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  2098                                  		; 17/07/2024
  2099                                  		;pop	ds ; *
  2100 0000069D EB02                    		jmp	short outchr_ok
  2101                                  win_outchr:
  2102 0000069F CD10                    		int	10h
  2103                                  outchr_ok:
  2104                                  		; 17/07/2024
  2105 000006A1 1F                      		pop	ds ; *
  2106                                  		;;;
  2107 000006A2 5B                      		pop	bx
  2108 000006A3 5D                      		pop	bp
  2109 000006A4 5F                      		pop	di
  2110 000006A5 5E                      		pop	si
  2111 000006A6 58                      		pop	ax
  2112 000006A7 CF                      		iret
  2113                                  
  2114                                  ;-----------------------------------------------------------------------------
  2115                                  
  2116                                  	; 02/10/2023 - Retro DOS v5.0
  2117                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  2118                                  
  2119 000006A8 50                      		db 50h ; P		; 'PCI' signature
  2120 000006A9 43                      		db 43h ; C
  2121 000006AA 49                      		db 49h ; I
  2122                                  
  2123 000006AB 00000000                Orig1A:		dd 0
  2124                                  
  2125                                  ; =============== S U B R O U T I N E =======================================
  2126                                  
  2127                                  	; 02/10/2023 - Retro DOS v5.0
  2128                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  2129                                  
  2130                                  Int1A:
  2131 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  2132 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  2133 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  2134                                  int1a_1:
  2135 000006B9 55                      		push	bp
  2136                                  int1a_2:
  2137 000006BA 89E5                    		mov	bp,sp
  2138 000006BC 55                      		push	bp
  2139 000006BD 9C                      		pushf
  2140 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2141 000006C3 7220                    		jc	short int1a_4
  2142                                  
  2143                                  		;cmp	cl,0		; Year (BCD)
  2144                                  		; 02/10/2023
  2145 000006C5 08C9                    		or	cl,cl
  2146 000006C7 7515                    		jnz	short int1a_3
  2147 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  2148 000006CC 7510                    		jne	short int1a_3
  2149 000006CE B520                    		mov	ch,20h
  2150 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  2151 000006D2 51                        		push	cx
  2152 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  2153 000006D4 9C                      		pushf
  2154 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2155 000006DA 5A                      		pop	dx
  2156 000006DB 59                      		pop	cx
  2157 000006DC 7207                    		jc	short int1a_4
  2158                                  int1a_3:
  2159 000006DE 5D                      		pop	bp
  2160 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  2161 000006E3 EB05                                    jmp	short int1a_5
  2162                                  int1a_4:
  2163 000006E5 5D                      		pop	bp
  2164 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  2165                                  int1a_5:
  2166 000006EA 5D                      		pop	bp
  2167 000006EB CF                      		iret
  2168                                  
  2169                                  		; 02/10/2023
  2170 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  2171                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  2172                                  	
  2173                                  ;-----------------------------------------------------------------------------
  2174                                  
  2175                                  ;************************************************************************
  2176                                  ;*									*
  2177                                  ;*	block13 - our int13 hooker					*
  2178                                  ;*									*
  2179                                  ;************************************************************************
  2180                                  
  2181                                  	; 02/10/2023 - Retro DOS v5.0
  2182                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  2183                                  
  2184                                  block13:				
  2185 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2186 000006F3 7403                    		jz	short skipa20
  2187                                  		
  2188                                  		;call	IsA20Off	; A20 Off?
  2189                                  		;jnz	short skipa20
  2190                                  		;call	EnableA20	; assure a20 enabled
  2191                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  2192 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  2193                                  skipa20:				
  2194 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  2195 000006FD 9C                      		pushf			; fake interrupt
  2196 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  2197                                  		;call	dword ptr cs:i13x
  2198                                  					; call through Bios_Code entry table
  2199 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  2200 00000708 CA0200                  		retf	2
  2201                                  
  2202                                  ; =============== S U B	R O U T	I N E =======================================
  2203                                  
  2204                                  ; the int13 hook calls back here to call-through to the ROM
  2205                                  ; this is necessary because some people have extended their
  2206                                  ; ROM BIOSs to use ds as a parameter/result register and
  2207                                  ; our int13 hook relies heavily on ds to access Bios_Data
  2208                                  
  2209                                  call_orig13:	; proc far		
  2210 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  2211 0000070F 9C                      		pushf			; simulate an int13
  2212 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  2213                                  		;call	cs:Orig13
  2214 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  2215 0000071A 0E                      		push	cs
  2216 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  2217                                  
  2218 0000071C 9C                      		pushf
  2219                                  		; 10/12/2022
  2220                                  		; ds = cs
  2221 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  2222                                  		;cmp	byte [cs:inHMA],0
  2223 00000722 7403                    		jz	short corig13_popf_retf
  2224                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2225                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  2226                                  		;call	IsA20Off
  2227                                  		;jnz	short corig13_popf_retf
  2228                                  		;call	EnableA20
  2229 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  2230                                  corig13_popf_retf:	
  2231 00000727 9D                      		popf
  2232                                  		; 20/09/2023
  2233                                  re_init:	; 07/08/2023
  2234 00000728 CB                      		retf
  2235                                  
  2236                                  		; 02/10/2023
  2237 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  2238                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  2239                                  
  2240                                  ;-----------------------------------------------------------------------------
  2241                                  
  2242                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  2243                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  2244                                  
  2245                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2246                                  ;HiMem:		dd 0FFFF0090h		
  2247                                  ;LoMem:		dd 80h
  2248                                  
  2249                                  ; ----------------------------------------------------------------------------			
  2250                                  
  2251                                  ; =============== S U B	R O U T	I N E ========================================
  2252                                  
  2253                                  
  2254                                  ;************************************************************************
  2255                                  ;*									*
  2256                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  2257                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  2258                                  ;*									*
  2259                                  ;************************************************************************
  2260                                  
  2261                                  EnsureA20On:	; proc near
  2262 0000072A E80E00                  		call	IsA20Off
  2263                                  		;jz	short EnableA20
  2264                                  		;retn
  2265                                  		; 18/12/2022
  2266 0000072D 750B                    		jnz	short A20On_retn
  2267                                  
  2268                                  ; =============== S U B	R O U T	I N E ========================================
  2269                                  
  2270                                  
  2271                                  EnableA20:	; proc near
  2272 0000072F 50                      		push	ax
  2273 00000730 53                      		push	bx
  2274 00000731 B405                    		mov	ah,5	 ; local enable a20
  2275                                  		;call	cs:xms
  2276 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  2277 00000738 5B                      		pop	bx
  2278 00000739 58                      		pop	ax
  2279                                  A20On_retn:	; 18/12/2022
  2280 0000073A C3                      		retn
  2281                                  
  2282                                  ; =============== S U B	R O U T	I N E ========================================
  2283                                  
  2284                                  
  2285                                  IsA20Off:	; proc near
  2286 0000073B 1E                      		push	ds
  2287 0000073C 06                      		push	es
  2288 0000073D 51                      		push	cx
  2289 0000073E 56                      		push	si
  2290 0000073F 57                      		push	di
  2291                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2292                                  		;lds	si,[cs:HiMem]
  2293                                  		;les	di,[cs:LoMem]
  2294                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  2295 00000740 31FF                    		xor	di,di
  2296 00000742 8EC7                    		mov	es,di
  2297 00000744 4F                      		dec	di
  2298 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  2299 00000748 8EDF                    		mov	ds,di
  2300 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  2301                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  2302                                  		; (following cpu instructions will be modified by 'SYSIN'
  2303                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  2304                                  cpu386_cmpsd:
  2305 0000074D 90                      		nop
  2306 0000074E B90800                  		mov	cx,8
  2307 00000751 F3A7                    		repe cmpsw
  2308                                  				; zf = 0 -> A20 line is ON
  2309                                  				; zf = 1 -> A20 line is OFF
  2310 00000753 5F                      		pop	di
  2311 00000754 5E                      		pop	si
  2312 00000755 59                      		pop	cx
  2313 00000756 07                      		pop	es
  2314 00000757 1F                      		pop	ds
  2315 00000758 C3                      		retn
  2316                                  
  2317                                  ; ----------------------------------------------------------------------------
  2318                                  
  2319                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2320                                  %if 0
  2321                                  DisableA20:
  2322                                  		push	ax
  2323                                  		push	bx
  2324                                  		mov	ah,6		; local disable A20
  2325                                  		call	far [cs:xms]
  2326                                  		;call	cs:xms
  2327                                  		pop	bx
  2328                                  		pop	ax
  2329                                  		retn
  2330                                  %endif
  2331                                  
  2332                                  ; ----------------------------------------------------------------------------
  2333                                  
  2334                                  ;************************************************************************
  2335                                  ;*									*
  2336                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  2337                                  ;*	  interrupt vectors before resuming the original int19 code	*
  2338                                  ;*									*
  2339                                  ;************************************************************************
  2340                                  
  2341                                  		; 02/10/2023 - Retro DOS v5.0
  2342                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  2343                                  int19:
  2344 00000759 0E                      		push	cs
  2345 0000075A 1F                      		pop	ds
  2346                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2347                                  		;mov	es,[zeroseg]	; 16/10/2022
  2348                                  		;mov	cx,5		; NUMROMVECTORS
  2349 0000075B 31C9                    		xor	cx,cx
  2350 0000075D 8EC1                    		mov	es,cx
  2351 0000075F B105                    		mov	cl,5
  2352                                  		;mov	si,offset RomVectors
  2353 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  2354                                  next_int:
  2355 00000764 AC                      		lodsb			; get int number
  2356 00000765 98                      		cbw			; assume < 128
  2357 00000766 D1E0                    		shl	ax,1
  2358 00000768 D1E0                    		shl	ax,1		; int *	4
  2359                                  		; 07/08/2023
  2360                                  		;mov	di,ax
  2361                                  		;lodsw
  2362                                  		;stosw
  2363                                  		;lodsw
  2364                                  		;stosw			; install the saved vector
  2365                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  2366 0000076A 97                      		xchg	ax,di
  2367 0000076B A5                      		movsw
  2368 0000076C A5                      		movsw
  2369 0000076D E2F5                    		loop	next_int
  2370                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  2371 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  2372 00000773 7419                    		jz	short doint19
  2373 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  2374                                  					; stkinit in sysinit1 will initialize int19oldxx values
  2375                                  		;mov	cx,14		; num_i19
  2376                                  		; 07/08/2023
  2377 00000778 B10E                    		mov	cl,14
  2378                                  i19_restore_loop:
  2379 0000077A AC                      		lodsb			; get interrupt	number
  2380 0000077B 98                      		cbw			; assume < 128
  2381                                  		;mov	di,ax
  2382                                  		;lodsw			; get original vector offset
  2383                                  		;mov	bx,ax		; save it
  2384                                  		;lodsw
  2385                                  		; 07/08/2023
  2386 0000077C 97                      		xchg	ax,di
  2387 0000077D AD                      		lodsw
  2388 0000077E 93                      		xchg	ax,bx
  2389 0000077F AD                      		lodsw
  2390                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  2391 00000780 43                      		inc	bx ; 07/08/2023
  2392 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  2393                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  2394                                  		;jz	short i19_restor_1
  2395 00000783 4B                      		dec	bx ; 07/08/2023
  2396 00000784 01FF                    		add	di,di
  2397 00000786 01FF                    		add	di,di
  2398 00000788 93                      		xchg	ax,bx
  2399 00000789 AB                      		stosw
  2400 0000078A 93                      		xchg	ax,bx
  2401 0000078B AB                      		stosw			; put the vector back
  2402                                  i19_restor_1:
  2403 0000078C E2EC                    		loop	i19_restore_loop
  2404                                  doint19:
  2405                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  2406 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  2407 00000792 7403                    		jz	short SkipVDisk
  2408 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  2409                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  2410                                  					; the memory above 1MB during a	warm boot.
  2411                                  SkipVDisk:
  2412 00000797 CD19                    		int	19h		; DISK BOOT
  2413                                  					; causes reboot	of disk	system
  2414                                  
  2415                                  ; =============== S U B	R O U T	I N E ========================================
  2416                                  
  2417                                  ;-----------------------------------------------------------------------------
  2418                                  ;
  2419                                  ; procedure : int15
  2420                                  ;
  2421                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  2422                                  ;		If it recognizes ctrl-alt-del and if DOS was
  2423                                  ;		is running high, it Erases the VDISK header
  2424                                  ;		present at 1MB boundary
  2425                                  ;
  2426                                  ;-----------------------------------------------------------------------------
  2427                                  
  2428                                  ; 16/10/2022
  2429                                  ;DELKEY		equ	53h
  2430                                  ;ROMDATASEG	equ	40h
  2431                                  KBFLAG		equ	17h
  2432                                  ;CTRLSTATE	equ	04h
  2433                                  ;ALTSTATE	equ	08h
  2434                                  
  2435                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  2436                                  Int15:
  2437                                  		;cmp	ax,4F00h+DELKEY
  2438 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  2439                                  		; 02/10/2023 - Retro DOS v5.0
  2440                                  		; 07/08/2023
  2441 0000079C 7405                    		jz	short int15_1
  2442                                  		;jnz	short Old15_j	; 07/08/2023 
  2443                                  Old15_j:
  2444 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2445                                  
  2446                                  ; ----------------------------------------------------------------------------
  2447                                  int15_1:
  2448 000007A3 1E                      		push	ds
  2449 000007A4 50                      		push	ax
  2450                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2451                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2452                                  		;mov	ax,40h		; ROMDATASEG
  2453                                  		;mov	ds,ax
  2454                                  		;;mov	al,ds:17h	; [KBFLAG]
  2455                                  		;; 16/10/2022
  2456                                  		;mov	al,[KBFLAG]
  2457 000007A5 31C0                    		xor	ax,ax
  2458 000007A7 8ED8                    		mov	ds,ax
  2459 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2460 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2461 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2462 000007B0 750A                    		jnz	short int15_2
  2463                                  		; 07/08/2023
  2464                                  		;push	cs
  2465                                  		;pop	ds
  2466                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  2467 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  2468 000007B7 7403                    		jz	short int15_2
  2469 000007B9 E80500                  		call	EraseVDiskHead
  2470                                  int15_2:
  2471 000007BC 58                      		pop	ax
  2472 000007BD 1F                      		pop	ds
  2473 000007BE F9                      		stc
  2474                                  		; 02/10/2023 - Retro DOS v5.0
  2475 000007BF EBDD                    		jmp	short Old15_j
  2476                                  
  2477                                  		; 02/10/2023
  2478                                  ;Old15_j:	; 07/08/2023
  2479                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  2480                                  ;		;jmp	cs:Old15
  2481                                  	
  2482                                  ; =============== S U B	R O U T	I N E ========================================
  2483                                  
  2484                                  ;-----------------------------------------------------------------------------
  2485                                  ;
  2486                                  ; procedure : EraseVDiskHead
  2487                                  ;
  2488                                  ;		Erases the VDisk Header present in the 1MB boundary
  2489                                  ;
  2490                                  ;-----------------------------------------------------------------------------
  2491                                  
  2492                                  EraseVDiskHead:	; proc near
  2493                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2494                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2495                                  		;push	ax
  2496 000007C1 51                      		push	cx
  2497 000007C2 57                      		push	di
  2498 000007C3 06                      		push	es
  2499 000007C4 E863FF                  		call	EnsureA20On
  2500                                  		;mov	ax,0FFFFh	; HMA seg
  2501                                  		;mov	es,ax
  2502                                  		; 03/10/2023 - Retro DOS v5.0
  2503 000007C7 6AFF                    		push	0FFFFh
  2504 000007C9 07                      		pop	es
  2505 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  2506                                  		; 07/08/2023
  2507                                  		;mov	cx,10h		; size of vdisk	header
  2508 000007CD 89F9                    		mov	cx,di ; 16
  2509                                  		; 03/10/2023
  2510 000007CF 31C0                    		xor	ax,ax
  2511                                  		;inc	ax ; ax = 0
  2512 000007D1 F3AB                    		rep stosw		; clear	it
  2513 000007D3 07                      		pop	es
  2514 000007D4 5F                      		pop	di
  2515 000007D5 59                      		pop	cx
  2516                                  		;pop	ax ; 07/08/2023
  2517 000007D6 C3                      		retn
  2518                                  
  2519                                  ; ----------------------------------------------------------------------------
  2520                                  
  2521                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2522                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2523                                  
  2524                                  ; 09/12/2022
  2525                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2526                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2527                                  ; (followings are in sysinit segment)
  2528                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2529                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2530                                  ;DEVICELIST	equ 273h
  2531                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2532                                  ;MEMORYSIZE	equ 292h	
  2533                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2534                                  ;DEFAULTDRIVE	equ 296h
  2535                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2536                                  ;;currentdoslocation equ 271h
  2537                                  ;CURRENTDOSLOCATION equ 271h
  2538                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2539                                  ;SYSINITSTART	equ 267h
  2540                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2541                                  ; 18/10/2022
  2542                                  ;toomanydrivesflag equ 3FFh 
  2543                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2544                                  
  2545                                  ; ----------------------------------------------------------------------------
  2546                                  
  2547                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2548                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  2549                                  
  2550                                  %if 1
  2551                                  
  2552 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2553                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2554                                  					; (procedure in	SYSINIT	segment)
  2555                                  ; 17/10/2022
  2556 000007D9 [CE0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2557 000007DB D904                    		dw SYSINITSEG		; 08/08/2023
  2558                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2559                                  					; 0473h for MSDOS 6.21 IO.SYS
  2560                                  ;SR;
  2561                                  ; A communication block has been setup between the DOS and the BIOS. All
  2562                                  ;the data starting from SysinitPresent will be part of the data block. 
  2563                                  ;Right now, this is the only data being communicated. It can be expanded 
  2564                                  ;later to add more stuff
  2565                                  
  2566 000007DD 00                      SysinitPresent:	db 0
  2567                                  
  2568                                  %endif
  2569                                  
  2570                                  ; ----------------------------------------------------------------------------
  2571                                  
  2572                                  ;************************************************************************
  2573                                  ;*									*
  2574                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2575                                  ;*	  it returns through one of the three functions that follow.	*
  2576                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2577                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2578                                  ;*									*
  2579                                  ;************************************************************************
  2580                                  
  2581                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2582                                  %if 0	; 20/09/2023
  2583                                  int_2f:		
  2584                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2585                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2586                                  
  2587                                  ; ----------------------------------------------------------------------------
  2588                                  
  2589                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2590                                  ; note:  is it really necessary to transiton out and then back in?
  2591                                  ;	 It's not as if this is a really speed critical function.
  2592                                  ;	 might as well do whatever's most compact.
  2593                                  
  2594                                  i2f_dskentry:
  2595                                  		jmp	dsk_entry
  2596                                  
  2597                                  ; ----------------------------------------------------------------------------
  2598                                  
  2599                                  ;************************************************************************
  2600                                  ;*									*
  2601                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2602                                  ;*		is done. presently does nothing. affects no		*
  2603                                  ;*		registers!						*
  2604                                  ;*									*
  2605                                  ;************************************************************************
  2606                                  
  2607                                  ; 09/12/2022
  2608                                  ; re_init_:
  2609                                  re_init:				; called back by sysinit after
  2610                                  		retf			; a bunch of stuff is done.
  2611                                  					; presently does nothing
  2612                                  %endif
  2613                                  
  2614                                  ; ----------------------------------------------------------------------------
  2615                                  
  2616                                  ;SR; WIN386 support
  2617                                  
  2618                                  ; WIN386 instance data structure
  2619                                  ;
  2620                                  ; Here is a Win386 startup info structure which we set up and to which
  2621                                  ; we return a pointer when Win386 initializes.
  2622                                  
  2623 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  2624                                  					; Startup Info for Win386
  2625 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  2626 000007E4 00000000                		dd 0			; a field we don't need
  2627 000007E8 00000000                		dd 0			; another field	we don't need
  2628 000007EC [F007]                  SI_Instance:	dw Instance_Table
  2629 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2630                                  
  2631                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2632                                  ; areas. Note that the address and size of the hardware stacks must
  2633                                  ; be calculated and inserted at boot time.
  2634                                  
  2635 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  2636 000007F4 0200                    		dw 2			; ... 2	bytes
  2637 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  2638 000007FA 1400                    		dw 14h			; ... 14H bytes
  2639 000007FC [0C00]                  		dw altah		; a con	device buffer...
  2640 000007FE 7000                    		dw 70h			; Bios_Data segment
  2641 00000800 0100                    		dw 1			; ... 1 byte
  2642                                  
  2643                                  NextStack:
  2644                                  
  2645                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2646                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2647                                  ;	That's just fine as long as these are the last items
  2648                                  ;	in the instance list since the first item is initialized
  2649                                  ;	to 0000 at load time.
  2650                                  
  2651 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  2652 00000806 0200                    		dw 2			; ... 2 bytes
  2653 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2654 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2655 0000080E 00000000                		dd 0			; terminate the	instance table
  2656                                  
  2657                                  					;SR;
  2658 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  2659                                  					; Win386 is running or not
  2660                                  ;-----------------------------------------------------------------------------
  2661                                  
  2662                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2663                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  2664                                  
  2665                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2666                                  ;when we call it including checking of A20. The code being only about 
  2667                                  ;30 bytes, we might as well put it in BIOS_DATA
  2668                                  
  2669                                  V86_Crit_SetFocus:			
  2670 00000813 57                      		push	di
  2671 00000814 06                      		push	es
  2672 00000815 53                      		push	bx
  2673 00000816 50                      		push	ax
  2674 00000817 31FF                    		xor	di,di
  2675 00000819 8EC7                    		mov	es,di
  2676 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  2677 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  2678 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2679                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2680                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2681 00000823 8CC0                    		mov	ax, es
  2682 00000825 09F8                    		or	ax, di
  2683 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2684                                  					; Set up stack frame to	simulate a call.
  2685 00000829 0E                      		push	cs
  2686                                  		;;mov	ax,offset Skip
  2687                                  		;mov	ax,Skip
  2688                                  		;push	ax
  2689                                  		; 03/10/2023 - Retro DOS v5.0
  2690 0000082A 68[3308]                		push	Skip
  2691 0000082D 06                      		push	es
  2692 0000082E 57                      		push	di		; API far call address
  2693 0000082F B80100                  		mov	ax,1		; SetFocus function number
  2694 00000832 CB                      		retf			; do the call
  2695                                  ;-----------------------------------------------------------------------------
  2696                                  
  2697                                  Skip:					
  2698 00000833 58                      		pop	ax
  2699 00000834 5B                      		pop	bx
  2700 00000835 07                      		pop	es
  2701 00000836 5F                      		pop	di
  2702 00000837 CB                      		retf
  2703                                  
  2704                                  ;End WIN386 support
  2705                                  
  2706                                  ; ----------------------------------------------------------------------------
  2707                                  
  2708                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2709                                  %if 0
  2710                                  
  2711                                  FreeHMAPtr:	dw 0FFFFh		
  2712                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2713                                  					; (procedure in	SYSINIT	segment)
  2714                                  ; 17/10/2022
  2715                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2716                                  		dw SYSINITSEG		; 08/08/2023
  2717                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2718                                  					; 0473h for MSDOS 6.21 IO.SYS
  2719                                  ;SR;
  2720                                  ; A communication block has been setup between the DOS and the BIOS. All
  2721                                  ;the data starting from SysinitPresent will be part of the data block. 
  2722                                  ;Right now, this is the only data being communicated. It can be expanded 
  2723                                  ;later to add more stuff
  2724                                  
  2725                                  SysinitPresent:	db 0
  2726                                  		
  2727                                  endfloppy:	db 0, 0
  2728                                  
  2729                                  %endif
  2730                                  	
  2731                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2732                                  
  2733                                  	endfloppy:
  2734 00000838 00                      		db 0
  2735                                  
  2736                                  	; 03/10/2023
  2737                                  
  2738                                  numxdiv	equ ($-BData_start)
  2739                                  numxmod	equ (numxdiv % 16)
  2740                                  
  2741                                  %if (numxmod>0) & (numxmod<16)
  2742 00000839 00<rep 7h>              		times (16-numxmod) db 0
  2743                                  %endif
  2744                                  
  2745                                  ; ----------------------------------------------------------------------------			
  2746                                  
  2747                                  ; Bios_Data ends
  2748                                  	
  2749                                  ; Possibly disposable BIOS data
  2750                                  ; This data follows the	regular	BIOS data,
  2751                                  ; and is part of the same group.
  2752                                  
  2753                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2754                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  2755                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  2756                                  
  2757                                  ; 03/10/2023
  2758 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  2758 00000849 2020               
  2759                                  
  2760 0000084B 80                      harddrv:	db 80h			
  2761                                  
  2762                                  end96tpi:
  2763                                  
  2764                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2765                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  2766                                  
  2767                                  ;;*********************************************************************
  2768                                  ;;memory allocation for bdss
  2769                                  ;;*********************************************************************
  2770                                  ;
  2771                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2772                                  ;
  2773                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2774                                  ;
  2775                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2776                                  
  2777                                  
  2778                                  ; 09/12/2023
  2779                                  %if 1
  2780                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  2781                                  
  2782 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  2783                                  					; max_mini_dsk_num equ 23
  2784                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  2785                                  					; currently max. 25
  2786                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  2787                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  2788                                  					; BDS.link
  2789 0000084E 0000                    		dw 0
  2790 00000850 50                      		db 80			; BDS.drivenum
  2791 00000851 03                      		db 3			; BDS.drivelet
  2792 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  2793                                  					; 53 bytes BPB for FAT32 fs
  2794                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  2795                                  					; .bytespersec
  2796 00000854 01                      		db 1			; .secperclus
  2797 00000855 0100                    		dw 1			; .resectors
  2798 00000857 02                      		db 2			; .fats
  2799 00000858 1000                    		dw 16			; .direntries
  2800 0000085A 0000                    		dw 0			; .totalsec16
  2801 0000085C F8                      		db 0F8h			; .media
  2802 0000085D 0100                    		dw 1			; .fatsecs16
  2803 0000085F 0000                    		dw 0			; .secpertrack
  2804 00000861 0000                    		dw 0			; .heads
  2805 00000863 00000000                		dd 0			; .hiddensectors
  2806 00000867 00000000                		dd 0			; .totalsecs32
  2807                                  					; (End of FAT12/FAT16 BPB)
  2808                                  					;
  2809                                  					; FAT32 extensions to BDS
  2810 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  2811 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  2812 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  2813 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  2814 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  2815 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  2816 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  2817 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  2818 00000888 0000                    		dw 0			; BDS.opcnt
  2819 0000088A 03                      		db 3
  2820 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  2821 0000088D 2800                    		dw 40
  2822 0000088F 00<rep 25h>             		times 37 db 0
  2823 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  2824 000008B8 00<rep Ch>              		times 12 db 0
  2825 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  2826 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  2827 000008C7 0000                    		dw 0			; BDS.tim_hi
  2828 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  2828 000008D2 202000             
  2829 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  2830 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  2831 000008E2 FFFF                    bds_1:		dw 0FFFFh
  2832 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2832 000008ED 0210000000F8       
  2833 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2833 000008FC 000000000000000000 
  2834 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2834 0000090E FFFFFF0000         
  2835 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2835 0000091C 0000000003200028   
  2836 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2836 0000092D 000000000000000000 
  2837 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2837 0000093F 000000000000000000 
  2838 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2838 00000951 0000000000         
  2839 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2839 0000095F 4E4F204E41         
  2840 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2840 0000096D 00004641           
  2841 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2842 00000978 FFFF                    bds_2:		dw 0FFFFh
  2843 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2843 00000983 0210000000F8       
  2844 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2844 00000992 000000000000000000 
  2845 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2845 000009A4 FFFFFF0000         
  2846 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2846 000009B2 0000000003200028   
  2847 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2847 000009C3 000000000000000000 
  2848 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2848 000009D5 000000000000000000 
  2849 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2849 000009E7 0000000000         
  2850 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2850 000009F5 4E4F204E41         
  2851 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2851 00000A03 00004641           
  2852 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2853 00000A0E FFFF                    bds_3:		dw 0FFFFh
  2854 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2854 00000A19 0210000000F8       
  2855 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2855 00000A28 000000000000000000 
  2856 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2856 00000A3A FFFFFF0000         
  2857 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2857 00000A48 0000000003200028   
  2858 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2858 00000A59 000000000000000000 
  2859 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2859 00000A6B 000000000000000000 
  2860 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2860 00000A7D 0000000000         
  2861 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2861 00000A8B 4E4F204E41         
  2862 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2862 00000A99 00004641           
  2863 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2864 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  2865 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2865 00000AAF 0210000000F8       
  2866 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2866 00000ABE 000000000000000000 
  2867 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2867 00000AD0 FFFFFF0000         
  2868 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2868 00000ADE 0000000003200028   
  2869 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2869 00000AEF 000000000000000000 
  2870 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2870 00000B01 000000000000000000 
  2871 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2871 00000B13 0000000000         
  2872 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2872 00000B21 4E4F204E41         
  2873 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2873 00000B2F 00004641           
  2874 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2875 00000B3A FFFF                    		dw 0FFFFh
  2876 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2876 00000B45 0210000000F8       
  2877 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2877 00000B54 000000000000000000 
  2878 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2878 00000B66 FFFFFF0000         
  2879 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2879 00000B74 0000000003200028   
  2880 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2880 00000B85 000000000000000000 
  2881 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2881 00000B97 000000000000000000 
  2882 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2882 00000BA9 0000000000         
  2883 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2883 00000BB7 4E4F204E41         
  2884 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2884 00000BC5 00004641           
  2885 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2886 00000BD0 FFFF                    		dw 0FFFFh
  2887 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2887 00000BDB 0210000000F8       
  2888 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2888 00000BEA 000000000000000000 
  2889 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2889 00000BFC FFFFFF0000         
  2890 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2890 00000C0A 0000000003200028   
  2891 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2891 00000C1B 000000000000000000 
  2892 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2892 00000C2D 000000000000000000 
  2893 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2893 00000C3F 0000000000         
  2894 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2894 00000C4D 4E4F204E41         
  2895 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2895 00000C5B 00004641           
  2896 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2897 00000C66 FFFF                    		dw 0FFFFh
  2898 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2898 00000C71 0210000000F8       
  2899 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2899 00000C80 000000000000000000 
  2900 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2900 00000C92 FFFFFF0000         
  2901 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2901 00000CA0 0000000003200028   
  2902 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2902 00000CB1 000000000000000000 
  2903 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2903 00000CC3 000000000000000000 
  2904 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2904 00000CD5 0000000000         
  2905 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2905 00000CE3 4E4F204E41         
  2906 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2906 00000CF1 00004641           
  2907 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2908 00000CFC FFFF                    		dw 0FFFFh
  2909 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2909 00000D07 0210000000F8       
  2910 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2910 00000D16 000000000000000000 
  2911 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2911 00000D28 FFFFFF0000         
  2912 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2912 00000D36 0000000003200028   
  2913 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2913 00000D47 000000000000000000 
  2914 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2914 00000D59 000000000000000000 
  2915 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2915 00000D6B 0000000000         
  2916 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2916 00000D79 4E4F204E41         
  2917 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2917 00000D87 00004641           
  2918 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2919 00000D92 FFFF                    		dw 0FFFFh
  2920 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2920 00000D9D 0210000000F8       
  2921 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2921 00000DAC 000000000000000000 
  2922 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2922 00000DBE FFFFFF0000         
  2923 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2923 00000DCC 0000000003200028   
  2924 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2924 00000DDD 000000000000000000 
  2925 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2925 00000DEF 000000000000000000 
  2926 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2926 00000E01 0000000000         
  2927 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2927 00000E0F 4E4F204E41         
  2928 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2928 00000E1D 00004641           
  2929 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2930 00000E28 FFFF                    		dw 0FFFFh
  2931 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2931 00000E33 0210000000F8       
  2932 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2932 00000E42 000000000000000000 
  2933 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2933 00000E54 FFFFFF0000         
  2934 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2934 00000E62 0000000003200028   
  2935 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2935 00000E73 000000000000000000 
  2936 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2936 00000E85 000000000000000000 
  2937 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2937 00000E97 0000000000         
  2938 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2938 00000EA5 4E4F204E41         
  2939 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2939 00000EB3 00004641           
  2940 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2941 00000EBE FFFF                    		dw 0FFFFh
  2942 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2942 00000EC9 0210000000F8       
  2943 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2943 00000ED8 000000000000000000 
  2944 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2944 00000EEA FFFFFF0000         
  2945 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2945 00000EF8 0000000003200028   
  2946 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2946 00000F09 000000000000000000 
  2947 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2947 00000F1B 000000000000000000 
  2948 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2948 00000F2D 0000000000         
  2949 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2949 00000F3B 4E4F204E41         
  2950 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2950 00000F49 00004641           
  2951 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2952 00000F54 FFFF                    		dw 0FFFFh
  2953 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2953 00000F5F 0210000000F8       
  2954 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2954 00000F6E 000000000000000000 
  2955 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2955 00000F80 FFFFFF0000         
  2956 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2956 00000F8E 0000000003200028   
  2957 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2957 00000F9F 000000000000000000 
  2958 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2958 00000FB1 000000000000000000 
  2959 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2959 00000FC3 0000000000         
  2960 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2960 00000FD1 4E4F204E41         
  2961 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2961 00000FDF 00004641           
  2962 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2963 00000FEA FFFF                    		dw 0FFFFh
  2964 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2964 00000FF5 0210000000F8       
  2965 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2965 00001004 000000000000000000 
  2966 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2966 00001016 FFFFFF0000         
  2967 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2967 00001024 0000000003200028   
  2968 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2968 00001035 000000000000000000 
  2969 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2969 00001047 000000000000000000 
  2970 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2970 00001059 0000000000         
  2971 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2971 00001067 4E4F204E41         
  2972 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2972 00001075 00004641           
  2973 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2974 00001080 FFFF                    		dw 0FFFFh
  2975 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2975 0000108B 0210000000F8       
  2976 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2976 0000109A 000000000000000000 
  2977 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2977 000010AC FFFFFF0000         
  2978 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2978 000010BA 0000000003200028   
  2979 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2979 000010CB 000000000000000000 
  2980 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2980 000010DD 000000000000000000 
  2981 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2981 000010EF 0000000000         
  2982 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2982 000010FD 4E4F204E41         
  2983 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2983 0000110B 00004641           
  2984 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2985 00001116 FFFF                    		dw 0FFFFh
  2986 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2986 00001121 0210000000F8       
  2987 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2987 00001130 000000000000000000 
  2988 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2988 00001142 FFFFFF0000         
  2989 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2989 00001150 0000000003200028   
  2990 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2990 00001161 000000000000000000 
  2991 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2991 00001173 000000000000000000 
  2992 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2992 00001185 0000000000         
  2993 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2993 00001193 4E4F204E41         
  2994 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2994 000011A1 00004641           
  2995 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2996 000011AC FFFF                    		dw 0FFFFh
  2997 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2997 000011B7 0210000000F8       
  2998 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2998 000011C6 000000000000000000 
  2999 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2999 000011D8 FFFFFF0000         
  3000 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3000 000011E6 0000000003200028   
  3001 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3001 000011F7 000000000000000000 
  3002 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3002 00001209 000000000000000000 
  3003 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3003 0000121B 0000000000         
  3004 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3004 00001229 4E4F204E41         
  3005 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3005 00001237 00004641           
  3006 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3007 00001242 FFFF                    		dw 0FFFFh
  3008 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3008 0000124D 0210000000F8       
  3009 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3009 0000125C 000000000000000000 
  3010 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3010 0000126E FFFFFF0000         
  3011 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3011 0000127C 0000000003200028   
  3012 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3012 0000128D 000000000000000000 
  3013 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3013 0000129F 000000000000000000 
  3014 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3014 000012B1 0000000000         
  3015 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3015 000012BF 4E4F204E41         
  3016 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3016 000012CD 00004641           
  3017 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3018 000012D8 FFFF                    		dw 0FFFFh
  3019 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3019 000012E3 0210000000F8       
  3020 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3020 000012F2 000000000000000000 
  3021 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3021 00001304 FFFFFF0000         
  3022 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3022 00001312 0000000003200028   
  3023 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3023 00001323 000000000000000000 
  3024 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3024 00001335 000000000000000000 
  3025 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3025 00001347 0000000000         
  3026 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3026 00001355 4E4F204E41         
  3027 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3027 00001363 00004641           
  3028 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3029 0000136E FFFF                    		dw 0FFFFh
  3030 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3030 00001379 0210000000F8       
  3031 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3031 00001388 000000000000000000 
  3032 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3032 0000139A FFFFFF0000         
  3033 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3033 000013A8 0000000003200028   
  3034 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3034 000013B9 000000000000000000 
  3035 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3035 000013CB 000000000000000000 
  3036 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3036 000013DD 0000000000         
  3037 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3037 000013EB 4E4F204E41         
  3038 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3038 000013F9 00004641           
  3039 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3040 00001404 FFFF                    		dw 0FFFFh
  3041 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3041 0000140F 0210000000F8       
  3042 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3042 0000141E 000000000000000000 
  3043 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3043 00001430 FFFFFF0000         
  3044 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3044 0000143E 0000000003200028   
  3045 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3045 0000144F 000000000000000000 
  3046 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3046 00001461 000000000000000000 
  3047 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3047 00001473 0000000000         
  3048 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3048 00001481 4E4F204E41         
  3049 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3049 0000148F 00004641           
  3050 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3051 0000149A FFFF                    		dw 0FFFFh
  3052 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3052 000014A5 0210000000F8       
  3053 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3053 000014B4 000000000000000000 
  3054 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3054 000014C6 FFFFFF0000         
  3055 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3055 000014D4 0000000003200028   
  3056 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3056 000014E5 000000000000000000 
  3057 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3057 000014F7 000000000000000000 
  3058 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3058 00001509 0000000000         
  3059 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3059 00001517 4E4F204E41         
  3060 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3060 00001525 00004641           
  3061 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3062 00001530 FFFF                    		dw 0FFFFh
  3063 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3063 0000153B 0210000000F8       
  3064 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3064 0000154A 000000000000000000 
  3065 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3065 0000155C FFFFFF0000         
  3066 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3066 0000156A 0000000003200028   
  3067 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3067 0000157B 000000000000000000 
  3068 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3068 0000158D 000000000000000000 
  3069 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3069 0000159F 0000000000         
  3070 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3070 000015AD 4E4F204E41         
  3071 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3071 000015BB 00004641           
  3072 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3073 000015C6 FFFF                    		dw 0FFFFh
  3074 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3074 000015D1 0210000000F8       
  3075 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3075 000015E0 000000000000000000 
  3076 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3076 000015F2 FFFFFF0000         
  3077 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3077 00001600 0000000003200028   
  3078 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3078 00001611 000000000000000000 
  3079 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3079 00001623 000000000000000000 
  3080 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3080 00001635 0000000000         
  3081 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3081 00001643 4E4F204E41         
  3082 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3082 00001651 00004641           
  3083 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3084 0000165C FFFF                    bds_24:		dw 0FFFFh
  3085 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3085 00001667 0210000000F8       
  3086 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3086 00001676 000000000000000000 
  3087 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3087 00001688 FFFFFF0000         
  3088 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3088 00001696 0000000003200028   
  3089 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3089 000016A7 000000000000000000 
  3090 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3090 000016B9 000000000000000000 
  3091 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3091 000016CB 0000000000         
  3092 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3092 000016D9 4E4F204E41         
  3093 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3093 000016E7 00004641           
  3094 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3095                                  
  3096                                  %endif
  3097                                  
  3098                                  ; 09/12/2023
  3099                                  %if 0
  3100                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  3101                                  
  3102                                  bdss:		dw 0FFFFh		
  3103                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3104                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3105                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3106                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3107                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3108                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3109                                  		db 32h,	20h, 20h, 20h, 0
  3110                                  		dw 0FFFFh
  3111                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3112                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3113                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3114                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3115                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3116                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3117                                  		db 32h,	20h, 20h, 20h, 0
  3118                                  		dw 0FFFFh
  3119                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3120                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3121                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3122                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3123                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3124                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3125                                  		db 32h,	20h, 20h, 20h, 0
  3126                                  		dw 0FFFFh
  3127                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3128                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3129                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3130                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3131                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3132                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3133                                  		db 32h,	20h, 20h, 20h, 0
  3134                                  		dw 0FFFFh
  3135                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3136                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3137                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3138                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3139                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3140                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3141                                  		db 32h,	20h, 20h, 20h, 0
  3142                                  		dw 0FFFFh
  3143                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3144                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3145                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3146                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3147                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3148                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3149                                  		db 32h,	20h, 20h, 20h, 0
  3150                                  		dw 0FFFFh
  3151                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3152                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3153                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3154                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3155                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3156                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3157                                  		db 32h,	20h, 20h, 20h, 0
  3158                                  		dw 0FFFFh
  3159                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3160                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3161                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3162                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3163                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3164                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3165                                  		db 32h,	20h, 20h, 20h, 0
  3166                                  		dw 0FFFFh
  3167                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3168                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3169                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3170                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3171                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3172                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3173                                  		db 32h,	20h, 20h, 20h, 0
  3174                                  		dw 0FFFFh
  3175                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3176                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3177                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3178                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3179                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3180                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3181                                  		db 32h,	20h, 20h, 20h, 0
  3182                                  		dw 0FFFFh
  3183                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3184                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3185                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3186                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3187                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3188                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3189                                  		db 32h,	20h, 20h, 20h, 0
  3190                                  		dw 0FFFFh
  3191                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3192                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3193                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3194                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3195                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3196                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3197                                  		db 32h,	20h, 20h, 20h, 0
  3198                                  		dw 0FFFFh
  3199                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3200                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3201                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3202                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3203                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3204                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3205                                  		db 32h,	20h, 20h, 20h, 0
  3206                                  		dw 0FFFFh
  3207                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3208                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3209                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3210                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3211                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3212                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3213                                  		db 32h,	20h, 20h, 20h, 0
  3214                                  		dw 0FFFFh
  3215                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3216                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3217                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3218                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3219                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3220                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3221                                  		db 32h,	20h, 20h, 20h, 0
  3222                                  		dw 0FFFFh
  3223                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3224                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3225                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3226                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3227                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3228                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3229                                  		db 32h,	20h, 20h, 20h, 0
  3230                                  		dw 0FFFFh
  3231                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3232                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3233                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3234                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3235                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3236                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3237                                  		db 32h,	20h, 20h, 20h, 0
  3238                                  		dw 0FFFFh
  3239                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3240                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3241                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3242                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3243                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3244                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3245                                  		db 32h,	20h, 20h, 20h, 0
  3246                                  		dw 0FFFFh
  3247                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3248                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3249                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3250                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3251                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3252                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3253                                  		db 32h,	20h, 20h, 20h, 0
  3254                                  		dw 0FFFFh
  3255                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3256                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3257                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3258                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3259                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3260                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3261                                  		db 32h,	20h, 20h, 20h, 0
  3262                                  		dw 0FFFFh
  3263                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3264                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3265                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3266                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3267                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3268                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3269                                  		db 32h,	20h, 20h, 20h, 0
  3270                                  		dw 0FFFFh
  3271                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3272                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3273                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3274                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3275                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3276                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3277                                  		db 32h,	20h, 20h, 20h, 0
  3278                                  		dw 0FFFFh
  3279                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3280                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3281                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3282                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3283                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3284                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3285                                  		db 32h,	20h, 20h, 20h, 0
  3286                                  		dw 0FFFFh
  3287                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3288                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3289                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3290                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3291                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3292                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3293                                  		db 32h,	20h, 20h, 20h, 0
  3294                                  		dw 0FFFFh
  3295                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3296                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3297                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3298                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3299                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3300                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3301                                  		db 32h,	20h, 20h, 20h, 0
  3302                                  		db 0
  3303                                  %endif
  3304                                  
  3305                                  ;---------------------------------------------------------------------------
  3306                                  ; Possibly disposable data, goes at end of data group
  3307                                  ;***************************************************************************
  3308                                  
  3309                                  ; Possibly disposable data, goes at end of data group
  3310                                  
  3311                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  3312                                  ;
  3313                                  ;	entry:	(ah) = function, 02 or 0a for read.
  3314                                  ;		(dl) = drive number (80h or 81h).
  3315                                  ;		(dh) = head number.
  3316                                  ;		(ch) = cylinder number.
  3317                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  3318                                  ;		(al) = number of sectors.
  3319                                  ;		(es:bx) = address of read buffer.
  3320                                  ;		for more on register contents see rom bios listing.
  3321                                  ;		stack set up for return by an iret.
  3322                                  ;
  3323                                  ;	exit:	(ah) = status of current operation.
  3324                                  ;		(cy) = 1 if failed, 0 if successful.
  3325                                  ;		for other register contents see rom bios listing.
  3326                                  ;
  3327                                  ;	uses:	
  3328                                  ;
  3329                                  ;
  3330                                  ;	warning: uses old13 vector for non-read calls.
  3331                                  ;		does direct calls to the at rom.
  3332                                  ;		does segment arithmatic.
  3333                                  ;
  3334                                  ;	effects: performs disk i/o operation.
  3335                                  
  3336                                  ; 16/10/2022
  3337                                  ; 28/05/2019
  3338                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  3339                                  
  3340                                  ;* offsets into cmd_block for registers
  3341                                  
  3342                                  pre_comp equ 0	;write pre-compensation
  3343                                  sec_cnt	 equ 1	;sector count
  3344                                  sec_num	 equ 2	;sector number
  3345                                  cyl_low	 equ 3	;cylinder number, low part
  3346                                  cyl_high equ 4	;cylinder number, high part
  3347                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  3348                                  		;            bit 4 = drive number, bits 3-0 have head number)
  3349                                  cmd_reg  equ 6	;command register
  3350                                  
  3351                                  ; 01/10/2022
  3352                                  disk_status1	equ 74h
  3353                                  hf_num		equ 75h
  3354                                  control_byte	equ 76h
  3355                                  
  3356                                  ibm_disk_io:				
  3357 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  3358 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  3359 000016F7 80FC02                  		cmp	ah, 2
  3360 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  3361 000016FC 80FC0A                  		cmp	ah, 0Ah
  3362 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  3363                                  atd1:
  3364 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  3365                                  		;jmp	cs:Old13	; use rom int 13h handler
  3366                                  ;-----------------------------------------------------------------------------
  3367                                  
  3368                                  atd2:					
  3369 00001706 53                      		push	bx
  3370 00001707 51                      		push	cx
  3371 00001708 52                      		push	dx
  3372 00001709 57                      		push	di
  3373 0000170A 1E                      		push	ds
  3374 0000170B 06                      		push	es
  3375 0000170C 50                      		push	ax
  3376 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  3377                                  					; establish bios segment addressing
  3378 00001710 8ED8                    		mov	ds, ax
  3379                                  		; 16/10/2022
  3380 00001712 C606740000              		mov	byte [disk_status1], 0
  3381                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  3382                                  					; initially no error code.
  3383 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  3384 0000171A 3A167500                		cmp	dl, [hf_num]
  3385                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  3386 0000171E 7207                    		jb	short atd3	; disk number in range
  3387                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  3388 00001720 C606740001              		mov	byte [disk_status1], 1
  3389 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  3390                                  					; return
  3391                                  ; ----------------------------------------------------------------------------
  3392                                  
  3393                                  atd3:					
  3394 00001727 53                      		push	bx
  3395 00001728 8CC0                    		mov	ax, es
  3396 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  3397 0000172D 01D8                    		add	ax, bx
  3398 0000172F 8EC0                    		mov	es, ax
  3399 00001731 5B                      		pop	bx
  3400 00001732 83E30F                  		and	bx, 0Fh
  3401 00001735 0E                      		push	cs
  3402 00001736 E8DF00                  		call	check_dma
  3403 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  3404 0000173B 58                      		pop	ax
  3405 0000173C 50                      		push	ax
  3406 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  3407 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  3408 00001743 EE                      		out	dx, al		; write out command modifier
  3409 00001744 E86B00                  		call	docmd		; carry out command
  3410                                  ; ----------------------------------------------------------------------------
  3411                                  
  3412                                  atd4:	
  3413                                  
  3414                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  3415                                  ;	      and save a couple bytes while were at it.
  3416                                  				
  3417 00001747 58                      		pop	ax
  3418                                  		;mov	ah, ds:74h	; [disk_status1]
  3419 00001748 8A267400                		mov	ah, [disk_status1]
  3420 0000174C 08E4                    		or	ah, ah
  3421 0000174E 7401                    		jz	short atd5
  3422 00001750 F9                      		stc
  3423                                  atd5:					
  3424 00001751 07                      		pop	es
  3425 00001752 1F                      		pop	ds
  3426 00001753 5F                      		pop	di
  3427 00001754 5A                      		pop	dx
  3428 00001755 59                      		pop	cx
  3429 00001756 5B                      		pop	bx
  3430 00001757 CA0200                  		retf	2		; far return, dropping flags
  3431                                  
  3432                                  ; =============== S U B	R O U T	I N E ========================================
  3433                                  
  3434                                  ;***	setcmd - set up cmd_block for the disk operation
  3435                                  ;
  3436                                  ;	entry:	(ds) = bios data segment.
  3437                                  ;		(es:bx) in seg:000x form.
  3438                                  ;		other registers as in int 13h call
  3439                                  ;	
  3440                                  ;	exit:	cmd_block set up for disk read call.
  3441                                  ;		control_byte set up for disk operation.
  3442                                  ;		(al) = control byte modifier
  3443                                  ;
  3444                                  ;	sets the fields of cmd_block using the register contents
  3445                                  ;	and the contents of the disk parameter block for the given drive.
  3446                                  ;
  3447                                  ;	warning: (ax) destroyed.
  3448                                  ;		does direct calls to the at rom.
  3449                                  
  3450                                  setcmd:		; proc near		
  3451                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  3452                                  		; 16/10/2022
  3453 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  3454                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  3455 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  3456 00001762 80FC02                  		cmp	ah, 2
  3457 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  3458 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  3459                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  3460                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  3461                                  setc1:					
  3462 0000176C 88C8                    		mov	al, cl
  3463 0000176E 243F                    		and	al, 3Fh		; mask sector number
  3464                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  3465                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  3466 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  3467 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  3468 00001777 88C8                    		mov	al, cl
  3469 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  3470                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  3471 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  3472 0000177F 89D0                    		mov	ax, dx
  3473 00001781 C0E004                  		shl	al, 4		; drive	number
  3474 00001784 80E40F                  		and	ah, 0Fh
  3475 00001787 08E0                    		or	al, ah		; head number
  3476 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  3477                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  3478 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  3479 0000178E 06                      		push	es
  3480 0000178F 53                      		push	bx
  3481 00001790 0E                      		push	cs
  3482 00001791 E85C00                  		call	get_vec
  3483 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  3484                                  			 		; write pre-comp from disk parameters
  3485 00001798 C1E802                  		shr	ax, 2
  3486                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  3487 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  3488                                  					; only use low part
  3489 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  3490                                  					; control byte modifier
  3491 000017A2 5B                      		pop	bx
  3492 000017A3 07                      		pop	es
  3493                                  		;mov	ah, ds:76h	; [control_byte]
  3494 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  3495 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  3496 000017AB 08C4                    		or	ah, al
  3497                                  		;mov	ds:76h,	ah
  3498 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  3499 000017B1 C3                      		retn
  3500                                  
  3501                                  ; =============== S U B	R O U T	I N E ========================================
  3502                                  
  3503                                  ;***	docmd - carry out read operation to at hard disk
  3504                                  ;
  3505                                  ;	entry:	(es:bx) = address for read in data.
  3506                                  ;		cmd_block set up for disk read.
  3507                                  ;
  3508                                  ;	exit:	buffer at (es:bx) contains data read.
  3509                                  ;		disk_status1 set to error code (0 if success).
  3510                                  ;
  3511                                  ;	
  3512                                  ;
  3513                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  3514                                  ;		no check is made for dma boundary overrun.
  3515                                  ;
  3516                                  ;	effects: programs disk controller.
  3517                                  ;		performs disk input.
  3518                                  
  3519                                  docmd:		; proc near		
  3520 000017B2 89DF                    		mov	di, bx
  3521 000017B4 0E                      		push	cs
  3522 000017B5 E84000                  		call	command
  3523 000017B8 7535                    		jnz	short doc3
  3524                                  doc1:					
  3525 000017BA 0E                      		push	cs
  3526 000017BB E84200                  		call	waitt		; wait for controller to complete read
  3527 000017BE 752F                    		jnz	short doc3
  3528 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  3529 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  3530 000017C6 FC                      		cld			; string op goes up
  3531 000017C7 FA                      		cli			; disable interrupts
  3532                                  					; (bug was forgetting this)
  3533                                  
  3534                                  ;	M062 -- some of these old machines have intermittent failures
  3535                                  ;		when the read is done at full speed. Instead of using
  3536                                  ;		a string rep instruction, we'll use a loop. There is
  3537                                  ;		a slight performance hit, but it only affects these
  3538                                  ;		very old machines with an exact date code match, and
  3539                                  ;		it makes said machines more reliable
  3540                                  ;
  3541                                  ;M062	repz	insw		;read in sector
  3542                                  
  3543                                  rsct_loop:				
  3544 000017C8 6D                      		insw
  3545 000017C9 E2FD                    		loop	rsct_loop
  3546 000017CB FB                      		sti
  3547                                  		; 16/10/2022
  3548 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  3549                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  3550                                  					; (ds =	40h)
  3551 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  3552 000017D3 0E                      		push	cs
  3553 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  3554 000017D7 7216                    		jb	short doc3
  3555 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  3556 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  3557 000017DF FA                      		cli
  3558 000017E0 F36C                    		rep insb		; read in ecc
  3559 000017E2 FB                      		sti
  3560                                  doc2:					
  3561 000017E3 0E                      		push	cs
  3562 000017E4 E82900                  		call	check_status
  3563 000017E7 7506                    		jnz	short doc3	; operation failed
  3564                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  3565 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  3566 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  3567                                  doc3:					
  3568 000017EF C3                      		retn
  3569                                  
  3570                                  ; =============== S U B	R O U T	I N E ========================================
  3571                                  
  3572                                  ;***	define where the rom routines are actually located
  3573                                  ;	   in the buggy old AT BIOS that we might need to
  3574                                  ;	   install a special level of int13 handler for
  3575                                  
  3576                                  ; 16/10/2022
  3577                                  
  3578                                  romsegment 	equ 0F000h  ; segment
  3579                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  3580                                  romwait		equ 2E7Fh   ; offset in romsegment
  3581                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  3582                                  romcheck_status equ 2EF8h   ; offset in romsegment
  3583                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  3584                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  3585                                  romfret		equ 0FF65h  ; far return in rom	
  3586                                  
  3587                                  ;***	get_vec - get pointer to hard disk parameters.
  3588                                  ;
  3589                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  3590                                  ;
  3591                                  ;	exit:	(es:bx) = address of disk parameters table.
  3592                                  ;
  3593                                  ;	uses:	ax for segment computation.
  3594                                  ;
  3595                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  3596                                  ;	or 70h (disk 1).
  3597                                  ;	
  3598                                  ;	warning: (ax) destroyed.
  3599                                  ;		this does a direct call to the at rom.
  3600                                  
  3601                                  get_vec:	; proc near		
  3602                                  		;push	0FF65h		; romfret ; far	return in rom
  3603                                  		;jmp	far ptr	0F000h:2F8Eh
  3604                                  		; 16/10/2022
  3605 000017F0 6865FF                  		push	romfret		; far return in rom
  3606 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  3607                                  
  3608                                  ; =============== S U B	R O U T	I N E ========================================
  3609                                  
  3610                                  ;***	command - send contents of cmd_block to disk controller.
  3611                                  ;
  3612                                  ;	entry:	control_byte 
  3613                                  ;		cmd_block - set up with values for hard disk controller.
  3614                                  ;
  3615                                  ;	exit:	disk_status1 = error code.
  3616                                  ;		nz if error, zr for no error.
  3617                                  ;
  3618                                  ;
  3619                                  ;	warning: (ax), (cx), (dx) destroyed.
  3620                                  ;		does a direct call to the at rom.
  3621                                  ;
  3622                                  ;	effects: programs disk controller.
  3623                                  
  3624                                  command:	; proc near		
  3625                                  		;push	0FF65h		; romfret ; far	return in rom
  3626                                  		;jmp	far ptr	0F000h:2E1Eh
  3627                                  		; 16/10/2022
  3628 000017F8 6865FF                  		push	romfret		; far return in rom
  3629 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  3630                                  
  3631                                  ; =============== S U B	R O U T	I N E ========================================
  3632                                  
  3633                                  ;***	waitt - wait for disk interrupt
  3634                                  ;
  3635                                  ;	entry:	nothing.
  3636                                  ;
  3637                                  ;	exit:	disk_status1 = error code.
  3638                                  ;		nz if error, zr if no error.
  3639                                  ;
  3640                                  ;
  3641                                  ;	warning: (ax), (bl), (cx) destroyed.
  3642                                  ;		does a direct call to the at rom.
  3643                                  ;		
  3644                                  ;	effects: calls int 15h, function 9000h.
  3645                                  
  3646                                  waitt:		; proc near		
  3647                                  		;push	0FF65h		; romfret ; far	return in rom
  3648                                  		;jmp	far ptr	0F000h:2E7Fh
  3649                                  		; 16/10/2022
  3650 00001800 6865FF                  		push	romfret		; far return in rom
  3651 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  3652                                  
  3653                                  ; =============== S U B	R O U T	I N E ========================================
  3654                                  
  3655                                  ;***	wait_drq - wait for data request.
  3656                                  ;
  3657                                  ;	entry:	nothing.
  3658                                  ;
  3659                                  ;	exit:	disk_status1 = error code.
  3660                                  ;		cy if error, nc if no error.
  3661                                  ;
  3662                                  ;	warning: (al), (cx), (dx) destroyed.
  3663                                  ;		does a direct call to the at rom.
  3664                                  
  3665                                  wait_drq:	; proc near		
  3666                                  		;push	0FF65h		; romfret ; far	return in rom
  3667                                  		;jmp	far ptr	0F000h:2EE2h
  3668                                  		; 16/10/2022
  3669 00001808 6865FF                  		push	romfret		; far return in rom
  3670 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  3671                                  
  3672                                  ; =============== S U B	R O U T	I N E ========================================
  3673                                  
  3674                                  ;***	check_status - check hard disk status.
  3675                                  ;
  3676                                  ;	entry:	nothing.
  3677                                  ;
  3678                                  ;	exit:	disk_status1 = error code.
  3679                                  ;		nz if error, zr if no error.
  3680                                  ;
  3681                                  ;	warning: (ax), (cx), (dx) destroyed.
  3682                                  ;		does a direct call to the at rom.
  3683                                  
  3684                                  check_status:	; proc near		
  3685                                  		;push	0FF65h		; romfret ; far	return in rom
  3686                                  		;jmp	far ptr	0F000h:2EF8h
  3687                                  		; 16/10/2022
  3688 00001810 6865FF                  		push	romfret		; far return in rom
  3689 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  3690                                  
  3691                                  ; =============== S U B	R O U T	I N E ========================================
  3692                                  
  3693                                  ;***	check_dma - check for dma overrun 64k segment.
  3694                                  ;
  3695                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  3696                                  ;		cmd_block set up for operation.
  3697                                  ;
  3698                                  ;	exit:	disk_status1 - error code.
  3699                                  ;		cy if error, nc if no error.
  3700                                  ;
  3701                                  ;	warning: does a direct call to the at rom.
  3702                                  
  3703                                  check_dma:	; proc near		
  3704                                  		;push	0FF65h		; romfret ; far	return in rom
  3705                                  		;jmp	far ptr	0F000h:2F69h
  3706                                  		; 16/10/2022
  3707 00001818 6865FF                  		push	romfret		; far return in rom
  3708 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  3709                                  
  3710                                  ;-----------------------------------------------------------------------------
  3711                                  
  3712                                  endatrom:
  3713                                  
  3714                                  ; ----------------------------------------------------------------------------
  3715                                  
  3716                                  ;; M015 -- begin changes
  3717                                  ;;
  3718                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  3719                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  3720                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  3721                                  ;; If our init code detects this error, it will install this
  3722                                  ;; special Int13 hook through the same mechanism that was set
  3723                                  ;; up for the IBM patch above. This code is also dynamically
  3724                                  ;; relocated by MSINIT.
  3725                                  
  3726                                  compaq_disk_io:
  3727 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  3728                                  					;
  3729                                  					; the following	label defines the end of the at	rom patch.
  3730                                  					; this is used at configuration	time.
  3731                                  					;
  3732                                  					; warning!!!
  3733                                  					; this code will be dynamically	relocated by msinit
  3734 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  3735                                  no_hookit:				
  3736                                  		;jmp	cs:Old13
  3737                                  		; 16/10/2022
  3738 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  3739                                  
  3740                                  ; ----------------------------------------------------------------------------
  3741                                  
  3742                                  mebbe_hookit:
  3743 0000182A 80FA80                  		cmp	dl, 80h
  3744 0000182D 72F6                    		jb	short no_hookit
  3745 0000182F 1E                      		push	ds
  3746                                  		
  3747                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3748                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  3749                                  		;push	ax
  3750                                  		;mov	ax, 40h
  3751                                  		;mov	ds, ax
  3752                                  		;pop	ax
  3753 00001830 6A40                    		push	40h
  3754 00001832 1F                      		pop	ds
  3755                                  
  3756 00001833 9C                      		pushf
  3757                                  		;call	cs:Old13
  3758                                  		; 16/10/2022
  3759 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  3760 00001839 1F                      		pop	ds
  3761 0000183A CA0200                  		retf	2
  3762                                  
  3763                                  ; ----------------------------------------------------------------------------
  3764                                  
  3765 0000183D 00                      end_compaq_i13hook: db 0			
  3766                                  
  3767                                  ; =============== S U B	R O U T	I N E ========================================
  3768                                  
  3769                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3770                                  %if 0  
  3771                                  
  3772                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  3773                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  3774                                  
  3775                                  daycnt_to_day:	; proc far
  3776                                  
  3777                                  ; entry: [daycnt] = number of days since 1-1-80
  3778                                  ;
  3779                                  ; return: ch - century in bcd
  3780                                  ;	  cl - year in bcd
  3781                                  ;	  dh - month in bcd
  3782                                  ;	  dl - day in bcd
  3783                                  
  3784                                  		; 16/10/2022		
  3785                                  		push	word [cs:daycnt] ; save daycnt
  3786                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  3787                                  					; # days from 1-1-1980 to 1-1-2000
  3788                                  		jnb	short century20
  3789                                  		mov	byte [cs:base_century], 19
  3790                                  		mov	byte [cs:base_year], 80
  3791                                  		jmp	short years
  3792                                  ; ----------------------------------------------------------------------------
  3793                                  		
  3794                                  century20:				
  3795                                  		mov	byte [cs:base_century], 20
  3796                                  		mov	byte [cs:base_year], 0
  3797                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  3798                                  					; adjust daycnt
  3799                                  years:					
  3800                                  		xor	dx, dx
  3801                                  		mov	ax, [cs:daycnt]
  3802                                  		mov	bx, 1461	; (366+365*3)
  3803                                  					; # of days in a Leap year block
  3804                                  		div	bx		; AX = # of leap block,	DX = daycnt
  3805                                  		mov	[cs:daycnt], dx	; save daycnt left
  3806                                  		mov	bl, 4
  3807                                  		mul	bl		; AX = # of years. Less	than 100
  3808                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  3809                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  3810                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  3811                                  		jbe	short leapyear	; within 366+355+355+355 days.
  3812                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  3813                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  3814                                  		mov	cx, 3		; And next three years are normal
  3815                                  regularyear:				
  3816                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  3817                                  		jbe	short yeardone	; {if (daycnt >	365)
  3818                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  3819                                  		sub	word [cs:daycnt], 365	;   }
  3820                                  		loop	regularyear	; }
  3821                                  					;
  3822                                  					; should never fall through loop
  3823                                  leapyear:				
  3824                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  3825                                  					; change month table.
  3826                                  yeardone:				
  3827                                  		xor	bx, bx
  3828                                  		xor	dx, dx
  3829                                  		mov	ax, [cs:daycnt]
  3830                                  		;mov	si, offset month_tab
  3831                                  		mov	si, month_tab	; 19/10/2022
  3832                                  		mov	cx, 12
  3833                                  months:					
  3834                                  		inc	bl
  3835                                  
  3836                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3837                                  		;mov	dl, [cs:si]
  3838                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3839                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3840                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3841                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3842                                  		
  3843                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3844                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3845                                  					; dh=0
  3846                                  		jbe	short month_done
  3847                                  		inc	si		; next month
  3848                                  		sub	ax, dx		; adjust daycnt
  3849                                  		loop	months		;
  3850                                  					; should never fall through loop
  3851                                  month_done:				
  3852                                  		mov	byte [cs:month_tab+1], 28
  3853                                  					; restore month table value
  3854                                  		mov	dl, bl
  3855                                  		mov	dh, [cs:base_year]
  3856                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3857                                  		call	far [cs:bintobcd]
  3858                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3859                                  					; dl = bcd day,	al = month
  3860                                  		xchg	dl, al
  3861                                  		call	far [cs:bintobcd]
  3862                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3863                                  		xchg	dh, al
  3864                                  		call	far [cs:bintobcd]
  3865                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3866                                  		xchg	cl, al
  3867                                  		call	far [cs:bintobcd]
  3868                                  		;call	cs:bintobcd	; ch = bcd century
  3869                                  		mov	ch, al
  3870                                  		pop	word [cs:daycnt] ; restore original value
  3871                                  		retf
  3872                                  
  3873                                  enddaycnttoday:	
  3874                                  
  3875                                  %endif
  3876                                  
  3877                                  ; =============== S U B	R O U T	I N E ========================================
  3878                                  
  3879                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3880                                  %if 0  
  3881                                  
  3882                                  bin_to_bcd:	; proc far		; real time clock support
  3883                                  
  3884                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3885                                  ;into a bcd value in al. ah destroyed.	
  3886                                  		
  3887                                  		push	cx		
  3888                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3889                                  		mov	cl, 4
  3890                                  		shl	ah, cl		; mov the high digit to	high nibble
  3891                                  		or	al, ah
  3892                                  		pop	cx
  3893                                  		retf
  3894                                  %endif
  3895                                  
  3896                                  ; ----------------------------------------------------------------------------
  3897                                  
  3898                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3899                                  ; resume facility. the system clock needs to be reset after resume.
  3900                                  
  3901                                  ; the following routine is executed at resume time when the system
  3902                                  ; powered on after suspension. it reads the real time clock and
  3903                                  ; resets the system time and date, and then irets.
  3904                                  
  3905                                  ; warning!!! this code will be dynamically relocated by msinit.
  3906                                  
  3907                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3908                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3909                                  int_6Ch:
  3910 0000183E 0E                      		push	cs
  3911 0000183F 1F                      		pop	ds
  3912                                  		;cmp	byte [cs:inHMA], 0  
  3913 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  3914 00001845 7405                    		jz      short int6c
  3915 00001847 BB[2A07]                		mov     bx, EnsureA20On
  3916 0000184A FFD3                    		call    bx
  3917                                  int6c:					
  3918                                  		;push	cs
  3919                                  		;pop	ds
  3920 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  3921 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  3922 00001854 9D                      		popf
  3923 00001855 E81300                  		call	read_real_date	; get the date from the clock
  3924 00001858 FA                      		cli
  3925 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  3926 0000185D FB                      		sti
  3927 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  3928 00001861 FA                      		cli
  3929 00001862 B401                    		mov	ah, 1
  3930 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3931                                  					; CX:DX	= clock	count
  3932                                  					; Return: time of day set
  3933 00001866 FB                      		sti
  3934                                  		;jmp	int6c_ret_addr	; long jump
  3935                                  		; 16/10/2022
  3936 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  3937                                  
  3938                                  ; =============== S U B	R O U T	I N E ========================================
  3939                                  
  3940                                  ;   read_real_date reads real-time clock for date and returns the number
  3941                                  ;   of days elapsed since 1-1-80 in si
  3942                                  
  3943                                  read_real_date:	; proc near		
  3944 0000186B 50                      		push	ax
  3945 0000186C 51                      		push	cx
  3946 0000186D 52                      		push	dx
  3947 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3948 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3949                                  					; Return: CX:DX	= clock	count
  3950                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3951                                  					; midnight
  3952                                  					; Otherwise, AL	> 0
  3953 00001872 5A                      		pop	dx
  3954 00001873 59                      		pop	cx
  3955 00001874 58                      		pop	ax
  3956 00001875 50                      		push	ax
  3957 00001876 53                      		push	bx
  3958 00001877 51                      		push	cx
  3959 00001878 52                      		push	dx
  3960                                  		;mov	word [cs:daycnt2], 1
  3961                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3962                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3963 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  3964                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3965 0000187F B404                    		mov	ah, 4
  3966 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3967                                  					; Return: DL = day in BCD
  3968                                  					; DH = month in	BCD
  3969                                  					; CL = year in BCD
  3970                                  					; CH = century (19h or 20h)
  3971 00001883 7303                    		jnb	short read_ok
  3972 00001885 E98300                  		jmp	r_d_ret
  3973                                  ;-----------------------------------------------------------------------------
  3974                                  
  3975                                  read_ok:
  3976 00001888 882E[FC05]              		mov	[bin_date_time], ch
  3977 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  3978 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  3979 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  3980                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3981                                  		; 08/08/2023
  3982                                  		;mov	byte [daycnt2], 2
  3983 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  3984 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  3985 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  3986                                  		;mov	word [cs:daycnt2], 3
  3987                                  		; 08/08/2023
  3988                                  		;mov	byte [daycnt2], 3
  3989 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  3990 000018A5 E8DB00                  		call	date_verify
  3991 000018A8 7261                    		jb	short r_d_ret
  3992                                  		;mov	word [cs:daycnt2], 0
  3993                                  		; 08/08/2023
  3994 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  3995 000018AF E8A100                  		call	in_bin
  3996 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  3997 000018B5 98                      		cbw
  3998 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3999 000018BB 7503                    		jnz	short century_19 ; no
  4000 000018BD 83C064                  		add	ax, 100		; add in a century
  4001                                  century_19:				
  4002 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  4003 000018C3 B104                    		mov	cl, 4		; leap year every 4
  4004 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  4005 000018C7 88E3                    		mov	bl, ah		; save odd years
  4006 000018C9 98                      		cbw			; zero ah
  4007 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  4008                                  					; # of days in leap year blocks
  4009 000018CD F7E1                    		mul	cx
  4010                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  4011                                  		; 08/08/2023
  4012 000018CF A3[0006]                		mov	[daycnt2], ax
  4013 000018D2 88D8                    		mov	al, bl		; get odd years	count
  4014 000018D4 98                      		cbw
  4015 000018D5 09C0                    		or	ax, ax
  4016 000018D7 740B                    		jz	short leap_year
  4017 000018D9 B96D01                  		mov	cx, 365		; days in year
  4018 000018DC F7E1                    		mul	cx
  4019                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  4020                                  		; 08/08/2023
  4021 000018DE 0106[0006]              		add	[daycnt2], ax
  4022 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  4023                                  					; possibly account for a leap day
  4024                                  ;-----------------------------------------------------------------------------
  4025                                  
  4026                                  leap_year:
  4027 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  4028 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  4029                                  leap_adjustment:
  4030                                  		;inc	word [cs:daycnt2] ; account for leap day
  4031                                  		; 08/08/2023
  4032 000018EB FF06[0006]              		inc	word [daycnt2]
  4033                                  no_leap_adjustment:			
  4034 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  4035 000018F3 30ED                    		xor	ch, ch
  4036 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  4037                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  4038                                  		; 08/08/2023
  4039 000018F6 010E[0006]              		add	[daycnt2], cx
  4040 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  4041                                  		; 08/08/2023
  4042                                  		;xor	ch, ch
  4043 000018FE 49                      		dec	cx		; january starts at offset 0
  4044                                  		
  4045                                  		; 08/08/2023
  4046                                  		;shl	cx, 1		; word offset
  4047                                  		;;mov	si, month_table
  4048                                  		;add	si, cx
  4049                                  		;; 16/10/2022
  4050                                  		;; ds must be same with cs here, if so..
  4051                                  		;; what for cs: prefixes are used !?)
  4052                                  		;; mov	ax, [cs:si]
  4053                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  4054                                  		;mov	ax, [si]	; mov ax, [cs:si]
  4055                                  		;			; get #	days in	previous months
  4056                                  		;add	[cs:daycnt2], ax
  4057                                  
  4058                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  4059                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  4060 000018FF B400                    		mov	ah, 0
  4061 00001901 BE[8F04]                		mov	si, month_tab
  4062                                  r_d_sum_loop:
  4063 00001904 AC                      		lodsb
  4064 00001905 0106[0006]              		add	[daycnt2], ax
  4065 00001909 E2F9                    		loop	r_d_sum_loop
  4066                                  r_d_ret:
  4067                                  		;mov	si, [cs:daycnt2]
  4068                                  		; 08/08/2023
  4069 0000190B 8B36[0006]              		mov	si, [daycnt2]
  4070 0000190F 5A                      		pop	dx
  4071 00001910 59                      		pop	cx
  4072 00001911 5B                      		pop	bx
  4073 00001912 58                      		pop	ax
  4074 00001913 C3                      		retn
  4075                                  
  4076                                  ;-----------------------------------------------------------------------------
  4077                                  
  4078                                  r_t_retj:				
  4079 00001914 31C9                    		xor	cx, cx
  4080 00001916 31D2                    		xor	dx, dx
  4081 00001918 EB38                    		jmp	short r_t_ret
  4082                                  
  4083                                  ; =============== S U B	R O U T	I N E ========================================
  4084                                  
  4085                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  4086                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  4087                                  
  4088                                  read_real_time:	; proc near		
  4089 0000191A B402                    		mov	ah, 2
  4090 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  4091                                  					; Return: CH = hours in	BCD
  4092                                  					; CL = minutes in BCD
  4093                                  					; DH = seconds in BCD
  4094 0000191E 72F4                    		jb	short r_t_retj
  4095 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  4096 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  4097 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  4098 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  4099 00001931 E89F00                  		call	bcd_verify
  4100 00001934 72DE                    		jb	short r_t_retj
  4101 00001936 E88500                  		call	time_verify
  4102 00001939 72D9                    		jb	short r_t_retj
  4103 0000193B E81500                  		call	in_bin		; from bcd to bin
  4104 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  4105 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  4106 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  4107 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  4108                                  		; 16/10/2022
  4109                                  		; 17/09/2022
  4110                                  		; 31/05/2019
  4111 0000194E FF1E[0606]              		call	far [ttticks] 
  4112                                  		;call	dword ptr ttticks ; note: indirect far call
  4113                                  					; cx:dx	= number of ticks
  4114                                  					; (at 18.2 ticks per sec.)
  4115                                  r_t_ret:				
  4116 00001952 C3                      		retn
  4117                                  
  4118                                  ; =============== S U B	R O U T	I N E =======================================
  4119                                  
  4120                                  ;   in_bin converts bin_date_time values from bcd to bin
  4121                                  
  4122                                  in_bin:		; proc near
  4123 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  4124 00001956 E81F00                  		call	bcd_to_bin
  4125 00001959 A2[FC05]                		mov	[bin_date_time], al
  4126 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  4127 0000195F E81600                  		call	bcd_to_bin
  4128 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  4129 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  4130 00001968 E80D00                  		call	bcd_to_bin
  4131 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  4132 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  4133 00001971 E80400                  		call	bcd_to_bin
  4134 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  4135 00001977 C3                      		retn
  4136                                  
  4137                                  ; =============== S U B	R O U T	I N E =======================================
  4138                                  
  4139                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  4140                                  ;   a binary representation in al
  4141                                  ;   ah is destroyed
  4142                                  
  4143                                  bcd_to_bin:	; proc near
  4144 00001978 88C4                    		mov	ah, al
  4145 0000197A 240F                    		and	al, 0Fh
  4146 0000197C B104                    		mov	cl, 4
  4147 0000197E D2EC                    		shr	ah, cl
  4148 00001980 D50A                    		aad
  4149 00001982 C3                      		retn
  4150                                  
  4151                                  ; =============== S U B	R O U T	I N E ========================================
  4152                                  
  4153                                  ;   date_verify loosely checks bcd date values to be in range
  4154                                  ;   in bin_date_time
  4155                                  
  4156                                  date_verify:	; proc near
  4157 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  4158 00001988 7732                    		ja	short date_error
  4159 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  4160 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  4161                                  		;jb	short date_error
  4162                                  		; 12/12/2022
  4163 00001991 722A                    		jb	short date_err2
  4164 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  4165                                  		;jb	short date_error
  4166                                  		; 12/12/2022
  4167 00001998 7223                    		jb	short date_err2
  4168                                  century_20:
  4169 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  4170 0000199F 771B                    		ja	short date_error
  4171 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  4172 000019A6 7714                    		ja	short date_error
  4173 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  4174                                  		;jbe	short date_error
  4175 000019AD 760D                    		jna	short date_error
  4176 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  4177 000019B4 7706                    		ja	short date_error
  4178                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  4179                                  		;;jbe	short date_error
  4180                                  		;jna	short date_error
  4181                                  		; 12/12/2022
  4182                                  		; cf=0
  4183                                  		;clc
  4184                                  		; 12/12/2022
  4185 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  4186 000019BB C3                      		retn
  4187                                  ;-----------------------------------------------------------------------------
  4188                                  
  4189                                  date_error:
  4190 000019BC F9                      		stc
  4191                                  date_err2:
  4192 000019BD C3                      		retn
  4193                                  
  4194                                  ; =============== S U B	R O U T	I N E ========================================
  4195                                  
  4196                                  ; time_verify very loosely checks bcd date values to be in range
  4197                                  ; in bin_date_time
  4198                                  
  4199                                  time_verify:	; proc near
  4200 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  4201 000019C3 770C                    		ja	short time_error
  4202 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  4203 000019CA 7705                    		ja	short time_error
  4204                                  		; 12/12/2022h
  4205                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  4206                                  		;ja	short time_error
  4207                                  		;clc
  4208                                  		;retn
  4209                                  		; 12/12/2022
  4210 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  4211                                  time_error:
  4212                                  bv_error:
  4213 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  4214 000019D2 C3                      		retn
  4215                                  
  4216                                  ; ----------------------------------------------------------------------------
  4217                                  
  4218                                  ;time_error:				
  4219                                  		;stc
  4220                                  		;retn
  4221                                  
  4222                                  ; =============== S U B	R O U T	I N E ========================================
  4223                                  
  4224                                  ;   bcd_verify checks values in bin_date_time to be valid
  4225                                  ;   bcd numerals.  carry set if any nibble out of range
  4226                                  
  4227                                  bcd_verify:	; proc near
  4228 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  4229 000019D6 BB[FC05]                		mov	bx, bin_date_time
  4230                                  bv_loop:
  4231 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  4232 000019DB 88C4                    		mov	ah, al
  4233 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  4234                                  					; is 1's place in range?
  4235 000019E0 3C0A                    		cmp	al, 10
  4236 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  4237 000019E4 D0EC                    		shr	ah, 1
  4238 000019E6 D0EC                    		shr	ah, 1
  4239 000019E8 D0EC                    		shr	ah, 1
  4240 000019EA D0EC                    		shr	ah, 1
  4241 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  4242 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  4243 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  4244 000019F4 43                      		inc	bx		; next byte
  4245 000019F5 49                      		dec	cx
  4246 000019F6 75E1                    		jnz	short bv_loop
  4247 000019F8 F8                      		clc			; set success flag
  4248 000019F9 C3                      		retn
  4249                                  ; ----------------------------------------------------------------------------
  4250                                  
  4251                                  		; 12/12/2022
  4252                                  ;bv_error:
  4253                                  		;stc			; set error flag
  4254                                  		;retn
  4255                                  
  4256                                  ; ----------------------------------------------------------------------------
  4257                                  
  4258                                  endk09:
  4259                                  
  4260                                  ; ----------------------------------------------------------------------------
  4261                                  
  4262                                  ;------------------------------------------------------------------------
  4263                                  ;									:
  4264                                  ;	System initialization						:
  4265                                  ;									:
  4266                                  ;	The entry conditions are established by the bootstrap		:
  4267                                  ;	loader and are considered unknown. The following jobs		:
  4268                                  ;	will be performed by this module:				:
  4269                                  ;									:
  4270                                  ;	1.	All device initialization is performed			:
  4271                                  ;	2.	A local stack is set up and DS:SI are set		:
  4272                                  ;		to point to an initialization table. Then		:
  4273                                  ;		an inter-segment call is made to the first		:
  4274                                  ;		byte of the dos 					:
  4275                                  ;	3.	Once the dos returns from this call the ds		:
  4276                                  ;		register has been set up to point to the start		:
  4277                                  ;		of free memory. The initialization will then		:
  4278                                  ;		load the command program into this area 		:
  4279                                  ;		beginning at 100 hex and transfer control to		:
  4280                                  ;		this program.						:
  4281                                  ;									:
  4282                                  ;------------------------------------------------------------------------
  4283                                  
  4284                                  ; 01/10/2022
  4285                                  ; 08/01/2018 - Retro DOS v4.0
  4286                                  
  4287                                  ; drvfat must be the first location of freeable space!
  4288                                  
  4289                                  align 2
  4290                                  		;db 90h
  4291                                  
  4292                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4293                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  4294                                  
  4295                                  ; 30/12/2022
  4296                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  4297                                  	
  4298 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  4299                                  ; 09/12/2023
  4300                                  ;bios_l:	dw 0			; first	sector of data (low word)
  4301                                  ;bios_h:	dw 0			; first	sector of data (high word)
  4302                                  First_Data_Sector:
  4303 000019FC 0000                    		dw 0
  4304 000019FE 0000                    		dw 0
  4305 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  4306                                  ;fbigfat:	db 0			; flags	for drive
  4307 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  4308 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  4309                                  ; 09/12/2023
  4310 00001A06 00                      fbigfat:	db 0			; flags	for drive
  4311 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  4312 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  4313                                  ; 12/12/2023
  4314                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  4315 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  4316                                  
  4317                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  4318                                  ; call to determine drive parameters.
  4319                                  
  4320 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  4321 00001A0D 00                      		db 0	; 09/12/2023
  4322                                  ;sec_trk:	db 9			; sec/trk returned by rom
  4323 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  4324 00001A0F 00                      		db 0	; 09/12/2023
  4325                                  ; 09/12/2023
  4326 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  4327 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  4328                                  
  4329                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4330                                  Orig_Int1Eh_Table:
  4331 00001A12 0000                    		dw 0
  4332 00001A14 0000                    		dw 0
  4333                                  
  4334                                  ; ----------------------------------------------------------------------------
  4335                                  
  4336                                  ; 09/12/2023
  4337                                  %if 0
  4338                                  
  4339                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  4340                                  		dw 2048, 0201h, 112, 0
  4341                                  		dw 8192, 0402h, 256, 0
  4342                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  4343                                  		dw 65535, 1004h, 1024, 0
  4344                                  					; default disktable under
  4345                                  					; the assumption of total fat size <= 128 kb,
  4346                                  					; and the maximum size of fat entry = 16 bit.
  4347                                  %endif
  4348                                  
  4349                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4350                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  4351                                  
  4352                                  		; 09/12/2023
  4353                                  		; 08/08/2023
  4354                                  		; disktable.totalsectors: resw 1 ; high word
  4355                                  		;			  resw 1 ; low word
  4356                                  		; disktable.shiftcount:   resb 1
  4357                                  		; disktable.secperclus:   resb 1
  4358                                  		; disktable.rdirentries:  resw 1
  4359                                  		; disktable.bigflag:      resw 1
  4360 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  4360 00001A1F 00                 
  4361                                  					   ; (32680 sectors, 16340 KB)
  4362 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  4362 00001A29 00                 
  4363                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  4364 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  4364 00001A33 00                 
  4365 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  4365 00001A3D 00                 
  4366 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  4366 00001A47 00                 
  4367 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  4367 00001A51 00                 
  4368                                  		; 09/12/2023
  4369                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  4370 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  4370 00001A5B 00                 
  4371                                  					   ; (fbig and fbigbig flags are set)			
  4372                                  			
  4373                                  ; ----------------------------------------------------------------------------
  4374                                  
  4375                                  ;******************************************************
  4376                                  ;variables for mini disk initialization
  4377                                  ;******************************************************
  4378                                  
  4379                                  ; 01/10/2022
  4380                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  4381                                  
  4382 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  4383 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  4384 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  4385 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  4386                                  					; of bds table. needed to figure out
  4387                                  					; the dosdatasg address.
  4388 00001A62 0000                    mini_hdlim:	dw 0			
  4389 00001A64 0000                    mini_seclim:	dw 0
  4390                                  
  4391                                  ; 19/12/2023
  4392                                  ; 09/12/2023
  4393                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  4394                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  4395                                  
  4396                                  ;end of mini disk init variables **********************
  4397                                  
  4398                                  ; ----------------------------------------------------------------------------
  4399                                  			
  4400 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  4401                                  
  4402                                  ; 13/12/2022
  4403                                  %if 0
  4404                                  
  4405                                  ;align 2
  4406                                  		db  90h	
  4407                                  
  4408                                  ; the following are the recommended bpbs for the media that we know of so far.
  4409                                  
  4410                                  ;struc bpbx
  4411                                  ;   resw 1 ; 512
  4412                                  ;   resb 1
  4413                                  ;   resw 1 ; 1
  4414                                  ;   resb 1 ; 2
  4415                                  ;   resw 1
  4416                                  ;   resw 1
  4417                                  ;   resb 1
  4418                                  ;   resw 1
  4419                                  ;   resw 1
  4420                                  ;   resw 1 ; 2
  4421                                  ;   resw 1
  4422                                  ;   resw 1 ; hidden sector high
  4423                                  ;   resd 1 ; extended total sectors
  4424                                  ;.size:
  4425                                  ;endstruc
  4426                                  
  4427                                  ; 08/01/2019 - Retro DOS v4.0
  4428                                  
  4429                                  ; 20/04/2019
  4430                                  
  4431                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  4432                                  
  4433                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4434                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  4435                                  
  4436                                  ; 09/12/2022
  4437                                  BPB48T:
  4438                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  4439                                  		; 48 tpi diskettes	;
  4440                                  		dw	512		; physical sector size in bytes
  4441                                  		db	2		; sectors/allocation unit
  4442                                  		dw	1		; reserved sectors for dos
  4443                                  		db	2		; number of allocation tables
  4444                                  		dw	112		; number of directory entries
  4445                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  4446                                  		db	0FDh		; media descriptor
  4447                                  		dw	2		; number of fat sectors
  4448                                  		dw	9		; sectors per track
  4449                                  		dw	2		; heads
  4450                                  		dw	0		; hidden sector count (low word)
  4451                                  		dw	0		; hidden sector (high)
  4452                                  		dw	0		; number of sectors (low)
  4453                                  		dw	0		; number of sectors (high)
  4454                                  		; 09/12/2023
  4455                                  		; FAT32 extensions (to BDS)
  4456                                  		times	28 db 0
  4457                                  		;
  4458                                  		db 90h
  4459                                  ;align 2
  4460                                  BPB96T:
  4461                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  4462                                  		; 96 tpi diskettes	;
  4463                                  		dw	512		; physical sector size in bytes
  4464                                  		db	1		; sectors/allocation unit
  4465                                  		dw	1		; reserved sectors for dos
  4466                                  		db	2		; number of allocation tables
  4467                                  		dw	224		; number of directory entries
  4468                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  4469                                  		db	0F9h		; media descriptor
  4470                                  		dw	7		; number of fat sectors
  4471                                  		dw	15		; sectors per track
  4472                                  		dw	2		; heads
  4473                                  		dw	0		; hidden sector count (low word)
  4474                                  		dw	0		; hidden sector (high)
  4475                                  		dw	0		; number of sectors (low)
  4476                                  		dw	0		; number of sectors (high)
  4477                                  		; 09/12/2023
  4478                                  		; FAT32 extensions (to BDS)
  4479                                  		times	28 db 0
  4480                                  		;
  4481                                  		db 90h
  4482                                  ;align 2
  4483                                  BPB35:
  4484                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  4485                                  		; 3.5" diskettes - 720 KB ;		
  4486                                  		dw	512		; physical sector size in bytes
  4487                                  		db	2		; sectors/allocation unit
  4488                                  		dw	1		; reserved sectors for dos
  4489                                  		db	2		; number of allocation tables
  4490                                  		dw	112		; number of directory entries
  4491                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  4492                                  		db	0F9h		; media descriptor
  4493                                  		dw	3		; number of fat sectors
  4494                                  		dw	9		; sectors per track
  4495                                  		dw	2		; heads
  4496                                  		dw	0		; hidden sector count (low word)
  4497                                  		dw	0		; hidden sector (high)
  4498                                  		dw	0		; number of sectors (low)
  4499                                  		dw	0		; number of sectors (high)
  4500                                  		; 09/12/2023
  4501                                  		; FAT32 extensions (to BDS)
  4502                                  		times	28 db 0
  4503                                  		;
  4504                                  		db 90h
  4505                                  ;align 2
  4506                                  
  4507                                  ;align 2
  4508                                  ;BPB144:
  4509                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  4510                                  ;
  4511                                  ;		dw	512		; physical sector size in bytes
  4512                                  ;		db	1		; sectors/allocation unit
  4513                                  ;		dw	1		; reserved sectors for dos
  4514                                  ;		db	2		; number of allocation tables
  4515                                  ;		dw	224		; number of directory entries
  4516                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  4517                                  ;		db	0F0h		; media descriptor
  4518                                  ;		dw	9		; number of fat sectors
  4519                                  ;		dw	18		; sectors per track
  4520                                  ;		dw	2		; heads
  4521                                  ;		dw	0		; hidden sector count (low word)
  4522                                  ;		dw	0		; hidden sector (high)
  4523                                  ;		dw	0		; number of sectors (low)
  4524                                  ;		dw	0		; number of sectors (high)
  4525                                  ;
  4526                                  ;		db 90h
  4527                                  ;align 2
  4528                                  
  4529                                  BPB288:
  4530                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  4531                                  		; 3.5" diskettes - 2.88 MB ;	 
  4532                                  		dw	512		; physical sector size in bytes
  4533                                  		db	2		; sectors/allocation unit
  4534                                  		dw	1		; reserved sectors for dos
  4535                                  		db	2		; number of allocation tables
  4536                                  		dw	240		; number of directory entries
  4537                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  4538                                  		db	0F0h		; media descriptor
  4539                                  		dw	3		; number of fat sectors
  4540                                  		dw	9		; sectors per track
  4541                                  		dw	2		; heads
  4542                                  		dw	0		; hidden sector count (low word)
  4543                                  		dw	0		; hidden sector (high)
  4544                                  		dw	0		; number of sectors (low)
  4545                                  		dw	0		; number of sectors (high)
  4546                                  		; 09/12/2023
  4547                                  		; FAT32 extensions (to BDS)
  4548                                  		times	28 db 0
  4549                                  		;
  4550                                  		db 90h
  4551                                  ;align 2
  4552                                  
  4553                                  %endif
  4554                                  
  4555                                  ; ----------------------------------------------------------------------------
  4556                                  					; align	2
  4557                                  ; 09/12/2022
  4558                                  %if 0
  4559                                  bpbtable:	dw bpb48t		; 48tpi	drives
  4560                                  		dw bpb96t		; 96tpi	drives
  4561                                  		dw bpb35		; 3.5" drives
  4562                                  		dw bpb35		; unused 8" diskette
  4563                                  		dw bpb35		; unused 8" diskette
  4564                                  		dw bpb35		; used for hard	disk
  4565                                  		dw bpb35		; used for tape	drive
  4566                                  		dw bpb35		; FFOTHER
  4567                                  		dw bpb35		; ERIMO
  4568                                  		dw bpb288		; 2.88MB drive
  4569                                  		;
  4570                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  4571                                  %endif
  4572                                  
  4573                                  ; 13/12/2022
  4574                                  %if 0
  4575                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  4576                                  		dw BPB96T		; 96tpi	drives
  4577                                  		dw BPB35		; 3.5" drives
  4578                                  		dw BPB35		; unused 8" diskette
  4579                                  		dw BPB35		; unused 8" diskette
  4580                                  		dw BPB35		; used for hard	disk
  4581                                  		dw BPB35		; used for tape	drive
  4582                                  		dw BPB35		; FFOTHER
  4583                                  		dw BPB35		; ERIMO
  4584                                  		dw BPB288		; 2.88MB drive
  4585                                  		;
  4586                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  4587                                  
  4588                                  %endif
  4589                                  
  4590                                  ; ----------------------------------------------------------------------------
  4591                                  
  4592                                  ;	entry point to call utility functions in Bios_Code. At this time,
  4593                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  4594                                  ;	  will not yet be moved to its final resting place, so we know
  4595                                  ;	  it'll be low.
  4596                                  ;
  4597                                  ;	to use this function, do a "push cs" and load bp with the offset of
  4598                                  ;	  the function you want to call in Bios_Code. This routine will
  4599                                  ;	  push the address of a retf in Bios_Code onto the stack which
  4600                                  ;	  will get executed when the utility function finishes. It will
  4601                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  4602                                  ;	  and a retf
  4603                                  
  4604                                  ; 16/10/2022
  4605                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  4606                                  ; 09/12/2022
  4607                                  BC_RETF equ bc_retf
  4608                                  
  4609                                  ; 09/12/2023
  4610                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  4611                                  
  4612                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  4613                                  					; 2C7h:0C8h = 70h:2638h
  4614                                  					; 09/12/2023
  4615                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  4616 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  4617                                  
  4618                                  ; ----------------------------------------------------------------------------
  4619                                  
  4620                                  call_bios_code:	; proc far			
  4621 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  4622                                  					; set up near return to far return
  4623 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  4624 00001A7B 55                      		push	bp		; save offset of utility function
  4625 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  4626                                  
  4627                                  ; ----------------------------------------------------------------------------
  4628                                  
  4629                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  4630                                  		; 20/12/2022
  4631 00001A7D 00                      flp_drvs:	db 0
  4632                                  		; 11/12/2023
  4633                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  4634                                  firstcluster_hw: 
  4635 00001A7E 0000                    		dw 0	; 06/04/2024
  4636 00001A80 00                      Boot_Drv:	db 0
  4637                                  
  4638                                  ; ----------------------------------------------------------------------------
  4639                                  
  4640                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4641                                  ;-----------------------------------------------------------------------------
  4642                                  ; PCDOS 7.1 CD BOOT option code 
  4643                                  ;-----------------------------------------------------------------------------
  4644                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  4645                                  
  4646                                  cd_boot_option:
  4647 00001A81 50                      		push	ax
  4648 00001A82 1E                      		push	ds
  4649 00001A83 06                      		push	es
  4650 00001A84 52                      		push	dx
  4651                                  cdbo_1:
  4652 00001A85 B401                    		mov	ah, 1
  4653 00001A87 CD16                    		int	16h			; KEYBOARD - status
  4654 00001A89 7406                    		jz	short cdbo_2
  4655 00001A8B 30E4                    		xor	ah, ah
  4656 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4657                                  						; Return: AH = scan code, AL = character
  4658 00001A8F EBF4                    		jmp	short cdbo_1
  4659                                  cdbo_2:
  4660 00001A91 0E                      		push	cs
  4661 00001A92 1F                      		pop	ds
  4662 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  4663 00001A96 AC                      		lodsb
  4664                                  cdbo_3:
  4665 00001A97 BB0700                  		mov	bx, 7
  4666 00001A9A B40E                    		mov	ah, 0Eh
  4667 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4668                                  						; AL = character, BH = display page (alpha modes)
  4669                                  						; BL = foreground color (graphics modes)
  4670 00001A9E AC                      		lodsb
  4671 00001A9F 08C0                    		or	al, al
  4672 00001AA1 75F4                    		jnz	short cdbo_3
  4673 00001AA3 B84000                  		mov	ax, 40h
  4674 00001AA6 8ED8                    		mov	ds, ax
  4675                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  4676                                  		; 09/12/2023
  4677 00001AA8 8B166C00                		mov	dx, [6Ch]
  4678 00001AAC 8B366E00                		mov	si, [6Eh]
  4679                                  wait_for_key:
  4680                                  		;push	bx
  4681                                  		;mov	bx, 7
  4682                                  		; bx = 7
  4683 00001AB0 B8080E                  		mov	ax, 0E08h
  4684 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4685                                  						; AL = character, BH = display page (alpha modes)
  4686                                  						; BL = foreground color (graphics modes)
  4687 00001AB5 B8200E                  		mov	ax, 0E20h
  4688 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4689                                  						; AL = character, BH = display page (alpha modes)
  4690                                  						; BL = foreground color (graphics modes)
  4691 00001ABA B8080E                  		mov	ax, 0E08h
  4692 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4693                                  						; AL = character, BH = display page (alpha modes)
  4694                                  						; BL = foreground color (graphics modes)
  4695                                  		;pop	bx
  4696                                  		;add	bx, 18			; 18.2 ticks per second
  4697                                  		; 09/12/2023
  4698 00001ABF 83C212                  		add	dx, 18
  4699 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  4700                                  continue_to_wait:
  4701 00001AC5 B401                    		mov	ah, 1
  4702 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  4703 00001AC9 741B                    		jz	short cdbo_5
  4704 00001ACB B400                    		mov	ah, 0
  4705 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4706                                  						; Return: AH = scan code, AL = character
  4707                                  
  4708                                  		; 09/12/2023
  4709                                  		;cmp	ax, 11Bh ; ESC key
  4710                                  		;jz	short cdb0_7
  4711                                  ;cdbo_4:
  4712                                  		;push	ax ; *
  4713 00001ACF 89C2                    		mov	dx, ax ; *
  4714                                  
  4715                                  		; CRLF (next line)
  4716                                  		;mov	bx, 7
  4717                                  		; bx = 7
  4718 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  4719 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4720                                  						; AL = character, BH = display page (alpha modes)
  4721                                  						; BL = foreground color (graphics modes)
  4722 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  4723 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4724                                  						; AL = character, BH = display page (alpha modes)
  4725                                  						; BL = foreground color (graphics modes)
  4726                                  		; 09/12/2023
  4727                                  		;pop	ax ; *
  4728                                  			
  4729 00001ADB 81FA1B01                		cmp	dx, 11Bh
  4730                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  4731 00001ADF 7418                    		je	short cdbo_7
  4732                                  
  4733                                  cdbo_4:		; 10/12/2023
  4734 00001AE1 5A                      		pop	dx
  4735 00001AE2 07                      		pop	es
  4736 00001AE3 1F                      		pop	ds
  4737 00001AE4 58                      		pop	ax
  4738 00001AE5 C3                      		retn
  4739                                  cdbo_5:
  4740 00001AE6 3B366E00                		cmp	si, [6Eh]
  4741 00001AEA 7504                    		jnz	short cdbo_6
  4742                                  		; 09/12/2023
  4743 00001AEC 3B166C00                		cmp	dx, [6Ch]
  4744                                  		;cmp	bx, [6Ch]
  4745                                  cdbo_6:
  4746 00001AF0 73D3                    		jnb	short continue_to_wait
  4747 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  4748 00001AF7 75B7                    		jnz	short wait_for_key
  4749                                  cdbo_7:
  4750                                  		; 09/12/2023
  4751                                  		; CRLF (next line)
  4752                                  		;
  4753                                  		;mov	bx, 7
  4754                                  		;mov	ax, 0E0Dh
  4755                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4756                                  		;				; AL = character, BH = display page (alpha modes)
  4757                                  		;				; BL = foreground color (graphics modes)
  4758                                  		;mov	ax, 0E0Ah
  4759                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4760                                  		;				; AL = character, BH = display page (alpha modes)
  4761                                  		;				; BL = foreground color (graphics modes)
  4762                                  		
  4763 00001AF9 0E                      		push	cs
  4764 00001AFA 1F                      		pop	ds
  4765                                  		; 09/12/2023
  4766 00001AFB 1E                      		push	ds
  4767 00001AFC 07                      		pop	es
  4768                                  		; es = ds = cs
  4769                                  
  4770 00001AFD B8004B                  		mov	ax, 4B00h
  4771                                  		;xor	dl, dl
  4772                                  		; 09/12/2023
  4773 00001B00 31D2                    		xor	dx, dx
  4774                                  		; dl = disk drive = 0  ; fd
  4775                                  		;mov	si, 1C93h
  4776 00001B02 BE[571B]                		mov	si, empty_dap_buff
  4777 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4778                                  		; DS:SI = Specification packet filled		
  4779                                  
  4780                                  		;mov	dx, 80h
  4781                                  		;xor	ax, ax
  4782                                  		; 09/12/2023
  4783 00001B07 B81300                  		mov	ax, 19
  4784 00001B0A 89F7                    		mov	di, si	
  4785                                  		;mov	byte [si], 13h
  4786                                  		;mov	[si+1], al
  4787 00001B0C AB                      		stosw	
  4788                                  		;mov	[si+2], dx
  4789 00001B0D B080                    		mov	al, 80h
  4790 00001B0F AB                      		stosw
  4791 00001B10 89C2                    		mov	dx, ax
  4792                                  		;mov	[si+4], ax
  4793                                  		;mov	[si+6], ax
  4794                                  		;mov	[si+8], ax
  4795                                  		;mov	[si+0Ah], ax
  4796                                  		;mov	[si+0Ch], ax
  4797                                  		;mov	[si+0Eh], ax
  4798                                  		;mov	[si+10h], al
  4799                                  		;mov	[si+11h], al
  4800                                  		;mov	[si+12h], al
  4801 00001B12 B90F00                  		mov	cx, 15
  4802 00001B15 F3AA                    		rep	stosb
  4803                                  		; dl = disk drive = 80h ; hd
  4804 00001B17 B8004B                  		mov	ax, 4B00h
  4805 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4806 00001B1C 31C0                    		xor	ax, ax
  4807                                  		; 09/12/2023
  4808                                  		;mov	dx, 80h
  4809                                  		; dx = 80h
  4810 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  4811                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  4812                                  		; 09/12/2023
  4813                                  		;push	cs
  4814                                  		;pop	es
  4815                                  		; es = ds = cs		
  4816                                  
  4817 00001B20 B80102                  		mov	ax, 201h
  4818                                  		;mov	bx, 152h
  4819 00001B23 BB[5201]                		mov	bx, disksector
  4820                                  		;mov	cx, 1
  4821                                  		; 09/12/2023
  4822 00001B26 41                      		inc	cx ; cx = 1
  4823                                  		;mov	dx, 80h
  4824                                  		; dx = 80h
  4825 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  4826                                  						; AL = number of sectors to read, CH = track, CL = sector
  4827                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  4828                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  4829                                  		;jc	short cdbo_8
  4830                                  		; 10/12/2023
  4831 00001B29 72B6                    		jc	short cdbo_4
  4832                                  
  4833 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  4834                                  		;jz 	short cdbo_9
  4835                                  		; 10/12/2023
  4836 00001B32 75AD                    		jnz	short cdbo_4
  4837                                  ;cdbo_8:
  4838                                  		;jmp	short cdbo_4
  4839                                  ;cdbo_9:
  4840                                  		; 10/12/2023
  4841                                  		; (stack clearing -pop- is not necessary here, 
  4842                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  4843                                  		;pop	ax ; near call return address
  4844                                  		;pop	cx ; +++ ; ch = [MediaByte]
  4845                                  
  4846                                  		; 09/12/2023
  4847                                  		;push	cs
  4848                                  		;pop	ds
  4849                                  		; ds = cs
  4850 00001B34 31C0                    		xor	ax, ax	; 0
  4851 00001B36 BF007C                  		mov	di, 7C00h
  4852 00001B39 8EC0                    		mov	es, ax
  4853 00001B3B 89DE                    		mov	si, bx
  4854 00001B3D 06                      		push	es
  4855 00001B3E 57                      		push	di
  4856 00001B3F B90001                  		mov	cx, 100h ; 256
  4857                                  		; 10/12/2023
  4858                                  		;cld	; not necessary (direction flag is already cleared) 
  4859 00001B42 F3A5                    		rep movsw
  4860 00001B44 8ED8                    		mov	ds, ax
  4861 00001B46 BE7800                  		mov	si, 78h
  4862 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  4863 00001B4D 8904                    		mov	[si], ax
  4864 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  4865 00001B53 894402                  		mov	[si+2], ax
  4866 00001B56 CB                      		retf
  4867                                  
  4868                                  ; ----------------------------------------------------------------------------
  4869                                  dap_buffer: ; 16/12/2023
  4870                                  
  4871 00001B57 13                      empty_dap_buff:	db 19
  4872                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  4873 00001B58 00<rep 12h>             		times 18 db 0
  4874 00001B6A 05                      time_counter:	db 5	; 5 seconds
  4875 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  4876                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  4877                                  		; 09/12/2023
  4878 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  4878 00001B76 206B657920746F2062-
  4878 00001B7F 6F6F742066726F6D20-
  4878 00001B88 4344206F7220445644-
  4878 00001B91 202E2E2E00         
  4879                                  
  4880                                  ; ----------------------------------------------------------------------------
  4881                                  
  4882                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  4883                                  
  4884                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  4885                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  4886                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  4887                                  
  4888                                  ;-----------------------------------------------------------------------------
  4889                                  ; entry point from boot sector
  4890                                  ;-----------------------------------------------------------------------------
  4891                                  
  4892                                  init:		; 27/12/2018
  4893                                  		; MSDOS 6.0 (MSINIT.ASM)
  4894                                  		;=============================================================
  4895                                  		;
  4896                                  		; entry from boot sector. the register contents are:
  4897                                  		;
  4898                                  		;   dl = int 13 drive number we booted from
  4899                                  		;   ch = media byte
  4900                                  		;   bx = first data sector on disk.
  4901                                  		;   ax = first data sector (high)
  4902                                  		;   di = sectors/fat for the boot media.
  4903                                  
  4904                                  		; 10/12/2023
  4905                                  		; Retro DOS v5.0 (IBMBIO.COM)
  4906                                  		;=============================================================
  4907                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  4908                                                  ; DL = [BootDrive]
  4909                                  		; CH = [MediaByte]
  4910                                  		; AX:BX = First data Sector
  4911                                  		; DS:SI = Original INT 1Eh table address
  4912                                  		;
  4913                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  4914                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  4915                                  		; DI = 78h !not used!
  4916                                  
  4917                                  		; 07/04/2018
  4918                                  		;=============================================================
  4919                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  4920                                                  ; DL = [bsDriveNumber]
  4921                                  		; DH = [bsMedia]
  4922                                  		; AX = [bsSectors] ; Total sectors
  4923                                  		; DS = 0, SS = 0
  4924                                  		; BP = 7C00h
  4925                                  
  4926                                  		; 29/09/2023
  4927                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  4928                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  4929                                  
  4930                                  		; 10/12/2023 - Retro DOS v5.0
  4931                                  		; ------------------------------------------------------------
  4932                                  		; INPUT (registers from Retro DOS v4-v5 boot sector):
  4933                                  		;  DL = [bsDriveNumber]
  4934                                  		;  DH = [bsMedia]
  4935                                  		;  SS = 0
  4936                                  		;  BP = 7C00h (boot sector address)
  4937                                  		;
  4938                                  		; If the boot drive is a CD (CDROM) or DVD
  4939                                  		;    and CD boot option is enabled/requested:
  4940                                  		;    AX = 'CD'
  4941                                  		; If the boot drive is a FD or HD 
  4942                                  		;    or CD boot option is not enabled/requested:
  4943                                  		;    AX <> 'CD'
  4944                                  
  4945                                  ; 20/12/2022
  4946                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  4947                                  %if 0	
  4948                                  		cli
  4949                                  
  4950                                  		push	ax
  4951                                  		xor	ax, ax
  4952                                  		mov	ds, ax
  4953                                  		pop	ax
  4954                                  %endif
  4955                                  
  4956                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  4957                                  ; 10/12/2023 - Retro DOS v5.0 (combined kernel)
  4958                                  
  4959                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  4960                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  4961                                  
  4962                                  ;-----------------------------------------------------------------------------
  4963                                  ; initialization - stage 1
  4964                                  ;-----------------------------------------------------------------------------
  4965                                  ; 02/06/2018 - Retro DOS v3.0
  4966                                  
  4967                                  		; 10/12/2023
  4968 00001B96 FC                      		cld	; may not be necessary
  4969                                  		
  4970                                  		; 21/12/2022
  4971                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  4972                                  		;mov	bx, 60h
  4973                                  		;mov	es, bx
  4974                                  		;mov	si, bp
  4975                                  		;sub	di, di
  4976                                  		;mov	cx, 35 ; 70 bytes, 35 words
  4977                                  		;;mov	cl, 35
  4978                                  		;rep	movsw
  4979                                  
  4980                                  		; 10/12/2023 - Retro DOS v5.0
  4981 00001B97 3D4344                  		cmp	ax, 'CD' ; is CD boot option enabled or not ?
  4982 00001B9A 7503                    		jne	short init0
  4983                                  
  4984 00001B9C E8E2FE                  		call	cd_boot_option
  4985                                  init0:
  4986 00001B9F 0E                      		push	cs
  4987 00001BA0 1F                      		pop	ds
  4988                                  
  4989                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4990                                  		;mov	[Boot_Drv], dl
  4991                                  
  4992                                  		; 20/03/2019 - Retro DOS v4.0
  4993                                  		;cli		; turn interrupts off while manupulating stack
  4994                                  		;mov	ss, cx	; set stack segment register
  4995                                  
  4996 00001BA1 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  4997                                  
  4998                                  		;sti		; turn interrupts on
  4999                                  
  5000                                  		; 27/03/2018
  5001                                  		;mov	cx, KERNEL_SIZE	; words !
  5002                                  
  5003                                  		; 20/03/2019
  5004 00001BA4 B90080                  		mov	cx, 32768 ; 65536 bytes
  5005                                  
  5006                                  		; 21/12/2022
  5007                                  		; 07/04/2018
  5008 00001BA7 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  5009                                  		;mov	bl, KERNEL_SEGMENT
  5010 00001BAA 8EC3                    		mov	es, bx
  5011 00001BAC 31FF                    		xor	di, di
  5012 00001BAE 89FE                    		mov	si, di
  5013                                  		
  5014                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  5015                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  5016 00001BB0 F3A5                    		rep	movsw
  5017                                  
  5018                                  		; 20/03/2019 - Retro DOS v4.0
  5019 00001BB2 53                      		push	bx
  5020                                  		;push	init0
  5021 00001BB3 68[B71B]                		push	init1	; 10/12/2023
  5022 00001BB6 CB                      		retf
  5023                                  ;init0:
  5024                                  		; 10/12/2023 - Retro DOS 5.0	
  5025                                  init1:
  5026                                  		; 20/12/2022
  5027                                  		; (combined kernel file > 64KB)
  5028                                  
  5029                                  		; 20/03/2019
  5030 00001BB7 B520                    		mov	ch, 20h
  5031 00001BB9 8ED9                    		mov	ds, cx ; 2000h
  5032                                  		;mov	cx, 1070h
  5033 00001BBB B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  5034 00001BBE 8EC1                    		mov	es, cx
  5035                                  		
  5036                                  		; 21/12/2022
  5037                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  5038                                  		; 28/09/2023
  5039                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  5040                                  
  5041                                  		;mov	cx, KERNEL_SIZE - 32768
  5042                                  		; 28/09/2023 (BugFix)
  5043 00001BC0 B98E17                  		mov	cx, NXWORDCOUNT
  5044                                  		;mov	cx, NXBYTECOUNT
  5045                                  		;shr	cx, 1 ; 28/09/2023
  5046                                  		;xor	si, si
  5047                                  		;xor	di, di
  5048 00001BC3 F3A5                    		rep	movsw
  5049                                  
  5050                                  		; 28/09/2023
  5051                                  		;; 17/06/2018 
  5052                                  		;mov	ds, bx
  5053                                  		;; 21/03/2019
  5054                                  		;mov	es, bx
  5055                                  ;init0:
  5056                                  ;		;push	es
  5057                                  ;		push	bx ; 20/03/2019
  5058                                  ;		push	init1 ; 07/04/2018
  5059                                  ;		retf	; jump to 0070h:init1
  5060                                  ;init:
  5061                                  ;init1:
  5062                                  		; 10/12/2023
  5063                                  init2:
  5064                                  		; 20/12/2022
  5065                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  5066                                  		; for full MSDOS compatibility.
  5067                                  
  5068                                  		; 10/12/2023
  5069                                  		;cli	; not necessary for INT 1Eh
  5070                                  
  5071 00001BC5 8EC1                    		mov	es, cx ; 0
  5072 00001BC7 8ED9                    		mov	ds, cx ; 0
  5073                                  
  5074 00001BC9 B82205                  		mov	ax, SEC9
  5075                                  
  5076                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  5077 00001BCC B378                    		mov	bl, 1Eh*4
  5078                                  				; INT 1Eh points to diskette parms table
  5079                                  
  5080                                  		; check if the table is already at 0:SEC9 (0:0522h)
  5081                                   		; (do not move the DPT if is not original ROMBIOS table)
  5082                                  
  5083                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  5084                                  		;;jnz	short mov_dpt
  5085                                  
  5086                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  5087                                  		;je	short dont_mov_dpt
  5088                                  
  5089                                  		;mov	si, [bx] ; [1Eh*4]		
  5090                                  ;mov_dpt:
  5091                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  5092 00001BCE C537                    		lds	si, [bx]
  5093                                  		
  5094                                  		; 10/12/2023 - Retro DOS v5.0
  5095                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  5096                                  		;mov	[cs:Orig_Int1Eh_Table], si
  5097                                  
  5098 00001BD0 89C7                    		mov	di, ax  ; SEC9
  5099 00001BD2 B10B                    		mov	cl, 11
  5100                                  		;cld
  5101 00001BD4 F3A4                    		rep	movsb
  5102                                  
  5103                                  		; Set INT 1Eh vector/pointer to the new DPT address
  5104 00001BD6 8ED9                    		mov	ds, cx ; 0
  5105 00001BD8 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  5106 00001BDA 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  5107                                  ;dont_mov_dpt:
  5108                                  
  5109                                  ; 20/12/2022 - Retro DOS v4.0
  5110                                  %if 0
  5111                                  		; 27/12/2018 - Retro DOS v4.0
  5112                                  		; 'Starting MS-DOS...' message
  5113                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  5114                                  		; (0070h:96A3h)
  5115                                  
  5116                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  5117                                  		mov     ah, 0Eh
  5118                                  		;bh = 0
  5119                                          	mov     bl, 7		; "normal" attribute and page
  5120                                  startmsg_nxt_chr:  
  5121                                  		lodsb
  5122                                  		or	al, al
  5123                                          	jz	short startmsg_ok
  5124                                         
  5125                                  		int	10h		; video write
  5126                                          	jmp	short startmsg_nxt_chr
  5127                                  
  5128                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  5129                                  
  5130                                  startmsg_ok:
  5131                                  
  5132                                  %endif
  5133                                  
  5134                                  ;-----------------------------------------------------------------------------
  5135                                  ; initialization - stage 2
  5136                                  ;-----------------------------------------------------------------------------
  5137                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  5138                                  
  5139                                  
  5140                                  ; 19/03/2018
  5141                                  ; Retro DOS v2.0 (24/02/2018)
  5142                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  5143                                  
  5144                                  ;------------------------------------------------------------------------
  5145                                  ;									:
  5146                                  ;	System initialization						:
  5147                                  ;									:
  5148                                  ;	The entry conditions are established by the bootstrap		:
  5149                                  ;	loader and are considered unknown. The following jobs		:
  5150                                  ;	will be performed by this module:				:
  5151                                  ;									:
  5152                                  ;	1.	All device initialization is performed			:
  5153                                  ;	2.	A local stack is set up and DS:SI are set		:
  5154                                  ;		to point to an initialization table. Then		:
  5155                                  ;		an inter-segment call is made to the first		:
  5156                                  ;		byte of the dos 					:
  5157                                  ;	3.	Once the dos returns from this call the ds		:
  5158                                  ;		register has been set up to point to the start		:
  5159                                  ;		of free memory. The initialization will then		:
  5160                                  ;		load the command program into this area 		:
  5161                                  ;		beginning at 100 hex and transfer control to		:
  5162                                  ;		this program.						:
  5163                                  ;									:
  5164                                  ;------------------------------------------------------------------------
  5165                                  		
  5166                                  		; 20/12/2022
  5167                                  		; ----------------------
  5168                                  		; Registers
  5169                                  		; ----------------------
  5170                                  		; DL = [bsDriveNumber]
  5171                                  		; DH = [bsMedia]
  5172                                  		; DS = 0, ES = 0, SS = 0
  5173                                  		; BP = 7C00h
  5174                                  		; SP = 700h
  5175                                  		; ----------------------
  5176                                  		; CX = 0				
  5177                                  
  5178                                  ; 02/10/2022 - 20/12/2022
  5179                                  ; ------------------------------------------------------------------------------
  5180                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  5181                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  5182                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  5183                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  5184                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  5185                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  5186                                  ; ------------------------------------------------------------------------------
  5187                                  
  5188                                  ; msload will check the extended boot record and set ax, bx accordingly.
  5189                                  ;
  5190                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  5191                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  5192                                  ;;	data sector of the bios.
  5193                                  ;
  5194                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  5195                                  ;		mov	[cs:bios_l], bx
  5196                                  
  5197                                  ; with the following information from msload, we don't need the
  5198                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  5199                                  ;     limitation of msbio.com file.
  5200                                  
  5201                                  		; 10/12/2023
  5202                                  		; 21/12/2022
  5203                                  		;cli
  5204                                  
  5205 00001BDD 0E                      		push	cs		; Save a peck of interrupt vectors...
  5206 00001BDE 07                      		pop	es
  5207                                  		;push	cx
  5208                                  		;push	di
  5209                                  
  5210                                  		; 20/12/2022
  5211 00001BDF B105                    		mov	cl, 5
  5212                                  		;mov	cx, 5		; NUMROMVECTORS
  5213                                  					; no. of rom vectors to	be saved
  5214                                  		;mov	si, offset RomVectors ; point to list of int vectors
  5215 00001BE1 BE[0001]                		mov	si, RomVectors
  5216                                  
  5217                                  		; 10/12/2023
  5218 00001BE4 FA                      		cli
  5219                                  next_int_:		
  5220 00001BE5 2E                      		cs	; 16/10/2022
  5221 00001BE6 AC                      		lodsb		
  5222                                  		;lods	byte ptr cs:[si] ; cs lodsb
  5223 00001BE7 98                      		cbw			; ax = interrupt number
  5224 00001BE8 D1E0                    		shl	ax, 1
  5225 00001BEA D1E0                    		shl	ax, 1		; int no * 4
  5226 00001BEC 89C7                    		mov	di, ax		; interrupt vector address
  5227 00001BEE 87FE                    		xchg	si, di		; rombios interrupt vector address in si
  5228                                  					; saving address in di
  5229                                  		;lodsw			; movsw
  5230                                  		;stosw
  5231                                  		;lodsw			; movsw
  5232                                  		;stosw			; save the vector
  5233                                  		; 20/12/2022
  5234 00001BF0 A5                      		movsw
  5235 00001BF1 A5                      		movsw		
  5236                                  
  5237 00001BF2 87FE                    		xchg	si, di
  5238 00001BF4 E2EF                    		loop	next_int_
  5239                                  		
  5240                                  		;pop	di
  5241                                  		;pop	cx
  5242                                  
  5243                                  ; we need to save int13 in two places in case we are running on an at.
  5244                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  5245                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  5246                                  ; rom int13 routine, we must have that rom address also stored away.
  5247                                  
  5248                                  		; 20/12/2022
  5249                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  5250                                  		;mov	[cs:Orig13], ax
  5251                                  		;mov	ax, [cs:Old13+2]
  5252                                  		;mov	[cs:Orig13+2], ax
  5253                                  
  5254                                  		; 10/12/2023
  5255                                  		;cli
  5256                                  
  5257                                  		; 16/10/2022
  5258 00001BF6 C7064C00[ED06]          		mov	word [13h*4], block13
  5259                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  5260                                  					; set up int 13	for new	action
  5261 00001BFC 8C0E4E00                		mov	[13h*4+2], cs
  5262                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  5263 00001C00 C7065400[9907]          		mov	word [15h*4], Int15
  5264                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  5265                                  					; set up int 15	for new	action
  5266 00001C06 8C0E5600                		mov	[15h*4+2], cs
  5267                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  5268 00001C0A C7066400[5907]          		mov	word [19h*4], int19
  5269                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  5270                                  					; set up int 19	for new	action
  5271 00001C10 8C0E6600                		mov	[19h*4+2], cs
  5272                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  5273                                  
  5274                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5275 00001C14 A16800                  		mov	ax, [68h]	 ; 1Ah*4
  5276 00001C17 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  5277 00001C1B C7066800[AF06]          		mov	word [68h], Int1A
  5278 00001C21 8C0E6A00                		mov	[6Ah], cs
  5279                                  
  5280                                  		; 20/12/2022
  5281 00001C25 0E                      		push	cs
  5282 00001C26 1F                      		pop	ds
  5283                                  		
  5284                                  		; 10/12/2023
  5285 00001C27 A3[AB06]                		mov	[Orig1A], ax
  5286 00001C2A 893E[AD06]              		mov	[Orig1A+2], di
  5287                                  
  5288 00001C2E A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  5289 00001C31 A3[B400]                		mov	[Orig13], ax
  5290 00001C34 A1[0801]                		mov	ax, [Old13+2]
  5291 00001C37 A3[B600]                		mov	[Orig13+2], ax
  5292                                  					; ;
  5293 00001C3A FB                      		sti
  5294 00001C3B CD11                    		int	11h		; EQUIPMENT DETERMINATION
  5295                                  					; Return: AX = equipment flag bits
  5296                                  		; 10/12/2023
  5297                                  		;jmp	short chk_fd_count
  5298                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  5299                                  		; ((signature))
  5300                                  		;push	dx		; 52h ; 'R'
  5301                                  		;push	ax		; 50h ; 'P'
  5302                                  		;push	bx		; 53h ; 'S'
  5303                                  
  5304                                  ; we have to support a system that does not have any diskette
  5305                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  5306                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  5307                                  ; otherwise, the system has only hardfiles.
  5308                                  ;
  5309                                  ; important thing is that still, for compatibility reason, the drive letter
  5310                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  5311                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  5312                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  5313                                  ; drives will get "invalid drive letter ..." message. we are going to
  5314                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  5315                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  5316                                  
  5317                                  ; check the register returned by the equipment determination interrupt
  5318                                  ; we have to handle the case of no diskettes in the system by faking
  5319                                  ; two dummy drives.
  5320                                  ;
  5321                                  ; if the register indicates that we do have floppy drives we don't need
  5322                                  ; to do anything special.
  5323                                  ;
  5324                                  ; if the register indicates that we don't have any floppy drives then
  5325                                  ; what we need to do is set the fakefloppydrv variable, change the
  5326                                  ; register to say that we do have floppy drives and then go to execute
  5327                                  ; the code which starts at notsingle. this is because we can skip the
  5328                                  ; code given below which tries to find if there are one or two drives
  5329                                  ; since we already know about this.
  5330                                  
  5331                                  chk_fd_count:	; 10/12/2023
  5332                                  		;or	ax, 1	; *!!*
  5333                                  
  5334                                  		; 06/05/2019 - Retro DOS v4.0
  5335 00001C3D 88C1                    		mov	cl, al
  5336                                  
  5337                                  		; 12/12/2022
  5338 00001C3F A801                    		test	al, 1
  5339                                  		;test	ax, 1		; floppy drives	present	?
  5340 00001C41 751E                    		jnz	short normalfloppydrv ;	yes.
  5341                                  
  5342                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  5343                                  ; whether it is an old ROM BIOS or a new one
  5344                                  ;
  5345                                  ; WARNING !!!
  5346                                  ;
  5347                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  5348                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  5349                                  
  5350                                  		; 20/12/2022
  5351                                  		;push	ax
  5352                                  		;push	bx
  5353                                  		;push	cx
  5354 00001C43 52                      		push	dx
  5355                                  		;push	di
  5356 00001C44 06                      		push	es
  5357                                  
  5358 00001C45 B408                    		mov	ah, 8
  5359 00001C47 B200                    		mov	dl, 0
  5360 00001C49 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5361                                  					; DL = drive number
  5362                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5363                                  					; DL = number of consecutive drives
  5364                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5365 00001C4B 7202                    		jc	short _gdskp_error
  5366                                  		;;mov	[cs:flp_drvs], dl
  5367                                  		; 20/12/2022
  5368                                  		; ds = cs
  5369                                  		;mov	[flp_drvs], dl
  5370 00001C4D 88D1                    		mov	cl, dl
  5371                                  _gdskp_error:	
  5372                                  		; 20/12/2022			
  5373 00001C4F 07                      		pop	es
  5374                                  		;pop	di
  5375 00001C50 5A                      		pop	dx
  5376                                  		;pop	cx
  5377                                  		;pop	bx
  5378                                  		;pop	ax
  5379                                  		
  5380 00001C51 720E                    		jc	short normalfloppydrv
  5381                                  					; if error it is an old ROM BIOS
  5382                                  					; so, lets assume that ROM BIOS lied
  5383                                  		; 20/12/2022
  5384                                  		; ds = cs
  5385                                  		;cmp	byte [flp_drvs], 0
  5386                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  5387                                  		;jz	short _set_fake_flpdrv
  5388                                  		;;mov	al, [cs:flp_drvs]
  5389                                  		;mov	al, [flp_drvs]
  5390                                  		;;dec	al		; make it zero based
  5391                                  		;; 18/12/2022
  5392                                  		;dec	ax
  5393                                  		;jmp	short got_num_flp_drvs
  5394                                  		
  5395                                  		; 20/12/2022
  5396 00001C53 08C9                    		or	cl, cl ; [flp_drvs]
  5397 00001C55 7403                    		jz	short _set_fake_flpdrv		
  5398 00001C57 49                      		dec	cx	
  5399 00001C58 EB0B                    		jmp	short got_num_flp_drvs
  5400                                  ; ----------------------------------------------------------------------------
  5401                                  
  5402                                  _set_fake_flpdrv:
  5403                                  		; 20/12/2022
  5404                                  		; ds = cs
  5405                                  		;inc	cl	; cl = 1
  5406                                  		; 10/12/2023
  5407 00001C5A 41                      		inc	cx	; cl = 1
  5408 00001C5B 880E[111A]              		mov	[fakefloppydrv], cl ; 1
  5409                                  		;mov	byte [fakefloppydrv], 1		
  5410                                  		;;mov	byte [cs:fakefloppydrv], 1
  5411                                  					; we don't have any floppy drives.
  5412                                  		; 20/12/2022
  5413                                  		;mov	ax, 1
  5414 00001C5F EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  5415                                  ; ----------------------------------------------------------------------------
  5416                                  
  5417                                  normalfloppydrv:			; yes, bit 0 is 1.			
  5418                                  		; 20/12/2022
  5419                                  		;rol	al, 1		; there	exist floppy drives.
  5420                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  5421 00001C61 D0C1                    		rol	cl, 1
  5422 00001C63 D0C1                    		rol	cl, 1
  5423                                  got_num_flp_drvs:			
  5424                                  		;;and	ax, 3		; only look at bits 0 &	1
  5425                                  		; 18/12/2022
  5426                                  		;and	al, 3
  5427                                  		; 20/12/2022
  5428 00001C65 80E103                  		and	cl, 3
  5429 00001C68 7505                    		jnz	short notsingle	; zero means single drive system
  5430                                  		; 20/12/2022
  5431 00001C6A 41                      		inc	cx
  5432                                  		;inc	ax		; pretend it's a two drive system
  5433                                  settwodrive:				; set this to two fakedrives
  5434                                  		; 20/12/2022
  5435                                  		; ds = cs
  5436 00001C6B FE06[7800]              		inc	byte [single]
  5437                                  		;inc	byte [cs:single] ; remember this
  5438                                  notsingle:	
  5439                                  		; 20/12/2022			
  5440                                  		;inc	ax		; ax has number	of drives, 2-4
  5441                                  		;			; is also 0 indexed boot drive if we
  5442                                  		;			; booted off hard file
  5443                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  5444                                  		
  5445                                  		; 20/12/2022
  5446                                  		;inc	cl	; cl >= 2
  5447                                  		; 10/12/2023
  5448 00001C6F 41                      		inc	cx	; cl >= 2
  5449                                  
  5450                                  ; 16/10/2022
  5451                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  5452                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  5453                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  5454                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  5455                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  5456                                  SEC9	EQU	522h	; address of disk parameters
  5457                                  CHROUT	EQU	29h
  5458                                  LSTDRV	EQU     504h
  5459                                  
  5460                                  ; determine whether we booted from floppy or hard disk...
  5461                                  
  5462                                  		; 20/12/2022
  5463 00001C70 88C8                    		mov	al, cl	; 26/05/2019
  5464                                  
  5465 00001C72 F6C280                  		test	dl, 80h		; boot from floppy ?
  5466 00001C75 7502                    		jnz	short gothrd	; no.
  5467 00001C77 31C0                    		xor	ax, ax		; indicate boot	from drive a
  5468                                  		; 10/12/2023
  5469                                  		;mov	[Boot_Drv], al
  5470                                  gothrd:
  5471                                  
  5472                                  ; MSDOS 6.0
  5473                                  ;   ax = 0-based drive we booted from
  5474                                  ;   bios_l, bios_h set.
  5475                                  ;   cl = number of floppies including fake one
  5476                                  ;   ch = media byte
  5477                                  
  5478                                  ; Retro DOS 4.0 - 27/12/2018 
  5479                                  ;  (from Retro DOS v2.0 boot sector)
  5480                                  ;   dl = int 13 drive number we booted from
  5481                                  ;   dh = media byte
  5482                                  
  5483                                  		; 20/12/2022
  5484 00001C79 88F5                    		mov	ch, dh		; 01/07/2018
  5485                                  
  5486                                  		; cl = number of floppies
  5487                                  		; ch = media byte
  5488                                  
  5489                                  		; set up local stack
  5490                                  
  5491                                  		; 20/12/2022
  5492                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  5493                                  					; bios_l, bios_h set.
  5494                                  					; cl = number of floppies including fake one
  5495                                  					; ch = media byte
  5496                                  		; 20/12/2022
  5497                                  		; es = ds = cs
  5498                                  		; ss = 0
  5499                                  		; sp = 700h
  5500                                  
  5501                                  		; 20/12/2022
  5502                                  		;cli
  5503                                  		;mov	ss, dx		; set stack segment and stack pointer
  5504                                  		;mov	sp, 700h
  5505                                  		;sti
  5506                                  
  5507 00001C7B 51                      		push	cx ; (***) 	; save number of floppies and media byte
  5508                                  		
  5509 00001C7C 88EC                    		mov	ah, ch		; FAT ID to AH
  5510 00001C7E 50                      		push	ax ; (**)	; save boot drive number and media byte
  5511                                  		
  5512                                  ; let model_byte, secondary_model_byte be set here!!!
  5513                                  
  5514 00001C7F B4C0                    		mov	ah, 0C0h
  5515 00001C81 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  5516 00001C83 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  5517 00001C85 80FC00                  		cmp	ah, 0
  5518 00001C88 7510                    		jnz	short no_rom_system_conf
  5519                                  
  5520                                  ;		; 20/12/2022
  5521                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  5522                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  5523                                  ;
  5524                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  5525                                  ;
  5526                                  ;		on return:
  5527                                  ;		CF = 0 if successful
  5528                                  ;		   = 1 if error
  5529                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  5530                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  5531                                  ;
  5532                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  5533                                  ;
  5534                                  ;		Offset Size	     Description
  5535                                  ;
  5536                                  ;		  00   word   length of descriptor (8 minimum)
  5537                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  5538                                  ;		  03   byte   secondary model byte
  5539                                  ;		  04   byte   BIOS revision level (zero based)
  5540                                  ;		  05   byte   feature information, see below
  5541                                  ;		  06   dword  reserved
  5542                                  
  5543                                  		; 20/12/2022
  5544                                  		; ds = cs
  5545 00001C8A 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  5546 00001C8E A2[AF05]                		mov	[model_byte], al
  5547                                  		;mov	[cs:model_byte], al
  5548                                  					; get/save model byte
  5549 00001C91 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  5550 00001C95 A2[B005]                		mov	[secondary_model_byte], al
  5551                                  		;mov	[cs:secondary_model_byte], al
  5552                                  					; get/save secondary model byte
  5553 00001C98 EB0C                    		jmp	short turn_timer_on
  5554                                  ;-----------------------------------------------------------------------------
  5555                                  
  5556                                  no_rom_system_conf:			
  5557 00001C9A BEFFFF                  		mov	si, 0FFFFh
  5558 00001C9D 8EC6                    		mov	es, si
  5559                                  		; 20/12/2022
  5560 00001C9F 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  5561 00001CA3 A2[AF05]                		mov	[model_byte], al
  5562                                  		;mov	[cs:model_byte], al ; save model byte
  5563                                  turn_timer_on:				
  5564 00001CA6 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  5565 00001CA8 E620                    		out	20h, al		; Interrupt controller,	8259A.
  5566                                  					; AKPORT
  5567                                  
  5568                                  ; some olivetti m24 machines have an 8530 serial communications
  5569                                  ; chip installed at io address 50h and 52h. if we're running
  5570                                  ; on one of those, we must inhibit the normal aux port initialization
  5571                                  
  5572                                  		; 20/12/2022
  5573                                  		; ds = cs
  5574 00001CAA 803E[AF05]00            		cmp	byte [model_byte], 0
  5575                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  5576 00001CAF 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  5577                                  					; (except olivetti m24)
  5578 00001CB1 E466                    		in	al, 66h		; is 8530 installed?
  5579 00001CB3 A820                    		test	al, 20h
  5580 00001CB5 740A                    		jz	short not_olivetti_m24 ; we're done if not
  5581 00001CB7 B00F                    		mov	al, 0Fh		; double check
  5582 00001CB9 E650                    		out	50h, al
  5583 00001CBB E450                    		in	al, 50h
  5584 00001CBD A801                    		test	al, 1		; this test was	copied from olivetti
  5585 00001CBF 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  5586                                  
  5587                                  not_olivetti_m24:
  5588 00001CC1 B003                    		mov	al, 3		; init com4
  5589 00001CC3 E8DB09                  		call	aux_init
  5590 00001CC6 B002                    		mov	al, 2		; init com3
  5591 00001CC8 E8D609                  		call	aux_init
  5592 00001CCB B001                    		mov	al, 1		; init com2
  5593 00001CCD E8D109                  		call	aux_init
  5594 00001CD0 30C0                    		xor	al, al		; init com1
  5595 00001CD2 E8CC09                  		call	aux_init
  5596                                  
  5597                                  skip_aux_port_init:
  5598 00001CD5 B002                    		mov	al, 2		; init lpt3
  5599 00001CD7 E8BF09                  		call	print_init
  5600 00001CDA B001                    		mov	al, 1		; init lpt2
  5601 00001CDC E8BA09                  		call	print_init
  5602 00001CDF 30C0                    		xor	al, al		; init lpt1
  5603 00001CE1 E8B509                  		call	print_init
  5604                                  
  5605                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5606                                  		;mov	di, 534h	; offset INITSPOT
  5607                                  		;;mov	di, INITSPOT	; 0534h
  5608                                  		;			; IBMDOS.COM's first cluster - high word
  5609                                  		;			; 520h (the 2nd entry of root dir) + 14h
  5610                                  		;mov	ax, [di]
  5611                                  		;mov	[firstcluster_hw], ax
  5612                                  
  5613 00001CE4 31D2                    		xor	dx, dx	; 0
  5614 00001CE6 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  5615 00001CE8 8EC2                    		mov	es, dx
  5616 00001CEA 31C0                    		xor	ax, ax
  5617                                  		; 16/10/2022
  5618 00001CEC BF3405                  		mov	di, INITSPOT	; 0534h
  5619                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  5620                                  					; IBM wants 4 zeros here
  5621 00001CEF AB                      		stosw
  5622 00001CF0 AB                      		stosw
  5623 00001CF1 8CC8                    		mov	ax, cs		; fetch	segment
  5624 00001CF3 C7066C00[0E06]          		mov	word [BRKADR], cbreak
  5625                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  5626                                  					; break	entry point
  5627 00001CF9 A36E00                  		mov	[BRKADR+2], ax		
  5628                                  		;mov	ds:6Eh,	ax	; vector for break
  5629 00001CFC C706A400[8206]          		mov	word [CHROUT*4], outchr
  5630                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  5631 00001D02 A3A600                  		mov	[CHROUT*4+2], ax
  5632                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  5633                                  
  5634 00001D05 BF0400                  		mov	di, 4
  5635 00001D08 BB[1406]                		mov	bx, intret ; 19/10/2022
  5636                                  		;mov	bx, offset intret ; intret (cs:intret)
  5637                                  					; will initialize rest of interrupts
  5638 00001D0B 93                      		xchg	ax, bx
  5639 00001D0C AB                      		stosw			; location 4
  5640 00001D0D 93                      		xchg	ax, bx		; cs:
  5641 00001D0E AB                      		stosw			; int 1	; location 6
  5642 00001D0F 83C704                  		add	di, 4
  5643 00001D12 93                      		xchg	ax, bx
  5644 00001D13 AB                      		stosw			; location 12
  5645 00001D14 93                      		xchg	ax, bx		; cs:
  5646 00001D15 AB                      		stosw			; int 3	; location 14
  5647 00001D16 93                      		xchg	ax, bx
  5648 00001D17 AB                      		stosw			; location 16
  5649 00001D18 93                      		xchg	ax, bx		; cs:
  5650 00001D19 AB                      		stosw			; int 4	; location 18
  5651                                  
  5652                                  ;		; 20/12/2022
  5653                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  5654                                  ;		Address Size	Description	(BIOS/DOS Data Area)
  5655                                  ;	
  5656                                  ;		50:00	byte	Print screen status byte
  5657                                  ;				 00 = PrtSc not active,
  5658                                  ;				 01 = PrtSc in progress
  5659                                  ;				 FF = error
  5660                                  ;		50:01  3 bytes	Used by BASIC
  5661                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  5662                                  ;		50:05  10bytes	POST work area
  5663                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  5664                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  5665                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  5666                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  5667                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  5668                                  ;		50:20	word	DOS dynamic storage
  5669                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  5670                                  ;		50:30	4bytes	MODE command
  5671                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  5672                                  
  5673 00001D1A 89160005                		mov	[0500h], dx ; 0
  5674                                  		;mov	ds:500h, dx	; set print screen & break = 0
  5675 00001D1E 89160405                		mov	[LSTDRV], dx	; [0504h]
  5676                                  		;mov	ds:504h, dx	; clean	out last drive spec
  5677                                  
  5678                                  ; we need to initialize the cs:motorstartup variable from the disk
  5679                                  ; parameter table at sec9. the offsets in this table are defined in
  5680                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  5681                                  
  5682 00001D22 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  5683                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  5684                                  					; [522h+0Ah]
  5685                                  		; 20/12/2022
  5686                                  		; ds = 0
  5687                                  
  5688 00001D25 2EA2[2601]              		mov	[cs:motorstartup], al
  5689 00001D29 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  5690 00001D2F 720B                    		jb	short no_diddle	; no
  5691 00001D31 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  5692                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  5693                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  5694 00001D37 C6062205DF              		mov	byte [SEC9+0], 0DFh
  5695                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  5696                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  5697                                  no_diddle:
  5698 00001D3C CD12                    		int	12h		; MEMORY SIZE -
  5699                                  					; Return: AX = number of contiguous 1K blocks of memory
  5700 00001D3E B106                    		mov	cl, 6
  5701 00001D40 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  5702                                  		
  5703                                  		; 20/12/2022
  5704                                  		; 03/07/2018 - 27/12/2018
  5705                                  		;pop	cx ; (**)
  5706                                  		;mov	[cs:drvfat], cx
  5707                                  		
  5708 00001D42 50                      		push	ax ; (*)	; save real top	of memory
  5709                                  
  5710                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  5711                                  
  5712                                  ;M068 - BEGIN
  5713                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  5714                                  
  5715                                  		; 20/12/2022
  5716                                  		; ds = 0
  5717                                  
  5718                                  		;push	ds
  5719                                  		;push	bx		; pushes not required but since this
  5720                                  					; happens to be a last minute change
  5721                                  					; & since it is only init code.
  5722                                  		;xor	bx, bx
  5723                                  		;mov	ds, bx
  5724                                  		
  5725                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  5726                                  		;mov	bx, [2Fh*4]
  5727                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  5728                                  		;mov	ds, [2Fh*4+2]
  5729                                  		; 29/09/2023
  5730 00001D43 C51EBC00                		lds	bx, [2Fh*4]
  5731                                  
  5732 00001D47 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  5733                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  5734 00001D4C 750F                    		jnz	short SkipRPL
  5735 00001D4E 807F054C                		cmp	byte [bx+5], 'L'
  5736                                  		;cmp	byte ptr [bx+5], 'L'
  5737 00001D52 7509                    		jnz	short SkipRPL
  5738 00001D54 89C2                    		mov	dx, ax		; get TOM into DX
  5739 00001D56 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  5740 00001D59 CD2F                    		int	2Fh		; Get new TOM from any RPL
  5741 00001D5B 89D0                    		mov	ax, dx
  5742                                  SkipRPL:	
  5743                                  		; 20/12/2022		
  5744                                  		;pop	bx
  5745                                  		;pop	ds
  5746                                  
  5747                                  ;M068 - END
  5748                                  		; 20/12/2022
  5749                                  		; 27/12/2018
  5750 00001D5D 0E                      		push	cs
  5751 00001D5E 1F                      		pop	ds
  5752                                  
  5753                                  		; 18/03/2019 - Retro DOS v4.0
  5754                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  5755                                  		;mov	[cs:fatloc], ax	; location to read fat
  5756                                  
  5757                                  		; 01/07/2018
  5758                                  		; 08/04/2018
  5759                                  		; 28/03/2018
  5760                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  5761 00001D5F 83E840                  		sub	ax, 64
  5762 00001D62 A3[041A]                		mov	[init_bootseg], ax ; 20/12/2022
  5763                                  		;mov	[cs:init_bootseg], ax
  5764                                  
  5765                                  		; 27/12/2018 - Retro DOS v4.0
  5766                                  		;;pop	ax ; (*)	; get back real top of memory
  5767                                  		;pop	dx ; (*)
  5768                                  		; 29/09/2023 - Retro DOS v4.2 (BugFix)
  5769 00001D65 58                      		pop	ax ; (*)	; get back real top of memory		
  5770                                  
  5771                                  
  5772                                  		; 20/12/2022
  5773                                  		; 27/12/2018
  5774 00001D66 59                      		pop	cx ; (**)
  5775 00001D67 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  5776                                  
  5777                                  		; 20/12/2022
  5778                                  
  5779                                  		;mov	dx, 46Dh	; SYSINIT segment
  5780                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)
  5781 00001D6B BAD904                  		mov	dx, SYSINITSEG	; 17/10/2022
  5782 00001D6E 8EDA                    		mov	ds, dx
  5783                                  
  5784                                  ; set pointer to resident device driver chain
  5785                                  
  5786                                  		; 17/10/2022
  5787 00001D70 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  5788                                  		;mov	word [273h], res_dev_list
  5789                                  		;;mov	word ptr ds:273h, offset res_dev_list
  5790                                  					; [SYSINIT+DEVICE_LIST]
  5791 00001D76 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  5792                                  		;mov	[275h], cs
  5793                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  5794                                  
  5795 00001D7A A3[9202]                		mov	[MEMORYSIZE], ax
  5796                                  		;mov	[292h], ax
  5797                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  5798                                  
  5799 00001D7D FEC1                    		inc	cl
  5800 00001D7F 880E[9602]              		mov	[DEFAULTDRIVE], cl
  5801                                  		;mov	[296h], cl
  5802                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  5803                                  
  5804                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  5805 00001D83 C706[7302]D809          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  5806                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  5807                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  5808                                  					; dos_load_seg
  5809                                  
  5810                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  5811                                  ; printer cards. we initialize this value to point to an iret only if
  5812                                  ;
  5813                                  ; 1) the original segment points to storage inside valid ram.
  5814                                  ;
  5815                                  ; 2) the original segment is 0F000:xxxx
  5816                                  
  5817                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  5818                                  		;;mov	ax, 544h	; 10/12/2023
  5819                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  5820                                  		;mov	es, ax
  5821                                  		; 20/12/2022
  5822                                  		;push	ds ; SYSINITSEG
  5823                                  		;pop	es
  5824 00001D89 8EC2                    		mov	es, dx ; SYSINITSEG
  5825 00001D8B 31C0                    		xor	ax, ax ; 0
  5826 00001D8D 8ED8                    		mov	ds, ax		; segment 0
  5827                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  5828 00001D8F A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  5829                                  		; 18/10/2022
  5830 00001D92 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  5831                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  5832 00001D97 7605                    		jbe	short resetintf
  5833 00001D99 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  5834 00001D9C 750A                    		jnz	short keepintf
  5835                                  resetintf:	
  5836 00001D9E C7063C00[1406]          		mov	word [0Fh*4], intret			
  5837                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  5838 00001DA4 8C0E3E00                		mov	word [0Fh*4+2], cs
  5839                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  5840                                  keepintf:				
  5841                                  ; end important
  5842                                  
  5843                                  ; 17/10/2022
  5844                                  ; 28/12/2018 - Retro DOS v4.0
  5845                                  
  5846                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  5847                                  ;
  5848                                  ; we will check if the system has ibm extended keyboard by
  5849                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  5850                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  5851                                  ; for the extended keyboard function. use cx as the temporary register.
  5852                                  
  5853                                  		; 20/12/2022
  5854                                  		; ds = 0
  5855                                  		;xor	cx, cx
  5856                                  		;mov	ds, cx
  5857                                  
  5858 00001DA8 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  5859                                  
  5860                                  		; 20/12/2022
  5861                                  		; 20/03/2019
  5862 00001DAC 0E                      		push	cs
  5863 00001DAD 1F                      		pop	ds
  5864                                  
  5865                                  		;test	cl, 00010000b ; 10h
  5866 00001DAE F6C110                  		test	cl, 10h		; extended keyboard ?
  5867 00001DB1 740A                    		jz	short org_key	; no, original keyboard
  5868                                  
  5869                                  		; 20/12/2022
  5870                                  		;  ds = cs
  5871 00001DB3 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  5872 00001DB8 C606[7F04]11            		mov	byte [keysts_func], 11h
  5873                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  5874                                  		;mov	byte [cs:keysts_func], 11h
  5875                                  					; change for extended keyboard functions
  5876                                  org_key:
  5877                                  
  5878                                  ; 02/06/2018 - Retro DOS v3.0
  5879                                  
  5880                                  ;**************************************************************
  5881                                  ;	will initialize the number of drives
  5882                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  5883                                  ;	the indications are as follows:
  5884                                  ;
  5885                                  ;	bits	7	6	drives
  5886                                  ;		0	0	1
  5887                                  ;		0	1	2
  5888                                  ;		1	0	3
  5889                                  ;		1	1	4
  5890                                  ;**************************************************************
  5891                                  		
  5892                                  		; 20/12/2022
  5893                                  		; ds = cs
  5894                                  		;push	cs
  5895                                  		;pop	ds
  5896                                  		; 21/12/2022
  5897                                  		;push	cs
  5898                                  		;pop	es
  5899                                  
  5900 00001DBD E8C20A                  		call	cmos_clock_read	; If cmos clock	exists,
  5901                                  					; then set the system time according to	that.
  5902                                  					; also,	reset the cmos clock rate.
  5903                                  		; 18/10/2022
  5904                                  		;mov	word ptr BData_start, offset harddrv ;
  5905                                  					; set up pointer to hdrive
  5906                                  		; 02/10/2022
  5907 00001DC0 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  5908                                  
  5909                                  		; 20/12/2022
  5910                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  5911 00001DC6 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  5912                                  
  5913 00001DC7 30E4                    		xor	ah, ah		; chuck	fat id byte
  5914 00001DC9 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  5915 00001DCC A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  5916 00001DCF D1E0                    		shl	ax, 1
  5917 00001DD1 0106[5E1A]              		add	[last_dskdrv_table], ax
  5918                                  
  5919                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  5920                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  5921                                  		; ........
  5922 00001DD5 1E                      		push    ds
  5923 00001DD6 B800F0                  		mov     ax, 0F000h
  5924 00001DD9 8ED8                    		mov     ds, ax
  5925                                  
  5926 00001DDB 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  5927 00001DE1 751F                    		jne	short skip_mode2
  5928 00001DE3 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  5929 00001DE9 7517                    		jne	short skip_mode2
  5930 00001DEB 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  5931 00001DF1 750F                    		jne	short skip_mode2
  5932                                  
  5933 00001DF3 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  5934 00001DF6 CD15                    		int	15h
  5935 00001DF8 7208                    		jc	short skip_mode2
  5936                                  		; 10/12/2023
  5937                                  		; PCDOS 7.1 IBMBIO.COM
  5938                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  5939                                  					; (MSDOS 6.0)
  5940                                  		; MSDOS 6.22 IO.SYS
  5941 00001DFA 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  5942 00001DFD B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  5943 00001E00 CD15                    		int	15h
  5944                                  skip_mode2:
  5945 00001E02 1F                      		pop	ds
  5946                                  		; ........
  5947                                  
  5948 00001E03 B280                    		mov	dl, 80h
  5949 00001E05 B408                    		mov	ah, 8
  5950 00001E07 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5951                                  					; DL = drive number
  5952                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5953                                  					; DL = number of consecutive drives
  5954                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5955 00001E09 7204                    		jc	short enddrv
  5956 00001E0B 8816[5D1A]              		mov	[hnum], dl	; save number of hard disk drives
  5957                                  enddrv:
  5958                                  		; 21/12/2022
  5959 00001E0F 0E                      		push	cs
  5960 00001E10 07                      		pop	es
  5961                                  
  5962                                  ; scan the list of drives to determine their type. we have three flavors of
  5963                                  ; diskette drives:
  5964                                  ;
  5965                                  ;   48tpi drives    we do nothing special for them
  5966                                  ;   96tpi drives    mark the fact that they have changeline support.
  5967                                  ;   3.5"  drives    mark changeline support and small.
  5968                                  ;
  5969                                  ; the following code uses registers for certain values:
  5970                                  ;
  5971                                  ;   dl - physical drive
  5972                                  ;   ds:di - points to current bds
  5973                                  ;   cx - flag bits for bds
  5974                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  5975                                  					
  5976 00001E11 30D2                    		xor	dl, dl
  5977                                  
  5978                                  		; 20/12/2022
  5979                                  		; ds = cs
  5980                                  		; 17/06/2018		 
  5981                                  		;push	cs
  5982                                  		;pop	ds
  5983                                  
  5984 00001E13 C606[2C01]09            		mov	byte [eot], 9
  5985 00001E18 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  5986                                  					; to set aside two bdss	for the	two fake floppy	drives
  5987                                  
  5988                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  5989                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  5990                                  
  5991                                  ; check to see if we are faking floppy drives. if not we don't
  5992                                  ; do anything special. if we are faking floppy drives we need
  5993                                  ; to set aside two bdss for the two fake floppy drives. we
  5994                                  ; don't need to initalise any fields though. so starting at start_bds
  5995                                  ; use the link field in the bds structure to go to the second bds
  5996                                  ; in the list and initalise it's link field to -1 to set the end of
  5997                                  ; the list. then jump to the routine at dohard to allocate/initialise
  5998                                  ; the bds for harddrives.
  5999                                  
  6000 00001E1B 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  6001 00001E20 750B                    		jnz	short loop_drive
  6002 00001E22 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6003                                  					; di <-	first bds link
  6004 00001E24 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6005                                  					; di <-	second bds link
  6006 00001E26 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  6007 00001E2A E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  6008                                  ;-----------------------------------------------------------------------------
  6009                                  
  6010                                  loop_drive:				
  6011 00001E2D 3A16[7500]              		cmp	dl, [drvmax]
  6012 00001E31 7203                    		jb	short got_more
  6013 00001E33 E97B01                  		jmp	done_drives
  6014                                  ;-----------------------------------------------------------------------------
  6015                                  
  6016                                  got_more:	
  6017                                  		; 12/12/2023
  6018                                  		;xor	cx, cx		; zero all flags
  6019 00001E36 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6020                                  					; get next bds
  6021                                  		; ........
  6022                                  		; 10/12/2023 - Retro DOS v5.0
  6023                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  6024 00001E38 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  6025 00001E3B 7516                    		jne	short not_last_bds
  6026 00001E3D 88D0                    		mov	al, dl          ; drive number (0 based)
  6027 00001E3F 98                      		cbw
  6028 00001E40 01C0                    		add	ax, ax
  6029 00001E42 05[3C05]                		add	ax, dskdrvs
  6030 00001E45 A3[5E1A]                		mov	[last_dskdrv_table], ax
  6031 00001E48 8B3E[601A]              		mov	di, [end_of_bdss]
  6032 00001E4C E8FD09                  		call	xinstall_bds
  6033 00001E4F FE0E[7500]              		dec	byte [drvmax]
  6034                                  not_last_bds:
  6035                                  		; ........
  6036                                  
  6037 00001E53 B600                    		mov	dh, 0		; ff48tpi
  6038                                  					; set form factor to 48	tpi
  6039 00001E55 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  6040                                  		
  6041                                  		; 20/12/2022
  6042                                  		;push	ds ; 11/05/2019	
  6043 00001E5A 57                      		push	di
  6044 00001E5B 52                      		push	dx
  6045                                  		;push	cx ; not necessary (10/12/2023)
  6046 00001E5C 06                      		push	es ; ((*)) ; 20/12/2022
  6047                                  
  6048                                  		; ...........
  6049                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6050                                  		;xor	bx, bx
  6051                                  		;xor	cx, cx
  6052 00001E5D 52                      		push	dx  ; dl = drive number	
  6053                                  		
  6054 00001E5E B408                    		mov	ah, 8
  6055 00001E60 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6056                                  					; DL = drive number
  6057                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6058                                  					; DL = number of consecutive drives
  6059                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6060                                  		;jc	short noparmsfromrom
  6061                                  		; 10/12/2023
  6062 00001E62 58                      		pop	ax  ; al = drive number
  6063 00001E63 7303                    		jnc	short chk_drv_type
  6064 00001E65 E9E600                  		jmp	noparmsfromrom
  6065                                  
  6066                                  chk_drv_type:
  6067                                  		; 10/12/2023
  6068                                  		; ch = low eight bits of maximum cylinder number
  6069                                  		; cl = maximum sector number (bits 5-0)
  6070                                  		;      high two bits of maximum cylinder number (bits 7-6)
  6071                                  		;
  6072 00001E68 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  6073 00001E6B 7554                    		jne	short not_atapi_removable
  6074                                  		
  6075                                  		; save ds:si
  6076 00001E6D 1E                      		push	ds
  6077                                  		;push	si	; not necessary (10/12/2023)
  6078                                  		
  6079 00001E6E 88C2                    		mov	dl, al
  6080 00001E70 83EC1A                  		sub	sp, 26
  6081 00001E73 31C0                    		xor	ax, ax ; 0
  6082 00001E75 50                      		push	ax
  6083 00001E76 B81E00                  		mov	ax, 30
  6084 00001E79 50                      		push	ax
  6085 00001E7A 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  6086 00001E7C 16                      		push	ss
  6087 00001E7D 1F                      		pop	ds
  6088 00001E7E B448                    		mov	ah, 48h
  6089 00001E80 CD13                    		int	13h		; DISK - IBM/MS Extension
  6090                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  6091 00001E82 7239                    		jb	short ext_gdp_err
  6092 00001E84 8B4408                  		mov	ax, [si+8]	; physical number of heads
  6093 00001E87 A3[0C1A]                		mov	[num_heads], ax
  6094 00001E8A 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  6095 00001E8D A3[0E1A]                		mov	[num_cyln], ax
  6096 00001E90 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  6097 00001E93 A2[101A]                		mov	[sec_trk], al
  6098 00001E96 3A06[2C01]              		cmp	al, [eot]
  6099 00001E9A 7603                    		jbe	short _eotok
  6100 00001E9C A2[2C01]                		mov	[eot], al
  6101                                  
  6102                                  _eotok:		; 10/12/2023
  6103                                  		;xor	al, al
  6104 00001E9F 31C9                    		xor	cx, cx ; 0
  6105 00001EA1 F6440210                		test	byte [si+2], 10h ; information flags
  6106                                  					; bit 4 = Device has change line support
  6107 00001EA5 7403                    		jz	short not_chgline_sup
  6108                                  		;or	al, 2		; change line support
  6109 00001EA7 80C902                  		or	cl, 2
  6110                                  not_chgline_sup:
  6111 00001EAA 83C41E                  		add	sp, 30
  6112                                  		;pop	si	; (10/12/2023)
  6113 00001EAD 1F                      		pop	ds
  6114                                  		;
  6115 00001EAE 07                      		pop	es	; es=cs=ds (21/12/2022)
  6116                                  		;pop	cx	; (10/12/2023)
  6117 00001EAF 5A                      		pop	dx
  6118 00001EB0 5F                      		pop	di
  6119                                  		;pop	ds	; (21/12/2022)
  6120                                  
  6121                                  		; 10/12/2023
  6122 00001EB1 F6C102                  		test	cl, 2
  6123                                  		;test	al, 2
  6124                                  		;jz	short gotother_j
  6125 00001EB4 7450                    		jz	short gotother
  6126                                  		;or	cl, al
  6127 00001EB6 C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  6128                                  gotother_j:
  6129 00001EBB EB49                    		jmp	short gotother
  6130                                  ext_gdp_err:
  6131 00001EBD 83C41E                  		add	sp, 30
  6132                                  		;pop	si	; (10/12/2023)
  6133 00001EC0 1F                      		pop	ds
  6134                                  
  6135                                  		; 10/12/2023
  6136                                  not_atapi_removable:
  6137                                  		; ...........
  6138                                  
  6139                                  
  6140                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  6141                                  ; in this case, we are going to put bogus informations to bds table.
  6142                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  6143                                  ; they are calculated at the later time. this is just for the diagnostic
  6144                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  6145                                  ; this should only happen with drive b.
  6146                                  
  6147 00001EC1 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  6148 00001EC4 7505                    		jnz	short pfr_ok
  6149                                  
  6150                                  		;mov	ch, 39		; rom gave wrong info.
  6151                                  		;mov	cl, 9		; let's default to 360k.
  6152                                  		; 20/12/2022
  6153 00001EC6 B90927                  		mov	cx, 2709h
  6154                                  
  6155 00001EC9 B601                    		mov	dh, 1
  6156                                  pfr_ok:					
  6157                                  		;inc	dh		; make number of heads 1-based
  6158                                  		;mov	[num_heads], dh	; save parms returned by rom
  6159                                  		; 10/12/2023
  6160 00001ECB 86F2                    		xchg	dl, dh
  6161 00001ECD 30F6                    		xor	dh, dh
  6162 00001ECF 42                      		inc	dx		; make number of heads 1-based
  6163 00001ED0 8916[0C1A]              		mov	[num_heads], dx
  6164                                  
  6165                                  		;inc	ch		; make number of cylinders 1-based
  6166                                  		;and	cl, 3Fh
  6167                                  		;mov	[sec_trk], cl
  6168                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  6169                                  		; 10/12/2023
  6170 00001ED4 88CA                    		mov	dl, cl
  6171 00001ED6 80E23F                  		and	dl, 3Fh
  6172 00001ED9 8816[101A]              		mov	[sec_trk], dl
  6173 00001EDD 86E9                    		xchg	cl, ch
  6174 00001EDF D0C5                    		rol	ch, 1
  6175 00001EE1 D0C5                    		rol	ch, 1
  6176 00001EE3 80E503                  		and	ch, 3
  6177 00001EE6 41                      		inc	cx		; make number of cylinders 1-based
  6178 00001EE7 890E[0E1A]              		mov	[num_cyln], cx
  6179                                  
  6180                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  6181                                  
  6182                                  		;mov	cl, [sec_trk] ; 10/12/2023
  6183                                  		;cmp	cl, [eot]	; may set carry
  6184                                  		;;jbe	short eot_ok
  6185                                  		;; 09/12/2022
  6186                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  6187                                  		;; 14/08/2023
  6188                                  		;jbe	short eotok
  6189                                  		;mov	[eot], cl
  6190                                  		; 10/12/2023
  6191 00001EEB 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  6192 00001EEF 7604                    		jbe	short eotok
  6193 00001EF1 8816[2C01]              		mov	[eot], dl
  6194                                  ;eot_ok:
  6195                                  eotok:
  6196                                  		; 10/12/2023
  6197                                  		; !!!
  6198                                  		; (following pops are moved to 'chk_changeline' procedure)
  6199                                  		;
  6200                                  		; 20/12/2022
  6201                                  		;pop	es ; ((*)) es = cs = ds
  6202                                  		;;pop	cx	; 10/12/2023
  6203                                  		;pop	dx
  6204                                  		;pop	di
  6205                                  
  6206                                  		; 20/12/2022
  6207                                  		;pop	ds
  6208                                  
  6209                                  ; Check	for presence of	changeline
  6210                                  
  6211                                  ; 10/12/2023
  6212                                  %if 0
  6213                                  		; 10/12/2023
  6214                                  		;xor	cx, cx	; 0
  6215                                  		;push	cx
  6216                                  		push	dx
  6217                                  
  6218                                  		mov	ah, 15h
  6219                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6220                                  					; DL = drive ID
  6221                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6222                                  					; CX:DX	= number of sectors on the media
  6223                                  		; 10/12/2023
  6224                                  		pop	dx
  6225                                  		;pop	cx
  6226                                  		mov	cx, 0 ; 12/12/2023
  6227                                  		jc	short changeline_done
  6228                                  		cmp	ah, 2		; check	for presence of	changeline
  6229                                  		jnz	short changeline_done
  6230                                  
  6231                                  ; we have a drive with change line support.
  6232                                  
  6233                                  		or	cl, 2		; fchangeline
  6234                                  					; signal type
  6235                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  6236                                  %endif
  6237                                  		; 10/12/2023
  6238 00001EF5 E83800                  		call	chk_changeline
  6239                                  		;jc	short changeline_done
  6240                                  
  6241                                  ; we now try to set up the form factor for the types of media that we know
  6242                                  ; and can recognise. for the rest, we set the form factor as "other".
  6243                                  
  6244                                  changeline_done:
  6245                                  
  6246                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  6247                                  			
  6248 00001EF8 803E[0E1A]28            		cmp	byte [num_cyln], 40
  6249 00001EFD 750B                    		jnz	short try_80
  6250 00001EFF 803E[101A]09            		cmp	byte [sec_trk], 9
  6251 00001F04 765F                    		jbe	short nextdrive
  6252                                  gotother:
  6253                                  		; 10/12/2023
  6254                                  		; ch = 0, cl = 2 or 0
  6255                                  				
  6256 00001F06 B607                    		mov	dh, 7 		; ffOther
  6257                                  					; we have a "strange" medium 
  6258 00001F08 EB5B                    		jmp	short nextdrive
  6259                                  ;-----------------------------------------------------------------------------
  6260                                  
  6261                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  6262                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  6263                                  
  6264                                  try_80:					
  6265 00001F0A 803E[0E1A]50            		cmp	byte [num_cyln], 80
  6266 00001F0F 75F5                    		jnz	short gotother
  6267 00001F11 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  6268 00001F13 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it ?
  6269 00001F18 744B                    		jz	short nextdrive	; yeah,	go update
  6270                                  
  6271                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  6272                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  6273                                  		;mov	dh, ff144
  6274                                  		;cmp	byte [sec_trk], 18
  6275                                  		;je	short nextdrive
  6276                                  
  6277 00001F1A 803E[101A]0F            		cmp	byte [sec_trk], 15
  6278 00001F1F 740B                    		jz	short got96
  6279                                  		
  6280 00001F21 803E[101A]09            		cmp	byte [sec_trk], 9
  6281 00001F26 75DE                    		jnz	short gotother
  6282                                  		
  6283 00001F28 B602                    		mov	dh, 2 		; ffSmall
  6284 00001F2A EB39                    		jmp	short nextdrive
  6285                                  ; ----------------------------------------------------------------------------
  6286                                  
  6287                                  got96:					
  6288 00001F2C B601                    		mov	dh, 1		; ff96tpi
  6289 00001F2E EB35                    		jmp	short nextdrive
  6290                                  
  6291                                  ; ----------------------------------------------------------------------------
  6292                                  		
  6293                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6294                                  		; check change line feature (and set fhave96 if there is)
  6295                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  6296                                  chk_changeline:
  6297 00001F30 59                      		pop	cx ; near call return address
  6298                                  
  6299                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  6300 00001F31 07                      		pop	es ; es=cs=ds ; 21/12/2022
  6301                                  		;pop	cx	; (10/12/2023)
  6302 00001F32 5A                      		pop	dx
  6303 00001F33 5F                      		pop	di ; BDS address/offset
  6304                                  		
  6305 00001F34 51                      		push	cx ; near call return address
  6306                                  
  6307                                  		;xor	cx, cx ; 0
  6308                                  		;push	cx
  6309 00001F35 52                      		push	dx
  6310                                  
  6311 00001F36 B415                    		mov	ah, 15h
  6312 00001F38 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6313                                  					; DL = drive ID
  6314                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6315                                  					; CX:DX	= number of sectors on the media
  6316 00001F3A 5A                      		pop	dx
  6317                                  		;pop	cx
  6318 00001F3B B90000                  		mov	cx, 0
  6319 00001F3E 720D                    		jc	short chk_chgl_1
  6320                                  
  6321 00001F40 80FC02                  		cmp	ah, 2		; is there changeline?
  6322 00001F43 7508                    		jne	short chk_chgl_2 ; *
  6323                                  
  6324 00001F45 80C902                  		or	cl, 2
  6325                                  		;or	cl, ah ; 2
  6326 00001F48 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  6327                                  		; cf = 0
  6328                                  chk_chgl_1:
  6329                                  chk_chgl_2:
  6330 00001F4D C3                      		retn
  6331                                  
  6332                                  ;chk_chgl_2:	; *
  6333                                  ;		; 10/12/2023
  6334                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  6335                                  ;		;stc
  6336                                  ;		; cf = 1
  6337                                  ;		retn
  6338                                  
  6339                                  ; ----------------------------------------------------------------------------
  6340                                  
  6341                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  6342                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  6343                                  
  6344                                  noparmsfromrom:
  6345                                  		; 10/12/2023
  6346                                  		; !!!
  6347                                  		; (following pops are moved to 'chk_changeline' procedure)
  6348                                  		;
  6349                                  		; 20/12/2022
  6350                                  		;pop	es ; ((*))
  6351                                  		;;pop	cx	; (10/12/2023)
  6352                                  		;pop	dx
  6353                                  		;pop	di
  6354                                  		
  6355                                  		; 20/12/2022
  6356                                  		;pop	ds
  6357                                  ; 10/12/2023
  6358                                  %if 0
  6359                                  		; 10/12/2023
  6360                                  		;xor	cx, cx ; 0
  6361                                  		;push	cx
  6362                                  		push	dx
  6363                                  
  6364                                  
  6365                                  		mov	ah, 15h
  6366                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6367                                  					; DL = drive ID
  6368                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6369                                  					; CX:DX	= number of sectors on the media
  6370                                  		; 10/12/2023
  6371                                  		pop	dx
  6372                                  		;pop	cx
  6373                                  		mov	cx, 0 ; 12/12/2023
  6374                                  		jc	short nextdrive
  6375                                  
  6376                                  		cmp	ah, 2		; is there changeline?
  6377                                  		jnz	short nextdrive
  6378                                  
  6379                                  		or	cl, 2
  6380                                  		mov	byte [fhave96], 1 ; fchangeline
  6381                                  %endif
  6382                                  		; 10/12/2023
  6383 00001F4E E8DFFF                  		call	chk_changeline
  6384 00001F51 7212                    		jc	short nextdrive
  6385                                  		
  6386                                  		; change line support, [fhave96] = 1
  6387                                  		
  6388 00001F53 C606[0E1A]50            		mov	byte [num_cyln], 80
  6389 00001F58 B601                    		mov	dh, 1		; ff96tpi
  6390 00001F5A B00F                    		mov	al, 15
  6391 00001F5C 3A06[2C01]              		cmp	al, [eot]
  6392 00001F60 7603                    		jbe	short nextdrive
  6393 00001F62 A2[2C01]                		mov	[eot], al
  6394                                  ; ----------------------------------------------------------------------------
  6395                                  
  6396                                  ;eot_ok2:
  6397                                  nextdrive:
  6398                                  		; 10/12/2023
  6399                                  		; ch = 0, cl = 2 or 0	
  6400                                  				
  6401 00001F65 80C920                  		or	cl, 20h	; fi_own_physical
  6402                                  					; set this true	for all	drives
  6403 00001F68 88D7                    		mov	bh, dl		; save int13 drive number
  6404                                  
  6405                                  ; we need to do special things if we have a single drive system and are setting
  6406                                  ; up a logical drive. it needs to have the same int13 drive number as its
  6407                                  ; counterpart, but the next drive letter. also reset ownership flag.
  6408                                  ; we detect the presence of this situation by examining the flag single for the
  6409                                  ; value 2.
  6410 00001F6A 803E[7800]02            		cmp	byte [single], 2
  6411 00001F6F 7505                    		jnz	short not_special
  6412 00001F71 FECF                    		dec	bh		; int13	drive number same for logical drive
  6413 00001F73 80F120                  		xor	cl, 20h	; fi_own_physical
  6414                                  					; reset	ownership flag for logical drive
  6415                                  not_special:
  6416                                  
  6417                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  6418                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  6419                                  ; form factor is of type "ffother".
  6420                                  				
  6421                                  		;xor	ax, ax		; fill BDS for drive
  6422                                  		;mov	al, [num_heads]
  6423                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  6424 00001F76 A1[0C1A]                		mov	ax, [num_heads]
  6425                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  6426 00001F79 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  6427 00001F7C 31C0                    		xor	ax, ax		; *
  6428 00001F7E A0[101A]                		mov	al, [sec_trk]
  6429                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  6430 00001F81 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  6431                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  6432 00001F84 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  6433                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  6434 00001F87 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  6435 00001F8A 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  6436 00001F8D 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  6437                                  		;mov	bl, [num_cyln]
  6438                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  6439                                  		; 10/12/2023
  6440 00001F90 A1[0E1A]                		mov	ax, [num_cyln]
  6441 00001F93 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  6442                                  
  6443 00001F96 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  6444 00001F9B 7510                    		jnz	short no_single
  6445                                  		;mov	byte [single], 2 ; Don't forget we have
  6446                                  					; single drive system
  6447                                  		; 10/12/2023
  6448 00001F9D FE06[7800]              		inc	byte [single]	; [single] = 2
  6449                                  		; 18/12/2022
  6450 00001FA1 80C910                  		or	cl, 10h
  6451                                  		;or	cx, 10h		; fi_am_mult
  6452                                  					; set that this	is one of several drives
  6453                                  		;or	[di+23h], cx	; [di+BDS.flags]
  6454 00001FA4 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  6455                                  					; save flags
  6456 00001FA7 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6457                                  					; move to next BDS in list
  6458 00001FA9 FEC2                    		inc	dl		; add a	number
  6459 00001FAB EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  6460                                  ; ----------------------------------------------------------------------------
  6461                                  
  6462                                  no_single:				
  6463                                  		;inc	dl
  6464                                  		; 18/12/2022
  6465 00001FAD 42                      		inc	dx
  6466 00001FAE E97CFE                  		jmp	loop_drive
  6467                                  ; ----------------------------------------------------------------------------
  6468                                  
  6469                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6470                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  6471                                  done_drives:	
  6472                                  		;mov	word [di+BDS.link], -1
  6473 00001FB1 C705FFFF                		mov	word [di], -1	; set link to null
  6474                                  
  6475                                  ; set up all the hard drives in	the system
  6476                                  
  6477                                  		; 20/12/2022
  6478                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6479                                  dohard:					
  6480 00001FB5 8A36[5D1A]              		mov	dh, [hnum]
  6481 00001FB9 08F6                    		or	dh, dh		; done if no hardfiles
  6482 00001FBB 7459                    		jz	short static_configure
  6483 00001FBD B280                    		mov	dl, 80h
  6484                                  dohard1:				
  6485 00001FBF 52                      		push	dx
  6486 00001FC0 8B3E[601A]              		mov	di, [end_of_bdss]
  6487 00001FC4 8A1E[7500]              		mov	bl, [drvmax]
  6488 00001FC8 B700                    		mov	bh, 0		; first	primary	partition (or active)
  6489 00001FCA E89A01                  		call	sethard
  6490 00001FCD 7208                    		jb	short hardfile_err
  6491 00001FCF E86508                  		call	dmax_check	; error	if already 26 drives
  6492 00001FD2 7303                    		jnb	short hardfile_err
  6493 00001FD4 E87508                  		call	xinstall_bds	; insert new bds into linked list
  6494                                  hardfile_err:				
  6495 00001FD7 5A                      		pop	dx
  6496                                  		;inc	dl		; next hard drive
  6497                                  		; 12/12/2023
  6498 00001FD8 42                      		inc	dx
  6499 00001FD9 FECE                    		dec	dh
  6500 00001FDB 75E2                    		jnz	short dohard1
  6501                                  
  6502                                  ; end of physical drive	initialization
  6503                                  
  6504                                  ; *** do not change the position of the following statement.
  6505                                  ; *** domini routine will use [drvmax] value for the start of the logical
  6506                                  ; *** drive number of mini disk(s).
  6507                                  					
  6508 00001FDD E8CA06                  		call	domini		; for setting up mini disks, if found
  6509                                  
  6510                                  ; -- begin added section
  6511                                  
  6512 00001FE0 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  6513 00001FE4 B280                    		mov	dl, 80h
  6514                                  dohardx1:				
  6515 00001FE6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  6516                                  dohardx2:				
  6517 00001FE8 52                      		push	dx
  6518 00001FE9 53                      		push	bx
  6519 00001FEA 8B3E[601A]              		mov	di, [end_of_bdss]
  6520 00001FEE 8A1E[7500]              		mov	bl, [drvmax]
  6521 00001FF2 E87201                  		call	sethard
  6522 00001FF5 720E                    		jb	short dohardx4	; move to next hardfile if error
  6523 00001FF7 E83D08                  		call	dmax_check	; make sure <=26 drives
  6524 00001FFA 7309                    		jnb	short dohardx4	; skip if error
  6525 00001FFC E84D08                  		call	xinstall_bds	; insert new bds into linked list
  6526 00001FFF 5B                      		pop	bx		; get partition number
  6527 00002000 5A                      		pop	dx		; restore physical drive counts
  6528 00002001 FEC7                    		inc	bh
  6529 00002003 EBE3                    		jmp	short dohardx2	; keep looping until we fail
  6530                                  ; ----------------------------------------------------------------------------
  6531                                  
  6532                                  dohardx4:				
  6533 00002005 5B                      		pop	bx		; unjunk partition number from stack
  6534 00002006 5A                      		pop	dx		; restore physical drive counts
  6535                                  		;inc	dl		; next hard drive
  6536                                  		; 12/12/2023
  6537 00002007 42                      		inc	dx
  6538 00002008 FECE                    		dec	dh
  6539 0000200A 75DA                    		jnz	short dohardx1
  6540                                  
  6541                                  ; -- end changed section
  6542                                  
  6543                                  ;******************************************************************************
  6544                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  6545                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  6546                                  ; than two diskette drives
  6547                                  ;
  6548                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  6549                                  ;		as usual and then rescan the bds chain to adjust the  drive
  6550                                  ;		letters. to do this, scan for disk drives and assign logical
  6551                                  ;		drive number starting from 2 and then rescan diskette drives
  6552                                  ;		and assign next to the last logical drive number of last disk
  6553                                  ;		drive to the 3rd and 4th diskette drives.
  6554                                  ;******************************************************************************
  6555                                  
  6556 0000200C 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  6557                                  		;jbe	short static_configure ; no - no need for remapping
  6558 00002011 7603                    		jbe	short no_remap
  6559 00002013 E8D500                  		call	remap		; remap	bds chain to adjust driver letters
  6560                                  no_remap:
  6561                                  
  6562                                  ; End of drive initialization.
  6563                                  
  6564                                  ; ----------------------------------------------------------------------------
  6565                                  
  6566                                  ;we now decide, based on the configurations available so far, what
  6567                                  ;code or data we need to keep as a stay resident code. the following table
  6568                                  ;shows the configurations under consideration. they are listed in the order
  6569                                  ;of their current position memory.
  6570                                  ;
  6571                                  ;configuration will be done in two ways:
  6572                                  ;
  6573                                  ;first, we are going to set "static configuration". static configuration will
  6574                                  ;consider from basic configuration to endof96tpi configuration. the result
  6575                                  ;of static configuration will be the address the dynamic configuration will
  6576                                  ;use to start with.
  6577                                  ;
  6578                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  6579                                  ;involves possible relocation of code or data. dynamic configuration routine
  6580                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  6581                                  ;code individually. after these operation, [dosdatasg] will be set.
  6582                                  ;this will be the place sysinit routine will relocate msdos module for good.
  6583                                  
  6584                                  ; -- begin changed section
  6585                                  ;
  6586                                  ;   1.	 basic configuration for msbio (endfloppy)
  6587                                  ;   2.   end96tpi	; a system that supports "change line error"
  6588                                  ;   3.	 end of bdss	; end of bdss for hard disks
  6589                                  ;   4.	 endatrom	;some of at rom fix module.
  6590                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  6591                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  6592                                  ;
  6593                                  
  6594                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  6595                                  
  6596                                  static_configure:			
  6597 00002016 8B3E[601A]              		mov	di, [end_of_bdss]
  6598 0000201A 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  6599                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  6600 0000201E 750D                    		jnz	short dynamic_configure	; that's the end, then
  6601                                  		; 18/10/2022
  6602 00002020 BF[4C08]                		mov	di, end96tpi
  6603                                  		;mov	di, offset harddrv ; end96tpi
  6604                                  					; keep everything up to end96tpi
  6605 00002023 803E[7700]00            		cmp	byte [fhave96], 0
  6606 00002028 7503                    		jnz	short dynamic_configure
  6607                                  		
  6608 0000202A BF[3808]                		mov	di, endfloppy
  6609                                  dynamic_configure:
  6610                                  		; 20/12/2022
  6611                                  		;push	cs
  6612                                  		;pop	es
  6613                                  		
  6614                                  		; 10/12/2023
  6615 0000202D FC                      		cld	; clear direction flag is not necessary here !?
  6616                                  			; because there will not be a running program
  6617                                  			; which will set direction flag as backward (std)
  6618                                  
  6619                                  ; -- end changed section
  6620                                  
  6621                                  		; 20/12/2022
  6622                                  		; ds = cs <> es
  6623                                  		; ss = 0
  6624                                  		; sp = 700h
  6625                                  
  6626                                  		; 13/12/2023
  6627 0000202E BE00F0                  		mov	si, 0F000h
  6628 00002031 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  6629                                  
  6630 00002033 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  6631                                  		;jnz	short checkcmosclock
  6632                                  		; 10/12/2023
  6633 00002038 751E                    		jnz	short checkcompaqbug ; no
  6634 0000203A 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  6635                                  		;jz	short checkcmosclock
  6636 0000203F 7417                    		jz	short checkcompaqbug
  6637 00002041 97                      		xchg	ax, di		; save allocation pointer in ax
  6638                                  		; 13/12/2023
  6639                                  		;mov	si, 0F000h
  6640                                  		;mov	es, si		; ES ->	ROM BIOS segment
  6641 00002042 BE[661A]                		mov	si, bios_date	; "01/10/84"
  6642 00002045 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  6643 00002048 B90900                  		mov	cx, 9		; bdate_l
  6644                                  					; Only patch ROM for bios 01/10/84
  6645 0000204B F3A6                    		repe cmpsb		; check	for date + zero	on end
  6646 0000204D 97                      		xchg	ax, di		; restore allocation pointer
  6647                                  
  6648                                  ; M015 -- begin changes
  6649                                  
  6650                                  		;jnz	short checkcmosclock
  6651                                  		; 02/10/2022
  6652 0000204E 7508                    		jnz	short checkcompaqbug
  6653                                  
  6654                                  ; install at rom fix
  6655                                  
  6656                                  		; 19/10/2022
  6657                                  		;mov	cx, offset endatrom
  6658 00002050 B9[2018]                		mov	cx, endatrom
  6659                                  		;mov	si, offset ibm_disk_io
  6660 00002053 BE[F216]                		mov	si, ibm_disk_io
  6661 00002056 EB46                    		jmp	short install_int13_patch
  6662                                  ; ----------------------------------------------------------------------------
  6663                                  
  6664                                  ; M065 -- begin changes
  6665                                  ;
  6666                                  ; On certain systems with Western Digital disk controllers, the
  6667                                  ; following detection scheme caused an unpredictable and serious
  6668                                  ; failure. In particular, they've implemented a nonstandard
  6669                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  6670                                  ; what happens to be at es:[bx] and other memory locations indexed
  6671                                  ; off of it.
  6672                                  ;
  6673                                  ; Compaq was unable to tell us exactly which kind of systems have
  6674                                  ; the bug, except that they guarantee that the bug was fixed in
  6675                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  6676                                  ; string, and then look for date codes before 08/04/86 to decide
  6677                                  ; when to install the hook.
  6678                                  
  6679                                  ;checkcmosclock:
  6680                                  ; 02/10/2022				
  6681                                  checkcompaqbug:
  6682                                  		; 20/12/2022
  6683                                  		; es = 0F000h
  6684                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  6685                                  		;mov	es, ax
  6686                                  
  6687                                  		; 19/10/2022
  6688 00002058 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  6689                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  6690 0000205F 754B                    		jnz	short not_compaq_patch
  6691 00002061 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  6692                                  		;cmp	word ptr es:0FFECh, 'PM'
  6693 00002068 7542                    		jnz	short not_compaq_patch
  6694 0000206A 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  6695                                  		;cmp	word ptr es:0FFEEh, 'QA'
  6696 00002071 7539                    		jnz	short not_compaq_patch
  6697                                  
  6698                                  ; We're running on a COMPAQ. Now look at the date code.
  6699                                  
  6700 00002073 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  6701 00002077 86C4                    		xchg	ah, al
  6702                                  
  6703                                  ; 11/12/2023
  6704                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  6705                                  %if 0
  6706                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  6707                                  		ja	short not_compaq_patch
  6708                                  		jz	short chkcompaqbug1
  6709                                  		cmp	ax, 3739h       ; '97'
  6710                                  		jbe	short not_compaq_patch
  6711                                  		stc
  6712                                  chkcompaqbug1:
  6713                                  		jb	short do_compaq_patch
  6714                                  		mov	ax, [es:0FFF5h]
  6715                                  		xchg	ah, al
  6716                                  		cmp	ax, 3038h       ; '80'
  6717                                  		ja	short not_compaq_patch
  6718                                  		jb	short do_compaq_patch
  6719                                  		mov	ax, [es:0FFF8h]
  6720                                  		xchg	ah, al
  6721                                  		cmp	ax, 3034h       ; '40'
  6722                                  		jnb	short not_compaq_patch
  6723                                  do_compaq_patch:
  6724                                  %endif
  6725                                  		; 11/12/2023
  6726                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  6727                                  
  6728 00002079 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  6729                                  		;cmp	ax, '86'        ; 3836h
  6730                                  					; is it	86?
  6731 0000207C 772E                    		ja	short not_compaq_patch
  6732 0000207E 7218                    		jb	short do_compaq_patch
  6733 00002080 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  6734 00002084 86C4                    		xchg	ah, al
  6735 00002086 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  6736                                  		;cmp	ax, '08'        ; 3038h
  6737                                  					; is it	08?
  6738 00002089 7721                    		ja	short not_compaq_patch
  6739 0000208B 720B                    		jb	short do_compaq_patch
  6740 0000208D 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  6741 00002091 86C4                    		xchg	ah, al
  6742 00002093 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  6743                                  		;cmp	ax, '04'        ; 3034h
  6744                                  					; is it	04?
  6745 00002096 7314                    		jnb	short not_compaq_patch
  6746                                  
  6747                                  do_compaq_patch:			
  6748 00002098 B9[3D18]                		mov	cx, end_compaq_i13hook
  6749                                  		;mov	si, endatrom
  6750                                  		; 11/12/2023
  6751 0000209B BE[2018]                		mov	si, compaq_disk_io ; endatrom
  6752                                  
  6753                                  install_int13_patch:			
  6754 0000209E 0E                      		push	cs
  6755 0000209F 07                      		pop	es
  6756                                  		; 18/10/2022
  6757 000020A0 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  6758 000020A4 8C0E[B600]              		mov	[Orig13+2], cs
  6759 000020A8 29F1                    		sub	cx, si		; size of rom fix module
  6760 000020AA F3A4                    		rep movsb		; relocate it
  6761                                  
  6762                                  ; M065 -- end changes
  6763                                  
  6764                                  ; ----------------------------------------------------------------------------
  6765                                  not_compaq_patch:			; M065
  6766                                  		; 17/10/2022
  6767                                  checkcmosclock:	
  6768                                  		; 18/10/2022		
  6769 000020AC 0E                      		push	cs
  6770 000020AD 07                      		pop	es
  6771                                  
  6772                                  		; 20/12/2022
  6773                                  		; ds = cs = es
  6774                                  		; ss = 0
  6775                                  		; sp = 700h
  6776                                  
  6777                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6778                                  %if 0
  6779                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  6780                                  		jnz	short checkk09	; no
  6781                                  
  6782                                  		mov	word [daycnttoday], di
  6783                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  6784                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  6785                                  		mov	si, daycnt_to_day
  6786                                  		rep movsb
  6787                                  		mov	word [bintobcd], di
  6788                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  6789                                  					; let original segment stay
  6790                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  6791                                  		; 08/08/2023
  6792                                  		mov	cl, 11
  6793                                  		mov	si, bin_to_bcd
  6794                                  		rep movsb
  6795                                  %endif
  6796                                  
  6797                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6798                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  6799                                  		;push	cs
  6800                                  		;pop	es
  6801                                  checkk09:				
  6802 000020AE 57                      		push	di ; ? ; save ? ; 21/12/2022
  6803                                  
  6804                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  6805                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  6806                                  %if 0		
  6807                                  
  6808                                  		mov	ax, 4101h	; wait for bh=es:[di]
  6809                                  		mov	bl, 1		; wait for 1 clock tick
  6810                                  		mov	bh, [es:di]
  6811                                  		stc			; Assume we will fail
  6812                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  6813                                  					; AL = condition type, BH = condition compare or mask value
  6814                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  6815                                  					; DX = I/O port	address	if AL bit 4 set
  6816                                  					; 11/12/2023
  6817                                  					; ES:DI = user byte if AL bit 4 clear
  6818                                  %endif
  6819                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  6820                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  6821                                  	
  6822                                  		; ........
  6823                                  
  6824 000020AF B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  6825 000020B2 B304                    		mov	bl, 4		; wait for 4 clock ticks
  6826 000020B4 F9                      		stc			; Assume we will fail
  6827 000020B5 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  6828                                  					; AL = condition type, BH = condition compare or mask value
  6829                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  6830                                  					; DX = I/O port address if AL bit 4 set
  6831                                  		; ........
  6832                                  
  6833 000020B7 5F                      		pop	di ; ?
  6834 000020B8 721B                    		jc	short configdone ; 21/12/2022
  6835                                  
  6836 000020BA C606[7900]01            		mov	byte [fhavek09], 1
  6837                                  					; remember we have a k09 type
  6838 000020BF 1E                      		push	ds
  6839 000020C0 31C0                    		xor	ax, ax
  6840 000020C2 8ED8                    		mov	ds, ax
  6841                                  		
  6842 000020C4 893EB001                		mov	[6Ch*4], di
  6843                                  		;mov	ds:1B0h, di	; [6Ch*4]
  6844                                  					; new int 6Ch handler
  6845                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  6846 000020C8 8C0EB201                		mov	word [6Ch*4+2], cs
  6847 000020CC 1F                      		pop	ds
  6848                                  		; 20/12/2022
  6849                                  		; ds = cs = es
  6850                                  		;mov	si, int6c
  6851                                  		;mov	cx, endk09-int6c ; 459
  6852                                  		;;mov	cx, 459		; endk09 - int6c
  6853                                  					; size of k09 routine
  6854                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6855                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  6856 000020CD BE[3E18]                		mov	si, int_6Ch
  6857 000020D0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  6858 000020D3 F3A4                    		rep movsb		;
  6859                                  					; set up config	stuff for sysinit
  6860                                  ; ----------------------------------------------------------------------------
  6861                                  ; Set up config stuff for SYSINIT
  6862                                  
  6863                                  ; 17/10/2022
  6864                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  6865                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  6866                                  ; 09/12/2022
  6867                                  SETDRIVE equ SetDrive
  6868                                  GETBP equ GetBp
  6869                                  		
  6870                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6871                                  configdone:	
  6872                                  		; 21/12/2022			
  6873                                  		; 20/03/2019
  6874                                  		;push	cs		; di is	final ending address of	msbio.
  6875                                  		;pop	ds
  6876                                  		
  6877 000020D5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  6878                                  		; 10/12/2022
  6879                                  		;shr	di, 1
  6880                                  		;shr	di, 1
  6881                                  		;shr	di, 1
  6882                                  		;shr	di, 1
  6883 000020D8 B104                    		mov	cl, 4
  6884 000020DA D3EF                    		shr	di, cl		
  6885                                  		; 10/12/2022
  6886 000020DC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  6887                                  		; 19/10/2022 - Temporary !
  6888                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  6889 000020DF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  6890                                  
  6891                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  6892                                  
  6893                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  6894                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  6895                                  	     
  6896                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  6897                                  
  6898                                  ; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 combined/single kernel file)
  6899                                  
  6900                                  	     ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  6901                                  
  6902                                  	     ; (("IBMDOS.COM" kernel file reading code here, below...))	
  6903                                  
  6904                                  ; ----------------------------------------------------------------------------
  6905                                  ; ----------------------------------------------------------------------------
  6906                                  %if 0
  6907                                  		mov	ax, [drvfat]	; get drive and	fat id
  6908                                  		; 22/12/2022
  6909                                  		; Note: SETDRIVES uses AL (drive number) only
  6910                                  		mov	bp, SETDRIVE
  6911                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6912                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  6913                                  					; at 2C7h:4D7h = 70h:2A47h
  6914                                  		push	cs		; simulate far call
  6915                                  		call	call_bios_code	; get bds for drive
  6916                                  		mov	bp, GETBP	; ensure valid bpb is present
  6917                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6918                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  6919                                  		push	cs
  6920                                  		call	call_bios_code
  6921                                  
  6922                                  	; resort to funky old segment definitions for now
  6923                                  
  6924                                  		; 22/12/2022
  6925                                  		;push	es		; copy bds to ds:di
  6926                                  		;pop	ds
  6927                                  
  6928                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  6929                                  	;
  6930                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  6931                                  	;	  back. Apparently it was what actually setup es: for the following
  6932                                  	; cas----
  6933                                  
  6934                                  		; 22/12/2022
  6935                                  		;xor	di, di
  6936                                  		;mov	al, [es:di]	; get fat id byte
  6937                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  6938                                  		;mov	[es:drvfat+1], al
  6939                                  		;mov	ax, [es:drvfat]
  6940                                  		
  6941                                  		; 22/12/2022
  6942                                  		; ds = cs
  6943                                  	;;;	mov	al, [drvfat]
  6944                                  
  6945                                  	; cas -- why do a SECOND setdrive here???
  6946                                  
  6947                                  		; 22/12/2022
  6948                                  		;push	es		; save whatever's in es
  6949                                  		;push	ds		; copy bds to es:di
  6950                                  		;pop	es
  6951                                  		;push	cs		; copy Bios_Data to ds
  6952                                  		;pop	ds
  6953                                  	
  6954                                  	; 22/12/2022
  6955                                  	;;;	mov	bp, SETDRIVE
  6956                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  6957                                  	;;;	push	cs		; simulate far call
  6958                                  	;;;	call	call_bios_code	; get correct bds for this drive
  6959                                  	
  6960                                  		; 22/12/2022
  6961                                  		;push	es		; copy bds back to ds:di
  6962                                  		;pop	ds
  6963                                  		;pop	es		; pop whatever was in es
  6964                                  
  6965                                  	; Now we load in the MSDOS.SYS file
  6966                                  
  6967                                  	; 22/12/2022
  6968                                  	; -----
  6969                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6970                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  6971                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  6972                                  	;				; get size of fat on media
  6973                                  	;	;mov	es:16DEh, bl
  6974                                  	;	mov	[es:fbigfat], bl
  6975                                  	;	mov	cl, [di+8]
  6976                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6977                                  	;	;sub	es:16D8h, ax
  6978                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  6979                                  	;				; need a logical sector number that will
  6980                                  	;				; be used by getclus(diskrd procedure)
  6981                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  6982                                  	;	;sbb	es:16DAh, ax
  6983                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  6984                                  	; -----
  6985                                  		
  6986                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6987                                  	; -----	; 22/12/2022
  6988                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6989                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  6990                                  		; 11/12/2023 ; *
  6991                                  		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  6992                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  6993                                  					; get size of fat on media
  6994                                  		mov	[fbigfat], bl
  6995                                  		mov	cl, [es:di+8]
  6996                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6997                                  		sub	[First_Data_Sector], ax ; *
  6998                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  6999                                  					; need a logical sector number that will
  7000                                  					; be used by getclus(diskrd procedure)
  7001                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7002                                  		sbb	[First_Data_Sector+2], ax ; *
  7003                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  7004                                  	; ------
  7005                                  
  7006                                  		xor	ch, ch	 ; cx = sectors/cluster
  7007                                  
  7008                                  	; the boot program has left the directory at 0:500h
  7009                                  
  7010                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7011                                  		;push	di
  7012                                  		push	ds
  7013                                  		;xor	di, di
  7014                                  		;mov	ds, di
  7015                                  		xor	bx, bx ; 0
  7016                                  		mov	ds, bx
  7017                                  		mov	bx, [53Ah]
  7018                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  7019                                  				   	; of root directory in the buffer at 500h)
  7020                                  		pop	ds
  7021                                  		mov     si, [firstcluster_hw] ; 11/12/2023 
  7022                                  				   	; (32 bit cluster number for FAT32 fs)
  7023                                  		;pop	ds
  7024                                  		;pop	di
  7025                                  
  7026                                  		; 12/12/2023
  7027                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  7028                                  		; ...........
  7029                                  		; ds = cs
  7030                                  		mov	al, [fbigfat]
  7031                                  		push	ax              ; (*) save fbigfat flags
  7032                                  		mov	al, [drvfat]
  7033                                  		or	al, [Boot_Drv]
  7034                                  		jnz	short boot_drv_fixed ; hard disk
  7035                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  7036                                  		push	bx              ; for removable drives
  7037                                  		push	cx
  7038                                  		; 28/12/2023
  7039                                  		;push	dx ; (not necessary)
  7040                                  	
  7041                                  		; 12/12/2023
  7042                                  		push	es
  7043                                  		pop	ds
  7044                                  
  7045                                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  7046                                  		xor	dx, dx
  7047                                  		or	ax, ax
  7048                                  		jnz	short prep_totalsecs_ok
  7049                                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  7050                                  		mov	dx, [di+1Dh]
  7051                                  prep_totalsecs_ok:
  7052                                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  7053                                  		sbb	dx, 0
  7054                                  		push	ax
  7055                                  		push	dx
  7056                                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  7057                                  		xor	ax, ax
  7058                                  		or	bx, bx
  7059                                  		jnz	short prep_fatsecs_ok
  7060                                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  7061                                  		mov	ax, [di+21h]
  7062                                  prep_fatsecs_ok:
  7063                                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  7064                                  				        ; [di+BDS.fats]
  7065                                  		xor	ch, ch
  7066                                  		mul	cx
  7067                                  		xchg	ax, cx
  7068                                  		mul	bx
  7069                                  		add	cx, dx
  7070                                  		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  7071                                  		pop	dx
  7072                                  		pop	ax              ; dx:ax = totals sectors - reserved sectors
  7073                                  		sub	ax, bx
  7074                                  		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  7075                                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  7076                                  		add	bx, 15          ; 16 directory entries per sector
  7077                                  				        ; (round up sector count by adding 15)
  7078                                  		mov	cl, 4           ; (rounded) dir entries / 16
  7079                                  		shr	bx, cl
  7080                                  		xor	cx, cx
  7081                                  		sub	ax, bx
  7082                                  		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  7083                                  					; (will be used for cluster count calculation)
  7084                                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  7085                                  
  7086                                  		; 12/12/2023
  7087                                  		push	cs
  7088                                  		pop	ds
  7089                                  
  7090                                  		push	ax              ; 32 bit division (data sectors / sector per cluster)
  7091                                  		mov	ax, dx
  7092                                  		xor	dx, dx
  7093                                  		div	cx
  7094                                  		mov	bx, ax
  7095                                  		pop	ax
  7096                                  		div	cx
  7097                                  		or	bx, bx          ; 32 bit cluster count if bx > 0
  7098                                  		jnz	short set_fbigbig_flag ; too big cluster number
  7099                                  		cmp	ax, 0FFF6h
  7100                                  		jb	short set_fbig_flag
  7101                                  set_fbigbig_flag:
  7102                                  		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  7103                                  		jmp	short set_fbig_flag_ok
  7104                                  ; ---------------------------------------------------------------------------
  7105                                  
  7106                                  set_fbig_flag:
  7107                                  		cmp	ax, 0FF6h       ; 4096-10
  7108                                  				        ; is this 16-bit fat?
  7109                                  		jb	short set_fbig_flag_ok ; no, small fat
  7110                                  		or	byte [fbigfat], 40h ; FAT16 ; fbig
  7111                                  set_fbig_flag_ok:
  7112                                  		; 28/12/2023
  7113                                  		;pop	dx
  7114                                  		pop	cx
  7115                                  		pop	bx
  7116                                  boot_drv_fixed:
  7117                                  		xor	di, di
  7118                                  
  7119                                  		; cx = sectors/cluster
  7120                                  		; si:bx = first cluster
  7121                                  		; di = 0
  7122                                  
  7123                                  		; ...........
  7124                                  loadit:
  7125                                  		mov	ax, SYSINITSEG	; 46Dh
  7126                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  7127                                  		;;mov	ax, 46Dh	; sysinit segment
  7128                                  		mov	es, ax
  7129                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  7130                                  		;mov	es, [es:271h]
  7131                                  
  7132                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  7133                                  
  7134                                  ; ----------------------------------------------------------------------------
  7135                                  
  7136                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7137                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  7138                                  
  7139                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7140                                  		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7141                                  		jz	short iseof
  7142                                  
  7143                                  eofbigbig:	; si:bx = 32 bit cluster number
  7144                                  		cmp	si, 0FFFh
  7145                                  		jnz	short iseofx
  7146                                  		cmp	bx, 0FFF7h
  7147                                  		jmp	short iseofx
  7148                                  
  7149                                  ; ----------------------------------------------------------------------------
  7150                                  		; 13/12/2023
  7151                                  iseof:
  7152                                  		;;test	byte [cs:fbigfat], fbig
  7153                                  		;test	byte [cs:fbigfat], 40h ; fbig
  7154                                  		; 12/12/2023
  7155                                  		; ds = cs
  7156                                  		test	byte [fbigfat], 40h ; fbig
  7157                                  		jnz	short eofbig
  7158                                  		cmp	bx, 0FF7h
  7159                                  		jmp	short iseofx
  7160                                  ; ----------------------------------------------------------------------------
  7161                                  
  7162                                  eofbig:
  7163                                  		cmp	bx, 0FFF7h
  7164                                  iseofx:
  7165                                  		jb	short loadit	; keep loading until cluster = eof
  7166                                  
  7167                                  ; ----------------------------------------------------------------------------
  7168                                  
  7169                                  		; 19/04/2024
  7170                                  		; 28/12/2023
  7171                                  		pop	ax		; (*) restore fbigfat flags
  7172                                  					; (after loading DOS kernel)
  7173                                  		; 06/04/2024
  7174                                  		;mov	[cs:fbigfat], al
  7175                                  		mov	[fbigfat], al
  7176                                  %endif
  7177                                  ; ----------------------------------------------------------------------------
  7178                                  ; ----------------------------------------------------------------------------
  7179                                  	
  7180                                  		; 19/04/2024
  7181                                  
  7182 000020E3 E8FE04                  		call	setdrvparms
  7183                                  
  7184                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  7185                                  		;;jmp	far 46Dh:267h
  7186                                  		; 12/12/2023
  7187                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  7188                                  
  7189 000020E6 EA[6902]D904            		jmp	SYSINITSEG:SYSINITSTART
  7190                                  
  7191                                  ; =============== S U B	R O U T	I N E ========================================
  7192                                  
  7193                                  ; Following are subroutines to support resident device driver initialization
  7194                                  ;
  7195                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  7196                                  
  7197                                  ;	M035 -- begin changed section
  7198                                  
  7199                                  ;******************************************************************************
  7200                                  ; module name: remap
  7201                                  ;
  7202                                  ; descriptive name: all the code for himem that could be separated from msbio
  7203                                  ;
  7204                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  7205                                  ;	     letters) if more than two diskette drives on the system.
  7206                                  ;
  7207                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  7208                                  ;	       as usual and then rescan the bds chain to adjust the drive
  7209                                  ;	       letters. to do this, scan for disk drives and assign logical
  7210                                  ;	       drive number starting from 2 and then rescan diskette drives
  7211                                  ;	       and assign next to the last logical drive number of last disk
  7212                                  ;	       drive to the 3rd and 4th diskette drives.
  7213                                  
  7214                                  ; input:       none
  7215                                  ; exit:	drive letters have been remapped in bds chain
  7216                                  ; exit error:  none
  7217                                  ; called from: msinit
  7218                                  ;
  7219                                  ; notes:  this function  will be called only if more than 2 diskettes are
  7220                                  ;	  found in the system
  7221                                  ;	  this function assumes that there are no more than 26 drives assigned
  7222                                  ;	    this is guaranteed by the code that creates bdss for partitions
  7223                                  ;	  this function assumes that the first entries in the chain are
  7224                                  ;	   floppy drives, and all the rest are hard drives
  7225                                  ;	  will alter the boot drive if necessary to reflect remapping
  7226                                  ;
  7227                                  ;******************************************************************************
  7228                                  
  7229                                  ; 17/10/2022
  7230                                  ; 02/10/2022
  7231                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7232                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  7233                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  7234                                  
  7235                                  remap:		; proc near
  7236                                  
  7237                                  		; 15/12/2023
  7238                                  		; ds = cs
  7239                                  		;mov	di, [cs:start_bds] ; get first bds
  7240 000020EB 8B3E[1901]              		mov	di, [start_bds]
  7241                                  
  7242                                  ; search for 1st fixed disk physical drive num
  7243                                  
  7244                                  drive_loop:
  7245 000020EF 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  7246                                  					; first	hard disk??
  7247 000020F3 7409                    		jz	short fdrv_found ; yes,	continue
  7248 000020F5 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7249                                  					; get next bds,	assume segment
  7250 000020F7 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  7251 000020FA 75F3                    		jnz	short drive_loop ; loop	if not
  7252 000020FC EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  7253                                  
  7254                                  ;------------------------------------------------------------------------------
  7255                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  7256                                  ;logical drive nums to 3, 4, 5 etc.
  7257                                  ;------------------------------------------------------------------------------
  7258                                  
  7259                                  fdrv_found:
  7260 000020FE B002                    		mov	al, 2		; start	with logical drv num=2
  7261                                  fdrv_loop:
  7262 00002100 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7263 00002103 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7264                                  					; ds:di--> next	bds
  7265                                  		;inc	al		; set num for next drive
  7266                                  		; 18/12/2022
  7267 00002105 40                      		inc	ax
  7268 00002106 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  7269 00002109 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  7270                                  
  7271                                  ;------------------------------------------------------------------------------
  7272                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  7273                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  7274                                  ; any more.
  7275                                  ;------------------------------------------------------------------------------
  7276                                  
  7277                                  		;mov	di, [cs:start_bds] ; [start_bds]
  7278                                  		; 15/12/2023
  7279 0000210B 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  7280 0000210F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7281                                  					; ds:di-->bds2
  7282                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  7283 00002111 8A26[2501]              		mov	ah, [dsktnum]
  7284 00002115 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  7285                                  remap_loop1:
  7286 00002118 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7287                                  					; set new num to next floppy
  7288 0000211A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7289 0000211D FEC0                    		inc	al		; new number for next floppy
  7290 0000211F FECC                    		dec	ah		; count down extra floppies
  7291 00002121 75F5                    		jnz	short remap_loop1
  7292                                  
  7293                                  ; now we've got to adjust the boot drive if we reassigned it
  7294                                  
  7295                                  		; 15/12/2023
  7296                                  		;mov	al, [cs:drvfat]
  7297 00002123 A0[FA19]                		mov	al, [drvfat]
  7298 00002126 3C02                    		cmp	al, 2		; is it	a: or b: ?
  7299 00002128 721D                    		jb	short rmap_exit
  7300                                  		;sub	al, [cs:dsktnum]
  7301 0000212A 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  7302 0000212E 7204                    		jb	short remap_boot_flop ;	brif so
  7303                                  
  7304                                  ; we've got to remap the boot hard drive
  7305                                  ; subtract the number of EXTRA floppies from it
  7306                                  
  7307 00002130 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  7308 00002132 EB04                    		jmp	short remap_change_boot_drv
  7309                                  ; ---------------------------------------------------------------------------
  7310                                  
  7311                                  ; we've got to remap the boot floppy.
  7312                                  ; add the number of hard drive partitions to it
  7313                                  
  7314                                  remap_boot_flop:
  7315                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  7316                                  		; 15/12/2023
  7317 00002134 0206[7500]              		add	al, [drvmax]
  7318                                  remap_change_boot_drv:			
  7319                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  7320 00002138 A2[FA19]                		mov	[drvfat], al
  7321 0000213B FEC0                    		inc	al
  7322 0000213D 1E                      		push	ds
  7323 0000213E BFD904                  		mov	di, SYSINITSEG	; 46Dh
  7324                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  7325                                  		;;mov	di, 46Dh	; SYSINIT segment
  7326 00002141 8EDF                    		mov	ds, di
  7327 00002143 A2[9602]                		mov	[DEFAULTDRIVE], al
  7328                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  7329                                  					; pass it to sysinit as	well
  7330 00002146 1F                      		pop	ds ; ds = cs
  7331                                  rmap_exit:
  7332 00002147 C3                      		retn
  7333                                  
  7334                                  ; =============== S U B	R O U T	I N E =======================================
  7335                                  
  7336                                  ; 17/10/2022
  7337                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  7338                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  7339                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  7340                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  7341                                  ;**************************************************
  7342                                  ; getboot - get the boot sector for a hard disk
  7343                                  ;
  7344                                  ; Reads the boot sector from a specified drive into
  7345                                  ; a buffer at the top of memory.
  7346                                  ;
  7347                                  ; dl = int13 drive number to read boot sector for
  7348                                  ;**************************************************
  7349                                  
  7350                                  ; 17/10/2022
  7351                                  bootbias equ 200h
  7352                                  
  7353                                  getboot:	; proc near
  7354                                  
  7355                                  		; 15/12/2023 - Retro DOS v5.0 
  7356                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  7357                                  		; ds = cs
  7358                                  		
  7359                                  		; 08/04/2018
  7360                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  7361                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  7362                                  		; 02/10/2022 - Retro DOS v4.0
  7363                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  7364                                  
  7365                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  7366                                  		; 15/12/2023
  7367 00002148 A1[041A]                		mov	ax, [init_bootseg]
  7368 0000214B 8EC0                    		mov	es, ax
  7369                                  
  7370                                  		; 17/10/2022
  7371 0000214D BB0002                  		mov	bx, bootbias ; 200h
  7372                                  		;mov	bx, 200h	; bootbias
  7373                                  					; load BX, ES:BX is where sector goes
  7374 00002150 B80102                  		mov	ax, 201h
  7375 00002153 30F6                    		xor	dh, dh
  7376 00002155 B90100                  		mov	cx, 1
  7377 00002158 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7378                                  					; AL = number of sectors to read, CH = track, CL = sector
  7379                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7380                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7381 0000215A 7209                    		jc	short erret
  7382                                  		; 17/10/2022
  7383 0000215C 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  7384                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  7385                                  					; Dave Litton magic word?
  7386 00002163 7401                    		jz	short norm_ret	; yes
  7387                                  erret:
  7388 00002165 F9                      		stc
  7389                                  norm_ret:
  7390 00002166 C3                      		retn
  7391                                  
  7392                                  ; =============== S U B	R O U T	I N E =======================================
  7393                                  
  7394                                  ; 28/12/2018 - Retro DOS v4.0 
  7395                                  
  7396                                  ;***************************************************************************
  7397                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  7398                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  7399                                  ;   our own logical sectors start. we also read in our boot sector to
  7400                                  ;   determine version number
  7401                                  ;
  7402                                  ;   inputs:	dl is rom drive number (80...)
  7403                                  ;		bh is partition number (0....) 
  7404                                  ;		ds:di points to bds
  7405                                  ;   outputs:	carry clear -> bpb is filled in
  7406                                  ;		carry set   -> bpb is left uninitialized due to error
  7407                                  ;	trashes (at least) si, cx
  7408                                  ;	MUST PRESERVE ES:!!!!
  7409                                  ;***************************************************************************
  7410                                  
  7411                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7412                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  7413                                  
  7414                                  sethard:	; proc near
  7415                                  		; 12/08/2023
  7416                                  		; ds = cs = BIOSDATA
  7417 00002167 57                      		push	di
  7418 00002168 53                      		push	bx
  7419                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  7420 00002169 06                      		push	es
  7421 0000216A 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  7422 0000216D 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  7423                                  		; 16/12/2023
  7424 00002170 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  7425                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  7426                                  					; fnon_removable
  7427 00002174 C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  7428                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7429                                  					; ffHardFile
  7430 00002178 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  7431 0000217D 88FE                    		mov	dh, bh		; partition number
  7432 0000217F 52                      		push	dx
  7433 00002180 B408                    		mov	ah, 8
  7434 00002182 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7435                                  					; DL = drive number
  7436                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7437                                  					; DL = number of consecutive drives
  7438                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7439                                  		;inc	dh
  7440                                  		; 16/12/2023 - Retro DOS v5.0
  7441 00002184 88F2                    		mov	dl, dh
  7442 00002186 B600                    		mov	dh, 0
  7443 00002188 42                      		inc	dx
  7444                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  7445 00002189 895515                  		mov	[di+15h], dx
  7446 0000218C 5A                      		pop	dx
  7447 0000218D 7253                    		jc	short setret	; error	if no hard disk
  7448                                  		; 16/12/2023
  7449                                  		;jc	short setret_j
  7450                                  		
  7451 0000218F 80E13F                  		and	cl, 3Fh
  7452 00002192 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  7453 00002195 52                      		push	dx		; save partition number
  7454 00002196 E8AFFF                  		call	getboot
  7455 00002199 5A                      		pop	dx		; restore partition number
  7456 0000219A 7246                    		jc	short setret
  7457                                  		; 16/12/2023
  7458                                  		;jnc	short chk_act_part
  7459                                  ;setret_j:
  7460                                  		;jmp	setret
  7461                                  
  7462                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7463                                  chk_act_part:
  7464 0000219C 31DB                    		xor	bx, bx ; 0
  7465                                  		;;mov	[cs:ep_start_sector], bx
  7466                                  		;;mov	[cs:ep_start_sector+2], bx
  7467                                  		;mov	[cs:ep_hidden_secs], bx
  7468                                  		;mov	[cs:ep_hidden_secs+2], bx
  7469                                  		; 16/12/2023
  7470                                  		; ds = cs
  7471                                  		; 20/12/2023
  7472                                  		;mov	[ep_start_sector], bx
  7473                                  		;mov	[ep_start_sector+2], bx
  7474 0000219E 891E[0422]              		mov	[ep_hidden_secs], bx
  7475 000021A2 891E[0622]              		mov	[ep_hidden_secs+2], bx
  7476                                  		
  7477 000021A6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7478                                  
  7479                                  ; The first 'active' partition is 00, the second is 01....
  7480                                  ;   then the remainder of the 'primary' but non-active partitions
  7481                                  
  7482                                  act_part:
  7483 000021A9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  7484 000021AE 740B                    		jz	short no_act	; no
  7485                                  ; 16/12/2023
  7486                                  %if 0		
  7487                                  		; 16/12/2023
  7488                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7489                                  		cmp	byte [es:bx], 1 ; FAT12
  7490                                  		jz	short got_good_act
  7491                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7492                                  		jz	short got_good_act
  7493                                  		
  7494                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7495                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7496                                  		jz	short got_good_act
  7497                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7498                                  		jz	short got_good_act
  7499                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7500                                  		jz	short got_good_act
  7501                                  
  7502                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7503                                  		jnz	short no_act
  7504                                  ;%else
  7505                                  		; 16/12/2023
  7506                                  		mov	al, [es:bx]	 ; partition type
  7507                                  
  7508                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7509                                  		cmp	al, 1		; FAT12
  7510                                  		je	short got_good_act
  7511                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7512                                  		je	short got_good_act
  7513                                  		
  7514                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7515                                  		cmp	al, 0Bh		; FAT32 CHS
  7516                                  		je	short got_good_act
  7517                                  		cmp	al, 0Ch		; FAT32 LBA
  7518                                  		je	short got_good_act
  7519                                  		cmp	al, 0Eh		; FAT16 LBA
  7520                                  		je	short got_good_act
  7521                                  
  7522                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7523                                  		jne	short no_act
  7524                                  %endif		
  7525                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7526                                  		; check if it is a primary dos partition
  7527                                  
  7528 000021B0 E83300                  		call	chk_partition_type
  7529 000021B3 7506                    		jne	short no_act
  7530                                  
  7531                                  got_good_act:				; 11/08/2023
  7532 000021B5 08F6                    		or	dh, dh		; is this our target partition #?
  7533                                  					; (0 = first primary dos or active partition)
  7534 000021B7 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  7535 000021B9 FECE                    		dec	dh		; count	down
  7536                                  no_act:					
  7537 000021BB 83C310                  		add	bx, 16
  7538 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7539                                  					; last entry done?
  7540 000021C2 75E5                    		jnz	short act_part	; no, process next entry
  7541                                  
  7542 000021C4 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7543                                  					; restore original value of bx
  7544                                  
  7545                                  ; Now scan the non-active partitions
  7546                                  
  7547                                  get_primary:
  7548 000021C7 26F647FC80              		test	byte [es:bx-4], 80h
  7549 000021CC 750B                    		jnz	short not_prim	; we've already scanned
  7550                                  					; the ACTIVE ones
  7551                                  ; 16/12/2023
  7552                                  %if 0
  7553                                  		; 16/12/2023
  7554                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7555                                  		cmp	byte [es:bx], 1	; FAT12
  7556                                  		jz	short got_prim
  7557                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7558                                  		jz	short got_prim
  7559                                  
  7560                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7561                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7562                                  		jz	short got_prim
  7563                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7564                                  		jz	short got_prim
  7565                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7566                                  		jz	short got_prim
  7567                                  
  7568                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7569                                  		jnz	short not_prim
  7570                                  ;%else
  7571                                  		; 16/12/2023
  7572                                  		mov	al, [es:bx]	 ; partition type
  7573                                  
  7574                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7575                                  		cmp	al, 1		; FAT12
  7576                                  		je	short got_prim
  7577                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7578                                  		je	short got_prim
  7579                                  		
  7580                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7581                                  		cmp	al, 0Bh		; FAT32 CHS
  7582                                  		je	short got_prim
  7583                                  		cmp	al, 0Ch		; FAT32 LBA
  7584                                  		je	short got_prim
  7585                                  		cmp	al, 0Eh		; FAT16 LBA
  7586                                  		je	short got_prim
  7587                                  
  7588                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7589                                  		jne	short not_prim
  7590                                  %endif
  7591                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7592                                  		; check if it is a primary dos partition
  7593                                  
  7594 000021CE E81500                  		call	chk_partition_type
  7595 000021D1 7506                    		jne	short not_prim
  7596                                  
  7597                                  got_prim:
  7598 000021D3 08F6                    		or	dh, dh		; is this our target partition?
  7599 000021D5 7431                    		jz	short set2
  7600 000021D7 FECE                    		dec	dh
  7601                                  not_prim:
  7602 000021D9 83C310                  		add	bx, 16
  7603 000021DC 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7604 000021E0 75E5                    		jnz	short get_primary ; loop till we've gone through table
  7605                                  setret:					
  7606 000021E2 F9                      		stc			; error	return
  7607 000021E3 E9C703                  		jmp	ret_hard_err
  7608                                  
  7609                                  ; ---------------------------------------------------------------------------
  7610                                  		
  7611                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7612                                  
  7613                                  chk_partition_type:
  7614                                  		; 16/12/2023
  7615 000021E6 268A07                  		mov	al, [es:bx]	 ; partition type
  7616                                  
  7617                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7618 000021E9 3C01                    		cmp	al, 1		; FAT12
  7619 000021EB 7412                    		je	short chk_ptype_retn
  7620 000021ED 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7621 000021EF 740E                    		je	short chk_ptype_retn
  7622                                  		
  7623                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7624 000021F1 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  7625 000021F3 740A                    		je	short chk_ptype_retn
  7626 000021F5 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  7627 000021F7 7406                    		je	short chk_ptype_retn
  7628 000021F9 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  7629 000021FB 7402                    		je	short chk_ptype_retn
  7630                                  
  7631 000021FD 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7632                                  chk_ptype_retn:
  7633                                  		; zf = 1 -> primary DOS partition
  7634                                  		; zf = 0 -> not a primary DOS partition
  7635 000021FF C3                      		retn
  7636                                  
  7637                                  ; ---------------------------------------------------------------------------
  7638                                  
  7639                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7640                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  7641                                  ep_start_sector:
  7642 00002200 00000000                		dd 0
  7643 00002204 00000000                ep_hidden_secs:	dd 0
  7644                                  
  7645                                  ; ---------------------------------------------------------------------------
  7646                                  
  7647                                  ;  until we get the real logical boot record and get the bpb,
  7648                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  7649                                  ;  for the convenience of the computation.
  7650                                  ;
  7651                                  ;  at the end of this procedure, if a bpb information is gotten from
  7652                                  ;  the valid boot record, then we are going to use those bpb information
  7653                                  ;  without change.
  7654                                  ;
  7655                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  7656                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  7657                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  7658                                  
  7659                                  set2:		
  7660                                  		; 12/08/2023
  7661                                  		; ds = cs = BIOSDATA segment (0070h)
  7662 00002208 8816[071A]              		mov	[rom_drv_num], dl
  7663                                  		;mov	[cs:rom_drv_num], dl
  7664                                  			; save the rom bios drive number we are handling now.
  7665 0000220C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  7666 00002210 268B5706                		mov	dx, [es:bx+6]
  7667                                  
  7668                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  7669                                  ; sectors should be allowed	
  7670                                  
  7671 00002214 83E801                  		sub	ax, 1
  7672 00002217 83DA00                  		sbb	dx, 0
  7673 0000221A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  7674 0000221E 2613570A                		adc	dx, [es:bx+10]
  7675 00002222 7305                    		jnc	short okdrive
  7676 00002224 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7677                                  
  7678                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7679                                  		;;;
  7680                                  okdrive:
  7681                                  		;add	ax, [cs:ep_hidden_secs]
  7682                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7683                                  		; ds = cs
  7684 00002229 0306[0422]              		add	ax, [ep_hidden_secs]
  7685 0000222D 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7686 00002231 7305                    		jnc	short okdrive_1
  7687 00002233 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7688                                  okdrive_1:
  7689 00002238 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  7690 0000223C 7418                    		je	short set_lba_flag
  7691 0000223E 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  7692 00002242 7412                    		je	short set_lba_flag
  7693 00002244 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  7694 00002247 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  7695 00002249 F77513                  		div	word [di+13h]
  7696 0000224C 31D2                    		xor	dx, dx
  7697 0000224E F77515                  		div	word [di+15h]
  7698 00002251 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  7699                                  					;  set LBA r/w flag
  7700 00002254 7204                     		jb	short set3
  7701                                  set_lba_flag:
  7702 00002256 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  7703                                  		;;;
  7704                                  ;okdrive:
  7705                                  		; 16/12/2023
  7706                                  set3:		
  7707                                  		;mov	ax, [es:bx+4]
  7708                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7709                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  7710                                  		;mov	ax, [es:bx+6]
  7711                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  7712                                  
  7713                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7714                                  		;;;
  7715 0000225A 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  7716 0000225E 268B5706                		mov	dx, [es:bx+6]
  7717                                  		;add	ax, [cs:ep_hidden_secs]
  7718                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7719                                  		; ds = cs
  7720 00002262 0306[0422]              		add	ax, [ep_hidden_secs]
  7721                                  					; + hidden secs of the extd dos partion
  7722 00002266 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7723 0000226A 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7724 0000226D 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  7725 00002270 31C0                    		xor	ax, ax ; 0
  7726 00002272 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  7727 00002275 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  7728                                  		;;;
  7729                                  
  7730 00002278 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  7731 0000227C 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  7732 00002280 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  7733 00002283 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  7734                                  					; bpb->maxsec =	p->partitionlength
  7735                                  		;cmp	dx, 0
  7736                                  		;ja	short okdrive_1
  7737                                  		; 16/12/2023
  7738 00002286 09D2                    		or	dx, dx
  7739 00002288 7505                    		jnz	short set3_read
  7740 0000228A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  7741                                  		;jb	short setret	; return -1;
  7742 0000228D 7264                    		jb	short set3_err
  7743                                  ;okdrive_1:
  7744                                  		; 16/12/2023
  7745                                  set3_read:
  7746 0000228F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  7747 00002292 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  7748 00002295 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  7749                                  					; usually equal	to the # of sec/trk.
  7750 00002297 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  7751 0000229A 50                      		push	ax
  7752 0000229B 89D0                    		mov	ax, dx
  7753 0000229D 31D2                    		xor	dx, dx
  7754 0000229F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  7755                                  					; (track)temp_h:ax + (sector)dx
  7756                                  ; 16/12/2023
  7757                                  %if 0
  7758                                  		; 17/10/2022
  7759                                  		;mov	[cs:temp_h], ax
  7760                                  		; 12/08/2023 (ds=cs)
  7761                                  		mov	[temp_h], ax
  7762                                  		pop	ax
  7763                                  		div	bx
  7764                                  		mov	cl, dl
  7765                                  		inc	cl
  7766                                  		xor	bx, bx
  7767                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  7768                                  		push	ax
  7769                                  		xor	dx, dx
  7770                                  		;mov	ax, [cs:temp_h]
  7771                                  		mov	ax, [temp_h] ; 12/08/2023
  7772                                  		div	bx
  7773                                  		;mov	[cs:temp_h], ax
  7774                                  		mov	[temp_h], ax ; 12/08/2023
  7775                                  		pop	ax
  7776                                  		div	bx		; dl is head, ax is cylinder
  7777                                  		; 12/08/2023 (ds=cs)
  7778                                  		cmp	word [temp_h], 0
  7779                                  		;cmp	word [cs:temp_h], 0
  7780                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7781                                  		cmp	ax, 1024
  7782                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7783                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  7784                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  7785                                  			; ('ja' must be 'jnb')
  7786                                  okdrive_2:
  7787                                   		; 28/07/2019
  7788                                  ; dl is head.
  7789                                  ; ax is cylinder
  7790                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  7791                                  
  7792                                  ;*** for mini disks ***
  7793                                  
  7794                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7795                                  					; check for mini disk
  7796                                  		jnz	short oknotmini	; not mini disk.
  7797                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  7798                                  					; set the physical track number
  7799                                  oknotmini:
  7800                                  %endif
  7801                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7802                                  		;;;
  7803                                  		;mov	[cs:saved_word], ax
  7804 000022A1 A3[9E04]                		mov	[saved_word], ax
  7805 000022A4 58                      		pop	ax
  7806 000022A5 F7F3                    		div	bx
  7807 000022A7 88D1                    		mov	cl, dl
  7808 000022A9 FEC1                    		inc	cl
  7809 000022AB 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  7810 000022AE 50                      		push	ax
  7811 000022AF 31D2                    		xor	dx, dx
  7812                                  		;mov	ax, [cs:saved_word]
  7813 000022B1 A1[9E04]                		mov	ax, [saved_word]
  7814 000022B4 F7F3                    		div	bx
  7815                                  		;mov	[cs:saved_word], ax
  7816 000022B6 A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  7817 000022B9 58                      		pop	ax
  7818 000022BA F7F3                    		div	bx		; dl is head, ax is cylinder
  7819                                  		; 16/12/2023
  7820 000022BC 0E                      		push	cs
  7821 000022BD 07                      		pop	es ; (*)
  7822 000022BE BB[5201]                		mov	bx, disksector ; (**)
  7823                                  		;
  7824 000022C1 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  7825 000022C5 742F                    		jz	short set3_chs_read
  7826                                  set3_lba_read:
  7827                                  
  7828                                  ; 16/12/2023
  7829                                  %if 0
  7830                                  		;push	cs
  7831                                  		;pop	es ; (*)
  7832                                  		;mov	bx, disksector ; (**)
  7833                                  
  7834                                  		;push	ds
  7835                                  		;push	si
  7836                                  		xor	ax, ax	; 0
  7837                                  		push	ax
  7838                                  		push	ax
  7839                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  7840                                  		push	ax
  7841                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  7842                                  		push	ax
  7843                                  		push	es		; buffer address
  7844                                  		push	bx
  7845                                  		mov	ax, 1		; sector (read) count
  7846                                  		push	ax
  7847                                  		;mov	ax, 16		; DAP size
  7848                                  		mov	al, 16
  7849                                  		push	ax
  7850                                  		mov	dl, [rom_drv_num] ; ds = cs
  7851                                  		mov	ax, ss
  7852                                  		mov	ds, ax ; ds = ss
  7853                                  		mov	si, sp
  7854                                  		;mov	dl, [cs:rom_drv_num]
  7855                                  		mov	ah, 42h
  7856                                  		int	13h		; DISK - IBM/MS Extension
  7857                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7858                                  		;pop	si
  7859                                  		;pop	ds
  7860                                  		jnc	short set3_lba_read_ok
  7861                                  		add	sp, 16
  7862                                  		;pop	si
  7863                                  		;pop	ds
  7864                                  set3_err:
  7865                                  		;jmp	setret
  7866                                  		jmp	ret_hard_err
  7867                                  
  7868                                  set3_lba_read_ok
  7869                                  		add	sp, 16
  7870                                  		;pop	si
  7871                                  		;pop	ds
  7872                                  		jmp	short set3_read_ok
  7873                                  %else
  7874                                  		; 16/12/2023
  7875                                  		;push	si ; * ; (not necessary)
  7876                                  		;mov	si, empty_dap_buff ; dap_buffer
  7877 000022C7 BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  7878 000022CA 56                      		push	si
  7879 000022CB 87FE                    		xchg	si, di
  7880                                  		; si = BDS
  7881                                  		; di = DAP buffer
  7882 000022CD B81000                  		mov	ax, 16
  7883 000022D0 AB                      		stosw		; DAP size
  7884 000022D1 B001                    		mov	al, 1
  7885 000022D3 AB                      		stosw		; sector (read) count
  7886                                  		; buffer address
  7887 000022D4 89D8                    		mov	ax, bx	; offset disksector
  7888 000022D6 AB                      		stosw
  7889 000022D7 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  7890 000022D9 AB                      		stosw
  7891                                  		; sector address (bits 0 to 31)	
  7892 000022DA 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  7893 000022DD AB                      		stosw
  7894 000022DE 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  7895 000022E1 AB                      		stosw
  7896                                  		; sector address bits 32 to 63 (0)
  7897 000022E2 31C0                    		xor	ax, ax ; 0
  7898 000022E4 AB                      		stosw
  7899 000022E5 AB                      		stosw
  7900                                  		;xchg	di, si
  7901 000022E6 89F7                    		mov	di, si
  7902                                  		; di = BDS
  7903 000022E8 5E                      		pop	si ; DAP buffer address	
  7904                                  		
  7905 000022E9 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  7906 000022ED B442                    		mov	ah, 42h
  7907 000022EF CD13                    		int	13h		; DISK - IBM/MS Extension
  7908                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7909                                  		;pop	si ; *
  7910 000022F1 7324                    		jnc	short set3_read_ok
  7911                                  set3_err:
  7912                                  		;jmp	setret
  7913 000022F3 E9B702                  		jmp	ret_hard_err
  7914                                  %endif
  7915                                  
  7916                                  set3_chs_read:
  7917 000022F6 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  7918 000022FA 7503                    		jnz	short oknotmini
  7919 000022FC 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  7920                                  		;;;
  7921                                  
  7922                                  oknotmini:
  7923                                  ;*** end of added logic for mini disk
  7924                                  				
  7925 000022FF D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  7926 00002301 D0CC                    		ror	ah, 1		; two bits of upper byte
  7927 00002303 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  7928 00002306 08E1                    		or	cl, ah		; move two bits to correct spot
  7929 00002308 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  7930                                  					; cl is sector + 2 high bits of cylinder
  7931 0000230A 88D6                    		mov	dh, dl		; dh is	head
  7932                                  		
  7933                                  		; 12/08/2023 (ds=cs)
  7934 0000230C 8A16[071A]              		mov	dl, [rom_drv_num]
  7935                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  7936                                  
  7937                                  ; cl is sector + 2 high bits of cylinder
  7938                                  ; ch is low 8 bits of cylinder
  7939                                  ; dh is head
  7940                                  ; dl is drive
  7941                                  
  7942                                  ; for convenience, we are going to read the logical boot sector
  7943                                  ; into cs:disksector area.
  7944                                  
  7945                                  ; read in boot sector using bios disk interrupt. the buffer where it
  7946                                  ; is to be read in is cs:disksector.
  7947                                  
  7948                                  		; 16/12/2023
  7949                                  		; es=ds=cs = BIOSDATA segment
  7950                                  		; bx = disksector ; (**)
  7951                                  
  7952                                  		;push	cs
  7953                                  		;pop	es ; (*)
  7954                                  		
  7955                                  		;mov	bx, disksector	; for convenience,
  7956                                  					; we are going to read the logical boot sector
  7957                                  					; into cs:disksector area.
  7958 00002310 B80102                  		mov	ax, 201h
  7959 00002313 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7960                                  					; AL = number of sectors to read, CH = track, CL = sector
  7961                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7962                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7963                                  		; 16/12/2023
  7964 00002315 72DC                    		jc	short set3_err
  7965                                  
  7966                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  7967                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  7968                                  ; media if we recognize the version number.
  7969                                  
  7970                                  set3_read_ok:
  7971                                  		; 11/08/2023
  7972                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  7973                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  7974                                  		; 18/12/2023
  7975                                  		;push	bx ; +
  7976                                  		;push	ax ; (not necessary)
  7977                                  
  7978                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7979                                  		;;;
  7980 00002317 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  7981 0000231D 7541                    		jne	short invalid_boot_record
  7982                                  		; 16/12/2023
  7983                                  		; 12/08/2023
  7984                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  7985 0000231F 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  7986 00002322 740B                    		je	short check_1_ok ; yes
  7987 00002324 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  7988 00002327 7537                    		jne	short invalid_boot_record ; no
  7989 00002329 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  7990 0000232D 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  7991                                  check_1_ok:
  7992 0000232F 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  7993                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  7994                                  		; 16/12/2023
  7995 00002333 740E                    		jz	short check_2	; FAT32 bs
  7996                                  
  7997                                  		; FAT16 or FAT12 bs
  7998                                  
  7999                                  		;push	ds
  8000                                  		;push	si  ; (not necessary)
  8001 00002335 57                      		push	di
  8002                                  		; es=ds=cs = BIOSDATA segment
  8003                                  		;push	es
  8004                                  		;pop	ds
  8005                                  
  8006                                  		;mov	cx, 28
  8007 00002336 B90E00                  		mov	cx, 14 ; *
  8008 00002339 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  8009                                  					;      to offset 64 (28 bytes)
  8010 0000233C 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  8011 0000233F FC                      		cld	; (not necessary, 'std' is not used before here)
  8012                                  		;rep movsb
  8013 00002340 F3A5                    		rep movsw ; *
  8014 00002342 5F                      		pop	di
  8015                                  		;pop	si
  8016                                  		;pop	ds
  8017                                  		;;;
  8018                                  ; 16/12/2023
  8019                                  %if 0
  8020                                  ;check_1:
  8021                                  		; 12/08/2023
  8022                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  8023                                  		cmp	byte [bx], 0E9h
  8024                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  8025                                  		je	short check_1_ok ; yes
  8026                                  		cmp	byte [bx], 0EBh
  8027                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  8028                                  		jne	short invalid_boot_record ; no
  8029                                  		cmp	byte [bx+2], 90h
  8030                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  8031                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8032                                  check_1_ok:
  8033                                  %endif
  8034                                  
  8035                                  ; 18/12/2023
  8036                                  %if 0
  8037                                  		; 14/08/2023
  8038                                  check_2:
  8039                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  8040                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  8041                                  					; point to the bpb in the boot record
  8042                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  8043                                  		mov	al, [bx+10] ; 12/08/2023 
  8044                                  					; get the mediadescriptor byte
  8045                                  		and	al, 0F0h	; mask off low nibble
  8046                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  8047                                  		jne	short invalid_boot_record ; no, invalid boot record
  8048                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  8049                                  		cmp	word [bx], 512 ; 12/08/2023
  8050                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8051                                  
  8052                                  check2_ok:				; yes, mediadescriptor ok.
  8053                                  		mov	al, [bx+2] ; 12/08/2023
  8054                                  		;mov	al, [cs:bx+2]	; now make sure that
  8055                                  					; the sectorspercluster is
  8056                                  					; a power of 2
  8057                                  					;
  8058                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  8059                                  					; get the sectorspercluster
  8060                                  %endif
  8061                                  		;;;
  8062                                  check_2:
  8063                                  		; 18/12/2023
  8064                                  		; bx = disksector
  8065 00002343 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  8066                                  					; get the mediadescriptor byte
  8067 00002346 24F0                    		and	al, 0F0h	; mask off low nibble
  8068 00002348 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  8069 0000234A 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  8070 0000234C 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  8071 00002351 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8072                                  
  8073                                  check2_ok:	; yes, mediadescriptor ok.
  8074 00002353 8A470D                  		mov	al, [bx+13]	; now make sure that
  8075                                  					; the sectorspercluster is
  8076                                  					; a power of 2
  8077                                  					;
  8078                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  8079                                  					; get the sectorspercluster
  8080                                  		;;;
  8081                                  
  8082 00002356 08C0                    		or	al, al		; is it zero?
  8083 00002358 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  8084                                  
  8085                                  ck_power_of_two:
  8086 0000235A D0E8                    		shr	al, 1		; shift until first bit emerges
  8087 0000235C 73FC                    		jnc	short ck_power_of_two
  8088 0000235E 7406                    		jz	short valid_boot_record
  8089                                  
  8090                                  invalid_boot_record:
  8091                                  		; 18/12/2023
  8092                                  		;pop	ax
  8093                                  		;pop	bx ; +
  8094 00002360 E96001                  		jmp	unknown		; jump to invalid boot record
  8095                                  					; unformatted or illegal media.
  8096                                  ; 16/12/2023
  8097                                  ; ---------------------------------------------------------------------------
  8098                                  ;	; 12/08/2023
  8099                                  ;setret_brdg:
  8100                                  ;		jmp	setret
  8101                                  ; ---------------------------------------------------------------------------
  8102                                  
  8103                                  unknown3_0_j:
  8104 00002363 E96101                  		jmp	unknown3_0	; legally formatted media,
  8105                                  					; although, content might be bad.
  8106                                  ; ---------------------------------------------------------------------------
  8107                                  
  8108                                  valid_boot_record:
  8109                                  		; 18/12/2023
  8110                                  		;pop	ax
  8111                                  		;pop	bx ; +
  8112                                  		
  8113                                  		; 18/12/2023
  8114                                  		; bx = offset disksector ; +
  8115                                  
  8116                                  ; Signature found. Now check version.
  8117                                  
  8118                                  		; 14/08/2023
  8119 00002366 817F08322E              		cmp	word [bx+8], '2.'
  8120                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  8121                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  8122 0000236B 7506                    		jne	short try5
  8123 0000236D 807F0A30                		cmp	byte [bx+10], '0'
  8124                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  8125                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  8126                                  		; 12/08/2023
  8127                                  		;jnz	short try5
  8128                                  		;jmp	short copybpb
  8129 00002371 7425                    		je	short copybpb
  8130                                  
  8131                                  ;; --------------------------------------------------------------------------
  8132                                  ;;	; 12/08/2023
  8133                                  ;;setret_brdg:
  8134                                  ;;		jmp	setret
  8135                                  ;; --------------------------------------------------------------------------
  8136                                  ;
  8137                                  ;unknown3_0_j:
  8138                                  ;		jmp	unknown3_0	; legally formatted media,
  8139                                  ;					; although, content might be bad.
  8140                                  ; ---------------------------------------------------------------------------
  8141                                  
  8142                                  try5:
  8143 00002373 E83B02                  		call	cover_fdisk_bug
  8144                                  
  8145                                  ; see if it is an os2 signature
  8146                                  
  8147                                  		; 12/08/2023
  8148                                  		; ds = cs = BIOSDATA segment
  8149 00002376 817F08302E              		cmp	word [bx+8], '0.'
  8150                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  8151                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  8152 0000237B 750C                    		jne	short no_os2
  8153 0000237D 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  8154                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  8155 00002380 2C31                    		sub	al, '1'
  8156                                  		;sub	al, 31h		; '1'
  8157 00002382 24FE                    		and	al, 0FEh
  8158 00002384 7412                    		jz	short copybpb	; accept either	'1' or '2'
  8159 00002386 E93A01                  		jmp	unknown
  8160                                  ; ---------------------------------------------------------------------------
  8161                                  
  8162                                  ; no os2 signature, this is to check for real dos versions
  8163                                  
  8164                                  no_os2:
  8165                                  		; 12/08/2023
  8166                                  		; ds = cs = BIOSDATA
  8167 00002389 817F08332E              		cmp	word [bx+8], '3.'			
  8168                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  8169                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  8170 0000238E 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  8171                                  					; do not trust it, but still legal.
  8172 00002390 7506                    		jnz	short copybpb	; honor	os2 boot record
  8173                                  					; or dos 4.0 version
  8174 00002392 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  8175                                  		;cmp	byte [cs:bx+10], '1'
  8176                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  8177 00002396 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  8178                                  copybpb:
  8179                                  
  8180                                  ; 03/10/2022
  8181                                  
  8182                                  ; we have a valid boot sector. use the bpb in it to build the
  8183                                  ; bpb in bios. it is assumed that only
  8184                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  8185                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  8186                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  8187                                  ; need to be set (all other values in already). fbigfat is also set.
  8188                                  
  8189                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  8190                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  8191                                  ; and system id according to the boot record.
  8192                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  8193                                  
  8194                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8195                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  8196                                  		;;;
  8197                                  		; 17/12/2023
  8198 00002398 BE[5D01]                		mov	si, disksector+11
  8199                                  		;sub	ch, ch ; ; (ch may be > 0)
  8200 0000239B 29C9                    		sub	cx, cx ; 0 
  8201                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  8202 0000239D 8A4C05                  		mov	cl, [si+5] ; number of FATs
  8203                                  
  8204                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  8205                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  8206                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  8207                                  
  8208                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  8209                                  		;cmp	word [disksector+4Dh], 0
  8210                                  		;jnz	short check_3
  8211                                  
  8212                                  		; 17/12/2023
  8213                                  		; check extended boot signature (0x29)
  8214                                  		;
  8215                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  8216                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  8217                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  8218                                  		
  8219                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  8220 000023A0 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  8221                                  		;jmp	short check_4
  8222                                  check_3:
  8223                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  8224                                  		;cmp	byte [disksector+26h], 29h ; (***)
  8225                                  check_4:
  8226 000023A5 7538                    		jnz	short copybpb_fat	; conventional fat system
  8227                                  
  8228                                  ; 17/12/2023
  8229                                  %if 0
  8230                                  		; 10/12/2022
  8231                                  		; (number of FATs optimization)
  8232                                  		mov	si, disksector+11 ; disksector+0Bh
  8233                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  8234                                  		;mov	cl, [cs:si+05h]
  8235                                  		; 12/08/2023
  8236                                  		; ds = cs = BIOSDATA segment (0070h)
  8237                                  		mov	cl, [si+05h] ; number of FATs
  8238                                  
  8239                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  8240                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  8241                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  8242                                  					; [disksector+EXT_BOOT.SIG]
  8243                                  					; EXT_BOOT_SIGNATURE
  8244                                  		jnz	short copybpb_fat ; conventional fat system
  8245                                  
  8246                                  		; 03/10/2022
  8247                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  8248                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  8249                                  		;	     number of FATs must be 2 ; =*?=
  8250                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  8251                                  		;
  8252                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  8253                                  
  8254                                  		; 10/12/2022
  8255                                  		;cmp	byte [cs:disksector+10h], 0
  8256                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  8257                                  		;jnz	short copybpb_fat ; a fat system.
  8258                                  		or	cl, cl	 ; [cs:disksector+10h]
  8259                                  		jnz	short copybpb_fat ; a fat system.
  8260                                  %endif
  8261                                  
  8262                                  		; 17/12/2023 - Retro DOS v5.0
  8263                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  8264                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  8265                                  		;jnz	short copybpb_fat ; a fat system
  8266                                  		; 17/12/2023
  8267                                  		; cl = [disksector+10h]
  8268 000023A7 20C9                    		and	cl, cl ; 0 ?
  8269 000023A9 7534                    		jnz	short copybpb_fat ; a fat system
  8270                                  
  8271                                  ; non fat based	media.
  8272                                  
  8273 000023AB 57                      		push	di  ; BDS
  8274                                  		; 12/08/2023
  8275                                  		;push	ds  ; ds = cs = BIOSDATA segment
  8276                                  		
  8277                                  		; 17/12/2023
  8278                                  		; es = ds = cs
  8279                                  		;push	ds
  8280                                  		;pop	es
  8281                                  
  8282                                  		; 12/08/2023
  8283                                  		; ds = cs
  8284                                  		;push	cs
  8285                                  		;pop	ds
  8286                                  
  8287                                  		; 10/12/2022
  8288                                  		; (number of FATs optimization)
  8289                                  		; SI = disksector+11
  8290                                  		; 17/10/2022
  8291                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8292                                  		;mov	si, disksector+11
  8293 000023AC 83C706                  		add	di, 6		; add di,BDS.BPB
  8294                                  
  8295                                  ; just for completeness, we'll make sure that total_sectors and
  8296                                  ; big_total_sectors aren't both zero. I've seen examples of
  8297                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  8298                                  ; got that way. If it occurs, then use the values from the
  8299                                  ; partition table.
  8300                                  
  8301                                  		; 17/12/2023
  8302                                  		; cx = 0
  8303                                  		; 18/12/2022
  8304                                  		;sub	cx, cx
  8305                                  
  8306                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  8307                                  		;jnz	short already_nonz 
  8308                                  		;			; how about big_total?
  8309                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  8310                                  		;jnz	short already_nonz ; we're okay if any are != 0
  8311                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8312                                  		;jnz	short already_nonz
  8313                                  
  8314                                  		; 12/08/2023
  8315                                  		; ds = cs = BIOSDATA segment (0070h)
  8316                                  
  8317                                  		; 17/12/2023
  8318                                  		; 12/08/2023
  8319 000023AF 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  8320 000023B2 751C                    		jnz	short already_nonz
  8321                                  				    	; how about big_total?
  8322 000023B4 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  8323 000023B7 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  8324 000023B9 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  8325 000023BC 7512                    		jnz	short already_nonz
  8326                                  
  8327                                  ; now let's copy the values from the partition table (now in the BDS)
  8328                                  ; into the BPB in the boot sector buffer, before they get copied back.
  8329                                  
  8330 000023BE 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  8331                                  		; 12/08/2023
  8332                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  8333 000023C1 894408                  		mov	[si+8], ax
  8334 000023C4 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  8335                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  8336 000023C7 894415                  		mov	[si+15h], ax
  8337 000023CA 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  8338                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8339 000023CD 894417                  		mov	[si+17h], ax
  8340                                  
  8341                                  already_nonz:
  8342                                  		; 18/12/2022
  8343                                  		; cx = 0
  8344                                  		;mov	cl, 25
  8345                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  8346                                  		; 17/12/2023 - Retro DOS v5.0
  8347 000023D0 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  8348                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  8349 000023D2 F3A4                    		rep movsb
  8350                                  		;pop	ds
  8351                                  		; 12/08/2023
  8352                                  		; ds = cs
  8353                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  8354 000023D4 5F                      		pop	di  ; BDS
  8355                                  		;push	es
  8356                                  		;push	ds
  8357                                  		;pop	es
  8358                                  		;push	cs
  8359                                  		;pop	ds
  8360                                  		; 12/08/2023
  8361                                  		;mov	es, bp
  8362                                  		; ds = cs = es
  8363                                  		
  8364                                  		; 14/08/2023
  8365 000023D5 BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  8366                                  		; 18/12/2022
  8367                                  		;mov	bp, mov_media_ids
  8368                                  		;;mov	bp, 751h	; mov_media_ids
  8369                                  					; at 2C7h:751h = 70h:2CC1h
  8370                                  					; set volume id, systemid, serial.
  8371 000023D8 0E                      		push	cs		; simulate far call
  8372 000023D9 E895F6                  		call	call_bios_code
  8373                                  		; 12/08/2023
  8374                                  		; ds = cs = es
  8375                                  		;push	es
  8376                                  		;pop	ds
  8377                                  		;pop	es
  8378 000023DC E9C701                  		jmp	goodret
  8379                                  
  8380                                  ; ---------------------------------------------------------------------------
  8381                                  
  8382                                  ; ****** cas ---
  8383                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  8384                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  8385                                  ; happens with some frequency -- perhaps through some OS/2 setup
  8386                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  8387                                  ; from the boot sector into the DPB anyway, we've just been using
  8388                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  8389                                  ; we'll go ahead and copy it into the DPB, except in the case
  8390                                  ; that it equals zero, in which case we just use the values in
  8391                                  ; the DPB from the partition table.
  8392                                  
  8393                                  ; 17/10/2022
  8394                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  8395                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  8396                                  ; 09/12/2022
  8397                                  MOVMEDIAIDS equ mov_media_ids
  8398                                  CLEARIDS equ clear_ids
  8399                                  ; 11/09/2023
  8400                                  CLEARIDS_X equ clear_ids_x
  8401                                  
  8402                                  copybpb_fat:
  8403                                  		; 17/12/2023
  8404                                  		; ch = 0, cl = number of FATs
  8405                                  		; 10/12/2022
  8406                                  		; (number of FATs optimization)
  8407                                  		; SI = disksector+11
  8408                                  		; 17/10/2022
  8409                                  		;mov	si, disksector+11
  8410                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8411                                  					; cs:si	-> bpb in boot
  8412                                  		; 17/12/2023
  8413                                  		; dx = 0
  8414                                  		; 08/05/2024
  8415                                  		; 18/04/2024 (BugFix)
  8416 000023DF 31D2                    		xor	dx, dx
  8417                                  
  8418                                  		; 12/08/2023
  8419                                  		; ds = cs = BIOSDATA segment (0070h)
  8420 000023E1 8B4408                  		mov	ax, [si+8]
  8421                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  8422                                  					; get totsec from boot sec
  8423 000023E4 09C0                    		or	ax, ax
  8424 000023E6 7514                    		jnz	short copy_totsec ; if non zero, use that
  8425 000023E8 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  8426                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  8427                                  					; get the big version
  8428                                  					; (32 bit total	sectors)
  8429 000023EB 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  8430                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8431                                  		; 10/12/2022
  8432                                  		; (number of FATs optimization)
  8433                                  		; CL = number of FATs (2 or 1) 
  8434 000023EE 89D3                    		mov	bx, dx		; see if it is a big zero
  8435 000023F0 09C3                    		or	bx, ax
  8436 000023F2 7508                    		jnz	short copy_totsec
  8437                                  			; screw it. it was bogus.
  8438 000023F4 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8439 000023F7 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8440 000023FA EB06                    		jmp	short fat_big_small
  8441                                  
  8442                                  		;mov	cx, dx
  8443                                  		;or	cx, ax		; see if it is a big zero
  8444                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  8445                                  copy_totsec:				
  8446 000023FC 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8447                                  					; make DPB match boot sec
  8448 000023FF 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8449                                  
  8450                                  		; 10/12/2022
  8451                                  ;totsec_already_set:			
  8452                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8453                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8454                                  
  8455                                  ; determine fat entry size.
  8456                                  
  8457                                  fat_big_small:
  8458                                  
  8459                                  ;at this moment dx;ax = total sector number
  8460                                  
  8461                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  8462                                  ;from the BPB on the disk
  8463                                  		
  8464                                  		; 12/08/2023
  8465                                  		; ds = cs = BIOSDATA segment (0070h)
  8466                                  				
  8467 00002402 8B5C03                  		mov	bx, [si+3]
  8468                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  8469                                  					; get #reserved_sectors	from BPB
  8470 00002405 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  8471                                  					; update BDS field
  8472 00002408 29D8                    		sub	ax, bx
  8473 0000240A 83DA00                  		sbb	dx, 0		; update the count
  8474                                  		; 12/08/2023
  8475 0000240D 8B5C0B                  		mov	bx, [si+0Bh]
  8476                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  8477                                  					; bx = sectors/fat
  8478 00002410 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  8479                                  					; set in bds bpb
  8480                                  		; 17/12/2023 - Retro DOS v5.0
  8481                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8482 00002413 53                      		push	bx ; FAT sectors
  8483 00002414 09DB                    		or	bx, bx
  8484 00002416 753A                    		jnz	short fat_16bit	
  8485                                  
  8486                                  ; 17/12/2023
  8487                                  %if 0		
  8488                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  8489                                  					; BPB.FATSz32
  8490                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  8491                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  8492                                  		mov	bx, [si+19h]	; BPB.FATSz32
  8493                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8494                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8495                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8496                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8497                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8498                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8499                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8500                                  		mov	bx, [si+21h]	; BPB.RootClus
  8501                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8502                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8503                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8504                                  		mov	bx, [si+25h]	; BPB.FSInfo
  8505                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8506                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8507                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8508                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  8509                                  					; correct code (would be):
  8510                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  8511                                  					; sub_fat32_size:
  8512                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  8513                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  8514                                  					;   dec cl
  8515                                  					;   jg short sub_fat32_size
  8516                                  					;   jmp short fat_32bit
  8517                                  %endif
  8518                                  		; 17/12/2023
  8519                                  		; cl = BPB_NumFATs (2 or 1)
  8520                                  		; ch = 0
  8521 00002418 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  8522                                  sub_fat32_size:
  8523 0000241B 29D8                    		sub	ax, bx
  8524 0000241D 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  8525                                  		;dec	cl
  8526 00002420 49                      		dec	cx
  8527 00002421 7FF8                    		jg	short sub_fat32_size
  8528                                  
  8529 00002423 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8530 00002426 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8531 00002429 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8532                                  
  8533 0000242C 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8534 0000242F 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8535 00002432 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8536 00002435 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8537 00002438 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  8538 0000243B 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8539 0000243E 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8540 00002441 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8541 00002444 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  8542 00002447 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8543 0000244A 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8544 0000244D 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8545 00002450 EB08                    		jmp	short fat_32bit
  8546                                  		
  8547                                  fat_16bit:
  8548                                  		; 17/12/2023 - Retro DOS v5.0
  8549                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8550                                  		; 10/12/2022
  8551                                  		; (number of FATs optimization)
  8552                                  		; CL = number of FATs (2 or 1)
  8553                                  		; CH = 0 ; 17/12/2023 
  8554                                  		;dec	cl ; *
  8555                                  		; 18/12/2022
  8556 00002452 49                      		dec	cx ; *
  8557 00002453 D3E3                    		shl	bx, cl
  8558                                  		;shl	bx, 1	; =*?=	; always 2 fats
  8559                                  		
  8560 00002455 29D8                    		sub	ax, bx		; sub #	fat sectors
  8561 00002457 83DA00                  		sbb	dx, 0
  8562                                  fat_32bit:	
  8563                                  		; 17/12/2023
  8564 0000245A 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  8565                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  8566                                  					; # root entries
  8567 0000245D 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  8568                                  					; set in bds bpb
  8569 00002460 B104                    		mov	cl, 4
  8570 00002462 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  8571 00002464 29D8                    		sub	ax, bx		; sub #	dir sectors
  8572 00002466 83DA00                  		sbb	dx, 0		;
  8573                                  					; dx:ax	now contains the
  8574                                  					; # of data sectors
  8575                                  		; 17/12/2023
  8576                                  		; ch = 0
  8577                                  		;xor	cx, cx ; *
  8578 00002469 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  8579                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  8580                                  					; sectors per cluster
  8581 0000246C 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  8582                                  					; set in bios bpb
  8583 0000246F 50                      		push	ax
  8584 00002470 89D0                    		mov	ax, dx
  8585 00002472 31D2                    		xor	dx, dx
  8586 00002474 F7F1                    		div	cx		; cx = sectors per cluster
  8587                                  		; 12/08/2023 (ds=cs)
  8588                                  		;mov	[temp_h], ax
  8589                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  8590                                  					; # clusters.
  8591                                  		; 17/12/2023
  8592 00002476 A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  8593 00002479 58                      		pop	ax
  8594 0000247A F7F1                    		div	cx
  8595                                  		; 17/12/2023
  8596                                  		;;cmp	word [cs:temp_h], 0
  8597                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  8598                                  		;cmp	word [saved_word], 0 ; (*)
  8599                                  		;ja	short toobig_ret ; too big cluster number
  8600                                  
  8601                                  		; 17/12/2023
  8602                                  		;;;
  8603 0000247C 5B                      		pop	bx ; FAT sectors (16 bit)
  8604                                  		;and	bx, bx ; 0 ?
  8605 0000247D 09DB                    		or	bx, bx ; 0 ?
  8606 0000247F 751F                    		jnz	short chk_clnum_hw
  8607                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  8608                                  
  8609 00002481 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  8610 00002487 7503                    		jne	short fat32_clust_limit
  8611 00002489 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  8612                                  fat32_clust_limit:
  8613 0000248C 772D                    		ja	short short toobig_ret ; too big cluster number
  8614 0000248E 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  8615                                  	 	;jnz	short fat16_clust_limit
  8616 00002492 7505                    		jnz	short set_fbigbig_flag ; 17/12/2023
  8617                                  fat16_clust_limit:	; 17/12/2023
  8618 00002494 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  8619                                  ;fat16_clust_limit:
  8620 00002497 760E                    		jna     short fat12_clust_limit ; jbe
  8621                                  set_fbigbig_flag:	; 17/12/2023
  8622 00002499 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  8623 0000249E EB11                    		jmp	short copymediaid
  8624                                  chk_clnum_hw:
  8625 000024A0 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  8626 000024A5 7714                    		ja	short toobig_ret ; too big cluster number
  8627                                  		;;;
  8628                                  fat12_clust_limit:
  8629 000024A7 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  8630                                  					; is this 16-bit fat?
  8631 000024AA 7205                    		jb	short copymediaid ; no,	small fat
  8632                                  		; 17/10/2022
  8633 000024AC 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  8634                                  		;or	ds:fbigfat, 40h	; fbig
  8635                                  					; 16 bit fat
  8636                                  copymediaid:
  8637                                  		; 17/12/2023
  8638                                  		; es = ds = cs
  8639                                  		
  8640                                  		;push	es
  8641                                  		;push	ds
  8642                                  		;pop	es
  8643                                  		
  8644                                  		; 12/08/2023
  8645                                  		; ds = cs = BIOSDATA
  8646                                  		;push	cs
  8647                                  		;pop	ds
  8648                                  		; 17/10/2022
  8649 000024B1 BD[4F08]                		mov	bp, MOVMEDIAIDS
  8650                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  8651                                  		;;mov	bp, 751h	; mov_media_ids
  8652                                  					; at 2C7h:751h = 70h:2CC1h
  8653                                  					; copy filesys_id, volume label
  8654 000024B4 0E                      		push	cs		; simulate far call
  8655 000024B5 E8B9F5                  		call	call_bios_code
  8656                                  
  8657                                  		; 12/08/2023
  8658                                  		;push	es
  8659                                  		;pop	ds
  8660                                  		; 17/12/2023	
  8661                                  		;pop	es
  8662                                  
  8663 000024B8 E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  8664                                  					; and return.
  8665                                  ; ---------------------------------------------------------------------------
  8666                                  
  8667                                  toobig_ret:
  8668                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  8669 000024BB 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8670                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  8671                                  					; too big (32 bit clust #) for FAT16
  8672 000024C0 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  8673                                  					; but useless. to big for
  8674                                  					; current pc dos fat file system
  8675                                  ; ---------------------------------------------------------------------------
  8676                                  
  8677                                  unknown:
  8678                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8679 000024C3 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  8680                                  					 ; unformatted_media
  8681                                  		; 12/12/2022
  8682                                  		;or	byte [di+24h], 02h
  8683                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  8684                                  					; unformatted_media
  8685                                  					; Set unformatted media	flag.
  8686                                  
  8687                                  ; the boot signature may not be	recognizable,
  8688                                  ; but we should	try and	read it	anyway.
  8689                                  
  8690                                  unknown3_0:
  8691 000024C7 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  8692                                  					; [di+BDS.totalsecs32+2]
  8693 000024CA 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8694 000024CD BE[161A]                		mov	si, disktable2
  8695                                  scan:					; 08/08/2023
  8696                                  		;cmp	dx, [cs:si]	; total sectors hw
  8697                                  		; 12/08/2023 (ds=cs)
  8698 000024D0 3B14                    		cmp	dx, [si] 
  8699 000024D2 720C                     		jb	short gotparm
  8700 000024D4 7705                    		ja	short scan_next
  8701                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  8702 000024D6 3B4402                  		cmp	ax, [si+2]
  8703 000024D9 7605                    		jbe	short gotparm
  8704                                  scan_next:				
  8705 000024DB 83C60A                  		add	si, 10		; 5*2
  8706 000024DE EBF0                    		jmp	short scan	; covers upto 512 mb media
  8707                                  ; ---------------------------------------------------------------------------
  8708                                  
  8709                                  gotparm:
  8710 000024E0 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  8711                                  		;or	ds:fbigfat, cl
  8712                                  		; 17/10/2022
  8713 000024E3 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  8714                                  		; 12/08/2023
  8715                                  		; ds = cs = BIOSDATA
  8716 000024E7 8B4C04                  		mov	cx, [si+4]
  8717                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  8718                                  					; cl = log base 2 of ch
  8719 000024EA 8B5406                  		mov	dx, [si+6]
  8720                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  8721                                  
  8722                                  ; now calculate size of fat table
  8723                                  
  8724 000024ED 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  8725                                  					; save number of (root)	dir entries
  8726 000024F0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8727 000024F3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8728 000024F6 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  8729                                  					; save sectors per cluster
  8730                                  		
  8731                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8732 000024F9 F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  8733                                  		; 11/09/2023
  8734                                  		; 17/10/2022
  8735                                  		;test	byte [fbigfat], 40h
  8736                                  		;;test	ds:fbigfat, 40h	; fbig
  8737                                  					; if (fbigfat)
  8738 000024FE 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  8739                                  
  8740                                  ; we don't need to change "small fat" logic since it is guaranteed
  8741                                  ; that double word total sector will not use 12 bit fat (unless
  8742                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  8743                                  ; so in this case we assume dx = 0 !!
  8744                                  
  8745 00002500 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  8746 00002502 88EB                    		mov	bl, ch
  8747 00002504 4B                      		dec	bx
  8748 00002505 01C3                    		add	bx, ax		; dx=0
  8749 00002507 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  8750 00002509 43                      		inc	bx		; BDS.secperclus
  8751 0000250A 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  8752 0000250D 89DE                    		mov	si, bx
  8753 0000250F D1EB                    		shr	bx, 1
  8754 00002511 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  8755 00002513 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  8756 00002517 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  8757 00002519 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  8758                                  					; save number of fat sectors
  8759 0000251C EB6A                    		jmp	short massage_bpb
  8760                                  ; ---------------------------------------------------------------------------
  8761                                  
  8762                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  8763                                  
  8764                                  dobig:					
  8765 0000251E B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  8766 00002520 52                      		push	dx		; save total sectors (high)
  8767 00002521 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  8768 00002524 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  8769 00002526 29D0                    		sub	ax, dx
  8770 00002528 5A                      		pop	dx
  8771 00002529 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  8772 0000252C 83E801                  		sub	ax, 1
  8773 0000252F 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  8774                                  					; total	secs - reserved	secs - root dir	secs
  8775 00002532 B302                    		mov	bl, 2
  8776 00002534 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  8777                                  					; bx = 256 * BDS.secperclus + 2
  8778                                  
  8779                                  ; I don't understand why to add bx here!!!
  8780                                  
  8781                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  8782                                  		; 27/09/2022
  8783                                  		; (Microsoft FAT32 File	System Specification,
  8784                                  		; December 2000, Page 21)
  8785                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  8786                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  8787                                  		; 8/8/2023 (Retro DOS v5.0)
  8788                                  		; If(FATType == FAT32)
  8789                                  		;   TmpVal2 = TmpVal2 / 2;
  8790                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  8791                                  		; 8/8/2023 (Retro DOS v5.0)
  8792                                  		; If(FATType == FAT32) {
  8793                                  		;   BPB_FATSz16 = 0;
  8794                                  		;   BPB_FATSz32 = FATSz;
  8795                                  		;} else {
  8796                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  8797                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  8798                                  		;}
  8799                                  					; dx:ax = TmpVal1, bx = TmpVal2
  8800 00002537 01D8                    		add	ax, bx		; 
  8801 00002539 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  8802 0000253C 83E801                  		sub	ax, 1		
  8803 0000253F 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  8804                                  
  8805                                  		;;;
  8806                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8807 00002542 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  8808 00002547 740D                    		jz      short dobig1
  8809                                  
  8810 00002549 D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  8811                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  8812 0000254B 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  8813 0000254E 83DA00                  		sbb	dx, 0
  8814 00002551 29D8                    		sub	ax, bx
  8815 00002553 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  8816                                  					;       = TmpVal1+(TmpVal2-1)
  8817                                  dobig1:
  8818 00002556 50                      		push	ax		; save lw of dividend
  8819 00002557 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  8820 00002559 31D2                    		xor	dx, dx
  8821 0000255B F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  8822                                  					; remainder in dx is hw of 2nd stage dividend
  8823 0000255D 89C5                    		mov	bp, ax		; hw of quotient
  8824 0000255F 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  8825                                  		;;;
  8826                                  
  8827                                  ; assuming dx in the table will never be bigger than bx.
  8828                                  
  8829 00002560 F7F3                    		div	bx		; BDS.fatsecs =
  8830                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  8831 00002562 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  8832                                  					; number of fat	sectors
  8833                                  		;;;
  8834                                  		
  8835                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8836 00002565 8A1E[061A]              		mov	bl, [fbigfat]
  8837 00002569 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  8838                                  		
  8839 0000256C F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  8840 0000256F 7410                    		jz	short dobig2	; not FAT32
  8841                                  
  8842 00002571 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  8843 00002574 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  8844 00002577 C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  8845                                  					; clear 16 bit FAT size field
  8846 0000257C C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  8847                                  					; set reserved sectors to 32 (FAT32 de facto)
  8848                                  dobig2:
  8849                                  		;;;
  8850                                  
  8851                                  ; now, set the default filesys_id, volume label, serial number
  8852                                  
  8853                                  		; 05/08/2023
  8854                                  		; [di+1Fh] = [fbigfat]
  8855                                  		;
  8856                                  		;;mov	bl, ds:fbigfat
  8857                                  		;; 17/10/2022
  8858                                  		;mov	bl, [fbigfat]
  8859                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  8860                                  
  8861                                  		; 12/08/2023
  8862                                  		;push	ds ; ds = cs = BIOSDATA
  8863                                  		
  8864                                  		; 17/12/2023
  8865                                  		; es = ds = cs
  8866                                  		;push	ds
  8867                                  		;pop	es
  8868                                  
  8869                                  		; 12/08/2023 
  8870                                  		; ds = cs = BIOSDATA
  8871                                  		;push	cs
  8872                                  		;pop	ds
  8873                                  
  8874                                  		; 18/12/2023 - Retro DOS v5.0
  8875                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  8876                                  		; 11/09/2023
  8877                                  		;mov	al, [fbigfat]
  8878 00002581 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  8879                                  		; 17/10/2022
  8880                                  		;mov	bp, CLEARIDS
  8881                                  		;;mov	bp, 5D9h	; clear_ids
  8882                                  					; at 2C7h:5D9h = 70h:2B49h
  8883                                  					; at BIOSCODE:06ABh
  8884                                  					;	in PCDOS 7.1 IBMBIO.COM
  8885 00002584 0E                      		push	cs
  8886 00002585 E8E9F4                  		call	call_bios_code
  8887                                  
  8888                                  		; 12/08/2023
  8889                                  		;pop	ds ; ds = cs = BIOSDATA
  8890                                  
  8891                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  8892                                  ; set according to the partition information. we are going to
  8893                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  8894                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  8895                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  8896                                  ; we don't do this for the bpb information from the boot record. we
  8897                                  ; are not going to change the bpb information from the boot record.
  8898                                  
  8899                                  massage_bpb:
  8900                                  		; 05/08/2023
  8901                                  		; [di+1Fh] = [fbigfat]
  8902                                  		;
  8903                                  		;; 12/12/2022
  8904                                  		;mov	bl, [fbigfat]
  8905                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8906                                  		;			; set size of fat on media
  8907                                  		;
  8908 00002588 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8909 0000258B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8910                                  		; 11/09/2023
  8911 0000258E 09D2                    		or	dx, dx
  8912 00002590 7514                    		jnz	short goodret	
  8913                                  		;cmp	dx, 0		; double word total sectors?
  8914                                  		;;ja	short goodret	; don't have to change it.
  8915                                  		;; 12/12/2022
  8916                                  		;ja	short short goodret2
  8917                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  8918                                  		;ja	short goodret	; don't have to change it.
  8919                                  		; 12/12/2022
  8920 00002592 395519                  		cmp	[di+19h], dx ; 0
  8921                                  		;ja	short goodret2
  8922 00002595 770F                    		ja	short goodret	; 11/09/2023
  8923 00002597 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  8924                                  		;jb	short goodret
  8925                                  		; 12/12/2022
  8926                                  		;jc	short goodret
  8927 0000259A 7209                    		jc	short goodret_clc ; 11/09/2023
  8928 0000259C 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8929 0000259F 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  8930                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  8931                                  		; 12/12/2022
  8932 000025A2 89551B                  		mov	[di+1Bh], dx ; 0
  8933                                  goodret_clc:
  8934                                  		; 11/09/2023
  8935 000025A5 F8                      		clc 
  8936                                  goodret:
  8937                                  		;mov	bl, ds:fbigfat
  8938                                  		; 11/09/2023
  8939                                  		; 12/12/2022
  8940                                  		; 17/10/2022
  8941 000025A6 8A1E[061A]              		mov	bl, [fbigfat]
  8942                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8943 000025AA 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  8944                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8945                                  					; set size of fat on media
  8946                                  		; 11/09/2023
  8947                                  		;clc
  8948                                  ret_hard_err:
  8949                                  		; 12/12/2022
  8950                                  goodret2:
  8951 000025AD 07                      		pop	es
  8952                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  8953 000025AE 5B                      		pop	bx
  8954 000025AF 5F                      		pop	di
  8955 000025B0 C3                      		retn
  8956                                  
  8957                                  ; =============== S U B	R O U T	I N E =======================================
  8958                                  
  8959                                  ; 15/10/2022
  8960                                  
  8961                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  8962                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  8963                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  8964                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  8965                                  ;then subtract 1 from BPB_TOTALSECTORS.
  8966                                  
  8967                                  		; 17/10/2022
  8968                                  cover_fdisk_bug:
  8969                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8970                                  		; ds = cs
  8971                                  
  8972                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8973                                  		; (optimization)
  8974                                  		;push	ax
  8975                                  		;push	dx
  8976                                  		;push	si
  8977                                  
  8978                                  		; 18/12/2023
  8979                                  		; bx = offset disksector
  8980                                  
  8981                                  		; 18/12/2023
  8982 000025B1 807F2629                		cmp	byte [bx+26h], 29h
  8983                                  		; 12/08/2023
  8984                                  		;cmp	byte [disksector+26h], 29h
  8985                                  		;;cmp	byte [cs:disksector+26h], 29h
  8986                                  					; [disksector+EXT_BOOT.SIG],
  8987                                  					; EXT_BOOT_SIGNATURE
  8988 000025B5 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  8989                                  		
  8990 000025B7 817F073130              		cmp	word [bx+7], 3031h
  8991                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  8992 000025BC 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
  8993 000025BE 807F0A30                		cmp	byte [bx+10], '0'
  8994                                  		;cmp	byte [cs:bx+10], '0'
  8995 000025C2 7519                    		jne	short cfb_retit
  8996                                  
  8997                                  cfb_chk_totalsecs:
  8998                                  		; 11/08/2023
  8999                                  ; 18/12/2023
  9000                                  %if 0
  9001                                  		; 17/10/2022		
  9002                                  		mov	si, disksector+11 ; 14Eh+0Bh
  9003                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9004                                  		; 12/08/2023
  9005                                  		cmp	word [si+8], 0
  9006                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  9007                                  					; just to make sure.
  9008                                  		jz	short cfb_retit
  9009                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9010                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  9011                                  		; 12/08/2023
  9012                                  		mov	ax, [si+8]
  9013                                  		add	ax, [si+11h]
  9014                                  
  9015                                  		jnb	short cfb_retit
  9016                                  		jnz	short cfb_retit
  9017                                  					; if carry set and ax=0
  9018                                  		dec	word [si+8]
  9019                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  9020                                  					; then decrease	BPB_TOTALSECTORS by 1
  9021                                  %endif
  9022                                  		; 18/12/2023
  9023                                  		;cmp	word [bx+19], 0
  9024 000025C4 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  9025 000025C7 21C0                    		and	ax, ax ; 0 ?
  9026 000025C9 7412                    		jz	short cfb_retit
  9027                                  
  9028                                  		;mov	ax, [bx+19]
  9029 000025CB 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  9030 000025CE 730D                    		jnc	short cfb_retit
  9031 000025D0 750B                    		jnz	short cfb_retit
  9032                                  		; ax = 0		; 0 -> 0FFFFh
  9033 000025D2 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  9034                                  
  9035 000025D5 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  9036 000025D9 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  9037                                  cfb_retit:	
  9038                                  		; 18/12/2023
  9039                                  		;pop	si
  9040                                  		;pop	dx
  9041                                  		;pop	ax
  9042                                  		
  9043 000025DD C3                      		retn
  9044                                  
  9045                                  ; ---------------------------------------------------------------------------
  9046                                  
  9047 000025DE 0200                    word2:		dw 2
  9048 000025E0 0300                    word3:		dw 3
  9049 000025E2 0002                    word512:	dw 512
  9050                                  
  9051                                  ; =============== S U B	R O U T	I N E =======================================
  9052                                  
  9053                                  ; 15/10/2022
  9054                                  
  9055                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  9056                                  ; the form factor. it is assumed that the bpbs for the various form factors
  9057                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  9058                                  ; as the bpb on the drive.
  9059                                  ;
  9060                                  ; no attempt is made to preserve registers since we are going to jump to
  9061                                  ; sysinit straight after this routine.
  9062                                  
  9063                                  		; 18/12/2023 - Retro DOS v5.0 
  9064                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
  9065                                  setdrvparms:
  9066                                  		; 12/12/2023
  9067                                  		; ds = cs
  9068 000025E4 31DB                    		xor	bx, bx
  9069                                  		; 18/10/2022
  9070 000025E6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  9071                                  _next_bds:
  9072 000025EA 06                      		push	es
  9073 000025EB 57                      		push	di
  9074                                  
  9075                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9076 000025EC 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
  9077                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  9078                                  
  9079 000025F0 80FB05                  		cmp	bl, 5		; ffHardFile
  9080 000025F3 753A                    		jnz	short nothardff
  9081 000025F5 31D2                    		xor	dx, dx
  9082 000025F7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9083 000025FB 09C0                    		or	ax, ax
  9084 000025FD 7508                    		jnz	short get_ccyl
  9085 000025FF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9086 00002603 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9087                                  get_ccyl:
  9088 00002607 52                      		push	dx
  9089 00002608 50                      		push	ax
  9090 00002609 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  9091 0000260D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9092                                  					; assume sectors per cyl. < 64k.
  9093 00002611 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  9094 00002613 58                      		pop	ax
  9095 00002614 5A                      		pop	dx		; dx:ax	= total	sectors
  9096 00002615 50                      		push	ax
  9097 00002616 89D0                    		mov	ax, dx
  9098 00002618 31D2                    		xor	dx, dx
  9099 0000261A F7F1                    		div	cx
  9100                                  		; 12/12/2023  ; !*!
  9101                                  		; (data segment may not be same with code segment here)
  9102                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
  9103                                  		; 18/12/2023 - Retro DOS v5.0
  9104                                  		;mov	[cs:saved_word], ax
  9105 0000261C 58                      		pop	ax
  9106 0000261D F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  9107 0000261F 09D2                    		or	dx, dx
  9108 00002621 7401                    		jz	short no_cyl_rnd ; came out even
  9109 00002623 40                      		inc	ax		; round	up
  9110                                  no_cyl_rnd:
  9111                                  		; 18/12/2023 - Retro DOS v5.0
  9112 00002624 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
  9113                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  9114                                  		
  9115 00002628 06                      		push	es
  9116 00002629 1F                      		pop	ds  ; !*! ; 12/12/2023
  9117                                  
  9118 0000262A 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  9119                                  					; ds:si	-> bpb for hard	file
  9120 0000262D EB55                    		jmp	short set_recbpb
  9121                                  ; ---------------------------------------------------------------------------
  9122                                  
  9123                                  nothardff:				
  9124 0000262F 0E                      		push	cs
  9125 00002630 1F                      		pop	ds
  9126                                  
  9127                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  9128                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  9129                                  
  9130                                  		; 10/12/2022
  9131                                  		; ds = cs
  9132                                  		; 17/10/2022 (ds=cs)
  9133 00002631 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  9134                                  		;cmp	byte [cs:fakefloppydrv], 1
  9135 00002636 7454                    		jz	short go_to_next_bds
  9136 00002638 80FB07                  		cmp	bl, 7		; ffother
  9137                                  					; special case "other" type of medium
  9138 0000263B 753D                    		jnz	short not_process_other
  9139                                  process_other:
  9140 0000263D 31D2                    		xor	dx, dx
  9141                                  
  9142                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
  9143                                  		;mul	word [di+36h]	; [di+BDS.rheads]
  9144                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
  9145                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  9146                                  		;			; have the total number of sectors
  9147                                  		; 18/12/2023 - Retro DOS v5.0
  9148 0000263F 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
  9149 00002642 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
  9150 00002645 F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
  9151 00002648 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
  9152                                  					; have the total number of sectors
  9153 0000264B 48                      		dec	ax
  9154 0000264C B201                    		mov	dl, 1
  9155                                  _again:					
  9156 0000264E 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9157 00002651 7206                    		jb	short _@@
  9158 00002653 D1E8                    		shr	ax, 1
  9159 00002655 D0E2                    		shl	dl, 1
  9160 00002657 EBF5                    		jmp	short _again
  9161                                  ; ---------------------------------------------------------------------------
  9162                                  
  9163                                  _@@:
  9164 00002659 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  9165 0000265C 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  9166                                  
  9167                                  		; 18/12/2023 - Retro DOS v5.0
  9168 0000265E C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
  9169                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  9170                                  __@@:
  9171                                  		; 18/12/2023 - Retro DOS v5.0
  9172 00002663 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
  9173                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
  9174                                  
  9175                                  ; logic to get the sectors/fat area.
  9176                                  ; fat entry is assumed to be 1.5 bytes!!!
  9177                                  
  9178                                  		; 10/12/2022
  9179                                  		; ds = cs
  9180                                  		; 17/10/2022 (ds=cs)
  9181 00002666 F726[E025]              		mul	word [word3]	; * 3
  9182 0000266A F736[DE25]              		div	word [word2]	; / 2
  9183 0000266E 31D2                    		xor	dx, dx
  9184 00002670 F736[E225]              		div	word [word512]	; / 512
  9185                                  		;
  9186                                  		; 10/12/2022
  9187                                  		;mul	word [cs:word3]	; * 3
  9188                                  		;div	word [cs:word2]	; / 2
  9189                                  		;xor	dx, dx
  9190                                  		;div	word [cs:word512] ; / 512
  9191                                  		;
  9192 00002674 40                      		inc	ax		; + 1
  9193                                  no_round_up:
  9194                                  		; 18/12/2023 - Retro DOS v5.0
  9195 00002675 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
  9196                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
  9197                                  
  9198 00002678 EB12                    		jmp	short go_to_next_bds
  9199                                  ; ---------------------------------------------------------------------------
  9200                                  
  9201                                  not_process_other:
  9202 0000267A D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  9203                                  		
  9204                                  		;mov	si, bpbtable
  9205                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  9206                                  		; 09/12/2022
  9207                                  		;mov	si, BPBTABLE
  9208                                  		;mov	si, [bx+si]	; get address of bpb
  9209                                  		; 10/12/2022
  9210                                  		;mov	si, [BPBTABLE+bx]
  9211                                  		; 13/12/2022
  9212                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  9213                                  		
  9214                                  		; 14/08/2023
  9215                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  9216                                  							; correct offset
  9217 0000267C 8BB7[9892]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  9218                                  		
  9219                                  		; 18/12/2023 
  9220                                  		; si = address of the requested disk(ette) parameter block
  9221                                  		;	! as offset from SYSINIT segment !
  9222                                  
  9223                                  		; 28/08/2023
  9224 00002680 81C69046                		add	si, SYSINIT_OFFSET
  9225                                  			; + displacement from BIOSDATA segment ; 18/12/2023
  9226                                  set_recbpb:
  9227                                  		; 18/12/2023
  9228                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
  9229                                  		;			; es:di	-> recbpb
  9230                                  		;mov	cx, 25		; bpbx.size
  9231                                  		;rep movsb		; move (size bpbx) bytes
  9232                                  		
  9233                                  		; 18/12/2023 - Retro DOS v5.0
  9234 00002684 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
  9235                                  					; es:di	-> recbpb
  9236 00002687 B93500                  		mov	cx, 53		; bpbx.size
  9237 0000268A F3A4                    		rep movsb		; move (size bpbx) byte
  9238                                  go_to_next_bds:
  9239 0000268C 5F                      		pop	di
  9240 0000268D 07                      		pop	es		; restore pointer to bds
  9241 0000268E 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  9242 00002691 83FFFF                  		cmp	di, 0FFFFh	; -1
  9243 00002694 740A                    		jz	short got_end_of_bds_chain
  9244 00002696 E951FF                  		jmp	_next_bds
  9245                                  
  9246                                  ; ---------------------------------------------------------------------------
  9247                                  
  9248                                  		; 18/12/2022
  9249                                  ;got_end_of_bds_chain:
  9250                                  		;retn
  9251                                  
  9252                                  ; =============== S U B	R O U T	I N E =======================================
  9253                                  
  9254                                  ; 15/10/2022
  9255                                  ; 30/12/2018 - Retro DOS v4.0
  9256                                  
  9257                                  ; al = device number
  9258                                  
  9259                                  print_init:	
  9260 00002699 98                      		cbw
  9261 0000269A 89C2                    		mov	dx, ax
  9262 0000269C B401                    		mov	ah, 1
  9263 0000269E CD17                    		int	17h		; PRINTER - INITIALIZE
  9264                                  					; DX = printer port (0-3)
  9265                                  					; Return: AH = status
  9266                                  got_end_of_bds_chain:	; 18/12/2022
  9267 000026A0 C3                      		retn
  9268                                  
  9269                                  ; =============== S U B	R O U T	I N E =======================================
  9270                                  
  9271                                  ; al = device number
  9272                                  
  9273                                  aux_init:
  9274 000026A1 98                      		cbw
  9275 000026A2 89C2                    		mov	dx, ax
  9276                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  9277                                  					; 2400,n,1,8 (msequ.inc)
  9278                                  		;mov	ah, 0
  9279                                  		; 10/12/2022
  9280 000026A4 B8A300                  		mov	ax, 00A3h
  9281 000026A7 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  9282                                  					; 	AL = initializing parameters,
  9283                                  					;	DX = port number (0-3)
  9284                                  					; Return: AH = RS-232 status code bits,
  9285                                  					;	  AL = modem status bits
  9286 000026A9 C3                      		retn
  9287                                  
  9288                                  ; =============== S U B	R O U T	I N E =======================================
  9289                                  
  9290                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9291                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
  9292                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
  9293                                  ; 30/12/2018 - Retro DOS v4.0
  9294                                  ; 03/06/2018 - Retro DOS v3.0
  9295                                  ; (19/03/2018 - Retro DOS v2.0)
  9296                                  
  9297                                  ; domini **********************************************************************
  9298                                  ;
  9299                                  ;mini disk initialization routine. called right after dohard
  9300                                  ;modified for >2 hardfile support
  9301                                  ;
  9302                                  ; **cs=ds=es=datagrp
  9303                                  ;
  9304                                  ; **domini will search for every extended partition in the system, and
  9305                                  ;   initialize it.
  9306                                  ;
  9307                                  ; **bdsm stands for bds table for mini disk and located right after the label
  9308                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  9309                                  ;   address of bdsm table.
  9310                                  ;
  9311                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  9312                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  9313                                  ;   right now, they are called as ismini, hidden_trks respectively.
  9314                                  ;
  9315                                  ; **domini will use the same routine in sethard routine after label set2 to
  9316                                  ;   save coding.
  9317                                  ;
  9318                                  ; **drvmax determined in dohard routine will be used for the next
  9319                                  ;   available logical mini disk drive number.
  9320                                  ;
  9321                                  ; input: drvmax, dskdrvs
  9322                                  ;
  9323                                  ; output: minidisk installed. bdsm table established and installed to bds.
  9324                                  ;	  end_of_bdsm - ending offset address of bdsm.
  9325                                  ;
  9326                                  ; called modules:
  9327                                  ;		  getboot
  9328                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  9329                                  ;
  9330                                  ;		  setmini (new, it will use set2 routine)
  9331                                  ;
  9332                                  ; variables used: end_of_bdsm
  9333                                  ;		  rom_minidisk_num
  9334                                  ;		  mini_hdlim, mini_seclim
  9335                                  ;		  BDS_STRUC, start_bds
  9336                                  ;
  9337                                  ;******************************************************************************
  9338                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  9339                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
  9340                                  
  9341                                  		; 19/10/2022
  9342                                  domini:
  9343 000026AA 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
  9344                                  		; 10/12/2022
  9345 000026AE 20F6                    		and	dh, dh
  9346                                  		;cmp	dh, 0
  9347 000026B0 743C                    		jz	short dominiret	; no hard file?	then exit.
  9348 000026B2 B280                    		mov	dl, 80h		; start	with hardfile 80h
  9349                                  domini_loop:
  9350                                  		; 18/12/2023 - Retro DOS v5.0
  9351 000026B4 31C0                    		xor	ax, ax ; 0
  9352                                  		; ds = cs
  9353                                  		;mov	[cs:ep_start_sector], ax
  9354                                  		;mov	[cs:ep_start_sector+2], ax
  9355                                  		;mov	[cs:ep_hidden_secs], ax
  9356                                  		;mov	[cs:ep_hidden_secs+2], ax
  9357 000026B6 A3[0022]                		mov	[ep_start_sector], ax
  9358 000026B9 A3[0222]                		mov	[ep_start_sector+2], ax
  9359 000026BC A3[0422]                		mov	[ep_hidden_secs], ax
  9360 000026BF A3[0622]                		mov	[ep_hidden_secs+2], ax
  9361                                  		;
  9362 000026C2 52                      		push	dx
  9363 000026C3 8816[5C1A]              		mov	[rom_minidisk_num], dl
  9364 000026C7 B408                    		mov	ah, 8
  9365 000026C9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  9366                                  					; DL = drive number
  9367                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  9368                                  					; DL = number of consecutive drives
  9369                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  9370                                  		
  9371                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9372                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  9373                                  		;inc	dh
  9374                                  		;xor	ax, ax
  9375                                  		;mov	al, dh
  9376 000026CB 31C0                    		xor	ax, ax
  9377 000026CD 88F0                    		mov	al, dh	; <= 255
  9378 000026CF 40                      		inc	ax	; (0FFh -> 100h)
  9379 000026D0 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
  9380                                  		;and	cl, 3Fh
  9381                                  		;mov	al, cl
  9382                                  		; 08/08/2023
  9383 000026D3 88C8                    		mov	al, cl
  9384 000026D5 83E03F                  		and	ax, 3Fh
  9385 000026D8 A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
  9386                                  		
  9387                                  		; 18/12/2023
  9388                                  		;push	es ; * ; not necessary
  9389 000026DB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9390 000026DF E866FA                  		call	getboot		; read master boot record into
  9391                                  					; initbootsegment:bootbias
  9392 000026E2 7203                    		jc	short domininext
  9393 000026E4 E80800                  		call	find_mini_partition
  9394                                  domininext:
  9395                                  		;pop	es ; *
  9396 000026E7 5A                      		pop	dx
  9397 000026E8 FEC2                    		inc	dl		; next hard file
  9398 000026EA FECE                    		dec	dh
  9399 000026EC 75C6                    		jnz	short domini_loop
  9400                                  dominiret:
  9401 000026EE C3                      		retn
  9402                                  
  9403                                  ; =============== S U B	R O U T	I N E =======================================
  9404                                  
  9405                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  9406                                  ; 30/12/2018 - Retro DOS v4.0
  9407                                  
  9408                                  ;find_mini_partition tries to find every extended partition on a disk.
  9409                                  ;at entry:	di -> bdsm entry
  9410                                  ;		es:bx -> 07c0:bootbias - master boot record
  9411                                  ;		rom_minidisk_num - rom drive number
  9412                                  ;		drvmax - logical drive number
  9413                                  ;		mini_hdlim, mini_seclim
  9414                                  ;
  9415                                  ;called routine: setmini which uses set2 (in sethard routine)
  9416                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  9417                                  
  9418                                  
  9419                                  		; 19/12/2023 - Retro DOS v5.0 
  9420                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
  9421                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
  9422                                  
  9423                                  find_mini_partition:	
  9424 000026EF 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  9425                                  
  9426                                  		; 19/12/2023
  9427                                  		; PCDOS 7.1 IBMBIO.COM
  9428                                  		;mov	word [ld_p_number], 26
  9429                                  fmpnext:
  9430                                  		;add	word [ld_p_number], 16
  9431                                  		;cmp	word [ld_p_number], 4122
  9432                                  		;		; 64 logical disk partitions (64 EBRs)
  9433                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
  9434                                  		;jg	short fmpnextfound
  9435                                  				
  9436 000026F3 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
  9437 000026F7 7410                    		je	short fmpgot ; Extended DOS CHS
  9438                                  		
  9439                                  		; 19/12/2023 - Retro DOS v5.0
  9440 000026F9 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
  9441 000026FD 740A                    		je	short fmpgot
  9442                                  
  9443 000026FF 83C310                  		add	bx, 16
  9444 00002702 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9445 00002706 75EB                    		jnz	short fmpnext
  9446                                  		;jmp	short fmpnextfound ; extended partition	not found
  9447                                  		; 18/12/2022
  9448                                  fmpnextfound:
  9449 00002708 C3                      		retn
  9450                                  
  9451                                  ;		; 30/07/2019 - Retro DOS v3.2
  9452                                  ;		jb	short fmpnext
  9453                                  ;fmpret:
  9454                                  ;		retn	; 29/05/2019
  9455                                  
  9456                                  ; ---------------------------------------------------------------------------
  9457                                  
  9458                                  		; 19/10/2022
  9459                                  fmpgot:					; found my partition.
  9460 00002709 E82B01                  		call	dmax_check	; check	for drvmax already 26
  9461 0000270C 73FA                    		jnb	short fmpnextfound ; done if too many
  9462                                  
  9463 0000270E 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
  9464                                  
  9465                                  		; 19/12/2023
  9466                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  9467                                  		;; 10/12/2022
  9468                                  		;or	byte [di+23h], 1
  9469                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
  9470                                  		;			; fNon_Removable
  9471                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  9472                                  		;			; ffHardFile
  9473                                  		; 19/12/2023 - Retro DOS v5.0
  9474 00002712 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
  9475 00002717 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
  9476 0000271B C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
  9477                                  
  9478 0000271F C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  9479 00002724 A1[621A]                		mov	ax, [mini_hdlim]
  9480 00002727 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  9481 0000272A A1[641A]                		mov	ax, [mini_seclim]
  9482 0000272D 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  9483 00002730 A0[5C1A]                		mov	al, [rom_minidisk_num]
  9484 00002733 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  9485                                  					; set physical number
  9486 00002736 A0[7500]                		mov	al, [drvmax]
  9487 00002739 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  9488                                  					; set logical number
  9489 0000273C 26837F0A00              		cmp	word [es:bx+10], 0
  9490                                  		;ja	short fmpgot_cont
  9491 00002741 7707                    		ja	short fmpgot1	; 19/12/2023
  9492 00002743 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  9493                                  					; only lower word is meaningful.
  9494 00002748 72BE                    		jb	short fmpnextfound
  9495                                  					; should be bigger than 64 sectors at least
  9496                                  fmpgot1:	; 19/12/2023
  9497                                  ;fmpgot_cont:				
  9498 0000274A 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  9499 0000274D 268A7702                		mov	dh, [es:bx+2]	; cylinder
  9500 00002751 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  9501 00002754 D0C6                    		rol	dh, 1
  9502 00002756 D0C6                    		rol	dh, 1
  9503 00002758 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  9504                                  		; 19/12/2023 - Retro DOS v5.0
  9505 0000275C 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
  9506                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  9507                                  					; set hidden trks
  9508                                  		; 19/12/2023
  9509                                  		;push	bx ; * ; PCDOS 7.1	
  9510                                  		;;;
  9511 0000275F 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
  9512 00002763 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
  9513 00002767 030E[0022]              		add	cx, [ep_start_sector]
  9514 0000276B 1306[0222]              		adc	ax, [ep_start_sector+2]
  9515 0000276F 31D2                    		xor	dx, dx ; 19/12/2023
  9516 00002771 3916[0022]              		cmp	[ep_start_sector], dx ; 0
  9517                                  		;cmp	word [ep_start_sector], 0
  9518 00002775 750D                    		jnz	short fmpgot2
  9519 00002777 3916[0222]              		cmp	[ep_start_sector+2], dx ; 0
  9520                                  		;cmp	word [ep_start_sector+2], 0
  9521 0000277B 7507                    		jnz	short fmpgot2
  9522 0000277D 890E[0022]              		mov	[ep_start_sector], cx
  9523 00002781 A3[0222]                		mov	[ep_start_sector+2], ax
  9524                                  fmpgot2:
  9525 00002784 890E[0422]              		mov	[ep_hidden_secs], cx
  9526 00002788 A3[0622]                		mov	[ep_hidden_secs+2], ax
  9527                                  		
  9528                                  		; convert start sector address to CHS
  9529                                  	
  9530                                  		; 19/12/2023
  9531                                  		; dx = 0
  9532                                  		;push	bx ; * ; not necessary
  9533                                  
  9534                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
  9535 0000278B 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
  9536                                  		;xor	dx, dx  ; dx = 0
  9537                                  		;div	bx
  9538 0000278E F7F6                    		div	si
  9539 00002790 91                      		xchg	ax, cx
  9540                                  		;div	bx
  9541 00002791 F7F6                    		div	si
  9542                                  		;mov	bx, [di+15h]	; [di+BDS.heads]
  9543                                  		; 07/05/2024
  9544                                  		; 17/04/2024 (BugFix)
  9545 00002793 8B7515                  		mov	si, [di+15h]	; [di+BDS.heads]
  9546 00002796 91                      		xchg	ax, cx
  9547 00002797 31D2                    		xor	dx, dx
  9548                                  		;div	bx
  9549 00002799 F7F6                    		div	si
  9550 0000279B 91                      		xchg	ax, cx
  9551                                  		;div	bx
  9552 0000279C F7F6                    		div	si
  9553                                  
  9554                                  		;pop	bx ; *
  9555                                  
  9556 0000279E 09C9                    		or	cx, cx
  9557 000027A0 7505                    		jnz	short fmpgot_lba_rd
  9558 000027A2 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
  9559 000027A5 7235                    		jb	short fmpgot_chs_rd
  9560                                  fmpgot_lba_rd:
  9561 000027A7 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
  9562 000027AB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9563 000027AF 1E                      		push	ds
  9564                                  		; 19/12/2023
  9565                                  		;push	si ; ** ; not necessary 
  9566 000027B0 31C0                    		xor	ax, ax		; push bp
  9567                                  				        ; mov bp, sp ; (*)
  9568 000027B2 50                      		push	ax ; 0
  9569 000027B3 50                      		push	ax ; 0
  9570 000027B4 FF36[0622]              		push	word [ep_hidden_secs+2]
  9571 000027B8 FF36[0422]              		push	word [ep_hidden_secs]
  9572 000027BC B80002                  		mov	ax, bootbias ; 200h	
  9573                                  		;mov	ax, 200h	; bootbias (buffer offset)
  9574 000027BF 06                      		push	es		; buffer segment
  9575 000027C0 50                      		push	ax
  9576 000027C1 B80100                  		mov	ax, 1
  9577 000027C4 50                      		push	ax		; read count
  9578 000027C5 B81000                  		mov	ax, 10h		; DAP size = 16
  9579 000027C8 50                      		push	ax
  9580 000027C9 8CD0                    		mov	ax, ss
  9581 000027CB 8ED8                    		mov	ds, ax
  9582 000027CD 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
  9583                                  		
  9584 000027CF B442                    		mov	ah, 42h		; LBA read
  9585 000027D1 CD13                    		int	13h		; DISK - IBM/MS Extension
  9586                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  9587                                  		; 19/12/2023	
  9588                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
  9589                                  		;add	sp, 16
  9590                                  		;popf		; BUG!
  9591                                  					; mov sp, bp ; (*)
  9592                                  					; pop bp
  9593                                  		; 19/12/2023
  9594 000027D3 9F                      		lahf		; load status flags into AH
  9595 000027D4 83C410                  		add	sp, 16
  9596 000027D7 9E                      		sahf		; store AH into flags
  9597                                  		
  9598                                  		;pop	si ; ** ; 19/12/2023
  9599 000027D8 1F                      		pop	ds
  9600 000027D9 7317                    		jnc	short fmpgot3
  9601                                  fmpnotfound:	; 19/12/2023
  9602 000027DB C3                      		retn
  9603                                  		;jmp	short fmpgot3 
  9604                                  		;;;
  9605                                  
  9606                                  		; 19/12/2023
  9607                                  fmpgot_chs_rd:
  9608 000027DC 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  9609 000027E0 268A7701                		mov	dh, [es:bx+1]	; head
  9610 000027E4 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9611 000027E8 BB0002                  		mov	bx, 200h	; bootbias
  9612 000027EB B80102                  		mov	ax, 201h
  9613 000027EE CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9614                                  					; AL = number of sectors to read, CH = track, CL = sector
  9615                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9616                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9617                                  ;fmpgot3:	; 19/12/2023
  9618                                  		;jc	short fmpnextfound
  9619 000027F0 72E9                    		jc	short fmpnotfound
  9620                                  fmpgot3:	
  9621 000027F2 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  9622                                  
  9623                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9624                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  9625 000027F5 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  9626                                  		;jne	short fmpnextfound ; not a valid boot sector !
  9627                                  		; 19/12/2023
  9628 000027FB 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
  9629                                  
  9630                                  		; 13/08/2023
  9631                                  		;push	es
  9632 000027FD E80800                  		call	setmini		; install a mini disk.
  9633                                  					; bx value saved.
  9634                                  		;pop	es  ; 13/08/2023
  9635 00002800 7203                    		jc	short fmpnextchain
  9636 00002802 E84700                  		call	xinstall_bds	; -- install the bdsm into table
  9637                                  fmpnextchain:
  9638 00002805 E9EBFE                  		jmp	fmpnext		; let's find out
  9639                                  					; if we	have any chained partition
  9640                                  ; ---------------------------------------------------------------------------
  9641                                  
  9642                                  		; 18/12/2022
  9643                                  ;fmpnextfound:
  9644                                  		;retn
  9645                                  
  9646                                  ; =============== S U B	R O U T	I N E =======================================
  9647                                  
  9648                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9649                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  9650                                  
  9651                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9652                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
  9653                                  
  9654                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  9655                                  	
  9656 00002808 57                      		push	di
  9657 00002809 53                      		push	bx
  9658                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9659                                  		; ds = cs = BIOSDATA segment
  9660                                  		;push	ds
  9661 0000280A 06                      		push	es
  9662                                  setmini_1:
  9663                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
  9664                                  		;je	short setmini_2
  9665                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
  9666                                  		;je	short setmini_2
  9667                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
  9668                                  		;je	short setmini_2
  9669                                  		;
  9670                                  		; 19/12/2023 - Retro DOS v5.0
  9671                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
  9672                                  		;je	short setmini_2
  9673                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
  9674                                  		;je	short setmini_2
  9675                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
  9676                                  		;je	short setmini_2
  9677                                  
  9678                                  		; 19/12/2023
  9679 0000280B 268A07                  		mov 	al, [es:bx]
  9680 0000280E 3C01                    		cmp	al, 1 		; FAT12 partition
  9681 00002810 7422                    		je	short setmini_2
  9682 00002812 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
  9683 00002814 741E                    		je	short setmini_2
  9684 00002816 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
  9685 00002818 741A                    		je	short setmini_2
  9686 0000281A 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
  9687 0000281C 7416                    		je	short setmini_2
  9688 0000281E 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
  9689 00002820 7412                    		je	short setmini_2
  9690 00002822 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
  9691 00002824 740E                    		je	short setmini_2
  9692                                  
  9693 00002826 83C310                  		add	bx, 16
  9694 00002829 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9695                                  		;jne	short setmini_1
  9696 0000282D 72DC                    		jb	short setmini_1 ; 19/12/2023
  9697 0000282F F9                      		stc
  9698 00002830 07                      		pop	es
  9699                                  		; 12/08/2023
  9700                                  		;pop	ds
  9701 00002831 5B                      		pop	bx
  9702 00002832 5F                      		pop	di
  9703 00002833 C3                      		retn
  9704                                  
  9705                                  ; ---------------------------------------------------------------------------
  9706                                  setmini_2:
  9707 00002834 E9D1F9                  		jmp	set2		; branch into middle of sethard
  9708                                  
  9709                                  ; =============== S U B	R O U T	I N E =======================================
  9710                                  
  9711                                  ; 30/12/2022 - Retro DOS v4.2
  9712                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
  9713                                  
  9714                                  ; 15/10/2022
  9715                                  ; 28/12/2018 - Retro DOS v4.0
  9716                                  ;
  9717                                  ; dmax_check -- call this when we want to install a new drive.
  9718                                  ;		it checks for drvmax < 26 to see if there is
  9719                                  ;		a drive letter left.
  9720                                  ;
  9721                                  ;	drvmax < 26 : carry SET!
  9722                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  9723                                  ;			trash ax
  9724                                  
  9725                                  		; 19/12/2023 - Retro DOS v5.0
  9726                                  dmax_check:
  9727 00002837 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  9728 0000283C 720D                    		jb	short dmax_ok	; return with carry if okay
  9729 0000283E 06                      		push	es
  9730                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  9731                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
  9732 0000283F B8D904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  9733 00002842 8EC0                    		mov	es, ax
  9734                                  		; 18/10/2022
  9735 00002844 26C606[8603]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  9736                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  9737                                  					; set message flag
  9738                                  					; [SYSINIT+toomanydrivesflag]
  9739 0000284A 07                      		pop	es
  9740                                  
  9741                                  		;;push	es
  9742                                  		;;mov	ax,SYSINIT_SEG
  9743                                  		;;mov	es,ax
  9744                                  		;;mov	byte [es:toomanydrivesflag],1
  9745                                  					; set message flag
  9746                                  		;;pop	es
  9747                                  		;
  9748                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  9749                                  dmax_ok:
  9750 0000284B C3                      		retn
  9751                                  
  9752                                  ; =============== S U B	R O U T	I N E =======================================
  9753                                  
  9754                                  ; 18/10/2022
  9755                                  ; 15/10/2022
  9756                                  ; 28/12/2018 - Retro DOS v4.0
  9757                                  ;
  9758                                  ;	link next bds (at ds:di) into the chain. assume that the
  9759                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  9760                                  ;	  dskdrv_table, and end_of_bdss.	
  9761                                  
  9762                                  		; 19/12/2023 - Retro DOS v5.0
  9763                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
  9764                                  xinstall_bds:
  9765 0000284C 56                      		push	si
  9766 0000284D 53                      		push	bx
  9767 0000284E 8B36[1901]              		mov	si, [start_bds]	; get first bds
  9768                                  xinstall_bds_1:
  9769 00002852 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  9770 00002855 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  9771                                  		;mov	si, [si+BDS.link]
  9772 00002857 8B34                    		mov	si, [si]	; chain	through	list
  9773 00002859 EBF7                    		jmp	short xinstall_bds_1
  9774                                  
  9775                                  xinstall_bds_2:
  9776                                  		;mov	[si+BDS.link], di
  9777 0000285B 893C                    		mov	[si], di
  9778                                  		;mov	[si+BDS.link+2], ds
  9779 0000285D 8C5C02                  		mov	[si+2], ds
  9780                                  		;mov	word [di+BDS.link], -1
  9781 00002860 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  9782                                  		;mov	[di+BDS.link+2], ds
  9783 00002864 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  9784                                  		; 20/03/2019 - Retro DOS v4.0
  9785                                  		;lea	bx, [di+BDS.BPB]
  9786 00002867 8D5D06                  		lea	bx, [di+6]
  9787 0000286A 8B36[5E1A]              		mov	si, [last_dskdrv_table]
  9788 0000286E 891C                    		mov	[si], bx
  9789 00002870 8306[5E1A]02            		add	word [last_dskdrv_table], 2
  9790 00002875 FE06[7500]              		inc	byte [drvmax]
  9791                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
  9792                                  		; 19/12/2023 - Retro DOS v5.0
  9793 00002879 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
  9794 0000287F 5B                      		pop	bx
  9795 00002880 5E                      		pop	si
  9796 00002881 C3                      		retn
  9797                                  
  9798                                  ; =============== S U B	R O U T	I N E =======================================
  9799                                  
  9800                                  ; 17/10/2022
  9801                                  ; 15/10/2022
  9802                                  ; 28/12/2018 - Retro DOS v4.0
  9803                                  ; 03/06/2018 - Retro DOS v3.0
  9804                                  
  9805                                  		; 19/12/2023 - Retro DOS v5.0
  9806                                  cmos_clock_read:
  9807 00002882 50                      		push	ax
  9808 00002883 51                      		push	cx
  9809 00002884 52                      		push	dx
  9810 00002885 55                      		push	bp
  9811 00002886 31ED                    		xor	bp, bp
  9812                                  loop_clock:
  9813 00002888 31C9                    		xor	cx, cx
  9814 0000288A 31D2                    		xor	dx, dx
  9815 0000288C B402                    		mov	ah, 2
  9816 0000288E CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  9817                                  					; Return: CH = hours in	BCD
  9818                                  					; CL = minutes in BCD
  9819                                  					; DH = seconds in BCD
  9820                                  		; 19/12/2023
  9821                                  		;cmp	cx, 0
  9822 00002890 21C9                    		and	cx, cx
  9823 00002892 750F                    		jnz	short clock_present
  9824                                  		;cmp	dx, 0
  9825 00002894 09D2                    		or	dx, dx
  9826 00002896 750B                    		jnz	short clock_present
  9827                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
  9828                                  		;je	short no_readdate ; was	at zero	setting.
  9829 00002898 21ED                    		and	bp, bp
  9830 0000289A 751A                    		jnz	short no_readdate
  9831 0000289C 45                      		inc	bp		; only perform delay once.
  9832                                  		;mov	cx, 4000h	; 16384
  9833                                  		; 19/12/2023
  9834 0000289D B540                    		mov	ch, 40h ; cx = 4000h ; 16384
  9835                                  delay:					
  9836 0000289F E2FE                    		loop	delay
  9837 000028A1 EBE5                    		jmp	short loop_clock
  9838                                  ; ---------------------------------------------------------------------------
  9839                                  
  9840                                  clock_present:
  9841                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  9842                                  		; 19/12/2023
  9843                                  		; ds = cs
  9844 000028A3 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  9845                                  		
  9846 000028A8 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  9847                                  					; possibly destroyed by	cp dos and
  9848                                  					; post routine did not restore that.
  9849 000028AB 56                      		push	si
  9850 000028AC E8BCEF                  		call	read_real_date	; read real-time clock for date
  9851 000028AF FA                      		cli
  9852                                  		;mov	ds:daycnt, si	; set system date
  9853 000028B0 8936[8904]              		mov	[daycnt], si
  9854 000028B4 FB                      		sti
  9855 000028B5 5E                      		pop	si
  9856                                  no_readdate:
  9857 000028B6 5D                      		pop	bp
  9858 000028B7 5A                      		pop	dx
  9859 000028B8 59                      		pop	cx
  9860 000028B9 58                      		pop	ax
  9861                                  
  9862                                  cmosck9:	; 19/12/2023
  9863 000028BA C3                      		retn
  9864                                  
  9865                                  ; ---------------------------------------------------------------------------
  9866                                  
  9867                                  ; the following code is written by jack gulley in engineering group.
  9868                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  9869                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  9870                                  ; the cmos clock rate are still slow which slow down disk operations
  9871                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  9872                                  ; to fix this problem at the request of cp dos.
  9873                                  ;
  9874                                  ; the program is modified to be run on msinit. equates are defined
  9875                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  9876                                  ;
  9877                                  ;  the following code cmosck is used to insure that the cmos has not
  9878                                  ;	had its rate controls left in an invalid state on older at's.
  9879                                  ;
  9880                                  ;	it checks for an at model byte "fc" with a submodel type of
  9881                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  9882                                  ;	bits in case post has not done it. this initilization routine
  9883                                  ;	is only needed once when dos loads. it should be run as soon
  9884                                  ;	as possible to prevent slow diskette access.
  9885                                  ;
  9886                                  ;	this code exposes one to dos clearing cmos setup done by a
  9887                                  ;	resident program that hides and re-boots the system.
  9888                                  
  9889                                  cmosck:					; check and reset rtc rate bits
  9890                                  
  9891                                  ;model byte and submodel byte were already determined in msinit.
  9892                                  
  9893                                  	; 16/06/2018 - Retro DOS v3.0
  9894                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  9895                                  
  9896                                  	; 19/12/2023 - Retro DOS v5.0
  9897                                  	
  9898                                  		; 19/12/2023
  9899                                  		; ds = cs
  9900                                  		;push	ax ; not necessary ; 19/12/2023
  9901                                  		;
  9902 000028BB 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
  9903                                  		;cmp	byte [cs:model_byte], 0FCh
  9904 000028C0 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  9905 000028C2 803E[B005]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  9906                                  		;cmp	byte [cs:secondary_model_byte], 6
  9907                                  					; Is it 06 for the industral AT ?
  9908 000028C7 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  9909 000028C9 803E[B005]04            		cmp	byte [secondary_model_byte], 4
  9910                                  		;cmp	byte [cs:secondary_model_byte], 4
  9911                                  					; Is it 00, 01, 02, or 03 ?
  9912 000028CE 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  9913                                  					; Also,Secondary_model_byte = 0
  9914                                  					;   when AH=0C0h, int 15h failed.
  9915                                  					;	RESET THE CMOS PERIODIC RATE
  9916                                  					;  Model=FC submodel=00,01,02,03 or 06
  9917                                  cmosck4:
  9918 000028D0 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  9919                                  					; NMI disabled on return
  9920 000028D2 B426                    		mov	ah, 26h		; 00100110b
  9921                                  					; Set divider & rate selection
  9922 000028D4 E80B00                  		call	cmos_write
  9923 000028D7 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  9924                                  					; NMI disabled on return
  9925 000028D9 E82000                  		call	cmos_read
  9926 000028DC 2407                    		and	al, 7		; 00000111b
  9927                                  					; clear SET,PIE,AIE,UIE,SQWE
  9928 000028DE 88C4                    		mov	ah, al
  9929 000028E0 B00B                    		mov	al, 0Bh		; cmos_reg_b
  9930                                  					; NMI enabled on return
  9931                                  		; 19/12/2023
  9932                                  		;call	cmos_write
  9933                                  ;cmosck9:
  9934                                  		;pop	ax ; 19/12/2023
  9935                                  		;retn
  9936                                  
  9937                                  		; 19/12/2023
  9938                                  		;jmp	short cmos_write
  9939                                  
  9940                                  ; =============== S U B	R O U T	I N E =======================================
  9941                                  
  9942                                  ;--- cmos_write ----------------------------------------------------------------
  9943                                  ;		write byte to cmos system clock configuration table	       :
  9944                                  ;									       :
  9945                                  ; input: (al)=	cmos table address to be written to			       :
  9946                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9947                                  ;		bits 6-0 = address of table location to write		       :
  9948                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  9949                                  ;									       :
  9950                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  9951                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  9952                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9953                                  ;		the cmos address register is pointed to a default value and    :
  9954                                  ;		the interrupt flag restored to the entry state on return.      :
  9955                                  ;		only the cmos location and the nmi state is changed.	       :
  9956                                  ;-------------------------------------------------------------------------------
  9957                                  
  9958                                  cmos_write:				; write (ah) to location (al)
  9959 000028E2 9C                      		pushf			;
  9960 000028E3 50                      		push	ax		; save work register values
  9961 000028E4 FA                      		cli
  9962 000028E5 50                      		push	ax		; save user nmi	state
  9963 000028E6 0C80                    		or	al, 80h		; disable nmi for us
  9964 000028E8 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9965                                  					; RTC Seconds
  9966 000028EA 90                      		nop
  9967 000028EB 88E0                    		mov	al, ah
  9968 000028ED E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  9969 000028EF 58                      		pop	ax		; get user nmi
  9970 000028F0 2480                    		and	al, 80h
  9971 000028F2 0C0F                    		or	al, 0Fh
  9972 000028F4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9973                                  					; RTC Seconds
  9974 000028F6 90                      		nop
  9975 000028F7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  9976 000028F9 58                      		pop	ax		; restore work registers
  9977                                  
  9978                                  		; 19/12/2023
  9979                                  		;push	cs		; *place code segment in stack and
  9980                                  		;call	cmos_popf	; *handle popf for b- level 80286
  9981                                  		;retn
  9982 000028FA EB18                    		jmp	short cmos_rw_popf
  9983                                  
  9984                                  ; =============== S U B	R O U T	I N E =======================================
  9985                                  
  9986                                  ;--- CMOS_READ -----------------------------------------------------------------
  9987                                  ;		read byte from cmos system clock configuration table	       :
  9988                                  ;									       :
  9989                                  ; input: (al)=	cmos table address to be read				       :
  9990                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9991                                  ;		bits 6-0 = address of table location to read		       :
  9992                                  ;									       :
  9993                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  9994                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
  9995                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9996                                  ;		the cmos address register is pointed to a default value and    :
  9997                                  ;		the interrupt flag restored to the entry state on return.      :
  9998                                  ;		only the (al) register and the nmi state is changed.	       :
  9999                                  ;-------------------------------------------------------------------------------
 10000                                  
 10001                                  cmos_read:				; read location (al) into (al)
 10002 000028FC 9C                      		pushf
 10003 000028FD FA                      		cli
 10004 000028FE 53                      		push	bx
 10005                                  		;push	ax ; *		; AL = cmos table address to be read
 10006                                  		; 19/12/2023
 10007 000028FF 89C3                    		mov	bx, ax ; * ; input
 10008 00002901 0C80                    		or	al, 80h
 10009 00002903 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10010                                  					; RTC Seconds
 10011 00002905 90                      		nop			; (undocumented delay needed)
 10012 00002906 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10013                                  		
 10014                                  		;mov	bx, ax ; output
 10015                                  		;pop	ax ; * ; input
 10016                                  
 10017                                  		; 19/12/2023
 10018                                  		; al = output, bl = input
 10019 00002908 93                      		xchg	ax, bx ; *
 10020                                  		; bl = output, al = input
 10021                                  	
 10022 00002909 2480                    		and	al, 80h
 10023 0000290B 0C0F                    		or	al, 0Fh
 10024 0000290D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10025                                  					; RTC Seconds
 10026 0000290F 90                      		nop
 10027 00002910 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10028                                  		;mov	ax, bx ; * ; output
 10029                                  		; 19/12/2023
 10030 00002912 93                      		xchg	ax, bx
 10031 00002913 5B                      		pop	bx
 10032                                  
 10033                                  		; 19/12/2023
 10034                                  cmos_rw_popf:
 10035 00002914 0E                      		push	cs		; *place code segment in stack and
 10036 00002915 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 10037 00002918 C3                      		retn			; return with flags restored
 10038                                  
 10039                                  ; ---------------------------------------------------------------------------
 10040                                  
 10041                                  cmos_popf:				
 10042 00002919 CF                      		iret			; popf for level b- parts
 10043                                  					; return far and restore flags
 10044                                  
 10045                                  ; 21/12/2022
 10046                                  ; ---------------------------------------------------------------------------
 10047                                  ; ---------------------------------------------------------------------------
 10048                                  %if 0
 10049                                  
 10050                                  ; ---------------------------------------------------------------------------
 10051                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 10052                                  ; ---------------------------------------------------------------------------
 10053                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 10054                                  ; ---------------------------------------------------------------------------
 10055                                  
 10056                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10057                                  ;
 10058                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 10059                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 10060                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 10061                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
 10062                                  
 10063                                  ; =============== S U B	R O U T	I N E =======================================
 10064                                  
 10065                                  ; GetClus, read in a cluster at a specified address
 10066                                  ;
 10067                                  ;  bx = cluster to read
 10068                                  ;  cx = sectors per cluster
 10069                                  ;  es:di = load location
 10070                                  
 10071                                  ; 17/10/2022
 10072                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 10073                                  ; 09/12/2022
 10074                                  DISKRD equ diskrd
 10075                                  
 10076                                  		; 29/12/2023
 10077                                  		; 20/12/2023 - Retro DOS v5.0
 10078                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 10079                                  
 10080                                  		; si:bx = (32 bit) cluster to read
 10081                                  		; cx = sectors per cluster
 10082                                  		; es:di = load location
 10083                                  
 10084                                  		; 17/10/2022
 10085                                  getclus:
 10086                                  		; 12/12/2023
 10087                                  		; ds = cs
 10088                                  		
 10089                                  		push	cx ; 1*
 10090                                  		push	di ; 2*
 10091                                  		;mov	[cs:doscnt], cx
 10092                                  		mov	[doscnt], cx ; 12/12/2023
 10093                                  
 10094                                  		; 20/12/2023
 10095                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 10096                                  		;mov	[ClusterH], si ; high word of cluster number
 10097                                  		mov	bp, si
 10098                                  
 10099                                  		mov	ax, bx
 10100                                  
 10101                                  		;dec	ax
 10102                                  		;dec	ax
 10103                                  		; 20/12/2023
 10104                                  		sub	ax, 2
 10105                                  
 10106                                  		;;sbb	[cs:ClusterH], 0
 10107                                  		;sbb	[ClusterH], 0
 10108                                  		sbb	bp, 0		
 10109                                  
 10110                                  		; 20/12/2023
 10111                                  		;;xchg	ax, [cs:ClusterH]
 10112                                  		;xchg	ax, [ClusterH]
 10113                                  		xchg	ax, bp
 10114                                  
 10115                                  		mul	cx
 10116                                  
 10117                                  		;;xchg	ax, [cs:ClusterH]
 10118                                  		;xchg	ax, [ClusterH]
 10119                                  		xchg	ax, bp ; (+)
 10120                                  		;
 10121                                  		mul	cx		;; convert to logical sector
 10122                                  					;; dx:ax = matching logical sector number
 10123                                  					;;	  starting from the data sector
 10124                                  		;;add	ax, [cs:bios_l]
 10125                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 10126                                  		; 12/12/2023
 10127                                  		;add	ax, [bios_l]
 10128                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 10129                                  
 10130                                  		; 20/12/2023
 10131                                  		;;add	dx, [cs:ClusterH]
 10132                                  		;add	ax, [cs:First_Data_Sector]
 10133                                  		;adc	dx, [cs:First_Data_Sector+2]
 10134                                  		add	dx, bp ; (+)
 10135                                  		;add	dx, [ClusterH]	; convert to logical sector
 10136                                  					; dx:ax	= matching logical sector number
 10137                                  					;	  starting from the data sector
 10138                                  		add	ax, [First_Data_Sector]
 10139                                  		adc	dx, [First_Data_Sector+2]
 10140                                  					; dx:ax = first logical sector to read
 10141                                  unpack:
 10142                                  		; 20/12/2023
 10143                                  		push	ds ; 3* ; ds = cs ; 12/12/2023
 10144                                  		push	dx ; 4* ; * ; 12/12/2023
 10145                                  		push	ax ; 5*
 10146                                  		; 29/12/2023
 10147                                  		push	si ; 6* 
 10148                                  		push	bx ; 7*
 10149                                  
 10150                                  		;;mov	si, [cs:fatloc]
 10151                                  		;mov	si, [fatloc] ; 12/12/2023
 10152                                  		;mov	ds, si
 10153                                  		; 20/12/2023
 10154                                  		;mov	ax, [fatloc]
 10155                                  		;mov	ds, ax
 10156                                  		push	bx ; 8*
 10157                                  		push	word [fatloc] ; 9*
 10158                                  
 10159                                  		;test	byte [cs:fbigfat], 20h
 10160                                  		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 10161                                  		pop	ds ; 9* ; ds = [fatloc]
 10162                                  		jz      short not_32bit_cluster ; no
 10163                                  unpack32:
 10164                                  		;push	dx
 10165                                  		mov	dx, si
 10166                                  		;mov	si, bx
 10167                                  		pop	si ; 8* ; si = bx
 10168                                  		add	si, si
 10169                                  		adc	dx, dx
 10170                                  		add	si, si
 10171                                  		adc	dx, dx 
 10172                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 10173                                  		call	get_fat_sector
 10174                                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 10175                                  		mov	bx, [bx]	; low word of the FAT32 cluster number
 10176                                  		;pop	dx
 10177                                  		jmp	short getcl1
 10178                                  
 10179                                  not_32bit_cluster:
 10180                                  		;mov	si, bx		; next cluster
 10181                                  		pop	si ; 8* ; si = bx
 10182                                  		test	byte [cs:fbigfat], 40h	; fbig
 10183                                  					; 16 bit fat?
 10184                                  		jnz	short unpack16	; yes
 10185                                  unpack12:
 10186                                  		shr	si, 1		; 12 bit fat. si = si/2
 10187                                  					; si = clus + clus/2
 10188                                  		add	si, bx		;
 10189                                  					; (si =	byte offset of the cluster in the FAT)
 10190                                  		;push	dx ; 12/12/2023
 10191                                  		xor	dx, dx
 10192                                  		; 12/12/2023
 10193                                  		; ds = FAT buffer segment
 10194                                  		call	get_fat_sector
 10195                                  		;pop	dx ; 12/12/2023
 10196                                  
 10197                                  		mov	ax, [bx]	; save it into ax
 10198                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
 10199                                  		; 25/06/2023
 10200                                  		;mov	al, [bx]	; splitted fat
 10201                                  		
 10202                                  		; 12/12/2023
 10203                                  		;mov	[cs:temp_cluster], al
 10204                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 10205                                  
 10206                                   		inc	si		; (next	byte)
 10207                                  
 10208                                  		;push	dx ; 12/12/2023
 10209                                  		xor	dx, dx
 10210                                  		call	get_fat_sector
 10211                                  		;pop	dx ; 12/12/2023
 10212                                  
 10213                                  		;mov	al, ds:0
 10214                                  		; 12/12/2023
 10215                                  		; ds = FAT buffer segment
 10216                                  		;mov	al, [0] ; 19/10/2022
 10217                                  		;mov	[cs:temp_cluster+1], al
 10218                                  		;mov	ax, [cs:temp_cluster]
 10219                                  		; 12/12/2023
 10220                                  		;mov	al, [cs:temp_cluster]
 10221                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 10222                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 10223                                  even_odd:
 10224                                  		; 29/12/2023
 10225                                  		pop	bx ; 7*		; restore old fat entry	value
 10226                                  		push	bx		; save it right	away.
 10227                                  		shr	bx, 1		; was it even or odd?
 10228                                  		jnc	short havclus	; it was even.
 10229                                  		shr	ax, 1		; odd. massage fat value and keep
 10230                                  					; the highest 12 bits.
 10231                                  		shr	ax, 1
 10232                                  		shr	ax, 1
 10233                                  		shr	ax, 1
 10234                                  havclus:
 10235                                  		mov	bx, ax		; now bx = new fat entry.
 10236                                  		and	bx, 0FFFh	; keep low 12 bits.
 10237                                  		jmp	short unpackx
 10238                                  ; ---------------------------------------------------------------------------
 10239                                  
 10240                                  unpack16:
 10241                                  		;push	dx	; 12/12/2023
 10242                                  		xor	dx, dx ; 0
 10243                                  		shl	si, 1		; extend to 32 bit offset
 10244                                  		;adc	dx, 0
 10245                                  		; 12/12/2023
 10246                                  		rcl	dx, 1
 10247                                  
 10248                                  		; 12/12/2023
 10249                                  		; ds = FAT buffer segment
 10250                                  		call	get_fat_sector
 10251                                  		;pop	dx	; 12/12/2023
 10252                                  		mov	bx, [bx]	;
 10253                                  					; bx = new fat entry.
 10254                                  unpackx:
 10255                                  		; 20/12/2023
 10256                                  		xor	si, si		; high word of cluster number = 0
 10257                                  					; (FAT12 or FAT16)
 10258                                  getcl1:
 10259                                  		; 29/12/2023
 10260                                  		pop	ax	; 7* - cluster number lw
 10261                                  		;pop	word [cs:ClusterH]
 10262                                  		pop	dx	; 6* - cluster number hw
 10263                                  
 10264                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10265                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 10266                                  		; ((consequtive clusters --> consequtive sectors))
 10267                                  
 10268                                  		sub	ax, bx	; previous - current (or current - new)	
 10269                                  		;sbb	[cs:ClusterH], si
 10270                                  		sbb	dx, si
 10271                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 10272                                  		;cmp	dx, -1
 10273                                  		; 29/12/2023
 10274                                  		inc	dx ; -1 -> 0
 10275                                  		jnz	short not_consequental
 10276                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 10277                                  		inc	ax ; -1 -> 0
 10278                                  not_consequental:
 10279                                  		pop	ax ; 5* 	; restore logical sector (low)
 10280                                  		pop	dx ; 4* ; * ; 12/12/2023
 10281                                  		pop	ds ; 3*
 10282                                  
 10283                                  		;; 12/12/2023
 10284                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 10285                                  		;; ((consequtive clusters --> consequtive sectors))
 10286                                  		;; ds = cs
 10287                                  		;sub	si, bx
 10288                                  		;cmp	si, -1		; one apart? (consequtive?)
 10289                                  		;			; (current = previous+1)
 10290                                  
 10291                                  		jnz	short getcl2	; no, read [doscnt] sectors 
 10292                                  
 10293                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 10294                                  		add	[doscnt], cx ; 12/12/2023 ; add to read count
 10295                                  		jmp	unpack
 10296                                  ; ---------------------------------------------------------------------------
 10297                                  
 10298                                  getcl2:
 10299                                  		push	si ; 20/12/2023
 10300                                  		push	bx	
 10301                                  		; bx = low word of the new cluster number
 10302                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 10303                                  		; si = high word of the new cluster number
 10304                                  		push	dx		; sector to read (high word)
 10305                                  		push	ax		; sector to read (low word)
 10306                                  		
 10307                                  		; 12/12/2023
 10308                                  		; ds = cs
 10309                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 10310                                  		;mov	cx, [cs:doscnt]
 10311                                  		mov	ax, [drvfat]	; get drive and	fat spec
 10312                                  
 10313                                  		;;;
 10314                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10315                                  		;
 10316                                  		; dma and segment (64K boundary) overrun precaution
 10317                                  		; (sector count will be decreased if it is required)
 10318                                   		mov	cx, di
 10319                                  		not	cx		; cx = 65535 - cx
 10320                                  		shr	cx, 1		; cx = cx/2
 10321                                  		xor	cl, cl
 10322                                  		xchg	cl, ch		; cx = cx/256
 10323                                  		
 10324                                  		;cmp	cx, [cs:doscnt]	
 10325                                  				; if sector read count > cx, decrease it to cx
 10326                                  		cmp	cx, [doscnt]
 10327                                  		jbe	short getcl3
 10328                                  		;;;
 10329                                  		;mov	cx, [cs:doscnt]
 10330                                  		mov	cx, [doscnt]
 10331                                  getcl3:
 10332                                  		pop	dx		; sector to read for diskrd (low)
 10333                                  		;pop	word [cs:start_sec_h]
 10334                                  		; 12/12/2023
 10335                                  		pop	word [start_sec_h]
 10336                                  					; sector to read for diskrd (high)
 10337                                  		; 12/12/2023
 10338                                  		; ds = cs
 10339                                  		;push	ds
 10340                                  		;push	cs
 10341                                  		;pop	ds
 10342                                  		
 10343                                  		push	cs		; simulate far call
 10344                                  
 10345                                  		; 20/12/2023
 10346                                  		; 17/10/2022
 10347                                  		mov	bp, DISKRD	; offset diskrd
 10348                                  		;mov	bp, 0A2Bh	; 20/12/2023
 10349                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 10350                                  		;mov	bp, 8E5h	; 17/10/2022
 10351                                  					; 2C7h:8E5h = 70h:2E55h
 10352                                  
 10353                                  		call	call_bios_code	; read the clusters
 10354                                  		
 10355                                  		;pop	ds
 10356                                  		; 12/12/2023
 10357                                  		; ds = cs
 10358                                  		pop	bx		; lw of the new cluster number
 10359                                  		pop	si ; 20/12/2023 ; hw of the new cluster number
 10360                                  
 10361                                  		pop	di ; 2* - (kernel) load location (es:di)
 10362                                  
 10363                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
 10364                                  		; 12/12/2023
 10365                                  		mov	ax, [doscnt]
 10366                                  		xchg	ah, al		; multiply by 256
 10367                                  		shl	ax, 1		; times	2 equal	512
 10368                                  		add	di, ax		; update load location
 10369                                  
 10370                                  		pop	cx ; 1*		; restore sectors/cluster
 10371                                  
 10372                                  		retn
 10373                                  
 10374                                  ; =============== S U B	R O U T	I N E =======================================
 10375                                  
 10376                                  ;function: find and read the corresponding fat sector into ds:0
 10377                                  ;
 10378                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 10379                                  ;     ds - fatloc segment
 10380                                  ;     cs:drvfat - logical drive number, fat id
 10381                                  ;     cs:md_sectorsize
 10382                                  ;     cs:last_fat_secnum - last fat sector number read in.
 10383                                  ;
 10384                                  ;out). corresponding fat sector read in.
 10385                                  ;      bx = offset value from fatlog segment.
 10386                                  ;      other registers are saved.
 10387                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 10388                                  ;      starts at the last byte of the fat sector. in this case, the caller
 10389                                  ;      should save this byte, and read the next fat sector to get the rest
 10390                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 10391                                  
 10392                                  		; 17/10/2022
 10393                                  get_fat_sector:	
 10394                                  		; 12/12/2023
 10395                                  		; ds = fat buffer segment
 10396                                  
 10397                                  		; 12/12/2023
 10398                                  		;push	ax ; (not necessary)
 10399                                  		push	cx ; read count (sectors per cluster)
 10400                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 10401                                  		push	si ; FAT offset value (from fat entry 0)
 10402                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 10403                                  		push	ds ; FAT buffer segment
 10404                                  
 10405                                  		; 12/12/2023
 10406                                  		push	cs
 10407                                  		pop	ds
 10408                                  	
 10409                                  		mov	ax, si
 10410                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 10411                                  		; 12/12/2023
 10412                                  		;mov	cx, [md_sectorsize] ; 512
 10413                                  		;div	cx		; ax = sector number, dx = offset
 10414                                  		; 12/12/2023
 10415                                  		;nop
 10416                                  
 10417                                  		; 12/12/2023
 10418                                  		div	word [md_sectorsize] ; 512
 10419                                  
 10420                                  		; ax = FAT sector (sequence/index) number
 10421                                  		; dx = cluster number offset
 10422                                  
 10423                                  		; Get rid of the assumption that
 10424                                  		; there	is only	one reserved sector
 10425                                  
 10426                                  		; 12/12/2023 ; *
 10427                                  		;push	es ; *
 10428                                  		;push	ds ; *
 10429                                  		;push	di ; *
 10430                                  		push	ax
 10431                                  		;push	cs ; *
 10432                                  		;pop	ds ; *
 10433                                  
 10434                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 10435                                  		; 12/12/2023
 10436                                  		mov	ax, [drvfat]	; get drive # and FAT id 
 10437                                  		mov	bp, SETDRIVE
 10438                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 10439                                  		;;mov	bp, 4D7h	; setdrive
 10440                                  					; at 2C7h:4D7h = 70h:2A47h
 10441                                  		push	cs		; simulate far call
 10442                                  		call	call_bios_code	; get bds for drive
 10443                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
 10444                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 10445                                  					; add #reserved_sectors
 10446                                  		; 12/12/2023
 10447                                  		;pop	di ; *
 10448                                  		;pop	ds ; *
 10449                                  		;pop	es ; *
 10450                                  
 10451                                  		; 12/12/2023
 10452                                  		; ds = cs
 10453                                  		cmp	ax, [last_fat_sec_num]
 10454                                  		;cmp	ax, [cs:last_fat_sec_num]
 10455                                  		jz	short gfs_split_chk ; don't need to read it again.
 10456                                  		mov	[last_fat_sec_num], ax
 10457                                  		;mov	[cs:last_fat_sec_num], ax
 10458                                  					; sector number
 10459                                  					; (in the partition, without hidden sectors)
 10460                                  		; 13/12/2023
 10461                                  		pop	es ; FAT buffer segment (DS on top of the stack)
 10462                                  		push	es ; (put it on top of the stack again)
 10463                                  
 10464                                  		push	dx ; cluster number offset
 10465                                  
 10466                                  		; 12/12/2023
 10467                                  		xor	cx, cx
 10468                                  		mov	[start_sec_h], cx ;0 
 10469                                  		;mov	word [cs:start_sec_h], 0 
 10470                                  					; prepare to read the fat sector
 10471                                  					; start_sec_h is always	0 for fat sector.
 10472                                  		mov	dx, ax
 10473                                  		; 12/12/2023
 10474                                  		inc	cx ; cx = 1
 10475                                  		;mov	cx, 1		; 1 sector read
 10476                                  		;mov	ax, [cs:drvfat]
 10477                                  		mov	ax, [drvfat]
 10478                                  		;push	ds
 10479                                  		;pop	es
 10480                                  
 10481                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
 10482                                  		
 10483                                  		; 12/12/2023
 10484                                  		;push	ds
 10485                                  		;push	cs
 10486                                  		;pop	ds
 10487                                  		
 10488                                  		push	cs		; simulate far call
 10489                                  		mov	bp, DISKRD	; 8E5h
 10490                                  		;mov	bp, 8E5h	; offset diskrd
 10491                                  					; 2C7h:8E5h = 70h:2E55h
 10492                                  		call	call_bios_code
 10493                                  
 10494                                  		; 12/12/2023
 10495                                  		;pop	ds
 10496                                  		; ds = cs = biosdata segment
 10497                                  
 10498                                  		pop	dx ; cluster number offset 
 10499                                  
 10500                                  gfs_split_chk:
 10501                                  		; 13/12/2023
 10502                                  		;mov	cx, [cs:md_sectorsize] ; 512
 10503                                  		mov	cx, [md_sectorsize]
 10504                                  ;gfs_split_chk:					
 10505                                  		dec	cx		; 511
 10506                                  		cmp	dx, cx		; if offset points to the
 10507                                  					; last byte of this sector,
 10508                                  					; then splitted	entry.
 10509                                  		mov	bx, dx		; set bx to dx
 10510                                  		
 10511                                  		; 12/12/2023
 10512                                  		; bx = dx = cluster number offset in the FAT buffer
 10513                                  		pop	ds ; FAT buffer segment
 10514                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 10515                                  		pop	si ; FAT offset value (from fat entry 0)
 10516                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 10517                                  		pop	cx ; read count (sectors per cluster)
 10518                                  		;pop	ax
 10519                                  
 10520                                  		retn
 10521                                  ; 15/10/2022
 10522                                  ;Bios_Data_Init	ends
 10523                                  
 10524                                  %endif
 10525                                  ; ---------------------------------------------------------------------------
 10526                                  ; ---------------------------------------------------------------------------
 10527                                  
 10528                                  		; 09/12/2022
 10529                                  		;db 0
 10530                                  
 10531                                  numbertodiv	equ ($-BData_start)
 10532                                  numbertomod	equ (numbertodiv % 16)
 10533                                  
 10534                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
 10535 0000291A 00<rep 6h>              		times (16-numbertomod) db 0
 10536                                  %endif
 10537                                  
 10538                                  ;align 16
 10539                                  
 10540                                  ; 09/12/2022
 10541                                  IOSYSCODESEGOFF equ $ - BData_start
 10542                                  ; 29/09/2023
 10543                                  ;IOSYSCODESEGOFF equ $-$$
 10544                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 10545                                  
 10546                                  ; 28/09/2023
 10547                                  S1SIZE equ $-$$
 10548                                  
 10549                                  ;--- End of DOSBIOS data segment --------------------------------------------
 10550                                  ; ---------------------------------------------------------------------------
 10551                                  		;db 4 dup(0)
 10552                                  ; 09/12/2022		
 10553                                  ;		times 4 db 0	; 19/10/2022
 10554                                  ; ---------------------------------------------------------------------------
 10555                                  
 10556                                  ;============================================================================
 10557                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 10558                                  ;============================================================================
 10559                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10560                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 10561                                  
 10562                                  section .BIOSCODE vstart=0 
 10563                                  
 10564                                  ; 30/12/2022
 10565                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 10566                                  
 10567                                  BCode_start:	 ; 09/12/2022
 10568                                   
 10569                                  ; 02/10/2022
 10570                                  
 10571                                  ;--- DOSBIOS code segment ---------------------------------------------------
 10572                                  ;----------------------------------------------------------------------------
 10573                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 10574                                  ;----------------------------------------------------------------------------
 10575                                  
 10576                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 10577 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 10578 00000030 7000                    BiosDataWord:	dw 70h
 10579                                  
 10580                                  ; 15/10/2022
 10581                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 10582                                  ; 09/12/2022
 10583                                  BIOSDATAWORD	equ BiosDataWord
 10584                                  
 10585                                  ; ---------------------------------------------------------------------------
 10586                                  
 10587                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10588                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10589                                  
 10590                                  ;************************************************************************
 10591                                  ;*									*
 10592                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 10593                                  ;*	  trashes di, cx, es						*
 10594                                  ;*									*
 10595                                  ;*	cas -- should be made disposable!				*
 10596                                  ;*									*
 10597                                  ;************************************************************************
 10598                                  
 10599                                  	; 20/09/2023	
 10600                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10601                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 10602                                  
 10603                                  _seg_reinit:
 10604 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10605                                  					; at 2C7h:30h or 70h:25A0h
 10606                                  		;mov	di, (offset cdev+2)
 10607 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 10608                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 10609                                  		; 10/08/2023
 10610 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 10611                                  _seg_reinit_1:
 10612 0000003D AB                      		stosw			; modify Bios_Code entry points
 10613 0000003E 47                      		inc	di
 10614 0000003F 47                      		inc	di
 10615 00000040 E2FB                    		loop	_seg_reinit_1
 10616                                  		; 10/08/2023 (PCDOS 7.1)
 10617                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 10618                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 10619 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 10620                                  
 10621 00000046 CB                      		retf
 10622                                  
 10623                                  ; ---------------------------------------------------------------------------
 10624                                  
 10625                                  ; 15/10/2022
 10626                                  
 10627                                  ;************************************************************************
 10628                                  ;*									*
 10629                                  ;*	chardev_entry - main device driver dispatch routine		*
 10630                                  ;*	   called with a dummy parameter block on the stack		*
 10631                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 10632                                  ;*									*
 10633                                  ;*	will eventually take care of doing the transitions in		*
 10634                                  ;*	   out of Bios_Code						*
 10635                                  ;*									*
 10636                                  ;************************************************************************
 10637                                  
 10638                                  		; 20/09/2023
 10639                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 10640 00000047 56                      		push	si
 10641 00000048 50                      		push	ax
 10642 00000049 51                      		push	cx
 10643 0000004A 52                      		push	dx
 10644 0000004B 57                      		push	di
 10645 0000004C 55                      		push	bp
 10646 0000004D 1E                      		push	ds
 10647 0000004E 06                      		push	es
 10648 0000004F 53                      		push	bx
 10649 00000050 89E5                    		mov	bp, sp
 10650 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 10651                                  		;;mov	ds, word [cs:0030h]
 10652                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10653 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10654                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 10655 0000005A C434                    		les	si, [si]
 10656                                  		;mov	ax, [si+2]	; get the device number	if present
 10657 0000005C 8CC0                    		mov	ax, es
 10658 0000005E A2[2100]                		mov	[auxnum], al
 10659 00000061 8826[8004]              		mov	[printdev], ah
 10660                                  		;mov	si, [si]	; point	to the device dispatch table
 10661 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 10662 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 10663 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 10664 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 10665 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 10666                                  		; 17/10/2022
 10667 00000079 81FE[6F05]              		cmp	si, DSKTBL
 10668                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 10669                                  		;cmp	si, 4A2h	; dsktbl
 10670                                  					; at 2C7h:4A2h = 70h:2A12h
 10671 0000007D 7517                    		jnz	short no_sector32_mapping
 10672                                  
 10673                                  ; Special case for 32-bit start sector number:
 10674                                  ;   if (si==dsktbl) /* if this is a disk device call */
 10675                                  ;      set high 16 bits of secnum to 0
 10676                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 10677                                  ;
 10678                                  ; pass high word of sector number in start_sec_h, low word in dx
 10679                                  ;
 10680                                  ; note: start_l and start_h are the offsets within the io_request packet
 10681                                  ;	  which contain the low and hi words of the 32 bit start sector if
 10682                                  ;	  it has been used.
 10683                                  ;
 10684                                  ; note: remember not to destroy the registers which have been set up before
 10685                                  
 10686                                  		; 20/09/2023
 10687                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 10688 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 10689 00000085 83FAFF                  		cmp	dx, 0FFFFh
 10690 00000088 750C                    		jnz	short no_sector32_mapping
 10691 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 10692                                  					; 32 bits dsk req
 10693                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 10694 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 10695 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 10696                                  					; dx = packet.start_l
 10697                                  no_sector32_mapping:
 10698 00000096 97                      		xchg	ax, di
 10699 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 10700 0000009B 2E3A04                  		cmp	al, [cs:si]
 10701 0000009E 732B                    		jnb	short command_error
 10702 000000A0 98                      		cbw			; note that al <= 15 means ok
 10703 000000A1 D1E0                    		shl	ax, 1
 10704 000000A3 01C6                    		add	si, ax
 10705 000000A5 97                      		xchg	ax, di
 10706 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 10707 000000AA FC                      		cld
 10708                                  		; 17/10/2022
 10709 000000AB 2EFF5401                		call	near [cs:si+1]
 10710                                  		;call	word ptr cs:si+1
 10711 000000AF 7202                    		jb	short already_got_ah_status
 10712 000000B1 B401                    		mov	ah, 1
 10713                                  already_got_ah_status:
 10714                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 10715                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10716                                  					; cas note: shouldn't be needed!
 10717 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10718                                  		;lds	bx, ds:ptrsav
 10719 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 10720 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 10721                                  					; mark operation complete
 10722 000000BF 5B                      		pop	bx
 10723 000000C0 07                      		pop	es
 10724 000000C1 1F                      		pop	ds
 10725 000000C2 5D                      		pop	bp
 10726 000000C3 5F                      		pop	di
 10727 000000C4 5A                      		pop	dx
 10728 000000C5 59                      		pop	cx
 10729 000000C6 58                      		pop	ax
 10730 000000C7 5E                      		pop	si
 10731                                  		;add	sp, 2		; get rid of fake return address
 10732                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 10733 000000C8 44                      		inc	sp
 10734 000000C9 44                      		inc	sp	
 10735                                  
 10736                                  		; fall through into bc_retf
 10737                                  ; ---------------------------------------------------------------------------	
 10738                                  bc_retf:
 10739 000000CA CB                      		retf
 10740                                  ; ---------------------------------------------------------------------------
 10741                                  
 10742                                  command_error:				
 10743 000000CB E80700                  		call	bc_cmderr
 10744 000000CE EBE3                    		jmp	short already_got_ah_status
 10745                                  ; 15/10/2022
 10746                                  ; 01/05/2019
 10747                                  
 10748                                  ;----------------------------------------------------------------------------
 10749                                  ; The following piece of hack is for supporting CP/M compatibility
 10750                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 10751                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 10752                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 10753                                  ; high.
 10754                                  ;----------------------------------------------------------------------------
 10755                                  
 10756                                  		;db 7 dup(0)
 10757                                  
 10758                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 10759                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 10760                                  		; 15/10/2022
 10761                                  		;dw 0		; pad to bring offset to 0D0h
 10762                                  
 10763 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 10764                                  				;  which is the CP/M call 5 entry point
 10765                                  		
 10766                                  
 10767                                  ; ---------------------------------------------------------------------------
 10768                                  
 10769                                  ;	exit - all routines return through this path
 10770                                  
 10771                                  bc_cmderr:				
 10772 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 10773                                  					; unknown command error
 10774                                  
 10775                                  ; =============== S U B	R O U T	I N E =======================================
 10776                                  
 10777                                  ;	now zero the count field by subtracting its current value,
 10778                                  ;	  which is still in cx, from itself.
 10779                                  
 10780                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 10781                                  ;	  in order to return the number actually complete
 10782                                  
 10783                                  bc_err_cnt:	
 10784                                  		;les	bx, ds:ptrsav
 10785                                  		; 19/10/2022
 10786 000000D7 C41E[1200]              		les	bx, [ptrsav]
 10787 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 10788                                  					; # of successful i/o's
 10789 000000DF B481                    		mov	ah, 81h		; mark error return
 10790 000000E1 F9                      		stc			; indicate abnormal end
 10791 000000E2 C3                      		retn
 10792                                  
 10793                                  ; 15/10/2022
 10794                                  
 10795                                  ;Bios_Code ends
 10796                                  
 10797                                  ;----------------------------------------------------------------------------
 10798                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 10799                                  ;----------------------------------------------------------------------------
 10800                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10801                                  ; 10/01/2019 - Retro DOS v4.0
 10802                                  
 10803                                  ; 30/04/2019
 10804                                  
 10805                                  ;title	mschar - character and clock devices
 10806                                  
 10807                                  ;MODE_CTRLBRK	equ	0FFh
 10808                                  
 10809                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 10810                                  
 10811                                  ;************************************************************************
 10812                                  ;*									*
 10813                                  ;*	device driver dispatch tables					*
 10814                                  ;*									*
 10815                                  ;*	each table starts with a byte which lists the number of		*
 10816                                  ;*	legal functions, followed by that number of words. Each		*
 10817                                  ;*	word represents an offset of a routine in Bios_Code which	*
 10818                                  ;*	handles the function. The functions are terminated with		*
 10819                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 10820                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 10821                                  ;*	returned as abnormal completion status. Notice that ds		*
 10822                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 10823                                  ;*									*
 10824                                  ;************************************************************************
 10825                                  
 10826                                  		; 20/09/2023
 10827                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 10828                                  		; 13/12/2022
 10829 000000E3 00                      		db 0
 10830                                  
 10831                                  		; 13/12/2022
 10832 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 10833                                  					; 2C7h:0E4h = 70h:2654h
 10834 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 10835                                  					; 00 init
 10836 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 10837 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 10838 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 10839                                  					; 03
 10840 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 10841                                  					; 04
 10842 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 10843                                  					; 05
 10844 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 10845 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 10846                                  					; 07
 10847 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 10848                                  					; 08
 10849 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 10850 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 10851                                  con_table_end:
 10852 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 10853                                  					; 2C7h:0FBh = 70h:266Bh
 10854 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 10855 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10856 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10857 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 10858 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 10859                                  					; 04 indicate zero chars read
 10860 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10861                                  					; 05 read non-destructive
 10862 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10863 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10864 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 10865 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 10866 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 10867 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 10868 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 10869 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 10870 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 10871 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 10872 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 10873 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 10874 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 10875 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 10876 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 10877 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 10878 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 10879 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 10880 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 10881 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 10882                                  prn_table_end:
 10883 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 10884                                  					; 2C7h:130h = 70h:26A0h
 10885 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 10886 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10887 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10888 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10889 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 10890 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 10891 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10892 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 10893 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 10894 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 10895 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 10896                                  aux_table_end:
 10897 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 10898                                  					; 2C7h:147h = 70h:26B7h
 10899 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 10900 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10901 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10902 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10903 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 10904 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10905 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10906 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10907 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 10908 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 10909                                  tim_table_end:
 10910                                  
 10911                                  ; ---------------------------------------------------------------------------
 10912                                  
 10913                                  ;************************************************************************
 10914                                  ;*									*
 10915                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 10916                                  ;*									*
 10917                                  ;************************************************************************
 10918                                  
 10919                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 10920                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 10921 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 10922                                  con_loop:				
 10923 0000015E E80500                  		call	chrin		; get char in al
 10924 00000161 AA                      		stosb			; store	char at	es:di
 10925 00000162 E2FA                    		loop	con_loop
 10926                                  con_exit:				
 10927 00000164 F8                      		clc
 10928 00000165 C3                      		retn
 10929                                  
 10930                                  ; =============== S U B	R O U T	I N E =======================================
 10931                                  
 10932                                  ;************************************************************************
 10933                                  ;*									*
 10934                                  ;*	chrin - input single char from keyboard into al			*
 10935                                  ;*									*
 10936                                  ;*	  we are going to issue extended keyboard function, if		*
 10937                                  ;*	  supported. the returning value of the extended keystroke	*
 10938                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 10939                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 10940                                  ;*	  this creates a conflict when the user entered real		*
 10941                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 10942                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 10943                                  ;*	  in the following manner:					*
 10944                                  ;*									*
 10945                                  ;*	      ah = 16h							*
 10946                                  ;*	      int 16h							*
 10947                                  ;*	      if al == 0, then extended code (in ah)			*
 10948                                  ;*	      else if al == 0E0h, then					*
 10949                                  ;*	      if ah <> 0, then extended code (in ah)			*
 10950                                  ;*		else greek_alpha character.				*
 10951                                  ;*									*
 10952                                  ;*	also, for compatibility reason, if an extended code is		*
 10953                                  ;*	  detected, then we are going to change the value in al		*
 10954                                  ;*	  from 0E0h to 00h.						*
 10955                                  ;*									*
 10956                                  ;************************************************************************
 10957                                  
 10958                                  		; 19/10/2022
 10959                                  chrin:		
 10960 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 10961 0000016A 30C0                    		xor	al, al
 10962 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 10963 00000170 08C0                    		or	al, al
 10964 00000172 752A                    		jnz	short keyret
 10965 00000174 CD16                    		int	16h		; KEYBOARD -
 10966 00000176 09C0                    		or	ax, ax
 10967 00000178 74EC                    		jz	short chrin
 10968 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 10969 0000017D 7504                    		jnz	short alt_ext_chk
 10970 0000017F B010                    		mov	al, 10h
 10971 00000181 EB1B                    		jmp	short keyret
 10972                                  ; ---------------------------------------------------------------------------
 10973                                  
 10974                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 10975                                  ;    if character read was 0E0h then
 10976                                  ;      if extended byte was zero (i.e. ah == 0) then
 10977                                  ;	 goto keyret
 10978                                  ;      else
 10979                                  ;	 set al to zero
 10980                                  ;	 goto alt_save
 10981                                  ;      endif
 10982                                  ;    endif
 10983                                  ;  endif
 10984                                  
 10985                                  alt_ext_chk:
 10986 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 10987 00000188 740C                    		jz	short not_ext
 10988 0000018A 3CE0                    		cmp	al, 0E0h
 10989 0000018C 7508                    		jnz	short not_ext
 10990 0000018E 08E4                    		or	ah, ah
 10991 00000190 740C                    		jz	short keyret
 10992 00000192 30C0                    		xor	al, al
 10993 00000194 EB04                    		jmp	short alt_save
 10994                                  ; ---------------------------------------------------------------------------
 10995                                  
 10996                                  not_ext:				
 10997 00000196 08C0                    		or	al, al		; special case?
 10998 00000198 7504                    		jnz	short keyret
 10999                                  alt_save:				
 11000 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 11001                                  keyret:					
 11002 0000019E C3                      		retn
 11003                                  
 11004                                  ; ---------------------------------------------------------------------------
 11005                                  
 11006                                  ;************************************************************************
 11007                                  ;*									*
 11008                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 11009                                  ;*									*
 11010                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 11011                                  ;*	in the status word of the request packet, and there is no	*
 11012                                  ;*	character in the input buffer, the driver issues a system	*
 11013                                  ;*	wait request to the rom. on return from the rom, it returns	*
 11014                                  ;*	a 'char-not-found' to the dos.					*
 11015                                  ;*									*
 11016                                  ;************************************************************************
 11017                                  
 11018                                  		; 19/10/2022
 11019                                  con_rdnd:				
 11020 0000019F A0[0C00]                		mov	al, [altah]
 11021 000001A2 08C0                    		or	al, al
 11022 000001A4 754C                    		jnz	short rdexit
 11023 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 11024 000001AA CD16                    		int	16h		; KEYBOARD -
 11025 000001AC 751D                    		jnz	short gotchr
 11026 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 11027 000001B3 7412                    		jz	short z_bus_exit
 11028 000001B5 C41E[1200]              		les	bx, [ptrsav]
 11029                                  		; 12/12/2022
 11030 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 11031                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 11032 000001BE 7407                    		jz	short z_bus_exit
 11033 000001C0 B80041                  		mov	ax, 4100h
 11034 000001C3 30DB                    		xor	bl, bl
 11035 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 11036                                  					; AL = condition type, BH = condition compare or mask value
 11037                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 11038                                  					; DX = I/O port	address	if AL bit 4 set
 11039                                  z_bus_exit:				
 11040 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 11041 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 11042 000001CA C3                      		retn
 11043                                  ; ---------------------------------------------------------------------------
 11044                                  
 11045                                  gotchr:					
 11046 000001CB 09C0                    		or	ax, ax
 11047 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 11048 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 11049 000001D3 CD16                    		int	16h		; KEYBOARD -
 11050 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 11051                                  ; ---------------------------------------------------------------------------
 11052                                  
 11053                                  notbrk:					
 11054 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 11055 000001DA 7504                    		jnz	short rd_ext_chk
 11056 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 11057 000001DE EB12                    		jmp	short rdexit
 11058                                  ; ---------------------------------------------------------------------------
 11059                                  
 11060                                  rd_ext_chk:				
 11061 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 11062 000001E5 740B                    		jz	short rdexit
 11063 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 11064 000001E9 7507                    		jnz	short rdexit
 11065 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 11066 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 11067 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 11068                                  					; change it for	compatibility
 11069                                  rdexit:					
 11070 000001F2 C41E[1200]              		les	bx, [ptrsav]
 11071 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 11072                                  					; return keyboard character here
 11073                                  bc_exvec:				
 11074 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 11075                                  					; indicate normal termination
 11076 000001FB C3                      		retn
 11077                                  ; ---------------------------------------------------------------------------
 11078                                  
 11079                                  ;************************************************************************
 11080                                  ;*									*
 11081                                  ;*	con_write - console write routine				*
 11082                                  ;*									*
 11083                                  ;*	entry:	es:di -> buffer						*
 11084                                  ;*		cx    =  count						*
 11085                                  ;*									*
 11086                                  ;************************************************************************
 11087                                  
 11088                                  con_writ:
 11089                                  		;jcxz	short bc_exvec
 11090 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 11091                                  		; 12/12/2022
 11092                                  		;jcxz	cc_ret
 11093                                  con_lp:					
 11094 000001FE 268A05                  		mov	al, [es:di]
 11095 00000201 47                      		inc	di
 11096 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 11097                                  					; AL = character to display
 11098 00000204 E2F8                    		loop	con_lp
 11099                                  cc_ret:					
 11100 00000206 F8                      		clc
 11101 00000207 C3                      		retn
 11102                                  
 11103                                  ; =============== S U B	R O U T	I N E =======================================
 11104                                  
 11105                                  ;************************************************************************
 11106                                  ;*									*
 11107                                  ;*	con_flush - flush out keyboard queue				*
 11108                                  ;*									*
 11109                                  ;************************************************************************
 11110                                  
 11111                                  con_flush:
 11112 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 11113                                  flloop:					; while	(charavail()) charread();	
 11114 0000020D B401                    		mov	ah, 1
 11115 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 11116                                  					; Return: ZF clear if character	in buffer
 11117                                  					; AH = scan code, AL = character
 11118                                  					; ZF set if no character in buffer
 11119 00000211 74F3                    		jz	short cc_ret
 11120 00000213 30E4                    		xor	ah, ah
 11121 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 11122                                  					; Return: AH = scan code, AL = character
 11123 00000217 EBF4                    		jmp	short flloop
 11124                                  
 11125                                  ; ---------------------------------------------------------------------------
 11126                                  
 11127                                  ; 15/10/2022
 11128                                  
 11129                                  ;************************************************************************
 11130                                  ;*									*
 11131                                  ;*	some equates for rom bios printer i/o				*
 11132                                  ;*									*
 11133                                  ;************************************************************************
 11134                                  
 11135                                  ; ibm rom status bits (i don't trust them, neither should you)
 11136                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 11137                                  ; whole slew of bits, only one of which is correct.
 11138                                  
 11139                                  ;notbusystatus	equ 10000000b		; not busy
 11140                                  ;nopaperstatus	equ 00100000b		; no more paper
 11141                                  ;prnselected	equ 00010000b		; printer selected
 11142                                  ;ioerrstatus	equ 00001000b		; some kinda error
 11143                                  ;timeoutstatus	equ 00000001b		; time out.
 11144                                  ;
 11145                                  ;noprinter	equ 00110000b		; no printer attached
 11146                                  
 11147                                  ; 18/03/2019 - Retro DOS v4.0
 11148                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 11149                                  
 11150                                  ; ---------------------------------------------------------------------------
 11151                                  
 11152                                  ;************************************************************************
 11153                                  ;*									*
 11154                                  ;*	prn_input - return with no error but zero chars read		*
 11155                                  ;*									*
 11156                                  ;*	enter with cx = number of characters requested			*
 11157                                  ;*									*
 11158                                  ;************************************************************************
 11159                                  
 11160                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 11161 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 11162                                  					; (sub reqpkt.count,cx)
 11163                                  		; 12/12/2022
 11164                                  prn_done:
 11165 0000021C F8                      		clc			; but return with carry	reset for no error
 11166 0000021D C3                      		retn
 11167                                  ; ---------------------------------------------------------------------------
 11168                                  
 11169                                  ;************************************************************************
 11170                                  ;*									*
 11171                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 11172                                  ;*									*
 11173                                  ;*	auxnum has printer number					*
 11174                                  ;*									*
 11175                                  ;************************************************************************
 11176                                  
 11177                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 11178                                  		;jcxz	short prn_done	; no chars to output
 11179 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 11180                                  prn_loop:				
 11181 00000220 BB0200                  		mov	bx, 2		; retry	count
 11182                                  prn_out:				
 11183 00000223 E83600                  		call	prnstat		; get status
 11184 00000226 751D                    		jnz	short TestPrnError
 11185 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 11186 0000022B 30E4                    		xor	ah, ah
 11187 0000022D E82E00                  		call	prnop		; print	to printer
 11188 00000230 7419                    		jz	short prn_con	; no error - continue
 11189 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 11190 00000235 7509                    		jnz	short _prnwf
 11191 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 11192 00000239 C606[0C00]00            		mov	byte [altah], 0
 11193 0000023E EB08                    		jmp	short pmessg
 11194                                  ; ---------------------------------------------------------------------------
 11195                                  
 11196                                  _prnwf:					
 11197 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 11198 00000243 7406                    		jz	short prn_con
 11199                                  TestPrnError:				
 11200 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 11201 00000246 75DB                    		jnz	short prn_out
 11202                                  pmessg:					
 11203 00000248 E98CFE                  		jmp	bc_err_cnt
 11204                                  ; ---------------------------------------------------------------------------
 11205                                  
 11206                                  prn_con:				
 11207 0000024B 47                      		inc	di		; point	to next	char and continue
 11208 0000024C E2D2                    		loop	prn_loop
 11209                                  ;prn_done:				
 11210                                  		; 12/12/2022
 11211                                  prn_done2:
 11212                                  		;clc
 11213                                  		; cf=0
 11214 0000024E C3                      		retn
 11215                                  ; ---------------------------------------------------------------------------
 11216                                  
 11217                                  ;************************************************************************
 11218                                  ;*									*
 11219                                  ;*	prn_stat - device driver entry to return printer status		*
 11220                                  ;*									*
 11221                                  ;************************************************************************
 11222                                  
 11223                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 11224 0000024F E80A00                  		call	prnstat		; device in dx
 11225 00000252 75F4                    		jnz	short pmessg
 11226 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 11227                                  		;jnz	short prn_done
 11228                                  		; 12/12/2022
 11229 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 11230 00000259 E96BFF                  		jmp	z_bus_exit
 11231                                  ; ---------------------------------------------------------------------------
 11232                                  
 11233                                  ;************************************************************************
 11234                                  ;*									*
 11235                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 11236                                  ;*		 printer status. Return meaningful error code		*
 11237                                  ;*									*
 11238                                  ;************************************************************************
 11239                                  
 11240                                  prnstat:				
 11241 0000025C B402                    		mov	ah, 2		; set command for get status
 11242                                  					; PRINTER - GET	STATUS
 11243                                  					; DX = printer port (0-3)
 11244                                  					; Return: AH = status
 11245                                  
 11246                                  ; =============== S U B	R O U T	I N E =======================================
 11247                                  
 11248                                  ;************************************************************************
 11249                                  ;*									*
 11250                                  ;*	prnop - call ROM BIOS printer function in ah			*
 11251                                  ;*		return zero true if no error				*
 11252                                  ;*		return zero false if error, al = error code		*
 11253                                  ;*									*
 11254                                  ;************************************************************************
 11255                                  
 11256                                  prnop:
 11257                                  		; 20/12/2023 - Retro DOS v5.0
 11258                                  		; PCDOS 7.1 IBMBIO.COM
 11259                                  		
 11260                                  		;mov	dx, [auxnum]	; get printer number
 11261                                  		;int	17h
 11262                                  
 11263 0000025E 1E                      		push	ds
 11264 0000025F FF36[2100]              		push	word [auxnum]
 11265 00000263 31D2                    		xor	dx, dx ; 0
 11266 00000265 8EDA                    		mov	ds, dx
 11267 00000267 5A                      		pop	dx
 11268 00000268 9C                      		pushf			; simulate int 17h
 11269 00000269 FA                      		cli
 11270                                  		;call	dword ptr ds:5ghghCh
 11271 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 11272 0000026E 1F                      		pop	ds
 11273                                  
 11274                                  	; This check was added to see if this is a case of no
 11275                                  	; printer being installed. This tests checks to be sure
 11276                                  	; the error is noprinter (30h)
 11277                                  
 11278 0000026F 50                      		push	ax
 11279 00000270 80E430                  		and	ah, 30h
 11280 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 11281 00000276 58                      		pop	ax
 11282 00000277 7506                    		jnz	short NextTest
 11283 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 11284 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 11285                                  
 11286                                  ; examine the status bits to see if an error occurred. unfortunately, several
 11287                                  ; of the bits are set so we have to pick and choose. we must be extremely
 11288                                  ; careful about breaking basic.
 11289                                  
 11290                                  NextTest:				
 11291 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 11292                                  					; i/o error?
 11293 00000282 740A                    		jz	short checknotready ; no, try not ready
 11294                                  
 11295                                  ; at this point, we know we have an error. the converse is not true
 11296                                  
 11297 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 11298                                  					; first, assume	out of paper
 11299 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 11300 00000289 7502                    		jnz	short ret1	; yes, error is	set
 11301 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 11302                                  ret1:					
 11303 0000028D C3                      		retn
 11304                                  ; ---------------------------------------------------------------------------
 11305                                  
 11306                                  checknotready:				
 11307 0000028E B002                    		mov	al, 2		; assume not-ready
 11308 00000290 F6C401                  		test	ah, 1
 11309 00000293 C3                      		retn
 11310                                  
 11311                                  ; ---------------------------------------------------------------------------
 11312                                  
 11313                                  ;************************************************************************
 11314                                  ;*									*
 11315                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 11316                                  ;*		     this entry point should never block waiting for	*
 11317                                  ;*		     device to come ready.				*
 11318                                  ;*									*
 11319                                  ;*	inputs:	cx = count, es:di -> buffer				*
 11320                                  ;*	outputs: set the number of bytes transferred in the		*
 11321                                  ;*		 device driver request packet				*
 11322                                  ;*									*
 11323                                  ;************************************************************************
 11324                                  
 11325                                  		; 19/10/2022
 11326                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 11327 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 11328                                  prn_tilbloop:				
 11329 00000296 51                      		push	cx
 11330 00000297 53                      		push	bx
 11331 00000298 30FF                    		xor	bh, bh
 11332 0000029A 8A1E[8004]              		mov	bl, [printdev]
 11333 0000029E D1E3                    		shl	bx, 1
 11334                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 11335 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11336 000002A4 5B                      		pop	bx
 11337                                  prn_getstat:				
 11338 000002A5 E8B4FF                  		call	prnstat		; get status
 11339 000002A8 7514                    		jnz	short prn_bperr	; error
 11340 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 11341 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 11342 000002AF 59                      		pop	cx		; get original count
 11343 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 11344 000002B2 26                      		es
 11345 000002B3 AC                      		lodsb
 11346                                  		;lods	byte ptr es:[si] ; es
 11347                                  					; lodsb
 11348 000002B4 30E4                    		xor	ah, ah
 11349 000002B6 E8A5FF                  		call	prnop
 11350 000002B9 7504                    		jnz	short prn_berr	; error
 11351 000002BB E2D9                    		loop	prn_tilbloop
 11352                                  		; 12/12/2022
 11353                                  		; cf=0 (prnop)
 11354                                  		;clc			; normal no-error return
 11355 000002BD C3                      		retn			;   from device driver
 11356                                  
 11357                                  ; ---------------------------------------------------------------------------
 11358                                  
 11359                                  prn_bperr:				
 11360 000002BE 59                      		pop	cx		; restore transfer count from stack
 11361                                  prn_berr:				
 11362 000002BF E915FE                  		jmp	bc_err_cnt
 11363                                  ; ---------------------------------------------------------------------------
 11364                                  
 11365                                  ; 15/10/2022
 11366                                  
 11367                                  ;************************************************************************
 11368                                  ;*									*
 11369                                  ;*	prn_genioctl - get/set printer retry count			*
 11370                                  ;*									*
 11371                                  ;************************************************************************
 11372                                  
 11373                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 11374                                  ; 11/01/2019
 11375                                  
 11376                                  ;********************************;*
 11377                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 11378                                  ;********************************;*
 11379                                  
 11380                                  ;;RAWIO SUB-FUNCTIONS
 11381                                  ;;get_retry_count equ 65h
 11382                                  ;;set_retry_count equ 45h
 11383                                  
 11384                                  ;;struc A_RETRYCOUNT
 11385                                  ;;.rc_count: resw 1
 11386                                  ;;endstruc
 11387                                  
 11388                                  ;ioc_pc equ 5
 11389                                  
 11390                                  ; ---------------------------------------------------------------------------
 11391                                  
 11392                                  		; 19/10/2022
 11393                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 11394 000002C2 C43E[1200]              		les	di, [ptrsav]
 11395 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11396                                  					; ioc_pc
 11397 000002CB 7403                    		jz	short prnfunc_ok
 11398                                  
 11399                                  prnfuncerr:				
 11400 000002CD E905FE                  		jmp	bc_cmderr
 11401                                  ; ---------------------------------------------------------------------------
 11402                                  
 11403                                  prnfunc_ok:				
 11404 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11405 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 11406 000002D8 30FF                    		xor	bh, bh
 11407                                  		;mov	bl, ds:printdev	; get index into retry counts
 11408 000002DA 8A1E[8004]              		mov	bl, [printdev]
 11409 000002DE D1E3                    		shl	bx, 1
 11410                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 11411 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11412 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 11413 000002E6 7407                    		jz	short prngetcount
 11414 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 11415 000002EA 75E1                    		jnz	short prnfuncerr
 11416 000002EC 268B0D                  		mov	cx, [es:di]
 11417                                  prngetcount:				
 11418                                  		;mov	ds:wait_count[bx], cx
 11419 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 11420 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 11421                                  					; return current retry count
 11422                                  		; 12/12/2022
 11423                                  		; cf=0
 11424                                  		;clc
 11425 000002F6 C3                      		retn
 11426                                  ; ---------------------------------------------------------------------------
 11427                                  
 11428                                  ;************************************************************************
 11429                                  ;*									*
 11430                                  ;*  prn_ioctl_query							*
 11431                                  ;*									*
 11432                                  ;*  Added for 5.00							*
 11433                                  ;************************************************************************
 11434                                  
 11435                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 11436 000002F7 C43E[1200]              		les	di, [ptrsav]
 11437 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11438                                  					; ioc_pc
 11439 00000300 750D                    		jnz	short prn_query_err
 11440 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11441 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 11442 00000308 7404                    		jz	short IOCtlSupported
 11443 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 11444 0000030C 7501                    		jnz	short prn_query_err
 11445                                  IOCtlSupported:	
 11446                                  		; 12/12/2022
 11447                                  		; cf=0		
 11448                                  		;clc
 11449 0000030E C3                      		retn
 11450                                  ; ---------------------------------------------------------------------------
 11451                                  
 11452                                  prn_query_err:
 11453                                  		; 12/12/2022				
 11454                                  		;stc
 11455 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 11456                                  ; ---------------------------------------------------------------------------
 11457                                  
 11458                                  ;************************************************************************
 11459                                  ;*									*
 11460                                  ;*	aux port driver code -- "aux" == "com1"				*
 11461                                  ;*									*
 11462                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 11463                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 11464                                  ;*									*
 11465                                  ;************************************************************************
 11466                                  
 11467                                  ;	values in ah, requesting function of int 14h in rom bios
 11468                                  
 11469                                  ;auxfunc_send	 equ	1	;transmit
 11470                                  ;auxfunc_receive equ	2	;read
 11471                                  ;auxfunc_status	 equ	3	;request status
 11472                                  
 11473                                  ;	error flags, reported by int 14h, reported in ah:
 11474                                  
 11475                                  ;flag_data_ready equ	01h	;data ready
 11476                                  ;flag_overrun	 equ	02h	;overrun error
 11477                                  ;flag_parity	 equ	04h	;parity error
 11478                                  ;flag_frame	 equ	08h	;framing error
 11479                                  ;flag_break	 equ	10h	;break detect
 11480                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 11481                                  ;flag_timeout	 equ	80h	;timeout
 11482                                  
 11483                                  ;	these flags reported in al:
 11484                                  
 11485                                  ;flag_cts	 equ	10h	;clear to send
 11486                                  ;flag_dsr	 equ	20h	;data set ready
 11487                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 11488                                  
 11489                                  ; ---------------------------------------------------------------------------
 11490                                  
 11491                                  ;************************************************************************
 11492                                  ;*									*
 11493                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 11494                                  ;*		   at es:di						*
 11495                                  ;*									*
 11496                                  ;************************************************************************
 11497                                  
 11498                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 11499                                  		;jcxz	short exvec2
 11500 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 11501 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 11502 00000317 30C0                    		xor	al, al
 11503 00000319 8607                    		xchg	al, [bx]
 11504 0000031B 08C0                    		or	al, al
 11505 0000031D 7503                    		jnz	short aux2
 11506                                  aux1:					
 11507 0000031F E80500                  		call	auxin		; get character	from port
 11508                                  					; won't return if error
 11509                                  aux2:					
 11510 00000322 AA                      		stosb
 11511 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 11512                                  exvec2:					
 11513 00000325 F8                      		clc			; all done, successful exit
 11514                                  auxin_retn:	; 18/12/2022
 11515 00000326 C3                      		retn
 11516                                  ; ---------------------------------------------------------------------------
 11517                                  
 11518                                  ;************************************************************************
 11519                                  ;*									*
 11520                                  ;*	auxin - call rom bios to read character from aux port		*
 11521                                  ;*		if error occurs, map the error and return one		*
 11522                                  ;*		level up to device driver exit code, setting		*
 11523                                  ;*		the number of bytes transferred appropriately		*
 11524                                  ;*									*
 11525                                  ;************************************************************************
 11526                                  
 11527                                  auxin:					
 11528 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 11529 00000329 E83A00                  		call	auxop
 11530 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 11531                                  		;jnz	short arbad	; skip if any error bits set
 11532                                  		;retn
 11533                                  		; 25/06/2023 (BugFix)
 11534 0000032F 74F5                    		jz	short auxin_retn
 11535                                  ; ---------------------------------------------------------------------------
 11536                                  
 11537                                  arbad:					
 11538 00000331 58                      		pop	ax		; remove return	address	(near call)
 11539                                  		;xor	al, al
 11540                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 11541                                  		; 11/08/2023
 11542 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 11543 00000334 E9A0FD                  		jmp	bc_err_cnt
 11544                                  
 11545                                  ; ---------------------------------------------------------------------------
 11546                                  
 11547                                  ;************************************************************************
 11548                                  ;*									*
 11549                                  ;*	aux_rdnd - non-destructive aux port read			*
 11550                                  ;*									*
 11551                                  ;************************************************************************
 11552                                  
 11553                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 11554 00000337 E85D00                  		call	getbx
 11555 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 11556 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 11557 0000033E 7511                    		jnz	short auxdrx	; then return character
 11558 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 11559 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 11560 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 11561 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 11562 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 11563 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 11564 0000034F 8807                    		mov	[bx], al
 11565                                  auxdrx:					
 11566 00000351 E99EFE                  		jmp	rdexit		; return busy status
 11567                                  ; ---------------------------------------------------------------------------
 11568                                  
 11569                                  auxbus:					
 11570 00000354 E970FE                  		jmp	z_bus_exit
 11571                                  ; ---------------------------------------------------------------------------
 11572                                  
 11573                                  ;************************************************************************
 11574                                  ;*									*
 11575                                  ;*	aux_wrst - return aux port write status				*
 11576                                  ;*									*
 11577                                  ;************************************************************************
 11578                                  
 11579                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 11580 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 11581 0000035A A820                    		test	al, 20h		; test data set	ready
 11582 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 11583 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 11584 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 11585                                  		; 12/12/2022
 11586                                  		; cf=0	; (test instruction resets cf)
 11587                                  		;clc
 11588 00000363 C3                      		retn
 11589                                  ; ---------------------------------------------------------------------------
 11590                                  
 11591                                  ;************************************************************************
 11592                                  ;*									*
 11593                                  ;*	auxstat - call rom bios to determine aux port status		*
 11594                                  ;*									*
 11595                                  ;*	exit:	ax = status						*
 11596                                  ;*		dx = [auxnum]						*
 11597                                  ;*									*
 11598                                  ;************************************************************************
 11599                                  
 11600                                  auxstat:				
 11601 00000364 B403                    		mov	ah, 3		; auxfunc_status
 11602                                  
 11603                                  		; fall into auxop
 11604                                  
 11605                                  ; =============== S U B	R O U T	I N E =======================================
 11606                                  
 11607                                  ;************************************************************************
 11608                                  ;*									*
 11609                                  ;*	auxop - perform rom-biox aux port interrupt			*
 11610                                  ;*									*
 11611                                  ;*	entry:	ah = int 14h function number				*
 11612                                  ;*	exit:	ax = results						*
 11613                                  ;*		dx = [auxnum]						*
 11614                                  ;*									*
 11615                                  ;************************************************************************
 11616                                  
 11617                                  auxop:		; proc near
 11618                                  		; 20/12/2023 - Retro DOS v5.0
 11619                                  		;mov	dx, [auxnum]	; ah=function code
 11620                                  		;			; 0=init, 1=send, 2=receive, 3=status
 11621                                  		;			; get port number
 11622                                  		;
 11623                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 11624                                  		;			; DX = port number (0-3)
 11625                                  		;			; Return: AX = port status code
 11626                                  		; (PCDOS 7.1 IBMBIO.COM)
 11627 00000366 1E                      		push	ds
 11628 00000367 FF36[2100]              		push	word [auxnum]
 11629 0000036B 31D2                    		xor	dx, dx ; 0
 11630 0000036D 8EDA                    		mov	ds, dx
 11631 0000036F 5A                      		pop	dx
 11632 00000370 9C                      		pushf			; simulate INT 14h
 11633 00000371 FA                      		cli
 11634                                  		;call	dword ptr ds:50h
 11635 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 11636 00000376 1F                      		pop	ds
 11637 00000377 C3                      		retn
 11638                                  
 11639                                  ; ---------------------------------------------------------------------------
 11640                                  
 11641                                  ;************************************************************************
 11642                                  ;*									*
 11643                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 11644                                  ;*		   auxbuf [auxnum] to zero				*
 11645                                  ;*									*
 11646                                  ;*	cas - shouldn't this code call the rom bios input function	*
 11647                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 11648                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 11649                                  ;*	      which is providing interrupt-buffering of aux port?	*
 11650                                  ;*									*
 11651                                  ;************************************************************************
 11652                                  
 11653                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 11654 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 11655 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 11656                                  					; zero out buffer
 11657                                  		;clc			; all done, successful return
 11658                                  		; 12/12/2022
 11659                                  		; cf=0 ('add' instruction in 'getbx')
 11660 0000037E C3                      		retn
 11661                                  ; ---------------------------------------------------------------------------
 11662                                  
 11663                                  ;************************************************************************
 11664                                  ;*									*
 11665                                  ;*	aux_writ - write to aux device					*
 11666                                  ;*									*
 11667                                  ;************************************************************************
 11668                                  
 11669                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 11670                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 11671 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 11672                                  aux_loop:				
 11673 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 11674                                  					; move di pointer to next character
 11675 00000384 47                      		inc	di
 11676 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 11677 00000387 E8DCFF                  		call	auxop		; send character over aux port
 11678 0000038A F6C480                  		test	ah, 80h		; check	for error
 11679 0000038D 7405                    		jz	short awok	; then no error
 11680 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 11681 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 11682                                  ; ---------------------------------------------------------------------------
 11683                                  
 11684                                  awok:					
 11685 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 11686                                  					; still	more character to print
 11687                                  		;clc			; all done, successful return
 11688                                  		; 12/12/2022
 11689                                  		; cf=0 (test instruction above)	
 11690 00000396 C3                      		retn
 11691                                  
 11692                                  ; =============== S U B	R O U T	I N E =======================================
 11693                                  
 11694                                  ;************************************************************************
 11695                                  ;*									*
 11696                                  ;*	getbx - return bx -> single byte input buffer for		*
 11697                                  ;*		selected aux port ([auxnum])				*
 11698                                  ;*									*
 11699                                  ;************************************************************************
 11700                                  
 11701                                  getbx:	
 11702 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 11703                                  					; for selected aux port	([auxnum])
 11704                                  		;add	bx, offset auxbuf
 11705 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 11706                                  		; 12/12/2022
 11707                                  		; cf=0 (if [auxnum] is valid number) 
 11708 0000039F C3                      		retn
 11709                                  
 11710                                  ; ---------------------------------------------------------------------------
 11711                                  
 11712                                  ; 15/10/2022
 11713                                  
 11714                                  ;----------------------------------------------------------------
 11715                                  ;								:
 11716                                  ;		    clock device driver 			:
 11717                                  ;								:
 11718                                  ;								:
 11719                                  ;   this file contains the clock device driver. 		:
 11720                                  ;								:
 11721                                  ;   the routines in this files are:				:
 11722                                  ;								:
 11723                                  ;	routine 		function			:
 11724                                  ;	------- 		--------			:
 11725                                  ;	tim_writ		set the current time		:
 11726                                  ;	tim_read		read the current time		:
 11727                                  ;	time_to_ticks		convert time to corresponding	:
 11728                                  ;				  number of clock ticks 	:
 11729                                  ;								:
 11730                                  ; the clock ticks at the rate of:				:
 11731                                  ;								:
 11732                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 11733                                  ; see each routine for information on the use.			:
 11734                                  ;								:
 11735                                  ;----------------------------------------------------------------
 11736                                  
 11737                                  ; convert time to ticks
 11738                                  ; input : time in cx and dx
 11739                                  ; ticks returned in cx:dx
 11740                                  
 11741                                  ;19/07/2019
 11742                                  ;09/03/2019
 11743                                  
 11744                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 11745                                  
 11746                                  ; first convert from hour,min,sec,hund. to
 11747                                  ; total number of 100th of seconds
 11748                                  
 11749 000003A0 B03C                    		mov	al, 60
 11750 000003A2 F6E5                    		mul	ch		; hours	to minutes
 11751 000003A4 B500                    		mov	ch, 0
 11752 000003A6 01C8                    		add	ax, cx		; total	minutes
 11753 000003A8 B97017                  		mov	cx, 6000	; 60*100
 11754 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 11755 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 11756 000003AF 89C1                    		mov	cx, ax
 11757 000003B1 B064                    		mov	al, 100
 11758 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 11759 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 11760 000003B7 83D200                  		adc	dx, 0		; ripple carry
 11761 000003BA B700                    		mov	bh, 0
 11762 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 11763 000003BE 83D200                  		adc	dx, 0
 11764                                  
 11765                                  	; dx:cx is time in 1/100 sec
 11766                                  
 11767 000003C1 92                      		xchg	ax, dx
 11768 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 11769 000003C3 BB0BE9                  		mov	bx, 59659
 11770 000003C6 F7E3                    		mul	bx		; multiply low half
 11771 000003C8 87CA                    		xchg	dx, cx
 11772 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 11773 000003CB F7E3                    		mul	bx		; multiply high	half
 11774 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 11775 000003CF 83D200                  		adc	dx, 0
 11776 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 11777 000003D3 BB0500                  		mov	bx, 5
 11778 000003D6 F6F3                    		div	bl		; divide high half by 5
 11779 000003D8 88C1                    		mov	cl, al
 11780 000003DA B500                    		mov	ch, 0
 11781 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 11782 000003DE 98                      		cbw
 11783 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 11784 000003E0 F7F3                    		div	bx		; divide low half by 5
 11785 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 11786 000003E4 CB                      		retf			; far return
 11787                                  
 11788                                  ; ---------------------------------------------------------------------------
 11789                                  
 11790                                  ; 17/10/2022
 11791                                  ; 15/10/2022
 11792                                  
 11793                                  ;--------------------------------------------------------------------
 11794                                  ;
 11795                                  ; tim_writ sets the current time
 11796                                  ;
 11797                                  ; on entry es:[di] has the current time:
 11798                                  ;
 11799                                  ;	number of days since 1-1-80	(word)
 11800                                  ;	minutes (0-59)			(byte)
 11801                                  ;	hours (0-23)			(byte)
 11802                                  ;	hundredths of seconds (0-99)	(byte)
 11803                                  ;	seconds (0-59)			(byte)
 11804                                  ;
 11805                                  ; each number has been checked for the correct range.
 11806                                  ;
 11807                                  ;	NOTE: Any changes in this routine probably require corresponding
 11808                                  ;	changes in the version that is built with the power manager driver.
 11809                                  ;	See ptime.asm.
 11810                                  ;
 11811                                  ;--------------------------------------------------------------------
 11812                                  
 11813                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11814                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 11815                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 11816 000003E5 268B05                  		mov	ax, [es:di]
 11817 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 11818                                  					; end to avoid tick windows.
 11819 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11820                                  		;cmp	ds:havecmosclock, 0
 11821 000003EE 7423                    		jz	short no_cmos_1
 11822 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 11823                                  					; get binary hours
 11824                                  					; convert to bcd
 11825                                  		;call	far [bintobcd]
 11826                                  		;;call	ds:bintobcd	; call far [bintobcd]
 11827                                  		; 08/08/2023
 11828 000003F4 E8E800                  		call	bintobcd
 11829 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 11830 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 11831                                  		;call	far [bintobcd]
 11832                                  		;;call	ds:bintobcd	; convert to bcd
 11833 000003FD E8DF00                  		call	bintobcd
 11834 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 11835 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 11836                                  		;call	far [bintobcd]
 11837                                  		;;call	ds:bintobcd
 11838 00000406 E8D600                  		call	bintobcd
 11839                                  
 11840 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 11841 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 11842 0000040D FA                      		cli
 11843 0000040E B403                    		mov	ah, 3
 11844 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11845                                  					; CH = hours in	BCD, CL	= minutes in BCD
 11846                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 11847                                  					; Return: CMOS clock set
 11848 00000412 FB                      		sti
 11849                                  no_cmos_1:				
 11850 00000413 268B4D02                		mov	cx, [es:di+2]
 11851 00000417 268B5504                		mov	dx, [es:di+4]
 11852                                  		; 17/10/2022
 11853 0000041B FF1E[0606]              		call	far [ttticks]
 11854                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 11855                                  					; convert time to ticks
 11856                                  					; cx:dx	now has	time in	ticks
 11857 0000041F FA                      		cli			; turn off timer
 11858 00000420 B401                    		mov	ah, 1
 11859 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 11860                                  					; CX:DX	= clock	count
 11861                                  					; Return: time of day set
 11862                                  		;pop	ds:daycnt
 11863 00000424 8F06[8904]              		pop	word [daycnt]
 11864 00000428 FB                      		sti
 11865                                  		;cmp	ds:havecmosclock, 0
 11866 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11867 0000042E 7409                    		jz	short no_cmos_2
 11868                                  
 11869                                  		; 08/08/2023
 11870                                  		;call	far [daycnttoday]
 11871                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 11872                                  					; convert to bcd format
 11873 00000430 E80700                  		call	daycnttoday
 11874                                  
 11875 00000433 FA                      		cli
 11876 00000434 B405                    		mov	ah, 5
 11877 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11878                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 11879                                  					; CH = century (19h or 20h)
 11880                                  					; Return: CMOS clock set
 11881 00000438 FB                      		sti
 11882                                  no_cmos_2:
 11883                                  		; 12/12/2022
 11884                                  		; cf=0
 11885                                  		;clc
 11886 00000439 C3                      		retn
 11887                                  
 11888                                  ; ---------------------------------------------------------------------------
 11889                                  
 11890                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11891                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 11892                                  %if 1 
 11893                                  
 11894                                  ; CMOS Clock setting support routines used by MSCLOCK.
 11895                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 11896                                  
 11897                                  daycnttoday:	; proc near
 11898                                  
 11899                                  ; entry: [daycnt] = number of days since 1-1-80
 11900                                  ;
 11901                                  ; return: ch - century in bcd
 11902                                  ;	  cl - year in bcd
 11903                                  ;	  dh - month in bcd
 11904                                  ;	  dl - day in bcd
 11905                                  
 11906                                  		; 20/12/2023 - Retro DOS v5.0
 11907                                  
 11908                                  		; 08/08/2023 (ds:) (near proc)
 11909                                  		; 16/10/2022 (cs:) (far proc)		
 11910 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 11911 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 11912                                  					; # days from 1-1-1980 to 1-1-2000
 11913 00000444 7308                    		jnb	short century20
 11914                                  		;mov	byte [base_century], 19
 11915                                  		;mov	byte [base_year], 80
 11916                                  		; 08/08/2023
 11917 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 11918 0000044C EB0C                    		jmp	short years
 11919                                  ; ----------------------------------------------------------------------------
 11920                                  		
 11921                                  century20:				
 11922                                  		;mov	byte [base_century], 20
 11923                                  		;mov	byte [base_year], 0
 11924                                  		; 08/08/2023
 11925 0000044E C706[8D04]1400          		mov	word [base_century], 20
 11926 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 11927                                  					; adjust daycnt
 11928                                  years:					
 11929 0000045A 31D2                    		xor	dx, dx
 11930 0000045C A1[8904]                		mov	ax, [daycnt]
 11931 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 11932                                  					; # of days in a Leap year block
 11933 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 11934 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 11935 00000468 B304                    		mov	bl, 4
 11936 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 11937 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 11938 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 11939                                  		; 08/08/2023
 11940 00000474 BB6E01                  		mov	bx, 366
 11941 00000477 B90300                  		mov	cx, 3
 11942                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 11943 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 11944 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 11945 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 11946                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 11947 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 11948                                  		;mov	cx, 3		; And next three years are normal
 11949                                  		; 08/08/2023
 11950 00000488 4B                      		dec	bx ; 365
 11951                                  regularyear:	; 20/12/2023
 11952                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 11953 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 11954 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 11955 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 11956                                  		;sub	word [daycnt], 365 ; }
 11957 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 11958 00000497 E2F0                    		loop	regularyear	; }
 11959                                  					;
 11960                                  					; should never fall through loop
 11961                                  leapyear:	
 11962 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 11963                                  		;mov	byte [month_tab+1], 29 ; leap year.
 11964                                  					; change month table.
 11965                                  yeardone:				
 11966 0000049E 31DB                    		xor	bx, bx
 11967 000004A0 31D2                    		xor	dx, dx
 11968 000004A2 A1[8904]                		mov	ax, [daycnt]
 11969                                  		;mov	si, offset month_tab
 11970 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 11971                                  		;mov	cx, 12
 11972                                  		; 08/08/2023
 11973 000004A8 B10C                    		mov	cl, 12
 11974                                  months:					
 11975 000004AA FEC3                    		inc	bl
 11976                                  		; 08/08/2023
 11977 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 11978 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 11979                                  					; dh=0
 11980 000004B0 7605                    		jbe	short month_done
 11981 000004B2 46                      		inc	si		; next month
 11982 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 11983 000004B5 E2F3                    		loop	months		;
 11984                                  					; should never fall through loop
 11985                                  month_done:	
 11986 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 11987                                  		;mov	byte [month_tab+1], 28
 11988                                  					; restore month table value
 11989 000004BC 88DA                    		mov	dl, bl
 11990 000004BE 8A36[8E04]              		mov	dh, [base_year]
 11991 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 11992 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 11993                                  					; dl = bcd day,	al = month
 11994 000004C9 86C2                    		xchg	dl, al
 11995 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 11996 000004CE 86C6                    		xchg	dh, al
 11997 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 11998 000004D3 86C1                    		xchg	cl, al
 11999 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 12000 000004D8 88C5                    		mov	ch, al
 12001 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 12002 000004DE C3                      		retn
 12003                                  
 12004                                  ;----------------------------------------------------------------------------
 12005                                  
 12006                                  bintobcd:	; proc near		; real time clock support
 12007                                  
 12008                                  ;convert a binary input in al (less than 63h or 99 decimal)
 12009                                  ;into a bcd value in al. ah destroyed.	
 12010                                  		
 12011 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 12012 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 12013                                  					; AL = (AH*10H)+AL, AH = 0
 12014 000004E3 C3                      		retn
 12015                                  %endif
 12016                                  
 12017                                  ;----------------------------------------------------------------------------
 12018                                  
 12019                                  ; 15/10/2022
 12020                                  
 12021                                  ;----------------------------------------------------------------------------
 12022                                  ; gettime reads date and time
 12023                                  ; and returns the following information:
 12024                                  ;
 12025                                  ;	es:[di]  =count of days since 1-1-80
 12026                                  ;	es:[di+2]=hours
 12027                                  ;	es:[di+3]=minutes
 12028                                  ;	es:[di+4]=seconds
 12029                                  ;	es:[di+5]=hundredths of seconds
 12030                                  ;
 12031                                  ;	NOTE: Any changes in this routine probably require corresponding
 12032                                  ;	changes in the version that is built with the power manager driver.
 12033                                  ;	See ptime.asm.
 12034                                  ;----------------------------------------------------------------------------
 12035                                  
 12036                                  tim_read:				; 2C7h:435h = 70h:29A5h
 12037 000004E4 E84A00                  		call	GetTickCnt
 12038 000004E7 8B36[8904]              		mov	si, [daycnt]
 12039                                  
 12040                                  ; we now need to convert the time in tick to the time in 100th of
 12041                                  ; seconds. the relation between tick and seconds is:
 12042                                  ;
 12043                                  ;		 65,536 seconds
 12044                                  ;	       ----------------
 12045                                  ;		1,193,180 tick
 12046                                  ;
 12047                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 12048                                  ;
 12049                                  ;	ticks from clock  * 65,536 * 100
 12050                                  ;      --------------------------------- = time in 100th of seconds
 12051                                  ;		1,193,180
 12052                                  ;
 12053                                  ; fortunately this formula simplifies to:
 12054                                  ;
 12055                                  ;	ticks from clock * 5 * 65,536
 12056                                  ;      --------------------------------- = time in 100th of seconds
 12057                                  ;		59,659
 12058                                  ;
 12059                                  ; the calculation is done by first multipling tick by 5. next we divide by
 12060                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 12061                                  ; my 16 bits to the left.
 12062                                  ;
 12063                                  ; start with ticks in cx:dx
 12064                                  ; multiply by 5
 12065                                  
 12066 000004EB 89C8                    		mov	ax, cx
 12067 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 12068                                  					; multiply by 5
 12069 000004EF D1E2                    		shl	dx, 1
 12070 000004F1 D1D1                    		rcl	cx, 1		; times	2
 12071 000004F3 D1E2                    		shl	dx, 1
 12072 000004F5 D1D1                    		rcl	cx, 1		; times	4
 12073 000004F7 01DA                    		add	dx, bx
 12074 000004F9 11C8                    		adc	ax, cx		; times	5
 12075 000004FB 92                      		xchg	ax, dx
 12076                                  
 12077                                  ; now have ticks * 5 in	dx:ax
 12078                                  ; we now need to multiply by 65536 and divide by 59659 d.
 12079                                  
 12080 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 12081 000004FF F7F1                    		div	cx		; dx now has remainder
 12082                                  					; ax has high word of final quotient
 12083                                  
 12084                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12085                                  		;mov	bx, ax		; put high word	in safe	place
 12086 00000501 93                      		xchg	bx, ax
 12087 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 12088 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 12089                                  
 12090                                  ; rounding based on the	remainder may be added here
 12091                                  ; the result in	bx:ax is time in 1/100 second.
 12092                                  
 12093 00000506 89DA                    		mov	dx, bx		
 12094 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 12095                                  
 12096                                  ; division by 200 is necessary to ensure no overflow--max result
 12097                                  ; is number of seconds in a day/2 = 43200.
 12098                                  
 12099 0000050B F7F1                    		div	cx
 12100 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 12101 00000510 7203                    		jb	short noadj
 12102 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 12103                                  noadj:					
 12104 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 12105 00000516 88D3                    		mov	bl, dl		; save 1/100's
 12106                                  
 12107                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 12108                                  ; by two, shifting a one in if the remainder had exceeded 100.
 12109                                  
 12110 00000518 D1D0                    		rcl	ax, 1		
 12111 0000051A B200                    		mov	dl, 0
 12112 0000051C D1D2                    		rcl	dx, 1
 12113                                  		;mov	cx, 60		; divide out seconds
 12114                                  		; 20/12/2023
 12115 0000051E B13C                    		mov	cl, 60
 12116 00000520 F7F1                    		div	cx
 12117 00000522 88D7                    		mov	bh, dl		; save the seconds
 12118 00000524 F6F1                    		div	cl		; break	into hours and minutes
 12119 00000526 86E0                    		xchg	al, ah
 12120                                  
 12121                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 12122                                  
 12123                                  		; 08/08/2023
 12124                                  		;push	ax
 12125                                  		;mov	ax, si		; daycnt
 12126 00000528 96                      		xchg	ax, si
 12127 00000529 AB                      		stosw
 12128                                  		;pop	ax
 12129 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 12130 0000052B AB                      		stosw
 12131 0000052C 89D8                    		mov	ax, bx
 12132 0000052E AB                      		stosw
 12133 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 12134                                  					;   [es:di+2] = hours
 12135                                  					;   [es:di+3] = minutes
 12136                                  					;   [es:di+4] = seconds
 12137                                  					;   [es:di+5] = hundredths of seconds
 12138 00000530 C3                      		retn
 12139                                  
 12140                                  ; =============== S U B	R O U T	I N E =======================================
 12141                                  
 12142                                  ; 15/10/2022
 12143                                  
 12144                                  ;----------------------------------------------------------------------------
 12145                                  ;
 12146                                  ; procedure : GetTickCnt
 12147                                  ;
 12148                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 12149                                  ;		of rollover [except when power management driver is in use]. 
 12150                                  ;		Uses the following logic for updating Daycnt
 12151                                  ;
 12152                                  ;		if ( rollover ) {
 12153                                  ;			if ( t_switch )
 12154                                  ;				daycnt++ ;
 12155                                  ;			else
 12156                                  ;				daycnt += rollover ;
 12157                                  ;		}
 12158                                  ;
 12159                                  ; USES : AX
 12160                                  ;
 12161                                  ; RETURNS : CX:DX - tick count
 12162                                  ; MODIFIES : daycnt
 12163                                  ;
 12164                                  ;----------------------------------------------------------------------------
 12165                                  
 12166                                  		; 17/10/2022
 12167                                  GetTickCnt:
 12168 00000531 30E4                    		xor	ah, ah
 12169 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 12170                                  					; Return: CX:DX	= clock	count
 12171                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 12172                                  					; midnight
 12173                                  					; Otherwise, AL	> 0
 12174                                  		; 20/12/2023
 12175 00000535 30E4                    		xor	ah, ah
 12176 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 12177                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 12178 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 12179                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 12180                                  					; and not flag
 12181 0000053D 0106[8904]              		add	[daycnt], ax
 12182 00000541 C3                      		retn
 12183                                  ; ---------------------------------------------------------------------------
 12184                                  
 12185                                  inc_case:
 12186 00000542 08C0                    		or	al, al
 12187 00000544 7404                    		jz	short no_rollover
 12188 00000546 FF06[8904]              		inc	word [daycnt]
 12189                                  no_rollover:
 12190 0000054A C3                      		retn
 12191                                  
 12192                                  ; ---------------------------------------------------------------------------
 12193                                  ; ---------------------------------------------------------------------------
 12194                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12195                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 12196                                  
 12197                                  %if 1
 12198                                  
 12199 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 12200 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 12201 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 12202 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 12202 0000056C 2020               
 12203                                  
 12204                                  %endif
 12205                                  
 12206                                  ;----------------------------------------------------------------------------
 12207                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 12208                                  ;----------------------------------------------------------------------------
 12209                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12210                                  ; 09/03/2019 - Retro DOS v4.0
 12211                                  
 12212                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 12213                                  ; 26/05/2018 - Retro DOS v3.0
 12214                                  ; 23/03/2018 - Retro DOS v2.0
 12215                                  
 12216                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 12217                                  
 12218                                  ;struc BPB_TYPE
 12219                                  ;.SECSIZE:	resw 1
 12220                                  ;.SECALL:	resb 1
 12221                                  ;.RESNUM:	resw 1
 12222                                  ;.FATNUM:	resb 1
 12223                                  ;.DIRNUM:	resw 1
 12224                                  ;.SECNUM:	resw 1
 12225                                  ;.FATID:	resb 1
 12226                                  ;.FATSIZE:	resw 1
 12227                                  ;.SLIM:		resw 1
 12228                                  ;.HLIM:		resw 1
 12229                                  ;.HIDDEN:	resw 1
 12230                                  ;.size:
 12231                                  ;endstruc
 12232                                  
 12233                                  ;-----------------------------------------------------------------
 12234                                  ;	disk interface routines
 12235                                  ;-----------------------------------------------------------------
 12236                                  
 12237                                  ; device attribute bits:
 12238                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 12239                                  
 12240                                  ;MAXERR		equ	5
 12241                                  ;MAX_HD_FMT_ERR	equ	2
 12242                                  
 12243                                  ;LSTDRV	equ 504h
 12244                                  
 12245                                  ; some floppies do not have changeline. as a result, media-check would
 12246                                  ; normally return i-don't-know, the dos would continually reread the fat and
 12247                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 12248                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 12249                                  ; the time of the last successful disk operation and compare it with the current
 12250                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 12251                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 12252                                  ; since we cannot trust the timer to be always available, we record the number 
 12253                                  ; of media checks that have occurred when no apparent time has elapsed. while
 12254                                  ; this number is < a given threshold, we say no change. when it exceeds that
 12255                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 12256                                  ; the time of last successful access, if we see that time has passed too,
 12257                                  ; we reset the counter.
 12258                                  
 12259                                  accessmax	equ	5
 12260                                  
 12261                                  ; due to various bogosities, we need to continually adjust what the head
 12262                                  ; settle time is.  the following algorithm is used:
 12263                                  ;
 12264                                  ;   get the current head settle value.
 12265                                  ;   if it is 0, then
 12266                                  ;	set slow = 15
 12267                                  ;   else
 12268                                  ;	set slow = value
 12269                                  ;   ...
 12270                                  ;*********************************************
 12271                                  ;************ old algorithm ******************
 12272                                  ;*   if we are seeking and writing then
 12273                                  ;*	 use slow
 12274                                  ;*   else
 12275                                  ;*	 use fast
 12276                                  ;*********************************************
 12277                                  ;*********** ibm's requested logic ***********
 12278                                  ;   if we are seeking and writing and not on an at then
 12279                                  ;	use slow
 12280                                  ;   else
 12281                                  ;	use fast
 12282                                  ;   ...
 12283                                  ;   restore current head settle value
 12284                                  ;
 12285                                  ;
 12286                                  ;---------------------------------------
 12287                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 12288                                  					; it on after handling config.sys file as a
 12289                                  					; default value, if multrk_flag = multrk_off1.
 12290                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 12291                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 12292                                  
 12293                                  ; close data segment, open Bios_Code segment
 12294                                  
 12295                                  ; 15/10/2022
 12296                                  
 12297                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 12298                                  
 12299                                  ;-----------------------------------------------------------------
 12300                                  ;	command jump table
 12301                                  ;-----------------------------------------------------------------
 12302                                  
 12303 0000056E 00                      		db 0
 12304                                  
 12305                                  ; 11/12/2022
 12306                                  %if 0
 12307                                  
 12308                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 12309                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 12310                                  		dw 1742h		; dsk_init
 12311                                  		dw 4EBh			; media_chk
 12312                                  		dw 592h			; get_bpb
 12313                                  		dw 0D5h			; bc_cmderr
 12314                                  		dw 857h			; dsk_read
 12315                                  		dw 83Dh			; x_bus_exit
 12316                                  		dw 558h			; ret_carry_clear
 12317                                  		dw 558h			; ret_carry_clear
 12318                                  		dw 849h			; dsk_writ
 12319                                  		dw 841h			; dsk_writv
 12320                                  		dw 558h			; ret_carry_clear
 12321                                  		dw 558h			; ret_carry_clear
 12322                                  		dw 0D5h			; bc_cmderr
 12323                                  		dw 80Ah			; dsk_open
 12324                                  		dw 81Ah			; dsk_close
 12325                                  		dw 831h			; dsk_rem
 12326                                  		dw 558h			; ret_carry_clear
 12327                                  		dw 558h			; ret_carry_clear
 12328                                  		dw 558h			; ret_carry_clear
 12329                                  		dw 0C6Bh		; do_generic_ioctl
 12330                                  		dw 558h			; ret_carry_clear
 12331                                  		dw 558h			; ret_carry_clear
 12332                                  		dw 558h			; ret_carry_clear
 12333                                  		dw 1124h		; ioctl_getown
 12334                                  		dw 1142h		; ioctl_setown
 12335                                  		dw 129Ah		; ioctl_support_query
 12336                                  
 12337                                  ;dtbl_siz equ $-dsktbl
 12338                                  
 12339                                  %endif
 12340                                  
 12341                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12342                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 12343                                  
 12344                                  		; 21/12/2023 - Retro DOS v5.0
 12345                                  		; 11/12/2022
 12346 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 12347 00000570 [4A1A]                  		dw dsk_init
 12348 00000572 [B805]                  		dw media_chk
 12349 00000574 [5706]                  		dw get_bpb
 12350                                  		;dw bc_cmderr
 12351 00000576 [4A0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 12352 00000578 [7209]                  		dw dsk_read
 12353 0000057A [5809]                  		dw x_bus_exit
 12354 0000057C [2206]                  		dw ret_carry_clear
 12355 0000057E [2206]                  		dw ret_carry_clear
 12356 00000580 [6409]                  		dw dsk_writ
 12357 00000582 [5C09]                  		dw dsk_writv
 12358 00000584 [2206]                  		dw ret_carry_clear
 12359 00000586 [2206]                  		dw ret_carry_clear
 12360                                  		;dw bc_cmderr
 12361 00000588 [F70D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 12362 0000058A [2909]                  		dw dsk_open
 12363 0000058C [3809]                  		dw dsk_close
 12364 0000058E [4E09]                  		dw dsk_rem
 12365 00000590 [2206]                  		dw ret_carry_clear
 12366 00000592 [2206]                  		dw ret_carry_clear
 12367 00000594 [2206]                  		dw ret_carry_clear
 12368 00000596 [CC0E]                  		dw do_generic_ioctl
 12369 00000598 [2206]                  		dw ret_carry_clear
 12370 0000059A [2206]                  		dw ret_carry_clear
 12371 0000059C [2206]                  		dw ret_carry_clear
 12372 0000059E [A713]                  		dw ioctl_getown
 12373 000005A0 [C413]                  		dw ioctl_setown
 12374 000005A2 [1C15]                  		dw ioctl_support_query
 12375                                  
 12376                                  dtbl_siz equ $-dsktbl
 12377                                  
 12378                                  ; =============== S U B	R O U T	I N E =======================================
 12379                                  
 12380                                  ; ---------------------------------------------------------------------------
 12381                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 12382                                  ; the one that belongs to the drive specified. carry is set if none exists
 12383                                  ; for the drive. Pointer is returned in es:[di]
 12384                                  ;
 12385                                  ;  AL contains the logical drive number.
 12386                                  ; ---------------------------------------------------------------------------
 12387                                  
 12388                                  SetDrive:
 12389                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 12390 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 12391                                  X_Scan_Loop:
 12392 000005A8 26384505                		cmp	[es:di+5], al	
 12393 000005AC 7409                    		jz	short X_SetDrv
 12394 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 12395 000005B1 83FFFF                  		cmp	di, 0FFFFh
 12396 000005B4 75F2                    		jnz	short X_Scan_Loop
 12397 000005B6 F9                      		stc
 12398                                  X_SetDrv:
 12399 000005B7 C3                      		retn
 12400                                  
 12401                                  ; ---------------------------------------------------------------------------
 12402                                  
 12403                                  ; 15/10/2022
 12404                                  
 12405                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12406                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 12407                                  
 12408                                  ; ---------------------------------------------------------------------
 12409                                  ; if id is f9, have a 96tpi disk else
 12410                                  ; if bit 2 is 0 then media is not removable and could not have changed
 12411                                  ;  otherwise if within 2 secs of last disk operation media could not
 12412                                  ;    have changed, otherwise dont know if media has changed
 12413                                  ; ---------------------------------------------------------------------
 12414                                  
 12415                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 12416 000005B8 E8E9FF                  		call	SetDrive
 12417 000005BB BE0100                  		mov	si, 1
 12418                                  		; 21/12/2023
 12419 000005BE 26F6454001              		test	byte [es:di+40h], 1
 12420                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 12421                                  					; fchanged_by_format
 12422 000005C3 7415                    		jz	short WeAreNotFakingIt
 12423                                  		; 21/12/2023
 12424 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 12425                                  		; 12/12/2022
 12426                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 12427                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 12428                                  					; ~fchanged_by_format ;	reset flag
 12429 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12430                                  					; Ensure that we ask the rom if media has changed
 12431                                  		; 21/12/2023
 12432 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 12433                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12434                                  					; fnon_removable
 12435 000005D4 740B                    		jz	short wehaveafloppy
 12436                                  		;mov	si, 0FFFFh	; Indicate media changed
 12437                                  		; 11/08/2023
 12438 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 12439 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 12440                                  ; ---------------------------------------------------------------------------
 12441                                  
 12442                                  WeAreNotFakingIt:
 12443                                  		; 21/12/2023
 12444 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 12445                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 12446                                  		;test	byte [es:di+23h], 1
 12447 000005DF 7524                    		jnz	short Media_Done
 12448                                  wehaveafloppy:
 12449                                  		;xor	si, si ; 0	; Presume "I don't know"
 12450                                  		; 11/08/2023
 12451 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 12452                                  
 12453                                  		; If we have a floppy with changeline support, we ask the ROM
 12454                                  		; to determine if media has changed. We do not perform the
 12455                                  		; 2 second check for these drives.
 12456                                  
 12457 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 12458 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 12459 000005E9 E83615                  		call	mediacheck	;  Call	into removable routine
 12460 000005EC 7236                    		jb	short err_exitj
 12461 000005EE E89A16                  		call	haschange
 12462 000005F1 7512                    		jnz	short Media_Done
 12463                                  mChk_NoChangeLine:
 12464                                  		; If we come here, we have a floppy with no changeline support
 12465                                  			
 12466 000005F3 BE0100                  		mov	si, 1		; Presume no change
 12467 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 12468 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 12469                                  					; Is drive of last access the same?
 12470 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 12471 000005FF E82800                  		call	Check_Time_Of_Access
 12472 00000602 EB01                    		jmp	short Media_Done
 12473                                  ; ---------------------------------------------------------------------------
 12474                                  
 12475                                  Media_Unk:
 12476 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 12477                                  
 12478                                  		; SI now contains the correct value for media change.
 12479                                  		; Clean up the left overs
 12480                                  Media_Done:
 12481                                  		; 19/10/2022
 12482 00000605 06                      		push	es
 12483 00000606 C41E[1200]              		les	bx, [ptrsav]
 12484 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 12485 0000060E 07                      		pop	es
 12486 0000060F 09F6                    		or	si, si
 12487 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 12488 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 12489 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 12490 0000061A E80016                  		call	media_set_vid
 12491                                  mChk1_NoChangeLine:
 12492 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12493                                  					; Make sure we ask rom for media check
 12494                                  ret_carry_clear:			
 12495 00000622 F8                      		clc			; volidok
 12496 00000623 C3                      		retn
 12497                                  ; ---------------------------------------------------------------------------
 12498                                  
 12499                                  err_exitj:
 12500 00000624 E88207                  		call	maperror	; guaranteed to	set carry
 12501                                  ret81:					
 12502 00000627 B481                    		mov	ah, 81h		; return error status
 12503 00000629 C3                      		retn			; return with carry set
 12504                                  
 12505                                  ; =============== S U B	R O U T	I N E =======================================
 12506                                  
 12507                                  ; ---------------------------------------------------------------------------
 12508                                  ; perform a check on the time passed since the last access for this physical
 12509                                  ; drive.
 12510                                  ; we are accessing the same drive. if the time of last successful access was
 12511                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 12512                                  ; returns in si:
 12513                                  ;	0 - if time of last access was >= 2 seconds
 12514                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 12515                                  ; registers affected ax,cx,dx, flags.
 12516                                  ;
 12517                                  ;	assume es:di -> bds, ds->Bios_Data
 12518                                  ; ---------------------------------------------------------------------------
 12519                                  
 12520                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12521                                  		; 19/10/2022
 12522                                  Check_Time_Of_Access:
 12523 0000062A BE0100                  		mov	si, 1		; presume no change.
 12524 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 12525                                  		; 21/12/2023
 12526 00000630 268B4579                		mov	ax, [es:di+79h]
 12527                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 12528                                  					; get stored time
 12529 00000634 29C2                    		sub	dx, ax
 12530                                  		; 21/12/2023
 12531 00000636 268B457B                		mov	ax, [es:di+7Bh]
 12532                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 12533 0000063A 19C1                    		sbb	cx, ax
 12534                                  		; 11/08/2023
 12535                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 12536                                  		;mov	al, [accesscount]
 12537 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 12538 0000063E 09D2                    		or	dx, dx		; time must pass
 12539 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 12540                                  		; 11/08/2023
 12541                                  		;inc	al
 12542                                  		;cmp	al, 5
 12543                                  		;;inc	byte [accesscount]
 12544                                  		;;cmp	byte [accesscount], 5
 12545                                  		;			; if count is less than threshold, ok
 12546                                  		;jb	short timecheck_ret
 12547                                  		;;dec	byte [accesscount] ; don't let the count wrap
 12548                                  		; 11/08/2023
 12549                                  		;dec	al
 12550                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 12551                                  		; 11/08/2023
 12552 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 12553 00000647 730A                    		jnb	short timecheck_unk
 12554 00000649 FE06[1D01]              		inc	byte [accesscount]
 12555 0000064D C3                      		retn
 12556                                  
 12557                                  ; ---------------------------------------------------------------------------
 12558                                  
 12559                                  timepassed:
 12560 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 12561                                  					; min elapsed time? (2 seconds)
 12562 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 12563                                  
 12564                                  		; everything indicates that we do not know what has happened.
 12565                                  timecheck_unk:
 12566 00000653 4E                      		dec	si		; presume i don't know
 12567                                  timecheck_ret:
 12568                                  		; 11/08/2023
 12569                                  		;mov	[accesscount], al
 12570 00000654 C3                      		retn
 12571                                  
 12572                                  ; ---------------------------------------------------------------------------
 12573                                  ; 15/10/2022
 12574                                  Err_Exitj2:
 12575 00000655 EBCD                    		jmp	short err_exitj
 12576                                  
 12577                                  ; ---------------------------------------------------------------------------
 12578                                  
 12579                                  ; 15/10/2022
 12580                                  
 12581                                  ; ==========================================================================
 12582                                  ; Build a valid bpb for the disk in the drive.
 12583                                  ; ==========================================================================
 12584                                  
 12585                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12586                                  		; 19/10/2022
 12587                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 12588 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 12589 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 12590                                  		; 21/12/2023
 12591 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 12592                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12593                                  					; fnon_removable
 12594 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 12595                                  
 12596                                  		; let's set the default value for volid,vol_serial,
 12597                                  		; filesys_id in bds table
 12598                                  
 12599 00000664 E83600                  		call	clear_ids
 12600                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 12601 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 12602 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 12603 0000066F 72B6                    		jb	short ret81
 12604                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 12605 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 12606                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 12607 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 12608 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 12609                                  					; otherwise, conventional boot record
 12610                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 12611 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 12612 00000682 7403                    		jz	short already_gotbpb ; brif not
 12613 00000684 E80A16                  		call	set_volume_id
 12614                                  already_gotbpb:
 12615 00000687 83C706                  		add	di, 6		; BDS.BPB
 12616                                  					; return the bpb from the current bds
 12617                                  
 12618                                  ;		fall into setptrsav, es:di -> result
 12619                                  
 12620                                  ; ---------------------------------------------------------------------------
 12621                                  
 12622                                  ; 15/10/2022
 12623                                  
 12624                                  ; ==========================================================================
 12625                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 12626                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 12627                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 12628                                  ;It fails, for instance, when we install an external drive using driver.sys
 12629                                  ;because then the BDS segment is no longer Bios_Data. 
 12630                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 12631                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 12632                                  ;restored before returning to the caller.
 12633                                  ; ==========================================================================
 12634                                  
 12635                                  ; 21/12/2023
 12636                                  %if 0
 12637                                  		; 19/10/2022
 12638                                  SetPtrSav:	; return point for dsk_init
 12639                                  		mov	cx, es		; save es
 12640                                  		;les	bx, ds:ptrsav
 12641                                  		les	bx, [ptrsav]
 12642                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 12643                                  		mov	[es:bx+12h], di	; [es:bx+count]
 12644                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 12645                                  		clc
 12646                                  		retn
 12647                                  %endif
 12648                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12649                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 12650                                  SetPtrSav:	
 12651                                  		; return point for dsk_init
 12652 0000068A 1E                      		push	ds
 12653                                  		;lds	bx, ds:ptrsav
 12654 0000068B C51E[1200]              		lds	bx, [ptrsav]
 12655 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 12656 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 12657 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 12658 00000698 1E                      		push	ds
 12659 00000699 07                      		pop	es
 12660 0000069A 1F                      		pop	ds
 12661 0000069B F8                      		clc
 12662 0000069C C3                      		retn
 12663                                  
 12664                                  ; =============== S U B	R O U T	I N E =======================================
 12665                                  
 12666                                  ; 15/10/2022
 12667                                  
 12668                                  ; -----------------------------------------------------
 12669                                  ; clear ids in bds table. only applied for floppies.
 12670                                  ;input:  es:di -> bds table
 12671                                  ;	assumes ds: -> Bios_Data
 12672                                  ;output: volid set to "NO NAME    "
 12673                                  ;	 vol_serial set to 0.
 12674                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 12675                                  ;	   depending on the flag fatsize in bds.
 12676                                  ;
 12677                                  ;	trashes si, cx
 12678                                  ; -----------------------------------------------------
 12679                                  
 12680                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 12681                                  ;size_of_EXT_SYSTEM_ID equ 8
 12682                                  
 12683                                  ; 11/09/2023
 12684                                  ; 14/08/2023
 12685                                  ;BDS.fatsiz equ 1Fh
 12686                                  ; 21/12/2023
 12687                                  ;BDS.fatsiz equ 59
 12688                                  
 12689                                  		; 22/12/2023
 12690                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12691                                  clear_ids:
 12692                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 12693                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 12694 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 12695                                  clear_ids_x:
 12696                                  		; 21/12/2023 
 12697                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 12698                                  		; 11/09/2023		
 12699                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 12700 000006A1 57                      		push	di
 12701 000006A2 31C9                    		xor	cx, cx		; no serial number
 12702                                  		; 21/12/2023
 12703 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 12704 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 12705                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 12706                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 12707                                  
 12708                                  		; BUGBUG - there's a lot in common here and with
 12709                                  		; mov_media_ids.. see if we can save some space by
 12710                                  		; merging them... jgl
 12711                                  
 12712                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 12713                                  		; 10/12/2022
 12714 000006AE B10B                    		mov	cl, 11 ; cx = 11
 12715                                  
 12716                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 12717                                  		;mov	si, vol_no_name	; 19/10/2022
 12718                                  		; 22/12/2023
 12719                                  		;mov	si, offset nul_vid ; "NO NAME    "
 12720 000006B0 BE[6305]                		mov	si, nul_vid
 12721                                  
 12722                                  		; 21/12/2023
 12723 000006B3 83C77D                  		add	di, 125
 12724                                  		;add	di, 75		; BDS.volid
 12725                                  		
 12726                                  		;rep movsb
 12727                                  		; 21/12/2023
 12728                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 12729                                  		; 26/12/2023
 12730                                  		;cs	; vol_no_name is in BIOSCODE segment
 12731                                  		;rep movsb
 12732 000006B6 F3                      		rep
 12733 000006B7 2E                      		cs
 12734 000006B8 A4                      		movsb
 12735                                  
 12736                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 12737                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 12738                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 12739                                  		;test	byte [es:di+1Fh], 40h
 12740                                  		; 21/12/2023 - Retro DOS v5.0
 12741                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 12742                                  		;test	byte [es:di+59], 20h 
 12743                                  			; (here, es:di points to the BDS offset +136)
 12744                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 12745                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 12746                                  
 12747                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 12748                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 12749                                  			; Microsoft/IBM code has a bug here because the BDS's
 12750                                  			; .volid and .filesys_id fields will be reset
 12751                                  			; (to their default text) according to 'BDS.fatsiz' flags
 12752                                  			; at the BDS offset 59 but current (this) code checks flags
 12753                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 12754                                  			;; at the BDS offset 31 but current (this) code checks flags
 12755                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 12756                                  			;
 12757                                  			; Correct Code:
 12758                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 12759                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 12760                                  			; 11/09/2023
 12761                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 12762                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 12763                                  			;
 12764                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 12765                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 12766                                  
 12767                                  			;
 12768                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 12769                                  			; 'clear_ids' is used for floppy disks only and the default
 12770                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 12771                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 12772                                  
 12773                                  		; 21/12/2023 - Retro DOS v5.0
 12774                                  		;mov	si, offset fat_32_id ; "FAT32   "
 12775 000006B9 BE[5B05]                		mov	si, fat_32_id	
 12776                                  
 12777                                  		; 21/12/2023
 12778                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 12779                                  		;test	bl, fbigbig ; FAT32 flag
 12780 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 12781 000006BF 750B                    		jnz	short ci_bigfat
 12782                                  
 12783                                  		;mov	si, offset fat_16_id ; "FAT16	"
 12784 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 12785                                  		
 12786                                  		; 21/12/2023
 12787                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 12788                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 12789                                  		; BugFix ; *+
 12790                                  		;test	bl, fbig ; FAT16 flag
 12791 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 12792                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 12793 000006C7 7503                    		jnz	short ci_bigfat
 12794                                  
 12795                                  		;mov	si, offset fat_12_id ; "FAT12	"
 12796 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 12797                                  ci_bigfat:
 12798                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 12799                                  		; 10/12/2022
 12800 000006CC B108                    		mov	cl, 8 ; cx = 8 
 12801 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 12802                                  					; filesys_id field
 12803                                  		;rep movsb
 12804                                  		; 21/12/2023 - Retro DOS v5.0
 12805                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 12806                                  		; 26/12/2023
 12807                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 12808                                  		;rep movsb
 12809 000006D1 F3                      		rep
 12810 000006D2 2E                      		cs
 12811 000006D3 A4                      		movsb
 12812                                  
 12813 000006D4 5F                      		pop	di		; restore bds pointer
 12814                                  getret_exit:		; 21/12/2023
 12815 000006D5 C3                      		retn
 12816                                  
 12817                                  ; =============== S U B	R O U T	I N E =======================================
 12818                                  
 12819                                  ; 15/10/2022
 12820                                  
 12821                                  ; ---------------------------------------------------------------------------
 12822                                  ;	getbp - return bpb from the drive specified by the bds.
 12823                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 12824                                  ;	    note that we never come here for fixed disks.
 12825                                  ;	    for all other cases,
 12826                                  ;	      - it reads boot sector to pull out the bpb
 12827                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 12828                                  ;		to get the fat id byte to build the bpb from there.
 12829                                  ;
 12830                                  ;   inputs:	es:di point to correct bds.
 12831                                  ;
 12832                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 12833                                  ;		carry set, and al=7 if invalid disk.
 12834                                  ;		carry set and error code in al if other error.
 12835                                  ;		if failed to recognize the boot record, then will set the
 12836                                  ;		set_id_flag to 0.
 12837                                  ;		this routine will only work for a floppy diskette.
 12838                                  ;		     for a fixed disk, it will just return.
 12839                                  ;
 12840                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 12841                                  ;	  segment definitions. It should be migrated towards.
 12842                                  ;	   now es:di has the bds, ds: has Bios_Data
 12843                                  ; ---------------------------------------------------------------------------
 12844                                  
 12845                                  		; 29/12/2023
 12846                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12847                                  GetBp:
 12848                                  		; if returning fake bpb then return bpb as is.
 12849                                  		; 21/12/2023
 12850 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 12851                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 12852                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 12853                                  		;jz	short getbp1	; getbp1
 12854                                  		;jmp	getret_exit
 12855                                  		; 21/12/2023
 12856 000006DB 75F8                    		jnz	short getret_exit
 12857                                  ; ---------------------------------------------------------------------------
 12858                                  getbp1:	
 12859 000006DD 51                      		push	cx
 12860 000006DE 52                      		push	dx
 12861 000006DF 53                      		push	bx
 12862                                  
 12863                                  		; attempt to read in boot sector and determine bpb.
 12864                                  		; we assume that the 2.x and greater dos disks all
 12865                                  		; have a valid boot sector.
 12866                                  
 12867 000006E0 E8CF00                  		call	readbootsec
 12868 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 12869 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 12870 000006E7 7509                    		jnz	short dofatbpb
 12871 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 12872                                  		;jmp	short Has1
 12873                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 12874 000006EC E9B500                  		jmp	getret
 12875                                  ; ---------------------------------------------------------------------------
 12876                                  
 12877                                  getbp_err_ret_brdg:
 12878 000006EF E9B600                  		jmp	getbp_err_ret
 12879                                  ; ---------------------------------------------------------------------------
 12880                                  
 12881                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 12882                                  		; and fill in bpb from there.
 12883                                  dofatbpb:				
 12884 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 12885 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 12886                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 12887 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 12888 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 12889 000006FE E83115                  		call	hidensity	; may not return! May add sp, 2	and
 12890                                  					; jump to has1!!!!!! or	has720K
 12891                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 12892                                  		; 21/12/2023 - Retro DOS v5.0
 12893 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 12894                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12895                                  					; ffSmall
 12896 00000706 7512                    		jnz	short is_floppy
 12897 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 12898 0000070B 7512                    		jnz	short got_unknown_medium
 12899                                  Has720K:
 12900                                  		; 21/12/2023
 12901                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 12902                                  		;mov	bx, sm92	; 19/10/2022
 12903                                  
 12904                                  		; es points to segment of bds. the following should be modified
 12905                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 12906                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 12907                                  
 12908                                  		; 21/12/2023
 12909                                  		;; 10/12/2022
 12910                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 12911                                  		;; 21/12/2022
 12912                                  		;mov	al, [bx]
 12913                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 12914                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 12915                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 12916                                  		;; 19/10/2022 - Temporary !
 12917                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 12918                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 12919                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 12920                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 12921                                  
 12922                                  		; 21/12/2023 - Retro DOS v5.0
 12923 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 12924 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 12925 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 12926                                  					; dh = bpbtype.chead = 2
 12927 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 12928                                  					; bh = bpbtype.dire = 112
 12929 00000718 EB30                    		jmp	short Has1
 12930                                  ; ---------------------------------------------------------------------------
 12931                                  
 12932                                  is_floppy:			; must be a 5.25" floppy if we come here
 12933 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 12934                                  		;jb	short got_unknown_medium
 12935                                  		; 21/12/2023
 12936 0000071D 730A                    		jnb	short chk_160K
 12937                                  ; ---------------------------------------------------------------------------
 12938                                  		; 21/12/2023
 12939                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 12940                                  		; we do	not assume any type of bpb for this medium.
 12941                                  got_unknown_medium:
 12942                                  		;mov	ds:set_id_flag,	0
 12943 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 12944 00000724 B007                    		mov	al, 7
 12945 00000726 F9                      		stc
 12946 00000727 EB7B                    		jmp	short getret
 12947                                  ; ---------------------------------------------------------------------------
 12948                                  chk_160K:
 12949 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 12950 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 12951                                  					; set dir entries and sector max
 12952 0000072E B94001                  		mov	cx, 320		; 40*8
 12953                                  					; set size of drive
 12954 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 12955                                  					; set head limit and sec/all unit
 12956                                  		; 21/12/2023
 12957                                  		;mov	al, 1		; bpbtype.sbf = 1
 12958                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 12959                                  		;			; bh = bpbtype.dire = 64
 12960                                  		;mov	cx, 140h	; bpbtype.csec = 320
 12961                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 12962                                  		;			; dh = bpbtype.chead = 1
 12963                                  
 12964 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 12965 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 12966                                  		
 12967                                  		; 29/12/2023
 12968                                  		;inc	al	; 2 	; inc number of	fat sectors
 12969                                  		;inc	bl	; 9	; inc sector max
 12970 00000739 40                      		inc	ax
 12971 0000073A 43                      		inc	bx
 12972                                  
 12973                                  		;add	cx, 40		; increase size	(to 360)
 12974                                  		; 18/12/2022
 12975 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 12976                                  has8:
 12977 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 12978 00000741 7407                    		jz	short Has1	; jz = 1 head
 12979 00000743 01C9                    		add	cx, cx		; double size of disk
 12980 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 12981 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 12982                                  		; 29/12/2023
 12983                                  		;inc	dl	; 2	; inc head limit
 12984 00000749 42                      		inc	dx
 12985                                  Has1:
 12986                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 12987 0000074A 1E                      		push	ds
 12988 0000074B 06                      		push	es
 12989 0000074C 1F                      		pop	ds
 12990                                  
 12991                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 12992                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 12993                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 12994                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 12995                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 12996                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 12997                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 12998                                  
 12999 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 13000 00000750 30F6                    		xor	dh, dh
 13001 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 13002 00000755 88FA                    		mov	dl, bh
 13003 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 13004 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 13005 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 13006 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 13007 00000763 88C2                    		mov	dl, al
 13008 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 13009 00000768 88DA                    		mov	dl, bl
 13010 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 13011                                  
 13012                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 13013                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 13014                                  		; to 0 since this code is for floppies
 13015                                  
 13016                                  		; 18/12/2022
 13017                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 13018                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 13019                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 13020                                  		; 18/12/2022
 13021 0000076D 29C9                    		sub	cx, cx ; 0
 13022                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 13023                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 13024                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 13025                                  		
 13026                                  		; 02/09/2023
 13027 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 13028 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 13029 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 13030                                  
 13031                                  		; 21/12/2023 - Retro DOS v5.0
 13032 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 13033 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 13034 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 13035 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 13036 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 13037                                  					;     BPB_Reserved (12 zero bytes)
 13038 00000787 894D31                  		mov     [di+31h], cx
 13039 0000078A 894D33                  		mov     [di+33h], cx
 13040 0000078D 894D35                  		mov     [di+35h], cx
 13041 00000790 894D37                  		mov     [di+37h], cx
 13042 00000793 894D39                  		mov     [di+39h], cx
 13043 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 13044 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 13045                                  
 13046 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 13047 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 13048 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 13049                                  		
 13050 000007A3 1F                      		pop	ds ; 02/09/2023
 13051                                  getret:
 13052 000007A4 5B                      		pop	bx
 13053 000007A5 5A                      		pop	dx
 13054 000007A6 59                      		pop	cx
 13055                                  ;getret_exit:		; 21/12/2023
 13056 000007A7 C3                      		retn
 13057                                  ; ---------------------------------------------------------------------------
 13058                                  
 13059                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 13060                                  		;mov	ds:set_id_flag,	0
 13061                                  		; 19/10/2022
 13062 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 13063 000007AD E8F905                  		call	maperror
 13064 000007B0 EBF2                    		jmp	short getret
 13065                                  ; ---------------------------------------------------------------------------
 13066                                  ; 21/12/2023
 13067                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 13068                                  ;		; we do	not assume any type of bpb for this medium.
 13069                                  ;
 13070                                  ;got_unknown_medium:
 13071                                  ;		;mov	ds:set_id_flag,	0
 13072                                  ;		mov	byte [set_id_flag], 0
 13073                                  ;		mov	al, 7
 13074                                  ;		stc
 13075                                  ;		jmp	short getret
 13076                                  
 13077                                  ; =============== S U B	R O U T	I N E =======================================
 13078                                  
 13079                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 13080                                  
 13081                                  ; ----------------------------------------------------------------
 13082                                  ; read in the boot sector. set carry if error in reading sector.
 13083                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 13084                                  ;
 13085                                  ;	assumes es:di -> bds, ds-> Bios_Data
 13086                                  ; ----------------------------------------------------------------
 13087                                  
 13088                                  ; 10/03/2019 - Retro DOS v4.0
 13089                                  
 13090                                  ; 30/12/2022 - Retro DOS v4.2
 13091                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 13092                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 13093                                  
 13094                                  ; 22/12/2023 - Retro DOS v5.0
 13095                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 13096                                  
 13097                                  readbootsec:	
 13098 000007B2 B600                    		mov	dh, 0		; head 0
 13099 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 13100 000007B7 E8FC00                  		call	read_sector
 13101 000007BA 7243                    		jb	short err_ret
 13102 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 13103                                  
 13104                                  		; put a sanity check for the boot sector in here to detect
 13105                                  		; boot sectors that do not have valid bpbs. we examine the
 13106                                  		; first two bytes - they must contain a long jump (69h) or a
 13107                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 13108                                  		; (E9h). if this test is passed, we further check by examining
 13109                                  		; the signature at the end of the boot sector for the word
 13110                                  		; AA55h. if the signature is not present, we examine the media
 13111                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 13112                                  		; logic is modified a little bit. we are not going to check
 13113                                  		; signature. instead we are going to sanity check the media
 13114                                  		; byte in bpb regardless of the validity of signature. this is
 13115                                  		; to save the already developed commercial products that have
 13116                                  		; good jump instruction and signature but with the false bpb
 13117                                  		; informations
 13118                                  
 13119                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 13120                                  
 13121                                  		; 02/09/2023
 13122                                  		; 19/10/2022
 13123                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 13124                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 13125                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 13126                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 13127                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 13128                                  		;jnz	short invalidbootsec
 13129                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 13130                                  		;jnz	short invalidbootsec
 13131                                  
 13132                                  		; 02/09/2023 (PCDOS 7.1)
 13133 000007BE A0[5201]                		mov	al, [disksector]
 13134 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 13135 000007C3 740F                    		je	short check_bpb_mediabyte
 13136                                  					; don't need to find a nop
 13137 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 13138 000007C7 740B                    		je	short check_bpb_mediabyte
 13139                                  					; no need for nop
 13140 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 13141 000007CB 7530                    		jne	short invalidbootsec
 13142 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 13143 000007D2 7529                    		jne	short invalidbootsec
 13144                                  
 13145                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13146                                  ;
 13147                                  ;; 10/03/2019
 13148                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 13149                                  ;;
 13150                                  ;; Don't have to perform the following signature check since
 13151                                  ;; we need to check the media byte even with the good signatured diskette.
 13152                                  ;;
 13153                                  ;;check_signature:
 13154                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 13155                                  ;;							 ; disk or 1.x media.
 13156                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 13157                                  ;;					       ; may need some special handling
 13158                                  
 13159                                  ; check for non-ibm disks which do not have the signature AA55h at the
 13160                                  ; end of the boot sector, but still have a valid boot sector. this is done
 13161                                  ; by examining the media descriptor in the boot sector.
 13162                                  
 13163                                  		; 19/10/2022
 13164                                  check_bpb_mediabyte:
 13165 000007D4 A0[6701]                		mov	al, [disksector+15h]
 13166                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13167 000007D7 50                      		push	ax ; 02/09/2023
 13168 000007D8 24F0                    		and	al, 0F0h
 13169 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 13170 000007DC 58                      		pop	ax ; 02/09/2023
 13171 000007DD 751E                    		jnz	short invalidbootsec
 13172                                  
 13173                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 13174                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 13175                                  ; sectors. these are specifically diskettes that were formatted in drives
 13176                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 13177                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 13178                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 13179                                  ; help our build bpb routine to recognise these specific cases, and to
 13180                                  ; set up out copy of the bpb accordingly.
 13181                                  ; we do this by checking to see if the boot sector is off a diskette that
 13182                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 13183                                  ; sec/clus field to 1. if not, we carry on as normal.
 13184                                  
 13185                                  checksinglesided:
 13186                                  		;mov	al, [disksector+15h]
 13187                                  		; 02/09/2023
 13188                                  		; al = [disksector+15h]
 13189 000007DF 3CF0                    		cmp	al, 0F0h
 13190 000007E1 741B                    		jz	short gooddsk
 13191 000007E3 A801                    		test	al, 1
 13192 000007E5 7517                    		jnz	short gooddsk
 13193 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 13194 000007ED 7507                    		jnz	short mustbeearlier
 13195 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 13196 000007F4 7308                    		jnb	short gooddsk
 13197                                  
 13198                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 13199                                  
 13200                                  mustbeearlier:				
 13201 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 13202                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13203 000007FB EB01                    		jmp	short gooddsk
 13204                                  ; ---------------------------------------------------------------------------
 13205                                  
 13206                                  invalidbootsec:				
 13207 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 13208                                  		; 10/12/2022
 13209                                  movbpb_ret:
 13210                                  gooddsk:				
 13211 000007FE F8                      		clc
 13212                                  err_ret:
 13213 000007FF C3                      		retn
 13214                                  ; ---------------------------------------------------------------------------
 13215                                  
 13216                                  		; 10/12/2022
 13217                                  ;err_ret:				
 13218                                  		;retn
 13219                                  
 13220                                  ; =============== S U B	R O U T	I N E =======================================
 13221                                  
 13222                                  ; 15/10/2022
 13223                                  ; ---------------------------------------------------------------------------
 13224                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 13225                                  ; getbp routine at has1
 13226                                  ;
 13227                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 13228                                  ; serial number, volume label, file system id in bds according to
 13229                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 13230                                  ; to signal that volume label is set already from the extended boot record
 13231                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 13232                                  ; the volume label in the root directory.)
 13233                                  ; ---------------------------------------------------------------------------
 13234                                  
 13235                                  ; 10/03/2019 - Retro DOS v4.0
 13236                                  
 13237                                  ; 22/12/2023
 13238                                  %if 0
 13239                                  		; 19/10/2022
 13240                                  movbpb:
 13241                                  		mov	dh, [disksector+0Dh]
 13242                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13243                                  					; sectors per unit
 13244                                  		mov	bh, [disksector+11h]
 13245                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 13246                                  					; number of directory entries
 13247                                  		mov	cx, [disksector+13h]
 13248                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 13249                                  					; size of drive
 13250                                  		mov	ah, [disksector+15h]
 13251                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13252                                  					; media	descriptor
 13253                                  		mov	al, [disksector+16h];
 13254                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 13255                                  					; number of fat	sectors
 13256                                  		mov	bl, [disksector+18h]
 13257                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 13258                                  					; sectors per track
 13259                                  		mov	dl, [disksector+1Ah]
 13260                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 13261                                  					; number of heads
 13262                                  %else
 13263                                  		; 29/12/2023
 13264                                  		; 22/12/2023 - Retro DOS v5.0
 13265                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 13266                                  		;;;
 13267                                  movbpb:
 13268 00000800 57                      		push	di
 13269 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 13270 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 13271 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 13272                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 13273 0000080B FC                      		cld
 13274 0000080C F3A4                    		rep movsb
 13275 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 13276                                  					; disksektor+19 = BPB_TotSec16
 13277 00000811 31C0                    		xor	ax, ax
 13278 00000813 E308                    		jcxz	movbpb_bigdisk
 13279 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 13280                                  					; to 32 bit total sectors field
 13281 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 13282                                  movbpb_bigdisk:
 13283 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 13284 00000820 7410                    		jz	short movbpb_fat32
 13285                                  movbpb_fat:
 13286 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 13287                                  		; 29/12/2023
 13288 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 13289                                  					; (which are used only for FAT32 disks)
 13290 00000828 F3AA                    		rep stosb
 13291 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 13292 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 13293                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 13294 0000082C AB                      		stosw
 13295 0000082D 40                      		inc	ax		; ax = 0
 13296 0000082E B10C                    		mov	cl, 12		
 13297                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 13298                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 13299 00000830 F3AA                    		rep stosb
 13300                                  movbpb_fat32:
 13301 00000832 5F                      		pop	di
 13302                                  %endif
 13303                                  		;;;
 13304                                  
 13305 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 13306 00000838 75C4                    		jnz	short movbpb_ret
 13307 0000083A E81200                  		call	mov_media_ids
 13308 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 13309 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 13310                                  movbpb_conv:
 13311 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 13312 00000849 75B3                    		jnz	short movbpb_ret
 13313 0000084B E83714                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 13314                                  		; 10/12/2022
 13315                                  		; cf = 0
 13316                                  ;movbpb_ret:
 13317                                  		;clc
 13318 0000084E C3                      		retn
 13319                                  		
 13320                                  ; =============== S U B	R O U T	I N E =======================================
 13321                                  
 13322                                  ;copy the boot_serial number, volume id, and filesystem id from the
 13323                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 13324                                  ;by es:di.
 13325                                  
 13326                                  ;in.) es:di -> bds
 13327                                  ;     ds:disksector = valid extended boot record.
 13328                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 13329                                  ;      the boot record information.
 13330                                  ;     carry flag set if not an extended bpb.
 13331                                  ;     all registers saved except the flag.
 13332                                  
 13333                                  ; 22/12/2023
 13334                                  %if 0
 13335                                  		; 19/10/2022
 13336                                  mov_media_ids:		
 13337                                  		cmp	byte [disksector+26h], 29h
 13338                                  					; [disksector+EXT_BOOT.SIG],
 13339                                  					; EXT_BOOT_SIGNATURE
 13340                                  		jnz	short mmi_not_ext
 13341                                  		push	cx
 13342                                  		mov	cx, [disksector+27h]
 13343                                  					; [disksector+EXT_BOOT.SERIAL]
 13344                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13345                                  		mov	cx, [disksector+29h]
 13346                                  					; [disksector+EXT_BOOT.SERIAL+2]
 13347                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13348                                  		push	di
 13349                                  		push	si
 13350                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13351                                  		mov	si, disksector+2Bh
 13352                                  		;mov	si, (offset disksector+2Bh) ;
 13353                                  					; disksector+EXT_BOOT.VOL_LABEL
 13354                                  		add	di, 75		; BDS.volid
 13355                                  		rep movsb
 13356                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 13357                                  		; 10/12/2022
 13358                                  		mov	cl, 8 ; cx = 8
 13359                                  		mov	si, disksector+36h
 13360                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 13361                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 13362                                  		rep movsb
 13363                                  		pop	si
 13364                                  		pop	di
 13365                                  		pop	cx
 13366                                  		; 10/12/2022
 13367                                  		; cf = 0
 13368                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 13369                                  				; (20/09/2022)
 13370                                  		retn
 13371                                  %else
 13372                                  		; 22/12/2023 - Retro DOS v5.0
 13373                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 13374                                  		;;;		
 13375                                  mov_media_ids:
 13376 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13377 00000854 7507                    		jnz	short mmi_chk_fat
 13378 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 13379                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 13380                                  					; EXT_BOOT_SIGNATURE
 13381 0000085B EB05                    		jmp	short mmi_chk_fat32
 13382                                  mmi_chk_fat:
 13383 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 13384                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 13385                                  mmi_chk_fat32:
 13386 00000862 7543                    		jnz	short mmi_not_ext
 13387 00000864 51                      		push	cx
 13388 00000865 50                      		push	ax
 13389 00000866 57                      		push	di
 13390 00000867 56                      		push	si
 13391 00000868 1E                      		push	ds
 13392 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13393 0000086E 750C                    		jnz	short mmi_fat
 13394                                  
 13395                                  mmi_fat32:				; FAT32 file system
 13396                                  		;lds	cx, dword ptr ds:disksector+43h
 13397 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 13398 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 13399 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 13400 0000087A EB0A                    		jmp	short mmi_do
 13401                                  
 13402                                  mmi_fat:
 13403                                  		;lds	cx, dword ptr ds:disksector+27h
 13404 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 13405 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 13406 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 13407                                  mmi_do:
 13408 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13409                                  					; (BDS offset 137)
 13410 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 13411 00000890 1F                      		pop	ds
 13412 00000891 B90B00                  		mov	cx, 11
 13413 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 13414 00000897 F3A4                    		rep movsb
 13415 00000899 B108                    		mov	cl, 8		; di = di+136
 13416 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 13417 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 13418 000008A0 F3A4                    		rep movsb
 13419 000008A2 5E                      		pop	si
 13420 000008A3 5F                      		pop	di
 13421 000008A4 58                      		pop	ax
 13422 000008A5 59                      		pop	cx
 13423                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 13424                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 13425 000008A6 C3                      		retn
 13426                                  %endif
 13427                                  		;;;
 13428                                  	
 13429                                  ; ---------------------------------------------------------------------------
 13430                                  
 13431                                  mmi_not_ext:				
 13432 000008A7 F9                      		stc
 13433 000008A8 C3                      		retn
 13434                                  
 13435                                  ; =============== S U B	R O U T	I N E =======================================
 13436                                  
 13437                                  ; 15/10/2022
 13438                                  ; --------------------------------------------------------------
 13439                                  ; read in the fat sector and get the media byte from it.
 13440                                  ; input : es:di -> bds
 13441                                  ; output:
 13442                                  ;	  carry set if an error occurs, ax contains error code.
 13443                                  ;	  otherwise, ah contains media byte on exit
 13444                                  ; --------------------------------------------------------------
 13445                                  
 13446                                  readfat:	
 13447                                  		;mov	dh, 0
 13448                                  		; 10/12/2022
 13449 000008A9 30F6                    		xor	dh, dh
 13450 000008AB B90200                  		mov	cx, 2		; head 0
 13451                                  					; cylinder 0, sector 2
 13452 000008AE E80500                  		call	read_sector
 13453 000008B1 7202                    		jb	short bad_fat_ret
 13454 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 13455                                  bad_fat_ret:				
 13456 000008B5 C3                      		retn
 13457                                  
 13458                                  ; =============== S U B	R O U T	I N E =======================================
 13459                                  
 13460                                  ; 15/10/2022
 13461                                  
 13462                                  ; ---------------------------------------------------------------------------
 13463                                  ; read a single sector into the temp buffer.
 13464                                  ; perform three retries in case of error.
 13465                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 13466                                  ;		cx has sector and cylinder
 13467                                  ;		dh has head
 13468                                  ;		es:di has bds
 13469                                  ;		ds has Bios_Data
 13470                                  ;
 13471                                  ;   outputs:	carry clear
 13472                                  ;		    Bios_Data:bx point to sector
 13473                                  ;		       (note: some callers assume location of buffer)
 13474                                  ;
 13475                                  ;		carry set
 13476                                  ;		    ax has rom error code
 13477                                  ;
 13478                                  ; register bp is preserved.
 13479                                  ; ---------------------------------------------------------------------------
 13480                                  
 13481                                  ; 10/03/2019 - Retro DOS v4.0
 13482                                  ; 22/12/2023 - Retro DOS v5.0
 13483                                  
 13484                                  		; 19/10/2022
 13485                                  read_sector:
 13486 000008B6 55                      		push	bp
 13487 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 13488 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13489 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 13490                                  rd_ret:
 13491 000008C1 06                      		push	es
 13492 000008C2 1E                      		push	ds
 13493 000008C3 07                      		pop	es
 13494 000008C4 B80102                  		mov	ax, 201h
 13495 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13496                                  					; AL = number of sectors to read, CH = track, CL = sector
 13497                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13498                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13499 000008C9 07                      		pop	es
 13500 000008CA 734A                    		jnb	short okret2
 13501                                  rd_rty:
 13502 000008CC E81205                  		call	again		; reset	disk, decrement	bp, preserve ax
 13503 000008CF 7442                    		jz	short err_rd_ret
 13504                                  
 13505                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13506 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 13507                                  		;test	byte [es:di+23h], 1
 13508                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 13509                                  					; fnon_removable
 13510 000008D6 75E9                    		jnz	short rd_ret
 13511 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13512 000008DD 7510                    		jnz	short rd_skip1_dpt
 13513 000008DF 50                      		push	ax
 13514 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 13515 000008E1 C536[2D01]              		lds	si, [dpt]
 13516                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13517                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 13518                                  		;			; NORMSETTLE
 13519                                  		; 12/12/2022
 13520 000008E5 B00F                    		mov	al, 15
 13521 000008E7 864409                  		xchg	al, [si+9]
 13522                                  		; 
 13523 000008EA 1F                      		pop	ds
 13524 000008EB A2[2A01]                		mov	[save_head_sttl], al
 13525 000008EE 58                      		pop	ax
 13526                                  rd_skip1_dpt:
 13527 000008EF 06                      		push	es
 13528 000008F0 1E                      		push	ds
 13529 000008F1 07                      		pop	es
 13530 000008F2 B80102                  		mov	ax, 201h
 13531 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13532                                  					; AL = number of sectors to read, CH = track, CL = sector
 13533                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13534                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13535 000008F7 07                      		pop	es
 13536 000008F8 9C                      		pushf
 13537 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13538 000008FE 750E                    		jnz	short rd_skip2_dpt
 13539 00000900 50                      		push	ax
 13540 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 13541 00000904 1E                      		push	ds
 13542 00000905 C536[2D01]              		lds	si, [dpt]
 13543 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13544 0000090C 1F                      		pop	ds
 13545 0000090D 58                      		pop	ax
 13546                                  rd_skip2_dpt:
 13547 0000090E 9D                      		popf
 13548 0000090F 7305                    		jnb	short okret2
 13549 00000911 EBB9                    		jmp	short rd_rty
 13550                                  ; ---------------------------------------------------------------------------
 13551                                  
 13552                                  err_rd_ret:
 13553 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 13554                                  					; return error
 13555 00000915 F9                      		stc
 13556                                  
 13557                                  ; update information pertaining to last drive accessed, time of access, last
 13558                                  ; track accessed in that drive.
 13559                                  
 13560                                  okret2:
 13561 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 13562 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 13563                                  		
 13564                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13565 0000091E 26886D78                		mov	[es:di+78h], ch
 13566                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 13567                                  					; save last track accessed on this drive
 13568                                  					; preserve flags in case error occurred
 13569 00000922 9C                      		pushf
 13570 00000923 E89B04                  		call	set_tim
 13571 00000926 9D                      		popf			; restore flags
 13572 00000927 5D                      		pop	bp
 13573 00000928 C3                      		retn
 13574                                  
 13575                                  ;----------------------------------------------------------------------------
 13576                                  ;	disk open/close routines
 13577                                  ;----------------------------------------------------------------------------
 13578                                  
 13579                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 13580 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 13581 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 13582 00000930 E871FC                  		call	SetDrive	; get bds for drive
 13583                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13584 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 13585                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 13586                                  dsk_open_exit:
 13587                                  		; 10/12/2022
 13588                                  		; cf = 0			
 13589                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13590                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13591 00000937 C3                      		retn
 13592                                  ; ---------------------------------------------------------------------------
 13593                                  
 13594                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 13595 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 13596 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 13597 0000093F E862FC                  		call	SetDrive	; get bds for drive
 13598                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13599 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 13600                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13601 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 13602                                  		; 22/12/2023
 13603 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 13604                                  		;dec	word [es:di+20h]
 13605                                  exitjx:
 13606                                  		; 10/12/2022
 13607                                  		; cf = 0
 13608                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13609                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13610 0000094D C3                      		retn
 13611                                  
 13612                                  ;----------------------------------------------------------------------------
 13613                                  ;		disk removable routine
 13614                                  ;----------------------------------------------------------------------------
 13615                                  
 13616                                  		; al is	unit #
 13617                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 13618 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 13619                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13620                                  		;test	byte [es:di+BDS.flags], fnon_removable
 13621 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 13622 00000956 74F5                    		jz	short exitjx
 13623                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 13624                                  		;;jnz	short x_bus_exit ; non_rem
 13625                                  		;jnz	short non_rem	; 15/10/2022
 13626                                  		;; 10/12/2022
 13627                                  		;; cf = 0
 13628                                  		;;clc			; CF is already ZERO here
 13629                                  		;			; 15/10/2022
 13630                                  		;retn
 13631                                  ; ---------------------------------------------------------------------------
 13632                                  
 13633                                  non_rem:
 13634                                  x_bus_exit:
 13635 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 13636                                  					; return busy status
 13637 0000095A F9                      		stc
 13638                                  dsk_ret:
 13639 0000095B C3                      		retn
 13640                                  
 13641                                  ;----------------------------------------------------------------------------
 13642                                  ;		disk i/o routines
 13643                                  ;----------------------------------------------------------------------------
 13644                                  
 13645                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 13646                                  		;mov	word [wrtverify], 103h
 13647                                  		; 19/10/2022
 13648 0000095C C706[2001]0301          		mov	word [rflag], 103h
 13649                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 13650 00000962 EB06                    		jmp	short dsk_cl
 13651                                  ; ---------------------------------------------------------------------------
 13652                                  
 13653                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 13654                                  		;mov	word [wrtverify], 3
 13655                                  		; 19/10/2022
 13656 00000964 C706[2001]0300          		mov	word [rflag], 3
 13657                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 13658                                  dsk_cl:
 13659 0000096A E8A400                  		call	diskio		; romwrite
 13660                                  ; ---------------------------------------------------------------------------
 13661                                  
 13662                                  dsk_io:
 13663 0000096D 73EC                    		jnb	short dsk_ret
 13664 0000096F E965F7                  		jmp	bc_err_cnt
 13665                                  ; ---------------------------------------------------------------------------
 13666                                  
 13667                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 13668 00000972 E89700                  		call	diskrd
 13669 00000975 EBF6                    		jmp	short dsk_io
 13670                                  
 13671                                  ; =============== S U B	R O U T	I N E =======================================
 13672                                  
 13673                                  ; 15/10/2022
 13674                                  ; 10/03/2019 - Retro DOS v4.0
 13675                                  ; 22/12/2023 - Retro DOS v5.0
 13676                                  
 13677                                  ;-----------------------------------------------------------
 13678                                  ; miscellaneous odd jump routines. 
 13679                                  ; moved out of mainline for speed.
 13680                                  
 13681                                  ; if we have a system where we have virtual drives, we need 
 13682                                  ; to prompt the user to place the correct disk in the drive.
 13683                                  ;
 13684                                  ;	assume es:di -> bds, ds:->Bios_Data
 13685                                  ;-----------------------------------------------------------
 13686                                  
 13687                                  		; 19/10/2022
 13688                                  checksingle:
 13689 00000977 50                      		push	ax
 13690 00000978 53                      		push	bx
 13691                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13692 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 13693                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 13694                                  
 13695                                  ; if hard drive, cannot change disk.
 13696                                  ; if current owner of physical drive, no need to change diskette.
 13697                                  
 13698 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 13699 00000980 7573                    		jnz	short singleret
 13700 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 13701                                  					; is there a drive sharing this	physical drive?
 13702 00000985 746E                    		jz	short singleret
 13703                                  
 13704                                  ; look for the previous owner of this physical drive
 13705                                  ; and reset its ownership flag.
 13706                                  
 13707 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13708                                  					; get physical drive number
 13709 0000098B 06                      		push	es		; preserve pointer to current bds
 13710 0000098C 57                      		push	di
 13711 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 13712                                  scan_list:
 13713 00000991 26384504                		cmp	[es:di+4], al
 13714 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 13715 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 13716                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13717 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 13718                                  		;test	[es:di+23h], bl
 13719 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 13720 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 13721                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 13722 000009A3 5F                      		pop	di		; restore pointer to current bds
 13723 000009A4 07                      		pop	es
 13724 000009A5 26085D3F                		or	[es:di+3Fh], bl
 13725                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 13726                                  
 13727                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 13728                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 13729                                  ; in this case.
 13730 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 13731 000009AE 7517                    		jnz	short not_fsetowner
 13732                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 13733 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 13734 000009B5 753E                    		jnz	short singleret
 13735 000009B7 268A4505                		mov	al, [es:di+5]
 13736                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 13737                                  					; get the DOS drive letter
 13738 000009BB 06                      		push	es
 13739 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 13740 000009C0 26A20405                		mov	[es:LSTDRV], al
 13741                                  		;mov	es:504h, al	; [es:LSTDRV]
 13742                                  					; set up sdsb
 13743 000009C4 07                      		pop	es		; restore bds pointer
 13744 000009C5 EB2E                    		jmp	short singleret
 13745                                  ; ---------------------------------------------------------------------------
 13746                                  
 13747                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 13748                                  ; we now check to see if we are in a single drive system and the application
 13749                                  ; has "cleverly" diddled the sdsb
 13750                                  
 13751                                  not_fsetowner:
 13752 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 13753 000009CC 7517                    		jnz	short ignore_sdsb
 13754 000009CE 50                      		push	ax
 13755 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 13756 000009D3 88C4                    		mov	ah, al
 13757 000009D5 06                      		push	es
 13758 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 13759 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 13760                                  		;xchg	al, es:504h	; [es:LSTDRV]
 13761                                  					; then swap(curr_drv,req_drv)
 13762 000009DF 07                      		pop	es
 13763 000009E0 38C4                    		cmp	ah, al		; else
 13764 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 13765 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 13766                                  ignore_sdsb:
 13767 000009E5 E8B310                  		call	swpdsk
 13768 000009E8 EB0B                    		jmp	short singleret
 13769                                  ; ---------------------------------------------------------------------------
 13770                                  
 13771                                  scan_skip:
 13772 000009EA 26C43D                  		les	di, [es:di]
 13773                                  		;les	di, es:[di]	; [es:di+BDS.link]
 13774                                  					; go to	next bds
 13775 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 13776 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 13777 000009F2 F9                      		stc
 13778 000009F3 5F                      		pop	di		; restore current bds
 13779 000009F4 07                      		pop	es
 13780                                  singleret:
 13781 000009F5 5B                      		pop	bx
 13782 000009F6 58                      		pop	ax
 13783 000009F7 C3                      		retn
 13784                                  
 13785                                  ; 22/12/2023
 13786                                  %if 0
 13787                                  ; ---------------------------------------------------------------------------
 13788                                  
 13789                                  baddrive:
 13790                                  		mov	al, 8		; sector not found
 13791                                  		jmp	short baddrive_ret
 13792                                  %endif
 13793                                  
 13794                                  ; ---------------------------------------------------------------------------
 13795                                  
 13796                                  unformatteddrive:
 13797 000009F8 B007                    		mov	al, 7		; unknown media
 13798                                  ;baddrive_ret:
 13799 000009FA F9                      		stc
 13800                                  ; ---------------------------------------------------------------------------
 13801                                  
 13802                                  ioret:
 13803 000009FB C3                      		retn
 13804                                  
 13805                                  ; ---------------------------------------------------------------------------
 13806                                  		
 13807                                  		; 22/12/2023 - Retro DOS v5.0
 13808                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 13809                                  
 13810 000009FC 10                      LBA_Packet:	db 16			; ...
 13811                                  					; DAP buffer
 13812 000009FD 00                                      db 0
 13813 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 13814 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 13815 00000A04 00000000                dap_lba_value:	dd 0			; ...
 13816 00000A08 00000000                		dd 0
 13817                                  
 13818                                  ; ---------------------------------------------------------------------------
 13819                                  
 13820                                  ; 15/10/2022
 13821                                  
 13822                                  ; ---------------------------------------------------------------------------
 13823                                  ;	disk i/o handler
 13824                                  ;
 13825                                  ;	al = drive number (0-6)
 13826                                  ;	ah = media descriptor
 13827                                  ;	cx = sector count
 13828                                  ;	dx = first sector (low)
 13829                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 13830                                  ;	ds = cs
 13831                                  ;	es:di = transfer address
 13832                                  ;	[rflag]=operation (2=read, 3=write)
 13833                                  ;	[verify]=1 for verify after write
 13834                                  ;
 13835                                  ;	if successful carry flag = 0
 13836                                  ;	  else cf=1 and al contains error code
 13837                                  ; ---------------------------------------------------------------------------
 13838                                  
 13839                                  		; 12/12/2023
 13840                                  		; ds = biosdata segment (cs = bioscode segment)
 13841                                  diskrd:	
 13842                                  		;mov	ds:rflag, 2	; romread
 13843                                  		; 19/10/2022
 13844 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 13845                                  
 13846                                  ; =============== S U B	R O U T	I N E =======================================
 13847                                  
 13848                                  		; 22/12/2023 - Retro DOS v5.0
 13849                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 13850                                  ; 22/12/2023
 13851                                  %if 0
 13852                                  		; 19/10/2022
 13853                                  diskio:
 13854                                  		mov	bx, di		; es:bx	= transfer address
 13855                                  		mov	[xfer_seg], es	; save transfer	segment
 13856                                  		call	SetDrive
 13857                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 13858                                  		mov	[medbyt], al
 13859                                  		;jcxz	short ioret
 13860                                  		jcxz	ioret
 13861                                  
 13862                                  ; see if the media is formatted or not by checking the flags field in
 13863                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 13864                                  ; go to the error exit at label unformatteddrive.
 13865                                  
 13866                                  		test	byte [es:di+24h], 2
 13867                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 13868                                  					; unformatted_media
 13869                                  		jnz	short unformatteddrive
 13870                                  		mov	[seccnt], cx	; save sector count
 13871                                  		mov	[spsav], sp	; save sp
 13872                                  
 13873                                  ; ensure that we are trying to access valid sectors on the drive
 13874                                  
 13875                                  		mov	ax, dx
 13876                                  		xor	si, si ; 0
 13877                                  		add	dx, cx
 13878                                  		;adc	si, 0
 13879                                  		; 02/09/2023 (PCDOS 7.1)
 13880                                  		rcl	si, 1
 13881                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 13882                                  					; 32 bit sector ?
 13883                                  		jz	short sanity32
 13884                                  		;cmp	si, 0
 13885                                  		; 02/09/2023
 13886                                  		or	si, si
 13887                                  		jnz	short baddrive
 13888                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 13889                                  		ja	short baddrive
 13890                                  		jmp	short sanityok
 13891                                  ; ---------------------------------------------------------------------------
 13892                                  
 13893                                  sanity32:
 13894                                  		add	si, [start_sec_h]
 13895                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 13896                                  		jb	short sanityok
 13897                                  		ja	short baddrive
 13898                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 13899                                  		ja	short baddrive
 13900                                  sanityok:
 13901                                  		mov	dx, [start_sec_h]
 13902                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 13903                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 13904                                  
 13905                                  ; now dx;ax have the physical first sector.
 13906                                  ; since the following procedures is going to destroy ax, let's
 13907                                  ; save it temporarily to saved_word.
 13908                                  
 13909                                  		mov	[saved_word], ax ; save the sector number (low)
 13910                                  
 13911                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 13912                                  ; will do it because we will skip the set up stuff with hard disks.
 13913                                  
 13914                                  		push	es
 13915                                  		;mov	es, [zeroseg]
 13916                                  		; 02/09/2023
 13917                                  		xor	si, si ; 0
 13918                                  		mov	es, si
 13919                                  		les	si, [es:DSKADR]
 13920                                  		;les	si, es:78h	; [es:DSKADR]
 13921                                  					; current disk parm table
 13922                                  		mov	[dpt], si
 13923                                  		mov	[dpt+2], es
 13924                                  		pop	es
 13925                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13926                                  					; fnon_removable
 13927                                  		jnz	short skip_setup
 13928                                  		call	checksingle
 13929                                  
 13930                                  ; check to see if we have previously noted a change line. the routine
 13931                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 13932                                  ; the proper error code.
 13933                                  
 13934                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 13935                                  		jz	short diskio_nochangeline ; brif not
 13936                                  		call	checklatchio	; will do a sneaky pop stack return
 13937                                  					; if a disk error occurs
 13938                                  diskio_nochangeline:			
 13939                                  		call	iosetup		; set up tables	and variables for i/o
 13940                                  
 13941                                  ; now the settle values are correct for the following code
 13942                                  
 13943                                  skip_setup:
 13944                                  
 13945                                  ; 32 bit sector calculation.
 13946                                  ; dx:[saved_word] = starting sector number.
 13947                                  				
 13948                                  		mov	ax, dx
 13949                                  		xor	dx, dx
 13950                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13951                                  					 ; divide by sec per track
 13952                                  		; 02/09/2023
 13953                                  		mov	cx, [es:di+13h]
 13954                                  		div	cx
 13955                                  		mov	[temp_h], ax
 13956                                  		mov	ax, [saved_word]
 13957                                  		div	cx ; 02/09/2023
 13958                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13959                                  					; now, [temp_h]:ax = track #, dx = sector
 13960                                  		;inc	dl		; sector number	is 1 based.
 13961                                  		; 18/12/2022
 13962                                  		inc	dx
 13963                                  		mov	[cursec], dl	; save current sector
 13964                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 13965                                  					; get number of	heads
 13966                                  		push	ax
 13967                                  		xor	dx, dx
 13968                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 13969                                  		div	cx
 13970                                  		mov	[temp_h], ax
 13971                                  		pop	ax
 13972                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 13973                                  		cmp	word [temp_h], 0
 13974                                  		ja	short baddrive_brdg
 13975                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 13976                                  		ja	short baddrive_brdg
 13977                                  		mov	[curhd], dl	; save current head
 13978                                  		mov	[curtrk], ax	; save current track
 13979                                  
 13980                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 13981                                  ; violations here. not true. we perform the operation as if everything is
 13982                                  ; symmetric; let the int 13 handler worry about the dma violations.
 13983                                  
 13984                                  		mov	ax, [seccnt]
 13985                                  		call	block		; (cas - call/ret)
 13986                                  		;call	done
 13987                                  		;retn
 13988                                  		; 18/12/2022
 13989                                  		jmp	done
 13990                                  %else
 13991                                  		;;;	; 22/12/2023
 13992                                  diskio:
 13993 00000A11 89FB                    		mov	bx, di		; al = drive number
 13994                                  					; cx = sector count
 13995                                  					; dx = first sector (low)
 13996                                  					; [start_sec_h] = first sector (high)
 13997                                  					;
 13998                                  					; es:bx = transfer address
 13999 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 14000 00000A17 E88AFB                  		call	SetDrive
 14001 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 14002 00000A1E A2[1F01]                		mov	[medbyt], al
 14003 00000A21 E3D8                    		jcxz	ioret
 14004                                  
 14005                                  ; see if the media is formatted or not by checking the flags field in
 14006                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 14007                                  ; go to the error exit at label unformatteddrive.
 14008                                  
 14009 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 14010                                  					; unformatted_media
 14011 00000A28 75CE                    		jnz	short unformatteddrive
 14012 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 14013 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 14014                                  
 14015                                  ; ensure that we are trying to access valid sectors on the drive
 14016                                  
 14017 00000A32 89D0                    		mov	ax, dx
 14018 00000A34 31F6                    		xor	si, si ; 0
 14019 00000A36 01CA                    		add	dx, cx
 14020 00000A38 D1D6                    		rcl	si, 1
 14021 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14022                                  					; > 32 bit sector ?
 14023 00000A3F 740E                    		jz	short sanity32
 14024 00000A41 09F6                    		or	si, si
 14025 00000A43 7506                    		jnz	short baddrive
 14026 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14027                                  		;ja	short baddrive
 14028                                  		;jmp	short sanityok
 14029                                  		; 22/12/2023
 14030 00000A49 7616                    		jna	short sanityok
 14031                                  ; 29/12/2023
 14032                                  ; 22/12/2023
 14033                                  ;%if 1
 14034                                  ; ---------------------------------------------------------------------------
 14035                                  
 14036                                  baddrive:
 14037 00000A4B B008                    		mov	al, 8		; sector not found
 14038                                  		;jmp	short baddrive_ret
 14039                                  ; ---------------------------------------------------------------------------
 14040                                  ;unformatteddrive:
 14041                                  		;mov	al, 7		; unknown media
 14042                                  baddrive_ret:
 14043 00000A4D F9                      		stc
 14044                                  ;ioret:
 14045 00000A4E C3                      		retn
 14046                                  ;%endif
 14047                                  
 14048                                  ; ---------------------------------------------------------------------------
 14049                                  
 14050                                  sanity32:
 14051 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 14052 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 14053 00000A57 7208                    		jb	short sanityok
 14054 00000A59 77F0                    		ja	short baddrive
 14055 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 14056 00000A5F 77EA                    		ja	short baddrive
 14057                                  sanityok:
 14058 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 14059 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14060 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14061                                  
 14062                                  ; now dx;ax have the physical first sector.
 14063                                  ; since the following procedures is going to destroy ax, let's
 14064                                  ; save it temporarily to saved_word.
 14065                                  
 14066 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 14067                                  
 14068                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 14069                                  ; will do it because we will skip the set up stuff with hard disks.
 14070                                  
 14071 00000A70 06                      		push	es
 14072 00000A71 31F6                    		xor	si, si ; 0
 14073 00000A73 8EC6                    		mov	es, si
 14074                                  		;les	si, dword ptr es:78h
 14075 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 14076                                  					; [es:DSKADR] - current disk parm table
 14077 00000A7A 8936[2D01]              		mov	[dpt], si
 14078 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 14079 00000A82 07                      		pop	es
 14080 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14081 00000A88 7510                    		jnz	short chk_13h_ext_flag
 14082 00000A8A E8EAFE                  		call	checksingle
 14083                                  
 14084                                  ; check to see if we have previously noted a change line. the routine
 14085                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 14086                                  ; the proper error code.
 14087                                  
 14088 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 14089 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 14090 00000A94 E8D210                  		call	checklatchio	; will do a sneaky pop stack return
 14091                                  					; if a disk error occurs
 14092                                  diskio_nochangeline:
 14093 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 14094                                  
 14095                                  chk_13h_ext_flag:
 14096 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 14097                                  					; LBA read/write flag
 14098 00000A9F 7539                    		jnz	short set_lbarw_1
 14099                                  		;jmp	skip_setup
 14100                                  		; 22/12/2023
 14101                                  ; ---------------------------------------------------------------------------
 14102                                  
 14103                                  ; now the settle values are correct for the following code
 14104                                  
 14105                                  skip_setup:
 14106                                  
 14107                                  ; 32 bit sector calculation.
 14108                                  ; dx:[saved_word] = starting sector number.
 14109                                  
 14110                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 14111 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 14112 00000AA2 31D2                    		xor	dx, dx
 14113 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14114                                  					; divide by sec per track
 14115 00000AA8 F7F1                    		div	cx
 14116 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 14117 00000AAB A1[9E04]                		mov	ax, [saved_word]
 14118 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 14119                                  					; now, bp:ax = track #, dx = sector
 14120                                  					; sector number is 1 based.
 14121 00000AB0 42                      		inc	dx
 14122 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 14123 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 14124                                  					; get number of heads
 14125                                  		; 22/12/2023
 14126                                  		;push	ax ; *
 14127 00000AB9 31D2                    		xor	dx, dx
 14128 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 14129 00000ABC F7F1                    		div	cx
 14130 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 14131                                  		;pop	ax ; *
 14132 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 14133 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 14134                                  		;pop	bp ; ! ; 22/12/2023
 14135                                  		;jnz	short baddrive_brdg
 14136                                  		; 22/12/2023
 14137 00000AC3 7586                    		jnz	short baddrive
 14138                                  
 14139                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 14140                                  		;jnb	short baddrive_brdg
 14141                                  		; 22/12/2023
 14142 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 14143 00000AC8 7381                    		jnb	short baddrive 
 14144                                  
 14145 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 14146 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 14147                                  
 14148                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 14149                                  ; violations here. not true. we perform the operation as if everything is
 14150                                  ; symmetric; let the int 13 handler worry about the dma violations.
 14151                                  
 14152 00000AD1 A1[2201]                		mov	ax, [seccnt]
 14153 00000AD4 E81F01                  		call	block
 14154                                  		;call	done
 14155                                  		;retn
 14156                                  		; 22/12/2023
 14157 00000AD7 E9E500                  		jmp	done
 14158                                  		
 14159                                  ; ---------------------------------------------------------------------------
 14160                                  
 14161                                  set_lbarw_1:
 14162 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 14163                                  					 ; (logical dos drive/partition)
 14164 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 14165                                  					    ; logical dos partition
 14166 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 14167 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 14168 00000AE9 7408                    		jz	short set_lbarw_2
 14169 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14170 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14171                                  
 14172                                  set_lbarw_2:
 14173 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 14174 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 14175 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 14176 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 14177 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 14178 00000B08 A1[2201]                		mov	ax, [seccnt]
 14179 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 14180 00000B0F BD0500                  		mov	bp, 5
 14181 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14182 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 14183                                  
 14184                                  set_lbarw_3:
 14185 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14186 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14187 00000B22 80C440                  		add	ah, 40h
 14188 00000B25 30C0                    		xor	al, al
 14189 00000B27 1E                      		push	ds
 14190 00000B28 0E                      		push	cs
 14191 00000B29 1F                      		pop	ds
 14192 00000B2A BE[FC09]                		mov	si, LBA_Packet
 14193 00000B2D CD13                    		int	13h		; LBA read/write
 14194 00000B2F 1F                      		pop	ds
 14195 00000B30 731A                    		jnc	short set_lbarw_7
 14196 00000B32 E8AC02                  		call	again
 14197                                  set_lbarw_9:
 14198 00000B35 7503                    		jnz	short set_lbarw_4
 14199 00000B37 E92B02                  		jmp	harderr
 14200                                  ; ---------------------------------------------------------------------------
 14201                                  
 14202                                  set_lbarw_4:
 14203                                  ;set_lbarw_9:	; 22/12/2023
 14204 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 14205 00000B3D 7505                    		jnz	short set_lbarw_5
 14206 00000B3F BD0100                  		mov	bp, 1
 14207                                  		;jmp	short set_lbarw_6
 14208                                  		; 17/04/2024
 14209 00000B42 EBD6                    		jmp	short set_lbarw_3
 14210                                  ; ---------------------------------------------------------------------------
 14211                                  
 14212                                  set_lbarw_5:
 14213                                  set_lbarw_10:	; 22/12/2023
 14214 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14215                                  set_lbarw_6:
 14216                                  set_lbarw_11:
 14217 00000B4A EBCE                    		jmp	short set_lbarw_3
 14218                                  ; ---------------------------------------------------------------------------
 14219                                  
 14220                                  set_lbarw_7:
 14221 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 14222 00000B52 7523                    		jnz	short set_lbarw_12
 14223 00000B54 B444                    		mov	ah, 44h
 14224 00000B56 1E                      		push	ds
 14225 00000B57 0E                      		push	cs
 14226 00000B58 1F                      		pop	ds
 14227 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 14228                                  					;  (DL - drive, [SI - disk address packet)
 14229 00000B5B 1F                      		pop	ds
 14230 00000B5C 7319                    		jnc	short set_lbarw_12
 14231 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 14232 00000B61 7506                    		jnz	short set_lbarw_8
 14233 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14234                                  ;set_lbarw_8:
 14235 00000B67 740E                    		jz	short set_lbarw_12
 14236                                  set_lbarw_8:
 14237 00000B69 E8CF07                  		call	ResetDisk
 14238 00000B6C 80FC11                  		cmp	ah, 11h
 14239 00000B6F 74D9                    		jz	short set_lbarw_11
 14240 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 14241                                  		;jnz	short set_lbarw_9
 14242                                  		;jmp	harderr
 14243                                  		; 22/12/2023
 14244 00000B75 EBBE                    		jmp	short set_lbarw_9
 14245                                  
 14246                                  ; ---------------------------------------------------------------------------
 14247                                  ;		; 22/12/2023
 14248                                  ;set_lbarw_9:
 14249                                  ;		cmp	ah, 0CCh
 14250                                  ;		jnz	short set_lbarw_10
 14251                                  ;		mov	bp, 1
 14252                                  ;		jmp	short set_lbarw_11
 14253                                  ; ---------------------------------------------------------------------------
 14254                                  ;		; 22/12/2023
 14255                                  ;set_lbarw_10:
 14256                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14257                                  ;set_lbarw_11:
 14258                                  ;		jmp	short set_lbarw_3
 14259                                  ; ---------------------------------------------------------------------------
 14260                                  
 14261                                  set_lbarw_12:
 14262 00000B77 31C0                    		xor	ax, ax
 14263                                  skip_dpt_setting:	; 23/12/2023
 14264 00000B79 C3                      		retn
 14265                                  		;;;	; 22/12/2023
 14266                                  %endif
 14267                                  
 14268                                  ; ---------------------------------------------------------------------------
 14269                                  
 14270                                  		; 22/12/2023
 14271                                  ;baddrive_brdg:
 14272                                  		;jmp	baddrive
 14273                                  
 14274                                  ; =============== S U B	R O U T	I N E =======================================
 14275                                  
 14276                                  ;--------------------------------------------------------------
 14277                                  ; set the drive-last-accessed flag for diskette only.
 14278                                  ; we know that the hard disk will not be removed.
 14279                                  ; es:di -> current bds.
 14280                                  ; ds -> Bios_Data
 14281                                  ; ax,cx,si are destroyed.
 14282                                  ;--------------------------------------------------------------
 14283                                  
 14284                                  		; 23/12/2023 - Retro DOS v5.0
 14285                                  
 14286                                  		; 19/10/2022
 14287                                  iosetup:
 14288 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14289 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 14290                                  
 14291                                  ; determine proper head settle values
 14292                                  
 14293 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14294 00000B86 75F1                    		jnz	short skip_dpt_setting
 14295 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 14296 00000B8B 1E                      		push	ds
 14297 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14298 00000B90 884404                  		mov	[si+4],	al
 14299                                  		
 14300                                  		;; 23/12/2023
 14301                                  		;mov	ah, al
 14302                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14303                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 14304                                  		;pop	ds
 14305                                  		;mov	[motorstartup], al
 14306                                  		;mov	[save_eot], ah
 14307                                  		; 06/04/2024
 14308 00000B93 8A640A                  		mov	ah,[si+10]
 14309 00000B96 1F                      		pop	ds
 14310 00000B97 8826[2601]              		mov	[motorstartup], ah
 14311 00000B9B A2[2B01]                		mov	[save_eot], al
 14312                                  
 14313                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 14314                                  ; motor start time to 4. this checking for every i/o is going to affect
 14315                                  ; performance across the board, but is necessary!!
 14316                                  
 14317 00000B9E 1E                      		push	ds
 14318 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14319                                  		; 23/12/2023  - Retro DOS v5.0
 14320 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 14321                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14322                                  					; ffSmall
 14323 00000BA8 7505                    		jnz	short motor_start_ok
 14324 00000BAA B004                    		mov	al, 4
 14325 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14326                                  motor_start_ok:
 14327                                  
 14328                                  ; ds:si now points to disk parameter table.
 14329                                  ; get current settle and set fast settle
 14330                                  
 14331                                  		;xor	al, al
 14332                                  		;inc	al		; ibm wants fast settle	to be 1
 14333                                  		; 18/12/2022
 14334 00000BAF 31C0                    		xor	ax, ax
 14335 00000BB1 40                      		inc	ax
 14336 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14337                                  					; get settle and set up	for fast
 14338 00000BB5 1F                      		pop	ds
 14339 00000BB6 A2[2701]                		mov	[settlecurrent], al
 14340 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 14341                                  					; someone has diddled the settle
 14342 00000BBB A2[2801]                		mov	[settleslow], al
 14343                                  		; 23/12/2023
 14344                                  ;skip_dpt_setting:
 14345 00000BBE C3                      		retn
 14346                                  
 14347                                  ; =============== S U B	R O U T	I N E =======================================
 14348                                  
 14349                                  ;--------------------------------------------------------------
 14350                                  ; set time of last access, and reset default values in the dpt.
 14351                                  ;
 14352                                  ;	  note: trashes (at least) si
 14353                                  ;--------------------------------------------------------------
 14354                                  
 14355                                  		; 23/12/2023 - Retro DOS v5.0
 14356                                  
 14357                                  		; 19/10/2022
 14358                                  done:		
 14359                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14360                                  					; fnon_removable
 14361                                  		; 23/12/2023
 14362 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14363 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 14364 00000BC6 E8F801                  		call	set_tim
 14365                                  ;diddleback:
 14366                                  ; 09/12/2022
 14367                                  diddle_back:
 14368 00000BC9 9C                      		pushf
 14369 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14370 00000BCF 7523                    		jnz	short nodiddleback
 14371 00000BD1 50                      		push	ax
 14372 00000BD2 06                      		push	es
 14373 00000BD3 C436[2D01]              		les	si, [dpt]
 14374 00000BD7 A0[2B01]                		mov	al, [save_eot]
 14375 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 14376 00000BDE A0[2701]                		mov	al, [settlecurrent]
 14377 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 14378 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14379 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 14380 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 14381 00000BF2 07                      		pop	es
 14382 00000BF3 58                      		pop	ax
 14383                                  nodiddleback:
 14384 00000BF4 9D                      		popf
 14385                                  ddbx:
 14386 00000BF5 C3                      		retn
 14387                                  
 14388                                  ; =============== S U B	R O U T	I N E =======================================
 14389                                  
 14390                                  ;--------------------------------------------------------------
 14391                                  ;read the number of sectors specified in ax,
 14392                                  ;handling track boundaries
 14393                                  ;es:di -> bds for this drive
 14394                                  ;--------------------------------------------------------------
 14395                                  
 14396                                  		; 23/12/2023 - Retro DOS v5.0
 14397                                  
 14398                                  		; 19/10/2022
 14399                                  block:	
 14400 00000BF6 09C0                    		or	ax, ax
 14401 00000BF8 74FB                    		jz	short ddbx
 14402                                  		; 23/12/2023
 14403 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14404                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14405                                  					    ; fnon_removable
 14406 00000BFF 740D                    		jz	short block_floppy
 14407                                  
 14408                                  ; check	to see if multi	track operation	is allowed. if not
 14409                                  ; we have to go	to the block_floppy below to break up the operation.
 14410                                  
 14411 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 14412                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 14413 00000C06 7406                    		jz	short block_floppy
 14414 00000C08 E82800                  		call	Disk
 14415 00000C0B 31C0                    		xor	ax, ax
 14416 00000C0D C3                      		retn
 14417                                  ; ---------------------------------------------------------------------------
 14418                                  
 14419                                  block_floppy:
 14420                                  
 14421                                  ; read at most 1 track worth. perform minimization at sector / track
 14422                                  
 14423 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 14424                                  		;inc	cl
 14425                                  		; 23/12/2023
 14426 00000C12 41                      		inc	cx
 14427 00000C13 2A0E[3101]              		sub	cl, [cursec]
 14428 00000C17 30ED                    		xor	ch, ch
 14429 00000C19 39C8                    		cmp	ax, cx
 14430 00000C1B 7302                    		jnb	short gotmin
 14431 00000C1D 89C1                    		mov	cx, ax
 14432                                  gotmin:
 14433                                  
 14434                                  ; ax is the requested number of sectors to read
 14435                                  ; cx is the number that we can do on this track
 14436                                  
 14437 00000C1F 50                      		push	ax
 14438 00000C20 51                      		push	cx
 14439 00000C21 89C8                    		mov	ax, cx
 14440 00000C23 E80D00                  		call	Disk
 14441 00000C26 59                      		pop	cx
 14442 00000C27 58                      		pop	ax
 14443                                  
 14444                                  ; cx is the number of sectors just transferred
 14445                                  
 14446 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 14447 00000C2A D0E1                    		shl	cl, 1
 14448 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 14449 00000C2E EBC6                    		jmp	short block
 14450                                  dskerr_brdg:
 14451 00000C30 E9F400                  		jmp	dskerr
 14452                                  
 14453                                  ; =============== S U B	R O U T	I N E =======================================
 14454                                  
 14455                                  ; 15/10/2022
 14456                                  
 14457                                  ;--------------------------------------------------------------
 14458                                  ;perform disk i/o with retries
 14459                                  ; al = number of sectors (1-8, all on one track)
 14460                                  ; es:di point to drive parameters
 14461                                  ; xfer_seg:bx = transfer address 
 14462                                  ;		(must not cross a 64k physical boundary)
 14463                                  ; [rflag] = 2 if read, 3 if write
 14464                                  ; [verify] = 0 for normal, 1 for verify after write
 14465                                  ;--------------------------------------------------------------
 14466                                  
 14467                                  		; 18/04/2024
 14468                                  		; 23/12/2023 - Retro DOS v5.0
 14469                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 14470                                  
 14471                                  		; 19/10/2022
 14472                                  Disk:
 14473                                  
 14474                                  ; Check for hard disk format and
 14475                                  ; if TRUE then set max error count to 2
 14476                                  
 14477 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 14478                                  					; set up retry count
 14479                                  		; 18/04/2024
 14480                                  		;; 23/12/2023
 14481                                  		;mov	cl, [es:di+3Fh]
 14482                                  		;and	cx, 1
 14483 00000C36 26F6453F01              		test	byte [es:di+3Fh], 1
 14484                                  		;test	byte [es:di+23h], 1 
 14485                                  					; [es:di+BDS.flags], fnon_removable
 14486 00000C3B 7408                    		jz	short GetRdWrInd
 14487 00000C3D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 14488 00000C40 7403                    		jz	short GetRdWrInd
 14489 00000C42 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 14490                                  GetRdWrInd:				
 14491 00000C45 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14492 00000C49 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 14493 00000C4D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14494                                  ;retry:
 14495                                  ; 09/12/2022
 14496                                  _retry:
 14497 00000C51 50                      		push	ax
 14498 00000C52 8B16[3301]              		mov	dx, [curtrk]
 14499                                  		;; 23/12/2023
 14500                                  		;jcxz	disk_not_mini
 14501                                  		; 18/04/2024
 14502 00000C56 26F6453F01              		test	byte [es:di+3Fh], 1
 14503                                  		;test	byte [es:di+23h], 1
 14504 00000C5B 740B                    		jz	short disk_not_mini
 14505                                  
 14506                                  		; 23/12/2023
 14507 00000C5D 26837D7901              		cmp	word [es:di+79h], 1
 14508                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 14509                                  					; is this a mini disk? ((logical dos partition))
 14510 00000C62 7504                    		jnz	short disk_not_mini ; no. continue to next.
 14511                                  		; 23/12/2023
 14512 00000C64 2603557B                		add     dx, [es:di+7Bh]
 14513                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 14514                                  					; add hidden trks.
 14515                                  disk_not_mini:
 14516 00000C68 D0CE                    		ror	dh, 1
 14517 00000C6A D0CE                    		ror	dh, 1
 14518 00000C6C 0A36[3101]              		or	dh, [cursec]
 14519 00000C70 89D1                    		mov	cx, dx
 14520 00000C72 86CD                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 14521 00000C74 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 14522 00000C78 268A5504                		mov	dl, [es:di+4]	; physical drive number
 14523                                  					; [es:di+BDS.drivenum]
 14524                                  		; 23/12/2023
 14525 00000C7C 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 14526                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 14527 00000C81 7411                    		jz	short do_fast	; hard files use fast speed
 14528                                  
 14529                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 14530                                  ; this helps when we have just done a reset disk operation and the head has
 14531                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 14532                                  
 14533 00000C83 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 14534                                  		;jz	short do_writej
 14535                                  		; 23/12/2023
 14536 00000C88 746A                    		jz	short do_write
 14537 00000C8A 80FC02                  		cmp	ah, 2		; romread
 14538 00000C8D 7405                    		jz	short do_fast
 14539 00000C8F 80FC04                  		cmp	ah, 4		; romverify
 14540                                  		;jz	short do_fast
 14541                                  		; 23/12/2023
 14542 00000C92 7560                    		jnz	short do_write
 14543                                  ;do_writej:
 14544                                  
 14545                                  ; reads always fast, unless we have just done a disk reset operation
 14546                                  			
 14547                                  		;jmp	short do_write	; reads	always fast
 14548                                  ; ---------------------------------------------------------------------------
 14549                                  
 14550                                  do_fast:
 14551 00000C94 E80501                  		call	fastspeed	; change settle	mode
 14552                                  testerr:
 14553 00000C97 7297                    		jb	short dskerr_brdg
 14554                                  
 14555                                  		; 23/12/2023 Retro DOS v5.0
 14556                                  		; (PCDOS 7.1 IBMBIO.COM)
 14557 00000C99 83FD05                  		cmp	bp, 5		; is there retry ?
 14558 00000C9C 7505                    		jnz	short testerror	; yes
 14559 00000C9E 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 14560 00000CA1 748D                    		jz	short dskerr_brdg
 14561                                  testerror:
 14562                                  
 14563                                  ; set drive and track of last access
 14564                                  
 14565 00000CA3 8816[7600]              		mov	[step_drv], dl
 14566                                  		; 23/12/2023
 14567 00000CA7 26886D78                		mov	[es:di+78h], ch
 14568                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14569                                  no_set:
 14570                                  		;cmp	word [wrtverify], 103h
 14571 00000CAB 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 14572 00000CB1 7452                    		jz	short doverify
 14573                                  noverify:
 14574 00000CB3 58                      		pop	ax
 14575                                  
 14576                                  ; check the flags word in the bds to see if the drive is non removable
 14577                                  ; if not we needn't do anything special
 14578                                  ; if it is a hard disk then check to see if multi-track operation
 14579                                  ; is specified. if specified we don't have to calculate for the next
 14580                                  ; track since we are already done. so we can go to the exit of this routine.
 14581                                  
 14582                                  		; 23/12/2023
 14583 00000CB4 26F6453F01              		test	byte [es:di+3Fh], 1
 14584                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14585                                  					; fnon_removable
 14586 00000CB9 7407                    		jz	short its_removable
 14587 00000CBB F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 14588 00000CC0 7530                    		jnz	short disk_ret
 14589                                  its_removable:
 14590 00000CC2 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 14591 00000CC5 30E4                    		xor	ah, ah
 14592 00000CC7 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 14593 00000CCB 00C1                    		add	cl, al
 14594 00000CCD 880E[3101]              		mov	[cursec], cl
 14595 00000CD1 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 14596                                  					; see if sector/track limit reached
 14597 00000CD5 761B                    		jbe	short disk_ret
 14598 00000CD7 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 14599 00000CDC 8A36[3201]              		mov	dh, [curhd]
 14600 00000CE0 FEC6                    		inc	dh
 14601 00000CE2 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 14602 00000CE6 7206                    		jb	short noxor
 14603 00000CE8 30F6                    		xor	dh, dh
 14604 00000CEA FF06[3301]              		inc	word [curtrk]
 14605                                  noxor:
 14606 00000CEE 8836[3201]              		mov	[curhd], dh
 14607                                  disk_ret:
 14608 00000CF2 F8                      		clc
 14609 00000CF3 C3                      		retn
 14610                                  ; ---------------------------------------------------------------------------
 14611                                  
 14612                                  ; 15/10/2022
 14613                                  
 14614                                  ; 24/12/2023 - Retro DOS v5.0
 14615                                  
 14616                                  ;--------------------------------------------------------------
 14617                                  ; the request is for write. determine if we are talking about
 14618                                  ; the same track and drive. if so, use the fast speed.
 14619                                  ;--------------------------------------------------------------
 14620                                  
 14621                                  do_write:
 14622 00000CF4 3A16[7600]              		cmp	dl, [step_drv]
 14623 00000CF8 7506                    		jnz	short do_norm	; we have changed drives
 14624                                  		; 24/12/2023
 14625 00000CFA 263A6D78                		cmp	ch, [es:di+78h]
 14626                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 14627 00000CFE 7494                    		jz	short do_fast	; we are still on the same track
 14628                                  do_norm:
 14629 00000D00 E87500                  		call	normspeed
 14630 00000D03 EB92                    		jmp	short testerr
 14631                                  ; ---------------------------------------------------------------------------
 14632                                  
 14633                                  ;--------------------------------------------------------------
 14634                                  ; we have a verify request also. get state info and go verify
 14635                                  ;--------------------------------------------------------------
 14636                                  
 14637                                  doverify:
 14638 00000D05 58                      		pop	ax
 14639 00000D06 50                      		push	ax
 14640 00000D07 B404                    		mov	ah, 4
 14641 00000D09 E89000                  		call	fastspeed
 14642 00000D0C 73A5                    		jnb	short noverify
 14643                                  
 14644                                  ; check the error returned in ah to see if it is a soft ecc error.
 14645                                  ; if it is not we needn't do anything special. if it is a soft
 14646                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 14647                                  ; this retry count becomes 0 then we just ignore the error and go to
 14648                                  ; no_verify but if we can still try then we call the routine to reset
 14649                                  ; the disk and go to dskerr1 to retry the operation.
 14650                                  
 14651 00000D0E 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 14652 00000D11 750B                    		jnz	short not_softecc_err
 14653 00000D13 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14654 00000D17 749A                    		jz	short noverify	; no more retry
 14655 00000D19 E81F06                  		call	ResetDisk	; reset	disk
 14656 00000D1C EB3E                    		jmp	short dskerr1	; retry
 14657                                  ; ---------------------------------------------------------------------------
 14658                                  
 14659                                  not_softecc_err:			; other error.
 14660 00000D1E E81A06                  		call	ResetDisk
 14661 00000D21 FF0E[A304]              		dec	word [vretry_cnt]
 14662 00000D25 EB1C                    		jmp	short dskerr0
 14663                                  ; ---------------------------------------------------------------------------
 14664                                  
 14665                                  ;--------------------------------------------------------------
 14666                                  ; need to special case the change-line error ah=06h.
 14667                                  ; if we get this, we need to return it.
 14668                                  ;--------------------------------------------------------------
 14669                                  
 14670                                  dskerr:
 14671 00000D27 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 14672 00000D2C 7403                    		jz	short dskerr_nochangeline ; brif not
 14673 00000D2E E8BE0E                  		call	checkio
 14674                                  dskerr_nochangeline:
 14675 00000D31 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 14676 00000D36 7508                    		jnz	short dochkagain ; no more retry.
 14677 00000D38 BD0100                  		mov	bp, 1
 14678 00000D3B C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 14679                                  dochkagain:
 14680 00000D40 E89E00                  		call	again
 14681                                  dskerr0:
 14682 00000D43 7420                    		jz	short harderr
 14683                                  		; 24/12/2023
 14684 00000D45 26F6453F01              		test	byte [es:di+3Fh], 1
 14685                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14686                                  					; fnon_removable
 14687 00000D4A 7505                    		jnz	short skip_timeout_chk
 14688 00000D4C 80FC80                  		cmp	ah, 80h		; timeout?
 14689 00000D4F 7414                    		jz	short harderr
 14690                                  skip_timeout_chk:
 14691 00000D51 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 14692 00000D54 740A                    		jz	short write_fault_err ;	then, don't retry.
 14693 00000D56 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 14694                                  					; set soft_ecc_cnt back	to maxerr
 14695                                  dskerr1:
 14696 00000D5C 58                      		pop	ax		; restore sector count
 14697                                  		;jmp	retry
 14698                                  		; 09/12/2022
 14699 00000D5D E9F1FE                  		jmp	_retry
 14700                                  ; ---------------------------------------------------------------------------
 14701                                  
 14702                                  write_fault_err:
 14703 00000D60 BD0100                  		mov	bp, 1		; just retry only once
 14704                                  					; for write fault error.
 14705 00000D63 EBF7                    		jmp	short dskerr1
 14706                                  
 14707                                  		; fall into harderr
 14708                                  ; ---------------------------------------------------------------------------
 14709                                  
 14710                                  ; entry point for routines that call maperror themselves
 14711                                  
 14712                                  harderr:
 14713 00000D65 E84100                  		call	maperror
 14714                                  harderr2:
 14715 00000D68 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 14716                                  					; force a media check through rom
 14717 00000D6D 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 14718 00000D71 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 14719                                  
 14720                                  ; since we are performing a non-local goto, restore the disk parameters
 14721                                  
 14722                                  		;jmp	diddleback
 14723                                  		; 09/12/2022
 14724 00000D75 E951FE                  		jmp	diddle_back
 14725                                  
 14726                                  ; =============== S U B	R O U T	I N E =======================================
 14727                                  
 14728                                  ; change settle value from settlecurrent to whatever is appropriate
 14729                                  ; note that this routine is never called for a fixed disk.
 14730                                  
 14731                                  		; 19/10/2022
 14732                                  normspeed:
 14733 00000D78 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14734 00000D7D 751D                    		jnz	short fastspeed
 14735 00000D7F 06                      		push	es
 14736 00000D80 50                      		push	ax
 14737 00000D81 A0[2801]                		mov	al, [settleslow]
 14738 00000D84 C436[2D01]              		les	si, [dpt]	; current disk parm table
 14739 00000D88 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14740 00000D8C 58                      		pop	ax
 14741 00000D8D 07                      		pop	es
 14742 00000D8E E80B00                  		call	fastspeed
 14743                                  		; 24/12/2023
 14744                                  		;push	es
 14745                                  		;les	si, [dpt]
 14746                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14747                                  		;			; 1 is fast settle value
 14748                                  		;pop	es
 14749 00000D91 1E                      		push	ds
 14750 00000D92 C536[2D01]              		lds	si, [dpt]
 14751 00000D96 C6440901                		mov	byte [si+9], 1
 14752 00000D9A 1F                      		pop	ds
 14753                                  
 14754 00000D9B C3                      		retn
 14755                                  
 14756                                  ; =============== S U B	R O U T	I N E =======================================
 14757                                  
 14758                                  ; if the drive has been marked as too big (i.e. starting sector of the
 14759                                  ; partition is > 16 bits, then always return drive not ready.
 14760                                  
 14761                                  		; 24/12/2023 - Retro DOS v5.0
 14762                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 14763                                  fastspeed:
 14764                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 14765                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 14766                                  		;			; ftoobig
 14767                                  		;jnz	short notready
 14768 00000D9C 06                      		push	es
 14769 00000D9D 8E06[A804]              		mov	es, [xfer_seg]
 14770 00000DA1 CD13                    		int	13h		; DISK -
 14771 00000DA3 8C06[A804]              		mov	[xfer_seg], es
 14772 00000DA7 07                      		pop	es
 14773 00000DA8 C3                      		retn
 14774                                  ; ---------------------------------------------------------------------------
 14775                                  ;		; 24/12/2023
 14776                                  ;notready:
 14777                                  		;stc
 14778                                  		;mov	ah, 80h
 14779                                  		;retn
 14780                                  
 14781                                  ; =============== S U B	R O U T	I N E =======================================
 14782                                  
 14783                                  ; map error returned by rom in ah into corresponding code to be returned to
 14784                                  ; dos in al. trashes di. guaranteed to set carry.
 14785                                  
 14786                                  maperror:
 14787 00000DA9 51                      		push	cx
 14788 00000DAA 06                      		push	es
 14789 00000DAB 1E                      		push	ds		; set es=Bios_Data
 14790 00000DAC 07                      		pop	es
 14791 00000DAD 88E0                    		mov	al, ah		; put error code in al
 14792 00000DAF A2[4601]                		mov	[lsterr], al	; terminate list with error code
 14793                                  		; 24/12/2023
 14794 00000DB2 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 14795                                  		;mov	cx, 9		; numerr (= errout-errin)
 14796                                  					; number of possible error conditions
 14797 00000DB5 BF[3C01]                		mov	di, errin	; point to error conditions
 14798 00000DB8 F2AE                    		repne scasb
 14799                                  
 14800                                  		; 24/12/2023
 14801                                  		; 02/09/2023
 14802 00000DBA 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 14803                                  		; 10/12/2022
 14804                                  		;mov	al, [di+8]	; [di+numerr-1]
 14805                                  					; get translation
 14806                                  		; 19/10/2022 - Temporary ! 
 14807                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 14808 00000DBD 07                      		pop	es
 14809 00000DBE 59                      		pop	cx
 14810 00000DBF F9                      		stc			; flag error condition
 14811 00000DC0 C3                      		retn
 14812                                  
 14813                                  ; =============== S U B	R O U T	I N E =======================================
 14814                                  
 14815                                  ; set the time of last access for this drive.
 14816                                  ; this is done only for removable media. es:di -> bds
 14817                                  
 14818                                  set_tim:
 14819 00000DC1 50                      		push	ax
 14820 00000DC2 E86CF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 14821                                  
 14822                                  ; we have the new time. if we see that the time has passed,
 14823                                  ; then we reset the threshold counter...
 14824                                  
 14825                                  		; 24/12/2023 - Retro DOS v5.0
 14826 00000DC5 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 14827                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 14828 00000DC9 7506                    		jne	short setaccess
 14829                                  		; 24/12/2023
 14830 00000DCB 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 14831                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 14832                                  		;jz	short done_set
 14833                                  		; 12/12/2022
 14834 00000DCF 740E                    		je	short done_set2
 14835                                  setaccess:
 14836 00000DD1 C606[1D01]00            		mov	byte [accesscount], 0
 14837                                  		
 14838                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14839 00000DD6 26895579                		mov	[es:di+79h], dx
 14840 00000DDA 26894D7B                		mov	[es:di+7Bh], cx
 14841                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 14842                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 14843                                  done_set:
 14844 00000DDE F8                      		clc
 14845                                  done_set2:		; 12/12/2022
 14846 00000DDF 58                      		pop	ax
 14847 00000DE0 C3                      		retn
 14848                                  
 14849                                  ; =============== S U B	R O U T	I N E =======================================
 14850                                  
 14851                                  ; this routine is called if an error occurs while formatting or verifying.
 14852                                  ; it resets the drive,and decrements the retry count.
 14853                                  ; on entry - ds:di - points to bds for the drive
 14854                                  ;	     bp    - contains retry count
 14855                                  ; on exit    flags indicate result of decrementing retry count
 14856                                  
 14857                                  again:
 14858 00000DE1 E85705                  		call	ResetDisk
 14859 00000DE4 80FC06                  		cmp	ah, 6
 14860 00000DE7 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 14861                                  					; do not decrement retry count.
 14862 00000DE9 4D                      		dec	bp		; decrement retry count
 14863 00000DEA C3                      		retn
 14864                                  ; ---------------------------------------------------------------------------
 14865                                  
 14866                                  dont_dec_retry_count:
 14867 00000DEB 08E4                    		or	ah, ah
 14868 00000DED C3                      		retn
 14869                                  
 14870                                  ;----------------------------------------------------------------------------
 14871                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 14872                                  ;----------------------------------------------------------------------------
 14873                                  ; 24/12/2023 - Retro DOS v5.0
 14874                                  ;;;;
 14875                                  
 14876 00000DEE 00                      ioctl_drvnum:	db 0
 14877                                  
 14878                                  		; 24/12/2023
 14879                                  
 14880                                  ; =============== S U B R O U T I N E =======================================
 14881                                  
 14882                                  get_phy_drv_num:
 14883 00000DEF E8B2F7                  		call	SetDrive	; get physical drive number
 14884                                  					; INPUT: al = logical drive number (BDS.drivelet)
 14885                                  					; OUTPUT: physical drive number (BDS.drivenum)
 14886 00000DF2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14887 00000DF6 C3                      		retn
 14888                                  
 14889                                  ; =============== S U B R O U T I N E =======================================
 14890                                  
 14891                                  		; 24/12/2023
 14892                                  ioctl_output:
 14893 00000DF7 E8F5FF                  		call	get_phy_drv_num
 14894 00000DFA 2E8816[EE0D]            		mov	[cs:ioctl_drvnum], dl
 14895 00000DFF B441                    		mov	ah, 41h
 14896 00000E01 BBAA55                  		mov	bx, 55AAh
 14897 00000E04 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 14898                                  					; BX = 55AAh, DL = drive number
 14899                                  					; Return: CF set if not supported
 14900                                  					; AH = extensions version
 14901                                  					; BX = AA55h
 14902                                  					; CX = Interface support bit map
 14903 00000E06 7235                    		jc	short int13h_exts_err
 14904                                  ioctl_input_1:
 14905 00000E08 C43E[1200]              		les	di, [ptrsav]
 14906 00000E0C 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 14907 00000E10 723E                    		jc	short ioctl_input_2
 14908 00000E12 B80046                  		mov	ax, 4600h	; Eject removable media
 14909 00000E15 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 14910 00000E18 7417                    		je	short ioctl_output_1
 14911 00000E1A 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 14912 00000E1E 751B                    		jne	short ioctl_output_2
 14913 00000E20 B80145                  		mov	ax, 4501h	; Lock/unlock media
 14914                                  					; (al, 0 = lock, 1 = unlock)
 14915 00000E23 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 14916 00000E28 7407                    		jz	short ioctl_output_1
 14917 00000E2A 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 14918 00000E2E 750B                    		jne	short ioctl_output_2
 14919 00000E30 48                      		dec	ax
 14920                                  ioctl_output_1:
 14921 00000E31 2E8A16[EE0D]            		mov	dl, [cs:ioctl_drvnum]
 14922 00000E36 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14923 00000E38 7203                    		jc	short int13h_exts_err
 14924                                  ioctl_lock_err:
 14925                                  		; cf=0
 14926                                  ioctl_output_ret:
 14927                                  		;clc
 14928 00000E3A C3                      		retn
 14929                                  ; ---------------------------------------------------------------------------
 14930                                  
 14931                                  ioctl_output_2:
 14932 00000E3B B401                    		mov	ah, 1
 14933                                  int13h_exts_err:
 14934 00000E3D 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 14935 00000E40 74F8                    		je	short ioctl_lock_err
 14936 00000E42 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 14937 00000E45 74F3                    		je	short ioctl_lock_err
 14938 00000E47 E9DAF7                  		jmp	err_exitj
 14939                                  
 14940                                  ; =============== S U B R O U T I N E =======================================
 14941                                  
 14942                                  		; 24/12/2023
 14943                                  ioctl_input:
 14944 00000E4A E8A2FF                  		call	get_phy_drv_num
 14945 00000E4D F9                      		stc
 14946 00000E4E EBB8                    		jmp	short ioctl_input_1
 14947                                  ioctl_input_2:
 14948 00000E50 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 14949 00000E54 75E5                    		jne	short ioctl_output_2
 14950 00000E56 B80245                  		mov	ax, 4502h	; get lock status
 14951 00000E59 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14952 00000E5B 72E0                    		jc	short int13h_exts_err
 14953 00000E5D BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 14954 00000E60 3C00                    		cmp	al, 0		; not locked
 14955 00000E62 7402                    		jz	short ioctl_input_3
 14956 00000E64 B30E                    		mov	bl, 0Eh
 14957                                  ioctl_input_3:
 14958 00000E66 53                      		push	bx
 14959 00000E67 B404                    		mov	ah, 4
 14960 00000E69 B90101                  		mov	cx, 101h
 14961 00000E6C B601                    		mov	dh, 1
 14962 00000E6E CD13                    		int	13h		; DISK - VERIFY SECTORS
 14963                                  					; AL = number of sectors to verify, CH = track, CL = sector
 14964                                  					; DH = head, DL = drive
 14965                                  					; Return: CF set on error, AH = status
 14966                                  					; AL = number of sectors verified
 14967 00000E70 5B                      		pop	bx
 14968 00000E71 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 14969 00000E74 740B                    		je	short ioctl_input_5
 14970 00000E76 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 14971 00000E79 7406                    		je	short ioctl_input_5
 14972                                  ioctl_input_4:
 14973 00000E7B 26895D01                		mov	[es:di+1], bx
 14974 00000E7F EBB9                    		jmp	short ioctl_lock_err
 14975                                  ioctl_input_5:
 14976 00000E81 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 14977                                  					; bit 11 (not ready -removable media error- bit)
 14978                                  					; if bit 11 = 0, another error (except 31h and 80h)
 14979 00000E85 EBF4                    		jmp	short ioctl_input_4
 14980                                  
 14981                                  ; ---------------------------------------------------------------------------
 14982                                  ;;;;
 14983                                  
 14984                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14985                                  
 14986                                  ;----------------------------------------------------------------------------
 14987                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 14988                                  ;----------------------------------------------------------------------------
 14989                                  ; 11/03/2019 - Retro DOS v4.0
 14990                                  
 14991                                  ; 18/03/2019
 14992                                  
 14993                                  ; ==========================================================================
 14994                                  ;
 14995                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 14996                                  ;
 14997                                  ;      This function is intended to give the user to control the
 14998                                  ;      bds table flags of unformatted_media bit.
 14999                                  ;      GetAccessFlag will show the status -
 15000                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 15001                                  ;						1 disk i/o allowed
 15002                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 15003                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 15004                                  ;						1 disallow disk i/o
 15005                                  ; ==========================================================================
 15006                                  
 15007                                  		; generic ioctl dispatch tables
 15008                                  
 15009                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 15010                                  
 15011                                  ; 24/12/2023
 15012                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 15013                                  
 15014                                  ; ---------------------------------------------------------------------------
 15015                                  		; 24/12/2023
 15016                                  		;db 0
 15017                                  ; 09/12/2022 
 15018                                  %if 0
 15019                                  
 15020                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 15021                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 15022                                  		dw 0EE8h	; 61h	; ReadTrack
 15023                                  		dw 0E86h	; 62h	; VerifyTrack
 15024                                  		dw 0CA3h	 	; Cmd_Error_Proc
 15025                                  		dw 0CA3h		; Cmd_Error_Proc
 15026                                  		dw 0CA3h		; Cmd_Error_Proc
 15027                                  		dw 119Ah	; 66h	; GetMediaId
 15028                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 15029                                  		dw 12C1h	; 68h	; SenseMediaType
 15030                                  
 15031                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 15032                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 15033                                  		dw 0EEFh	; 41h	; WriteTrack
 15034                                  		dw 0DC1h	; 42h	; FormatTrack
 15035                                  		dw 0CA3h		; Cmd_Error_Proc
 15036                                  		dw 0CA3h		; Cmd_Error_Proc
 15037                                  		dw 0CA3h		; Cmd_Error_Proc
 15038                                  		dw 11D2h	; 46h	; SetMediaId
 15039                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 15040                                  
 15041                                  %endif
 15042                                  		; 24/12/2023 - Retro DOS v5.0
 15043                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 15044                                  
 15045                                  		; 09/12/2022
 15046                                  IoReadJumpTable:
 15047 00000E87 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 15048 00000E88 [1A0F]                  		dw GetDeviceParameters	; 60h
 15049 00000E8A [9311]                  		dw ReadTrack		; 61h
 15050 00000E8C [3311]                  		dw VerifyTrack		; 62h
 15051 00000E8E [160F]                  		dw Cmd_Error_Proc
 15052 00000E90 [160F]                  		dw Cmd_Error_Proc
 15053 00000E92 [160F]                  		dw Cmd_Error_Proc
 15054 00000E94 [1214]                  		dw GetMediaId		; 66h
 15055 00000E96 [EF14]                  		dw GetAccessFlag	; 67h ; unpublished function
 15056 00000E98 [4415]                  		dw SenseMediaType	; 68h
 15057                                  		; 24/12/2023
 15058                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15059 00000E9A [160F]                  		dw Cmd_Error_Proc	; 69h
 15060 00000E9C [160F]                  		dw Cmd_Error_Proc	; 6Ah
 15061 00000E9E [160F]                  		dw Cmd_Error_Proc
 15062 00000EA0 [160F]                  		dw Cmd_Error_Proc
 15063 00000EA2 [160F]                  		dw Cmd_Error_Proc
 15064 00000EA4 [160F]                  		dw Cmd_Error_Proc	; 6Eh
 15065 00000EA6 [C815]                  		dw GetDrvMapInfo	; 6Fh
 15066                                  
 15067                                  IoWriteJumpTable:
 15068 00000EA8 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 15069 00000EA9 [7A0F]                  		dw SetDeviceParameters	; 40h
 15070 00000EAB [9A11]                  		dw WriteTrack		; 41h
 15071 00000EAD [6D10]                  		dw FormatTrack		; 42h
 15072 00000EAF [160F]                  		dw Cmd_Error_Proc
 15073 00000EB1 [160F]                  		dw Cmd_Error_Proc
 15074 00000EB3 [160F]                  		dw Cmd_Error_Proc
 15075 00000EB5 [5214]                  		dw SetMediaId		; 46h
 15076 00000EB7 [0415]                  		dw SetAccessFlag	; 47h ; unpublished function
 15077                                  		; 24/12/2023
 15078                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15079 00000EB9 [8115]                  		dw SetLockState		; 48h
 15080 00000EBB [9815]                  		dw EjectMedia		; 49h	
 15081                                  		
 15082                                  ; ==========================================================================
 15083                                  ; IOC_DC_Table
 15084                                  ;
 15085                                  ; This table contains all of the valid generic IOCtl Minor codes for
 15086                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 15087                                  ; Added for 5.00
 15088                                  ; ==========================================================================
 15089                                  
 15090                                  		; 24/12/2023 - Retro DOS v5.0
 15091                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 15092                                  
 15093 00000EBD 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 15094 00000EBE 40                      		db 40h			; SET_DEVICE_PARAMETERS
 15095 00000EBF 61                      		db 61h			; READ_TRACK
 15096 00000EC0 41                      		db 41h			; WRITE_TRACK
 15097 00000EC1 62                      		db 62h			; VERIFY_TRACK
 15098 00000EC2 42                      		db 42h			; FORMAT_TRACK
 15099 00000EC3 66                      		db 66h			; GET_MEDIA_ID
 15100 00000EC4 46                      		db 46h			; SET_MEDIA_ID
 15101 00000EC5 67                      		db 67h			; GET_ACCESS_FLAG
 15102 00000EC6 47                      		db 47h			; SET_ACCESS_FLAG
 15103 00000EC7 68                      		db 68h			; SENSE_MEDIA_TYPE
 15104                                  		; 24/12/2023
 15105                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15106 00000EC8 48                      		db 48h			; SET_LOCK_STATE
 15107 00000EC9 49                      		db 49h			; EJECT_MEDIA
 15108 00000ECA 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 15109                                  
 15110                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 15111                                  
 15112                                  		; 24/12/2023 - Retro DOS v5.0
 15113                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 15114                                  
 15115 00000ECB 00                      new_genioctl:	db 0
 15116                                  
 15117                                  ; ---------------------------------------------------------------------------
 15118                                  
 15119                                  ; 16/10/2022
 15120                                  
 15121                                  ; ==========================================================================
 15122                                  ; Do_Generic_IOCtl: perform generic ioctl request
 15123                                  ;
 15124                                  ;    input: AL contains logical drive
 15125                                  ;
 15126                                  ;	functions are dispatched through a call. On return, carry indicates
 15127                                  ;	error code in al. Note::bES:b& ds undefined on return from
 15128                                  ;	subfunctions.
 15129                                  ;
 15130                                  ; ==========================================================================
 15131                                  
 15132                                  ; 11/03/2019
 15133                                  		; 24/12/2023 - Retro DOS v5.0
 15134                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 15135                                  
 15136                                  		; 19/10/2022
 15137                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 15138 00000ECC E8D5F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 15139                                  		
 15140                                  		; 24/12/2023
 15141                                  		;;;
 15142 00000ECF 2EC606[CB0E]00          		mov	byte [cs:new_genioctl], 0
 15143                                  					; 0, old generic ioctl function
 15144 00000ED5 06                      		push	es
 15145 00000ED6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 15146 00000EDA 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 15147                                  					; RAWIO
 15148                                  		; 24/12/2023
 15149                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15150                                  		;pop	es
 15151                                  		;jnz	short IoctlFuncErr
 15152 00000EDF 740A                    		jz	short chk_genioctl_minor
 15153 00000EE1 2EFE06[CB0E]            		inc	byte [cs:new_genioctl]
 15154                                  					; 1, new generic ioctl function (FAT32)
 15155 00000EE6 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 15156                                  				; (called only if bit 6 of attribute is set to 1)
 15157                                  chk_genioctl_minor:
 15158 00000EEB 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15159 00000EEF 07                      		pop	es
 15160 00000EF0 7525                    		jnz	short IoctlFuncErr
 15161                                  		;;;
 15162                                  
 15163                                  		; cas note: Could do the above two blocks in reverse order.
 15164                                  		; Would have to preserve al for SetDrive
 15165                                  
 15166                                  		; 10/12/2022
 15167 00000EF2 BE[870E]                		mov	si, IoReadJumpTable
 15168                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 15169                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 15170 00000EF5 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 15171 00000EF7 7503                    		jnz	short NotGenericWrite ; function is a read.
 15172                                  		; 10/12/2022
 15173 00000EF9 BE[A80E]                		mov	si, IoWriteJumpTable
 15174                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 15175                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 15176                                  NotGenericWrite:
 15177 00000EFC 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 15178 00000EFE 2C40                    		sub	al, 40h		; offset for base function
 15179 00000F00 2E3A04                  		cmp	al, [cs:si]
 15180 00000F03 7712                    		ja	short IoctlFuncErr
 15181 00000F05 98                      		cbw
 15182                                  		; 24/12/2023
 15183                                  		;shl	ax, 1
 15184 00000F06 01C0                    		add	ax, ax
 15185 00000F08 46                      		inc	si
 15186 00000F09 01C6                    		add	si, ax
 15187 00000F0B 2EFF14                  		call	near [cs:si]
 15188                                  		;call	word ptr cs:[si]
 15189 00000F0E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15190                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15191                                  					; 2C7h:30h = 70h:25A0h
 15192 00000F13 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 15193 00000F15 C3                      		retn			; Pass carry flag through to exit code
 15194                                  ; ---------------------------------------------------------------------------
 15195                                  
 15196                                  		; Cmd_Error_Proc is called as a procedure and also use
 15197                                  		; as a fall through from above
 15198                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 15199 00000F16 5A                      		pop	dx
 15200                                  IoctlFuncErr:
 15201 00000F17 E9BBF1                  		jmp	bc_cmderr
 15202                                  ; ---------------------------------------------------------------------------
 15203                                  
 15204                                  ; 16/10/2022
 15205                                  
 15206                                  ; ==========================================================================
 15207                                  ;**	GetDeviceParameters:
 15208                                  ;
 15209                                  ;	GetDeviceParameters implements the generic ioctl function:
 15210                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 15211                                  ;
 15212                                  ;	ENTRY	(ES:di) = BDS for drive
 15213                                  ;		PtrSav = long pointer to request header
 15214                                  ;	EXIT	??? BUGBUG
 15215                                  ;	USES	??? BUGBUG
 15216                                  ; ==========================================================================
 15217                                  
 15218                                  		; 24/12/2023 - Retro DOS v5.0
 15219                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 15220                                  
 15221                                  		; 19/10/2022
 15222                                  GetDeviceParameters:
 15223                                  		; Copy info from bds to the device parameters packet
 15224                                  
 15225 00000F1A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15226 00000F1E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15227                                  					; (DS:BX) = return buffer
 15228                                  		; 24/12/2023
 15229 00000F21 268A453E                		mov	al, [es:di+3Eh]
 15230                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 15231 00000F25 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15232                                  		; 24/12/2023
 15233 00000F28 268B453F                		mov	ax, [es:di+3Fh]
 15234                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 15235 00000F2C 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 15236                                  					; Mask off other bits
 15237 00000F2F 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15238                                  		; 24/12/2023
 15239 00000F32 268B4541                		mov     ax, [es:di+41h]
 15240                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 15241 00000F36 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15242 00000F39 30C0                    		xor	al, al		; Set media type to default
 15243 00000F3B 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15244                                  					
 15245                                  		; copy recommended bpb
 15246                                  
 15247                                  		; 24/12/2023
 15248 00000F3E 8D7543                  		lea     si, [di+43h]
 15249                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 15250 00000F41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15251                                  					; BUILD_DEVICE_BPB
 15252 00000F44 7412                    		jz	short UseBpbPresent
 15253 00000F46 1E                      		push	ds		; Save request packet segment
 15254 00000F47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15255                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15256                                  					; 2C7h:30h = 70h:25A0h
 15257                                  					; Point back to Bios_Data
 15258 00000F4C E828FA                  		call	checksingle
 15259 00000F4F E884F7                  		call	GetBp		; Build	the bpb	from scratch
 15260 00000F52 1F                      		pop	ds		; Restore request packet segment
 15261 00000F53 7224                    		jb	short GetParmRet
 15262 00000F55 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 15263                                  					; Use this subfield of bds instead
 15264                                  UseBpbPresent:				
 15265 00000F58 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15266                                  					; This is where	the result goes
 15267                                  		; 24/12/2023
 15268 00000F5B 31D2                    		xor	dx, dx ; 0
 15269                                  		
 15270                                  		; 24/12/2023
 15271 00000F5D B91F00                  		mov	cx, 31		; A_BPB.size = 31
 15272                                  		;mov	cx, 25		; A_BPB.size - 6
 15273                                  					; For now use 'small' bpb
 15274                                  		; 24/12/2023
 15275                                  		;;;
 15276 00000F60 2E3816[CB0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 15277 00000F65 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 15278                                  		;mov	cx, 53		; FAT32 BPB size
 15279                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 15280 00000F67 B135                    		mov	cl, 53
 15281 00000F69 B220                    		mov	dl, 32
 15282                                  gdp_1:
 15283                                  		;;;
 15284 00000F6B 1E                      		push	ds		; reverse segments for copy
 15285 00000F6C 06                      		push	es
 15286 00000F6D 1F                      		pop	ds
 15287 00000F6E 07                      		pop	es
 15288 00000F6F F3A4                    		rep movsb
 15289                                  
 15290                                  		; 24/12/2023
 15291                                  		;;;
 15292 00000F71 89D1                    		mov	cx, dx		; 0 or 32
 15293 00000F73 E304                    		jcxz	gdp_2
 15294 00000F75 30C0                    		xor	al, al		; 32 zeros
 15295 00000F77 F3AA                    		rep stosb
 15296                                  gdp_2:
 15297                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 15298                                  		;;;		
 15299                                  		
 15300                                  		; 12/12/2022
 15301                                  		; cf=0 (cmp instruction -above- resets cf) 	
 15302                                  		;clc
 15303                                  GetParmRet:				
 15304 00000F79 C3                      		retn
 15305                                  ; ---------------------------------------------------------------------------
 15306                                  
 15307                                  ; 17/10/2022
 15308                                  ; 16/10/2022
 15309                                  
 15310                                  ; ==========================================================================
 15311                                  ; SetDeviceParameters:
 15312                                  ;
 15313                                  ; input: ES:di points to bds for drive
 15314                                  ; ==========================================================================
 15315                                  
 15316                                  		; 24/12/2023 - Retro DOS v5.0
 15317                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 15318                                  
 15319                                  		; 19/10/2022
 15320                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 15321 00000F7A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15322 00000F7E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15323                                  		; 24/12/2023
 15324 00000F81 26814D3F4001            		or	word [es:di+3Fh], 140h
 15325                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 15326                                  					; fchanged_by_format|fchanged
 15327 00000F87 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15328                                  					; ONLY_SET_TRACKLAYOUT
 15329                                  		;jnz	short setTrackTable
 15330                                  		; 24/12/2023
 15331 00000F8A 7403                    		jz	short sdp_1
 15332 00000F8C E98000                  		jmp	setTrackTable
 15333                                  sdp_1:	
 15334 00000F8F 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15335                                  		; 24/12/2023
 15336 00000F92 2688453E                		mov	[es:di+3Eh], al
 15337                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 15338 00000F96 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15339                                  		; 24/12/2023
 15340 00000F99 26894541                		mov	[es:di+41h], ax
 15341                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 15342 00000F9D 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15343 00000FA0 1E                      		push	ds
 15344                                  		; 17/10/2022
 15345 00000FA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15346                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15347                                  					; 2C7h:30h = 70h:25A0h
 15348                                  		;cmp	byte [fhave96], 0
 15349 00000FA6 803E[7700]00            		cmp	byte [fhave96], 0
 15350 00000FAB 1F                      		pop	ds
 15351 00000FAC 7502                    		jnz	short HaveChange ; we have changeline support
 15352                                  		; 10/12/2022
 15353 00000FAE 24FD                    		and	al, 0FDh
 15354                                  		;and	ax, 0FFFDh	; ~fchangeline
 15355                                  
 15356                                  		; Ignore all bits except non_removable and changeline
 15357                                  HaveChange:
 15358 00000FB0 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 15359                                  		; 24/12/2023
 15360 00000FB3 268B4D3F                		mov	cx, [es:di+3Fh]
 15361                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 15362 00000FB7 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 15363 00000FBB 09C8                    		or	ax, cx
 15364                                  		; 24/12/2023
 15365 00000FBD 2689453F                		mov	[es:di+3Fh], ax
 15366                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 15367 00000FC1 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15368                                  					; Set media type
 15369 00000FC4 1E                      		push	ds
 15370 00000FC5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15371                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15372 00000FCA A2[A805]                		mov	[mediatype], al
 15373                                  		;mov	ds:mediatype, al
 15374                                  
 15375                                  		; 24/12/2023
 15376                                  		;;;
 15377 00000FCD B93500                  		mov	cx, 53		; FAT32 BPB size
 15378 00000FD0 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15379 00000FD6 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 15380                                  		;mov	cx, 31		; A_BPB.size = 31
 15381 00000FD8 B11F                    		mov	cl, 31
 15382                                  sdp_2:
 15383                                  		;;;	
 15384 00000FDA 1F                      		pop	ds
 15385                                  
 15386                                  		; The media changed (maybe) so we will have to do a set dasd
 15387                                  		; the next time we format a track
 15388                                  
 15389                                  		; 24/12/2023
 15390 00000FDB 26804D3F80              		or	byte [es:di+3Fh], 80h
 15391                                  		; 10/12/2022
 15392                                  		;or	byte [es:di+35], 80h
 15393                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 15394                                  					; set_dasd_true
 15395 00000FE0 57                      		push	di		; Save bds pointer
 15396                                  
 15397                                  		; Figure out what we are supposed to do with the bpb
 15398                                  		; were we asked to install a fake bpb?
 15399                                  
 15400 00000FE1 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15401                                  					; INSTALL_FAKE_BPB
 15402 00000FE4 7511                    		jnz	short InstallFakeBpb
 15403                                  
 15404                                  		; were we returning a fake bpb when asked to build a bpb?
 15405                                  
 15406                                  		; 24/12/2023
 15407 00000FE6 26F6453F04              		test	byte [es:di+3Fh], 4
 15408                                  		; 10/12/2022
 15409                                  		;test	byte [es:di+35], 4
 15410                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 15411                                  					; return_fake_bpb
 15412 00000FEB 7405                    		jz	short InstallRecommendedBpb
 15413                                  
 15414                                  		; we were returning a fake bpb but we can stop now
 15415                                  
 15416                                  		; 24/12/2023
 15417 00000FED 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 15418                                  		; 10/12/2022
 15419                                  		;and	byte [es:di+35], 0FBh
 15420                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 15421                                  					; ~return_fake_bpb
 15422                                  InstallRecommendedBpb:
 15423                                  		; 24/12/2023
 15424                                  		;mov	cx, 31		; A_BPB.size
 15425                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 15426                                  		; cx = 53 or 31
 15427 00000FF2 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 15428 00000FF5 EB08                    		jmp	short CopyTheBpb
 15429                                  ; ---------------------------------------------------------------------------
 15430                                  
 15431                                  InstallFakeBpb:
 15432                                  		; 24/12/2023
 15433 00000FF7 26804D3F04              		or	byte [es:di+3Fh], 4
 15434                                  		; 10/12/2022
 15435                                  		;or	byte [es:di+35], 4
 15436                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 15437                                  					; return_fake_bpb
 15438                                  		; 24/12/2023
 15439                                  		; cx = 53 or 31
 15440                                  		;mov	cx, 25		; A_BPB.size - 6
 15441                                  					; move 'smaller' bpb
 15442 00000FFC 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 15443                                  CopyTheBpb:				
 15444 00000FFF 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15445 00001002 F3A4                    		rep movsb
 15446 00001004 1E                      		push	ds		; Save packet segment
 15447                                  		; 17/10/2022
 15448 00001005 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15449                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15450                                  					; Setup	for ds -> Bios_Data
 15451 0000100A E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 15452 0000100D 1F                      		pop	ds		; Restore packet segment
 15453 0000100E 5F                      		pop	di		; Restore bds pointer
 15454                                  setTrackTable:	
 15455                                  		; 24/12/2023
 15456                                  		;mov	cx, [bx+38]	; [bx+26h]
 15457                                  		;;;
 15458 0000100F 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15459                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 15460 00001012 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15461 00001018 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 15462 0000101A 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15463                                  					; offset 31+7 (A_BPB.size+7)
 15464                                  sdp_3:
 15465                                  		;;;
 15466                                  
 15467 0000101D 1E                      		push	ds
 15468 0000101E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15469 00001023 890E[AA04]              		mov	[sectorspertrack], cx
 15470 00001027 1F                      		pop	ds
 15471                                  		
 15472                                  		; 24/12/2023
 15473 00001028 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 15474                                  		; 10/12/2022
 15475                                  		;and	byte [es:di+35], 0F7h
 15476                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 15477                                  					; ~good_tracklayout
 15478 0000102D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15479                                  					; TRACKLAYOUT_IS_GOOD
 15480 00001030 7405                    		jz	short UglyTrackLayOut
 15481                                  		; 24/12/2023
 15482 00001032 26804D3F08              		or	byte [es:di+3Fh], 8
 15483                                  		; 10/12/2022
 15484                                  		;or	byte [es:di+35], 8
 15485                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 15486                                  					; good_tracklayout
 15487                                  UglyTrackLayOut:
 15488 00001037 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 15489 0000103A 772D                    		ja	short TooManyPerTrack
 15490                                  		;jcxz	short SectorInfoSaved
 15491 0000103C E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 15492                                  		
 15493 0000103E BF[AC04]                		mov	di, tracktable
 15494                                  
 15495                                  		; 24/12/2023
 15496                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15497                                  		;;;
 15498 00001041 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15499                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 15500 00001044 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15501 0000104A 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 15502 0000104C 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15503                                  					; offset 31+9 (A_BPB.size+9)
 15504                                  sdp_4:
 15505                                  		;;;
 15506                                  
 15507                                  		; 17/10/2022
 15508 0000104F 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 15509                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15510                                  					; Trash	our bds	pointer
 15511                                  StoreSectorInfo:
 15512 00001054 47                      		inc	di
 15513 00001055 47                      		inc	di		; Skip over cylinder and head
 15514 00001056 AD                      		lodsw			; Get sector id
 15515 00001057 AA                      		stosb			; Copy it
 15516 00001058 AD                      		lodsw			; Get sector size
 15517                                  		
 15518                                  		; 24/12/2023
 15519                                  		; 02/09/2023 (PCDOS 7.1)
 15520                                  		;call	SectSizeToSectIndex
 15521                                  		; 18/04/2024
 15522                                  		;cmp	ah, 3 ; 02/09/2023
 15523 00001059 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 15524                                  					; examine upper	byte only
 15525 0000105C 7704                    		ja	short OneK
 15526 0000105E 88E0                    		mov	al, ah		; value	in AH is the index!
 15527 00001060 EB02                    		jmp	short sdp_s
 15528                                  OneK:
 15529 00001062 B003                    		mov	al, 3		; 1024 bytes per sector
 15530                                  sdp_s:
 15531 00001064 AA                      		stosb			; Store	sector SIZE index
 15532 00001065 E2ED                    		loop	StoreSectorInfo
 15533                                  SectorInfoSaved:
 15534 00001067 F8                      		clc
 15535 00001068 C3                      		retn
 15536                                  ; ---------------------------------------------------------------------------
 15537                                  
 15538                                  TooManyPerTrack:
 15539 00001069 B00C                    		mov	al, 0Ch
 15540 0000106B F9                      		stc
 15541 0000106C C3                      		retn
 15542                                  ; ---------------------------------------------------------------------------
 15543                                  
 15544                                  ; 16/10/2022
 15545                                  
 15546                                  ; ==========================================================================
 15547                                  ; FormatTrack:
 15548                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 15549                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 15550                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 15551                                  ;
 15552                                  ; input: ES:di points to bds for drive
 15553                                  ;
 15554                                  ; output:
 15555                                  ;	for status call:
 15556                                  ;	specialfunction byte set to:
 15557                                  ;		0 - rom support + legal combination
 15558                                  ;		1 - no rom support
 15559                                  ;		2 - illegal combination
 15560                                  ;		3 - no media present
 15561                                  ;	carry cleared.
 15562                                  ;
 15563                                  ;	for format track:
 15564                                  ;		carry set if error
 15565                                  ;
 15566                                  ; ==========================================================================
 15567                                  
 15568                                  ; 16/03/2019
 15569                                  		; 24/12/2023 - Retro DOS 5.0
 15570                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 15571                                  
 15572                                  		; 19/10/2022
 15573                                  FormatTrack:
 15574 0000106D C51E[1200]              		lds	bx, [ptrsav]
 15575 00001071 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 15576 00001074 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15577                                  					; STATUS_FOR_FORMAT
 15578 00001077 740E                    		jz	short DoFormatTrack
 15579 00001079 1E                      		push	ds
 15580                                  		; 17/10/2022
 15581 0000107A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15582                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15583 0000107F E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15584 00001082 1F                      		pop	ds
 15585 00001083 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15586 00001085 F8                      		clc
 15587 00001086 C3                      		retn
 15588                                  ; ---------------------------------------------------------------------------
 15589                                  
 15590                                  DoFormatTrack:
 15591                                  		; 24/12/2023 - Retro DOS 5.0
 15592 00001087 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 15593                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 15594                                  					; DEV_HARDDISK
 15595 0000108C 7508                    		jnz	short DoFormatDiskette
 15596                                  		; 17/10/2022
 15597 0000108E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15598                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15599                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 15600 00001093 E99D00                  		jmp	VerifyTrack
 15601                                  ; ---------------------------------------------------------------------------
 15602                                  
 15603                                  DoFormatDiskette:
 15604 00001096 8B4F01                  		mov	cx, [bx+1]
 15605 00001099 8B5703                  		mov	dx, [bx+3]
 15606 0000109C F60702                  		test	byte [bx], 2
 15607                                  		; 17/10/2022
 15608 0000109F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15609                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15610                                  					; Setup	ds-> Bios_Data for verify
 15611 000010A4 7403                    		jz	short DoFormatDiskette_1
 15612 000010A6 E9E500                  		jmp	VerifyTrack_Err
 15613                                  ; ---------------------------------------------------------------------------
 15614                                  
 15615                                  DoFormatDiskette_1:
 15616 000010A9 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15617 000010AC 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 15618 000010AE 7406                    		jz	short NeedToSetDasd ; Old rom
 15619 000010B0 3C03                    		cmp	al, 3		; Time out error?
 15620 000010B2 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 15621                                  					; about	the illegal combination)
 15622 000010B4 EB68                    		jmp	short FormatFailed
 15623                                  ; ---------------------------------------------------------------------------
 15624                                  
 15625                                  NeedToSetDasd:
 15626 000010B6 52                      		push	dx
 15627 000010B7 E89001                  		call	SetDasd		; INT 13h, AH=17h
 15628 000010BA 5A                      		pop	dx
 15629                                  NoSetDasd:
 15630 000010BB E8B9F8                  		call	checksingle	; Do any needed	diskette swapping
 15631 000010BE 89D0                    		mov	ax, dx		; Get track from packet
 15632 000010C0 A3[3901]                		mov	[trknum], ax
 15633 000010C3 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 15634 000010C7 88CC                    		mov	ah, cl
 15635 000010C9 BB[AC04]                		mov	bx, tracktable
 15636 000010CC 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15637                                  		; 24/12/2023 - Retro DOS 5.0
 15638 000010D0 E307                    		jcxz	set_fmt_retry_count
 15639                                  StoreCylinderHead:
 15640 000010D2 8907                    		mov	[bx], ax	; Store	into TrackTable
 15641 000010D4 83C304                  		add	bx, 4		; Skip to next sector field
 15642 000010D7 E2F9                    		loop	StoreCylinderHead
 15643                                  set_fmt_retry_count:	; 24/12/2023
 15644                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 15645                                  		; 02/09/2023
 15646 000010D9 B105                    		mov	cl, 5
 15647                                  FormatRetry:
 15648 000010DB 51                      		push	cx
 15649 000010DC BB[AC04]                		mov	bx, tracktable
 15650 000010DF A0[AA04]                		mov	al, [sectorspertrack]
 15651 000010E2 B405                    		mov	ah, 5		; romformat
 15652 000010E4 8C1E[A804]              		mov	[xfer_seg], ds
 15653 000010E8 E86602                  		call	ToRom
 15654 000010EB 59                      		pop	cx
 15655 000010EC 7216                    		jb	short FormatError
 15656 000010EE 51                      		push	cx		; Now verify the sectors just formatted.
 15657                                  					; NOTE:	because	of bug in some BIOSes we have to
 15658                                  					;	set ES:BX to 00:00
 15659 000010EF 53                      		push	bx
 15660 000010F0 31DB                    		xor	bx, bx
 15661 000010F2 891E[A804]              		mov	[xfer_seg], bx
 15662 000010F6 A0[AA04]                		mov	al, [sectorspertrack]
 15663 000010F9 B404                    		mov	ah, 4		; romverify
 15664 000010FB B101                    		mov	cl, 1
 15665 000010FD E85102                  		call	ToRom
 15666 00001100 5B                      		pop	bx
 15667 00001101 59                      		pop	cx
 15668 00001102 7329                    		jnb	short FormatOk
 15669                                  FormatError:
 15670 00001104 E83402                  		call	ResetDisk
 15671 00001107 C606[AA05]01            		mov	byte [had_format_error], 1
 15672 0000110C 50                      		push	ax
 15673 0000110D 51                      		push	cx
 15674 0000110E 52                      		push	dx
 15675 0000110F E89501                  		call	SetMediaForFormat
 15676 00001112 3C01                    		cmp	al, 1
 15677 00001114 7503                    		jnz	short WhileErr
 15678 00001116 E83101                  		call	SetDasd
 15679                                  WhileErr:
 15680 00001119 5A                      		pop	dx
 15681 0000111A 59                      		pop	cx
 15682 0000111B 58                      		pop	ax
 15683 0000111C E2BD                    		loop	FormatRetry
 15684                                  FormatFailed:
 15685 0000111E C606[AA05]01            		mov	byte [had_format_error], 1
 15686                                  					; Set the format error flag
 15687 00001123 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 15688 00001126 7502                    		jnz	short DoMapIt	; Error	to time	out error
 15689 00001128 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 15690                                  DoMapIt:
 15691 0000112A E97CFC                  		jmp	maperror
 15692                                  ; ---------------------------------------------------------------------------
 15693                                  
 15694                                  FormatOk:
 15695 0000112D C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 15696 00001132 C3                      		retn
 15697                                  ; ---------------------------------------------------------------------------
 15698                                  
 15699                                  ; 16/10/2022
 15700                                  
 15701                                  ; ==========================================================================
 15702                                  ;
 15703                                  ; VerifyTrack:
 15704                                  ;
 15705                                  ; input: ES:di points to bds for drive
 15706                                  ; ==========================================================================
 15707                                  
 15708                                  		; 24/12/2023 - Retro DOS 5.0
 15709                                  VerifyTrack:
 15710 00001133 1E                      		push	ds
 15711 00001134 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 15712 00001138 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15713                                  
 15714                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 15715                                  
 15716 0000113B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 15717 0000113E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 15718 00001141 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 15719 00001144 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 15720                                  					; Get option flag word
 15721 00001146 1F                      		pop	ds
 15722 00001147 C606[2001]04            		mov	byte [rflag], 4	; romverify
 15723 0000114C 890E[3301]              		mov	[curtrk], cx
 15724 00001150 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 15725 00001153 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15726                                  
 15727                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 15728                                  		; specified if not we should go to the normal track verification
 15729                                  		; routine. If fast format has been specified we should get the
 15730                                  		; number of tracks to be verified and check it to see if it is
 15731                                  		; > 255. If it is then it is an error and we should go to
 15732                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 15733                                  		; sectors per track to get the total number of sectors to be
 15734                                  		; verified. This should also be less than equal to 255
 15735                                  		; otherwise we go to same error exit. If everything is okay
 15736                                  		; we initialise cx to the total sectors. use ax as a temporary
 15737                                  		; register.
 15738                                  
 15739                                  					; Special function requested?	
 15740 00001157 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 15741 0000115A 7421                    		jz	short NormVerifyTrack
 15742 0000115C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 15743 0000115E 08E4                    		or	ah, ah
 15744 00001160 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 15745 00001162 F6E1                    		mul	cl
 15746 00001164 08E4                    		or	ah, ah
 15747 00001166 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 15748 00001168 89C1                    		mov	cx, ax
 15749                                  		; 24/12/2023
 15750 0000116A 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15751                                  		; 10/12/2022
 15752                                  		;test	byte [es:di+35], 1
 15753                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15754                                  					; fnon_removable
 15755 0000116F 740C                    		jz	short NormVerifyTrack
 15756                                  					; Multitrack operation = on?
 15757                                  		; 10/12/2022
 15758                                  		; 19/10/2022
 15759 00001171 F606[A004]80            		test	byte [multrk_flag], 80h
 15760                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15761                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 15762 00001176 7405                    		jz	short NormVerifyTrack
 15763 00001178 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 15764                                  NormVerifyTrack:
 15765 0000117D 31C0                    		xor	ax, ax		; 1st sector
 15766 0000117F 31DB                    		xor	bx, bx
 15767 00001181 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 15768 00001185 E83F00                  		call	TrackIo
 15769 00001188 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 15770 0000118D C3                      		retn
 15771                                  ; ---------------------------------------------------------------------------
 15772                                  
 15773                                  VerifyTrack_Err:
 15774 0000118E B401                    		mov	ah, 1
 15775 00001190 E916FC                  		jmp	maperror
 15776                                  ; ---------------------------------------------------------------------------
 15777                                  
 15778                                  ; 16/10/2022
 15779                                  
 15780                                  ; ==========================================================================
 15781                                  ;
 15782                                  ; ReadTrack:
 15783                                  ;
 15784                                  ; input: ES:di points to bds for drive
 15785                                  ;
 15786                                  ; ==========================================================================
 15787                                  
 15788                                  ReadTrack:
 15789 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 15790 00001198 EB05                    		jmp	short ReadWriteTrack
 15791                                  ; ---------------------------------------------------------------------------
 15792                                  
 15793                                  WriteTrack:
 15794                                  
 15795                                  ; ==========================================================================
 15796                                  ;
 15797                                  ; WriteTrack:
 15798                                  ;
 15799                                  ; input: ES:di points to bds for drive
 15800                                  ;
 15801                                  ; ==========================================================================
 15802                                  				
 15803 0000119A C606[2001]03            		mov	byte [rflag], 3	; romwrite
 15804                                  
 15805                                  		; Fall into ReadWriteTrack
 15806                                  
 15807                                  ; ==========================================================================
 15808                                  ;
 15809                                  ; readWriteTrack:
 15810                                  ;
 15811                                  ; input:
 15812                                  ;    ES:di points to bds for drive
 15813                                  ;    rFlag - 2 for read,3 for write
 15814                                  ;
 15815                                  ; ==========================================================================
 15816                                  
 15817                                  ReadWriteTrack:	
 15818                                  		; save bds pointer segment so we can use it to access
 15819                                  		; our packet. Notice that this is not the standard register
 15820                                  		; assignment for accessing packets
 15821                                  		
 15822                                  		; 19/10/2022
 15823 0000119F 06                      		push	es
 15824 000011A0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 15825 000011A4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15826 000011A8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 15827 000011AC A3[3301]                		mov	[curtrk], ax
 15828 000011AF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 15829 000011B3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 15830 000011B6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 15831 000011BA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 15832 000011BE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 15833                                  					; Get transfer address
 15834                                  
 15835                                  		; we just trashed our packet address, but we no longer care
 15836                                  
 15837 000011C2 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 15838 000011C6 07                      		pop	es
 15839                                  
 15840                                  		; Fall into TrackIo
 15841                                  
 15842                                  ; =============== S U B	R O U T	I N E =======================================
 15843                                  
 15844                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15845                                  
 15846                                  ; ==========================================================================
 15847                                  ;
 15848                                  ; TrackIo:
 15849                                  ;    performs track read/write/verify
 15850                                  ;
 15851                                  ;   input:
 15852                                  ;      rFlag	- 2 = read
 15853                                  ;		  3 = write
 15854                                  ;		  4 = verify
 15855                                  ;      AX	- Index into track table of first sector to io
 15856                                  ;      CX	- Number of sectors to io
 15857                                  ;      Xfer_Seg:BX - Transfer address
 15858                                  ;      ES:DI	- Pointer to bds
 15859                                  ;      CurTrk	- Current cylinder
 15860                                  ;      CurHd	- Current head
 15861                                  ;
 15862                                  ; ==========================================================================
 15863                                  
 15864                                  ; 16/03/2019 - Retro DOS v4.0
 15865                                  
 15866                                  		; 24/12/2023 - Retro DOS 5.0		
 15867                                  
 15868                                  		; 19/10/2022
 15869                                  TrackIo:
 15870                                  					; Procedure `disk' will pop stack to
 15871 000011C7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 15872 000011CB E8A9F7                  		call	checksingle	; Ensure correct disk is in drv
 15873 000011CE 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15874                                  					; See if we have already set	disk
 15875 000011D3 7407                    		jz	short Dptalreadyset ; base table
 15876 000011D5 50                      		push	ax		; set up tables	and variables for i/o
 15877 000011D6 51                      		push	cx
 15878 000011D7 E8A0F9                  		call	iosetup
 15879 000011DA 59                      		pop	cx
 15880 000011DB 58                      		pop	ax
 15881                                  Dptalreadyset:				; Point si at the table entry of the			
 15882 000011DC BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 15883                                  		; 24/12/2023
 15884                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 15885                                  		;add	ax, ax
 15886 000011DF D1E0                    		shl	ax, 1
 15887 000011E1 D1E0                    		shl	ax, 1
 15888 000011E3 01C6                    		add	si, ax
 15889                                  
 15890                                  		; WE WANT:
 15891                                  		; CX to	be the number of times we have to loop
 15892                                  		; DX to	be the number of sectors we read on each iteration
 15893                                  		
 15894 000011E5 BA0100                  		mov	dx, 1
 15895                                  
 15896                                  		; 24/12/2023
 15897 000011E8 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 15898                                  		; 12/12/2022
 15899                                  		;test	byte [es:di+23h], 8
 15900                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 15901                                  					; good_tracklayout
 15902 000011ED 7402                    		jz	short ionextsector
 15903                                  		
 15904 000011EF 87CA                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 15905                                  ionextsector:
 15906 000011F1 51                      		push	cx
 15907 000011F2 52                      		push	dx
 15908 000011F3 46                      		inc	si
 15909 000011F4 46                      		inc	si		; Skip over the	cylinder and head in
 15910                                  					; the track table
 15911 000011F5 AC                      		lodsb			; Get sector ID	from track table
 15912 000011F6 A2[3101]                		mov	[cursec], al
 15913                                  
 15914                                  		; assumptions for a fixed disk multi-track disk	i/o
 15915                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 15916                                  		;     only CL is valid.
 15917                                  		; 2). Sector size should be set	to 512 bytes.
 15918                                  		; 3). Good track layout
 15919                                  		
 15920                                  		; 24/12/2023
 15921 000011F9 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15922                                  		; 12/12/2022
 15923                                  		;test	byte [es:di+23h], 1
 15924                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15925                                  					; fnon_removable ; Fixed disk?
 15926 000011FE 7414                    		jz	short IoRemovable ; No
 15927                                  
 15928                                  		; 12/12/2022
 15929 00001200 F606[A004]80            		test	byte [multrk_flag], 80h
 15930                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15931                                  						; Allow multi-track operation?
 15932 00001205 740D                    		jz	short IoRemovable ; No,don't do that.
 15933 00001207 8916[2201]              		mov	[seccnt], dx
 15934 0000120B 89D0                    		mov	ax, dx
 15935 0000120D E823FA                  		call	Disk
 15936 00001210 5A                      		pop	dx
 15937 00001211 59                      		pop	cx
 15938 00001212 F8                      		clc
 15939 00001213 C3                      		retn
 15940                                  ; ---------------------------------------------------------------------------
 15941                                  
 15942                                  IoRemovable:
 15943 00001214 AC                      		lodsb			; Get sector size index	from track
 15944                                  					; table	and save it
 15945 00001215 50                      		push	ax
 15946 00001216 56                      		push	si
 15947 00001217 1E                      		push	ds		; Save Bios_Data
 15948 00001218 50                      		push	ax
 15949 00001219 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 15950                                  					; Fetch	EOT while ds-> Bios_Data
 15951 0000121D C536[2D01]              		lds	si, [dpt]
 15952 00001221 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 15953 00001224 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 15954 00001227 58                      		pop	ax
 15955 00001228 1F                      		pop	ds
 15956 00001229 88D0                    		mov	al, dl
 15957 0000122B A3[2201]                		mov	[seccnt], ax
 15958 0000122E E802FA                  		call	Disk
 15959 00001231 5E                      		pop	si		; Advance buffer pointer by adding
 15960                                  					; sector size
 15961                                  		;pop	ax
 15962                                  		; 24/12/2023
 15963 00001232 59                      		pop	cx
 15964                                  
 15965                                  		; 02/09/2023 (PCDOS 7.1)
 15966                                  		;call	SectorSizeIndexToSectorSize
 15967                                  		;mov	cl, al	; 24/12/2023
 15968 00001233 B88000                  		mov	ax, 128
 15969 00001236 D3E0                    		shl	ax, cl
 15970                                  
 15971 00001238 01C3                    		add	bx, ax
 15972 0000123A 5A                      		pop	dx
 15973 0000123B 59                      		pop	cx
 15974 0000123C E2B3                    		loop	ionextsector
 15975 0000123E 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15976                                  		;jz	short NoNeedDone
 15977                                  		; 12/12/2022
 15978 00001243 7404                    		je	short NoNeedDone2
 15979 00001245 E877F9                  		call	done		; set time of last access, and reset
 15980                                  					; entries in Dpt.
 15981                                  NoNeedDone:
 15982 00001248 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 15983                                  NoNeedDone2:
 15984 00001249 C3                      		retn
 15985                                  
 15986                                  ; =============== S U B	R O U T	I N E =======================================
 15987                                  
 15988                                  ; ---------------------------------------------------------------------------
 15989                                  ;
 15990                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 15991                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 15992                                  ; are permissible.
 15993                                  ;
 15994                                  ; On Input   AX contains sector size in bytes
 15995                                  ; On Output  AL Contains index
 15996                                  ; All other registers preserved
 15997                                  ;
 15998                                  ; ---------------------------------------------------------------------------
 15999                                  
 16000                                  ; 02/09/2023
 16001                                  ;SectSizeToSectIndex:
 16002                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16003                                  ;					; examine upper	byte only
 16004                                  ;		ja	short OneK
 16005                                  ;		mov	al, ah		; value	in AH is the index!
 16006                                  ;		retn
 16007                                  
 16008                                  ; ---------------------------------------------------------------------------
 16009                                  ;
 16010                                  ;OneK:
 16011                                  ;		mov	al, 3
 16012                                  ;		retn
 16013                                  
 16014                                  ; =============== S U B	R O U T	I N E =======================================
 16015                                  
 16016                                  ; 02/09/2023
 16017                                  ;SectorSizeIndexToSectorSize:
 16018                                  ;		mov	cl, al
 16019                                  ;		mov	ax, 128
 16020                                  ;		shl	ax, cl
 16021                                  ;		retn
 16022                                  
 16023                                  ; =============== S U B	R O U T	I N E =======================================
 16024                                  
 16025                                  ; 16/10/2022
 16026                                  
 16027                                  ; ---------------------------------------------------------------------------
 16028                                  ;
 16029                                  ; SetDASD
 16030                                  ;
 16031                                  ; Set up the rom for formatting.
 16032                                  ; we have to tell the rom bios what type of disk is in the drive.
 16033                                  ;
 16034                                  ; On Input   - ES:di - Points to bds
 16035                                  ;
 16036                                  ; ---------------------------------------------------------------------------
 16037                                  
 16038                                  		; 24/12/2023 - Retro DOS 5.0
 16039                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 16040                                  
 16041                                  		; 19/10/2022
 16042                                  SetDasd:
 16043 0000124A 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 16044                                  					; See if we've previously set dasd type
 16045 0000124F 740C                    		jz	short DoSetDasd
 16046                                  		; 24/12/2023
 16047 00001251 26F6453F80              		test	byte [es:di+3Fh], 80h
 16048                                  		; 10/12/2022
 16049                                  		;test	byte [es:di+23h], 80h
 16050                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 16051                                  					; set_dasd_true
 16052 00001256 7446                    		jz	short DasdHasBeenSet
 16053                                  		; 24/12/2023
 16054 00001258 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 16055                                  		; 10/12/2022
 16056                                  		;and	byte [es:di+23h], 7Fh
 16057                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 16058                                  					; ~set_dasd_true
 16059                                  DoSetDasd:
 16060 0000125D C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 16061 00001262 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 16062 00001267 B004                    		mov	al, 4
 16063                                  		; 24/12/2023
 16064 00001269 268A653E                		mov	ah, [es:di+3Eh]
 16065                                  		; 02/09/2023
 16066                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 16067 0000126D 80FC02                  		cmp	ah, 2
 16068                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16069                                  					; DEV_3INCH720KB
 16070 00001270 7414                    		jz	short DoSet
 16071                                  		; 24/12/2023
 16072 00001272 B001                    		mov	al, 1
 16073                                  		;cmp	ah, 1
 16074 00001274 38C4                    		cmp	ah, al	; 1
 16075                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 16076                                  					; DEV_5INCH96TPI
 16077                                  		;jz	short GotBig
 16078                                  		; 24/12/2023
 16079                                  		;mov	al, 1
 16080                                  		;jmp	short DoSet
 16081                                  		; 02/09/2023
 16082 00001276 750E                    		jnz	short DoSet
 16083                                  GotBig:
 16084                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 16085                                  		; 02/09/2023
 16086 00001278 40                      		inc	ax  ; mov al, 2
 16087 00001279 803E[A805]00            		cmp	byte [mediatype], 0
 16088 0000127E 7506                    		jnz	short DoSet
 16089                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 16090                                  		; 10/12/2022
 16091                                  		;inc	al  ; al = 3
 16092                                  		; 18/12/2022
 16093 00001280 40                      		inc	ax  ; al = 3
 16094 00001281 C606[3B01]54            		mov	byte [gap_patch], 54h
 16095                                  DoSet:
 16096 00001286 1E                      		push	ds
 16097 00001287 56                      		push	si
 16098                                  
 16099                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 16100                                  		; 02/09/2023
 16101 00001288 31F6                    		xor	si, si
 16102 0000128A 8EDE                    		mov	ds, si	; 0
 16103                                  
 16104 0000128C C5367800                		lds	si, [DSKADR]
 16105                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 16106                                  		;;lds	si, ds:78h
 16107                                  
 16108 00001290 C644090F                		mov	byte [si+9], 0Fh ;
 16109                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 16110 00001294 5E                      		pop	si
 16111 00001295 1F                      		pop	ds
 16112 00001296 B417                    		mov	ah, 17h
 16113 00001298 268A5504                		mov	dl, [es:di+4]
 16114 0000129C CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 16115                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 16116                                  DasdHasBeenSet:
 16117 0000129E 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 16118 000012A2 8826[3701]              		mov	[formt_eot], ah
 16119 000012A6 C3                      		retn
 16120                                  
 16121                                  ; =============== S U B	R O U T	I N E =======================================
 16122                                  
 16123                                  ; 16/10/2022
 16124                                  
 16125                                  ; ---------------------------------------------------------------------------
 16126                                  ;
 16127                                  ; Set Media Type for Format
 16128                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 16129                                  ; BPB area in the BDS can be handled by the rom.
 16130                                  ; On Input, ES:DI -> current BDS.
 16131                                  ; The status of the operation is returned in AL
 16132                                  ;
 16133                                  ;	- 0 - if the support is available,and the combination is valid.
 16134                                  ;	- 1 - no rom support
 16135                                  ;	- 2 - illegal combination
 16136                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 16137                                  ;
 16138                                  ; Flags also may be altered. All other registers preserved.
 16139                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 16140                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 16141                                  ; to the one returned. the original pointer to the disk base table is stored
 16142                                  ; in TempDpt, until it is restored.
 16143                                  ;
 16144                                  ; ---------------------------------------------------------------------------
 16145                                  
 16146                                  		; 24/12/2023 - Retro DOS 5.0
 16147                                  
 16148                                  		; 19/10/2022
 16149                                  SetMediaForFormat:	
 16150 000012A7 51                      		push	cx
 16151 000012A8 52                      		push	dx
 16152                                  
 16153                                  		; If we have a format error, then do not change Dpt, TempDpt.
 16154                                  		; but we need to call int 13h, ah=18h again.
 16155                                  
 16156 000012A9 803E[AA05]01            		cmp	byte [had_format_error], 1
 16157 000012AE 7425                    		jz	short SkipSaveDskAdr
 16158 000012B0 30C0                    		xor	al, al		; If already done return 0
 16159 000012B2 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16160 000012B7 7502                    		jnz	short DoSetMediaForFormat
 16161 000012B9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 16162                                  ; ---------------------------------------------------------------------------
 16163                                  
 16164                                  DoSetMediaForFormat:
 16165 000012BB 06                      		push	es
 16166 000012BC 56                      		push	si
 16167                                  
 16168                                  		; 02/09/2023
 16169                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 16170 000012BD 31F6                    		xor	si, si ; 0
 16171 000012BF 8EC6                    		mov	es, si
 16172                                  
 16173 000012C1 26C4367800              		les	si, [es:DSKADR]
 16174                                  		;les	si, es:78h	; [es:DSKADR]
 16175                                  					; Get pointer to disk base table
 16176 000012C6 8936[2D01]              		mov	[dpt], si
 16177 000012CA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16178                                  
 16179                                  		; Initialize the head settle time to 0Fh. See the offsets
 16180                                  		; given in dskprm.inc.
 16181                                  
 16182 000012CE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16183 000012D3 5E                      		pop	si
 16184 000012D4 07                      		pop	es
 16185                                  SkipSaveDskAdr:
 16186                                  		; 24/12/2023
 16187 000012D5 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 16188                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 16189 000012D9 49                      		dec	cx
 16190 000012DA 80E503                  		and	ch, 3
 16191 000012DD D0CD                    		ror	ch, 1
 16192 000012DF D0CD                    		ror	ch, 1
 16193 000012E1 86CD                    		xchg	ch, cl
 16194 000012E3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 16195 000012E7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16196 000012EB 06                      		push	es
 16197 000012EC 1E                      		push	ds
 16198 000012ED 56                      		push	si
 16199 000012EE 57                      		push	di
 16200 000012EF B418                    		mov	ah, 18h
 16201 000012F1 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 16202                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 16203 000012F3 7231                    		jc	short FormaStatErr
 16204 000012F5 803E[AA05]01            		cmp	byte [had_format_error], 1
 16205 000012FA 7423                    		jz	short skip_disk_base_setting
 16206 000012FC 06                      		push	es		; Save segment returned	by the rom
 16207                                  
 16208                                  		; 02/09/2023
 16209                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 16210 000012FD 31F6                    		xor	si, si
 16211 000012FF 8EC6                    		mov	es, si ; 0
 16212 00001301 06                      		push	es ; * ; 02/09/2023
 16213                                  
 16214 00001302 26C4367800              		les	si, [es:DSKADR]
 16215                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 16216                                  					; Get current disk base	table
 16217 00001307 8936[AB05]              		mov	[tempdpt], si
 16218 0000130B 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 16219                                  
 16220                                  		; 02/09/2023
 16221                                  		;;mov	es, [zeroseg]
 16222                                  		;xor	si, si ; 0
 16223                                  		;mov	es, si
 16224 0000130F 07                      		pop	es ; * ; 02/09/2023
 16225                                  
 16226                                  		;mov	es:78h,	di
 16227 00001310 26893E7800              		mov	[es:DSKADR], di
 16228                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 16229 00001315 268F067A00              		pop	word [es:DSKADR+2]
 16230 0000131A C606[A905]01            		mov	byte [media_set_for_format], 1
 16231                                  skip_disk_base_setting:
 16232 0000131F 30C0                    		xor	al, al		; Legal	combination + rom support code
 16233                                  		;mov	ds:had_format_error, al	; Reset	the flag
 16234 00001321 A2[AA05]                		mov	[had_format_error], al
 16235 00001324 EB0E                    		jmp	short PopStatRet
 16236                                  ; ---------------------------------------------------------------------------
 16237                                  
 16238                                  FormaStatErr:
 16239                                  		; 10/12/2022
 16240 00001326 B003                    		mov	al, 3
 16241                                  
 16242 00001328 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 16243                                  					; Illegal combination =	0Ch
 16244 0000132B 7406                    		jz	short FormatStatIllegalComb
 16245 0000132D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 16246 00001330 7402                    		jz	short FormatStatTimeOut
 16247                                  		; 10/12/2022
 16248                                  		;dec	al
 16249                                  		; 18/12/2022
 16250 00001332 48                      		dec	ax
 16251                                  		; al = 2
 16252                                  		;mov	al, 1		; Function not supported.
 16253                                  		;jmp	short PopStatRet
 16254                                  ; ---------------------------------------------------------------------------
 16255                                  
 16256                                  FormatStatIllegalComb:
 16257                                  		; 10/12/2022
 16258                                  		;dec	al	; 3 -> 2 or 2 -> 1
 16259                                  		; 18/12/2022
 16260 00001333 48                      		dec	ax
 16261                                  		; al = 2
 16262                                  		;mov	al, 2		; Function supported, but
 16263                                  					; Illegal sect/trk,trk combination.
 16264                                  		; 10/12/2022
 16265                                  		;jmp	short PopStatRet
 16266                                  ; ---------------------------------------------------------------------------
 16267                                  
 16268                                  FormatStatTimeOut:
 16269                                  		; 10/12/2022
 16270                                  		; al = 3
 16271                                  		;mov	al, 3		; Function supported, but
 16272                                  					; Media	not present.
 16273                                  PopStatRet:
 16274 00001334 5F                      		pop	di
 16275 00001335 5E                      		pop	si
 16276 00001336 1F                      		pop	ds
 16277 00001337 07                      		pop	es
 16278                                  SetMediaRet:
 16279 00001338 5A                      		pop	dx
 16280 00001339 59                      		pop	cx
 16281 0000133A C3                      		retn
 16282                                  
 16283                                  ; =============== S U B	R O U T	I N E =======================================
 16284                                  
 16285                                  ; 16/10/2022
 16286                                  
 16287                                  ; ---------------------------------------------------------------------------
 16288                                  ;
 16289                                  ; RESET THE DRIVE
 16290                                  ;
 16291                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 16292                                  ; slow head settle time for the next operation. this is because the reset
 16293                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 16294                                  ; time around - there is a problem with 3.5" drives in that the head does
 16295                                  ; not settle down in time,even for read operations!!
 16296                                  ;
 16297                                  ; ---------------------------------------------------------------------------
 16298                                  
 16299                                  ResetDisk:
 16300 0000133B 50                      		push	ax
 16301                                  
 16302                                  		; 02/09/2023
 16303 0000133C B80100                  		mov	ax, 1 ; PCDOS 7.1
 16304 0000133F 3806[A905]              		cmp	[media_set_for_format], al ; 1
 16305                                  		;cmp	byte [media_set_for_format], 1
 16306                                  					; Reset while formatting?
 16307 00001343 7503                    		jnz	short ResetDisk_cont
 16308                                  					; Then verify operation in "fmt & vrfy"
 16309                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 16310 00001345 A2[AA05]                		mov	[had_format_error], al ; 1
 16311                                  ResetDisk_cont:
 16312                                  		; 02/09/2023 (ah=0)
 16313                                  		;xor	ah, ah		; So signals that we had a format error
 16314 00001348 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 16315                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 16316 0000134A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 16317                                  					; Zap up the speed
 16318 0000134F 58                      		pop	ax
 16319 00001350 C3                      		retn
 16320                                  
 16321                                  ; =============== S U B	R O U T	I N E =======================================
 16322                                  
 16323                                  ; 16/10/2022
 16324                                  
 16325                                  ; ---------------------------------------------------------------------------
 16326                                  ;
 16327                                  ; This routine sets up the drive parameter table with the values needed for
 16328                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 16329                                  ;
 16330                                  ; on entry  -	ES:DI - points to bds for the drive
 16331                                  ;		Xfer_Seg:BX - points to trkbuf
 16332                                  ;		AL    - number of sectors
 16333                                  ;		AH    - int 13 function code
 16334                                  ;		CL    - sector number for verify
 16335                                  ;		DS    - Bios_Data
 16336                                  ;
 16337                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 16338                                  ;		AX and flags are the results of the int 13
 16339                                  ;
 16340                                  ; ---------------------------------------------------------------------------
 16341                                  
 16342                                  		; 24/12/2023 - Retro DOS 5.0
 16343                                  
 16344                                  		; 19/10/2022
 16345                                  ToRom:
 16346 00001351 53                      		push	bx
 16347 00001352 56                      		push	si
 16348                                  
 16349                                  		; Compaq bug fix - check whether we are using new ROM
 16350                                  		; functionality to set up format, not merely if it exists.
 16351                                  		; This was formerly a check against [new_rom]
 16352                                  
 16353 00001353 F606[A905]01            		test	byte [media_set_for_format], 1
 16354 00001358 7534                    		jnz	short GotValidDpt
 16355 0000135A 50                      		push	ax
 16356 0000135B 06                      		push	es		; Save bds segment
 16357                                  		; 24/12/2023
 16358 0000135C 26807D3E02              		cmp	byte [es:di+3Eh], 2
 16359                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16360                                  					; ffSmall ; is it a 3.5" drive?
 16361                                  		; 24/12/2023
 16362                                  		;pushf	; not necessary	; (Save	the cmp	result)
 16363 00001361 8E06[1A00]              		mov	es, [zeroseg]
 16364                                  		;les	si, es:78h	; Get pointer to disk base table
 16365 00001365 26C4367800              		les	si, [es:DSKADR]
 16366                                  		;mov	word ptr ds:dpt, si
 16367                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 16368 0000136A 8936[2D01]              		mov	[dpt], si
 16369 0000136E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16370                                  		
 16371 00001372 A0[3701]                		mov	al, [formt_eot]
 16372 00001375 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 16373 00001379 A0[3B01]                		mov	al, [gap_patch]
 16374 0000137C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 16375                                  					; Important for	format
 16376 00001380 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16377                                  					; Assume we are	doing a	seek operation
 16378                                  					; Setup	motor start correctly for 3.5" drives
 16379                                  		; 24/12/2023
 16380                                  		;popf			; Get result of	earlier	cmp
 16381 00001385 7505                    		jnz	short MotorStrtOK
 16382 00001387 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 16383                                  MotorStrtOK:
 16384 0000138C 07                      		pop	es		; Restore bds segment
 16385 0000138D 58                      		pop	ax
 16386                                  GotValidDpt:
 16387 0000138E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 16388 00001392 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 16389 00001394 268A5504                		mov	dl, [es:di+4]	; Set drive number
 16390 00001398 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 16391 0000139C 06                      		push	es		; Save bds segment
 16392 0000139D 8E06[A804]              		mov	es, [xfer_seg]
 16393 000013A1 CD13                    		int	13h		; DISK -
 16394 000013A3 07                      		pop	es		; Restore bds segment
 16395 000013A4 5E                      		pop	si
 16396 000013A5 5B                      		pop	bx
 16397 000013A6 C3                      		retn
 16398                                  
 16399                                  ; ---------------------------------------------------------------------------
 16400                                  
 16401                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16402                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 16403                                  
 16404                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 16405                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 16406                                  
 16407                                  ; ==========================================================================
 16408                                  ;
 16409                                  ; get the owner of the physical drive represented by the logical drive in al.
 16410                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 16411                                  ; if this is not the case, the system may hang, just following the linked list.
 16412                                  ;
 16413                                  ; ==========================================================================
 16414                                  
 16415                                  		; 24/12/2023 - Retro DOS 5.0
 16416                                  
 16417                                  		; 19/10/2022
 16418                                  ioctl_getown:
 16419 000013A7 E8FAF1                  		call	SetDrive
 16420 000013AA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 16421                                  					; Get physical drive number
 16422 000013AE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 16423                                  ownloop:
 16424 000013B2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 16425 000013B6 7507                    		jnz	short getnextBDS
 16426                                  		; 24/12/2023
 16427 000013B8 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 16428                                  		; 10/12/2022
 16429                                  		;test	byte [es:di+23h], 20h
 16430                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 16431                                  					; fi_own_physical
 16432 000013BD 7514                    		jnz	short exitown
 16433                                  getnextBDS:
 16434 000013BF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 16435 000013C2 EBEE                    		jmp	short ownloop
 16436                                  ; ---------------------------------------------------------------------------
 16437                                  
 16438                                  ; ==========================================================================
 16439                                  ;
 16440                                  ; set the ownership of the physical drive represented by the logical drive
 16441                                  ; in al to al.
 16442                                  ;
 16443                                  ; ==========================================================================
 16444                                  
 16445                                  		; 24/12/2023 - Retro DOS 5.0
 16446                                  
 16447                                  		; 19/10/2022
 16448                                  ioctl_setown:
 16449 000013C4 E8DDF1                  		call	SetDrive
 16450 000013C7 C606[7A00]01            		mov	byte [fsetowner], 1
 16451                                  					; set flag for CheckSingle to look at.
 16452 000013CC E8A8F5                  		call	checksingle
 16453                                  		; 02/09/2023
 16454 000013CF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 16455                                  		;mov	byte [fsetowner], 0
 16456                                  					; set ownership	of drive reset flag
 16457                                  		; Fall into ExitOwn
 16458                                  
 16459                                  ; ==========================================================================
 16460                                  ;
 16461                                  ; if there is only one logical drive assigned to this physical drive, return
 16462                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 16463                                  ;
 16464                                  ; ==========================================================================
 16465                                  
 16466                                  		; 24/12/2023 - Retro DOS 5.0
 16467                                  exitown:
 16468 000013D3 30C9                    		xor	cl, cl
 16469                                  		; 24/12/2023
 16470 000013D5 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 16471                                  		; 12/12/2022
 16472                                  		;test	byte [es:di+23h], 10h
 16473                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 16474                                  					; fi_am_mult
 16475 000013DA 7406                    		jz	short exitnomult
 16476 000013DC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 16477                                  					; Get logical drive number
 16478                                  					; Get it 1-based
 16479 000013E0 FEC1                    		inc	cl
 16480                                  exitnomult:
 16481 000013E2 C51E[1200]              		lds	bx, [ptrsav]
 16482 000013E6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 16483                                  					; Exit normal termination
 16484                                  		; 12/12/2022
 16485                                  		; cf=0
 16486                                  		;clc
 16487 000013E9 C3                      		retn
 16488                                  
 16489                                  ; =============== S U B	R O U T	I N E =======================================
 16490                                  
 16491                                  ; 16/10/2022
 16492                                  
 16493                                  ; ---------------------------------------------------------------------------
 16494                                  ;
 16495                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 16496                                  ; only if the first byte of TempDpt is not -1.
 16497                                  ; all registers (including flags) are preserved.
 16498                                  ;
 16499                                  ; ---------------------------------------------------------------------------
 16500                                  
 16501                                  		; 24/12/2023
 16502                                  		; 19/10/2022
 16503                                  RestoreOldDpt:
 16504                                  		; if we have already restored the disk base table earlier,
 16505                                  		; do not do it again.
 16506                                  
 16507 000013EA 50                      		push	ax
 16508 000013EB 30C0                    		xor	al, al
 16509 000013ED A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 16510 000013F0 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 16511 000013F4 08C0                    		or	al, al
 16512 000013F6 7418                    		jz	short DontRestore
 16513 000013F8 56                      		push	si
 16514 000013F9 1E                      		push	ds
 16515 000013FA 06                      		push	es
 16516 000013FB C536[AB05]              		lds	si, [tempdpt]
 16517                                  
 16518                                  		; 17/10/2022
 16519                                  		;mov	es, [cs:BIOSDATAWORD]
 16520                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16521                                  		;mov	es, [es:zeroseg]
 16522                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 16523                                  
 16524                                  		; 24/12/2023
 16525 000013FF 31C0                    		xor	ax, ax
 16526 00001401 8EC0                    		mov	es, ax ; 0
 16527                                  
 16528                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 16529 00001403 2689367800              		mov	[es:DSKADR], si
 16530                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 16531 00001408 268C1E7A00              		mov	[es:DSKADR+2], ds
 16532 0000140D 07                      		pop	es
 16533 0000140E 1F                      		pop	ds
 16534 0000140F 5E                      		pop	si
 16535                                  DontRestore:
 16536 00001410 58                      		pop	ax
 16537                                  		; 12/12/2022
 16538                                  		; cf=0
 16539                                  		;clc			;  Clear carry
 16540 00001411 C3                      		retn
 16541                                  
 16542                                  ; ---------------------------------------------------------------------------
 16543                                  
 16544                                  ; 16/10/2022
 16545                                  
 16546                                  ; ==========================================================================
 16547                                  ;	get media id
 16548                                  ; ==========================================================================
 16549                                  ;
 16550                                  ; FUNCTION: get the volume label,the system id and the serial number from
 16551                                  ;	    the media that has the extended boot record.
 16552                                  ;	    for the conventional media,this routine will return "unknown
 16553                                  ;	    media type" error to dos.
 16554                                  ;
 16555                                  ; INPUT :   ES:di -> bds table for this drive.
 16556                                  ;
 16557                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 16558                                  ;	    if carry set,then al contains the device driver error number
 16559                                  ;	    that will be returned to dos.
 16560                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 16561                                  ;
 16562                                  ; SUBROUTINES TO BE CALLED:
 16563                                  ;	BootIo:NEAR
 16564                                  ;
 16565                                  ; LOGIC:
 16566                                  ;	to recognize the extended boot record,this logic will actually
 16567                                  ;	access the boot sector even if it is a hard disk.
 16568                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 16569                                  ;	field of bpb and the extended boot signature.
 16570                                  ;
 16571                                  ; {
 16572                                  ;	get logical drive number from bds table;
 16573                                  ;	rFlag = read operation;
 16574                                  ;	BootIo;		 /*get the media boot record into the buffer
 16575                                  ;	if (no error) then
 16576                                  ;	     if (extended boot record) then
 16577                                  ;		{ set volume label,volume serial number and system id
 16578                                  ;		  of the request packet to those of the boot record;
 16579                                  ;		};
 16580                                  ;	     else		  /*not an extended bpb */
 16581                                  ;		{ set register al to "unknown media.." error code;
 16582                                  ;		  set carry bit;
 16583                                  ;		};
 16584                                  ;	else
 16585                                  ;	     ret;	/*already error code is set in the register al
 16586                                  ;
 16587                                  ; ==========================================================================
 16588                                  
 16589                                  ;size_of_EXT_BOOT_SERIAL equ 4
 16590                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 16591                                  ;;size_of_EXT_SYSTEM_ID equ 8
 16592                                  
 16593                                  		; 24/12/2023 - Retro DOS 5.0
 16594                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 16595                                  
 16596                                  		; 19/10/2022
 16597                                  GetMediaId:
 16598 00001412 E8B000                  		call	ChangeLineChk
 16599 00001415 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 16600 00001419 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 16601 0000141E E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 16602 00001421 722E                    		jb	short IOCtl_If1
 16603                                  					; Valid? (0F0h-0FFh?)
 16604 00001423 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16605                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16606                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 16607                                  		; 24/12/2023
 16608 00001428 7225                    		jb	short IOCtl_If7		
 16609                                  
 16610                                  		; 24/12/2023
 16611                                  		; 10/12/2022
 16612                                  		;mov	si, disksector+26h
 16613                                  		;;;
 16614                                  		; 24/12/2023
 16615                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 16616 0000142A BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 16617 0000142D 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16618 00001432 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 16619 00001434 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 16620                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 16621                                  IOCtl_If3:
 16622                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16623                                  		;;;
 16624 00001437 803C29                  		cmp	byte [si], 29h
 16625                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16626                                  					; EXT_BOOT_SIGNATURE
 16627 0000143A 7512                    		jne	short IOCtl_If2	; not extended boot record
 16628 0000143C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 16629 00001440 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16630                                  		; 10/12/2022
 16631                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16632 00001444 46                      		inc	si
 16633                                  		; 24/12/2023
 16634                                  		; si = disksector+27h (BS_VolID)
 16635                                  		;      or disksector+43h (BS_FAT32_VolID)
 16636                                  
 16637 00001445 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16638                                  IOCtl_If4:		; 24/12/2023
 16639 00001448 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16640                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 16641                                  					; +size_of_EXT_SYSTEM_ID
 16642 0000144B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 16643                                  	
 16644                                  		; 10/12/2022
 16645                                  		; cf = 0
 16646                                  		;clc
 16647                                  
 16648 0000144D C3                      		retn
 16649                                  ; ---------------------------------------------------------------------------
 16650                                  
 16651                                  		; 24/12/2023
 16652                                  IOCtl_If2:
 16653 0000144E F9                      		stc	
 16654                                  IOCtl_If7:
 16655 0000144F B007                    		mov	al, 7		; error_unknown_media
 16656                                  		;stc
 16657                                  IOCtl_If6:
 16658                                  IOCtl_If1:
 16659 00001451 C3                      		retn
 16660                                  ; ---------------------------------------------------------------------------
 16661                                  
 16662                                  ; 16/10/2022
 16663                                  
 16664                                  ; ==========================================================================
 16665                                  ;  set media id
 16666                                  ; ==========================================================================
 16667                                  
 16668                                  ; function: set the volume label, the system id and the serial number of
 16669                                  ;	    the media that has the extended boot record.
 16670                                  ;	    for the conventional media, this routine will return "unknown
 16671                                  ;	    media.." error to dos.
 16672                                  ;	    this routine will also set the corresponding informations in
 16673                                  ;	    the bds table.
 16674                                  ;
 16675                                  ; input :   ES:di -> bds table for this drive.
 16676                                  ;
 16677                                  ; output:   the extended boot record in the media will be set according to
 16678                                  ;	    the request packet.
 16679                                  ;	    if carry set, then al contains the device driver error number
 16680                                  ;	    that will be returned to dos.
 16681                                  ;
 16682                                  ; subroutines to be called:
 16683                                  ;	BootIo:NEAR
 16684                                  ;
 16685                                  ; logic:
 16686                                  ;
 16687                                  ; {
 16688                                  ;	get drive_number from bds;
 16689                                  ;	rFlag = "read operation";
 16690                                  ;	BootIo;
 16691                                  ;	if (no error) then
 16692                                  ;	     if (extended boot record) then
 16693                                  ;		{ set volume label,volume serial number and system id
 16694                                  ;		  of the boot record to those of the request packet;
 16695                                  ;		  rFlag = "write operation";
 16696                                  ;		  get drive number from bds;
 16697                                  ;		  BootIo;	  /*write it back*/
 16698                                  ;		};
 16699                                  ;	     else		  /*not an extended bpb */
 16700                                  ;		{ set register al to "unknown media.." error code;
 16701                                  ;		  set carry bit;
 16702                                  ;		  ret;	 /*return back to caller */
 16703                                  ;		};
 16704                                  ;	else
 16705                                  ;	     ret;		 /*already error code is set */
 16706                                  ;
 16707                                  ; ==========================================================================
 16708                                  
 16709                                  		; 24/12/2023 - Retro DOS 5.0
 16710                                  
 16711                                  		; 19/10/2022
 16712                                  SetMediaId:
 16713 00001452 E87000                  		call	ChangeLineChk
 16714 00001455 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 16715                                  					; Logical drive	number
 16716 00001459 88C2                    		mov	dl, al
 16717 0000145B C606[2001]02            		mov	byte [rflag], 2	; romread
 16718 00001460 52                      		push	dx
 16719 00001461 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 16720 00001464 5A                      		pop	dx
 16721 00001465 72EA                    		jb	short IOCtl_If6
 16722                                  					; Valid? (0F0h-0FFh?)
 16723 00001467 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16724                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16725 0000146C 72E1                    		jb	short IOCtl_If7	; Brif not
 16726                                  
 16727                                  		; 24/12/2023
 16728                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16729                                  		;			; EXT_BOOT_SIGNATURE
 16730                                  		;jnz	short IOCtl_If7	; not extended boot record
 16731                                  		
 16732 0000146E 06                      		push	es		; Save BDS pointer
 16733 0000146F 57                      		push	di
 16734 00001470 1E                      		push	ds		; Point	ES To boot record
 16735 00001471 07                      		pop	es
 16736                                  
 16737                                  		; 24/12/2023
 16738                                  		;;;
 16739                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 16740 00001472 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 16741 00001475 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16742 0000147A 7403                    		jz      short IOCtl_If5	; FAT32 fs
 16743 0000147C 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 16744                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 16745                                  IOCtl_If5:
 16746                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16747 0000147F 803D29                  		cmp	byte [di], 29h
 16748 00001482 7404                    		je	short IOCtl_If8
 16749 00001484 5F                      		pop	di		; not extended boot record
 16750 00001485 07                      		pop	es
 16751                                  		;jmp	short IOCtl_If7
 16752                                  		; 24/12/2023
 16753 00001486 EBC6                    		jmp	short IOCtl_If2
 16754                                  IOCtl_If8:
 16755                                  		;;;
 16756                                  		; 24/12/2023
 16757                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16758 00001488 47                      		inc	di
 16759                                  		; di = disksector+27h (BS_VolID)
 16760                                  		;      or disksector+43h (BS_FAT32_VolID)
 16761                                  
 16762 00001489 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 16763 0000148D C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 16764 00001490 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16765                                  		
 16766                                  		; 24/12/2023
 16767                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16768                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 16769                                  		;			; +size_of_EXT_SYSTEM_ID
 16770                                  		;rep movsb
 16771 00001493 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 16772                                  
 16773 00001496 06                      		push	es		; point	ds back	to Bios_Data
 16774 00001497 1F                      		pop	ds
 16775 00001498 5F                      		pop	di		; restore bds pointer
 16776 00001499 07                      		pop	es
 16777 0000149A E8B2F3                  		call	mov_media_ids	; update the bds media id info.
 16778 0000149D 88D0                    		mov	al, dl
 16779 0000149F C606[2001]03            		mov	byte [rflag], 3	; romwrite
 16780 000014A4 E80600                  		call	BootIo		; write	it back.
 16781 000014A7 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 16782                                  					; make sure chk_media check the driver
 16783                                  					; return with error code from BootIo
 16784 000014AC C3                      		retn
 16785                                  ; ---------------------------------------------------------------------------
 16786                                  
 16787                                  		; 24/12/2023
 16788                                  ;IOCtl_If7:
 16789                                  ;		mov	al, 7		; error_unknown_media
 16790                                  ;		stc
 16791                                  ;IOCtl_If6:
 16792                                  ;		retn
 16793                                  
 16794                                  ; =============== S U B	R O U T	I N E =======================================
 16795                                  
 16796                                  ; 16/10/2022
 16797                                  
 16798                                  ; ---------------------------------------------------------------------------
 16799                                  ;	BootIo
 16800                                  ; ---------------------------------------------------------------------------
 16801                                  ;
 16802                                  ; function: read/write the boot record into boot sector.
 16803                                  ;
 16804                                  ; input :
 16805                                  ;	    al=logical drive number
 16806                                  ;	    rFlag = operation (read/write)
 16807                                  ;
 16808                                  ; output:   for read operation,the boot record of the drive specified in bds
 16809                                  ;	    be read into the DiskSector buffer.
 16810                                  ;	    for write operation,the DiskSector buffer image will be written
 16811                                  ;	    to the drive specified in bds.
 16812                                  ;	    if carry set,then al contains the device driver error number
 16813                                  ;	    that will be returned to dos.
 16814                                  ;	    AX,CX,DX register destroyed.
 16815                                  ;	    if carry set,then al will contain the error code from DiskIO.
 16816                                  ;
 16817                                  ; subroutines to be called:
 16818                                  ;	DiskIO:NEAR
 16819                                  ;
 16820                                  ; logic:
 16821                                  ;
 16822                                  ; {
 16823                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 16824                                  ;	sectorcount = 1;	 /*read 1 sector only */
 16825                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 16826                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 16827                                  ; }
 16828                                  ; ==========================================================================
 16829                                  
 16830                                  		; 19/10/2022
 16831                                  BootIo:	
 16832 000014AD 06                      		push	es
 16833 000014AE 57                      		push	di
 16834 000014AF 53                      		push	bx
 16835 000014B0 1E                      		push	ds
 16836 000014B1 07                      		pop	es		; Point ES: to Bios_Data
 16837                                  
 16838                                  		; Call DiskIO to read/write the boot sec. The parameters which
 16839                                  		; need to be initialized for this subroutine out here are
 16840                                  		; - Transfer address to Bios_Data:DiskSector
 16841                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 16842                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 16843                                  		; - Number of sectors <-- 1
 16844                                  
 16845 000014B2 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 16846 000014B5 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 16847 000014B7 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 16848 000014BB B90100                  		mov	cx, 1
 16849 000014BE E850F5                  		call	diskio
 16850 000014C1 5B                      		pop	bx
 16851 000014C2 5F                      		pop	di
 16852 000014C3 07                      		pop	es
 16853 000014C4 C3                      		retn
 16854                                  
 16855                                  ; =============== S U B	R O U T	I N E =======================================
 16856                                  
 16857                                  ; 16/10/2022
 16858                                  
 16859                                  ; ---------------------------------------------------------------------------
 16860                                  ;	ChangeLineChk
 16861                                  ; ---------------------------------------------------------------------------
 16862                                  ;
 16863                                  ; when the user calls get/set media id call before dos establishes the media
 16864                                  ; by calling "media_chk",the change line activity of the drive is going to be
 16865                                  ; lost.	this routine will check the change line activity and will save the
 16866                                  ; history in the flags.
 16867                                  ;
 16868                                  ; FUNCTION: check the change line error activity
 16869                                  ;
 16870                                  ; INPUT :  ES:di -> bds table.
 16871                                  ;
 16872                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 16873                                  ;
 16874                                  ; SUBROUTINES TO BE CALLED:
 16875                                  ;	Set_Changed_DL
 16876                                  ;
 16877                                  ; ---------------------------------------------------------------------------
 16878                                  
 16879                                  		; 24/12/2023 - Retro DOS 5.0
 16880                                  ChangeLineChk:	
 16881 000014C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16882 000014C9 08D2                    		or	dl, dl		; Fixed	disk?
 16883 000014CB 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 16884                                  		; 24/12/2023
 16885 000014CD 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 16886                                  		; 12/12/2022
 16887                                  		;test	byte [es:di+23h], 4
 16888                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 16889                                  					; return_fake_bpb
 16890 000014D2 751A                    		jnz	short ChangeLnChkRet
 16891 000014D4 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 16892 000014D9 7513                    		jnz	short ChangeLnChkRet
 16893 000014DB E8AD07                  		call	haschange	; This drive support change line?
 16894 000014DE 740E                    		jz	short ChangeLnChkRet ; Do nothing
 16895                                  
 16896                                  		; Execute the rom disk interrupt to check changeline activity.
 16897                                  
 16898 000014E0 B416                    		mov	ah, 16h
 16899 000014E2 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 16900                                  				; DL = drive to	check
 16901                                  				; Return: AH = disk change status
 16902 000014E4 7308                    		jnb	short ChangeLnChkRet
 16903 000014E6 53                      		push	bx
 16904 000014E7 BB4000                  		mov	bx, 40h		; fchanged
 16905                                  					; Update flag in BDS for this
 16906                                  					; physical drive
 16907 000014EA E87707                  		call	set_changed_dl
 16908 000014ED 5B                      		pop	bx
 16909                                  ChangeLnChkRet:				
 16910 000014EE C3                      		retn
 16911                                  
 16912                                  ; ---------------------------------------------------------------------------
 16913                                  
 16914                                  ; 16/10/2022
 16915                                  
 16916                                  ; ==========================================================================
 16917                                  ;	GetAccessFlag
 16918                                  ; ==========================================================================
 16919                                  ;
 16920                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 16921                                  ;
 16922                                  ; INPUT :
 16923                                  ;	    ES:di -> bds table
 16924                                  ;
 16925                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 16926                                  ;						 = 1 if disk i/o allowed.
 16927                                  ; ==========================================================================
 16928                                  
 16929                                  		; 24/12/2023 - Retro DOS 5.0
 16930                                  
 16931                                  		; 19/10/2022
 16932                                  GetAccessFlag:				
 16933 000014EF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16934 000014F3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16935                                  		;mov	al, 0		; Assume result	is unformatted
 16936                                  		; 10/12/2022
 16937 000014F6 28C0                    		sub	al, al
 16938                                  		; 24/12/2023
 16939 000014F8 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16940                                  		;test	word ptr es:[di+3Fh], 200h
 16941                                  		; 10/12/2022
 16942                                  		;test	byte [es:di+36], 02h
 16943                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 16944                                  					; unformatted_media
 16945 000014FD 7501                    		jnz	short GafDone	; Done if unformatted
 16946                                  		;inc	al		; Return true for formatted
 16947                                  		; 24/12/2023
 16948 000014FF 40                      		inc	ax
 16949                                  GafDone:				
 16950 00001500 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16951 00001503 C3                      		retn
 16952                                  ; ---------------------------------------------------------------------------
 16953                                  
 16954                                  ; 16/10/2022
 16955                                  
 16956                                  ; ==========================================================================
 16957                                  ;	SetAccessFlag
 16958                                  ; ==========================================================================
 16959                                  ;
 16960                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 16961                                  ;
 16962                                  ; input :
 16963                                  ;	    ES:di -> bds table
 16964                                  ;
 16965                                  ; output:   unformtted_media bit modified according to the user request
 16966                                  ; ==========================================================================
 16967                                  
 16968                                  		; 24/12/2023 - Retro DOS 5.0
 16969                                  
 16970                                  		; 19/10/2022
 16971                                  SetAccessFlag:				
 16972 00001504 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 16973 00001508 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16974                                  		; 24/12/2023
 16975 0000150B 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 16976                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 16977                                  		; 10/12/2022
 16978                                  		;and	byte [es:di+36], 0FDh
 16979                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 16980                                  					; ~unformatted_media
 16981 00001510 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16982 00001514 7505                    		jnz	short saf_Done
 16983                                  		; 24/12/2023
 16984 00001516 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16985                                  		;or	word ptr es:[di+3Fh], 200h
 16986                                  		; 15/04/2024
 16987                                  		; 10/12/2022
 16988                                  		;or	byte [es:di+36], 02h
 16989                                  		;;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 16990                                  					; unformatted_media
 16991                                  saf_Done:				
 16992 0000151B C3                      		retn
 16993                                  ; ---------------------------------------------------------------------------
 16994                                  
 16995                                  ; 16/10/2022
 16996                                  
 16997                                  ; ==========================================================================
 16998                                  ; Ioctl_Support_Query
 16999                                  ; ==========================================================================
 17000                                  ;
 17001                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 17002                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 17003                                  ; device attributes specifies if this function is supported.
 17004                                  ;
 17005                                  ; ==========================================================================
 17006                                  
 17007                                  		; 24/12/2023 - Retro DOS 5.0
 17008                                  
 17009                                  		; 19/10/2022
 17010                                  ioctl_support_query:
 17011 0000151C 06                      		push	es
 17012 0000151D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 17013 00001521 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 17014                                  					; AL ==	Major, AH == Minor
 17015                                  		; 24/12/2023
 17016                                  		; 02/09/2023 (PCDOS 7.1)
 17017 00001525 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 17018                                  					; new generic ioctl function (FAT32)
 17019 00001527 7404                    		je	short ioctl_support
 17020                                  
 17021 00001529 3C08                    		cmp	al, 8		; IOC_DC
 17022                                  					; See if major code is 8
 17023 0000152B 7513                    		jne	short nosupport
 17024                                  ioctl_support:
 17025 0000152D 0E                      		push	cs
 17026 0000152E 07                      		pop	es
 17027                                  		; 24/12/2023
 17028                                  		; 02/09/2023
 17029 0000152F B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 17030                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 17031                                  		; 10/12/2022
 17032 00001532 BF[BD0E]                		mov	di, IOC_DC_Table
 17033                                  		;mov	di, 0C60h	; IOC_DC_Table
 17034                                  					; at 2C7h:0C60h	= 70h:31D0h
 17035 00001535 86E0                    		xchg	al, ah		; Put minor code in AL
 17036 00001537 F2AE                    		repne scasb		; Scan for minor code in AL
 17037 00001539 7505                    		jnz	short nosupport	; it was not found
 17038 0000153B B80001                  		mov	ax, 100h
 17039                                  		; 10/12/2022
 17040                                  		; (jump to ioctlsupexit is not required)
 17041                                  		;jmp	short $+2	; ioctlsupexit
 17042                                  					; Signal ioctl is supported
 17043                                  		;;jmp	short ioctlsupexit
 17044                                  ; ---------------------------------------------------------------------------
 17045                                  ioctlsupexit:
 17046 0000153E 07                      		pop	es
 17047                                  		; 10/12/2022
 17048                                  		; cf = 0
 17049                                  		;clc
 17050 0000153F C3                      		retn
 17051                                  ; ---------------------------------------------------------------------------
 17052                                  nosupport:
 17053 00001540 07                      		pop	es
 17054 00001541 E991EB                  		jmp	bc_cmderr
 17055                                  ; ---------------------------------------------------------------------------
 17056                                  
 17057                                  ; 16/10/2022
 17058                                  
 17059                                  ; ==========================================================================
 17060                                  ;	GetMediaSenseStatus
 17061                                  ; ==========================================================================
 17062                                  ;
 17063                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 17064                                  ;	    diskette drive and whether the media is the default type
 17065                                  ;	    for that drive. (default type means the max size for that
 17066                                  ;	    drive)
 17067                                  ;
 17068                                  ; INPUT :   ES:DI -> BDS table
 17069                                  ; OUTPUT:   If carry clear
 17070                                  ;	    DS:BX -> Updated IOCtlPacket
 17071                                  ;
 17072                                  ;			 Special Function at offset 0:
 17073                                  ;				0	- Media detected is not default type
 17074                                  ;				1	- Media detected is default type
 17075                                  ;
 17076                                  ;			 Device Type at offset 1:
 17077                                  ;				2       - 720K 3.5" 80 tracks
 17078                                  ;				7	- 1.44M 3.5" 80 tracks
 17079                                  ;				9	- 2.88M 3.5" 80 tracks
 17080                                  ;
 17081                                  ; Error Codes returned in AX if carry set:
 17082                                  ;
 17083                                  ; 8102 - Drive not ready	- No disk is in the drive.
 17084                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 17085                                  ;				  the media is really unkown, any error
 17086                                  ;				  other than "media not present"
 17087                                  ; 
 17088                                  ; ==========================================================================
 17089                                  
 17090                                  		; 19/10/2022
 17091                                  SenseMediaType:
 17092 00001544 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 17093 00001548 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17094                                  		; 10/10/2022
 17095                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 17096 0000154B 31D2                    		xor	dx, dx
 17097 0000154D 8917                    		mov	[bx], dx ; 0
 17098                                  		;
 17099 0000154F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17100                                  					; Get int 13h drive number from	BDS
 17101                                  		; 10/12/2022
 17102                                  		;xor	dh, dh		; DX = physical	drive number
 17103 00001553 B420                    		mov	ah, 20h		; Get Media Type function
 17104                                  					; If no	carry media type in AL
 17105 00001555 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 17106 00001557 7216                    		jc	short MediaSenseEr ; error code	in AH
 17107 00001559 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 17108                                  DetermineMediaType:
 17109 0000155B FEC8                    		dec	al
 17110 0000155D 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 17111 0000155F 740A                    		jz	short GotMediaType
 17112 00001561 0404                    		add	al, 4
 17113 00001563 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 17114 00001565 7404                    		jz	short GotMediaType
 17115 00001567 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 17116 00001569 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 17117                                  GotMediaType:
 17118 0000156B 884701                  		mov	[bx+1],	al	; Save the return value
 17119                                  		; 10/12/2022
 17120                                  		; cf = 0
 17121                                  		;clc			; Signal success
 17122 0000156E C3                      		retn
 17123                                  ; ---------------------------------------------------------------------------
 17124                                  
 17125                                  MediaSenseEr:
 17126 0000156F 80FC32                  		cmp	ah, 32h		; See if not default media error
 17127 00001572 74E7                    		jz	short DetermineMediaType ; Not really an error
 17128 00001574 B002                    		mov	al, 2		; Now assume drive not ready
 17129 00001576 80FC31                  		cmp	ah, 31h		; See if media was present
 17130 00001579 7402                    		jz	short SenseErrExit ; Return drive not ready
 17131                                  UnknownMediaType:
 17132 0000157B B007                    		mov	al, 7		; Just don't know the media type
 17133                                  SenseErrExit:
 17134 0000157D B481                    		mov	ah, 81h		; Signal error return
 17135 0000157F F9                      		stc
 17136 00001580 C3                      		retn
 17137                                  
 17138                                  ; ----------------------------------------------------------------------------
 17139                                  		; 10/12/2022
 17140                                  		;db    0
 17141                                  ; ----------------------------------------------------------------------------
 17142                                  
 17143                                  ;-----------------------------------------------------------------------------
 17144                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 17145                                  ;-----------------------------------------------------------------------------
 17146                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 17147                                  
 17148                                  ; =============== S U B R O U T I N E =======================================
 17149                                  
 17150                                  SetLockState:
 17151 00001581 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 17152 00001585 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17153                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17154                                  		;call	check_int13h_exts_present
 17155                                  		; 26/12/2023
 17156 00001588 E82100                  		call	check_int13h_exts_p
 17157                                  		;mov	al, 3		; unknown command error
 17158 0000158B 721C                    		jc	short setlockst_ret
 17159 0000158D 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 17160 0000158F B445                    		mov	ah, 45h
 17161 00001591 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 17162                                  		; (DL - drive, [SI - disk address packet)
 17163 00001593 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 17164                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 17165                                  		
 17166                                  		; 26/12/2023
 17167 00001596 EB0A                    		jmp	short sls_em
 17168                                  
 17169                                  ;		jnc	short setlockst_ret
 17170                                  ;		mov	al, ah
 17171                                  ;		call	maperror
 17172                                  ;setlockst_ret:
 17173                                  ;		mov	ah, 81h		; Return this status in case of carry
 17174                                  ;		retn
 17175                                  
 17176                                  ; =============== S U B R O U T I N E =======================================
 17177                                  
 17178                                  EjectMedia:
 17179                                  		;mov	dl, [es:di+4]	; eject media in drive
 17180                                  		;			; [es:di+BDS.drivenum]
 17181                                  		;call	check_int13h_exts_present
 17182                                  		; 26/12/2023
 17183 00001598 E81100                  		call	check_int13h_exts_p
 17184                                  		;mov	al, 3		; unknown command error
 17185 0000159B 720C                    		jc	short ejectm_ret
 17186 0000159D B80046                  		mov	ax, 4600h
 17187 000015A0 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 17188                                  		; (DL - drive)
 17189                                  sls_em:			; 26/12/2023
 17190 000015A2 7305                    		jnc	short ejectm_ret
 17191 000015A4 88E0                    		mov	al, ah
 17192 000015A6 E800F8                  		call	maperror
 17193                                  setlockst_ret:		; 26/12/2023
 17194                                  ejectm_ret:
 17195 000015A9 B481                    		mov	ah, 81h		; Return this status in case of carry
 17196 000015AB C3                      		retn
 17197                                  
 17198                                  ; =============== S U B R O U T I N E =======================================
 17199                                  
 17200                                  		; 26/12/2023
 17201                                  check_int13h_exts_p:
 17202 000015AC 268A5504                		mov	dl, [es:di+4]
 17203                                  
 17204                                  check_int13h_exts_present:
 17205 000015B0 B441                    		mov	ah, 41h
 17206 000015B2 53                      		push	bx
 17207 000015B3 BBAA55                  		mov	bx, 55AAh
 17208 000015B6 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 17209                                  					; BX = 55AAh, DL = drive number
 17210                                  					; Return: CF set if not supported
 17211                                  					; AH = extensions version
 17212                                  					; BX = AA55h
 17213                                  					; CX = Interface support bit map
 17214 000015B8 81FB55AA                		cmp	bx, 0AA55h
 17215 000015BC 5B                      		pop	bx
 17216 000015BD 7505                    		jnz	short exts_notsupported
 17217 000015BF F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 17218 000015C2 7503                    		jnz	short exts_supported
 17219                                  exts_notsupported:
 17220                                  		; 26/12/2023
 17221 000015C4 B003                    		mov	al, 3
 17222                                  		;
 17223 000015C6 F9                      		stc
 17224                                  exts_supported:
 17225 000015C7 C3                      		retn
 17226                                  
 17227                                  ; =============== S U B R O U T I N E =======================================
 17228                                  
 17229                                  GetDrvMapInfo:
 17230 000015C8 8CD9                    		mov	cx, ds		; get drive map information
 17231                                  					;
 17232                                  					; es:di points to BDS which belongs to
 17233                                  					;	  the requested logical/dos drive number
 17234                                  					;
 17235                                  					; Format of parameter block:
 17236                                  					; Offset  Description (Table 01570)
 17237                                  					;  00h    (call) length of this buffer (in bytes)
 17238                                  					;  01h    (ret) number of bytes in parameter block
 17239                                  					;	    actually used
 17240                                  					;  02h    (ret) drive flags
 17241                                  					;  03h    (ret) physical drive number
 17242                                  					;	    00h-7Fh floppy
 17243                                  					;	    80h-FEh hard
 17244                                  					;	    FFh no physical drive
 17245                                  					;  04h    (ret) bitmap of logical drives associated with
 17246                                  					;	    physical drive
 17247                                  					;	    bit 0 = drive A:, etc.
 17248                                  					;  08h    (ret) relative block address of partition start
 17249                                  					;	    qword
 17250                                  					;
 17251                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 17252 000015CA C51E[1200]              		lds	bx, [ptrsav]
 17253 000015CE C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17254 000015D1 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 17255                                  					; al = unknown command error (03h)
 17256 000015D4 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 17257 000015D7 7251                    		jb	short gdmi_4
 17258 000015D9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17259 000015DD 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 17260 000015E0 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 17261 000015E4 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 17262 000015E8 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 17263 000015EB 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 17264 000015EF 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 17265 000015F2 31C0                    		xor	ax, ax ; 0
 17266 000015F4 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 17267 000015F7 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 17268 000015FA 89470E                  		mov	[bx+0Eh], ax
 17269 000015FD 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 17270                                  					; initialized as 0
 17271 00001600 894706                  		mov	[bx+6], ax ; 0
 17272 00001603 8EC1                    		mov	es, cx
 17273                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 17274 00001605 26C43E[1901]            		les	di, [es:start_bds]
 17275 0000160A B90100                  		mov	cx, 1		; bit 0 (drive A:)
 17276                                  gdmi_1:
 17277 0000160D 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 17278 00001610 7415                    		jz	short gdmi_3	; yes
 17279 00001612 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 17280                                  					; is it same physical drive ?
 17281 00001616 7506                    		jnz	short gdmi_2	; no
 17282 00001618 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 17283                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 17284 0000161B 094706                  		or	[bx+6], ax
 17285                                  gdmi_2:
 17286 0000161E D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 17287 00001620 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 17288 00001622 26C43D                  		les	di, [es:di]	; next BDS
 17289 00001625 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 17290                                  gdmi_3:
 17291 00001627 B80001                  		mov	ax, 100h	; success
 17292                                  gdmi_4:
 17293 0000162A C3                      		retn
 17294                                  
 17295                                  ;-----------------------------------------------------------------------------
 17296                                  
 17297                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17298                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17299                                  
 17300                                  ;-----------------------------------------------------------------------------
 17301                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 17302                                  ;-----------------------------------------------------------------------------
 17303                                  ; 16/03/2019 - Retro DOS v4.0
 17304                                  
 17305                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 17306                                  ;	after booting. this allows testing and implementation of custom int_13
 17307                                  ;	handlers, without giving up ms-dos error recovery
 17308                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 17309                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 17310                                  ;	exit:	orig13	== address of new int_13 handler
 17311                                  ;		ds:dx	== old orig13 value
 17312                                  ;		es:bx	== old old13  value
 17313                                  ;
 17314                                  ; int 2f handler for external block drivers to communicate with the internal
 17315                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 17316                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 17317                                  ; dsk_entry, the entry point for all disk requests.
 17318                                  ;
 17319                                  ; on exit from this driver, we will return to the external driver
 17320                                  ; that issued this int 2f, and can then remove the flags from the stack.
 17321                                  ; this scheme allows us to have a small external device driver, and makes
 17322                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 17323                                  ; since we only need to make changes in one place (most of the time).
 17324                                  ;
 17325                                  ;   ax=800h - check for installed handler - reserved
 17326                                  ;   ax=801h - install the bds into the linked list
 17327                                  ;   ax=802h - dos request
 17328                                  ;   ax=803h - return bds table starting pointer in ds:di
 17329                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 17330                                  ;	    problem. bds table is going to be used to get head/sector
 17331                                  ;	    informations without calling generic ioctl get device parm call.)
 17332                                  
 17333                                  ;BIOSSEGMENT equ 70h
 17334                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 17335                                  
 17336                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 17337                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 17338                                  
 17339                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 17340 0000162B 80FC13                  		cmp	ah, 13h
 17341 0000162E 7413                    		jz	short int2f_replace_int13
 17342 00001630 80FC08                  		cmp	ah, 8
 17343 00001633 7432                    		jz	short mine
 17344                                  
 17345                                  ; Check for WIN386 startup and return the BIOS instance data
 17346                                  
 17347 00001635 80FC16                  		cmp	ah, 16h		; MultWin386
 17348 00001638 746D                    		jz	short win386call
 17349 0000163A 80FC4A                  		cmp	ah, 4Ah		; multMULT
 17350 0000163D 7503                    		jnz	short i2f_handler_iret
 17351 0000163F E99800                  		jmp	handle_multmult
 17352                                  ; ---------------------------------------------------------------------------
 17353                                  
 17354                                  i2f_handler_iret:			
 17355 00001642 CF                      		iret
 17356                                  ; ---------------------------------------------------------------------------
 17357                                  
 17358                                  int2f_replace_int13:
 17359 00001643 FA                      		cli	; 26/12/2023
 17360 00001644 50                      		push	ax	; free up a register for caller's ds
 17361 00001645 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 17362                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 17363                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 17364                                  					; = [02C7h:0030h] = [0070h:25A0h]
 17365 00001647 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17366                                  		; 19/10/2022
 17367                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 17368                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 17369                                  		;push	word ptr ds:Old13	; return them to caller
 17370                                  		;push	word ptr ds:Old13+2
 17371                                  		
 17372                                  		; 02/09/2023 (PCDOS 7.1)
 17373                                  		;push	word [Orig13]
 17374 0000164C FF36[B600]              		push	word [Orig13+2]
 17375                                  		;push	word [Old13]
 17376 00001650 FF36[0801]              		push	word [Old13+2]
 17377                                  
 17378                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 17379                                  		;mov	word ptr ds:Orig13+2, ax
 17380                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 17381                                  		;mov	word ptr ds:Old13+2, es
 17382                                  		
 17383                                  		;mov	[Orig13], dx
 17384                                  		; 02/09/2023
 17385 00001654 8716[B400]              		xchg	dx, [Orig13]
 17386 00001658 A3[B600]                		mov	[Orig13+2], ax
 17387                                  		;mov	[Old13], bx
 17388                                  		; 02/09/2023
 17389 0000165B 871E[0601]              		xchg	bx, [Old13]
 17390 0000165F 8C06[0801]              		mov	[Old13+2], es
 17391                                  
 17392 00001663 07                      		pop	es			; es:bx := old old13 vector
 17393                                  		; 02/09/2023
 17394                                  		;pop	bx
 17395 00001664 1F                      		pop	ds			; ds:dx := old orig13 vector
 17396                                  		;pop	dx ; 02/09/2023
 17397 00001665 58                      		pop	ax
 17398                                  i2f_iret:
 17399 00001666 CF                      		iret
 17400                                  ; ---------------------------------------------------------------------------
 17401                                  
 17402                                  mine:
 17403 00001667 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 17404 00001669 73FB                    		jnb	short i2f_iret
 17405 0000166B 08C0                    		or	al, al			; a get installed state request?
 17406 0000166D 7503                    		jnz	short disp_func
 17407 0000166F B0FF                    		mov	al, 0FFh
 17408                                  		;jmp	short i2f_iret
 17409                                  		; 02/09/2023
 17410 00001671 CF                      		iret
 17411                                  ; ---------------------------------------------------------------------------
 17412                                  
 17413                                  disp_func:
 17414 00001672 3C01                    		cmp	al, 1			; request for installing bds?
 17415 00001674 7418                    		jz	short do_subfun_01
 17416 00001676 3C03                    		cmp	al, 3			; get bds vector?
 17417 00001678 7423                    		jz	short do_get_bds_vector
 17418                                  
 17419                                  ; set up pointer to request packet
 17420                                  
 17421 0000167A 1E                      		push	ds
 17422 0000167B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17423                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17424                                  					; = [0070h:25A0h] = [02C7h:0030h]
 17425                                  		; 19/10/2022
 17426                                  		;mov	word ptr ds:ptrsav, bx
 17427                                  		;mov	word ptr ds:ptrsav+2, es
 17428 00001680 891E[1200]              		mov	[ptrsav], bx
 17429 00001684 8C06[1400]              		mov	[ptrsav+2], es
 17430 00001688 1F                      		pop	ds
 17431                                  		;jmp	far ptr	i2f_dskentry
 17432                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 17433                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 17434 00001689 EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 17435                                  		;; 17/10/2022
 17436                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 17437                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 17438                                  					; NOTE: jump to a FAR function, not an
 17439                                  					;  IRET type function. Callers of
 17440                                  					;  this int2f subfunction will have
 17441                                  					;  to be careful to do a popf
 17442                                  
 17443                                  ; ---------------------------------------------------------------------------
 17444                                  
 17445                                  do_subfun_01:
 17446 0000168E 06                      		push	es
 17447 0000168F 1E                      		push	ds
 17448 00001690 1E                      		push	ds
 17449 00001691 07                      		pop	es
 17450                                  		; 17/10/2022
 17451 00001692 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17452                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17453                                  					; point	ds: -> Bios_Data
 17454 00001697 E8BC03                  		call	install_bds
 17455 0000169A 1F                      		pop	ds
 17456 0000169B 07                      		pop	es
 17457                                  		;jmp	short i2f_iret
 17458                                  		; 02/09/2023
 17459 0000169C CF                      		iret
 17460                                  ; ---------------------------------------------------------------------------
 17461                                  
 17462                                  do_get_bds_vector:
 17463                                  		; 17/10/2022
 17464 0000169D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17465                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17466 000016A2 C53E[1901]              		lds	di, [start_bds]
 17467                                  		;lds	di, ds:start_bds
 17468                                  ;ii2f_iret:	; 10/12/2022
 17469                                  		;jmp	short i2f_iret
 17470                                  		; 02/09/2023
 17471 000016A6 CF                      		iret
 17472                                  ; ---------------------------------------------------------------------------
 17473                                  
 17474                                  ; 17/10/2022
 17475                                  ; 16/10/2022
 17476                                  
 17477                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 17478                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 17479                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 17480                                  
 17481                                  win386call:
 17482 000016A7 1E                      		push	ds
 17483 000016A8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17484                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17485                                  					; at 2C7h:30h =	70h:25A0h
 17486 000016AD 3C05                    		cmp	al, 5		; Win386_Init
 17487                                  					; is it	win386 initializing?
 17488 000016AF 7410                    		jz	short Win386Init
 17489 000016B1 3C06                    		cmp	al, 6		; Win386_Exit
 17490                                  					; is it	win386 exiting?
 17491 000016B3 7523                    		jnz	short win_iret	; if not, continue int2f chain
 17492                                  		; 12/12/2022
 17493 000016B5 F6C201                  		test	dl, 1
 17494                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 17495 000016B8 751E                    		jnz	short win_iret	; if not win386, then continue
 17496                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 17497 000016BA 8026[1208]00            		and	byte [IsWin386], 0 
 17498 000016BF EB17                    		jmp	short win_iret
 17499                                  ; ---------------------------------------------------------------------------
 17500                                  
 17501                                  Win386Init:
 17502                                  		; 12/12/2022
 17503 000016C1 F6C201                  		test	dl, 1
 17504                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 17505 000016C4 7512                    		jnz	short win_iret	; if not win386, then continue
 17506                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 17507 000016C6 800E[1208]01            		or	byte [IsWin386], 1
 17508                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 17509                                  		;mov	word ptr ds:SI_Next+2, es
 17510 000016CB 891E[E007]              		mov	[SI_Next], bx
 17511 000016CF 8C06[E207]              		mov	[SI_Next+2], es
 17512                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 17513 000016D3 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 17514 000016D6 1E                      		push	ds
 17515 000016D7 07                      		pop	es
 17516                                  win_iret:
 17517 000016D8 1F                      		pop	ds
 17518                                  ii2f_iret:	; 10/12/2022
 17519                                  		;jmp	short i2f_iret	; return back up the chain
 17520                                  		; 02/09/2023
 17521 000016D9 CF                      		iret
 17522                                  ; ---------------------------------------------------------------------------
 17523                                  
 17524                                  handle_multmult:
 17525 000016DA 3C01                    		cmp	al, 1
 17526 000016DC 7514                    		jnz	short try_2
 17527 000016DE 1E                      		push	ds
 17528 000016DF E84500                  		call	HMAPtr		; get offset of free HMA
 17529                                  		; 10/12/2022
 17530                                  		;xor	bx, bx
 17531                                  		;dec	bx
 17532 000016E2 BBFFFF                  		mov	bx, 0FFFFh
 17533 000016E5 8EC3                    		mov	es, bx		; seg of HMA
 17534 000016E7 89FB                    		mov	bx, di
 17535 000016E9 F7D3                    		not	bx
 17536 000016EB 09DB                    		or	bx, bx
 17537 000016ED 7401                    		jz	short try_1
 17538 000016EF 43                      		inc	bx
 17539                                  try_1:
 17540 000016F0 1F                      		pop	ds
 17541                                  		;jmp	short ii2f_iret
 17542                                  		; 02/09/2023
 17543 000016F1 CF                      		iret
 17544                                  ; ---------------------------------------------------------------------------
 17545                                  
 17546                                  try_2:
 17547 000016F2 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 17548 000016F4 7530                    		jnz	short try_3
 17549 000016F6 1E                      		push	ds
 17550                                  		; 10/12/2022
 17551                                  		;xor	di, di
 17552                                  		;dec	di
 17553 000016F7 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 17554 000016FA 8EC7                    		mov	es, di
 17555 000016FC E82800                  		call	HMAPtr		; get offset of free HMA
 17556 000016FF 83FFFF                  		cmp	di, 0FFFFh
 17557 00001702 7421                    		jz	short InsuffHMA
 17558 00001704 F7DF                    		neg	di		; free space in HMA
 17559 00001706 39FB                    		cmp	bx, di
 17560 00001708 7605                    		jbe	short try_4
 17561                                  		; 10/12/2022
 17562                                  		;sub	di, di
 17563                                  		;dec	di
 17564 0000170A BFFFFF                  		mov	di, 0FFFFh
 17565                                  		;jmp	short InsuffHMA
 17566                                  		; 02/09/2023
 17567 0000170D 1F                      		pop	ds
 17568 0000170E CF                      		iret
 17569                                  ; ---------------------------------------------------------------------------
 17570                                  
 17571                                  try_4:
 17572                                  		;mov	di, ds:FreeHMAPtr
 17573 0000170F 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17574 00001713 83C30F                  		add	bx, 15
 17575                                  		;and	bx, 0FFF0h
 17576                                  		; 10/12/2022
 17577 00001716 80E3F0                  		and	bl, 0F0h
 17578                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 17579 00001719 011E[D707]              		add	[FreeHMAPtr], bx
 17580 0000171D 7506                    		jnz	short InsuffHMA
 17581 0000171F C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 17582                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 17583                                  					; no more HMA if we have wrapped
 17584                                  InsuffHMA:
 17585 00001725 1F                      		pop	ds
 17586                                  		; 10/12/2022
 17587                                  try_3:
 17588                                  		;jmp	short ii2f_iret
 17589                                  		; 02/09/2023
 17590 00001726 CF                      		iret
 17591                                  ; ---------------------------------------------------------------------------
 17592                                  
 17593                                  		; 10/12/2022
 17594                                  ;try_3:
 17595                                  		;jmp	ii2f_iret
 17596                                  
 17597                                  ; =============== S U B	R O U T	I N E =======================================
 17598                                  
 17599                                  ; 16/10/2022
 17600                                  
 17601                                  ;--------------------------------------------------------------------------
 17602                                  ;
 17603                                  ; procedure : HMAPtr
 17604                                  ;
 17605                                  ;		Gets the offset of the free HMA area ( with respect to
 17606                                  ;							seg ffff )
 17607                                  ;		If DOS has not moved high, tries to move DOS high.
 17608                                  ;		In the course of doing this, it will allocate all the HMA
 17609                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 17610                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 17611                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 17612                                  ;
 17613                                  ;	RETURNS : offset of free HMA in DI
 17614                                  ;		  BIOS_DATA, seg in DS
 17615                                  ;
 17616                                  ;--------------------------------------------------------------------------
 17617                                  
 17618                                  		; 17/10/2022
 17619                                  HMAPtr:
 17620 00001727 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17621                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17622 0000172C 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17623                                  		;mov	di, ds:FreeHMAPtr
 17624 00001730 83FFFF                  		cmp	di, 0FFFFh
 17625 00001733 750F                    		jnz	short HMAPtr_retn
 17626 00001735 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 17627                                  		;cmp	ds:SysinitPresent, 0
 17628 0000173A 7408                    		jz	short HMAPtr_retn
 17629 0000173C FF1E[D907]              		call	far [MoveDOSIntoHMA]
 17630                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 17631 00001740 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17632                                  		;mov	di, ds:FreeHMAPtr
 17633                                  HMAPtr_retn:
 17634 00001744 C3                      		retn
 17635                                  
 17636                                  ; =============== S U B	R O U T	I N E =======================================
 17637                                  
 17638                                  ; 16/10/2022
 17639                                  
 17640                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 17641                                  ; but go ahead and update direction flag, si, & di
 17642                                  
 17643                                  move_sector:
 17644                                  
 17645                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 17646                                  ; any segment to be a fault. Theoretically, this could be handled
 17647                                  ; by the fault handler and the behavior of an 8086 could be emulated
 17648                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 17649                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 17650                                  ; also handles the fault incorrectly in their ROM BIOS for real
 17651                                  ; mode. Their fault handler was only designed to deal with one
 17652                                  ; special case which occurred in a magazine benchmark, but didn't
 17653                                  ; handle the general case worth beans.
 17654                                  ;
 17655                                  ; Simply changing this code to do a byte loop would work okay but
 17656                                  ; would involve a general case performance hit. Therefore, we'll
 17657                                  ; check for either source or destination offsets being within one
 17658                                  ; sector of the end of their segments and only in that case fall
 17659                                  ; back to a byte move.
 17660                                  
 17661 00001745 FC                      		cld
 17662 00001746 51                      		push	cx
 17663 00001747 B90001                  		mov	cx, 256
 17664 0000174A 81FE00FE                		cmp	si, 0FE00h
 17665 0000174E 770A                    		ja	short movsec_bytes
 17666 00001750 81FF00FE                		cmp	di, 0FE00h
 17667 00001754 7704                    		ja	short movsec_bytes
 17668 00001756 F3A5                    		rep movsw
 17669 00001758 59                      		pop	cx
 17670 00001759 C3                      		retn
 17671                                  ; ---------------------------------------------------------------------------
 17672                                  
 17673                                  movsec_bytes:
 17674 0000175A D1E1                    		shl	cx, 1
 17675 0000175C F3A4                    		rep movsb
 17676 0000175E 59                      		pop	cx
 17677 0000175F C3                      		retn
 17678                                  
 17679                                  ; =============== S U B	R O U T	I N E =======================================
 17680                                  
 17681                                  ; 16/10/2022
 17682                                  
 17683                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 17684                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 17685                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 17686                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 17687                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 17688                                  ; but we break down a request when we get an ecc or dma error into several
 17689                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 17690                                  ; number of sectors on a track on the medium, and the request would fail.
 17691                                  ;
 17692                                  ; input conditions:
 17693                                  ;	all registers set up for an int 13 request.
 17694                                  ;
 17695                                  ; output:
 17696                                  ;	dh - contains starting head number for request
 17697                                  ;	cx - contains starting sector and cylinder numbers
 17698                                  ;	(the above may or may not have been changed, and are 0-based)
 17699                                  ;	all other registers preserved.
 17700                                  
 17701                                  		; 26/12/2023 - Retro DOS 5.0
 17702                                  check_wrap:	
 17703 00001760 50                      		push	ax
 17704 00001761 53                      		push	bx
 17705 00001762 06                      		push	es
 17706 00001763 57                      		push	di
 17707 00001764 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 17708 00001767 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 17709                                  		; 26/12/2023
 17710 00001769 26F6453F01              		test	byte [es:di+3Fh], 1
 17711                                  		; 12/12/2022
 17712                                  		;test	byte [es:di+23h], 1
 17713                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 17714 0000176E 7457                    		jz	short no_wrap	; no wrapping for removable media
 17715 00001770 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 17716 00001774 89C8                    		mov	ax, cx
 17717 00001776 83E03F                  		and	ax, 3Fh		; extract sector number
 17718 00001779 39D8                    		cmp	ax, bx		; are we going to wrap?
 17719 0000177B 764A                    		jbe	short no_wrap
 17720 0000177D F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 17721                                  
 17722                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 17723                                  ; last sector on that track.
 17724                                  
 17725 0000177F 08E4                    		or	ah, ah
 17726 00001781 7503                    		jnz	short not_on_bound
 17727                                  		; 18/12/2022
 17728 00001783 48                      		dec	ax ; *
 17729 00001784 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 17730                                  					; if on	boundary
 17731                                  		;dec	al ; *		; also decrement # of head wraps
 17732                                  not_on_bound:
 17733 00001786 80E1C0                  		and	cl, 0C0h	; zero out sector #
 17734 00001789 08E1                    		or	cl, ah		; or in	new sector #
 17735 0000178B 30E4                    		xor	ah, ah		; ax = # of head wraps
 17736 0000178D 40                      		inc	ax
 17737 0000178E 00F0                    		add	al, dh		; add in starting head #
 17738 00001790 80D400                  		adc	ah, 0		; catch	any carry
 17739                                  		; 02/09/2023
 17740 00001793 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17741 00001797 39D8                    		cmp	ax, bx
 17742                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 17743                                  					; are we going to wrap around a	head?
 17744 00001799 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 17745 0000179B 52                      		push	dx		; preserve drive number and head number
 17746 0000179C 31D2                    		xor	dx, dx
 17747                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17748 0000179E F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 17749                                  
 17750                                  ; careful here! if new head # is 0, then we are on the last head.
 17751                                  
 17752 000017A0 09D2                    		or	dx, dx
 17753 000017A2 7507                    		jnz	short no_head_bound
 17754 000017A4 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 17755                                  
 17756                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 17757                                  
 17758 000017A6 09C0                    		or	ax, ax
 17759 000017A8 7401                    		jz	short no_head_bound
 17760 000017AA 48                      		dec	ax		; reduce number	of cylinder wraps
 17761                                  no_head_bound:				
 17762 000017AB 88D7                    		mov	bh, dl		; bh has new head number
 17763 000017AD 5A                      		pop	dx		; restore drive number and head number
 17764 000017AE FECF                    		dec	bh		; get it 0-based
 17765 000017B0 88FE                    		mov	dh, bh		; set up new head number in dh
 17766 000017B2 88CF                    		mov	bh, cl
 17767 000017B4 80E73F                  		and	bh, 3Fh		; preserve sector number
 17768 000017B7 B306                    		mov	bl, 6
 17769 000017B9 86D9                    		xchg	cl, bl
 17770 000017BB D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 17771 000017BD 00C5                    		add	ch, al		; add in cylinder wrap
 17772 000017BF 10E3                    		adc	bl, ah		; add in high byte
 17773 000017C1 D2E3                    		shl	bl, cl		; move up to ms	end
 17774 000017C3 86CB                    		xchg	bl, cl		; restore cylinder bits	into cl
 17775 000017C5 08F9                    		or	cl, bh		; or in	sector number
 17776                                  no_wrap:				
 17777 000017C7 F8                      		clc
 17778 000017C8 5F                      		pop	di
 17779 000017C9 07                      		pop	es
 17780 000017CA 5B                      		pop	bx
 17781 000017CB 58                      		pop	ax
 17782 000017CC C3                      		retn
 17783                                  ; ---------------------------------------------------------------------------
 17784                                  
 17785                                  no_wrap_head:				
 17786 000017CD 88C6                    		mov	dh, al		; do not lose new head number
 17787 000017CF FECE                    		dec	dh		; get it 0-based
 17788 000017D1 EBF4                    		jmp	short no_wrap
 17789                                  
 17790                                  ; =============== S U B	R O U T	I N E =======================================
 17791                                  
 17792                                  ; 16/10/2022
 17793                                  
 17794                                  ; this is a special version of the bds lookup code which is
 17795                                  ; based on physical drives rather than the usual logical drives
 17796                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 17797                                  ; otherwise carry is clear
 17798                                  ;
 17799                                  ; guaranteed to trash no registers except es:di
 17800                                  
 17801                                  		; 19/10/2022
 17802                                  find_bds:	
 17803 000017D3 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 17804                                  fbds_1:					
 17805 000017D7 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 17806 000017DB 7409                    		jz	short fdbs_2
 17807 000017DD 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17808                                  					; go to next bds
 17809 000017E0 83FFFF                  		cmp	di, 0FFFFh
 17810 000017E3 75F2                    		jnz	short fbds_1
 17811 000017E5 F9                      		stc
 17812                                  fdbs_2:					
 17813 000017E6 C3                      		retn
 17814                                  
 17815                                  ; =============== S U B	R O U T	I N E =======================================
 17816                                  
 17817                                  ; 16/10/2022
 17818                                  		; 17/10/2022
 17819                                  doint:
 17820                                  		; 10/12/2022
 17821 000017E7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 17822                                  					; get physical drive number
 17823                                  		; 19/10/2022 - Temporary !
 17824                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 17825                                  		
 17826 000017EA 30E4                    		xor	ah, ah
 17827 000017EC 08C0                    		or	al, al
 17828 000017EE 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 17829                                  		; 10/12/2022
 17830 000017F0 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 17831                                  					; get request code
 17832                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 17833 000017F3 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17834                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 17835 000017F6 9D                      		popf
 17836                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 17837                                  		; 17/10/2022
 17838 000017F7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17839                                  		;;call	call_orig13	; call far 70h:797h
 17840                                  					; call far KERNEL_SEGMENT:call_orig13
 17841 000017FC 9C                      		pushf
 17842                                  		; 10/12/2022
 17843 000017FD 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17844                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 17845                                  dointdone:				
 17846 00001800 C3                      		retn
 17847                                  
 17848                                  ;----------------------------------------------------------------------------
 17849                                  
 17850                                  ; 16/10/2022
 17851                                  
 17852                                  ; this is the true int 13 handler. we parse the request to see if there is
 17853                                  ; a dma violation. if so, depending on the function, we:
 17854                                  ;   read/write break the request into three pieces and move the middle one
 17855                                  ;	       into our internal buffer.
 17856                                  ;
 17857                                  ;   format     copy the format table into the buffer
 17858                                  ;   verify     point the transfer address into the buffer
 17859                                  ;
 17860                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 17861                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 17862                                  ; the offending sector into the buffer below and do the i/o from there.
 17863                                  
 17864                                  ;struc INT13FRAME
 17865                                  ;.oldbp: resw
 17866                                  ;.oldax: resw 
 17867                                  ;.oldbx: resw
 17868                                  ;.oldcx: resw
 17869                                  ;.olddx: resw
 17870                                  ;.oldds: resw	; now we save caller's ds, too
 17871                                  ;.olddd: resd
 17872                                  ;.oldf:	resw
 17873                                  ;end struc
 17874                                  
 17875                                  ;----------------------------------------------------------------------------
 17876                                  
 17877                                  ;   entry conditions:
 17878                                  ;	ah = function
 17879                                  ;	al = number of sectors
 17880                                  ;	es:bx = dma address
 17881                                  ;	cx = packed track and sector
 17882                                  ;	dx = head and drive
 17883                                  ;   output conditions:
 17884                                  ;	no dma violation.
 17885                                  
 17886                                  ;	use extreme caution when working with this code. In general,
 17887                                  ;	  all registers are hot at all times.
 17888                                  ;
 17889                                  ;	question:  does this code handle cases where dma errors
 17890                                  ;	  occur during ecc retries, and where ecc errors occur during
 17891                                  ;	  dma breakdowns???? Hmmmmm.
 17892                                  
 17893                                  ;----------------------------------------------------------------------------
 17894                                  
 17895                                  ; ---------------------------------------------------------------------------
 17896                                  
 17897                                  		; 26/12/2023 - Retro DOS v5.0
 17898                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 17899                                  dtype_array:
 17900 00001801 90004000                		dd 400090h		; 40h:90h is drive type array addr
 17901                                  
 17902                                  ; 17/10/2022
 17903                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 17904                                  ; 09/12/2022
 17905                                  DTYPEARRAY equ dtype_array
 17906                                  
 17907                                  ; ---------------------------------------------------------------------------
 17908                                  
 17909                                  ; stick some special stuff out of mainline
 17910                                  
 17911                                  ; we know we're doing a format command. if we have changeline
 17912                                  ; support, then flag some special changed stuff and set changed
 17913                                  ; by format bit for all logical drives using this physical drive
 17914                                  
 17915                                  format_special_stuff:
 17916 00001805 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 17917 0000180A 7459                    		jz	short format_special_stuff_done ; brif not
 17918 0000180C 53                      		push	bx
 17919 0000180D BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 17920 00001810 E85104                  		call	set_changed_dl	; indicate that media changed by format
 17921 00001813 5B                      		pop	bx
 17922 00001814 EB4F                    		jmp	short format_special_stuff_done
 17923                                  ; ---------------------------------------------------------------------------
 17924                                  
 17925                                  ; 16/10/2022
 17926                                  
 17927                                  ; we know we've got ec35's on the system. Now see if we're doing
 17928                                  ; a floppy. If so, create a mask and see if this particular
 17929                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 17930                                  
 17931                                  		; 19/10/2022
 17932                                  ec35_special_stuff:
 17933 00001816 84D2                    		test	dl, dl		; floppy or hard disk?
 17934 00001818 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 17935 0000181A 50                      		push	ax		; see if this PARTICULAR drive is ec35
 17936 0000181B 51                      		push	cx
 17937 0000181C 88D1                    		mov	cl, dl		; turn drive number into bit map
 17938 0000181E B001                    		mov	al, 1		; assume drive 0
 17939 00001820 D2E0                    		shl	al, cl		; shift	over correct number of times
 17940 00001822 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 17941 00001826 59                      		pop	cx
 17942 00001827 58                      		pop	ax
 17943 00001828 7442                    		jz	short ec35_special_stuff_done
 17944                                  					; done if this floppy is not an	ec35
 17945 0000182A 53                      		push	bx		; free up a far	pointer	(es:bx)
 17946 0000182B 06                      		push	es
 17947                                  		; 17/10/2022
 17948 0000182C 2EC41E[0118]            		les	bx, [cs:DTYPEARRAY]
 17949                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 17950                                  					; 0070h:3A65h =	2C7h:14F5h
 17951 00001831 00D3                    		add	bl, dl
 17952 00001833 80D700                  		adc	bh, 0		; find entry for this drive
 17953 00001836 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 17954                                  					; (360k	disk in	360k drive,
 17955                                  					; no double-stepping, 250 kbs transfer rate)
 17956 0000183A 07                      		pop	es
 17957 0000183B 5B                      		pop	bx
 17958 0000183C EB2E                    		jmp	short ec35_special_stuff_done
 17959                                  ; ---------------------------------------------------------------------------
 17960                                  
 17961                                  ; 16/10/2022
 17962                                  
 17963                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 17964                                  ; this function does not reset the common buses after the execution.
 17965                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 17966                                  ; will issue ah=1 (read status) call to reset the buses.
 17967                                  
 17968                                  ps2_special_stuff:
 17969 0000183E 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 17970                                  					; read driver parm ?
 17971 00001843 7407                    		jz	short ps2_30_problem
 17972 00001845 803E[1E00]15            		cmp	byte [prevoper], 15h
 17973                                  					; apparently function 15h fails, too
 17974 0000184A 752D                    		jnz	short ps2_special_stuff_done
 17975                                  ps2_30_problem:
 17976 0000184C 50                      		push	ax
 17977 0000184D B401                    		mov	ah, 1
 17978                                  		; 26/12/2023
 17979                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 17980                                  		;		 ; call BIOSDATA:call_orig13	
 17981                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 17982                                  		; 17/10/2022
 17983 0000184F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17984                                  		;call	call_orig13	; call far 70:797h
 17985                                  					; call far KERNEL_SEGMENT:call_orig13
 17986 00001854 58                      		pop	ax
 17987 00001855 EB22                    		jmp	short ps2_special_stuff_done
 17988                                  ; ---------------------------------------------------------------------------
 17989                                  
 17990                                  ; 17/10/2022
 17991                                  ; 16/10/2022
 17992                                  
 17993                                  ; here is the actual int13 handler
 17994                                  
 17995                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 17996                                  
 17997                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 17998                                  ; vectoring up here from Bios_Data
 17999                                  
 18000                                  		; 19/10/2022
 18001 00001857 1E                      		push	ds		; save caller's ds register first thing
 18002                                  		;;mov	ds, word [cs:0030h]
 18003                                  					; and set up our own ds -> Bios_Data
 18004 00001858 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18005                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18006                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18007                                  
 18008                                  ; let the operation proceed. if there is a dma violation, then we do things
 18009                                  
 18010 0000185D A3[1E00]                		mov	[prevoper], ax	; save request
 18011 00001860 80FC05                  		cmp	ah, 5		; romformat
 18012 00001863 74A0                    		jz	short format_special_stuff
 18013                                  					; go do special stuff for format
 18014                                  format_special_stuff_done:
 18015 00001865 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 18016 0000186A 75AA                    		jnz	short ec35_special_stuff
 18017                                  					; go handle it out of line if so
 18018                                  ec35_special_stuff_done:
 18019                                  		; 26/12/2023
 18020                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 18021                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 18022 0000186C 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18023                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18024                                  		
 18025 00001871 9C                      		pushf			; save result flags
 18026                                  		
 18027 00001872 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 18028                                  					; mdl_ps2_30
 18029 00001877 74C5                    		jz	short ps2_special_stuff
 18030                                  					; exit mainline to address special
 18031                                  ps2_special_stuff_done:			; ps2/30 problem if so
 18032 00001879 9D                      		popf
 18033 0000187A 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 18034                                  ret_from_i13:
 18035 0000187C 1F                      		pop	ds
 18036 0000187D CA0200                  		retf	2		; restore ds &	iret w/flags
 18037                                  ; ---------------------------------------------------------------------------
 18038                                  
 18039                                  ; most of our code exits through here. If carry isn't set, then
 18040                                  ; just do a simple exit. Else doublecheck that we aren't getting
 18041                                  ; a changeline error.
 18042                                  
 18043                                  i13ret_ck_chglinerr:			
 18044 00001880 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 18045                                  i13_ret_error:				
 18046 00001882 80FC06                  		cmp	ah, 6		; did i	see a change event?
 18047 00001885 7513                    		jnz	short int13b	; skip if wrong	error
 18048 00001887 08D2                    		or	dl, dl		; is this for the hard disk?
 18049 00001889 780F                    		js	short int13b	; yes, ignore
 18050 0000188B 803E[7700]00            		cmp	byte [fhave96], 0
 18051 00001890 7408                    		jz	short int13b	; just in case ROM returned this
 18052                                  					; error	even though it told us it
 18053                                  					; never	would
 18054 00001892 53                      		push	bx
 18055 00001893 BB4000                  		mov	bx, 40h		; fchanged
 18056 00001896 E8CB03                  		call	set_changed_dl
 18057 00001899 5B                      		pop	bx
 18058                                  int13b:
 18059 0000189A F9                      		stc			; now return the error
 18060 0000189B EBDF                    		jmp	short ret_from_i13
 18061                                  ; ---------------------------------------------------------------------------
 18062                                  
 18063                                  ; some kind of error occurred. see if it is dma violation
 18064                                  
 18065                                  goterr13:
 18066 0000189D 80FC09                  		cmp	ah, 9		; dma error?
 18067 000018A0 747C                    		jz	short gotdmaerr
 18068                                  goterr13_xxxx:
 18069 000018A2 80FC11                  		cmp	ah, 11h		; ecc error?
 18070 000018A5 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 18071 000018A7 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 18072 000018AC 74D4                    		jz	short i13_ret_error
 18073                                  
 18074 000018AE 803E[1F00]02            		cmp	byte [prevoper+1], 2
 18075                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 18076                                  					; (2 = romread)
 18077                                  					; ECC correction only applies to reads
 18078 000018B3 75CD                    		jnz	short i13_ret_error
 18079                                  
 18080 000018B5 30E4                    		xor	ah, ah
 18081                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 18082                                  		; 17/10/2022
 18083 000018B7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18084                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18085                                  					; call far 70:797h
 18086 000018BC A1[1E00]                		mov	ax, [prevoper]
 18087 000018BF 30E4                    		xor	ah, ah		; return code =	no error
 18088 000018C1 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 18089 000018C3 74B7                    		jz	short ret_from_i13 ; return with carry clear
 18090 000018C5 53                      		push	bx
 18091 000018C6 51                      		push	cx
 18092 000018C7 52                      		push	dx
 18093 000018C8 A2[2000]                		mov	[number_of_sec], al
 18094                                  loop_ecc:
 18095 000018CB B80102                  		mov	ax, 201h	; read one sector
 18096                                  
 18097                                  ; we do reads one sector at a time. this ensures that we will eventually
 18098                                  ; finish the request since ecc errors on one sector do read in that sector.
 18099                                  ;
 18100                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 18101                                  ; that attempt to read more sectors than are available on a particular
 18102                                  ; track.
 18103                                  ;
 18104                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 18105                                  ; this request.
 18106                                  ;
 18107                                  ; at this point, all registers are set up for the call to orig13, except
 18108                                  ; that there may be a starting sector number that is bigger than the number
 18109                                  ; of sectors on a track.
 18110                                  ;
 18111 000018CE E88FFE                  		call	check_wrap	; get correct parameters for int 13
 18112                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 18113                                  		; 17/10/2022
 18114 000018D1 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18115                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18116 000018D6 730C                    		jnb	short ok11_op
 18117 000018D8 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 18118 000018DB 741B                    		jz	short handle_dma_during_ecc
 18119 000018DD 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 18120 000018E0 7510                    		jnz	short ok11_exit_err
 18121                                  		; 10/12/2022
 18122                                  		; xor ax ax -> ah = 0
 18123                                  		;mov	ah, 0		; ecc error. reset the system again.
 18124 000018E2 31C0                    		xor	ax, ax		; clear	the error code so that if this
 18125                                  					; was the last sector, no error	code
 18126                                  					; will be returned for the corrected
 18127                                  					; read.	(clear carry too.)
 18128                                  ok11_op:
 18129 000018E4 FE0E[2000]              		dec	byte [number_of_sec]
 18130 000018E8 7409                    		jz	short ok11_exit	; all done?
 18131 000018EA FEC1                    		inc	cl		; advance sector number
 18132                                  					; add 200h to address
 18133 000018EC FEC7                    		inc	bh
 18134 000018EE FEC7                    		inc	bh
 18135 000018F0 EBD9                    		jmp	short loop_ecc
 18136                                  ; ---------------------------------------------------------------------------
 18137                                  
 18138                                  ; locate error returns centrally
 18139                                  
 18140                                  ok11_exit_err:
 18141 000018F2 F9                      		stc			; set carry bit again.
 18142                                  ok11_exit:
 18143 000018F3 5A                      		pop	dx
 18144 000018F4 59                      		pop	cx
 18145 000018F5 5B                      		pop	bx
 18146 000018F6 EB88                    		jmp	short i13ret_ck_chglinerr
 18147                                  ; ---------------------------------------------------------------------------
 18148                                  
 18149                                  ; do the single sector read again, this time into our temporary
 18150                                  ; buffer, which is guaranteed not to have a DMA error, then
 18151                                  ; move the data to its proper location and proceed
 18152                                  
 18153                                  handle_dma_during_ecc:
 18154 000018F8 06                      		push	es
 18155 000018F9 53                      		push	bx
 18156 000018FA BB[5201]                		mov	bx, disksector
 18157 000018FD 1E                      		push	ds
 18158 000018FE 07                      		pop	es		; point es:bx to buffer
 18159 000018FF B80102                  		mov	ax, 201h	; read one sector
 18160                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 18161                                  		; 17/10/2022
 18162 00001902 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18163                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18164 00001907 5B                      		pop	bx
 18165 00001908 07                      		pop	es
 18166 00001909 7305                    		jnb	short handle_dma_during_ecc_noerr
 18167 0000190B 80FC11                  		cmp	ah, 11h
 18168 0000190E 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 18169                                  
 18170                                  ; now we're kosher. Copy the data to where it belongs and resume
 18171                                  ; the ECC looping code.
 18172                                  
 18173                                  handle_dma_during_ecc_noerr:
 18174 00001910 56                      		push	si
 18175 00001911 57                      		push	di
 18176 00001912 89DF                    		mov	di, bx
 18177 00001914 BE[5201]                		mov	si, disksector
 18178 00001917 E82BFE                  		call	move_sector
 18179 0000191A 5F                      		pop	di
 18180 0000191B 5E                      		pop	si
 18181 0000191C EBC6                    		jmp	short ok11_op
 18182                                  ; ---------------------------------------------------------------------------
 18183                                  
 18184                                  ; we truly have a dma violation. restore register ax and retry the
 18185                                  ; operation as best we can.
 18186                                  
 18187                                  gotdmaerr:
 18188 0000191E A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 18189 00001921 FB                      		sti
 18190 00001922 80FC02                  		cmp	ah, 2		; romread
 18191 00001925 723B                    		jb	short i13_done_dmaerr
 18192                                  					; just pass dma error thru for
 18193                                  					; functions we don't handle
 18194 00001927 80FC04                  		cmp	ah, 4		; romverify
 18195 0000192A 743C                    		jz	short intverify
 18196 0000192C 80FC05                  		cmp	ah, 5		; romformat
 18197 0000192F 7448                    		jz	short intformat
 18198 00001931 772F                    		ja	short i13_done_dmaerr
 18199                                  
 18200                                  ; we are doing a read/write call. check for dma problems
 18201                                  
 18202                                  ;	******** set up stack frame here!!! ********
 18203                                  
 18204 00001933 52                      		push	dx
 18205 00001934 51                      		push	cx
 18206 00001935 53                      		push	bx
 18207 00001936 50                      		push	ax
 18208 00001937 55                      		push	bp
 18209 00001938 89E5                    		mov	bp, sp
 18210 0000193A 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 18211                                  		; 26/12/2023
 18212                                  		;add	dx, dx
 18213                                  		;add	dx, dx
 18214                                  		;add	dx, dx
 18215                                  		;add	dx, dx		; dx = dx*16
 18216 0000193C D1E2                    		shl	dx, 1
 18217 0000193E D1E2                    		shl	dx, 1
 18218 00001940 D1E2                    		shl	dx, 1
 18219 00001942 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 18220 00001944 01DA                    		add	dx, bx		; combine with offset
 18221 00001946 81C2FF01                		add	dx, 511		; simulate a transfer
 18222                                  
 18223                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 18224                                  ; we skip the first transfer and perform the remaining buffering and transfer
 18225                                  
 18226 0000194A 7303                    		jnb	short no_skip_first
 18227 0000194C E98300                  		jmp	bufferx		; restore dh=head & do buffer
 18228                                  ; ---------------------------------------------------------------------------
 18229                                  
 18230                                  no_skip_first:
 18231 0000194F D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 18232 00001951 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 18233 00001953 28F4                    		sub	ah, dh
 18234                                  
 18235                                  ; ah is now the number of sectors that we can successfully write in this
 18236                                  ; segment. if this number is above or equal to the requested number, then we
 18237                                  ; continue the operation as normal. otherwise, we break it into pieces.
 18238                                  ;
 18239                                  ; wait a sec. this is goofy. the whole reason we got here in the
 18240                                  ; first place is because we got a dma error. so it's impossible
 18241                                  ; for the whole block to fit, unless the dma error was returned
 18242                                  ; in error.
 18243                                  
 18244 00001955 38C4                    		cmp	ah, al		; can we fit it	in?
 18245 00001957 7236                    		jb	short doblock	; no, perform blocking.
 18246                                  
 18247                                  ; yes, the request fits. let it happen.
 18248                                  
 18249 00001959 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18250                                  					; set up head number
 18251 0000195C E888FE                  		call	doint
 18252 0000195F E9D900                  		jmp	bad13		; and return from this place
 18253                                  ; ---------------------------------------------------------------------------
 18254                                  
 18255                                  i13_done_dmaerr:
 18256 00001962 B409                    		mov	ah, 9		; pass dma error thru to caller
 18257 00001964 F9                      		stc
 18258 00001965 E914FF                  		jmp	ret_from_i13	; return with error,
 18259                                  					; we know it's not a changeline error
 18260                                  ; ---------------------------------------------------------------------------
 18261                                  
 18262                                  ; verify the given sectors. place the buffer pointer into our space.
 18263                                  
 18264                                  intverify:
 18265 00001968 06                      		push	es		; save caller's dma address
 18266 00001969 53                      		push	bx
 18267 0000196A 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 18268 0000196B 07                      		pop	es
 18269                                  dosimple:
 18270 0000196C BB[5201]                		mov	bx, disksector
 18271                                  					; do the i/o from Bios_Data:disksector
 18272                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 18273                                  		; 17/10/2022
 18274 0000196F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18275                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18276 00001974 5B                      		pop	bx
 18277 00001975 07                      		pop	es
 18278 00001976 E907FF                  		jmp	i13ret_ck_chglinerr
 18279                                  ; ---------------------------------------------------------------------------
 18280                                  
 18281                                  ; format operation. copy the parameter table into Bios_Data:disksector
 18282                                  
 18283                                  intformat:
 18284 00001979 06                      		push	es
 18285 0000197A 53                      		push	bx
 18286 0000197B 56                      		push	si
 18287 0000197C 57                      		push	di
 18288 0000197D 1E                      		push	ds
 18289                                  
 18290                                  ; point ds to the caller's dma buffer, es to Bios_Data
 18291                                  ; in other words, swap (ds, es)
 18292                                  
 18293 0000197E 06                      		push	es
 18294 0000197F 1E                      		push	ds
 18295 00001980 07                      		pop	es
 18296 00001981 1F                      		pop	ds
 18297 00001982 89DE                    		mov	si, bx
 18298 00001984 BF[5201]                		mov	di, disksector
 18299 00001987 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 18300 0000198A 1F                      		pop	ds
 18301 0000198B 5F                      		pop	di
 18302 0000198C 5E                      		pop	si		; do the i/o from
 18303 0000198D EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 18304                                  ; ---------------------------------------------------------------------------
 18305                                  
 18306                                  ; we can't fit the request into the entire block. perform the operation on
 18307                                  ; the first block.
 18308                                  ;
 18309                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 18310                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 18311                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 18312                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 18313                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 18314                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 18315                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 18316                                  ; doblock will handle the first block of requested sectors within the
 18317                                  ; boundary of this safe value.
 18318                                  
 18319                                  		; 26/12/2023 - Retro DOS v5.0
 18320                                  doblock:
 18321                                  
 18322                                  ; try to get the # of sectors/track from bds via rom drive number.
 18323                                  ; for any mini disks installed, here we have to pray that they have the
 18324                                  ; same # of sector/track as the main dos partition disk drive.
 18325                                  				
 18326 0000198F 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 18327                                  					; get head #, drive #
 18328 00001992 51                      		push	cx
 18329 00001993 06                      		push	es
 18330 00001994 57                      		push	di		; ah - # of sectors before dma boundary
 18331                                  					; al - requested # of sectors for i/o.
 18332 00001995 E83BFE                  		call	find_bds
 18333 00001998 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18334                                  		; 26/12/2023
 18335 0000199C 26F6453F01              		test	byte [es:di+3Fh], 1
 18336                                  		; 12/12/2022
 18337                                  		;test	byte [es:di+23h], 1
 18338                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18339 000019A1 5F                      		pop	di
 18340 000019A2 07                      		pop	es
 18341 000019A3 88E0                    		mov	al, ah		; set al=ah for	floppies
 18342 000019A5 7404                    		jz	short doblockflop ; they are track by track operation
 18343 000019A7 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 18344 000019A9 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 18345                                  doblockflop:
 18346 000019AB 59                      		pop	cx
 18347                                  doblockcontinue:
 18348 000019AC 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 18349 000019AE 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 18350 000019B0 50                      		push	ax
 18351 000019B1 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 18352 000019B3 EB03                    		jmp	short doblockdoint
 18353                                  ; ---------------------------------------------------------------------------
 18354                                  
 18355                                  doblocklast:
 18356 000019B5 88C4                    		mov	ah, al
 18357 000019B7 50                      		push	ax
 18358                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 18359 000019B8 E82CFE                  		call	doint
 18360 000019BB 727E                    		jb	short bad13	; something happened, bye!
 18361 000019BD 58                      		pop	ax
 18362 000019BE 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 18363                                  					; decrement by the successful operation
 18364 000019C1 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 18365 000019C3 00E7                    		add	bh, ah		; advance dma addres
 18366 000019C5 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 18367 000019C7 38C4                    		cmp	ah, al		; check	the previous value
 18368 000019C9 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 18369                                  					; then we are done already.
 18370 000019CB 28E0                    		sub	al, ah		; otherwise,
 18371                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 18372 000019CD E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 18373 000019D0 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 18374                                  ; ---------------------------------------------------------------------------
 18375                                  
 18376                                  bufferx:
 18377 000019D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18378                                  					; set up head number
 18379                                  buffer:
 18380 000019D5 53                      		push	bx
 18381 000019D6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 18382 000019D9 80FC03                  		cmp	ah, 3		; romwrite
 18383 000019DC 7525                    		jnz	short doread	;
 18384                                  					
 18385                                  ; copy the offending sector into local buffer
 18386                                  
 18387 000019DE 06                      		push	es
 18388 000019DF 1E                      		push	ds
 18389 000019E0 56                      		push	si
 18390 000019E1 57                      		push	di
 18391 000019E2 1E                      		push	ds		; exchange segment registers
 18392 000019E3 06                      		push	es
 18393 000019E4 1F                      		pop	ds
 18394 000019E5 07                      		pop	es
 18395 000019E6 BF[5201]                		mov	di, disksector	; where to move
 18396 000019E9 57                      		push	di		; save it
 18397 000019EA 89DE                    		mov	si, bx		; source
 18398 000019EC E856FD                  		call	move_sector	; move sector into local buffer
 18399 000019EF 5B                      		pop	bx		; new transfer address
 18400                                  					; (es:bx = Bios_Data:diskbuffer)
 18401 000019F0 5F                      		pop	di		; restore caller's di & si
 18402 000019F1 5E                      		pop	si
 18403 000019F2 1F                      		pop	ds		; restore Bios_Data
 18404                                  
 18405                                  ; see if we are wrapping around a track or head
 18406                                  
 18407 000019F3 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 18408                                  					; get drive number
 18409 000019F5 8A5608                  		mov	dl, [bp+8]
 18410 000019F8 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 18411                                  					;
 18412                                  					; ah is	function
 18413                                  					; al is	1 for single sector transfer
 18414                                  					; es:bx	is local transfer addres
 18415                                  					; cx is	track/sector number
 18416                                  					; dx is	head/drive number
 18417                                  					; si,di	unchanged
 18418 000019FB E8E9FD                  		call	doint
 18419 000019FE 07                      		pop	es		; restore caller's dma segment
 18420 000019FF 723A                    		jb	short bad13	; go clean up
 18421 00001A01 EB22                    		jmp	short dotail
 18422                                  ; ---------------------------------------------------------------------------
 18423                                  
 18424                                  ; reading a sector. do int first, then move things around
 18425                                  
 18426                                  doread:
 18427 00001A03 06                      		push	es
 18428 00001A04 53                      		push	bx
 18429 00001A05 1E                      		push	ds		; es = Bios_Code
 18430 00001A06 07                      		pop	es
 18431 00001A07 BB[5201]                		mov	bx, disksector
 18432 00001A0A B001                    		mov	al, 1
 18433 00001A0C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18434                                  					; get drive number
 18435 00001A0F E84EFD                  		call	check_wrap	;
 18436                                  					; ah = function
 18437                                  					; al = 1 for single sector
 18438                                  					; es:bx	points to local	buffer
 18439                                  					; cx, dx are track/sector, head/drive
 18440 00001A12 E8D2FD                  		call	doint
 18441 00001A15 5B                      		pop	bx
 18442 00001A16 07                      		pop	es
 18443 00001A17 7222                    		jb	short bad13
 18444 00001A19 56                      		push	si
 18445 00001A1A 57                      		push	di
 18446 00001A1B 89DF                    		mov	di, bx
 18447 00001A1D BE[5201]                		mov	si, disksector
 18448 00001A20 E822FD                  		call	move_sector
 18449 00001A23 5F                      		pop	di
 18450 00001A24 5E                      		pop	si
 18451                                  
 18452                                  ; note the fact that we've done 1 more sector
 18453                                  
 18454                                  dotail:
 18455 00001A25 5B                      		pop	bx		; retrieve new dma area
 18456 00001A26 80C702                  		add	bh, 2		; advance over sector
 18457 00001A29 41                      		inc	cx
 18458 00001A2A 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 18459 00001A2D F8                      		clc
 18460 00001A2E FEC8                    		dec	al
 18461 00001A30 7409                    		jz	short bad13	; no more i/o
 18462                                  
 18463                                  ; see if we wrap around a track or head boundary with starting sector
 18464                                  ; we already have the correct head number to pass to check_wrap
 18465                                  
 18466 00001A32 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18467 00001A35 E828FD                  		call	check_wrap
 18468 00001A38 E8ACFD                  		call	doint
 18469                                  
 18470                                  ; we are done. ax has the final code; we throw away what we got before
 18471                                  
 18472                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 18473                                  ;	   or we've finished. If carry is set now, our only
 18474                                  ;	   hope for salvation is that it was a read operation
 18475                                  ;	   and the error code is ECC error. In that case, we'll
 18476                                  ;	   just pop the registers and go do the old ECC thing.
 18477                                  ;	   When the DMA error that got us here in the first
 18478                                  ;	   place occurs, it'll handle it.
 18479                                  
 18480                                  bad13:
 18481 00001A3B 89EC                    		mov	sp, bp
 18482 00001A3D 5D                      		pop	bp
 18483 00001A3E 5B                      		pop	bx
 18484 00001A3F 5B                      		pop	bx
 18485 00001A40 59                      		pop	cx
 18486 00001A41 5A                      		pop	dx
 18487 00001A42 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 18488 00001A44 E935FE                  		jmp	ret_from_i13	; non-error exit
 18489                                  ; ---------------------------------------------------------------------------
 18490                                  
 18491                                  xgoterr13_xxxx:	
 18492 00001A47 E958FE                  		jmp	goterr13_xxxx
 18493                                  
 18494                                  ; ---------------------------------------------------------------------------
 18495                                  		; 10/12/2022
 18496                                  		;db 	0
 18497                                  ; ---------------------------------------------------------------------------
 18498                                  
 18499                                  ;Bios_Code ends
 18500                                  
 18501                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18502                                  
 18503                                  ;-----------------------------------------------------------------------------
 18504                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 18505                                  ;-----------------------------------------------------------------------------
 18506                                  ; 17/03/2019 - Retro DOS v4.0
 18507                                  
 18508                                  		; 19/10/2022
 18509                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 18510 00001A4A 8A26[7500]              		mov	ah, [drvmax]
 18511 00001A4E BF[3C05]                		mov	di, dskdrvs
 18512 00001A51 1E                      		push	ds		; pass result in es:di
 18513 00001A52 07                      		pop	es
 18514 00001A53 E934EC                  		jmp	SetPtrSav
 18515                                  
 18516                                  ; =============== S U B	R O U T	I N E =======================================
 18517                                  
 18518                                  ;---------------------------------------------------------------------------
 18519                                  ; install_bds installs a bds at location es:di into the current linked list of
 18520                                  ; bds maintained by this device driver. it places the bds at the end of the
 18521                                  ; list. Trashes (at least) ax, bx, di, si
 18522                                  ;---------------------------------------------------------------------------
 18523                                  
 18524                                  		; 26/12/2023 - Retro DOS v5.0
 18525                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 18526                                  install_bds:
 18527 00001A56 1E                      		push	ds		; save Bios_Data segment
 18528 00001A57 BE[1901]                		mov	si, start_bds	; beginning of chain
 18529                                  
 18530                                  		; ds:si now points to link to first bds
 18531                                  		; assume bds list is non-empty
 18532                                  loop_next_bds:
 18533 00001A5A C534                    		lds	si, [si]	; [si+BDS.link]
 18534                                  					; fetch	next bds
 18535 00001A5C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 18536 00001A60 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 18537                                  					; drive	with new one?
 18538 00001A63 7518                    		jnz	short next_bds
 18539 00001A65 B310                    		mov	bl, 10h		; fi_am_mult
 18540                                  		; 26/12/2023
 18541 00001A67 26085D3F                		or	[es:di+3Fh], bl
 18542                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18543                                  					; set both of them to i_am_mult	if so
 18544 00001A6B 085C3F                  		or	[si+3Fh], bl
 18545                                  		;or	[si+23h], bl	; [si+BDS.flags]
 18546 00001A6E 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 18547                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 18548                                  					; we don't own it
 18549 00001A73 8A5C3F                  		mov	bl, [si+3Fh]
 18550                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 18551                                  					; determine if changeline available
 18552 00001A76 80E302                  		and	bl, 2		; fchangeline
 18553 00001A79 26085D3F                		or	[es:di+3Fh], bl
 18554                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18555                                  next_bds:
 18556                                  		; 02/09/2023 (PCDOS 7.1)
 18557 00001A7D B8FFFF                  		mov	ax, 0FFFFh	; -1
 18558 00001A80 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 18559                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 18560                                  					; are we at end	of list?
 18561 00001A82 75D6                    		jnz	short loop_next_bds
 18562 00001A84 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 18563                                  					; install bds
 18564 00001A87 893C                    		mov	[si], di
 18565 00001A89 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 18566                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 18567                                  					; set next pointer to null
 18568 00001A8C 1F                      		pop	ds
 18569                                  
 18570                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 18571                                  ; 16/10/2022 (MSDOS 6.0 Code)
 18572                                  
 18573                                  ; **** If the new drive has a higher EOT value, we must alter the
 18574                                  ;      'eot' variable appropriately.
 18575                                  
 18576                                  		; 26/12/2023
 18577 00001A8D 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 18578                                  		; 01/06/2019
 18579                                  		;mov	al,[es:di+52]
 18580                                  		; 22/07/2023
 18581                                  		;mov	al,[es:di+BDS.rsecpertrack]
 18582 00001A91 3A06[2C01]              		cmp	al,[eot]
 18583 00001A95 7603                    		jbe	short _eot_ok
 18584 00001A97 A2[2C01]                		mov	[eot],al
 18585                                  _eot_ok:
 18586 00001A9A C3                      		retn
 18587                                  
 18588                                  ; ---------------------------------------------------------------------------
 18589                                  
 18590                                  ; 17/10/2022
 18591                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 18592                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 18593                                  ; 09/12/2022
 18594                                  DRVLET equ drvlet
 18595                                  SNGMSG equ sngmsg
 18596                                  
 18597                                  ; 16/10/2022
 18598                                  
 18599                                  ;---------------------------------------------------------------------------
 18600                                  ;  ask to swap the disk in drive a:
 18601                                  ;	es:di -> bds
 18602                                  ;	ds -> Bios_Data
 18603                                  ;---------------------------------------------------------------------------
 18604                                  
 18605                                  		; 26/12/2023 - Retro DOS v5.0
 18606                                  
 18607                                  		; 19/10/2022
 18608 00001A9B F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 18609                                  		;test	ds:IsWin386, 1	; Is win386 present?
 18610 00001AA0 7405                    		jz	short no_win386	; no, skip SetFocus
 18611                                  		
 18612                                  		; set focus to the correct VM
 18613                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 18614                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 18615                                  		; 17/10/2022
 18616 00001AA2 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 18617                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 18618                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 18619                                  no_win386:
 18620 00001AA7 51                      		push	cx
 18621 00001AA8 52                      		push	dx
 18622 00001AA9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 18623                                  					; get the drive	letter
 18624                                  
 18625                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 18626                                  ;           then existing dsk is drive A & vice versa
 18627                                  
 18628 00001AAD 88D6                    		mov	dh, dl
 18629 00001AAF 80F601                  		xor	dh, 1
 18630 00001AB2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 18631 00001AB4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 18632                                  					; broad	cast code for swap disk
 18633                                  					; Broadcast it
 18634 00001AB7 CD2F                    		int	2Fh
 18635 00001AB9 41                      		inc	cx		; cx == -1 ?
 18636 00001ABA 741E                    		jz	short swpdsk9	; somebody has handled it
 18637                                  
 18638                                  ; using a different drive in a one drive system so request the user change disks
 18639                                  
 18640 00001ABC 80C241                  		add	dl, 'A'
 18641                                  		; 17/10/2022
 18642 00001ABF 2E8816[F91A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 18643                                  		; 16/10/2022
 18644                                  		;;mov	byte [cs:drvlet], dl
 18645                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 18646                                  					; 0070h:3D54h =	2C7h:17E4h
 18647 00001AC4 BE[DD1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 18648                                  		;mov	si, 17C8h	; sngmsg
 18649                                  					; 0070h:3D38h =	2C7h:17C8h
 18650 00001AC7 53                      		push	bx
 18651 00001AC8 2E                      		cs
 18652 00001AC9 AC                      		lodsb			; get the next character of the message
 18653                                  		;lods	byte ptr cs:[si]
 18654                                  wrmsg_loop:
 18655 00001ACA CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 18656                                  					; AL = character to display
 18657 00001ACC 2E                      		cs
 18658 00001ACD AC                      		lodsb
 18659                                  		;lods	byte ptr cs:[si] ; cs lodsb
 18660                                  					; get the next character of the	message
 18661 00001ACE 08C0                    		or	al, al
 18662 00001AD0 75F8                    		jnz	short wrmsg_loop
 18663 00001AD2 E833E7                  		call	con_flush	; flush out keyboard queue
 18664                                  					; call rom-bios
 18665 00001AD5 30E4                    		xor	ah, ah
 18666 00001AD7 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 18667                                  					; Return: AH = scan code, AL = character
 18668 00001AD9 5B                      		pop	bx
 18669                                  swpdsk9:
 18670 00001ADA 5A                      		pop	dx
 18671 00001ADB 59                      		pop	cx
 18672 00001ADC C3                      		retn
 18673                                  
 18674                                  ; ---------------------------------------------------------------------------
 18675                                  
 18676                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18677                                  
 18678                                  ;--------------------------------------------------------
 18679                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 18680                                  ;--------------------------------------------------------
 18681                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 18682                                  ;--------------------------------------------------------
 18683                                  ; 17/03/2019 - Retro DOS v4.0
 18684                                  ; 26/12/2023 - Retro DOS v5.0
 18685                                  
 18686                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 18687                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 18688 00001ADD 0D0A                    sngmsg:		db 0Dh,0Ah
 18689 00001ADF 496E73657274206469-     		db 'Insert diskette for drive '
 18689 00001AE8 736B6574746520666F-
 18689 00001AF1 7220647269766520   
 18690                                  
 18691                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 18692                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 18693 00001AF9 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 18693 00001B02 65737320616E79206B-
 18693 00001B0B 6579207768656E2072-
 18693 00001B14 656164790D0A       
 18694 00001B1A 0A00                    		db 0Ah,0
 18695                                  
 18696                                  ; =============== S U B	R O U T	I N E =======================================
 18697                                  
 18698                                  ;---------------------------------------------------------------------------
 18699                                  ; input : es:di points to current bds for drive.
 18700                                  ; return : zero set if no open files
 18701                                  ;	   zero reset if open files
 18702                                  ;---------------------------------------------------------------------------
 18703                                  
 18704                                  		; 26/12/2023 - Retro DOS v5.0
 18705                                  chkopcnt:	
 18706 00001B1C 26837D3C00              		cmp     word [es:di+3Ch], 0
 18707                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 18708 00001B21 C3                      		retn
 18709                                  
 18710                                  ; =============== S U B	R O U T	I N E =======================================
 18711                                  
 18712                                  ;---------------------------------------------------------------------------
 18713                                  ; at media check time, we need to really get down and check what the change is.
 18714                                  ; this is guaranteed to be expensive.
 18715                                  ;
 18716                                  ;	es:di -> bds, ds -> Bios_Data
 18717                                  ;---------------------------------------------------------------------------
 18718                                  
 18719                                  		; 26/12/2023 - Retro DOS v5.0
 18720                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 18721                                  mediacheck:
 18722 00001B22 E852EE                  		call	checksingle	; make sure correct disk is in place
 18723 00001B25 31F6                    		xor	si, si
 18724 00001B27 E86101                  		call	haschange
 18725 00001B2A 742F                    		jz	short mediaret
 18726                                  		; 26/12/2023
 18727                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 18728 00001B2C E85001                  		call	checkromchange
 18729 00001B2F 752B                    		jnz	short mediadovolid
 18730 00001B31 50                      		push	ax
 18731 00001B32 52                      		push	dx
 18732 00001B33 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18733                                  					; set logical drive number
 18734 00001B37 B416                    		mov	ah, 16h
 18735 00001B39 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18736                                  					; DL = drive to	check
 18737                                  					; Return: AH = disk change status
 18738 00001B3B 5A                      		pop	dx
 18739 00001B3C 58                      		pop	ax
 18740 00001B3D 721D                    		jb	short mediadovolid
 18741 00001B3F BE0100                  		mov	si, 1		; signal no change
 18742                                  
 18743                                  ; there are some drives with changeline that "lose" the changeline indication
 18744                                  ; if a different drive is accessed after the current one. in order to avoid
 18745                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 18746                                  ; is not active and we are accessing a different drive from the last one.
 18747                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 18748                                  ; status.
 18749                                  		; 19/10/2022
 18750 00001B42 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 18751 00001B46 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 18752                                  					; (If the last drive accessed is not current drive
 18753                                  					; media	change status may be incorrect.	So,
 18754                                  					; "I don't now" will be returned even if it is indicated
 18755                                  					; as media is not changed.)
 18756 00001B4A 740F                    		jz	short mediaret	; (same	drive,
 18757                                  					; media	changeline indication is reliable)
 18758                                  
 18759                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 18760                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 18761                                  ; "not changed" here since the 2 second test said no change.)
 18762                                  
 18763 00001B4C 50                      		push	ax
 18764 00001B4D 51                      		push	cx
 18765 00001B4E 52                      		push	dx
 18766 00001B4F E8D8EA                  		call	Check_Time_Of_Access
 18767 00001B52 5A                      		pop	dx
 18768 00001B53 59                      		pop	cx
 18769 00001B54 58                      		pop	ax
 18770 00001B55 09F6                    		or	si, si
 18771 00001B57 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 18772                                  					; (volume id will be checked)
 18773 00001B59 31F6                    		xor	si, si		; return "i don't know"
 18774                                  mediaret:
 18775 00001B5B C3                      		retn
 18776                                  ; ---------------------------------------------------------------------------
 18777                                  
 18778                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 18779                                  ; because this may be different since we only set medbyt when doing a read
 18780                                  ; or write.
 18781                                  
 18782                                  mediadovolid:
 18783 00001B5C E877EB                  		call	GetBp		; build	a new bpb in current bds
 18784 00001B5F 72FA                    		jb	short mediaret
 18785 00001B61 E82D00                  		call	check_vid
 18786 00001B64 73F5                    		jnb	short mediaret
 18787 00001B66 E940F2                  		jmp	maperror	; fix up al for	return to dos
 18788                                  ; ---------------------------------------------------------------------------
 18789                                  
 18790                                  ; simple, quick check of latched change. if no indication, then return
 18791                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 18792                                  ; return and set al = 15 (for invalid media change) which will be returned to
 18793                                  ; dos.
 18794                                  ;
 18795                                  ; for dos 3.3, this will work only for the drive that has changeline.
 18796                                  
 18797                                  ;	call with es:di -> bds, ds -> Bios_Data
 18798                                  ;	***** warning:  this routine will return one level up on the stack
 18799                                  ;			if an error occurs!
 18800                                  
 18801                                  checklatchio:
 18802                                  
 18803                                  ; if returning fake bpb then assume the disk has not changed
 18804                                  
 18805                                  		; 26/12/2023
 18806                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 18807 00001B69 E8B0FF                  		call	chkopcnt
 18808 00001B6C 741B                    		jz	short checkret	; done if zero
 18809                                  
 18810                                  ; check for past rom indications. if no rom change indicated, then return ok.
 18811                                  
 18812                                  		; 26/12/2023
 18813                                  		;test	word [es:di+3Fh], 40h
 18814                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 18815 00001B6E E80E01                  		call	checkromchange
 18816 00001B71 7416                    		jz	short checkret
 18817                                  
 18818                                  ; we now see that a change line has been seen in the past. let's do the
 18819                                  ; expensive verification.
 18820                                  
 18821 00001B73 E860EB                  		call	GetBp		; build	bpb in current bds
 18822 00001B76 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 18823 00001B78 E81600                  		call	check_vid
 18824 00001B7B 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 18825 00001B7D 09F6                    		or	si, si		; is changed for sure?
 18826 00001B7F 7908                    		jns	short checkret
 18827 00001B81 E88F00                  		call	returnvid
 18828                                  checklatchret:
 18829 00001B84 E822F2                  		call	maperror	; fix up al for	return to dos
 18830                                  ret_no_error_map:
 18831 00001B87 F9                      		stc
 18832 00001B88 5E                      		pop	si		; pop off return address
 18833                                  checkret:
 18834 00001B89 C3                      		retn
 18835                                  ; ---------------------------------------------------------------------------
 18836                                  
 18837                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 18838                                  ; only if there was a disk error. return that error code in ax.
 18839                                  ;
 18840                                  ;	called with es:di -> bds, ds -> Bios_Data
 18841                                  
 18842                                  checkfatvid:
 18843 00001B8A E8D101                  		call	fat_check	; check	the fat	and the	vid
 18844 00001B8D 09F6                    		or	si, si
 18845 00001B8F 7835                    		js	short changed_drv
 18846                                  
 18847                                  ; the fat was the same. fall into check_vid and check volume id.
 18848                                  
 18849                                  		; fall into check_vid
 18850                                  
 18851                                  ; =============== S U B	R O U T	I N E =======================================
 18852                                  
 18853                                  ; now with the extended boot record, the logic should be enhanced.
 18854                                  ;
 18855                                  ; if it is the extended boot record, then we check the volume serial
 18856                                  ; number instead of volume id. if it is different, then set si to -1.
 18857                                  ;
 18858                                  ; if it is same, then si= 1 (no change).
 18859                                  ;
 18860                                  ; if it is not the extended boot record, then just follows the old
 18861                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 18862                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 18863                                  ; should have already covered by extended boot structure checking.
 18864                                  ; so, we will return "i don't know" by setting si to 0.
 18865                                  ;
 18866                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 18867                                  ; (this will be gauranteed by a successful getbp call right before this
 18868                                  ; routine.)
 18869                                  ;
 18870                                  ;	called with es:di -> bds, ds -> bds
 18871                                  
 18872                                  		; 26/12/2023 - Retro DOS v5.0
 18873                                  		; 19/10/2022
 18874                                  check_vid:
 18875                                  
 18876                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 18877                                  ; boot signature. if it is set then go to do the extended
 18878                                  ; id check otherwise continue with code below
 18879                                  
 18880                                  		; 26/12/2023
 18881                                  		;;;
 18882 00001B91 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18883 00001B96 7507                    		jnz     short chk_vid_1
 18884 00001B98 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 18885                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 18886 00001B9D EB05                    		jmp     short chk_vid_2
 18887                                  chk_vid_1:
 18888                                  		;;;
 18889 00001B9F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 18890                                  					; [disksector+EXT_BOOT.SIG],
 18891                                  					; EXT_BOOT_SIGNATURE
 18892                                  chk_vid_2:		; 26/12/2023
 18893 00001BA4 7427                    		jz	short do_ext_check_id
 18894 00001BA6 E8E200                  		call	haschange
 18895 00001BA9 74DE                    		jz	short checkret
 18896 00001BAB 31F6                    		xor	si, si
 18897 00001BAD 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 18898                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 18899 00001BB2 7411                    		jz	short checkfatret ; don't read vol id
 18900                                  					; if not fat system
 18901 00001BB4 E8F400                  		call	read_volume_id
 18902 00001BB7 720C                    		jb	short checkfatret
 18903 00001BB9 E89901                  		call	check_volume_id
 18904 00001BBC BEFFFF                  		mov	si, 0FFFFh	; -1
 18905                                  					; definitely changed
 18906 00001BBF 7505                    		jnz	short changed_drv
 18907                                  
 18908 00001BC1 46                      		inc	si		; not changed
 18909                                  vid_no_changed:
 18910 00001BC2 E8C000                  		call	resetchanged
 18911                                  		; 12/12/2022
 18912                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 18913                                  		;clc
 18914                                  checkfatret:
 18915 00001BC5 C3                      		retn
 18916                                  ; ---------------------------------------------------------------------------
 18917                                  
 18918                                  		; 12/12/2022
 18919                                  changed_drv:
 18920 00001BC6 F8                      		clc			; cas -- return	no error
 18921 00001BC7 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 18922                                  					; ensure that we ask rom for media
 18923 00001BCC C3                      		retn			; check	next time round
 18924                                  ; ---------------------------------------------------------------------------
 18925                                  
 18926                                  ; extended id check
 18927                                  
 18928                                  ; 16/10/2022
 18929                                  
 18930                                  ; the code to check extended id is basically a check to see if the
 18931                                  ; volume serial number is still the same. the volume serial number
 18932                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 18933                                  ; ds:di points to the bds of the drive under consideration.
 18934                                  ; the bds has fields containing the high and low words 
 18935                                  ; of the volume serial number of the media in the drive.
 18936                                  ; compare these fields to the fields mentioned above. if these fields
 18937                                  ; do not match the media has changed and so we should jump to the code
 18938                                  ; starting at ext_changed else return "i don't know" status
 18939                                  ; in the register used for the changeline status and continue executing
 18940                                  ; the code given below. for temporary storage use the register which
 18941                                  ; has been saved and restored around this block.
 18942                                  ;
 18943                                  ; bds fields in inc\msbds.inc
 18944                                  
 18945                                  		; 26/12/2023 - Retro DOS v5.0
 18946                                  		; 19/10/2022
 18947                                  do_ext_check_id:
 18948                                  		; 26/12/2023
 18949                                  		;push	ax
 18950                                  		;;mov	ax, word ptr ds:disksector+27h
 18951                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 18952                                  		;mov	ax, [disksector+27h]
 18953                                  ; 26/12/2023
 18954                                  %if 1
 18955                                  		;;;
 18956 00001BCD 57                      		push	di
 18957 00001BCE BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 18958                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 18959 00001BD1 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18960 00001BD6 7403                    		jz	short chk_vid_3
 18961 00001BD8 83EE1C                  		sub	si, 28		; BS_VolID
 18962                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 18963                                  chk_vid_3:
 18964                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 18965 00001BDB 81C78900                		add	di, 137		; BDS.vol_serial
 18966 00001BDF A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 18967                                  			;		= [di+BDS.vol_serial] ?
 18968 00001BE0 7501                    		jnz	short chk_vid_4
 18969 00001BE2 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 18970                                  			;		= [di+BDS.vol_serial+2] ?
 18971                                  chk_vid_4:
 18972 00001BE3 5F                      		pop	di
 18973                                  		;pop	ax
 18974 00001BE4 7504                    		jnz	short ext_changed ; not equal/same
 18975 00001BE6 31F6                    		xor	si, si 		 ; 0 ; don't know
 18976 00001BE8 EBD8                    		jmp	short vid_no_changed ; reset the flag
 18977                                  		;;;
 18978                                  %else
 18979                                  		; 02/09/2023
 18980                                  		xor	si, si ; 0
 18981                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 18982                                  		jnz	short ext_changed
 18983                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 18984                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 18985                                  		jnz	short ext_changed
 18986                                  		;xor	si, si		; 0
 18987                                  					; don't know
 18988                                  		pop	ax
 18989                                  		jmp	short vid_no_changed
 18990                                  					; reset the flag
 18991                                  %endif
 18992                                  
 18993                                  ; ---------------------------------------------------------------------------
 18994                                  
 18995                                  ext_changed:
 18996                                  		; 26/12/2023
 18997                                  		;pop	ax
 18998                                  		; 02/09/2023
 18999                                  		;dec	si ; mov si, 0FFFFh ; -1
 19000 00001BEA BEFFFF                  		mov	si, 0FFFFh	; -1
 19001                                  					; disk changed!
 19002                                  		; 12/12/2022
 19003                                  		; ('changed_drv' clears cf)
 19004                                  		;clc
 19005 00001BED EBD7                    		jmp	short changed_drv
 19006                                  
 19007                                  ; ---------------------------------------------------------------------------
 19008                                  
 19009                                  ; at i/o time, we detected the error. now we need to determine whether the
 19010                                  ; media was truly changed or not. we return normally if media change unknown.
 19011                                  ; and we pop off the call and jmp to harderr if we see an error.
 19012                                  ;
 19013                                  ; es:di -> bds
 19014                                  
 19015                                  checkio:				
 19016 00001BEF 80FC06                  		cmp	ah, 6
 19017 00001BF2 75D1                    		jnz	short checkfatret
 19018 00001BF4 E825FF                  		call	chkopcnt
 19019 00001BF7 74CC                    		jz	short checkfatret
 19020 00001BF9 E8DAEA                  		call	GetBp
 19021 00001BFC 7212                    		jb	short no_error_map
 19022 00001BFE E889FF                  		call	checkfatvid
 19023 00001C01 7209                    		jb	short checkioret ; disk	error trying to	read in.
 19024 00001C03 09F6                    		or	si, si		; is changed for sure?
 19025 00001C05 7802                    		js	short checkioerr ; yes changed
 19026 00001C07 45                      		inc	bp		; allow	a retry
 19027 00001C08 C3                      		retn
 19028                                  ; ---------------------------------------------------------------------------
 19029                                  
 19030                                  checkioerr:				
 19031 00001C09 E80700                  		call	returnvid
 19032                                  
 19033                                  checkioret:				
 19034 00001C0C F9                      		stc			; make sure carry gets passed through
 19035 00001C0D E955F1                  		jmp	harderr
 19036                                  ; ---------------------------------------------------------------------------
 19037                                  
 19038                                  no_error_map:				
 19039 00001C10 E955F1                  		jmp	harderr2
 19040                                  
 19041                                  ; =============== S U B	R O U T	I N E =======================================
 19042                                  
 19043                                  ; return vid sets up the vid for a return to dos.
 19044                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 19045                                  ;  **** trashes si! ****
 19046                                  
 19047                                  returnvid:		
 19048 00001C13 BE1600                  		mov	si, 22		; extra
 19049                                  					; offset into pointer to return	value
 19050 00001C16 E80700                  		call	vid_into_packet
 19051 00001C19 B406                    		mov	ah, 6
 19052 00001C1B F9                      		stc
 19053 00001C1C C3                      		retn
 19054                                  
 19055                                  ; ---------------------------------------------------------------------------
 19056                                  
 19057                                  ; moves the pointer to the volid for the drive into the original request packet
 19058                                  ; no attempt is made to preserve registers.
 19059                                  ;
 19060                                  ; assumes es:di -> bds
 19061                                  ; **trashes si**
 19062                                  
 19063                                  media_set_vid:				
 19064 00001C1D BE0F00                  		mov	si, 15		; trans+1
 19065                                  					; return the value here	in packet
 19066                                  
 19067                                  		; fall into vid_into_packet
 19068                                  
 19069                                  ; =============== S U B	R O U T	I N E =======================================
 19070                                  
 19071                                  ; return pointer to vid in bds at es:di in packet[si]
 19072                                  
 19073                                  		; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 19074                                  		; 19/10/2022
 19075                                  vid_into_packet:
 19076 00001C20 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 19077 00001C21 C51E[1200]              		lds	bx, [ptrsav]
 19078                                  		;add	di, 75		; BDS.volid
 19079                                  		; 14/04/2024
 19080 00001C25 83C77D                  		add	di, 125	; (PCDOS 7.1)
 19081 00001C28 8938                    		mov	[bx+si], di
 19082                                  		;sub	di, 75		; BDS.volid
 19083 00001C2A 83EF7D                  		sub	di, 125
 19084 00001C2D 8C4002                  		mov	[bx+si+2], es
 19085 00001C30 1F                      		pop	ds
 19086                                  dofloppy:	; 18/12/2022
 19087 00001C31 C3                      		retn
 19088                                  
 19089                                  ; ---------------------------------------------------------------------------
 19090                                  
 19091                                  ;----------------------------------------------------------------------------
 19092                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 19093                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 19094                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 19095                                  ;   of getbp. for 3.5" media, we just return.
 19096                                  ;
 19097                                  ;   inputs:	es:di point to correct bds for this drive
 19098                                  ;		ah has media byte
 19099                                  ;
 19100                                  ;   outputs:	carry clear
 19101                                  ;		    no registers modified
 19102                                  ;		carry set
 19103                                  ;		    al = sectors/fat
 19104                                  ;		    bh = number of root directory entries
 19105                                  ;		    bl = sectors per track
 19106                                  ;		    cx = number of sectors
 19107                                  ;		    dh = sectors per allocation unit
 19108                                  ;		    dl = number of heads
 19109                                  ;
 19110                                  ;----------------------------------------------------------------------------
 19111                                  
 19112                                  		; 26/12/2023 - Retro DOS v5.0
 19113                                  hidensity:
 19114                                  
 19115                                  ; check for correct drive
 19116                                  		
 19117                                  		; 26/12/2023
 19118 00001C32 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 19119                                  		; 12/12/2022
 19120                                  		;test	byte [es:di+23h], 2
 19121                                  		;;test	word [es:di+23h], 2 ; is it special?
 19122                                  					; [es:di+BDS.flags], fchangeline
 19123 00001C37 74F8                    		jz	short dofloppy	; no, do normal floppy test
 19124                                  
 19125                                  ; we have a media byte that is pretty complex. examine drive information
 19126                                  ; table to see what kind it is.
 19127                                  
 19128                                  		; 26/12/2023
 19129 00001C39 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 19130                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 19131 00001C3E 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 19132                                  					; yes, use fatid...
 19133                                  ; 96 tpi drive?
 19134 00001C40 80FCF9                  		cmp	ah, 0F9h
 19135 00001C43 75EC                    		jnz	short dofloppy
 19136                                  
 19137                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 19138                                  ;------ a 720K diskette
 19139                                  
 19140                                  		; 02/09/2023 (PCDOS 7.1)
 19141                                  		; 26/12/2023
 19142 00001C45 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 19143                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 19144 00001C49 3C07                    		cmp	al, 7
 19145                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 19146                                  					; ffOther
 19147 00001C4B 7413                    		jz	short Is720K
 19148 00001C4D 3C09                    		cmp	al, 9
 19149                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 19150                                  					; ff288
 19151 00001C4F 740F                    		jz	short Is720K
 19152 00001C51 B007                    		mov	al, 7		; seven	sectors	/ fat
 19153 00001C53 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 19154                                  					; 224 root dir entries
 19155                                  					; & 0Fh sector max
 19156 00001C56 B96009                  		mov	cx, 2400	; 80*15*2
 19157                                  					; 80 tracks, 15 sectors/track,
 19158                                  					; 2 sides
 19159                                  		; 02/09/2023
 19160 00001C59 5A                      		pop	dx		; pop off return address
 19161 00001C5A BA0201                  		mov	dx, 258		; 1*256+2
 19162                                  					; sectors/allocation unit
 19163                                  					; & head max
 19164                                  		;add	sp, 2		; pop off return address
 19165 00001C5D E9EAEA                  		jmp	Has1		; return to tail of getbp
 19166                                  ; ---------------------------------------------------------------------------
 19167                                  
 19168                                  Is720K:
 19169                                  		; 02/09/2023
 19170 00001C60 5B                      		pop	bx		; pop off return address
 19171                                  		;add	sp, 2		; pop off return address
 19172 00001C61 E9A9EA                  		jmp	Has720K		; return to 720K code
 19173                                  ; ---------------------------------------------------------------------------
 19174                                  
 19175                                  		; 18/12/2022
 19176                                  ;dofloppy:
 19177                                  		;retn
 19178                                  
 19179                                  ; =============== S U B	R O U T	I N E =======================================
 19180                                  
 19181                                  ; 16/10/2022
 19182                                  
 19183                                  ;---------------------------------------------------------------------------
 19184                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 19185                                  ;		   essentially used to indicate changeline, or format.
 19186                                  ;
 19187                                  ;   inputs:	dl contains physical drive number
 19188                                  ;		bx contains bits to set in the flag field in the bdss
 19189                                  ;   outputs:	none
 19190                                  ;   registers modified: flags
 19191                                  ;
 19192                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 19193                                  ;
 19194                                  ; in the virtual drive system we *must* flag the other drives as being changed
 19195                                  ;---------------------------------------------------------------------------
 19196                                  
 19197                                  		; 26/12/2023 - Retro DOS v5.0
 19198                                  set_changed_dl:	
 19199 00001C64 06                      		push	es
 19200 00001C65 57                      		push	di
 19201                                  		;les	di, ds:start_bds
 19202                                  		; 19/10/2022
 19203 00001C66 C43E[1901]              		les	di, [start_bds]
 19204                                  
 19205                                  ; note: we assume that the list is non-empty
 19206                                  
 19207                                  scan_bds:
 19208 00001C6A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19209 00001C6E 7504                    		jnz	short get_next_bds
 19210                                  
 19211                                  ; someone may complain, but this *always* must be done when a disk change is
 19212                                  ; noted. there are *no* other compromising circumstances.
 19213                                  
 19214                                  		; 26/12/2023
 19215 00001C70 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 19216                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 19217                                  					; signal change	on other drive
 19218                                  get_next_bds:
 19219 00001C74 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19220                                  					; go to	next bds
 19221 00001C77 83FFFF                  		cmp	di, 0FFFFh
 19222 00001C7A 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 19223 00001C7C 5F                      		pop	di
 19224 00001C7D 07                      		pop	es
 19225 00001C7E C3                      		retn
 19226                                  
 19227                                  ; =============== S U B	R O U T	I N E =======================================
 19228                                  
 19229                                  ;---------------------------------------------------------------------------
 19230                                  ; checkromchange - see if external program has diddled rom change line.
 19231                                  ;
 19232                                  ;   inputs:	es:di points to current bds.
 19233                                  ;   outputs:	zero set - no change
 19234                                  ;		zero reset - change
 19235                                  ;   registers modified: none
 19236                                  ;---------------------------------------------------------------------------
 19237                                  
 19238                                  		; 26/12/2023 - Retro DOS v5.0
 19239                                  checkromchange:	
 19240                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 19241                                  		; 26/12/2023
 19242 00001C7F 26F6453F40              		test	byte [es:di+3Fh], 40h
 19243                                  		; 10/12/2022
 19244                                  		;test	byte [es:di+23h], 40h
 19245                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 19246                                  					; fchanged
 19247 00001C84 C3                      		retn
 19248                                  
 19249                                  ; =============== S U B	R O U T	I N E =======================================
 19250                                  
 19251                                  ;---------------------------------------------------------------------------
 19252                                  ; resetchanged - restore value of change line
 19253                                  ;
 19254                                  ;   inputs:	es:di points to current bds
 19255                                  ;   outputs:	none
 19256                                  ;   registers modified: none
 19257                                  ;---------------------------------------------------------------------------
 19258                                  
 19259                                  		; 26/12/2023 - Retro DOS v5.0
 19260                                  resetchanged:
 19261                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 19262                                  		; 26/12/2023
 19263 00001C85 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 19264                                  		; 10/12/2022
 19265                                  		;and	byte [es:di+23h], 0BFh
 19266                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 19267                                  					; ~fchanged
 19268 00001C8A C3                      		retn
 19269                                  
 19270                                  ; =============== S U B	R O U T	I N E =======================================
 19271                                  
 19272                                  ;---------------------------------------------------------------------------
 19273                                  ; haschange - see if drive can supply change line
 19274                                  ;
 19275                                  ;   inputs:	es:di points to current bds
 19276                                  ;   outputs:	zero set - no change line available
 19277                                  ;		zero reset - change line available
 19278                                  ;   registers modified: none
 19279                                  ;---------------------------------------------------------------------------
 19280                                  
 19281                                  		; 26/12/2023 - Retro DOS v5.0
 19282                                  haschange:
 19283                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 19284                                  		; 26/12/2023
 19285 00001C8B 26F6453F02              		test	byte [es:di+3Fh], 2
 19286                                  		; 10/12/2022
 19287                                  		;test	byte [es:di+23h], 2
 19288                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 19289                                  					; fchangeline
 19290 00001C90 C3                      		retn
 19291                                  
 19292                                  ; ---------------------------------------------------------------------------
 19293                                  
 19294                                  ; 16/10/2022
 19295                                  
 19296                                  ;-------------------------------------------------------------------------
 19297                                  ; set_volume_id      -	main routine, calls other routines.
 19298                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 19299                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 19300                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 19301                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 19302                                  ;-------------------------------------------------------------------------
 19303                                  
 19304                                  ; set_volume_id
 19305                                  ;   if drive has changeline support, read in and set the volume_id
 19306                                  ; and the last fat_id byte. if no change line support then do nothing.
 19307                                  ;
 19308                                  ;   on entry:
 19309                                  ;	es:di points to the bds for this disk.
 19310                                  ;	ah contains media byte
 19311                                  ;
 19312                                  ;   on exit:
 19313                                  ;	carry clear:
 19314                                  ;	   successful call
 19315                                  ;	carry set
 19316                                  ;	   error and ax has error code
 19317                                  
 19318                                  set_volume_id:
 19319 00001C91 52                      		push	dx		; save registers
 19320 00001C92 50                      		push	ax
 19321 00001C93 E8F5FF                  		call	haschange	; does drive have changeline support?
 19322 00001C96 740B                    		jz	short setvret	; no, get out
 19323 00001C98 E81000                  		call	read_volume_id
 19324 00001C9B 7209                    		jb	short seterr
 19325 00001C9D E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 19326 00001CA0 E8E2FF                  		call	resetchanged	; restore value	of change line
 19327                                  setvret:				
 19328                                  		; 10/12/2022
 19329                                  		; cf = 0
 19330                                  		;clc			; no error, clear carry flag
 19331 00001CA3 58                      		pop	ax		; restore registers
 19332 00001CA4 5A                      		pop	dx
 19333 00001CA5 C3                      		retn
 19334                                  ; ---------------------------------------------------------------------------
 19335                                  
 19336                                  seterr:
 19337 00001CA6 5A                      		pop	dx		; pop stack but don't overwrite ax
 19338 00001CA7 5A                      		pop	dx		; restore dx
 19339 00001CA8 C3                      		retn
 19340                                  ; ---------------------------------------------------------------------------
 19341 00001CA9 0000                    root_sec:	dw 0			; root sector #
 19342                                  
 19343                                  ; 16/10/2022
 19344                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 19345                                  ; 09/12/2022
 19346                                  ROOTSEC equ root_sec
 19347                                  
 19348                                  ; =============== S U B	R O U T	I N E =======================================
 19349                                  
 19350                                  ; 16/10/2022
 19351                                  
 19352                                  ; read_volume_id read the volume id and tells if it has been changed.
 19353                                  ;
 19354                                  ;   on entry:
 19355                                  ;	es:di points to current bds for drive.
 19356                                  ;
 19357                                  ;   on exit:
 19358                                  ;	carry clear
 19359                                  ;	    si = 1  no change
 19360                                  ;	    si = 0  ?
 19361                                  ;	    si = -1 change
 19362                                  ;
 19363                                  ;	carry set:
 19364                                  ;	    error and ax has error code.
 19365                                  
 19366                                  read_volume_id:
 19367 00001CAB 52                      		push	dx		; preserve registers
 19368 00001CAC 51                      		push	cx
 19369 00001CAD 53                      		push	bx
 19370 00001CAE 50                      		push	ax
 19371 00001CAF 06                      		push	es		; stack the bds last
 19372 00001CB0 57                      		push	di
 19373 00001CB1 1E                      		push	ds		; point es to Bios_Data
 19374 00001CB2 07                      		pop	es
 19375 00001CB3 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19376 00001CB6 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 19377                                  		; 26/12/2023
 19378 00001CB9 B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 19379                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 19380                                  		
 19381                                  		;rep	movsb
 19382                                  		; 26/12/2023
 19383                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 19384                                  		;db 0FBh,2Eh,0A4h 
 19385                                  		;cs	; nul_vid is in BIOSCODE segment 
 19386                                  		;rep movsb
 19387 00001CBC F3                      		rep
 19388 00001CBD 2E                      		cs
 19389 00001CBE A4                      		movsb	
 19390                                  		
 19391 00001CBF 5F                      		pop	di
 19392 00001CC0 07                      		pop	es
 19393 00001CC1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 19394                                  					; # of fats
 19395 00001CC5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 19396                                  					; sectors / fat
 19397 00001CC9 F6E1                    		mul	cl		; size taken by	fats
 19398 00001CCB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 19399                                  					; add on reserved sectors
 19400                                  					;
 19401                                  					; ax is	now sector # (0	based)
 19402                                  		; 17/10/2022
 19403 00001CCF 2EA3[A91C]              		mov	[cs:ROOTSEC], ax
 19404                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 19405                                  					; 0070h:3EFFh =	2C7h:198Fh
 19406 00001CD3 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 19407                                  					; # root dir entries
 19408 00001CD7 B104                    		mov	cl, 4		; 16 entries/sector
 19409 00001CD9 D3E8                    		shr	ax, cl		; divide by 16
 19410                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 19411                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 19412 00001CDB 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 19413                                  next_sec:
 19414 00001CDC 51                      		push	cx		; save outer loop counter
 19415 00001CDD 2EA1[A91C]              		mov	ax, [cs:ROOTSEC]
 19416                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 19417                                  					; get sector #
 19418 00001CE1 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 19419                                  					; sectors / track
 19420 00001CE5 31D2                    		xor	dx, dx
 19421 00001CE7 F7F1                    		div	cx
 19422                                  
 19423                                  ; set up registers for call to read_sector
 19424                                  
 19425 00001CE9 42                      		inc	dx		; dx= sectors into track
 19426                                  					; ax= track count from 0
 19427 00001CEA 88D1                    		mov	cl, dl		; sector to read
 19428 00001CEC 31D2                    		xor	dx, dx
 19429 00001CEE 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 19430                                  					; # heads on this disc
 19431 00001CF2 88D6                    		mov	dh, dl		; head number
 19432 00001CF4 88C5                    		mov	ch, al		; track	#
 19433 00001CF6 E8BDEB                  		call	read_sector	; get first sector of the root directory,
 19434                                  					; ds:bx	-> directory sector
 19435 00001CF9 723F                    		jb	short readviderr
 19436 00001CFB B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 19437 00001CFE B008                    		mov	al, 8		; volume label bit
 19438                                  fvid_loop:
 19439                                  		; 02/09/2023 (PCDOS 7.1)
 19440 00001D00 382F                    		cmp	[bx], ch ; 0				
 19441                                  		;cmp	byte [bx], 0 ; end of dir?
 19442 00001D02 7433                    		jz	short no_vid	; yes, no vol id
 19443 00001D04 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 19444 00001D07 7405                    		jz	short ent_loop	; yes, skip
 19445 00001D09 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 19446 00001D0C 750F                    		jnz	short found_vid	; jmp yes
 19447                                  ent_loop:
 19448 00001D0E 83C320                  		add	bx, 32		; add length of	directory entry
 19449 00001D11 E2ED                    		loop	fvid_loop
 19450 00001D13 59                      		pop	cx		; outer loop
 19451 00001D14 2EFF06[A91C]            		inc	word [cs:ROOTSEC]
 19452                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 19453                                  					; next sector
 19454 00001D19 E2C1                    		loop	next_sec	; continue
 19455                                  notfound:
 19456                                  		; 02/09/2023
 19457                                  		;xor	si, si
 19458 00001D1B EB13                    		jmp	short fvid_ret
 19459                                  ; ---------------------------------------------------------------------------
 19460                                  
 19461                                  found_vid:
 19462                                  		; 02/09/2023
 19463                                  		; cf = 0  ('test' instruction clears cf)
 19464 00001D1D 59                      		pop	cx		; clean stack of outer loop counter
 19465 00001D1E 89DE                    		mov	si, bx		; point	to volume_id
 19466 00001D20 06                      		push	es		; preserve current bds
 19467 00001D21 57                      		push	di
 19468 00001D22 1E                      		push	ds
 19469 00001D23 07                      		pop	es		; point es to Bios_Data
 19470 00001D24 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19471 00001D27 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 19472                                  					; length of string minus nul
 19473 00001D2A F3A4                    		rep movsb		; mov volume label to tmp_vid
 19474                                  		;xor	al, al
 19475                                  		; 02/09/2023
 19476 00001D2C 91                      		xchg	ax, cx		; ax = 0
 19477 00001D2D AA                      		stosb			; null terminate
 19478                                  		;;xor	si, si
 19479                                  		; 02/09/2023
 19480                                  		;xchg	ax, si		; si = 0
 19481 00001D2E 5F                      		pop	di		; restore current bds
 19482 00001D2F 07                      		pop	es
 19483                                  fvid_ret:
 19484                                  		; 02/09/2023
 19485 00001D30 31F6                    		xor	si, si ; 0
 19486                                  				
 19487 00001D32 58                      		pop	ax
 19488                                  		; 10/12/2022
 19489                                  		; cf = 0
 19490                                  		;clc
 19491                                  rvidret:
 19492 00001D33 5B                      		pop	bx		; restore registers
 19493 00001D34 59                      		pop	cx
 19494 00001D35 5A                      		pop	dx
 19495 00001D36 C3                      		retn
 19496                                  ; ---------------------------------------------------------------------------
 19497                                  
 19498                                  no_vid:
 19499 00001D37 59                      		pop	cx		; clean stack of outer loop counter
 19500                                  		;jmp	short notfound	; not found
 19501                                  		; 02/09/2023
 19502 00001D38 EBF6                    		jmp	short fvid_ret
 19503                                  ; ---------------------------------------------------------------------------
 19504                                  
 19505                                  readviderr:
 19506 00001D3A 5E                      		pop	si		; trash the outer loop counter
 19507 00001D3B 5E                      		pop	si		; caller's ax, return error code instead
 19508 00001D3C EBF5                    		jmp	short rvidret
 19509                                  
 19510                                  ; ---------------------------------------------------------------------------
 19511                                  		; 26/12/2023 - Retro DOS v5.0
 19512                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 19513                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 19514                                  preset_volid_addr:
 19515 00001D3E BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 19516                                  		; 26/12/2023
 19517                                  		; PCDOS 7.1
 19518 00001D41 83C77D                  		add	di, 125		; BDS.volid
 19519 00001D44 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 19520                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 19521                                  		;add	di, 75		; BDS.volid
 19522                                  		;mov	cx, 12		; VOLID_SIZ
 19523                                  		;
 19524 00001D47 FC                      		cld
 19525 00001D48 C3                      		retn
 19526                                  
 19527                                  ; =============== S U B	R O U T	I N E =======================================
 19528                                  
 19529                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 19530                                  ;
 19531                                  ; inputs:	es:di has current bds
 19532                                  ; outputs:	bds for drive has volume id from tmp
 19533                                  
 19534                                  		; 27/12/2023 - Retro DOS v5.0
 19535                                  transfer_volume_id:
 19536 00001D49 57                      		push	di		; copy the volume id from tmp to special drive
 19537                                  		;push	si
 19538 00001D4A 51                      		push	cx
 19539                                  		; 27/12/2023
 19540 00001D4B 56                      		push	si
 19541                                  
 19542                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19543                                  		;;add	di, BDS.volid
 19544                                  		;add	di, 75		; BDS.volid
 19545                                  		;;mov	cx, VOLID_SIZ
 19546                                  		;mov	cx, 12		; VOLID_SIZ
 19547                                  		;cld
 19548                                  		; 02/09/2023 (PCDOS 7.1)
 19549 00001D4C E8EFFF                  		call	preset_volid_addr
 19550                                  
 19551 00001D4F F3A4                    		rep movsb
 19552                                  		
 19553                                  		; 27/12/2023
 19554 00001D51 5E                      		pop	si
 19555                                  chk_volid_ok:
 19556 00001D52 59                      		pop	cx
 19557                                  		;pop	si
 19558 00001D53 5F                      		pop	di
 19559 00001D54 C3                      		retn
 19560                                  
 19561                                  ; =============== S U B	R O U T	I N E =======================================
 19562                                  
 19563                                  ;  check_volume_id - compare volume id in tmp area with
 19564                                  ;		     one expected for drive
 19565                                  ;
 19566                                  ;   inputs:	es:di has current bds for drive
 19567                                  ;   outputs:	zero true means it matched
 19568                                  
 19569                                  		; 27/12/2023 - Retro DOS v5.0
 19570                                  check_volume_id:
 19571 00001D55 57                      		push	di
 19572 00001D56 51                      		push	cx
 19573                                  		
 19574                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19575                                  		;;add	di, BDS.volid
 19576                                  		;add	di, 75		; BDS.volid
 19577                                  		;;mov	cx, VOLID_SIZ
 19578                                  		;mov	cx, 12		; VOLID_SIZ
 19579                                  		;cld
 19580                                  		; 02/09/2023 (PCDOS 7.1)
 19581 00001D57 E8E4FF                  		call	preset_volid_addr
 19582                                  
 19583 00001D5A F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 19584                                  		
 19585                                  		; 27/12/2023
 19586                                  		;pop	cx
 19587                                  		;pop	di
 19588                                  		;retn
 19589 00001D5C EBF4                    		jmp	short chk_volid_ok
 19590                                  
 19591                                  ; =============== S U B	R O U T	I N E =======================================
 19592                                  
 19593                                  ;   fat_check - see of the fatid has changed in the specified drive.
 19594                                  ;	      - uses the fat id obtained from the boot sector.
 19595                                  ;
 19596                                  ;   inputs:	medbyt is expected fat id
 19597                                  ;		es:di points to current bds
 19598                                  ;
 19599                                  ;   output:	si = -1 if fat id different,
 19600                                  ;		si = 0 otherwise
 19601                                  ;
 19602                                  ;   no other registers changed.
 19603                                  
 19604                                  fat_check:
 19605 00001D5E 50                      		push	ax
 19606 00001D5F 31F6                    		xor	si, si		; say fat id's are same.
 19607 00001D61 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 19608 00001D64 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 19609                                  					; compare it with the bds medbyte
 19610 00001D68 7401                    		jz	short okret1	; carry	clear
 19611 00001D6A 4E                      		dec	si
 19612                                  okret1:
 19613 00001D6B 58                      		pop	ax
 19614 00001D6C C3                      		retn
 19615                                  
 19616                                  ; ---------------------------------------------------------------------------
 19617                                  
 19618                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 19619                                  		;times 2 db 0
 19620                                  
 19621                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 19622                                  		;times 7 db 0
 19623                                  
 19624                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 19625                                  
 19626                                  		; 09/12/2022
 19627                                  		;times 4 db 0	; 17/10/2022
 19628                                  		;db 4 dup(0)	; times 4 db 0
 19629                                  
 19630                                  ; ---------------------------------------------------------------------------
 19631                                  
 19632                                  		; 09/12/2022
 19633                                  		;db 0
 19634                                  
 19635                                  number2div	equ ($-BCode_start)
 19636                                  number2mod	equ (number2div % 16)
 19637                                  
 19638                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 19639 00001D6D 00<rep 3h>              		times (16-number2mod) db 0
 19640                                  %endif
 19641                                  
 19642                                  ;align 16
 19643                                  
 19644                                  ; 09/12/2022
 19645                                  BCODE_END	equ $ - BCode_start
 19646                                  ; 29/09/2023
 19647                                  BCODEEND:
 19648                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 19649                                  ; 13/12/2022
 19650                                  SYSINITOFFSET	equ BCODE_END
 19651                                  ; 29/09/2023
 19652                                  ;SYSINITOFFSET	equ $-$$
 19653                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 19654                                  
 19655                                  ; 28/09/2023
 19656                                  S2SIZE equ $-$$
 19657                                  
 19658                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 19659                                  
 19660                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19661                                  ; 01/05/2019 - Retro DOS v4.0 
 19662                                  ; ============================================================================
 19663                                  ; end of BIOSCODE
 19664                                  
 19665                                  ; ----------------------------------------------------------------------------
 19666                                  ; %include sysinit5.s	; 09/12/2022
 19667                                  ; ----------------------------------------------------------------------------
 19668                                  
 19669                                  ;=============================================================================
 19670                                  ; (IO.SYS) SYSINIT SEGMENT 
 19671                                  ;=============================================================================
 19672                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19673                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19674                                  ;
 19675                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 19676                                  
 19677                                  section .SYSINIT vstart=0
 19678                                  
 19679                                  ; ****************************************************************************
 19680                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 19681                                  ; ----------------------------------------------------------------------------
 19682                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 19683                                  ; ----------------------------------------------------------------------------
 19684                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 19685                                  ; ----------------------------------------------------------------------------
 19686                                  ; Assembler: NASM version 2.15
 19687                                  ; ----------------------------------------------------------------------------
 19688                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 19689                                  ; ----------------------------------------------------------------------------
 19690                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 19691                                  ; ----------------------------------------------------------------------------
 19692                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 19693                                  ; source code by Microsoft, 1991 
 19694                                  ; ----------------------------------------------------------------------------
 19695                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 19696                                  ; by Microsoft, 12/10/1983
 19697                                  ; ****************************************************************************
 19698                                  ; main file: 'retrodos4.s'
 19699                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 19700                                  
 19701                                  ; 30/12/2022 - Retro DOS v4.2 
 19702                                  ; Retro DOS v4.0 - 2019
 19703                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 19704                                   
 19705                                  ; 21/10/2022
 19706                                  ; ----------------------------------------------------------------------------
 19707                                  ; This source code (version) is based on SYSINIT source code of disassembled
 19708                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 19709                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 19710                                  ; ----------------------------------------------------------------------------
 19711                                  ; Binary file splitter & joiner: FFSJ v3.3
 19712                                  
 19713                                  ;--------------------------------------------------------------
 19714                                  ; SYSINIT.TXT (27/01/1983)
 19715                                  ;--------------------------------------------------------------
 19716                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 19717                                  ;over  the  system  initialization  after  the  OEM  bios   has
 19718                                  ;performed any  initialization  it  needs  to  do.   Control is
 19719                                  ;transfered with a long jump to the external  variable  SYSINIT
 19720                                  ;
 19721                                  ;
 19722                                  ;   The OEM  has  the  following  variables declared external:
 19723                                  ;
 19724                                  ;   CURRENT_DOS_LOCATION    WORD
 19725                                  ;
 19726                                  ;This word  contains  the  segment  number of the DOS before it
 19727                                  ;is relocated.  The OEM bios must set this value.
 19728                                  ;
 19729                                  ;   FINAL_DOS_LOCATION      WORD
 19730                                  ;
 19731                                  ;This word contains the segment number of the DOS after SYSINIT
 19732                                  ;moves it.  The OEM bios must set this value.
 19733                                  ;
 19734                                  ;   DEVICE_LIST             DWORD
 19735                                  ;
 19736                                  ;This  double  word  pointer  points  to  the  linked  list  of
 19737                                  ;character and block device drivers.  The  OEM  must  set  this
 19738                                  ;value.
 19739                                  ;
 19740                                  ;   MEMORY_SIZE             WORD
 19741                                  ;
 19742                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 19743                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 19744                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 19745                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 19746                                  ;and read it back until it gets a mismatch.
 19747                                  ;
 19748                                  ;   DEFAULT_DRIVE           BYTE
 19749                                  ;
 19750                                  ;This is  the initial default drive when the system first comes
 19751                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 19752                                  ;it then drive a is assumed.
 19753                                  ;
 19754                                  ;   BUFFERS                 BYTE
 19755                                  ;
 19756                                  ;This is  the  default  number of buffers for the system.  This
 19757                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19758                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 19759                                  ;
 19760                                  ;   FILES                   BYTE
 19761                                  ;
 19762                                  ;This is  the  default  number  of  files for the system.  This
 19763                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19764                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 19765                                  ;
 19766                                  ;   SYSINIT                 FAR
 19767                                  ;
 19768                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 19769                                  ;this label at the end of its INIT code.
 19770                                  ;
 19771                                  ;   The OEM  has  the  following  variables declared public:
 19772                                  ;
 19773                                  ;   RE_INIT                 FAR
 19774                                  ;
 19775                                  ;This is an entry point which allows the BIOS to do some INIT
 19776                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 19777                                  ;PRESERVED.  On entry DS points to the first available memory
 19778                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 19779                                  ;prefix which represents  the  "program"  currently  running.
 19780                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 19781                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 19782                                  ;that  no  memory  is  allocated to it, it is running in free
 19783                                  ;memory.
 19784                                  ;NOTES:
 19785                                  ;     At the time this routine is called SYSINIT occupies the
 19786                                  ;highest 10K of memory ("highest" is determined by the  value
 19787                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 19788                                  ;     Since this is called AFTER DOS is initialized, you can
 19789                                  ;make system calls.  This also implies that the code for this
 19790                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 19791                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 19792                                  ;     If you don't want  anything done just set this to point
 19793                                  ;at a FAR RET instruction.
 19794                                  
 19795                                  ; ----------------------------------------------------------------------
 19796                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 19797                                  ; ----------------------------------------------------------------------
 19798                                  
 19799                                  ;include version.inc
 19800                                  ; ----------------------------------------------------------------------
 19801                                  
 19802                                  ;FALSE   EQU     0
 19803                                  ;TRUE    EQU     0FFFFh
 19804                                  
 19805                                  ;IBMVER	    EQU     TRUE
 19806                                  ;IBMCOPYRIGHT EQU   FALSE
 19807                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 19808                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 19809                                  ;MSVER      EQU     FALSE
 19810                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 19811                                  ;KANJI      EQU     FALSE
 19812                                  
 19813                                  ;(MSDOS 6.0, versiona.inc, 1991)
 19814                                  ; ----------------------------------------------------------------------
 19815                                  ;MAJOR_VERSION  EQU	6
 19816                                  ;;MINOR_VERSION	EQU	0	;6.00
 19817                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 19818                                  
 19819                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 19820                                  ; ----------------------------------------------------------------------
 19821                                  ;MAJOR_VERSION   EQU	5
 19822                                  ;MINOR_VERSION   EQU	0
 19823                                  
 19824                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 19825                                  ;MAJOR_VERSION   EQU	6
 19826                                  ;MINOR_VERSION   EQU	22
 19827                                  
 19828                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 19829                                  MAJOR_VERSION   EQU	7
 19830                                  MINOR_VERSION   EQU	10
 19831                                  
 19832                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 19833                                  
 19834                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 19835                                  				; currently 0.
 19836                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 19837                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 19838                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 19839                                  
 19840                                  ;      if1
 19841                                  ;      %OUT  ... for DOS Version 5.00 ...
 19842                                  ;      endif
 19843                                  
 19844                                         ;******************************
 19845                                         ;Each assembler program should:
 19846                                         ;  mov ah,030h                   ;DOS Get Version function
 19847                                         ;  int 021h                      ;Version ret. in AX,minor version first
 19848                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 19849                                         ;  jne error_handler             ; EXACT version match.
 19850                                         ;******************************
 19851                                  
 19852                                  ; ----------------------------------------------------------------------
 19853                                  ; device definitions
 19854                                  
 19855                                  ;Attribute bit masks
 19856                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 19857                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 19858                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 19859                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 19860                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 19861                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 19862                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 19863                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 19864                                  
 19865                                  ; The device table list has the form:
 19866                                  struc	SYSDEV
 19867 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 19868 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 19869 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 19870 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 19871 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 19872                                  .size:
 19873                                  endstruc
 19874                                  
 19875                                  ;Static Reguest Header
 19876                                  struc	SRHEAD
 19877 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 19878 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 19879 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 19880 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 19881 00000005 ????????????????                	resb 8		;Reserved for queue links
 19882                                  .size:
 19883                                  endstruc
 19884                                  
 19885                                  ;Status word masks
 19886                                  STERR   EQU     8000H           ;Bit 15 - Error
 19887                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 19888                                  STDON   EQU     0100H           ;Bit 8 - Done
 19889                                  STECODE EQU     00FFH           ;Error code
 19890                                  WRECODE EQU     0
 19891                                  
 19892                                  ;Function codes
 19893                                  DEVINIT EQU     0               ;Initialization
 19894                                  DINITHL EQU     26              ;Size of init header
 19895                                  DEVMDCH EQU     1               ;Media check
 19896                                  DMEDHL  EQU     15              ;Size of media check header
 19897                                  DEVBPB  EQU     2               ;Get BPB
 19898                                  DEVRDIOCTL EQU  3               ;IOCTL read
 19899                                  DBPBHL  EQU     22              ;Size of Get BPB header
 19900                                  DEVRD   EQU     4               ;Read
 19901                                  DRDWRHL EQU     22              ;Size of RD/WR header
 19902                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 19903                                  DRDNDHL EQU     14              ;Size of non destructive read header
 19904                                  DEVIST  EQU     6               ;Input status
 19905                                  DSTATHL EQU     13              ;Size of status header
 19906                                  DEVIFL  EQU     7               ;Input flush
 19907                                  ; 21/02/2024
 19908                                  ;DFLSHL EQU     15              ;Size of flush header
 19909                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 19910                                  DEVWRT  EQU     8               ;Write
 19911                                  DEVWRTV EQU     9               ;Write with verify
 19912                                  DEVOST  EQU     10              ;Output status
 19913                                  DEVOFL  EQU     11              ;Output flush
 19914                                  DEVWRIOCTL EQU  12              ;IOCTL write
 19915                                  
 19916                                  ; ----------------------------------------------------------------------
 19917                                  struc	SYS_FCB
 19918 00000000 ??                      .fcb_drive:	resb 1
 19919 00000001 ????????????????        .fcb_name:	resb 8
 19920 00000009 ??????                  .fcb_ext:	resb 3
 19921 0000000C ????                    .fcb_EXTENT:	resw 1
 19922 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 19923 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 19924                                                          ; word
 19925 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 19926 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 19927 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 19928 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 19929                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 19930                                                          ; If file, bit 6=0 if dirty
 19931                                                          ; If I/O device, bit 6=0 if EOF (input)
 19932                                                          ;               Bit 5=1 if Raw mode
 19933                                                          ;               Bit 0=1 if console input device
 19934                                                          ;               Bit 1=1 if console output device
 19935                                                          ;               Bit 2=1 if null device
 19936                                                          ;               Bit 3=1 if clock device
 19937 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 19938 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 19939 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 19940 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 19941 00000020 ??                      .fcb_NR:	resb 1	; Next record
 19942 00000021 ????????                .fcb_RR:	resb 4	; Random record
 19943                                  .size:
 19944                                  endstruc
 19945                                  
 19946                                  ; ----------------------------------------------------------------------
 19947                                  ; Field definition for I/O buffer information
 19948                                  
 19949                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 19950                                  
 19951                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 19952                                  
 19953                                  struc BUFFINFO
 19954 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 19955 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 19956 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 19957                                  				; SFT table index (bit 7 = 1)
 19958                                  				; = FFH if buffer free
 19959 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 19960                                  				;	= 0 if Local device buffer
 19961                                  				; Bit 6 = 1 if buffer dirty
 19962                                  				; Bit 5 = Reserved
 19963                                  				; Bit 4 = Search bit (bit 7 = 1)
 19964                                  				; Bit 3 = 1 if buffer is DATA
 19965                                  				; Bit 2 = 1 if buffer is DIR
 19966                                  				; Bit 1 = 1 if buffer is FAT
 19967                                  				; Bit 0 = Reserved
 19968 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 19969                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 19970 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 19971 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 19972 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19973                                  			   ; hw of sectors per FAT
 19974 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 19975 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 19976 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 19977 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19978                                  			   ; reserved word for dword boundary
 19979                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 19980                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 19981                                  endstruc
 19982                                  
 19983                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 19984                                  				;For buf_flags bit 7 = 1, this is the byte
 19985                                  				;offset of the start of the buffer in
 19986                                  				;the file pointed to by buf_ID. Thus
 19987                                  				;the buffer starts at location
 19988                                  				;buf_offset in the file and contains
 19989                                  				;buf_fill bytes.
 19990                                  
 19991                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 19992                                  
 19993                                  
 19994                                  buf_Free	equ	0FFh		; buf_id of free buffer
 19995                                  
 19996                                  ;Flag byte masks
 19997                                  buf_isnet	EQU	10000000B
 19998                                  buf_dirty	EQU	01000000B
 19999                                  ;***
 20000                                  buf_visit	EQU	00100000B
 20001                                  ;***
 20002                                  buf_snbuf	EQU	00010000B
 20003                                  
 20004                                  buf_isDATA	EQU	00001000B
 20005                                  buf_isDIR	EQU	00000100B
 20006                                  buf_isFAT	EQU	00000010B
 20007                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 20008                                  
 20009                                  buf_NetID	EQU	bufinsiz
 20010                                  
 20011                                  ; ----------------------------------------------------------------------
 20012                                  
 20013                                  ; ----------------------------------------------------------------------
 20014                                  ;**	DPB - Drive Parameter Block
 20015                                  
 20016                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 20017                                  
 20018                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 20019                                  ;	possibly inaccurate deductions from code study... - jgl
 20020                                  ;
 20021                                  ;	The DPB is DOS's main structure for describing block devices.
 20022                                  ;	It contains info about the "Drive" intermingled with info about
 20023                                  ;	the FAT file system which is presumably on the drive.  I don't know
 20024                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 20025                                  ;
 20026                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 20027                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 20028                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 20029                                  
 20030                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 20031                                  
 20032                                  ; 12/05/2019 - Retro DOS v4.0
 20033                                  
 20034                                  ; 01/01/2024
 20035                                  %if 0
 20036                                  
 20037                                  struc	DPB
 20038                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 20039                                  .UNIT:		resb 1		; Driver unit number of DPB
 20040                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 20041                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 20042                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 20043                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 20044                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 20045                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 20046                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 20047                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 20048                                  ; MSDOS 3.3
 20049                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 20050                                  ; MSDOS 6.0
 20051                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 20052                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 20053                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 20054                                  .MEDIA:		resb 1		; Media byte
 20055                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 20056                                  				; check the first time this DPB is used
 20057                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 20058                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 20059                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 20060                                  .size:
 20061                                  endstruc
 20062                                  
 20063                                  %else
 20064                                  
 20065                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 20066                                  
 20067                                  struc	DPB
 20068 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 20069 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 20070 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 20071 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 20072 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 20073 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 20074 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 20075 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 20076 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 20077 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 20078 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 20079 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 20080 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 20081 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 20082 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 20083                                  				; check the first time this DPB is used
 20084 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 20085 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 20086 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 20087                                  ; FAT32 fs ; 01/01/2024
 20088                                  ; ref: https://en.wikibooks.org/wiki/
 20089                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 20090                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 20091 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 20092 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 20093 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 20094 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 20095 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 20096 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 20097 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 20098 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 20099                                  ; 01/01/2024 - Retro DOS v5.0
 20100 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 20101                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 20102                                  endstruc
 20103                                  
 20104                                  %endif
 20105                                  
 20106                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 20107                                  
 20108                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 20109                                  
 20110                                  ; ----------------------------------------------------------------------
 20111                                  ; 26/03/2018
 20112                                  
 20113                                  ; IOCTL SUB-FUNCTIONS
 20114                                  IOCTL_GET_DEVICE_INFO	EQU	0
 20115                                  IOCTL_SET_DEVICE_INFO	EQU	1
 20116                                  IOCTL_READ_HANDLE	EQU	2
 20117                                  IOCTL_WRITE_HANDLE	EQU	3
 20118                                  IOCTL_READ_DRIVE	EQU	4
 20119                                  IOCTL_WRITE_DRIVE	EQU	5
 20120                                  IOCTL_GET_INPUT_STATUS	EQU	6
 20121                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 20122                                  IOCTL_CHANGEABLE?	EQU	8
 20123                                  IOCTL_SHARING_RETRY	EQU	11
 20124                                  GENERIC_IOCTL_HANDLE	EQU	12
 20125                                  GENERIC_IOCTL		EQU	13
 20126                                  
 20127                                  ; GENERIC IOCTL SUB-FUNCTIONS
 20128                                  RAWIO			EQU	8
 20129                                  
 20130                                  ; RAWIO SUB-FUNCTIONS
 20131                                  GET_DEVICE_PARAMETERS	EQU	60H
 20132                                  SET_DEVICE_PARAMETERS	EQU	40H
 20133                                  READ_TRACK		EQU	61H
 20134                                  WRITE_TRACK		EQU	41H
 20135                                  VERIFY_TRACK		EQU	62H
 20136                                  FORMAT_TRACK		EQU	42H
 20137                                  
 20138                                  ; DEVICETYPE VALUES
 20139                                  MAX_SECTORS_IN_TRACK	EQU	63
 20140                                  DEV_5INCH		EQU	0
 20141                                  DEV_5INCH96TPI		EQU	1
 20142                                  DEV_3INCH720KB		EQU	2
 20143                                  DEV_8INCHSS		EQU	3
 20144                                  DEV_8INCHDS		EQU	4
 20145                                  DEV_HARDDISK		EQU	5
 20146                                  DEV_OTHER		EQU	7
 20147                                  ;DEV_3INCH1440KB	EQU	7
 20148                                  DEV_3INCH2880KB		EQU	9
 20149                                  ; Retro DOS v2.0 - 26/03/2018
 20150                                  ;;DEV_TAPE		EQU	6
 20151                                  ;;DEV_ERIMO		EQU	8
 20152                                  ;DEV_3INCH2880KB	EQU	9
 20153                                  DEV_3INCH1440KB		EQU	10
 20154                                  
 20155                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 20156                                  					; CURRENTLY SUPPORT.
 20157                                  MAX_DEV_TYPE		EQU	10
 20158                                  
 20159                                  struc A_SECTORTABLE
 20160 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 20161 00000002 ????                    .ST_SECTORSIZE:		resw	1
 20162                                  .size:
 20163                                  endstruc
 20164                                  
 20165                                  ; ----------------------------------------------------------------------
 20166                                  ; structure, equates for devmark for mem command.
 20167                                  
 20168                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 20169                                  
 20170                                  struc devmark
 20171 00000000 ??                       .id:	    resb 1
 20172 00000001 ????                     .seg:	    resw 1
 20173 00000003 ????                     .size:	    resw 1
 20174 00000005 ??????                   .dum:	    resb 3
 20175 00000008 ????????????????         .filename: resb 8
 20176                                  endstruc
 20177                                  
 20178                                  devmark_stk	equ	'S'
 20179                                  devmark_device	equ	'D'
 20180                                  devmark_ifs	equ	'I'
 20181                                  devmark_buf	equ	'B'
 20182                                  devmark_cds	equ	'L' ; lastdrive
 20183                                  devmark_files	equ	'F'
 20184                                  devmark_fcbs	equ	'X'
 20185                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 20186                                  devmark_ems_stub equ	'E'
 20187                                  
 20188                                  setbrkdone	equ	00000001b
 20189                                  for_devmark	equ	00000010b
 20190                                  not_for_devmark equ	11111101b
 20191                                  
 20192                                  ; ----------------------------------------------------------------------
 20193                                  ; Memory arena structure
 20194                                  
 20195                                  ; 24/03/2019 - Retro DOS v4.0 
 20196                                  ; (MSDOS 6.0, ARENA.INC)
 20197                                  
 20198                                  ;** Arena Header
 20199                                  
 20200                                  struc ARENA
 20201 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 20202 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 20203 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 20204 00000005 ??????                  .RESERVED	resb 3		; reserved
 20205 00000008 ????????????????        .NAME:		resb 8		; owner file name
 20206                                  endstruc
 20207                                  
 20208                                  ; 12/04/2019
 20209                                  
 20210                                  arena_owner_system	EQU 0	; free block indication
 20211                                  
 20212                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 20213                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 20214                                  
 20215                                  ; ----------------------------------------------------------------------
 20216                                  ; Process data block (otherwise known as program header)
 20217                                  
 20218                                  ; 23/03/2019 - Retro DOS v4.0
 20219                                  
 20220                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 20221                                  
 20222                                  FILPERPROC	EQU     20
 20223                                  
 20224                                  struc PDB	; Process_data_block
 20225 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 20226 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 20227 00000004 ??                                      resb 1
 20228 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 20229 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 20230 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 20231 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 20232 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 20233 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 20234 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 20235 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 20236 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 20237 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 20238 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 20239 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 20240 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 20241 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 20242 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 20243 00000042 <res Eh>                .PAD1:		resb 14		; 	
 20244 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 20245 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 20246 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 20247 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 20248 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 20249 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 20250                                  ;.size:
 20251                                  endstruc
 20252                                  
 20253                                  ; ----------------------------------------------------------------------
 20254                                  ; <system call definitions>
 20255                                  
 20256                                  ; 23/03/2019 - Retro DOS v4.0
 20257                                  
 20258                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 20259                                  
 20260                                  ABORT                           EQU 0   ;  0      0
 20261                                  STD_CON_INPUT                   EQU 1   ;  1      1
 20262                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 20263                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 20264                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 20265                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 20266                                  RAW_CON_IO                      EQU 6   ;  6      6
 20267                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 20268                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 20269                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 20270                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 20271                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 20272                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 20273                                  DISK_RESET                      EQU 13  ; 13      D
 20274                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 20275                                  FCB_OPEN                        EQU 15  ; 15      F
 20276                                  FCB_CLOSE                       EQU 16  ; 16     10
 20277                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 20278                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 20279                                  FCB_DELETE                      EQU 19  ; 19     13
 20280                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 20281                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 20282                                  FCB_CREATE                      EQU 22  ; 22     16
 20283                                  FCB_RENAME                      EQU 23  ; 23     17
 20284                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 20285                                  SET_DMA                         EQU 26  ; 26     1A
 20286                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 20287                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 20288                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 20289                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 20290                                  GET_FCB_POSITION                EQU 36  ; 36     24
 20291                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 20292                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 20293                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 20294                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 20295                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 20296                                  GET_DATE                        EQU 42  ; 42     2A
 20297                                  SET_DATE                        EQU 43  ; 43     2B
 20298                                  GET_TIME                        EQU 44  ; 44     2C
 20299                                  SET_TIME                        EQU 45  ; 45     2D
 20300                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 20301                                  ; Extended functionality group
 20302                                  GET_DMA                         EQU 47  ; 47     2F
 20303                                  GET_VERSION                     EQU 48  ; 48     30
 20304                                  KEEP_PROCESS                    EQU 49  ; 49     31
 20305                                  GET_DPB                         EQU 50  ; 50     32
 20306                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 20307                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 20308                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 20309                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 20310                                  CHAR_OPER                       EQU 55  ; 55     37
 20311                                  INTERNATIONAL                   EQU 56  ; 56     38
 20312                                  ;   Directory Group
 20313                                  MKDIR                           EQU 57  ; 57     39
 20314                                  RMDIR                           EQU 58  ; 58     3A
 20315                                  CHDIR                           EQU 59  ; 59     3B
 20316                                  ;   File Group
 20317                                  CREAT                           EQU 60  ; 60     3C
 20318                                  OPEN                            EQU 61  ; 61     3D
 20319                                  CLOSE                           EQU 62  ; 62     3E
 20320                                  READ                            EQU 63  ; 63     3F
 20321                                  WRITE                           EQU 64  ; 64     40
 20322                                  UNLINK                          EQU 65  ; 65     41
 20323                                  LSEEK                           EQU 66  ; 66     42
 20324                                  CHMOD                           EQU 67  ; 67     43
 20325                                  IOCTL                           EQU 68  ; 68     44
 20326                                  XDUP                            EQU 69  ; 69     45
 20327                                  XDUP2                           EQU 70  ; 70     46
 20328                                  CURRENT_DIR                     EQU 71  ; 71     47
 20329                                  ;    Memory Group
 20330                                  ALLOC                           EQU 72  ; 72     48
 20331                                  DEALLOC                         EQU 73  ; 73     49
 20332                                  SETBLOCK                        EQU 74  ; 74     4A
 20333                                  ;    Process Group
 20334                                  EXEC                            EQU 75  ; 75     4B
 20335                                  EXIT                            EQU 76  ; 76     4C
 20336                                  WAITPROCESS			EQU 77  ; 77     4D
 20337                                  FIND_FIRST                      EQU 78  ; 78     4E
 20338                                  ;   Special Group
 20339                                  FIND_NEXT                       EQU 79  ; 79     4F
 20340                                  ; SPECIAL SYSTEM GROUP
 20341                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 20342                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 20343                                  GET_IN_VARS                     EQU 82  ; 82     52
 20344                                  SETDPB                          EQU 83  ; 83     53
 20345                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 20346                                  DUP_PDB                         EQU 85  ; 85     55
 20347                                  RENAME                          EQU 86  ; 86     56
 20348                                  FILE_TIMES                      EQU 87  ; 87     57
 20349                                  ;
 20350                                  ALLOCOPER			EQU 88	; 88     58	
 20351                                  ; Network extention system calls
 20352                                  GetExtendedError		EQU 89	; 89	 59
 20353                                  CreateTempFile			EQU 90	; 90	 5A
 20354                                  CreateNewFile			EQU 91	; 91	 5B
 20355                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 20356                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 20357                                  					;	    CloseByName, CloseUser,
 20358                                  					;	    CloseUserProcess,
 20359                                  					;	    GetOpenFileList
 20360                                  UserOper			EQU 94	; 94	 5E Get and Set
 20361                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 20362                                  xNameTrans			EQU 96	; 96	 60
 20363                                  PathParse			EQU 97	; 97	 61
 20364                                  GetCurrentPSP			EQU 98	; 98	 62
 20365                                  Hongeul 			EQU 99	; 99	 63
 20366                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 20367                                  Set_Printer_Flag		EQU 100 ; 100	 64
 20368                                  GetExtCntry			EQU 101 ; 101	 65
 20369                                  GetSetCdPg			EQU 102 ; 102	 66
 20370                                  ExtHandle			EQU 103 ; 103	 67
 20371                                  Commit				EQU 104 ; 104	 68
 20372                                  GetSetMediaID			EQU 105 ; 105	 69
 20373                                  IFS_IOCTL			EQU 107 ; 107	 6B
 20374                                  ExtOpen 			EQU 108 ; 108	 6C
 20375                                  ;
 20376                                  ;ifdef ROMEXEC
 20377                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 20378                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 20379                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 20380                                  ;endif
 20381                                  ;
 20382                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 20383                                  OEM_C1				EQU 249 ; 249	 F9
 20384                                  OEM_C2				EQU 250 ; 250	 FA
 20385                                  OEM_C3				EQU 251 ; 251	 FB
 20386                                  OEM_C4				EQU 252 ; 252	 FC
 20387                                  OEM_C5				EQU 253 ; 253	 FD
 20388                                  OEM_C6				EQU 254 ; 254	 FE
 20389                                  OEM_C7				EQU 255 ; 255	 FF
 20390                                  
 20391                                  ; ----------------------------------------------------------------------
 20392                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 20393                                  ; ----------------------------------------------------------------------
 20394                                  
 20395                                  ;;	IF	STACKSW
 20396                                  
 20397                                  ;;
 20398                                  ;; Internal Stack Parameters
 20399                                  ;EntrySize		equ	8
 20400                                  ;
 20401                                  ;MinCount		equ	8
 20402                                  ;DefaultCount		equ	9
 20403                                  ;MaxCount		equ	64
 20404                                  ;
 20405                                  ;MinSize 		equ	32
 20406                                  ;DefaultSize		equ	128
 20407                                  ;MaxSize 		equ	512
 20408                                  
 20409                                  ;;	ENDIF
 20410                                  
 20411                                  ; ----------------------------------------------------------------------
 20412                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 20413                                  ; ----------------------------------------------------------------------
 20414                                  					  ;;Rev 3.30 Modification
 20415                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 20416                                  									  
 20417                                  ;*******************************					  
 20418                                  ;System Service call ( Int 15h )					  
 20419                                  ;*******************************					  
 20420                                  ;Function AH = 0C0h, Return system configuration			  
 20421                                  ;For PC and PCJR on return:						  
 20422                                  ;	(AH)	= 80h							  
 20423                                  ;	(CY)	= 1							  
 20424                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 20425                                  ;	(AH)	= 86h							  
 20426                                  ;	(CY)	= 1							  
 20427                                  ;For all others:							  
 20428                                  ;	(AH)	= 0							  
 20429                                  ;	(CY)	= 0							  
 20430                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 20431                                  ; System descriptor :							  
 20432                                  ;	DW	xxxx		length of descriptor in bytes,		  
 20433                                  ;				minimum length = 8			  
 20434                                  ;	DB	xx		model byte				  
 20435                                  ;				0FFh	= PC				  
 20436                                  ;				0FEh	= PC/XT, Portable		  
 20437                                  ;				0FDh	= PC/JR 			  
 20438                                  ;				0FCh	= PC/AT				  
 20439                                  ;				0F9h	= Convertable			  
 20440                                  ;				0F8h	= Model 80			  
 20441                                  ;				0E0 thru 0EFh = reserved		  
 20442                                  ;									  
 20443                                  ;	DB	xx		secondary model byte			  
 20444                                  ;				000h	= PC1				  
 20445                                  ;				000h	= PC/XT, Portable		  
 20446                                  ;				000h	= PC/JR 			  
 20447                                  ;				000h	= PC/AT 			  
 20448                                  ;				001h	= PC/AT Model 339		  
 20449                                  ;				003h	= PC/RT				  
 20450                                  ;				000h	= Convertable			  
 20451                                  ;									  
 20452                                  ;	DB	xx		bios revision level			  
 20453                                  ;				00 for first release, subsequent release  
 20454                                  ;				of code with same model byte and	  
 20455                                  ;				secondary model byte require revison level
 20456                                  ;				to increase by one.			  
 20457                                  ;									  
 20458                                  ;	DB	xx		feature information byte 1		  
 20459                                  ;				X0000000 = 1, bios use DMA channel 3	  
 20460                                  ;					 = 0, DMA channel 3 not used	  
 20461                                  ;									  
 20462                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 20463                                  ;					 = 0, 2nd Interrupt chip not present
 20464                                  ;									  
 20465                                  ;				00X00000 = 1, Real Time Clock present	  
 20466                                  ;					 = 0, Real Time Clock not present 
 20467                                  ;									  
 20468                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 20469                                  ;						called in keyboard interrupt
 20470                                  ;						(Int 09h).		  
 20471                                  ;					 = 0, Keyboard escape sequence not
 20472                                  ;						called. 		  
 20473                                  ;				0000XXXX reserved			  
 20474                                  ;									  
 20475                                  ;	DB	xx		feature information byte 2 - reserved	  
 20476                                  ;									  
 20477                                  ;	DB	xx		feature information byte 2 - reserved	  
 20478                                  ;									  
 20479                                  ;	DB	xx		feature information byte 2 - reserved	  
 20480                                  ;									  
 20481                                  ;	DB	xx		feature information byte 2 - reserved	  
 20482                                  ;									  
 20483                                  
 20484                                  ; 22/03/2019
 20485                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 20486 00000000 ????                    .bios_sd_leng:		resw 1
 20487 00000002 ??                      .bios_sd_modelbyte:	resb 1
 20488                                  .bios_sd_scnd_modelbyte: 
 20489 00000003 ??                      			resb 1
 20490 00000004 ??                      			resb 1
 20491 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 20492 00000006 ????????                			resb 4
 20493                                  endstruc
 20494                                  
 20495                                  ;FeatureByte1	bit map equates
 20496                                  DMAchannel3		equ 10000000b
 20497                                  ScndIntController	equ 01000000b
 20498                                  RealTimeClock		equ 00100000b
 20499                                  KeyEscapeSeq		equ 00010000b
 20500                                  					;;End of Modification
 20501                                  
 20502                                  ; ----------------------------------------------------------------------
 20503                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 20504                                  ; ----------------------------------------------------------------------
 20505                                  ; 22/03/2019 - Retro DOS v4.0
 20506                                  
 20507                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 20508                                  
 20509                                  struc SysInitVars
 20510                                  ; MSDOS 3.3
 20511 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 20512 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 20513 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 20514 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 20515 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 20516 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 20517 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 20518 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 20519 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 20520 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 20521 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 20522 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 20523                                  ; MSDOS 6.0
 20524 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 20525 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 20526 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 20527 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 20528                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 20529 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 20530 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 20531 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 20532 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 20533 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 20534 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 20535 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 20536                                  .size:
 20537                                  endstruc
 20538                                  
 20539                                  ;This is added for more information exchage between DOS, BIOS.
 20540                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 20541                                  
 20542                                  ; 22/03/2019
 20543                                  struc SysInitVars_Ext
 20544 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 20545 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 20546                                  endstruc
 20547                                  
 20548                                  ; 09/06/2018
 20549                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 20550                                  SYSI_DPB    equ	0
 20551                                  SYSI_SFT    equ 4
 20552                                  SYSI_CLOCK  equ 8
 20553                                  SYSI_CON    equ 12
 20554                                  SYSI_MAXSEC equ 16
 20555                                  SYSI_BUF    equ 18
 20556                                  SYSI_CDS    equ 22
 20557                                  SYSI_FCB    equ 26
 20558                                  SYSI_KEEP   equ 30
 20559                                  SYSI_NUMIO  equ	32
 20560                                  SYSI_NCDS   equ	33
 20561                                  SYSI_DEV    equ 34
 20562                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 20563                                  SYSI_ATTR	  equ 38
 20564                                  SYSI_STRAT	  equ 40
 20565                                  SYSI_INTER	  equ 42
 20566                                  SYSI_NAME	  equ 44
 20567                                  SYSI_SPLICE	  equ 52
 20568                                  SYSI_IBMDOS_SIZE  equ 53
 20569                                  SYSI_IFS_DOSCALL@ equ 55
 20570                                  SYSI_IFS	  equ 59
 20571                                  SYSI_BUFFERS	  equ 63
 20572                                  SYSI_BOOT_DRIVE   equ 67
 20573                                  SYSI_DWMOVE	  equ 68
 20574                                  SYSI_EXT_MEM	  equ 69
 20575                                  
 20576                                  ;The SYSI_BUF of SysInitVars points to the following structure
 20577                                  
 20578                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 20579                                  
 20580                                  struc BUFFINF 	; BUFFINFO
 20581 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 20582 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 20583 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 20584 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 20585                                  
 20586 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 20587                                  				; are in HMA
 20588 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 20589                                  				;  used to read/write on disks
 20590 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 20591 00000015 ????                    .UU_EMS_NPA640:		resw 1
 20592 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 20593 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 20594 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 20595 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 20596 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 20597 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 20598 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 20599                                  .size:
 20600                                  endstruc
 20601                                  
 20602                                  ; ----------------------------------------------------------------------
 20603                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 20604                                  ; ----------------------------------------------------------------------
 20605                                  ; 22/03/2019 - Retro DOS v4.0
 20606                                  
 20607                                  ;**	CDS - Current Directory Structure
 20608                                  ;
 20609                                  ; CDS items are used bu the internal routines to store cluster numbers and
 20610                                  ; network identifiers for each logical name.  The ID field is used dually,
 20611                                  ; both as net ID and for a cluster number for local devices. In the case
 20612                                  ; of local devices, the cluster number will be -1 if there is a potential
 20613                                  ; of the disk being changed or if the path must be recracked.
 20614                                  ;
 20615                                  ;	Some pathnames have special preambles, such as
 20616                                  ;
 20617                                  ;		\\machine\sharename\...
 20618                                  ;	For these pathnames we can't allow ".." processing to back us
 20619                                  ;	up into the special front part of the name.  The CURDIR_END field
 20620                                  ;	holds the address of the seperator character which marks
 20621                                  ;	the split between the special preamble and the regular
 20622                                  ;	path list; ".." processing isn't allowed to back us up past
 20623                                  ;	(i.e., before) CURDIR_END
 20624                                  ;	For the root, it points at the leading /. For net
 20625                                  ;	assignments it points at the end (nul) of the initial assignment:
 20626                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 20627                                  ;	  ^		 ^		     ^
 20628                                  
 20629                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 20630                                  TEMPLEN 	EQU	DIRSTRLEN*2
 20631                                  
 20632                                  struc 		curdir_list
 20633                                  ; MSDOS 3.3
 20634 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 20635 00000043 ????                    .cdir_flags	resw	1		; various flags
 20636 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 20637 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 20638 0000004D ????                    .cdir_usr_word	resw	1
 20639 0000004F ????                    .cdir_end	resw	1		; end of assignment
 20640                                  ; MSDOS 6.0
 20641 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 20642 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 20643 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 20644                                  .size:
 20645                                  endstruc
 20646                                  
 20647                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 20648                                  						; ASM87 which doesn't allow
 20649                                  						; Size directive as a macro
 20650                                  						; argument
 20651                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 20652                                  
 20653                                  ;**	Flag values for CURDIR_FLAGS
 20654                                  
 20655                                  ;Flag word masks
 20656                                  curdir_isnet	EQU	1000000000000000B
 20657                                  curdir_isifs	EQU	1000000000000000B
 20658                                  curdir_inuse	EQU	0100000000000000B
 20659                                  curdir_splice	EQU	0010000000000000B
 20660                                  curdir_local	EQU	0001000000000000B
 20661                                  
 20662                                  ; ----------------------------------------------------------------------
 20663                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 20664                                  ; ----------------------------------------------------------------------
 20665                                  ; 25/03/2019 - Retro DOS v4.0
 20666                                  
 20667                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 20668                                  ; 09/04/2024 - Retro DOS v5.0
 20669                                  
 20670                                  ; system file table
 20671                                  
 20672                                  ;**	System File Table SuperStructure
 20673                                  ;
 20674                                  ;	The system file table entries are allocated in contiguous groups.
 20675                                  ;	There may be more than one such groups; the SF "superstructure"
 20676                                  ;	tracks the groups.
 20677                                  
 20678                                  struc	SF
 20679 00000000 ????????                .SFLink:	resd	1
 20680 00000004 ????                    .SFCount:	resw	1		; number of entries
 20681 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 20682                                  .size:
 20683                                  endstruc
 20684                                  
 20685                                  ;**	System file table entry
 20686                                  ;
 20687                                  ;	These are the structures which are at SFTABLE in the SF structure.
 20688                                  
 20689                                  struc	SF_ENTRY
 20690 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 20691                                  					;   if FCB then ref count
 20692 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 20693 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 20694 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 20695                                  					; Bit 15 = 1 if remote file
 20696                                  					;	 = 0 if local file or device
 20697                                  					; Bit 14 = 1 if date/time is not to be
 20698                                  					;   set from clock at CLOSE.  Set by
 20699                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 20700                                  					;   other reseters of the dirty bit
 20701                                  					;   (WRITE)
 20702                                  					; Bit 13 = Pipe bit (reserved)
 20703                                  					;
 20704                                  					; Bits 0-7 (old FCB_devid bits)
 20705                                  					; If remote file or local file, bit
 20706                                  					; 6=0 if dirty Device ID number, bits
 20707                                  					; 0-5 if local file.
 20708                                  					; bit 7=0 for local file, bit 7
 20709                                  					;      =1 for local I/O device
 20710                                  					; If local I/O device, bit 6=0 if EOF (input)
 20711                                  					;		Bit 5=1 if Raw mode
 20712                                  					;		Bit 0=1 if console input device
 20713                                  					;		Bit 1=1 if console output device
 20714                                  					;		Bit 2=1 if null device
 20715                                  					;		Bit 3=1 if clock device
 20716 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 20717                                  					; to device header if local device,
 20718                                  					; points to net device header if
 20719                                  					; remote
 20720 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 20721                                  ;.sf_lstclus:	resw	1 ; *	
 20722 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 20723 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 20724 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 20725 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 20726                                  ;
 20727                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 20728                                  ; ID
 20729                                  ;
 20730 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 20731 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 20732 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 20733                                  ;
 20734                                  ; End of 7 bytes of file-system specific info.
 20735                                  ;
 20736 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 20737                                  					; directory entry.  This is used by
 20738                                  					; close to detect file deleted and
 20739                                  					; disk changed errors.
 20740                                  ; SHARING INFO
 20741 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 20742 0000002F ????                    .sf_UID:	resw	1
 20743 00000031 ????                    .sf_PID:	resw	1
 20744 00000033 ????                    .sf_MFT:	resw	1
 20745 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 20746 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 20747                                  .size:
 20748                                  endstruc
 20749                                  
 20750                                  ; ----------------------------------------------------------------------
 20751                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 20752                                  ; ----------------------------------------------------------------------
 20753                                  ; 11/06/2018 - Retro DOS v3.0
 20754                                  
 20755                                  ;Equates for COUNTRY INFORMATION.
 20756                                  SetCountryInfo		EQU	1	;country info
 20757                                  SetUcase		EQU	2	;uppercase table
 20758                                  SetLcase		EQU	3	;lowercase table (Reserved)
 20759                                  SetUcaseFile		EQU	4	;uppercase file spec table
 20760                                  SetFileList		EQU	5	;valid file character list
 20761                                  SetCollate		EQU	6	;collating sequence
 20762                                  SetDBCS 		EQU	7	;double byte character set
 20763                                  SetALL			EQU	-1	;all the entries
 20764                                  
 20765                                  ;DOS country and code page information table structure.
 20766                                  ;Internally, IBMDOS gives a pointer to this table.
 20767                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 20768                                  ;this structure.
 20769                                  
 20770                                  struc country_cdpg_info ; DOS_country_cdpg_info
 20771 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 20772 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 20773 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 20774 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 20775 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 20776 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 20777                                  
 20778 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 20779 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 20780                                  
 20781 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 20782 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 20783                                  
 20784 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 20785 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 20786                                  
 20787 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 20788 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 20789 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 20790 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 20791 00000067 ????                    .ccDFormat:		resw	1	;date format
 20792 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 20793                                  					;5 byte of (currency symbol+0)
 20794 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 20795 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 20796 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 20797 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 20798 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 20799 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 20800 00000078 ??                      .ccTFormat:		resb	1	;time format
 20801 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 20802 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 20803 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 20804                                  .size:
 20805                                  endstruc
 20806                                  
 20807                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 20808                                  
 20809                                  ; ======================================================================
 20810                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 20811                                  ; ======================================================================
 20812                                  ; 21/03/2019 - Retro DOS v4.0
 20813                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20814                                  
 20815                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 20816                                  ; 21/10/2022
 20817                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 20818                                  ; 22/10/2022
 20819                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 20820                                  ; 09/12/2022
 20821                                  DOSBIOCODESEG equ IOSYSCODESEG
 20822                                  
 20823                                  ; Note: These offset addresses must be chanqed when the code 
 20824                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 20825                                  
 20826                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 20827                                  
 20828                                  ; 09/12/2022
 20829                                  %if 0
 20830                                  
 20831                                  ; 13/05/2019
 20832                                  
 20833                                  ;IsWin386         equ 08CFh
 20834                                  ;V86_Crit_SetFocus equ 08D0h
 20835                                  ; 21/10/2022
 20836                                  IsWin386          equ 08D0h
 20837                                  V86_Crit_SetFocus equ 08D1h 
 20838                                  
 20839                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 20840                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20841                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 20842                                  
 20843                                  ;SysinitPresent	  equ 08FCh
 20844                                  ; 21/10/2022
 20845                                  SysinitPresent	  equ 08FDh
 20846                                  
 20847                                  inHMA		  equ 000Dh
 20848                                  xms		  equ 000Eh
 20849                                  ;FreeHMAPtr	  equ 08F6h
 20850                                  ;multrk_flag	  equ 0533h
 20851                                  ;ec35_flag	  equ 0535h
 20852                                  ;EOT		  equ 012Eh
 20853                                  ; 21/10/2022
 20854                                  FreeHMAPtr	  equ 08F7h
 20855                                  multrk_flag	  equ 052Fh
 20856                                  ec35_flag	  equ 0531h
 20857                                  EOT		  equ 012Ch
 20858                                  
 20859                                  ;NextStack	  equ 08BFh
 20860                                  ;IT_StackLoc	  equ 08C5h
 20861                                  ;IT_StackSize	  equ 08C9h
 20862                                  ; 21/10/2022
 20863                                  NextStack	  equ 08C0h
 20864                                  IT_StackLoc	  equ 08C6h
 20865                                  IT_StackSize	  equ 08CAh
 20866                                  
 20867                                  ;MoveDOSIntoHMA	  equ 08F8h
 20868                                  ; 21/10/2022
 20869                                  MoveDOSIntoHMA	  equ 08F9h
 20870                                  
 20871                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 20872                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 20873                                  ; 21/10/2022
 20874                                  INT19SEM equ 0640h ; (iosys5.txt)
 20875                                  I19_LST  equ 0641h ; (iosys5.txt)
 20876                                  
 20877                                  %endif
 20878                                  
 20879                                  ; 09/12/2022
 20880                                  seg_reinit equ _seg_reinit
 20881                                  ec35_flag  equ ec35flag
 20882                                  INT19SEM   equ int19sem
 20883                                  I19_LST    equ i19_lst
 20884                                  
 20885                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 20886                                  INT19OLD08 equ I19_LST+6
 20887                                  INT19OLD09 equ I19_LST+11
 20888                                  INT19OLD0A equ I19_LST+16
 20889                                  INT19OLD0B equ I19_LST+21
 20890                                  INT19OLD0C equ I19_LST+26
 20891                                  INT19OLD0D equ I19_LST+31
 20892                                  INT19OLD0E equ I19_LST+36
 20893                                  INT19OLD70 equ I19_LST+41
 20894                                  INT19OLD72 equ I19_LST+46
 20895                                  INT19OLD73 equ I19_LST+51
 20896                                  INT19OLD74 equ I19_LST+56
 20897                                  INT19OLD76 equ I19_LST+61
 20898                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 20899                                  
 20900                                  ; 09/12/2022
 20901                                  %if 0
 20902                                  
 20903                                  ;keyrd_func	equ 04E9h
 20904                                  ;keysts_func	equ 04EAh
 20905                                  ;t_switch	equ 04F6h
 20906                                  ; 21/10/2022
 20907                                  keyrd_func	equ 04E5h
 20908                                  keysts_func	equ 04E6h
 20909                                  t_switch	equ 04F2h
 20910                                  
 20911                                  ; 22/10/2022
 20912                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 20913                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 20914                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 20915                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 20916                                  
 20917                                  %endif
 20918                                  
 20919                                  ; 09/12/2022
 20920                                  BCODESTART	equ BIOSDATAWORD
 20921                                  RE_INIT		equ re_init
 20922                                  
 20923                                  ; ----------------------------------------------------------------------
 20924                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 20925                                  ; ----------------------------------------------------------------------
 20926                                  ; 15/04/2019 - Retro DOS v4.0
 20927                                  
 20928                                  CONFIG_BEGIN        equ  '['
 20929                                  CONFIG_BREAK        equ  'C'
 20930                                  CONFIG_BUFFERS      equ  'B'
 20931                                  CONFIG_COMMENT      equ  'Y'
 20932                                  CONFIG_COUNTRY      equ  'Q'
 20933                                  CONFIG_DEVICE       equ  'D'
 20934                                  CONFIG_DEVICEHIGH   equ  'U'
 20935                                  CONFIG_DOS          equ  'H'
 20936                                  CONFIG_DRIVPARM     equ  'P'
 20937                                  CONFIG_FCBS         equ  'X'
 20938                                  CONFIG_FILES        equ  'F'
 20939                                  CONFIG_INCLUDE      equ  'J'
 20940                                  CONFIG_INSTALL      equ  'I'
 20941                                  CONFIG_INSTALLHIGH  equ  'W'
 20942                                  CONFIG_LASTDRIVE    equ  'L'
 20943                                  CONFIG_MENUCOLOR    equ  'R'
 20944                                  CONFIG_MENUDEFAULT  equ  'A'
 20945                                  CONFIG_MENUITEM     equ  'E'
 20946                                  CONFIG_MULTITRACK   equ  'M'
 20947                                  CONFIG_NUMLOCK      equ  'N'
 20948                                  CONFIG_REM          equ  '0'
 20949                                  CONFIG_SEMICOLON    equ  ';'
 20950                                  CONFIG_SET          equ  'V'
 20951                                  CONFIG_SHELL        equ  'S'
 20952                                  CONFIG_STACKS       equ  'K'
 20953                                  CONFIG_SUBMENU      equ  'O'
 20954                                  CONFIG_SWITCHES     equ  '1'
 20955                                  
 20956                                  CONFIG_UNKNOWN      equ  'Z'
 20957                                  
 20958                                  ; 13/05/2024 - Retro DOS v5.0 (PCDOS 71 IBMBIO.COM)
 20959                                  CONFIG_DOSDATA      equ  'T'
 20960                                  
 20961                                  CONFIG_OPTION_QUERY equ 80h
 20962                                  
 20963                                  ; ----------------------------------------------------------------------
 20964                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 20965                                  ; ----------------------------------------------------------------------
 20966                                  ; 21/03/2019 - Retro DOS v4.0
 20967                                  
 20968                                  true	equ	0FFFFh
 20969                                  false	equ	0
 20970                                  cr	equ	13
 20971                                  lf	equ	10
 20972                                  tab	equ	9
 20973                                  
 20974                                  multMULT	   equ	4Ah
 20975                                  multMULTGETHMAPTR  equ	1
 20976                                  multMULTALLOCHMA   equ	2
 20977                                  
 20978                                  ;NOEXEC    equ	FALSE
 20979                                  
 20980                                  stacksw    equ	true	;include switchable hardware stacks
 20981                                  mycds_size equ	88	;size of curdir_list. if it is not
 20982                                  			;the same, then will generate compile error.
 20983                                  
 20984                                  entrysize   equ     8
 20985                                  
 20986                                  mincount    equ     8
 20987                                  defaultcount equ    9
 20988                                  maxcount    equ     64
 20989                                  
 20990                                  minsize     equ     32
 20991                                  defaultsize equ     128
 20992                                  maxsize     equ     512
 20993                                  
 20994                                  ;%define allocbyte  byte [es:bp+0]
 20995                                  ;%define intlevel   byte [es:bp+1]
 20996                                  ;%define savedsp    word [es:bp+2]
 20997                                  ;%define savedss    word [es:bp+4]
 20998                                  ;%define newsp	    word [es:bp+6]
 20999                                  
 21000                                  allocbyte   equ     0
 21001                                  intlevel    equ     1
 21002                                  savedsp     equ     2
 21003                                  savedss     equ     4
 21004                                  newsp       equ     6
 21005                                  
 21006                                  free	    equ     0
 21007                                  allocated   equ     1
 21008                                  overflowed  equ     2
 21009                                  clobbered   equ     3
 21010                                  
 21011                                  ;---------------------------------------
 21012                                  ; external variable defined in ibmbio module for multi-track
 21013                                  
 21014                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 21015                                  			  ; it on after handling config.sys file as a
 21016                                  			  ; default value,if multrk_flag = multrk_off1.
 21017                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 21018                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 21019                                  
 21020                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 21021                                  
 21022                                  SYSINIT$:
 21023                                  	;IF	STACKSW 
 21024                                  	; include MSSTACK.INC	;Main stack program and data definitions
 21025                                  	; include STKMES.INC	;Fatal stack error message
 21026                                  	;   public Endstackcode
 21027                                  ;Endstackcode	label byte
 21028                                  	;ENDIF
 21029                                  
 21030                                  ; 05/07/2018
 21031                                  ; ----------------------------------------------------------------------
 21032                                  ; 04/06/2018 - Retro DOS v3.0
 21033                                  
 21034                                  ; ----------------------------------------------------------------------
 21035                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 21036                                  ; ----------------------------------------------------------------------
 21037                                  
 21038                                  ;	MSStack.inc
 21039                                  ;
 21040                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 21041                                  ;	should follow the standard Interrupt Sharing Scheme which has
 21042                                  ;	a standard header structure.
 21043                                  ;	Fyi, the following shows the relations between
 21044                                  ;	the interrupt vector and interrupt level.
 21045                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 21046                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 21047                                  ;	MSSTACK module modifies the following interrupt vectors
 21048                                  ;	to meet the standard Interrupt Sharing standard;
 21049                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 21050                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 21051                                  ;	should be initialized to indicat whether this interrupt handler is
 21052                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 21053                                  ;	program header is initialized in STKINIT.INC module.
 21054                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 21055                                  ;
 21056                                  
 21057                                  ;  User specifies the number of stack elements - default = 9
 21058                                  ;						 minimum = 8
 21059                                  ;						 maximum = 64
 21060                                  ;
 21061                                  ;  Intercepts Asynchronous Hardware Interrupts only
 21062                                  ;
 21063                                  ;  Picks a stack from pool of stacks and switches to it
 21064                                  ;
 21065                                  ;  Calls the previously saved interrupt vector after pushing flags
 21066                                  ;
 21067                                  ;  On return, returns the stack to the stack pool
 21068                                  ;
 21069                                  
 21070                                  ; This is a modification of STACKS:
 21071                                  ; 1. To fix a bug which was causing the program to take up too much space.
 21072                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 21073                                  ;    . Clobbers the stack that got too big instead of innocent stack
 21074                                  ;    . Allows system to work if the only stack that got too big was the most
 21075                                  ;      deeply nested one
 21076                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 21077                                  ; 4. Does not intercept any interrupts on a PCjr.
 21078                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 21079                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 21080                                  
 21081                                  		;EVEN
 21082                                  ;align 2
 21083                                  		; 21/10/2022
 21084                                  
 21085 00000000 0000                    		dw	0	; spare field but leave these in order
 21086 00000002 0000                    stackcount:	dw	0
 21087 00000004 0000                    stackat: 	dw	0
 21088 00000006 0000                    stacksize:	dw	0
 21089 00000008 0000                    stacks:		dw	0
 21090 0000000A 0000                    		dw	0
 21091                                  
 21092 0000000C [0800]                  firstentry:	dw	stacks
 21093 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21094 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21095                                  
 21096                                  ;***********************************************************************
 21097                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 21098                                  
 21099                                  ; ----------------------------------------------------------------------
 21100                                  
 21101 00000012 00000000                old02:	dd	0
 21102                                  
 21103                                  int02:
 21104                                  
 21105                                  ; *********************************************************************
 21106                                  ;
 21107                                  ; this is special support for the pc convertible / nmi handler
 21108                                  ;
 21109                                  ;	on the pc convertible, there is a situation where an nmi can be 
 21110                                  ;	caused by using the "out" instructions to certain ports. when this
 21111                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 21112                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 21113                                  ;	includes other type of interrupts (hardware and software), and
 21114                                  ;	also includes other type of nmi's. when any nmi has occured,
 21115                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 21116                                  ;	the software takes specific steps to allow further interrupting.
 21117                                  ;
 21118                                  ;	for pc convertible, the situation where the nmi is generated by the
 21119                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 21120                                  ;	otherwords, it is actually a "restartable exception". in this
 21121                                  ;	case, the software handler must be able to get to the stack in
 21122                                  ;	order to figure out what instruction caused the problem, where
 21123                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 21124                                  ;	we will not switch stacks in this situation. this situation is
 21125                                  ;	detected by interrogating port 62h, and checking for a bit value
 21126                                  ;	of 80h. if set, *****do not switch stacks*****.
 21127                                  ;
 21128                                  ; *********************************************************************
 21129                                  
 21130 00000016 50                      	push	ax
 21131 00000017 06                      	push	es
 21132 00000018 B800F0                  	mov	ax,0F000h
 21133 0000001B 8EC0                    	mov	es,ax
 21134                                  	; 02/11/2022
 21135 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 21136 00000023 07                      	pop	es
 21137 00000024 750C                    	jne	short normal02
 21138                                  
 21139 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 21140                                  				; 0-3: values of DIP switches
 21141                                  				; 5: 1=Timer 2 channel out
 21142                                  				; 6: 1=I/O channel check
 21143                                  				; 7: 1=RAM parity check error occurred.
 21144 00000028 A880                    	test	al,80h
 21145 0000002A 7406                    	jz	short normal02
 21146                                  special02:
 21147 0000002C 58                      	pop	ax
 21148 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 21149                                  normal02:
 21150 00000032 58                      	pop	ax
 21151 00000033 E81101                  	call	do_int_stacks
 21152 00000036 [1200]                  	dw	old02
 21153                                  
 21154                                  ; ----------------------------------------------------------------------
 21155                                  
 21156 00000038 00000000                old08:	dd	0
 21157                                  
 21158                                  int08:
 21159 0000003C E80801                  	call	do_int_stacks
 21160 0000003F [3800]                  	dw	old08
 21161                                  
 21162                                  ; ----------------------------------------------------------------------
 21163                                  
 21164 00000041 00000000                old09:	dd	0
 21165                                  
 21166                                  int09:
 21167                                  
 21168                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 21169                                  ; as its first instruction for compatibility reasons
 21170                                  
 21171 00000045 EB02                    	jmp	short keyboard_lbl
 21172 00000047 90                      	nop
 21173 00000048 00                      	db	0
 21174                                  
 21175                                  keyboard_lbl:
 21176 00000049 E8FB00                  	call	do_int_stacks
 21177 0000004C [4100]                  	dw	old09
 21178                                  
 21179                                  ; ----------------------------------------------------------------------
 21180                                  
 21181 0000004E 00000000                old70:	dd	0
 21182                                  
 21183                                  int70:
 21184 00000052 E8F200                  	call	do_int_stacks
 21185 00000055 [4E00]                  	dw	old70
 21186                                  
 21187                                  ; ----------------------------------------------------------------------
 21188                                  
 21189                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 21190                                  ;public	int&a
 21191                                  ;public	old&a
 21192                                  ;public	firstflag&a
 21193                                  ;int&a	proc	far
 21194                                  ;	jmp	short entry_int&a&_stk
 21195                                  ;old&a	dd	  0		;forward pointer
 21196                                  ;	dw	  424bh 	;compatible signature for int. sharing
 21197                                  ;firstflag&a db   0		;the firstly hooked.
 21198                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 21199                                  ;	db	7 dup (0)	;reserved for future.
 21200                                  ;entry_int&a&_stk:
 21201                                  ;	call	do_int_stacks
 21202                                  ;	dw	old&a
 21203                                  ;intret_&a:
 21204                                  ;	iret
 21205                                  ;int&a	endp
 21206                                  ;	endm
 21207                                  
 21208                                  ; ----------------------------------------------------------------------
 21209                                  
 21210                                  int0A:
 21211 00000057 EB10                    	jmp	short entry_int0A_stk
 21212 00000059 00000000                old0A:	dd	0	
 21213 0000005D 4B42                    	dw	424Bh
 21214                                  firstflag0A:
 21215 0000005F 00                      	db	0
 21216 00000060 EB0C                    	jmp	short intret_0A
 21217 00000062 00<rep 7h>              	times	7 db 0
 21218                                  
 21219                                  entry_int0A_stk:
 21220 00000069 E8DB00                  	call	do_int_stacks
 21221 0000006C [5900]                  	dw	old0A
 21222                                  intret_0A:
 21223 0000006E CF                      	iret
 21224                                  
 21225                                  ; ----------------------------------------------------------------------
 21226                                  
 21227                                  int0B:
 21228 0000006F EB10                    	jmp	short entry_int0B_stk
 21229 00000071 00000000                old0B:	dd	0	
 21230 00000075 4B42                    	dw	424Bh
 21231                                  firstflag0B:
 21232 00000077 00                      	db	0
 21233 00000078 EB0C                    	jmp	short intret_0B
 21234 0000007A 00<rep 7h>              	times	7 db 0
 21235                                  
 21236                                  entry_int0B_stk:
 21237 00000081 E8C300                  	call	do_int_stacks
 21238 00000084 [7100]                  	dw	old0B
 21239                                  intret_0B:
 21240 00000086 CF                      	iret
 21241                                  
 21242                                  ; ----------------------------------------------------------------------
 21243                                  
 21244                                  int0C:
 21245 00000087 EB10                    	jmp	short entry_int0C_stk
 21246 00000089 00000000                old0C:	dd	0	
 21247 0000008D 4B42                    	dw	424Bh
 21248                                  firstflag0C:
 21249 0000008F 00                      	db	0
 21250 00000090 EB0C                    	jmp	short intret_0C
 21251 00000092 00<rep 7h>              	times	7 db 0
 21252                                  
 21253                                  entry_int0C_stk:
 21254 00000099 E8AB00                  	call	do_int_stacks
 21255 0000009C [8900]                  	dw	old0C
 21256                                  intret_0C:
 21257 0000009E CF                      	iret
 21258                                  
 21259                                  ; ----------------------------------------------------------------------
 21260                                  
 21261                                  int0D:
 21262 0000009F EB10                    	jmp	short entry_int0D_stk
 21263 000000A1 00000000                old0D:	dd	0	
 21264 000000A5 4B42                    	dw	424Bh
 21265                                  firstflag0D:
 21266 000000A7 00                      	db	0
 21267 000000A8 EB0C                    	jmp	short intret_0D
 21268 000000AA 00<rep 7h>              	times	7 db 0
 21269                                  
 21270                                  entry_int0D_stk:
 21271 000000B1 E89300                  	call	do_int_stacks
 21272 000000B4 [A100]                  	dw	old0D
 21273                                  intret_0D:
 21274 000000B6 CF                      	iret
 21275                                  
 21276                                  ; ----------------------------------------------------------------------
 21277                                  
 21278                                  int0E:
 21279 000000B7 EB10                    	jmp	short entry_int0E_stk
 21280 000000B9 00000000                old0E:	dd	0	
 21281 000000BD 4B42                    	dw	424Bh
 21282                                  firstflag0E:
 21283 000000BF 00                      	db	0
 21284 000000C0 EB0C                    	jmp	short intret_0E
 21285 000000C2 00<rep 7h>              	times	7 db 0
 21286                                  
 21287                                  entry_int0E_stk:
 21288 000000C9 E87B00                  	call	do_int_stacks
 21289 000000CC [B900]                  	dw	old0E
 21290                                  intret_0E:
 21291 000000CE CF                      	iret
 21292                                  
 21293                                  ; ----------------------------------------------------------------------
 21294                                  
 21295                                  int72:
 21296 000000CF EB10                    	jmp	short entry_int72_stk
 21297 000000D1 00000000                old72:	dd	0	
 21298 000000D5 4B42                    	dw	424Bh
 21299                                  firstflag72:
 21300 000000D7 00                      	db	0
 21301 000000D8 EB0C                    	jmp	short intret_72
 21302 000000DA 00<rep 7h>              	times	7 db 0
 21303                                  
 21304                                  entry_int72_stk:
 21305 000000E1 E86300                  	call	do_int_stacks
 21306 000000E4 [D100]                  	dw	old72
 21307                                  intret_72:
 21308 000000E6 CF                      	iret
 21309                                  
 21310                                  ; ----------------------------------------------------------------------
 21311                                  
 21312                                  int73:
 21313 000000E7 EB10                    	jmp	short entry_int73_stk
 21314 000000E9 00000000                old73:	dd	0	
 21315 000000ED 4B42                    	dw	424Bh
 21316                                  firstflag73:
 21317 000000EF 00                      	db	0
 21318 000000F0 EB0C                    	jmp	short intret_73
 21319 000000F2 00<rep 7h>              	times	7 db 0
 21320                                  
 21321                                  entry_int73_stk:
 21322 000000F9 E84B00                  	call	do_int_stacks
 21323 000000FC [E900]                  	dw	old73
 21324                                  intret_73:
 21325 000000FE CF                      	iret
 21326                                  
 21327                                  ; ----------------------------------------------------------------------
 21328                                  
 21329                                  int74:
 21330 000000FF EB10                    	jmp	short entry_int74_stk
 21331 00000101 00000000                old74:	dd	0	
 21332 00000105 4B42                    	dw	424Bh
 21333                                  firstflag74:
 21334 00000107 00                      	db	0
 21335 00000108 EB0C                    	jmp	short intret_74
 21336 0000010A 00<rep 7h>              	times	7 db 0
 21337                                  
 21338                                  entry_int74_stk:
 21339 00000111 E83300                  	call	do_int_stacks
 21340 00000114 [0101]                  	dw	old74
 21341                                  intret_74:
 21342 00000116 CF                      	iret
 21343                                  
 21344                                  ; ----------------------------------------------------------------------
 21345                                  
 21346                                  int76:
 21347 00000117 EB10                    	jmp	short entry_int76_stk
 21348 00000119 00000000                old76:	dd	0	
 21349 0000011D 4B42                    	dw	424Bh
 21350                                  firstflag76:
 21351 0000011F 00                      	db	0
 21352 00000120 EB0C                    	jmp	short intret_76
 21353 00000122 00<rep 7h>              	times	7 db 0
 21354                                  
 21355                                  entry_int76_stk:
 21356 00000129 E81B00                  	call	do_int_stacks
 21357 0000012C [1901]                  	dw	old76
 21358                                  intret_76:
 21359 0000012E CF                      	iret
 21360                                  
 21361                                  ; ----------------------------------------------------------------------
 21362                                  
 21363                                  int77:
 21364 0000012F EB10                    	jmp	short entry_int77_stk
 21365 00000131 00000000                old77:	dd	0	
 21366 00000135 4B42                    	dw	424Bh
 21367                                  firstflag77:
 21368 00000137 00                      	db	0
 21369 00000138 EB0C                    	jmp	short intret_77
 21370 0000013A 00<rep 7h>              	times	7 db 0
 21371                                  
 21372                                  entry_int77_stk:
 21373 00000141 E80300                  	call	do_int_stacks
 21374 00000144 [3101]                  	dw	old77
 21375                                  intret_77:
 21376 00000146 CF                      	iret
 21377                                  
 21378                                  ; ----------------------------------------------------------------------
 21379                                  
 21380                                  ;********************************************************************
 21381                                  ;common routines
 21382                                  ;********************************************************************
 21383                                  
 21384                                  ; do interrupt stack switching. the fake return address holds
 21385                                  ; a pointer to the far-pointer of the actual interrupt
 21386                                  ; service routine
 21387                                  
 21388                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 21389                                  ; 21/03/2019 - Retro DOS v4.0
 21390                                  
 21391                                  ;allocbyte   equ 0
 21392                                  ;intlevel    equ 1
 21393                                  ;savedsp     equ 2
 21394                                  ;savedss     equ 4
 21395                                  ;newsp       equ 6
 21396                                  
 21397                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 21398                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 21399                                  
 21400                                  do_int_stacks:
 21401 00000147 50                      	push	ax
 21402 00000148 55                      	push	bp
 21403 00000149 06                      	push	es
 21404 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 21405 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 21406 00000154 B001                    	mov	al,allocated ; 1
 21407                                  	; 21/10/2022
 21408                                  	;xchg	[es:bp+allocbyte],al 
 21409                                  	; 11/12/2022
 21410 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 21411 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 21412 0000015C 7551                    	jne	short notfree02
 21413                                  
 21414 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 21415                                  
 21416                                  found02:
 21417 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 21418 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 21419                                  
 21420 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 21421                                  
 21422 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 21423                                  	; 21/10/2022
 21424                                  	;mov	bp,[es:bp+6]
 21425                                  	; 11/12/2022
 21426                                  	;cmp	[es:bp+0],ax	
 21427 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 21428 00000176 7544                    	jne	short foundbad02
 21429                                  
 21430                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 21431 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 21432 0000017A 8EC5                    	mov	es,bp
 21433 0000017C 89E5                    	mov	bp,sp
 21434 0000017E 8B6E06                  	mov	bp,[bp+6]
 21435 00000181 8ED0                    	mov	ss,ax
 21436 00000183 8CC4                    	mov	sp,es
 21437 00000185 8EC0                    	mov	es,ax
 21438 00000187 2E8B6E00                	mov	bp,[cs:bp]
 21439                                  
 21440                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 21441                                  	;push    bp
 21442                                  	;mov     bp,sp
 21443                                  	;mov     ax,[bp+8]
 21444                                  	;pop     bp
 21445                                  	;push    es
 21446                                  	;pop     ss
 21447                                  	;mov     sp,bp
 21448                                  	;mov     bp,ax
 21449                                  	; 11/12/2022
 21450                                  	;;mov	bp,[cs:bp+0]	
 21451                                  	;mov	bp,[cs:bp]	
 21452                                  
 21453 0000018B 9C                      	pushf				; go execute the real interrupt handler
 21454                                  	; 11/12/2022
 21455 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 21456                                  	; 21/10/2022
 21457                                  	;call	far [cs:bp+0]
 21458                                  
 21459 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 21460                                  	; 11/12/2022
 21461 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 21462                                  	; 21/10/2022
 21463                                  	;mov	bp,[es:bp+0]
 21464 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 21465 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 21466                                  
 21467                                  	; 11/12/2022
 21468                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 21469                                  	; 21/10/2022
 21470 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 21471 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 21472                                  
 21473 000001A8 07                      	pop	es
 21474 000001A9 5D                      	pop	bp			; saved on entry
 21475 000001AA 58                      	pop	ax			; saved on entry
 21476 000001AB 83C402                  	add	sp,2
 21477 000001AE CF                      	iret				; done with this interrupt
 21478                                  
 21479                                  notfree02:
 21480 000001AF 3C01                    	cmp	al,allocated		; error flag
 21481 000001B1 7404                    	je	short findnext02	;  no, continue
 21482                                  	; 11/12/2022
 21483                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 21484                                  	; 21/10/2022
 21485 000001B3 26864600                	xchg	[es:bp],al
 21486                                  
 21487                                  findnext02:
 21488 000001B7 E81200                  	call	longpath
 21489 000001BA EBA8                    	jmp	short found02
 21490                                  
 21491                                  foundbad02:
 21492 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21493 000001C1 72F4                    	jc	short findnext02
 21494 000001C3 89C5                    	mov	bp,ax			; flag this entry
 21495                                  	; 11/12/2022
 21496                                  	;mov	byte [es:bp+allocbyte],clobbered
 21497                                  	; 21/10/2022
 21498 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 21499 000001CA EBEB                    	jmp	short findnext02	; keep looking
 21500                                  
 21501                                  ; ----------------------------------------------------------------------
 21502                                  
 21503                                  ; Common routines
 21504                                  
 21505                                  longpath:
 21506                                  	; 21/03/2019
 21507 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 21508                                  lploopp:
 21509                                  	; 11/12/2022
 21510                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 21511                                  	; 21/10/2022
 21512 000001D1 26807E0000              	cmp	byte [es:bp],free
 21513 000001D6 7512                    	jne	short inuse		;  no, try next one
 21514                                  
 21515 000001D8 B001                    	mov	al,allocated
 21516                                  	; 11/12/2022
 21517                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 21518                                  	; 21/10/2022
 21519 000001DA 26864600                	xchg	[es:bp],al
 21520 000001DE 3C00                    	cmp	al,free 		; is it still free?
 21521 000001E0 7414                    	je	short found		;  yes, go use it
 21522                                  
 21523 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 21524 000001E4 7404                    	je	short inuse		;  no, check the next one
 21525                                  
 21526                                  	; 11/12/2022
 21527                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 21528                                  	; 21/10/2022
 21529 000001E6 26884600                	mov	[es:bp],al
 21530                                  inuse:
 21531 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21532 000001EF 7406                    	je	short fatal
 21533 000001F1 83ED08                  	sub	bp,entrysize
 21534 000001F4 EBDB                    	jmp	short lploopp
 21535                                  found:
 21536 000001F6 C3                      	retn
 21537                                  fatal:
 21538 000001F7 1E                      	push	ds
 21539 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 21540 000001FB 8ED8                    	mov	ds,ax
 21541 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21542 00000202 1F                      	pop	ds
 21543 00000203 7504                    	jne	short skip_nmis
 21544                                  
 21545 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 21546 00000207 E672                    	out	72h,al
 21547                                  
 21548                                  skip_nmis:
 21549 00000209 FA                      	cli				; disable and mask
 21550 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 21551 0000020C E621                    	out	021h,al
 21552 0000020E E6A1                    	out	0A1h,al
 21553                                  
 21554 00000210 8CCE                    	mov	si,cs
 21555 00000212 8EDE                    	mov	ds,si
 21556 00000214 BE[3B02]                	mov	si,fatal_msg
 21557                                  ;SR;
 21558                                  ;   We set all foci to this VM to issue the stack failure message
 21559                                  ;
 21560 00000217 50                      	push	ax
 21561 00000218 1E                      	push	ds
 21562                                  	;;mov	ax,Bios_Data ; 0070h
 21563                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 21564                                  	; 21/10/2022
 21565 00000219 B87000                  	mov	ax,DOSBIODATASEG
 21566 0000021C 8ED8                    	mov	ds,ax
 21567                                  
 21568                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 21569 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 21570 00000223 1F                      	pop	ds
 21571 00000224 58                      	pop	ax
 21572 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 21573                                  
 21574                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 21575                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 21576                                  	; 21/10/2022
 21577 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 21578                                  ;
 21579                                  ;SR; We do not bother about the returned status of this call. 
 21580                                  ;
 21581                                  fatal_loop:
 21582 0000022C AC                      	lodsb
 21583 0000022D 3C24                    	cmp	al,'$'
 21584 0000022F 7408                    	je	short fatal_done
 21585                                  
 21586 00000231 B307                    	mov	bl,7
 21587 00000233 B40E                    	mov	ah,14
 21588 00000235 CD10                    	int	10h			; whoops, this enables ints
 21589 00000237 EBF3                    	jmp	short fatal_loop
 21590                                  
 21591                                  fatal_done:
 21592 00000239 EBFE                    	jmp	short fatal_done
 21593                                  
 21594                                  
 21595                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 21596                                  ; ----------------------------------------------------------------------
 21597                                  ;	include msbio.cl5		; fatal stack error message
 21598                                  
 21599                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 21600                                  
 21601                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 21602                                  ; ----------------------------------------------------------------------
 21603                                  ; 04/06/2018 - Retro DOS v3.0
 21604                                  
 21605                                  fatal_msg:
 21606 0000023B 0D0A                    	db	0Dh,0Ah
 21607 0000023D 070D0A                  	db	7,0Dh,0Ah
 21608 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 21608 00000249 737461636B206F7665-
 21608 00000252 72666C6F770D0A     
 21609 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 21609 00000262 6C7465640D0A24     
 21610                                  
 21611                                  endstackcode:
 21612                                  
 21613                                  ; ----------------------------------------------------------------------
 21614                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 21615                                  ; ----------------------------------------------------------------------
 21616                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 21617                                  
 21618                                  ; 22/03/2019 - Retro DOS v4.0
 21619                                  
 21620                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 21621                                  
 21622                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 21623                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 21624                                  
 21625                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21626                                  ; ----------------------------------------------------------------------
 21627                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 21628                                  
 21629                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 21630                                  
 21631                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21632                                  ; ----------------------------------------------------------------------
 21633                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 21634                                  
 21635                                  SYSINIT:	
 21636 00000269 E9A601                          JMP	GOINIT
 21637                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 21638                                  
 21639                                  ; ----------------------------------------------------------------------
 21640                                  
 21641                                  struc DDHighInfo
 21642 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 21643 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 21644 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 21645                                  endstruc
 21646                                  
 21647                                  ; 22/03/2019 - Retro DOS v4.0
 21648                                  
 21649 0000026C 00                      runhigh: db	0
 21650                                  
 21651                                  ; 02/11/2022
 21652                                  ;align 4
 21653                                  
 21654                                  DOSINFO: 
 21655 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 21656                                  ;MSDOS:
 21657                                  dos_temp_location: ; dword ; MSDOS 6.0
 21658                                  dosinit:		; MSDOS 6.0
 21659 00000271 0000                    	dw	0
 21660                                  
 21661                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21662                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 21663                                  ;	dw	0
 21664                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 21665                                  
 21666                                  CURRENT_DOS_LOCATION:
 21667 00000273 0000                    	dw	0
 21668                                  
 21669                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 21670                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 21671                                  
 21672                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21673                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 21674                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 21675                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21676                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 21677                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 21678                                  
 21679                                  DEVICE_LIST:
 21680 00000275 00000000                	dd	0
 21681                                  
 21682                                  ; 04/06/2018 - Retro DOS v3.0
 21683                                  ; 28/03/2018
 21684                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 21685                                  ;
 21686                                  sysi_country:	
 21687 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 21688                                  
 21689                                  ; MSDOS 6.0
 21690 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 21691                                  
 21692                                  ;lo_doscod_size: dw	0	; dos code size when in low mem
 21693                                  ;hi_doscod_size: dw	0	; dos code size when in HMA
 21694                                  ; 08/03/2025 (MiniDOS)
 21695 00000281 0000                    dos_code_size:	dw	0
 21696                                  
 21697 00000283 0000                    def_php:	dw	0
 21698                                  
 21699                                  ; M022--
 21700                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 21701                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 21702                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 21703                                  ;  the new home.
 21704                                  
 21705                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 21706                                  ; 21/10/2022
 21707                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 21708                                  
 21709                                  ; 22/10/2022
 21710                                  seg_reinit_ptr:	; label dword
 21711 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 21712                                  temp_bcode_seg:
 21713                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 21714                                  		; 22/10/2022
 21715 00000287 0203                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 21716                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21717                                  fake_floppy_drv:
 21718 00000289 00                      		db	0	; set to 1 if this machine
 21719                                  				; does not have any floppies!!!
 21720                                  
 21721                                  ; Internal Stack Parameters
 21722                                  
 21723 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 21724 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 21725 0000028E 00000000                stack_addr:	dd	0
 21726                                  
 21727                                  ; 05/06/2018 - Retro DOS v3.0
 21728                                  
 21729                                  ; various default values
 21730                                  
 21731 00000292 0100                    MEMORY_SIZE:	dw	1
 21732                                  
 21733                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 21734                                  
 21735 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 21736 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 21737 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 21738 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 21739 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 21740                                  
 21741 0000029D 08                      FILES:	db	8	; enough files for pipe
 21742 0000029E 04                      FCBS:	db	4	; performance for recycling
 21743 0000029F 00                      KEEP:	db	0	; keep original set
 21744 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 21745                                  
 21746                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 21747                                  ;;CONFBOT: dw	0
 21748                                  ;;ALLOCLIM: dw	0
 21749                                  ;CONFBOT: ; 02/11/2022
 21750                                  ;top_of_cdss: dw 0
 21751                                  
 21752                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 21753                                  ; (SYSINIT:02A3h)
 21754 000002A1 0000                    CONFBOT: dw	0
 21755 000002A3 0000                    ALLOCLIM: dw	0
 21756 000002A5 0000                    top_of_cdss: dw 0
 21757                                  
 21758                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 21759                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 21760                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 21761                                  
 21762 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 21763                                  
 21764                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 21765                                  %if 0
 21766                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21767                                  ; (SYSINIT:02A9h)
 21768                                  
 21769                                  command_line:
 21770                                  	db	2,0
 21771                                  	db	'P'
 21772                                  	db	0
 21773                                  	times	124 db 0 ; db 124 dup(0)
 21774                                  
 21775                                  %endif
 21776                                  
 21777                                  ; (SYSINIT:0329h)
 21778 000002AB 00                      ZERO:	db	0
 21779 000002AC 00                      sepchr:	db	0
 21780 000002AD 0000                    linecount: dw	0			; line count in config.sys
 21781 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 21782 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 21783                                  
 21784 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 21785 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 21786                                  
 21787 000002BB 0000                    buf_prev_off:	dw	0
 21788                                  
 21789                                          ;IF      NOT NOEXEC
 21790                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 21791                                          ;ENDIF
 21792                                  
 21793                                  ; 29/12/2023
 21794                                  ; 01/05/2018
 21795                                  COMEXE:
 21796 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 21797 000002BF [9447]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 21798 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21799                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21800 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 21801 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21802 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 21803 000002C9 0000                    		dw	0
 21804                                  
 21805                                  ; variables for install= command.
 21806                                  
 21807 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 21808                                  					;  indicating the pass number
 21809                                  					; 0 - do scan for DOS=HIGH/LOW
 21810                                  					; 1 - load device drivers
 21811                                  					; 2 - was to load IFS
 21812                                  					;      now it is unused
 21813                                  					; 3 - do install=
 21814                                  					; >3 - nop
 21815 000002CC 0000                    install_flag:	dw	0
 21816                                  
 21817                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 21818                                  has_installed	equ	00000010b	; sysinit_base installed.
 21819                                  
 21820 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 21821 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 21822 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 21823 000002D8 0000                    checksum:	dw	0		; used by sum_up
 21824                                  
 21825 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 21826 000002EE 00                      ldexec_line:	db	0		;# of parm characters
 21827 000002EF 20                      ldexec_start:	db	' '
 21828 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 21829                                  
 21830                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 21831                                  
 21832                                  instexe:
 21833 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 21834 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 21835 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21836                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21837 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 21838 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 21839 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 21840 0000034C 0000                    		dw	0
 21841                                  
 21842                                  ; variables for comment=
 21843                                  
 21844 0000034E 00                      com_level:	db	0		; level of " " in command line
 21845 0000034F 00                      cmmt:		db	0		; length of comment string token
 21846 00000350 00                      cmmt1:		db	0		; token
 21847 00000351 00                      cmmt2:		db	0		; token
 21848 00000352 00                      cmd_indicator:	db	0
 21849 00000353 00                      donotshownum:	db	0
 21850                                  
 21851 00000354 0000                    count:		dw	0
 21852 00000356 0000                    org_count:	dw	0
 21853 00000358 0000                    chrptr:		dw	0
 21854 0000035A 0000                    cntryfilehandle: dw	0
 21855 0000035C 0000                    old_area:	dw	0
 21856 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 21857                                  
 21858                                  bucketptr: ; label dword
 21859                                  bufptr:	   ; label dword		; leave this stuff in order!
 21860 00000360 0000                    memlo:	dw	0
 21861                                  prmblk:	   ; label word
 21862 00000362 0000                    memhi:	dw	0
 21863 00000364 0000                    ldoff:	dw	0
 21864 00000366 0000                    area:	dw	0
 21865                                  
 21866                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 21867 00000368 0000                    prev_memhi:	dw 0
 21868 0000036A 0000                    prev_alloclim:	dw 0
 21869 0000036C 00                      dosdata_umb:	db 0
 21870                                  
 21871                                  ; Following is the request packet used to call INIT routines for 
 21872                                  ; all device drivers. Some fields may be accessed individually in
 21873                                  ; the code, and hence have individual labels, but they should not
 21874                                  ; be separated.
 21875                                  
 21876 0000036D 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 21877                                  	;db	24			; was 22
 21878 0000036E 00                      	db	0
 21879 0000036F 00                      	db	0			; initialize code
 21880 00000370 0000                    	dw	0
 21881 00000372 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 21882                                  
 21883 0000037A 00                      unitcount:	db	0
 21884 0000037B 00000000                break_addr:	dd	0
 21885 0000037F 00000000                bpb_addr:	dd	0
 21886                                  drivenumber:	; 22/10/2022
 21887 00000383 00                      devdrivenum:	db	0 
 21888 00000384 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 21889                                  
 21890                                  ; end of request packet
 21891                                  
 21892                                  ;drivenumber:	db	0  ; 22/03/2019
 21893                                  
 21894                                  toomanydrivesflag:
 21895 00000386 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 21896 00000387 90                      align 2
 21897                                  
 21898                                  BCodeSeg:	; 21/10/2022
 21899 00000388 0203                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 21900                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21901                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 21902                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 21903                                  
 21904                                  ; 30/12/2022
 21905                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 21906                                  ;
 21907                                  ; Magicbackdoor: dd 0
 21908                                  ; NullBackdoor: 
 21909                                  ;		retf
 21910                                  
 21911                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21912                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21913                                  ; 19/04/2019
 21914                                  _timer_lw_:
 21915 0000038A 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 21916                                  
 21917                                  ; 29/12/2023 - Retro DOS v5.0
 21918                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 21919                                  
 21920 0000038C 00                      F5_key:	db 0
 21921 0000038D 00                      F8_key:	db 0
 21922                                  
 21923                                  ; 07/03/2025 (MiniDOS 1.0)
 21924                                  %if 0
 21925                                  MagicBackdoor:	dd 0
 21926                                  NullBackdoor:
 21927                                  		retf
 21928                                  %endif
 21929                                  
 21930                                  ;SR;
 21931                                  ; This is the communication block between the DOS and the BIOS. It starts at
 21932                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 21933                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 21934                                  ;is passed to DOS as part of the DOSINIT call.
 21935                                  ;
 21936                                  
 21937                                  BiosComBlock:
 21938                                  	;dd	Bios_Data:SysinitPresent 
 21939                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 21940 0000038E [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 21941                                  	;dw	KERNEL_SEGMENT ; 0070h
 21942                                  	; 21/10/2022
 21943 00000390 7000                    	dw	DOSBIODATASEG ; 0070h
 21944                                  
 21945                                  ;align 2
 21946                                  
 21947                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 21948                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 21949                                  tempstack:	
 21950 00000392 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 21951                                  
 21952                                  ; ----------------------------------------------------------------------------
 21953                                  
 21954                                  	; 29/12/2023 - Retro DOS v5.0
 21955                                  	; 22/10/2022 - Retro DOS v4.0
 21956                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 21957                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 21958                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 21959                                  	; 12/12/2023
 21960 00000412 0E                      	push	cs
 21961 00000413 1F                      	pop	ds
 21962                                  
 21963                                  	; 12/12/2022
 21964                                  	; 22/03/2019 - Retro DOS v4.0
 21965                                  	; 06/07/2018
 21966                                  	; 04/06/2018 - Retro DOS v3.0
 21967                                  ; before doing anything else, let's set the model byte
 21968 00000414 B4C0                    	mov	ah,0C0h 		; get system configuration
 21969 00000416 CD15                    	int	15h			; 
 21970 00000418 7214                    	jc	short no_rom_config
 21971                                  
 21972                                  	;cmp	ah,0			; double check
 21973                                  	;jne	short no_rom_config
 21974                                  	; 03/09/2023
 21975 0000041A 08E4                    	or	ah,ah
 21976 0000041C 7510                    	jnz	short no_rom_config
 21977                                  
 21978                                  	; 12/12/2023 ; *
 21979                                  	; ds = cs
 21980                                  
 21981 0000041E 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 21982                                  	;mov	[cs:sys_model_byte],al 
 21983 00000422 A2[B902]                	mov	[sys_model_byte],al ; *
 21984 00000425 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 21985                                  	;mov	[cs:sys_scnd_model_byte],al
 21986 00000429 A2[BA02]                	mov	[sys_scnd_model_byte],al ; *
 21987                                  	;jmp	short SYSIN
 21988                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21989 0000042C EB29                    	jmp	short move_myself
 21990                                  
 21991                                  no_rom_config:				; Old ROM
 21992                                  	; 12/12/2023
 21993                                  	;mov	ax,0F000h
 21994                                  	;mov	ds,ax
 21995                                  	;mov	al,[0FFFEh]
 21996                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 21997                                  	; 12/12/2023
 21998                                  	; ds = cs
 21999 0000042E B800F0                  	mov	ax,0F000h
 22000 00000431 8EC0                    	mov	es,ax
 22001 00000433 26A0FEFF                	mov	al,[es:0FFFEh]
 22002 00000437 A2[B902]                	mov	[sys_model_byte],al	; set the model byte.
 22003                                  	
 22004                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 22005                                  ; execute the equipment determination interrupt and then
 22006                                  ; check the returned value to see if we have any floppy drives
 22007                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 22008                                  ; see the at tech ref bios listings for help on the equipment
 22009                                  ; flag interrupt (11h)	
 22010                                  
 22011                                  	; 22/10/2022
 22012                                  ;check_for_fake_floppy:			; entry point for rom_config above
 22013 0000043A CD11                    	int	11h			; check equipment flag
 22014                                  
 22015                                  	; 29/12/2023 - Retro DOS v5.0
 22016                                  	;jmp	short check_for_fake_floppy
 22017                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 22018                                  	;db	52h	; 'RPS' sign
 22019                                  	;db	50h
 22020                                  	;db	53h
 22021                                  
 22022                                  check_for_fake_floppy:
 22023                                  	; 29/12/2023
 22024                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 22025                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 22026                                  	;			; by using 'RPS' sign position)
 22027                                  	;			;		 03/07/2023 - Erdogan Tan
 22028                                  	;test	ax, 1		; have any floppies?
 22029                                  
 22030                                  	; 12/12/2022
 22031 0000043C A801                    	test	al,1		
 22032                                  	;test	ax,1			; have any floppies?
 22033 0000043E 7517                    	jnz	short move_myself	; yes,normal system
 22034                                  
 22035                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 22036                                  ; whether it is an old ROM BIOS or a new one
 22037                                  ;
 22038                                  ; WARNING !!!
 22039                                  ;
 22040                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 22041                                  ; here will require an equivalent modification in MSINIT.ASM also
 22042                                  
 22043                                  	; 12/12/2023
 22044                                  	;push	es  ; not necessary
 22045                                  
 22046 00000440 30C9                    	xor	cl,cl	
 22047 00000442 B408                    	mov	ah,8			; get disk parameters
 22048 00000444 B200                    	mov	dl,0			; of drive 0
 22049 00000446 CD13                    	int	13h
 22050                                  
 22051                                  	;pop	es  ; 12/12/2023	
 22052                                  
 22053 00000448 720D                    	jc	short move_myself	; if error lets assume that the
 22054                                  					;  ROM BIOS lied
 22055                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 22056                                  	;je	short move_myself
 22057                                  	; 03/09/2023
 22058 0000044A 08C9                    	or	cl,cl
 22059 0000044C 7409                    	jz	short move_myself
 22060                                  
 22061 0000044E 08D2                    	or	dl,dl			; number of flp drvs == 0?
 22062 00000450 7505                    	jnz	short move_myself	; no
 22063                                  
 22064                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 22065                                  	; 12/12/2023
 22066                                  	; ds = cs
 22067 00000452 C606[8902]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 22068                                  
 22069                                  move_myself:
 22070                                  	; 12/12/2023
 22071                                  	;cld	; not necessary		; set up move
 22072                                  	;xor	si,si
 22073                                  	;mov	di,si
 22074                                  
 22075                                  	; 12/12/2023
 22076                                  	; ds = cs
 22077                                  	; 12/12/2022
 22078                                  	;push	cs
 22079                                  	;pop	ds
 22080                                  
 22081                                  	;mov	cx,[cs:MEMORY_SIZE]
 22082 00000457 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 22083                                  
 22084                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22085                                  ;;;	if	msver
 22086                                  ;	cmp	cx,1		; 1 means do scan
 22087                                  ;	jnz	short noscan
 22088                                  ;	mov	cx,2048		; start scanning at 32k boundary
 22089                                  ;	xor	bx,bx
 22090                                  ;
 22091                                  ;memscan:inc	cx
 22092                                  ;	jz	short setend
 22093                                  ;	mov	ds,cx
 22094                                  ;	mov	al,[bx]
 22095                                  ;	not	al
 22096                                  ;	mov	[bx],al
 22097                                  ;	cmp	al,[bx]
 22098                                  ;	not	al
 22099                                  ;	mov	[bx],al
 22100                                  ;	jz	short memscan
 22101                                  ;setend:
 22102                                  ;	mov	cs:[memory_size],cx
 22103                                  ;;;	endif
 22104                                  
 22105                                  ;noscan: 				; cx is mem size in para
 22106                                  ;;
 22107                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 22108                                  ;;		  before we try to run.
 22109                                  ;;	       b) in any case, we should check for sufficient memory and give
 22110                                  ;;		  an appropriate error diagnostic if there isn't enough
 22111                                  ;
 22112                                  ;	push	cs
 22113                                  ;	pop	ds
 22114                                  ;
 22115                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 22116                                  ;;	  that way it would be easier to slide them down home in a minimal
 22117                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 22118                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 22119                                  ;;	  temporary home and the final one.  the problem with doing that
 22120                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 22121                                  ;
 22122                                  ;	dec	cx			; one para for an arena at end of mem
 22123                                  ;					; in case of UMBs
 22124                                  
 22125                                  	; 22/10/2022
 22126                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 22127                                  
 22128                                  	; 12/12/2022
 22129                                  	;push	cs
 22130                                  	;pop	ds
 22131                                  
 22132 0000045B 49                      	dec	cx
 22133                                  
 22134                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 22135                                  
 22136 0000045C 31DB                    	xor	bx,bx
 22137 0000045E 8EC3                    	mov	es,bx
 22138                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 22139                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 22140                                  	; 29/09/2023
 22141 00000460 26C41EBC00              	les	bx,[es:(2Fh*4)]
 22142 00000465 26817F035250            	cmp	word [es:bx+3],'RP'
 22143 0000046B 751B                    	jne	short NoRPL
 22144 0000046D 26807F054C              	cmp	byte [es:bx+5],'L'
 22145 00000472 7514                    	jne	short NoRPL
 22146                                  
 22147 00000474 89CA                    	mov	dx,cx			; get TOM into DX
 22148 00000476 52                      	push	dx
 22149 00000477 B8064A                  	mov	ax,4A06h
 22150                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 22151 0000047A CD2F                    	int	2Fh			; Get new TOM from any RPL
 22152 0000047C 58                      	pop	ax
 22153 0000047D 89D1                    	mov	cx,dx
 22154 0000047F 39C2                    	cmp	dx,ax
 22155 00000481 7405                    	je	short NoRPL
 22156                                  	
 22157                                  	; 11/12/2022
 22158                                  	; ds = cs
 22159 00000483 8916[9402]              	mov	[RPLMemTop],dx
 22160                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22161                                  	;mov	[cs:RPLMemTop],dx
 22162                                  	
 22163 00000487 49                      	dec	cx
 22164                                  NoRPL:
 22165 00000488 B8[F04F]                	mov	ax,SI_end		; need this much room for sysinit
 22166                                  					; (SI_end == sysinit code size)
 22167                                  					; 03/09/2023
 22168                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 22169                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 22170 0000048B E8F807                  	call	off_to_para
 22171 0000048E 29C1                    	sub	cx,ax
 22172                                  
 22173                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 22174                                  ; code above sysinit in memory
 22175                                  ;
 22176 00000490 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 22177                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 22178                                  
 22179 00000494 B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 22180                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 22181                                  					; 03/09/2023
 22182                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 22183 00000497 E8EC07                  	call	off_to_para		; leave this much room for BIOS code
 22184 0000049A 29C1                    	sub	cx,ax
 22185 0000049C 8EC1                    	mov	es,cx			; segment where sysinit will be located
 22186                                  
 22187                                  	; 12/12/2023
 22188 0000049E FC                      	cld	; not necessary		; set up move
 22189 0000049F 31F6                    	xor	si,si
 22190 000004A1 89F7                    	mov	di,si
 22191                                  
 22192 000004A3 B9[F04F]                	mov	cx,SI_end		; (sysinit code size)
 22193 000004A6 D1E9                    	shr	cx,1			; divide by 2 to get words
 22194 000004A8 F3A5                    	rep	movsw			; relocate sysinit
 22195                                  
 22196 000004AA 06                      	push	es			; push relocated segment
 22197 000004AB B8[B004]                	mov	ax,SYSIN
 22198 000004AE 50                      	push	ax			; push relocated entry point
 22199                                  
 22200 000004AF CB                      	retf				; far jump to relocated sysinit
 22201                                  
 22202                                  ; =============== S U B R O U T I N E ========================================
 22203                                  
 22204                                  ; 30/12/2023
 22205                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 22206                                  %if 0
 22207                                  get_cpu_type:
 22208                                  	pushf
 22209                                  	push	bx
 22210                                  	xor	bx,bx
 22211                                  	xor	ax,ax
 22212                                  	push	ax
 22213                                  	popf
 22214                                  	pushf
 22215                                  	pop	ax
 22216                                  	and	ax,0F000h
 22217                                  	cmp	ax,0F000h
 22218                                  	jz	short cpu_8086
 22219                                  	mov	ax,0F000h
 22220                                  	push	ax
 22221                                  	popf
 22222                                  	pushf
 22223                                  	pop	ax
 22224                                  	and	ax,0F000h
 22225                                  	jz	short cpu_286
 22226                                  cpu_386:
 22227                                  	inc	bx
 22228                                  cpu_286:
 22229                                  	inc	bx
 22230                                  cpu_8086:
 22231                                  	mov	ax,bx
 22232                                  	pop	bx
 22233                                  	popf
 22234                                  	retn
 22235                                  %endif
 22236                                  
 22237                                  ; ----------------------------------------------------------------------------
 22238                                  
 22239                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 22240                                  
 22241                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 22242                                  	; (SYSINIT:0533h)
 22243                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22244                                  	; (SYSINIT:04BFh)
 22245                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 22246                                  	; (SYSINIT:04F3h)
 22247                                  SYSIN:
 22248                                  	; Retro DOS 5.0 - 30/12/2023
 22249                                  	; Retro DOS 4.0 - 22/03/2019
 22250                                  	; Retro DOS 2.0 - 25/02/2018
 22251                                  
 22252                                  	; 23/04/2019
 22253                                  	;;mov	ax,Bios_Data
 22254                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22255                                  	; 21/10/2022
 22256 000004B0 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22257 000004B3 8ED8                    	mov	ds,ax
 22258                                  
 22259                                  	; 30/12/2023 - Retro DOS v5.0
 22260                                  	;;;
 22261                                  	;push	es
 22262                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 22263                                  	;push	di
 22264                                  	
 22265                                  	;call	get_cpu_type	; determine if 386 system
 22266                                  	;
 22267                                  get_cpu_type:
 22268 000004B5 9C                      	pushf
 22269 000004B6 31C0                    	xor	ax,ax
 22270 000004B8 50                      	push	ax
 22271 000004B9 9D                      	popf
 22272 000004BA 9C                      	pushf
 22273 000004BB 58                      	pop	ax
 22274 000004BC 2500F0                  	and	ax,0F000h
 22275 000004BF 3D00F0                  	cmp	ax,0F000h
 22276 000004C2 740F                    	jz	short cpu_8086
 22277 000004C4 B800F0                  	mov	ax,0F000h
 22278 000004C7 50                      	push	ax
 22279 000004C8 9D                      	popf
 22280 000004C9 9C                      	pushf
 22281 000004CA 58                      	pop	ax
 22282 000004CB 2500F0                  	and	ax,0F000h
 22283 000004CE 7402                    	jz	short cpu_286
 22284                                  cpu_386:
 22285 000004D0 29C0                    	sub	ax,ax
 22286                                  cpu_286:
 22287 000004D2 40                      	inc	ax
 22288                                  cpu_8086:	; ax = 0
 22289                                  	; 30/12/2023 - Retro DOS v5.0
 22290 000004D3 2EA2[AB06]              	mov	[cs:cpu_type],al ; 07/04/2024
 22291 000004D7 9D                      	popf
 22292                                  	;
 22293                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 22294 000004D8 3C02                    	cmp	al,2
 22295 000004DA 7512                    	jnz     short not_386_system
 22296 000004DC FC                      	cld			; 80386
 22297 000004DD 1E                      	push	ds
 22298 000004DE 07                      	pop	es		; change A20 line on/off check code
 22299 000004DF BF[4D07]                	mov	di,cpu386_cmpsd
 22300 000004E2 B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 22301 000004E5 AB                      	stosw
 22302 000004E6 B800F3                  	mov	ax,0F300h	; repz  ; F3
 22303 000004E9 AB                      	stosw
 22304 000004EA B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 22305 000004ED AB                      	stosw
 22306                                  not_386_system:
 22307                                  	;pop	di
 22308                                  	;pop	ax
 22309                                  	;pop	es
 22310                                  	;;;
 22311                                  
 22312 000004EE 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 22313 000004F2 C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 22314                                  
 22315                                  ; first move the MSDOS.SYS image up to a harmless place 
 22316                                  ; on top of our new sysinitseg
 22317                                  
 22318                                  	; 22/10/2022
 22319 000004F7 B8[F04F]                	mov	ax,SI_end		; how big is sysinitseg?
 22320 000004FA E88907                  	call	off_to_para
 22321 000004FD 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 22322 000004FF 01C8                    	add	ax,cx
 22323 00000501 8EC0                    	mov	es,ax
 22324                                  	
 22325 00000503 31F6                    	xor	si,si
 22326 00000505 89F7                    	mov	di,si
 22327                                  
 22328 00000507 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 22329                                  
 22330                                  	;mov	ax,cs	
 22331                                  	;mov	ds,ax
 22332                                  
 22333                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 22334                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 22335                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 22336                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 22337                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 22338                                  
 22339                                  	; 22/10/2022
 22340 0000050C B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 22341                                  			     ; 03/09/2023
 22342                                  			     ; 5800h (PCDOS 7.1)
 22343 0000050F F3A5                    	rep     movsw
 22344 00000511 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 22345                                  
 22346                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 22347                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 22348                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 22349                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 22350                                  
 22351                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 22352                                  	;mov	ax,cs
 22353                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22354                                  	;mov	ds,ax
 22355                                  
 22356                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22357                                  
 22358                                  ;	; 24/04/2019 
 22359                                  ;;ifndef ROMDOS
 22360                                  ;	mov	ax,[es:3] 		; get offset of dos
 22361                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 22362                                  ;	mov	[dosinit],ax		; that's the entry point offset
 22363                                  ;	call	off_to_para		; subtract this much from segment
 22364                                  ;	; 23/04/2019
 22365                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 22366                                  ;	sub	[FINAL_DOS_LOCATION],ax
 22367                                  ;;else
 22368                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 22369                                  ;;
 22370                                  ;;endif ; ROMDOS
 22371                                  
 22372                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22373                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 22374                                  
 22375                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 22376                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 22377                                  
 22378                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22379                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22380                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22381                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 22382                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 22383 00000516 A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 22384                                  				; 30/12/2023
 22385                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 22386                                  				;  (IBMDOS.SYS, offset 3)
 22387                                  
 22388 00000519 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22389                                  	; 02/11/2022
 22390 0000051D E86607                  	call	off_to_para		; subtract this much from segment
 22391 00000520 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 22392                                  
 22393                                  	; Current DOSCODE start address = dword [dosinit]
 22394                                  
 22395                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 22396                                  ;; until it is determined whether it will be running in HIMEM or not.
 22397                                  
 22398                                  ;ifndef ROMDOS
 22399                                  
 22400                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 22401                                  
 22402                                  	; 22/10/2022
 22403 00000525 8CC0                    	mov	ax,es
 22404 00000527 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 22405 0000052A 8EC0                    	mov	es,ax
 22406 0000052C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 22407 00000531 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 22408                                  
 22409                                  	;mov	si,BCODE_START ; mov si,30h
 22410                                  	; 09/12/2022
 22411 00000533 BE[3000]                	mov	si,BCODESTART
 22412                                  	; 02/11/2022
 22413 00000536 89F7                    	mov	di,si
 22414                                  	; 30/12/2023
 22415                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 22416                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 22417                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 22418                                  	;sub	cx,si
 22419                                  	; 31/03/2024
 22420                                  	BCODESIZE equ BCODEEND-BCODESTART
 22421 00000538 B9401D                  	mov	cx,BCODESIZE
 22422 0000053B D1E9                    	shr	cx,1
 22423 0000053D F3A5                    	rep	movsw			; move Bios_Code into place
 22424                                  
 22425 0000053F 8CC0                    	mov	ax,es			; tell it what segment it's in
 22426 00000541 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 22427                                  
 22428                                  ;endif	; not ROMDOS
 22429                                  
 22430                                  ; now call dosinit while it's in its temporary home
 22431                                  
 22432                                  	;mov	ax,cs
 22433                                  	;mov	ds,ax	 
 22434                                  
 22435                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 22436                                  
 22437                                  	; 22/10/2022
 22438                                  
 22439 00000546 2EC43E[8E03]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 22440                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 22441 0000054B 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 22442                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 22443                                  
 22444 00000550 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 22445                                  
 22446 00000555 FA                      	cli
 22447 00000556 8CC8                    	mov	ax,cs
 22448 00000558 8ED0                    	mov	ss,ax
 22449                                  
 22450                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 22451                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 22452                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 22453                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 22454                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 22455                                  ;SYSINIT:0532h: 
 22456                                  
 22457                                  ; 22/10/2022
 22458                                  ; ----------------------------------------------------------------------------
 22459                                  ;SYSINIT:05A6h:
 22460                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 22461                                  
 22462                                  ; 03/09/2023
 22463                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 22464                                  
 22465                                  	;mov	sp,05A6h
 22466 0000055A BC5A05                  	mov     sp,locstack		; set stack
 22467                                  
 22468 0000055D FB                      	sti
 22469                                  
 22470                                  ;align 2
 22471                                  	; 30/03/2018
 22472                                  ;LOCSTACK:
 22473                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 22474                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 22475                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 22476                                  
 22477                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22478                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 22479                                  
 22480                                  ; This call to DOSINIT will relocate the DOS data from its present location
 22481                                  ; at the top of memory, to its final location in low memory just above the
 22482                                  ; BIOS data. It will then build important DOS data structures in low 
 22483                                  ; memory following the DOS data. It returns (among many other things) the
 22484                                  ; new starting address of free memory.
 22485                                  
 22486 0000055E 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 22487                                  			 ; es:di -> sysinitvars_ext
 22488                                  
 22489 00000563 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 22490                                  	
 22491                                  	; 11/12/2022
 22492                                  	; 22/03/2019
 22493 00000568 0E                      	push	cs
 22494 00000569 1F                      	pop	ds
 22495                                  	; 22/10/2022
 22496                                  	;mov	[hi_doscod_size],ax
 22497                                  	;mov	[lo_doscod_size],cx
 22498                                  	; 08/03/2025 (MiniDOS)
 22499 0000056A A3[8102]                	mov	[dos_code_size],ax
 22500 0000056D 8916[7D02]              	mov	[dos_segreinit],dx
 22501                                  	
 22502                                  	; 11/12/2022
 22503                                  	; ds = cs
 22504                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 22505                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 22506                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 22507                                  
 22508                                  	; 05/06/2018 - Retro DOS v3.0
 22509                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 22510                                  
 22511                                  	; 11/12/2022
 22512                                  	; ds = cs
 22513                                  	; 22/10/2022
 22514                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 22515 00000571 268B05                  	mov	ax,[es:di] ; 22/03/2019
 22516                                  	;mov	[cs:DOSINFO],ax
 22517 00000574 A3[6D02]                	mov	[DOSINFO],ax
 22518                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 22519 00000577 268B4502                	mov	ax,[es:di+2]
 22520                                  	;mov	[cs:DOSINFO+2],ax
 22521 0000057B A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 22522                                  
 22523                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 22524 0000057E 268B4504                	mov	ax,[es:di+4]
 22525                                  	;mov	[cs:sysi_country],ax
 22526 00000582 A3[7902]                	mov	[sysi_country],ax
 22527                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 22528 00000585 268B4506                	mov	ax,[es:di+6]
 22529                                  	;mov	[cs:sysi_country+2],ax
 22530 00000589 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 22531                                  
 22532                                  	; 20/04/2019
 22533                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 22534                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 22535                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 22536                                  	; 22/10/2022
 22537                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 22538                                  	;;;mov	[dos_segreinit+2],es
 22539                                  	;;mov	[dos_segreinit+2],ax
 22540                                  	;mov	[cs:dos_segreinit+2],ax
 22541                                  	; 11/12/2022
 22542                                  	; ds = cs
 22543 0000058C 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 22544 00000590 8C06[7F02]              	mov	[dos_segreinit+2],es
 22545                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22546                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 22547                                  	;mov	[cs:dos_segreinit+2],es
 22548                                  
 22549                                  ; ----------------------------------------------------------------------------
 22550                                  
 22551                                  ;SYSINIT:0577h:
 22552                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 22553                                  ;SYSINIT:05D1h:	; NoRPLArena 
 22554                                  
 22555                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 22556                                  ;------ Cover up RPL code with an arena
 22557                                  ;SYSINIT:05EBh:
 22558                                  	; 11/12/2022
 22559                                  	; ds = cs
 22560 00000594 31DB                    	xor	bx,bx
 22561 00000596 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 22562                                  	;cmp	word [RPLMemTop],0
 22563                                  	;;cmp	word [cs:RPLMemTop],0
 22564 0000059A 7450                    	je	short NoRPLArena
 22565                                  
 22566                                  ;------ alloc all memory
 22567                                  
 22568                                  	; 11/12/2022
 22569                                  	;mov	bx,0FFFFh
 22570 0000059C 4B                      	dec	bx
 22571                                  	; bx = 0FFFFh
 22572 0000059D B448                    	mov	ah,48h
 22573 0000059F CD21                    	int	21h
 22574                                  			; DOS - 2+ - ALLOCATE MEMORY
 22575                                  			; BX = number of 16-byte paragraphs desired
 22576 000005A1 B448                    	mov	ah,48h
 22577 000005A3 CD21                    	int	21h
 22578                                  
 22579 000005A5 8EC0                    	mov	es,ax			; get it into ES and save it
 22580 000005A7 06                      	push	es
 22581                                  
 22582                                  ;------ resize upto RPL mem
 22583                                  
 22584                                  	; 11/12/2022
 22585                                  	; ds = cs
 22586                                  	;sub	ax,[cs:RPLMemTop]
 22587 000005A8 2B06[9402]              	sub	ax,[RPLMemTop]
 22588 000005AC F7D8                    	neg	ax
 22589 000005AE 48                      	dec	ax
 22590 000005AF 89C3                    	mov	bx,ax
 22591 000005B1 B44A                    	mov	ah,4Ah
 22592 000005B3 CD21                    	int	21h
 22593                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 22594                                  			; ES = segment address of block to change
 22595                                  			; BX = new size in paragraphs
 22596                                  
 22597                                  ;------ allocate the free (RPL MEM)
 22598                                  
 22599 000005B5 BBFFFF                  	mov	bx,0FFFFh
 22600 000005B8 B448                    	mov	ah,48h
 22601 000005BA CD21                    	int	21h
 22602 000005BC B448                    	mov	ah,48h
 22603 000005BE CD21                    	int	21h
 22604                                  
 22605                                  ;----- mark that it belongs to RPL
 22606                                  
 22607 000005C0 48                      	dec	ax
 22608 000005C1 8EC0                    	mov	es,ax
 22609                                  	;mov	word [es:arena_owner],8
 22610 000005C3 26C70601000800          	mov	word [es:1],8
 22611                                  	;mov	word [es:arena_name],'RP'
 22612 000005CA 26C70608005250          	mov	word [es:8],'RP'
 22613                                  	;mov	word [es:arena_name+2],'L'
 22614 000005D1 26C7060A004C00          	mov	word [es:10],'L'
 22615                                  	;mov	word [es:arena_name+4],0
 22616 000005D8 26C7060C000000          	mov	word [es:12],0
 22617                                  	;mov	word [es:arena_name+6],0
 22618 000005DF 26C7060E000000          	mov	word [es:14],0	
 22619                                  
 22620 000005E6 07                              pop     es                      ; get back ptr to first block
 22621 000005E7 B449                            mov     ah,49h	; Dealloc	; and free it
 22622 000005E9 CD21                    	int	21h		
 22623                                  					; DOS - 2+ - FREE MEMORY
 22624                                  					; ES = segment address of area to be freed
 22625                                  	; 11/12/2022
 22626 000005EB F8                      	clc
 22627                                  
 22628                                  ; ----------------------------------------------------------------------------
 22629                                  
 22630                                  NoRPLArena:
 22631                                  	; 11/12/2022
 22632                                  	; ds = cs
 22633                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 22634 000005EC C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 22635                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 22636                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 22637                                  
 22638                                  	; 11/12/2022
 22639                                  	;clc				; get the extended memory size
 22640                                  
 22641                                  ;	execute the get extended memory size subfunction in the bios int 15h
 22642                                  ;	if the function reports an error do nothing else store the extended
 22643                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 22644                                  ;	currently pointed to by es:di. use the offsets specified in the
 22645                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 22646                                  
 22647 000005F0 B488                    	mov	ah,88h
 22648 000005F2 CD15                    	int	15h			; check extended memory size
 22649 000005F4 720B                    	jc	short no_ext_memory
 22650                                  			; Get Extended Memory Size
 22651                                  			; Return: CF clear on success
 22652                                  			; AX = size of memory above 1M in K	
 22653                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 22654                                  	; 22/10/2022
 22655 000005F6 26894545                	mov	[es:di+45h],ax ; save extended memory size
 22656 000005FA 09C0                    	or	ax,ax
 22657 000005FC 7403                    	jz	short no_ext_memory
 22658 000005FE E8E705                  	call	ClrVDISKHeader
 22659                                  no_ext_memory:
 22660                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 22661 00000601 268B4510                	mov	ax,[es:di+10h]
 22662                                  	;add	ax,bufinsiz
 22663                                  	; 30/12/2023 - Retro DOS v5.0
 22664                                  	;add	ax,20		; size of buffer header
 22665 00000605 83C018                  	add     ax,24		; bufinsiz
 22666                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 22667                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 22668                                  	; 11/12/2022
 22669                                  	; ds = cs
 22670 00000608 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 22671                                  	;mov	[cs:singlebuffersize],ax	
 22672                                  	; 11/12/2022
 22673 0000060B A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 22674                                  	;mov	al,[cs:DEFAULT_DRIVE]
 22675                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 22676 0000060E 26884543                	mov	[es:di+43h],al
 22677                                  
 22678                                  ; determine if 386 system...
 22679                                  
 22680                                  ; 30/12/2023
 22681                                  %if 0
 22682                                  	;get_cpu_type			; macro to determine cpu type
 22683                                  
 22684                                  get_cpu_type:
 22685                                  	; 11/12/2022
 22686                                  	pushf
 22687                                  	;push	bx
 22688                                  	;xor	bx,bx
 22689                                  	; 11/12/2022
 22690                                  	;xor	cx,cx
 22691                                  	;
 22692                                  	xor	ax,ax
 22693                                  	; ax = 0
 22694                                  	push    ax
 22695                                  	popf
 22696                                  	pushf
 22697                                  	pop	ax
 22698                                  	and	ax,0F000h
 22699                                  	;cmp	ax,0F000h
 22700                                  	cmp	ah,0F0h 
 22701                                  	je	short cpu_8086
 22702                                  	;mov	ax,0F000h
 22703                                  	mov	ah,0F0h
 22704                                  	; ax = 0F000h
 22705                                  	push	ax
 22706                                  	popf
 22707                                  	pushf
 22708                                  	pop	ax
 22709                                  	;and	ax,0F000h
 22710                                  	and	ah,0F0h
 22711                                  	jz	short cpu_286
 22712                                  cpu_386:
 22713                                  	; 11/12/2022
 22714                                  	;;inc	bx
 22715                                  	;inc	cx
 22716                                  	; 11/12/2022
 22717                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22718                                  	mov	byte [es:di+44h],1
 22719                                  
 22720                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 22721                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 22722                                  	;push	es
 22723                                  	;push	di
 22724                                  	;mov	ax,DOSBIODATASEG ; 0070h
 22725                                  	;mov	es,ax
 22726                                  	;cld
 22727                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 22728                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 22729                                  	;stosw
 22730                                  	;mov	ax,0F300h      ; repz  ; F3
 22731                                  	;stosw
 22732                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 22733                                  	;stosw
 22734                                  	;pop	di
 22735                                  	;pop	es
 22736                                  
 22737                                  cpu_286:
 22738                                  	;;;inc	bx
 22739                                  	;;inc	cx
 22740                                  cpu_8086:
 22741                                  	; 11/12/2022
 22742                                  	;;mov	ax,bx
 22743                                  	;pop	bx
 22744                                  	popf
 22745                                  %endif
 22746                                  	;...
 22747                                  
 22748                                  	; 11/12/2022
 22749                                  	;or	cl,cl
 22750                                  	;jz	short not_386_system
 22751                                  	; 11/12/202
 22752                                  	;cmp	cl,2
 22753                                  	;;cmp	ax,2			; is it a 386?
 22754                                  	;jne	short not_386_system	; no: don't mess with flag
 22755                                  
 22756                                  	; 30/12/2023 - Retro DOS v5.0
 22757 00000612 803E[AB06]02            	cmp	byte [cpu_type], 2	; is it a 386?
 22758 00000617 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 22759                                  	
 22760                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22761                                  	; 11/12/2022
 22762                                  	; 22/10/2022
 22763 00000619 26C6454401              	mov	byte [es:di+44h],1
 22764                                  _not_386_cpu:
 22765                                  	;mov	al,[es:di+SYSI_NUMIO]
 22766 0000061E 268A4520                	mov	al,[es:di+20h]
 22767                                  	; 11/12/2022
 22768                                  	; ds = cs
 22769 00000622 A2[8303]                	mov	[drivenumber],al	; save start of installable block drvs
 22770                                  	;mov	[cs:drivenumber],al
 22771                                  
 22772 00000625 8CC8                    	mov	ax,cs
 22773 00000627 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 22774                                  	; 11/12/2022
 22775                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 22776                                  	;;mov	cx,[cs:singlebuffersize]
 22777                                  	;shr	cx,1			
 22778                                  	;shr	cx,1			; divide size by 16...
 22779                                  	;shr	cx,1
 22780                                  	;shr	cx,1			; ...to get paragraphs...
 22781                                  	;inc	cx			; ... and round up
 22782                                  	; 11/12/2022
 22783 0000062A 8B1E[9B02]              	mov	bx,[singlebuffersize]
 22784 0000062E B104                    	mov	cl,4
 22785 00000630 D3EB                    	shr	bx,cl
 22786 00000632 43                      	inc	bx
 22787                                  
 22788                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 22789                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 22790                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 22791                                  ;	  it is probably safe to assume that the sector size always will be.
 22792                                  ;
 22793                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 22794                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 22795                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 22796                                  ;	  other code from ever causing a problem???
 22797                                  
 22798                                  	; 11/12/2022
 22799 00000633 29D8                    	sub	ax,bx
 22800                                  	;sub	ax,cx
 22801 00000635 A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 22802                                  	; 22/10/2022
 22803                                  	;mov	[cs:top_of_cdss],ax
 22804                                  
 22805                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 22806                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 22807                                  ;	for allocating memory for MagicDrv.
 22808                                  
 22809                                  	; 30/12/2023
 22810                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 22811                                  	;push	di
 22812                                  
 22813                                  	; 22/10/2022
 22814                                  ;	mov	cx,ax			; save pointer for buffer
 22815                                  ;
 22816                                  ;;	now allocate space for 26 CDSs
 22817                                  ;
 22818                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 22819                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22820                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22821                                  
 22822                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 22823                                  	; (SYSINIT:064Ch)
 22824 00000638 89C1                    	mov	cx,ax ; (*)
 22825 0000063A 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 22826 0000063D A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22827 00000640 A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22828                                  	 	
 22829                                  ; setup and initialize the temporary buffer at cx
 22830                                  
 22831                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 22832 00000643 26C47D12                	les	di,[es:di+12h]
 22833                                  	; 11/12/2022
 22834 00000647 31DB                    	xor	bx,bx
 22835                                  	;xor	ax,ax
 22836                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 22837                                  	;mov	word [es:di+4],0
 22838 00000649 26895D04                	mov	[es:di+4],bx ; 0
 22839                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 22840                                  	;mov	word [es:di],0
 22841 0000064D 26891D                  	mov	[es:di],bx ; 0
 22842                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 22843                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 22844                                  	;mov	[es:di+2],ax
 22845                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 22846                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 22847 00000650 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 22848 00000654 8EC1                    	mov	es,cx
 22849                                  
 22850                                  	; 11/12/2022
 22851                                  	;xor	ax,ax
 22852                                  	;mov	di,ax			; es:di -> single buffer
 22853 00000656 89DF                    	mov	di,bx
 22854                                  	; di = 0
 22855                                  
 22856                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 22857                                  	; 11/12/2022
 22858                                  	;mov	[es:di],ax ; 0
 22859 00000658 26891D                  	mov	[es:di],bx ; 0
 22860                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 22861                                  	; 11/12/2022
 22862                                  	;mov	[es:di+2],ax ; 0
 22863 0000065B 26895D02                	mov	[es:di+2],bx ; 0 
 22864                                  
 22865                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 22866                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 22867                                  
 22868                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 22869 0000065F 26C74504FF00            	mov	word [es:di+4],00FFh
 22870                                  ;SYSINIT:06E6h
 22871                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 22872                                  	;mov	word [es:di+6],0
 22873                                  	; 11/12/2022
 22874                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 22875 00000665 26895D06                	mov	[es:di+6],bx ; 0
 22876                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 22877                                  	;mov	word [es:di+8],0
 22878                                  	; 11/12/2022
 22879                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 22880 00000669 26895D08                	mov	[es:di+8],bx ; 0
 22881                                  
 22882                                  	; 30/12/2023 (!*)
 22883                                  	;pop	di			; restore pointer to DOSINFO data
 22884                                  	;pop	es
 22885                                  
 22886                                  	; 11/12/2022
 22887                                  	; ds = cs
 22888                                  	; 22/10/2022
 22889                                  	;push	cs
 22890                                  	;pop	ds
 22891                                  
 22892 0000066D E81F06                  	call	TempCDS			; set up cdss so re_init and sysinit
 22893                                  					;  can make disk system calls
 22894                                  					; tempcds trashes ds
 22895                                  	; 10/05/2019
 22896 00000670 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 22897                                  
 22898                                  	;if not ibmjapver
 22899                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 22900                                  	;endif
 22901                                  
 22902                                  	; 22/10/2022
 22903                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 22904                                  	; 30/12/2022
 22905                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 22906                                  	;call	far ptr 70h:89Bh
 22907 00000675 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 22908                                  
 22909 0000067A FB                      	sti				; ints ok
 22910 0000067B FC                      	cld				; make sure
 22911                                  
 22912                                  ; 23/03/2019
 22913                                  
 22914                                  ;SYSINIT:069Eh	; 30/12/2022
 22915                                  
 22916                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 22917                                  ; of the way by putting it just below sysinit at end of memory.
 22918                                  
 22919 0000067C 8CCB                    	mov	bx,cs
 22920 0000067E 83EB10                  	sub	bx,10h
 22921 00000681 8EC3                    	mov	es,bx
 22922 00000683 31F6                    	xor	si,si
 22923 00000685 89F7                    	mov	di,si
 22924 00000687 B98000                  	mov	cx,128
 22925 0000068A F3A5                    	rep	movsw
 22926                                  
 22927                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 22928                                  	; 22/10/2022
 22929 0000068C 268C063600              	mov	[es:36h],es
 22930                                  
 22931                                   	; Set Process Data Block - Program Segment Prefix address
 22932                                  	; BX = PDB/PSP segment
 22933 00000691 B450                            mov	ah,50h	; SET_CURRENT_PDB
 22934 00000693 CD21                    	int	21h			; tell DOS we moved it
 22935                                  			; DOS - 2+ internal - SET PSP SEGMENT
 22936                                  			; BX = segment address of new PSP
 22937                                  	; 22/10/2022
 22938                                  	; 27/03/2019
 22939                                  	; 30/12/2023
 22940                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 22941                                  
 22942 00000695 0E                      	push	cs	
 22943 00000696 1F                      	pop	ds
 22944                                  
 22945                                  	; set up temp. critical error handler
 22946 00000697 BA[5246]                	mov	dx,int24		; set up int 24 handler
 22947                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 22948                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 22949 0000069A B82425                  	mov	ax,2524h
 22950 0000069D CD21                    	int	21h
 22951                                  
 22952 0000069F 803E[8603]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 22953 000006A4 7406                            je      short no_err		   ;  N: continue            M029
 22954 000006A6 BA[784F]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 22955                                          ; 22/10/2022
 22956                                  	;call	print 			   ;		             M029
 22957                                  	; 12/12/2022
 22958 000006A9 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 22959                                  
 22960                                  	; 30/12/2023 - Retro DOS v5.0
 22961                                  cpu_type:
 22962 000006AB FF                      	db 0FFh	; db 0
 22963                                  
 22964                                  no_err:
 22965                                  	; 12/05/2019
 22966                                  	;----------------------------------------------
 22967                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 22968                                  	; 22/10/2022 - Retro DOS v4.0
 22969                                  	; 12/12/2022
 22970                                  	; 30/12/2023 - Retro DOS v5.0
 22971 000006AC BA[5646]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 22972                                  p_dosinit_msg:
 22973 000006AF E87B3F                  	call	print			; Print message
 22974                                  	;----------------------------------------------
 22975                                  	
 22976                                  	; 11/12/2022
 22977                                  	; 22/10/2022
 22978                                  	; 23/03/2019 - Retro DOS v4.0
 22979                                  	;pop	ds			; start of free memory
 22980                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 22981                                  	
 22982                                  	; 11/12/2022
 22983                                  	; 27/03/2019
 22984 000006B2 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 22985                                  	; 30/12/2023
 22986                                  	;pop	ds ; */
 22987                                  
 22988 000006B6 08D2                    	or	dl,dl
 22989                                  	; 30/12/2023
 22990 000006B8 7405                    	jz	short nodrvset		; bios didn't say
 22991                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 22992                                  	;dec	dl			; A = 0
 22993                                  	; 18/12/2022
 22994 000006BA 4A                      	dec	dx
 22995 000006BB B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 22996 000006BD CD21                    	int	21h			; select the disk
 22997                                  			; DOS - SELECT DISK
 22998                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 22999                                  			; Return: AL = number of logical drives
 23000                                  nodrvset:
 23001                                  	; ---------------------
 23002                                  
 23003                                  	;ifdef	dblspace_hooks
 23004                                  	;	....
 23005                                  	;	....
 23006                                  	;endif
 23007                                  
 23008                                  	; ---------------------
 23009                                  
 23010                                  ; ----------------------------------------------------------------------------
 23011                                  
 23012                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 23013                                  
 23014                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 23015                                  ; ----------------------------------------------------------------------------
 23016                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23017                                  ; ----------------------------------------------------------------------------
 23018                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 23019                                  ; ----------------------------------------------------------------------------
 23020                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 23021                                  
 23022                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 23023                                  
 23024                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 23025                                  
 23026                                  ProcessConfig:
 23027                                  	;; ds = cs ; 27/03/2019
 23028                                  	; 11/12/2022
 23029                                  	; ds <> cs	
 23030                                  
 23031                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 23032                                  
 23033 000006BF E8D919                  	call	doconf			; do pre-scan for dos=high/low
 23034                                  
 23035                                  	; 11/12/2022
 23036                                  	; 27/03/2019
 23037                                  	; ds = cs (at return from doconf)
 23038                                  
 23039                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 23040                                  ; It will either be relocated to low memory, above the DOS data structures,
 23041                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 23042                                  ; code entry points will be located in low memory. Dos_segreinit is used
 23043                                  ; to tell the DOS data where the code has been placed, and to install the
 23044                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 23045                                  ; must first initialize it in its present location and load the installable
 23046                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 23047                                  ; relocate the DOS code into HiMem.
 23048                                  ;
 23049                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 23050                                  ; to install the low memory stub (this must be done before allowing any
 23051                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 23052                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 23053                                  ; been patched.
 23054                                  
 23055                                  	; 22/10/2022 - Retro DOS v4.0
 23056                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 23057                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 23058                                  	; 11/12/2022
 23059 000006C2 803E[6C02]00            	cmp	byte [runhigh],0
 23060 000006C7 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 23061                                  
 23062                                  ;------ user chose to load high
 23063                                  
 23064                                  	; 22/10/2022
 23065                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 23066                                  	; 11/12/2022
 23067                                  	; ds = cs
 23068                                  ; 13/04/2024
 23069                                  %if 0
 23070                                  	mov	es,[CURRENT_DOS_LOCATION]
 23071                                  %endif
 23072                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 23073                                  	; 27/03/2019
 23074                                  	;;mov	es,[FINAL_DOS_LOCATION]
 23075                                  
 23076 000006C9 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 23077                                  
 23078                                  ; 13/04/2024
 23079                                  %if 0	
 23080                                  	; 11/12/2022
 23081                                  	; ds = cs
 23082                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23083                                  	call	far [dos_segreinit]
 23084                                  %endif
 23085 000006CB EB08                    	jmp	short do_multi_pass
 23086                                  
 23087                                  ;------ User chose to load dos low
 23088                                  
 23089                                  dont_install_stub:
 23090                                  	; 22/10/2022
 23091 000006CD 31DB                    	xor	bx,bx			; M012
 23092                                  					; don't use int 21 call to alloc mem
 23093 000006CF E8E102                  	call	MovDOSLo		; move it !
 23094                                  
 23095 000006D2 B80100                  	mov	ax,1			; dont install stub
 23096                                  
 23097                                  ; 13/04/2024
 23098                                  %if 1
 23099                                  do_multi_pass:
 23100                                  %endif
 23101                                  	; 11/12/2022
 23102                                  	; ds = cs
 23103 000006D5 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23104                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 23105                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23106                                  	; 27/03/2019
 23107                                  ;do_multi_pass:
 23108                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 23109                                  
 23110                                  	; 11/12/2022
 23111                                  	; ds =cs
 23112                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 23113 000006D9 FF1E[7D02]              	call	far [dos_segreinit]
 23114                                  
 23115                                  ; 13/04/2024
 23116                                  %if 0
 23117                                  do_multi_pass:
 23118                                  %endif
 23119                                  
 23120 000006DD E81D02                  	call	AllocFreeMem		; allocate all the free mem
 23121                                  					; & update [memhi] & [area]
 23122                                  					; start of free memory.
 23123                                  	;ifdef	dblspace_hooks
 23124                                  	;mov	bx,0			; magic backdoor to place int hooks
 23125                                  	;call	cs:MagicBackdoor
 23126                                  	;endif
 23127                                  
 23128                                  ; 07/03/2025
 23129                                  %if 0
 23130                                  	; 07/04/2024 - Retro DOS v5.0
 23131                                  	; (PCDOS 7.1 IBMBIO.COM)
 23132                                  	;cmp	byte [cs:F5_key],1
 23133                                  	cmp	byte [F5_key],1
 23134                                  	je	short skip_magicbackdoor
 23135                                  	;cmp	byte [cs:F8_key],1
 23136                                  	cmp	byte [F8_key],1
 23137                                  	je	short skip_magicbackdoor
 23138                                  	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 23139                                  	;call	far [cs:MagicBackdoor]
 23140                                  	call	far [MagicBackdoor]
 23141                                  
 23142                                  skip_magicbackdoor:
 23143                                  %endif
 23144                                  
 23145                                  ; Now, process config.sys some more.  
 23146                                  ; Load the device drivers and install programs
 23147                                  
 23148                                  	; 22/10/2022
 23149                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 23150                                  	; 11/12/2022
 23151                                  	; ds = cs
 23152 000006E0 FE06[CB02]              	inc	byte [multi_pass_id]
 23153 000006E4 E8501A                  	call	multi_pass		; load device drivers
 23154 000006E7 E8BE2E                  	call	ShrinkUMB
 23155 000006EA E8E22E                  	call	UnlinkUMB		; unlink all UMBs	;M002
 23156                                  	; 02/11/2022
 23157                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 23158                                  	; 11/12/2022
 23159                                  	; ds = cs
 23160 000006ED FE06[CB02]              	inc	byte [multi_pass_id]
 23161 000006F1 E8431A                  	call	multi_pass		; was load ifs (now does nothing)
 23162                                  
 23163                                  	;ifdef	dblspace_hooks
 23164                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 23165                                  	;endif
 23166                                  
 23167                                  	; ds = cs
 23168                                  
 23169                                  	; 07/04/2024
 23170                                  	;call	endfile			; setup fcbs, files, buffers etc
 23171                                  
 23172                                  	;ifdef	dblspace_hooks
 23173                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 23174                                  	;endif
 23175                                  
 23176                                  ; 07/03/2025
 23177                                  %if 0
 23178                                  	; 07/04/2024 - Retro DOS v5.0
 23179                                  	; (PCDOS 7.1 IBMBIO.COM)
 23180                                  	;cmp	byte [cs:F5_key],1
 23181                                  	cmp	byte [F5_key],1
 23182                                  	je	short skip_magicpostload
 23183                                  	;cmp	byte [cs:F8_key],1
 23184                                  	cmp	byte [F8_key],1
 23185                                  	je	short skip_magicpostload
 23186                                  	call	MagicPostload		; make sure Magicdrv is final placed
 23187                                  	; 13/04/2024
 23188                                  	; ds = cs
 23189                                  	call	endfile			; setup fcbs, files, buffers etc
 23190                                  	call	MagicSetCdss		; disable CDSs of reserved drives
 23191                                  	; ds = cs
 23192                                  	jmp	short _@_
 23193                                  
 23194                                  skip_magicpostload:
 23195                                  %endif
 23196                                  
 23197                                  	; 13/04/2024
 23198                                  	; ds = cs
 23199 000006F4 E83606                  	call	endfile			; setup fcbs, files, buffers etc
 23200                                  _@_:
 23201                                  
 23202                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 23203                                  ;to device drivers. This has been moved up to this point to avoid problems 
 23204                                  ;with overlays called from installed programs
 23205                                  
 23206                                  	; 11/12/2022
 23207                                  	; ds = cs
 23208                                  
 23209                                  	;;mov	ax,Bios_Data ; 0070h
 23210                                  	;mov	ax,KERNEL_SEGMENT
 23211                                  	; 21/10/2022
 23212 000006F7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23213 000006FA 8EC0                    	mov	es,ax			; point ES to bios data
 23214                                  
 23215 000006FC 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 23216                                  
 23217                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23218                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 23219                                  	;test	byte [cs:install_flag],1
 23220                                  	; 11/12/2022
 23221                                  	; ds = cs
 23222 00000702 F606[CC02]01            	test	byte [install_flag],1
 23223                                  	;test	byte [cs:install_flag],have_install_cmd
 23224                                  					; are there install commands?
 23225 00000707 7407                    	jz	short dolast		; no, no need for further processing
 23226                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 23227                                  	; 11/12/2022
 23228                                  	; ds =cs
 23229 00000709 FE06[CB02]              	inc	byte [multi_pass_id]
 23230 0000070D E8271A                  	call	multi_pass		; execute install= commands
 23231                                  
 23232                                  dolast:
 23233                                  	
 23234                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 23235                                  ;  free the confbot area used for config.sys and sysinit itself.
 23236                                  
 23237                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 23238                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 23239                                  ; anything, but just set up the ROM area for suballocation (or print
 23240                                  ; a message if HiMem is not available).
 23241                                  ;
 23242                                  ; There is also this little hack for CPM style DOS calls that needs to
 23243                                  ; be done when A20 is set...
 23244                                  
 23245                                  	; 11/12/2022
 23246                                  	; ds = cs
 23247                                  
 23248                                  	; 22/10/2022
 23249                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 23250                                  	; 11/12/2022
 23251 00000710 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 23252 00000715 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 23253 00000717 E84802                  	call	LoadDOSHiOrLo
 23254                                  _@@_:
 23255                                  	;cmp	byte [cs:runhigh],0	; are we running low
 23256                                  	; 11/12/2022
 23257                                  	; ds = cs
 23258 0000071A 803E[6C02]00            	cmp	byte [runhigh],0
 23259                                  	;je	short _@@@
 23260 0000071F 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 23261 00000721 E84C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 23262                                  _@@@:
 23263                                  
 23264                                  ; We are now done with CONFIG.SYS processing
 23265                                  
 23266                                  ConfigDone:
 23267                                  	; 12/12/2022
 23268                                  	; 22/10/2022
 23269                                  	;mov	byte [cs:donotshownum],1 
 23270                                  					; done with config.sys.
 23271                                  					; do not show line number message.
 23272                                  	;mov	es,[cs:area]
 23273                                  	; 12/12/2022
 23274                                  	; ds = cs
 23275                                  	; 27/03/2019
 23276 00000724 C606[5303]01            	mov	byte [donotshownum],1
 23277 00000729 8E06[6603]              	mov	es,[area]
 23278                                  
 23279 0000072D B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 23280 0000072F CD21                    	int	21h
 23281                                  			; DOS - 2+ - FREE MEMORY
 23282                                  			; ES = segment address of area to be freed
 23283                                  
 23284                                  	; 22/10/2022
 23285                                  	;test	word [cs:install_flag],2
 23286                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 23287                                  	;test	byte [cs:install_flag],has_installed
 23288                                  	; 11/12/2022
 23289                                  	; ds = cs
 23290 00000731 F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 23291                                  	;test	byte [install_flag],has_installed
 23292 00000736 741F                    	jz	short skip_free_sysinitbase ; no.
 23293                                  
 23294                                  ; set block from the old_area with impossible_owner_size.
 23295                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 23296                                  ; handle install= command.
 23297                                  
 23298                                  	; 12/12/2022
 23299                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23300                                  	;push	bx
 23301                                  	
 23302                                  	; 22/10/2022
 23303                                  	;mov	es,[cs:old_area]
 23304                                  	;mov	bx,[cs:impossible_owner_size]
 23305                                  	; 12/12/2022
 23306                                  	; ds = cs
 23307 00000738 8E06[5C03]              	mov	es,[old_area]
 23308 0000073C 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 23309                                  	
 23310 00000740 B44A                    	mov	ah,4Ah ; SETBLOCK
 23311 00000742 CD21                    	int	21h
 23312                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23313                                  			; ES = segment address of block to change
 23314                                  			; BX = new size in paragraphs
 23315 00000744 8CC0                    	mov	ax,es
 23316 00000746 48                      	dec	ax
 23317 00000747 8EC0                    	mov	es,ax			; point to arena
 23318                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 23319 00000749 26C70601000800          	mov	word [es:1],8
 23320                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 23321 00000750 26C70608005344          	mov	word [es:8],'SD'
 23322                                  	
 23323                                  	; 12/12/2022
 23324                                  	;pop	bx
 23325                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23326                                  
 23327                                  skip_free_sysinitbase:
 23328                                  	; 22/10/2022
 23329                                  	;cmp	byte [cs:runhigh],0
 23330                                  	; 12/12/2022
 23331                                  	; ds = cs
 23332 00000757 803E[6C02]00            	cmp	byte [runhigh],0	
 23333 0000075C 7403                    	je	short _@@@_ ; 04/07/2023
 23334                                  
 23335 0000075E E8DF03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 23336                                  
 23337                                  ; ----------------------------------------------------------------------------
 23338                                  
 23339                                  _@@@_:
 23340                                  	; 12/12/2022
 23341                                  	; ds = cs
 23342                                  	; 22/10/2022
 23343                                  	; 27/03/2019
 23344                                  	;push	cs
 23345                                  	;pop	ds			; point DS to sysinitseg
 23346                                  
 23347                                  ; set up the parameters for command
 23348                                  
 23349                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23350                                  ;;ifdef	MULTI_CONFIG
 23351                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 23352                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 23353                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 23354                                  ;	; !!!
 23355                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23356                                  ;       ; !!!
 23357                                  ;	call    disable_autoexec        ; no, we should disable it
 23358                                  ;process_autoexec:
 23359                                  ;;endif	; !!!
 23360                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23361                                  ;	; !!!
 23362                                  
 23363                                  	; 22/10/2022 
 23364                                  	;mov     cl,[command_line]
 23365                                          ;mov     ch,0
 23366                                          ;inc     cx
 23367                                          ;mov     si,command_line	
 23368                                  	;add     si,cx
 23369                                          ;mov     byte [si],cr	; cr-terminate command line
 23370                                  
 23371                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23372                                  	; (SYSINIT:0809h)
 23373                                  
 23374                                  	;;;;
 23375                                  
 23376                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23377                                  	; (SYSINIT:0813h)
 23378                                  	; ds = cs
 23379                                  	; push	cs
 23380                                  	; pop	ds
 23381                                  
 23382 00000761 C606[9715]00            	mov	byte [config_cmd],0	; set special code for query_user
 23383 00000766 E88C3A                  	call    query_user		; to issue the AUTOEXEC prompt
 23384                                  	; 07/04/2024
 23385                                  	;jnc	short process_autoexec	; we should process autoexec normally
 23386                                  
 23387                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23388                                  	;;;
 23389 00000769 9C                      	pushf
 23390 0000076A F606[5A48]01            	test	byte [bDisableUI],1
 23391 0000076F 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 23392 00000771 803E[8C03]01            	cmp	byte [F5_key],1
 23393 00000776 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 23394                                  _@@@@_:
 23395 00000778 9D                      	popf
 23396 00000779 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 23397 0000077B EB01                    	jmp	short bypass_autoexec
 23398                                  _@@@@@_:
 23399 0000077D 9D                      	popf			; cf status at the return from 'query_user' call
 23400                                  bypass_autoexec:
 23401                                  	;;;
 23402                                  
 23403                                  	; !!!
 23404 0000077E 800E[5E48]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23405                                  	; !!!
 23406 00000783 E86A3B                  	call    disable_autoexec        ; no, we should disable it
 23407                                  process_autoexec:
 23408                                  	; !!!
 23409 00000786 E8B23B                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23410                                  
 23411                                  	;mov     cl,[command_line]
 23412                                  	; 30/12/2022
 23413 00000789 BE[9447]                	mov	si,command_line
 23414 0000078C 8A0C                    	mov	cl,[si]
 23415 0000078E B500                    	mov     ch,0
 23416 00000790 41                      	inc     cx
 23417                                  	;mov	si,command_line
 23418 00000791 01CE                    	add     si,cx
 23419 00000793 C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 23420                                  	
 23421                                  	;;;;		
 23422                                  
 23423                                  ; 30/12/2022 - Retro DOS v4.2
 23424                                  %if 0
 23425                                  	;mov	si,(offset command_line+1)
 23426                                  	mov	si,command_line+1
 23427                                  	push    ds
 23428                                  	pop     es
 23429                                  	mov     di,si
 23430                                  	mov     cl,0FFh ; -1
 23431                                  _@_loop:
 23432                                  	inc     cl ; +1
 23433                                  	lodsb
 23434                                  	stosb
 23435                                  	or      al,al
 23436                                  	jnz     short _@_loop
 23437                                  	dec     di
 23438                                  	mov     al,0Dh
 23439                                  	stosb			; cr-terminate command line
 23440                                  	mov     [command_line],cl ; command line length (except CR)
 23441                                  %endif
 23442                                  
 23443                                  ; ----------------------------------------------------------------------------
 23444                                  
 23445                                  ;   Once we get to this point, the above code, which is below "retry"
 23446                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 23447                                  ;   which follow....)
 23448                                  
 23449                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 23450 00000796 BA[0647]                	mov	dx,commnd	; now pointing to file description
 23451                                  
 23452                                  ; we are going to open the command interpreter and size it as is done in
 23453                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 23454                                  ; there is not enough room for the command interpreter,exec will probably
 23455                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 23456                                  ; here to catch it. this code is not perfect (for instance .exe command
 23457                                  ; interpreters are possible) because it does its sizing based on the
 23458                                  ; assumption that the file being loaded is a .com file. it is close enough to
 23459                                  ; correctness to be usable.
 23460                                  
 23461                                  ; first, find out where the command interpreter is going to go.
 23462                                  
 23463 00000799 52                      	push	dx		; save pointer to name
 23464 0000079A BBFFFF                  	mov	bx,0FFFFh
 23465 0000079D B448                    	mov	ah,48h	; ALLOC
 23466 0000079F CD21                            int     21h             ; get biggest piece
 23467 000007A1 B448                    	mov	ah,48h	; ALLOC
 23468 000007A3 CD21                    	int	21h		; second time gets it
 23469 000007A5 726B                    	jc	short memerrjx	; oooops
 23470                                  
 23471 000007A7 8EC0                    	mov	es,ax
 23472 000007A9 B449                    	mov	ah,49h	; DEALLOC
 23473 000007AB CD21                    	int	21h		; give it right back
 23474 000007AD 89DD                    	mov	bp,bx
 23475                                  
 23476                                  ; es:0 points to block,and bp is the size of the block in para.
 23477                                  
 23478                                  ; we will now adjust the size in bp down by the size of sysinit.
 23479                                  ; we need to do this because exec might get upset if some of the exec
 23480                                  ; data in sysinit is overlayed during the exec.
 23481                                  
 23482                                  	; 22/10/2022
 23483                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 23484 000007AF 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 23485 000007B3 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 23486                                  
 23487                                  ; Note that the "config_wrkseg" environment data is a segment in
 23488                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 23489                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 23490                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 23491                                  ; we need to make sure that there's no way Exec will stomp on that data
 23492                                  ; before it can copy it, and one way to do that is to make the available
 23493                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 23494                                  ; from the "memory_size" segment value (which is typically A000h) instead
 23495                                  ; of the current sysinit CS....
 23496                                  ;
 23497                                  ; The reason I use the term "paranoid" is because this code should have
 23498                                  ; slid the data required by Exec up to the very top of memory, because as
 23499                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 23500                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 23501                                  ; consumes). Now it's just a little worse (65K or more, depending on
 23502                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 23503                                  ; is determined by the size of CONFIG.SYS.... -JTP
 23504                                  
 23505                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 23506                                  	; (SYSINIT:0858h)
 23507 000007B5 8B0E[9315]              	mov	cx,[config_envlen]
 23508 000007B9 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 23509 000007BB A1[9515]                        mov	ax,[config_wrkseg]	
 23510                                  
 23511                                  	; 22/10/2022
 23512                                  	;mov	cx,[config_envlen]
 23513                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 23514                                          ;mov	ax,[config_wrkseg]
 23515                                  ;no_env:
 23516                                  	; 22/10/2022
 23517                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 23518                                  no_env:
 23519                                  	; 30/12/2022
 23520                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 23521 000007BE 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 23522 000007C0 83C311                  	add	bx,11h		; add the sysinit php
 23523 000007C3 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 23524 000007C5 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 23525                                  
 23526                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 23527 000007C7 B8003D                          mov	ax,3D00h
 23528 000007CA F9                      	stc                     ; in case of int 24
 23529 000007CB CD21                    	int	21h
 23530 000007CD 7271                    	jc	short comerr	; ooops
 23531                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 23532                                  			; DS:DX -> ASCIZ filename
 23533                                  			; AL = access mode
 23534                                  			; 0 - read
 23535                                  	; 22/10/2022
 23536                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 23537 000007CF 89C3                            mov     bx,ax           ; handle in bx
 23538                                  
 23539                                  ;   If the standard command interpreter is being used, verify it is correct
 23540                                  
 23541                                  	; 30/12/2022 - Retro DOS v4.2
 23542                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 23543 000007D1 803E[0347]00            	cmp	byte [newcmd],0	; was a new shell selected?
 23544 000007D6 7518                    	jne	short skip_validation ; yes
 23545                                  	; 07/04/2024 - Retro DOS v5.0
 23546                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 23547 000007D8 BA[9207]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 23548 000007DB B90400                  	mov	cx,4		;
 23549 000007DE B43F                    	mov	ah,READ		;
 23550 000007E0 CD21                    	int	21h		;
 23551 000007E2 803E[9207]E9            	cmp	byte [retry-4],0E9h
 23552 000007E7 7557                    	jne	short comerr
 23553                                  	; 20/04/2019 - Retro DOS v4.0
 23554                                  	; 30/12/2022 
 23555                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23556                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 23557                                  	; 07/04/2024 - Retro DOS v5.0
 23558                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 23559                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 23560                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 23561 000007E9 803E[9507]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23562 000007EE 7550                    	jne	short comerr	;
 23563                                  
 23564                                  	; 22/10/2022
 23565                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 23566                                  	;jne	short skip_validation ; yes
 23567                                  	;mov	dx,retry-4
 23568                                  	;mov	cx,4		;
 23569                                  	;mov	ah,READ		;
 23570                                  	;int	21h		;
 23571                                  	;cmp	byte [retry-4],0E9h
 23572                                  	;jne	short comerr
 23573                                  	;; 20/04/2019 - Retro DOS v4.0
 23574                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23575                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23576                                  	;jne	short comerr	;
 23577                                  
 23578                                  ;skip_validation:
 23579                                  	; 22/10/2022
 23580                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 23581                                  skip_validation:
 23582                                  	; 30/12/2022
 23583                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 23584 000007F0 31C9                    	xor	cx,cx
 23585 000007F2 31D2                    	xor	dx,dx
 23586                                  	;mov	ax,(LSEEK<<8)|2
 23587 000007F4 B80242                  	mov	ax,4202h
 23588 000007F7 F9                      	stc			; in case of int 24
 23589 000007F8 CD21                    	int	21h		; get file size in dx:ax
 23590 000007FA 7244                    	jc	short comerr
 23591                                  				; convert size in dx:ax to para in ax
 23592 000007FC 83C00F                  	add	ax,15		; round up size for conversion to para
 23593 000007FF 83D200                  	adc	dx,0
 23594 00000802 E88104                  	call	off_to_para
 23595 00000805 B10C                    	mov	cl,12
 23596 00000807 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 23597 00000809 09D0                    	or	ax,dx		; ax is now # of para for file
 23598 0000080B 83C010                  	add	ax,10h		; 100h byte php
 23599 0000080E 39E8                    	cmp	ax,bp		; will command fit in available mem?
 23600 00000810 7208                    	jb	short okld	; jump if yes.
 23601                                  
 23602                                  ; 30/12/2022
 23603                                  %if 0
 23604                                  	; 22/10/2022
 23605                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 23606                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 23607                                  	; 02/11/2022
 23608                                  	;jmp	mem_err
 23609                                  	; 11/12/2022
 23610                                  	; ds = cs
 23611                                  	jmp	mem_err2
 23612                                  %endif
 23613                                  	; 30/12/2022
 23614                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 23615                                  memerrjx:
 23616 00000812 BA[234D]                	mov	dx,badmem 	; "Configuration too large for memory"
 23617 00000815 E8153E                  	call	print
 23618 00000818 EB3A                    	jmp     short continue
 23619                                  
 23620                                  okld:
 23621 0000081A B43E                    	mov	ah,3Eh ; CLOSE
 23622 0000081C CD21                    	int	21h		; close file
 23623                                  
 23624                                  	; 22/10/2022
 23625 0000081E 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 23626                                  
 23627                                  	; 24/03/2019
 23628                                  
 23629 0000081F 0E                      	push	cs		; point es to sysinitseg
 23630 00000820 07                      	pop	es
 23631 00000821 BB[BD02]                        mov     bx,COMEXE	; point to exec block
 23632                                  	; 22/10/2022
 23633                                  	;pop	dx              ; recover pointer to name
 23634                                  
 23635                                  ;;ifdef	MULTI_CONFIG
 23636                                  
 23637                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 23638                                  ;   there will be data if there were any valid SET commands and/or if a menu
 23639                                  ;   selection was made (in which case the CONFIG environment variable will be
 23640                                  ;   set to that selection).
 23641                                  
 23642                                  	; 23/10/2022
 23643                                  	;mov	cx,[config_envlen]
 23644                                  	;jcxz	no_envdata
 23645                                          ;mov	cx,[config_wrkseg]
 23646                                  ;no_envdata:
 23647                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 23648                                  	;mov	[bx],cx
 23649                                  
 23650                                  ;;endif	;MULTI_CONFIG
 23651                                  
 23652                                  	; 30/12/2022 - Retro DOS v4.2
 23653                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 23654 00000824 8B0E[9315]              	mov	cx,[config_envlen]
 23655 00000828 E304                    	jcxz	no_envdata
 23656 0000082A 8B0E[9515]                      mov	cx,[config_wrkseg]
 23657                                  no_envdata:
 23658                                  	;mov	[bx+EXEC0.ENVIRON],cx
 23659 0000082E 890F                    	mov	[bx],cx	
 23660                                  	
 23661                                  	; 23/10/2022
 23662                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 23663                                  
 23664                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 23665 00000830 8C4F04                  	mov	[bx+4],cs
 23666                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 23667 00000833 8C4F08                  	mov	[bx+8],cs
 23668                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 23669 00000836 8C4F0C                  	mov	[bx+12],cs
 23670                                  
 23671                                  	;mov	ax,(EXEC<<8) + 0
 23672                                  	; 23/10/2022
 23673                                  	;xor	ax,ax
 23674                                  	;mov	ah,4Bh
 23675                                  	; 04/07/2023
 23676                                  	;mov	ax,4B00h
 23677 00000839 B8004B                  	mov	ax,(EXEC<<8)
 23678                                  
 23679 0000083C F9                      	stc                     ; in case of int 24
 23680 0000083D CD21                            int     21h             ; go start up command
 23681                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 23682                                  			; DS:DX -> ASCIZ filename
 23683                                  			; ES:BX -> parameter block
 23684                                  			; AL = subfunc: load & execute program
 23685                                  	;push	cs
 23686                                  	;pop	ds
 23687                                  
 23688                                  	; 13/04/2024
 23689                                  	; 23/10/2022
 23690 0000083F 52                      	push	dx		; push to balance fall-through pop
 23691                                  
 23692                                  ; note fall through if exec returns (an error)
 23693                                  comerr:
 23694                                  	; 23/10/2022
 23695                                  ;;ifdef	MULTI_CONFIG
 23696                                  	;cmp	byte [commnd4],0
 23697                                  	;je	short comerr2	; all defaults exhausted, print err msg
 23698                                  	;cmp	byte [newcmd],0
 23699                                  	;je	short continue	; don't print err msg for defaults just yet
 23700                                  ;comerr2:
 23701                                  ;;endif
 23702                                  
 23703                                  	; 30/12/2022 - Retro DOS v4.2
 23704                                  	;push	cs
 23705                                  	;pop	ds
 23706                                  	; 07/04/2024
 23707                                  	; ds = cs
 23708                                  
 23709 00000840 803E[7747]00            	cmp	byte [commnd4],0
 23710 00000845 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 23711 00000847 803E[0347]00            	cmp	byte [newcmd],0
 23712 0000084C 7406                    	je	short continue	; don't print err msg for defaults just yet
 23713                                  comerr2:
 23714                                  	; 07/04/2024
 23715                                  	;push	dx ; 30/12/2022
 23716                                  
 23717                                  	; 23/10/2022
 23718 0000084E BA[9F4C]                        mov     dx,badcom	; want to print command error
 23719 00000851 E8AD3D                  	call	badfil
 23720                                  	
 23721                                  	; 07/04/2024
 23722                                  	;pop	dx  ; 30/12/2022
 23723                                  continue:
 23724                                  	; 13/04/2024
 23725                                  	; 23/10/2022
 23726 00000854 5A                      	pop	dx
 23727                                  
 23728                                  ; 30/12/2022
 23729                                  %if 0
 23730                                  
 23731                                  ;;ifndef MULTI_CONFIG
 23732                                  	;jmp	stall
 23733                                  	; 24/10/2022
 23734                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 23735                                  	jmp	short stall
 23736                                  ;;else
 23737                                  
 23738                                  %endif
 23739                                  	
 23740                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 23741                                  ;%if 1
 23742                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 23743                                  ;%if 0	
 23744 00000855 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 23745 00000857 CD21                    	int	21h             ;
 23746 00000859 0441                    	add	al,'A'          ;
 23747 0000085B 88C2                    	mov	dl,al           ; DL == default drive letter
 23748 0000085D BE[4647]                	mov	si,commnd2
 23749 00000860 803E[0347]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 23750 00000865 7505                    	jne	short do_def2	; then try the 2nd alternate;
 23751 00000867 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 23752 0000086A EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 23753                                  do_def2:			
 23754 0000086C 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 23755 0000086F 7554                            jne	short do_alt    ; no
 23756                                  do_def3:
 23757 00000871 BE[5747]                	mov	si,commnd3
 23758 00000874 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 23759 00000877 754C                    	jne	short do_alt	; no
 23760 00000879 BE[7747]                	mov	si,commnd4
 23761 0000087C 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 23762 0000087F 7544                    	jne	short do_alt	; no
 23763 00000881 52                      	push	dx              ;
 23764 00000882 BA[124F]                	mov	dx,badcomprmpt
 23765 00000885 E8A53D                  	call	print		;
 23766 00000888 5A                      	pop	dx              ; recover default drive letter in DL
 23767                                  request_input:			;
 23768 00000889 B402                    	mov	ah,STD_CON_OUTPUT
 23769 0000088B CD21                    	int	21h             ;
 23770 0000088D 52                      	push	dx              ;
 23771 0000088E B23E                    	mov	dl,'>'          ;
 23772 00000890 CD21                    	int	21h             ;
 23773 00000892 8A1E[0547]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 23774 00000896 B700                    	mov	bh,0            ;
 23775 00000898 C687[0647]0D            	mov	byte [commnd+bx],0Dh
 23776 0000089D BA[0447]                	mov	dx,tmplate
 23777 000008A0 B40A                    	mov	ah,STD_CON_STRING_INPUT
 23778 000008A2 CD21                    	int	21h             ; read a line of input
 23779 000008A4 BA[4A4C]                	mov	dx,crlfm	;
 23780 000008A7 E8833D                  	call	print           ;
 23781 000008AA 5A                      	pop	dx              ;
 23782 000008AB 8A1E[0547]              	mov	bl,[tmplate+1]	;
 23783 000008AF 08DB                    	or	bl,bl           ; was anything typed?
 23784 000008B1 74D6                    	jz	short request_input ;
 23785 000008B3 C606[0347]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 23786 000008B8 C687[0647]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 23787 000008BD C706[9447]000D          	mov	word [command_line],0D00h
 23788 000008C3 EB35                    	jmp	short do_exec   ;
 23789                                  do_alt:
 23790 000008C5 1E                      	push	ds
 23791 000008C6 07                      	pop	es
 23792 000008C7 C606[0347]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 23793 000008CC BF[0647]                	mov	di,commnd	;
 23794                                  do_alt1:
 23795 000008CF AC                      	lodsb			; copy the alternate, zapping it as we go,
 23796 000008D0 C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 23797 000008D4 AA                      	stosb 			;
 23798 000008D5 08C0                    	or	al,al		;
 23799 000008D7 75F6                    	jnz	short do_alt1	;
 23800 000008D9 BF[9447]                	mov	di,command_line
 23801 000008DC 807C023A                	cmp	byte [si+2],':'
 23802 000008E0 7503                    	jne	short do_alt2	;
 23803 000008E2 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 23804                                  do_alt2:			;
 23805 000008E5 AC                      	lodsb			;
 23806 000008E6 AA                      	stosb			;
 23807 000008E7 08C0                    	or	al,al           ;
 23808 000008E9 75FA                    	jnz	short do_alt2   ;
 23809 000008EB C645FF0D                	mov	byte [di-1],cr
 23810                                  
 23811                                  ;;   Last but not least, see if we need to call disable_autoexec
 23812                                  
 23813                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 23814                                  	;cmp	[command_line-1],0
 23815                                          ;jne	short do_exec   ;
 23816                                          ;mov	[command_line-1],'/'
 23817                                  	;call	disable_autoexec ;
 23818                                  
 23819                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 23820 000008EF C606[5448]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 23821 000008F4 E8F939                  	call	disable_autoexec
 23822 000008F7 E8413A                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 23823                                  do_exec:
 23824 000008FA E999FE                  	jmp	retry		;
 23825                                  
 23826                                  ;;endif	;MULTI_CONFIG
 23827                                  
 23828                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 23829                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23830                                  
 23831                                  ; 24/03/2019 - Retro DOS v4.0
 23832                                  
 23833                                  ; ----------------------------------------------------------------------
 23834                                  ; procedure : AllocFreeMem
 23835                                  ;
 23836                                  ; Allocate Max memory from DOS to find out where to load DOS.
 23837                                  ; DOS is at temporary location when this call is being made
 23838                                  ;
 23839                                  ; Inputs : None
 23840                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 23841                                  ;	   [area] & [memhi] set to the para value of the start of the
 23842                                  ;	   free memory.
 23843                                  ;
 23844                                  ; Uses   : AX, BX
 23845                                  ;
 23846                                  ; ----------------------------------------------------------------------
 23847                                  	
 23848                                  	; 30/12/2022 - Retro DOS v4.2
 23849                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 23850                                  
 23851                                  	; 08/04/2024 - Retro DOS v5.0
 23852                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 23853                                  
 23854                                  	; 23/10/2022
 23855                                  AllocFreeMem:
 23856 000008FD BBFFFF                  	mov	bx,0FFFFh
 23857 00000900 B448                    	mov	ah,48h ; ALLOC
 23858 00000902 CD21                    	int	21h			; first time fails
 23859 00000904 B448                    	mov	ah,48h ; ALLOC
 23860 00000906 CD21                    	int	21h			; second time gets it
 23861                                  	; 11/12/2022
 23862                                  	; ds = cs
 23863                                  	;mov	[cs:area],ax
 23864                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 23865 00000908 A3[6603]                	mov	[area],ax
 23866 0000090B A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 23867 0000090E C3                      	retn				; start of free memory
 23868                                  				
 23869                                  	; include msbio.cl6
 23870                                  ; ----------------------------------------------------------------------
 23871                                  DOSLOMSG:
 23872 0000090F 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 23872 00000918 7661696C61626C653A-
 23872 00000921 204C6F6164696E6720-
 23872 0000092A 444F53206C6F770D0A-
 23872 00000933 24                 
 23873                                  FEmsg:
 23874 00000934 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 23874 0000093D 6F723A2043616E6E6F-
 23874 00000946 7420616C6C6F636174-
 23874 0000094F 65204D656D6F727920-
 23874 00000958 666F7220444F530D0A-
 23874 00000961 24                 
 23875                                  
 23876                                  ; ----------------------------------------------------------------------
 23877                                  ;
 23878                                  ; procedure : LoadDOSHiOrLo
 23879                                  ;
 23880                                  ;		Tries to move DOS into HMA. If it fails then loads
 23881                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 23882                                  ;		moved; this just tries to allocate the HMA, and prints
 23883                                  ;		a message if this is not possible.
 23884                                  ;
 23885                                  ; ----------------------------------------------------------------------
 23886                                  
 23887                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23888                                  LoadDOSHiOrLo:
 23889                                  	; 27/03/2019 - Retro DOS v4.0
 23890                                  	; ds = cs
 23891 00000962 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 23892                                  	;jc	short LdngLo		; If that don't work...
 23893                                  	;retn
 23894                                  	; 18/12/2022
 23895 00000965 731C                    	jnc	short LoadDosHi_ok
 23896                                  LdngLo:
 23897                                  	; 23/10/2022
 23898                                  	;push	cs
 23899                                  	;pop	ds
 23900                                  	; 11/12/2022
 23901                                  	; ds = cs
 23902 00000967 B409                    	mov	ah,9
 23903 00000969 BA[0F09]                	mov	dx,DOSLOMSG		; inform user that we are
 23904 0000096C CD21                    	int	21h			; loading low
 23905                                  
 23906                                  ;ifndef ROMDOS
 23907                                  	; actually move the dos, and reinitialize it.
 23908                                  
 23909 0000096E BB0100                  	mov	bx,1				; M012
 23910                                  						;  use int 21 alloc for mem
 23911 00000971 E83F00                  	call	MovDOSLo
 23912                                  	; 11/12/2022
 23913                                  	; ds = cs
 23914                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 23915                                  	; 23/10/2022
 23916 00000974 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23917                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 23918                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 23919 00000978 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 23920                                  	; 11/12/2022
 23921                                  	; ds = cs
 23922                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 23923 0000097A FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 23924                                  	
 23925                                  ;endif ; ROMDOS
 23926                                  	; 23/10/2022
 23927                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 23928                                  	; 11/12/2022
 23929                                  	; ds = cs
 23930 0000097E C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 23931                                  LoadDosHi_ok:	; 18/12/2022
 23932 00000983 C3                      	retn
 23933                                  
 23934                                  ; ----------------------------------------------------------------------
 23935                                  ;
 23936                                  ; procedure : TryToMovDOSHi
 23937                                  ;
 23938                                  ;		This tries to move DOS into HMA.
 23939                                  ;		Returns CY if it failed.
 23940                                  ;		If it succeeds returns with carry cleared.
 23941                                  ;
 23942                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 23943                                  ;		the A20 switching code in the low mem stub to be installed.
 23944                                  ; 
 23945                                  ; ----------------------------------------------------------------------
 23946                                  
 23947                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23948                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 23949                                  TryToMovDOSHi:
 23950                                  	; 11/12/2022
 23951                                  	; 27/03/2019 - Retro DOS v4.0
 23952                                  	; ds = cs
 23953 00000984 E81300                  	call	MovDOSHi
 23954 00000987 7210                    	jc	short ttldhx
 23955                                  
 23956                                  ;ifndef ROMDOS
 23957                                  	; 23/10/2022
 23958                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 23959                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 23960                                  	; 11/12/2022
 23961                                  	; ds = cs
 23962 00000989 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23963                                  ;else
 23964                                  ;	..
 23965                                  ;endif ; ROMDOS
 23966                                  
 23967                                  	; 11/12/2022
 23968                                  	; ds = cs
 23969 0000098D 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 23970                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23971 0000098F FF1E[7D02]              	call	far [dos_segreinit]
 23972                                  	;mov	byte [cs:runhigh],1
 23973 00000993 C606[6C02]01            	mov	byte [runhigh],1
 23974 00000998 F8                      	clc
 23975                                  ttldhx:
 23976 00000999 C3                      	retn
 23977                                  
 23978                                  ; ----------------------------------------------------------------------
 23979                                  ;
 23980                                  ; procedure : MovDOSHi
 23981                                  ;
 23982                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 23983                                  ;		For ROMDOS, the code is not actually moved, but the
 23984                                  ;		HMA is allocated and prepared for sub-allocation.
 23985                                  ;
 23986                                  ;		Returns : CY if it failed
 23987                                  ;
 23988                                  ; ----------------------------------------------------------------------
 23989                                  
 23990                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23991                                  MovDOSHi:
 23992                                  	; 14/05/2019
 23993                                  	; 27/03/2019 - Retro DOS v4.0
 23994                                  	; ds = cs
 23995 0000099A E8D600                  	call	AllocHMA
 23996 0000099D 7213                    	jc	short mdhx			; did we get HMA?
 23997 0000099F B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 23998 000009A2 8EC0                    	mov	es,ax
 23999                                  
 24000                                  ;ifndef ROMDOS
 24001                                  	; actually move the BIOS and DOS
 24002                                  
 24003                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24004                                  	; 24/03/2019
 24005                                  	
 24006                                  	; 23/10/2022
 24007 000009A4 E83200                  	call	MovBIOS				; First move BIOS into HMA
 24008                                  
 24009                                  	; ES:DI points to free HMA after BIOS
 24010                                  	
 24011                                  	; 14/05/2019
 24012                                  	; 24/03/2019 - Retro DOS v4.0
 24013                                  	;xor	di,di
 24014                                  	
 24015                                  	; 23/10/2022
 24016                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 24017                                  	; 11/12/2022
 24018                                  	; ds = cs
 24019                                  	;mov	cx,[hi_doscod_size]		; when it is in HMA
 24020                                  	; 08/03/2025 (MiniDOS)
 24021 000009A7 8B0E[8102]              	mov	cx,[dos_code_size]	
 24022 000009AB E81100                  	call	MovDOS				; and move it
 24023                                  
 24024                                  	; ES:DI points to free HMA after DOS
 24025                                  ;else
 24026                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 24027                                  ;
 24028                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 24029                                  ;
 24030                                  ;endif ; ROMDOS
 24031                                  
 24032 000009AE E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 24033 000009B1 F8                      	clc
 24034                                  mdhx:
 24035 000009B2 C3                      	retn
 24036                                  
 24037                                  ; ----------------------------------------------------------------------
 24038                                  ;
 24039                                  ; procedure : MovDOSLo
 24040                                  ;
 24041                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 24042                                  ;
 24043                                  ; ----------------------------------------------------------------------
 24044                                  
 24045                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24046                                  
 24047                                  ;ifndef ROMDOS
 24048                                  
 24049                                  MovDOSLo:
 24050                                  	; 14/05/2019
 24051                                  	; 27/03/2019 - Retro DOS v4.0
 24052                                  	; ds = cs
 24053 000009B3 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 24054                                  	
 24055                                  	; 23/10/2022
 24056                                  	; 14/05/2019
 24057                                  	;inc	ax  ; skip MCB
 24058                                  	
 24059 000009B6 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 24060                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24061                                  	; 24/03/2019
 24062                                  	
 24063                                  	; 23/10/2022
 24064 000009B8 E81E00                  	call	MovBIOS
 24065                                  
 24066                                  ;------ ES:DI points memory immediately after BIOS
 24067                                  
 24068                                  	; 14/05/2019
 24069                                  	; NOTE: 
 24070                                  	;     Order of (RETRO) DOS kernel sections at memory:
 24071                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 24072                                  
 24073                                  	; 24/03/2019 - Retro DOS v4.0
 24074                                  	;xor	di,di	
 24075                                  
 24076                                  	; 23/10/2022
 24077                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 24078                                  	; 11/12/2022
 24079                                  	; ds = cs
 24080                                  	;mov	cx,[lo_doscod_size]		; low
 24081                                  	; 08/03/2025 (MiniDOS)
 24082 000009BB 8B0E[8102]              	mov	cx,[dos_code_size]
 24083                                  	;call	MovDOS
 24084                                  	;retn
 24085                                  	; 11/12/2022
 24086                                  	;jmp	short MovDOS
 24087                                  
 24088                                  ;endif ; ROMDOS
 24089                                  
 24090                                  ; 11/12/2022
 24091                                  
 24092                                  ; ----------------------------------------------------------------------
 24093                                  ;
 24094                                  ; procedure : MovDOS
 24095                                  ;
 24096                                  ;		Moves DOS code into requested area
 24097                                  ;
 24098                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24099                                  ;	     CX    - size of DOS code to be moved
 24100                                  ;
 24101                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24102                                  ;
 24103                                  ; ----------------------------------------------------------------------
 24104                                  
 24105                                  	; 11/12/2022
 24106                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24107                                  
 24108                                  ;ifndef ROMDOS
 24109                                  
 24110                                  MovDOS:
 24111                                  	; 14/05/2019
 24112                                  	; 27/03/2019 - Retro DOS v4.0
 24113                                  
 24114                                  	; 11/12/2022
 24115                                  	; ds = cs
 24116                                  
 24117                                  	; 23/10/2022
 24118                                  	;push	ds ; *//
 24119                                  	
 24120 000009BF 06                      	push	es
 24121 000009C0 57                      	push	di
 24122                                  
 24123                                  	; 11/12/2022
 24124 000009C1 1E                      	push	ds ; *// ; 11/12/202
 24125                                  
 24126                                  	; 29/04/2019
 24127 000009C2 C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 24128                                  	; 23/10/2022
 24129                                  	;lds	si,[cs:dosinit]
 24130                                  	; 03/09/2023
 24131 000009C6 89F0                    	mov	ax,si
 24132                                  
 24133 000009C8 F3A4                    	rep	movsb
 24134                                  
 24135 000009CA 1F                      	pop	ds ; *// ; 11/12/2022
 24136                                  
 24137 000009CB 5B                      	pop	bx				; get back offset into which
 24138                                  						;  DOS was moved
 24139                                  	; 03/09/2023
 24140                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24141                                  						;  wants to run
 24142                                  	; 03/09/2023
 24143                                  	;mov	ax,[dosinit]
 24144                                  	; ax = [dosinit]
 24145                                  
 24146 000009CC 29D8                    	sub	ax,bx
 24147 000009CE E8B502                  	call	off_to_para
 24148 000009D1 5B                      	pop	bx				; get the segment at which
 24149                                  						;  we moved DOS into
 24150 000009D2 29C3                    	sub	bx,ax				; Adjust segment
 24151                                  	
 24152                                  	; 11/12/2022
 24153                                  	; 23/10/2022
 24154                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24155                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24156                                  	; 11/12/2022
 24157 000009D4 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 24158                                  		
 24159                                  	; 27/03/2019
 24160                                  	;pop	ds ; *//
 24161                                  	; ds = cs
 24162                                  	;mov	[FINAL_DOS_LOCATION],bx
 24163                                  
 24164 000009D8 C3                      	retn
 24165                                  
 24166                                  ;endif ;ROMDOS
 24167                                  
 24168                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24169                                  ; 24/03/2019
 24170                                  ; ----------------------------------------------------------------------
 24171                                  ;
 24172                                  ; procedure : MovBIOS
 24173                                  ;
 24174                                  ;		Moves BIOS code into requested segment
 24175                                  ;
 24176                                  ;	In : ES - segment to which BIOS is to be moved
 24177                                  ;		  ( it moves always into offset BCode_Start)
 24178                                  ;
 24179                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 24180                                  ;
 24181                                  ; ----------------------------------------------------------------------
 24182                                  
 24183                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24184                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24185                                  
 24186                                  ;ifndef ROMDOS
 24187                                  
 24188                                  MovBIOS: ; proc	near
 24189                                  	; 11/12/2022
 24190 000009D9 1E                      	push	ds ; ds = cs
 24191                                  	;
 24192                                  	; 23/10/2022
 24193                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 24194                                  	; 17/09/2023 ; 08/04/2024
 24195 000009DA 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 24196                                  	;mov	si,BCODE_START ; mov si,30h
 24197                                  	; 09/12/2022
 24198 000009DE BE[3000]                	mov	si,BCODESTART ; 30h
 24199 000009E1 89F7                    	mov	di,si
 24200                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24201 000009E3 B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 24202 000009E6 29F1                    	sub	cx,si				; size of BIOS
 24203 000009E8 D1E9                    	shr	cx,1				; Both the labels are para
 24204                                  						;  aligned
 24205 000009EA F3A5                    	rep	movsw
 24206                                  	
 24207                                  	; 11/12/2022
 24208 000009EC 1F                      	pop	ds ; ds = cs
 24209                                  	;
 24210 000009ED 06                      	push	es
 24211 000009EE 57                      	push	di				; save end of BIOS
 24212 000009EF 8CC0                    	mov	ax,es
 24213                                  	;
 24214                                  	; 11/12/2022
 24215                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 24216                                  	;;call	dword ptr cs:_seg_reinit_ptr
 24217                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 24218                                  	; ds = cs
 24219 000009F1 A3[8803]                	mov	[BCodeSeg],ax
 24220 000009F4 FF1E[8502]              	call	far [seg_reinit_ptr]
 24221                                  	;
 24222 000009F8 5F                      	pop	di
 24223 000009F9 07                      	pop	es				; get back end of BIOS
 24224 000009FA C3                      	retn
 24225                                  
 24226                                  ;MovBIOS endp
 24227                                  
 24228                                  ;endif ; ROMDOS
 24229                                  
 24230                                  ; 11/12/2022
 24231                                  %if 0
 24232                                  
 24233                                  ; 24/03/2019
 24234                                  
 24235                                  ; ----------------------------------------------------------------------
 24236                                  ;
 24237                                  ; procedure : MovDOS
 24238                                  ;
 24239                                  ;		Moves DOS code into requested area
 24240                                  ;
 24241                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24242                                  ;	     CX    - size of DOS code to be moved
 24243                                  ;
 24244                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24245                                  ;
 24246                                  ; ----------------------------------------------------------------------
 24247                                  
 24248                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24249                                  
 24250                                  ;ifndef ROMDOS
 24251                                  
 24252                                  MovDOS:
 24253                                  	; 14/05/2019
 24254                                  	; 27/03/2019 - Retro DOS v4.0
 24255                                  
 24256                                  	; 11/12/2022
 24257                                  	; ds = cs
 24258                                  
 24259                                  	; 23/10/2022
 24260                                  	;push	ds ; *//
 24261                                  	
 24262                                  	push	es
 24263                                  	push	di
 24264                                  
 24265                                  	; 11/12/2022
 24266                                  	push	ds ; *// ; 11/12/202
 24267                                  
 24268                                  	; 29/04/2019
 24269                                  	lds	si,[dosinit] ; 11/12/2022
 24270                                  	; 23/10/2022
 24271                                  	;lds	si,[cs:dosinit]
 24272                                  	; 03/09/2023
 24273                                  	mov	ax,si
 24274                                  
 24275                                  	rep	movsb
 24276                                  
 24277                                  	pop	ds ; *// ; 11/12/2022
 24278                                  
 24279                                  	pop	bx				; get back offset into which
 24280                                  						;  DOS was moved
 24281                                  	;mov	ax,[dosinit] ; 03/09/2023
 24282                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24283                                  						;  wants to run
 24284                                  	sub	ax,bx
 24285                                  	call	off_to_para
 24286                                  	pop	bx				; get the segment at which
 24287                                  						;  we moved DOS into
 24288                                  	sub	bx,ax				; Adjust segment
 24289                                  	
 24290                                  	; 11/12/2022
 24291                                  	; 23/10/2022
 24292                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24293                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24294                                  	; 11/12/2022
 24295                                  	mov	[CURRENT_DOS_LOCATION],bx
 24296                                  		
 24297                                  	; 27/03/2019
 24298                                  	;pop	ds ; *//
 24299                                  	; ds = cs
 24300                                  	;mov	[FINAL_DOS_LOCATION],bx
 24301                                  
 24302                                  	retn
 24303                                  
 24304                                  ;endif ;ROMDOS
 24305                                  
 24306                                  %endif
 24307                                  
 24308                                  ; ----------------------------------------------------------------------
 24309                                  ;
 24310                                  ; procedure : AllocMemForDOS
 24311                                  ;
 24312                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 24313                                  ;
 24314                                  ;	Out : AX - seg of allocated memoryblock
 24315                                  ;
 24316                                  ; ----------------------------------------------------------------------
 24317                                  
 24318                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24319                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24320                                  
 24321                                  ;ifndef ROMDOS
 24322                                  
 24323                                  AllocMemForDOS:
 24324                                  	; 11/12/2022
 24325                                  	; 14/05/2019
 24326                                  	; 27/03/2019 - Retro DOS v4.0
 24327                                  	; ds = cs
 24328                                  	;mov	ax,BCode_end
 24329                                  	;sub	ax,BCode_start		; BIOS code size
 24330                                  	; 23/10/2022
 24331 000009FB B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 24332                                  					; 30/12/2022
 24333                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24334                                  	;sub	ax,BCODE_START ; 30h
 24335                                  	; 09/12/2022
 24336 000009FE 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 24337                                  	; 24/03/2019 - Retro DOS v4.0 
 24338                                  	; 02/11/2022
 24339                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 24340                                  	; 11/12/2022
 24341                                  	; ds = cs
 24342                                  	;add	ax,[lo_doscod_size]
 24343                                  	; 08/03/2025 (MiniDOS)
 24344 00000A01 0306[8102]              	add	ax,[dos_code_size]
 24345 00000A05 83C00F                  	add	ax,15
 24346 00000A08 E87B02                  	call	off_to_para			; convert to para
 24347                                  	; 23/10/2022
 24348                                  	; 14/05/2019
 24349                                  	;inc	ax ; + 1 paragraph for MCB
 24350 00000A0B 09DB                    	or	bx,bx				; M012
 24351 00000A0D 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 24352 00000A0F 741A                    	jz	short update_arena		; M012
 24353 00000A11 B448                    	mov	ah,48h				; request DOS
 24354 00000A13 CD21                    	int	21h
 24355 00000A15 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 24356                                   	; 23/10/2022
 24357                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 24358 00000A17 83E803                  	sub	ax,3				; Take care ORG 30h of
 24359                                  						;  BIOS code
 24360 00000A1A 8EC0                    	mov	es,ax
 24361                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 24362                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 24363                                  	; 14/05/2019
 24364                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 24365                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 24366                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 24367                                  	; 23/10/2022
 24368 00000A1C 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 24369 00000A23 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 24370                                  
 24371 00000A2A C3                      	retn
 24372                                  
 24373                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 24374                                  ;	  using DOS itself causes an arena to be generated.
 24375                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 24376                                  ;	  assume that the device drivers are loaded into
 24377                                  ;	  the first arena. For this reason, MagicDrv's
 24378                                  ;	  main device driver header arena is manually
 24379                                  ;	  truncated from the arena chain, and the space
 24380                                  ;	  for DOS is allocated using the following
 24381                                  ;	  simple code, which also assumes that the
 24382                                  ;	  first arena is the free one where DOS's low
 24383                                  ;	  stub will go.
 24384                                  ;
 24385                                  ; M012 : BEGIN
 24386                                  
 24387                                  	; 23/10/2022
 24388                                  update_arena:
 24389 00000A2B 1E                      	push	ds ; ds = cs
 24390 00000A2C 57                      	push	di
 24391 00000A2D 51                      	push	cx
 24392 00000A2E 52                      	push	dx
 24393                                  	; 23/10/2022
 24394                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 24395                                  	; 11/12/2022
 24396                                  	; ds = cs 
 24397 00000A2F C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 24398 00000A33 4F                      	dec	di
 24399 00000A34 4F                      	dec	di				; Arena head is immediately
 24400                                  						;  before sysvar
 24401 00000A35 8E05                    	mov	es,[di]				; es = arena head
 24402                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 24403 00000A37 268B0E0300              	mov	cx,[es:3]
 24404 00000A3C 39D9                    	cmp	cx,bx				; is it sufficient ?
 24405 00000A3E 7227                    	jb	short FatalErr			; no, fatal error
 24406                                  
 24407                                  	;mov	dl,[es:ARENA.SIGNATURE]
 24408 00000A40 268A160000              	mov	dl,[es:0]
 24409 00000A45 8CC0                    	mov	ax,es
 24410 00000A47 01D8                    	add	ax,bx				; ax = new arena head
 24411 00000A49 8905                    	mov	[di],ax				; store it in DOS data area
 24412 00000A4B 8ED8                    	mov	ds,ax
 24413                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 24414 00000A4D 88160000                	mov	[0],dl
 24415                                  	;mov	word [ARENA.OWNER],0		; free
 24416 00000A51 C70601000000            	mov	word [1],0
 24417 00000A57 29D9                    	sub	cx,bx				; size of the new block
 24418                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 24419 00000A59 890E0300                	mov	[3],cx
 24420 00000A5D 8CC0                    	mov	ax,es				; return seg to the caller
 24421                                  	; 23/10/2022
 24422                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 24423 00000A5F 83E803                  	sub	ax,3				;  BIOS code
 24424 00000A62 5A                      	pop	dx
 24425 00000A63 59                      	pop	cx
 24426 00000A64 5F                      	pop	di
 24427 00000A65 1F                      	pop	ds ; ds = cs
 24428 00000A66 C3                      	retn
 24429                                  ;
 24430                                  ; M012 : END
 24431                                  ;
 24432                                  FatalErr:
 24433 00000A67 0E                      	push	cs
 24434 00000A68 1F                      	pop	ds
 24435 00000A69 BA[3409]                	mov	dx,FEmsg
 24436 00000A6C B409                    	mov	ah,9
 24437 00000A6E CD21                    	int	21h 		; DOS - PRINT STRING
 24438                                  				; DS:DX -> string terminated by "$"
 24439                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 24440 00000A70 E9C707                  	jmp	stall
 24441                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 24442                                  	;cli
 24443                                  	;hlt
 24444                                  
 24445                                  ;endif ;ROMDOS
 24446                                  
 24447                                  ; 25/03/2019 - Retro DOS v4.0
 24448                                  
 24449                                  ; ----------------------------------------------------------------------
 24450                                  ;
 24451                                  ; procedure : AllocHMA
 24452                                  ;
 24453                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 24454                                  ;	  up there. If it gets any sort of error, it will return with
 24455                                  ;	  carry set so that we can resort to running low.
 24456                                  ;
 24457                                  ;	It also returns ES: -> 0ffffh if it returns success
 24458                                  ;
 24459                                  ; ----------------------------------------------------------------------
 24460                                  
 24461                                  AllocHMA:
 24462                                  ;	cas note:  The pre-286 check is no longer needed here since the
 24463                                  ;		   presence of XMS is sufficient. However, this code hasn't
 24464                                  ;		   been deleted because it can be recycled for skipping the
 24465                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 24466                                  ;		   in the case of a pre-286.
 24467                                  
 24468                                  ;;	see if we're running on a pre-286. If not, force low.
 24469                                  ;
 24470                                  ;	xor	ax,ax
 24471                                  ;	pushf			; save flags (like int)
 24472                                  ;	push	ax
 24473                                  ;	popf
 24474                                  ;	pushf
 24475                                  ;	pop	ax
 24476                                  ;	popf			; restore original flags (like int)
 24477                                  ;	and	ax,0F000h
 24478                                  ;	cmp	ax,0F000h	; 8088/8086?
 24479                                  ;	jz	short grab_hma_error
 24480                                  
 24481                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24482                                  	; (SYSINIT:0A26h)
 24483                                  
 24484                                  	; 13/04/2024 - Retro DOS v5.0
 24485                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C41h) 
 24486                                  
 24487 00000A73 1E                      	push	ds
 24488                                  	;;mov	ax,Bios_Data
 24489                                  	;mov	ax,KERNEL_SEGMENT
 24490                                  	; 21/10/2022
 24491 00000A74 B87000                  	mov	ax,DOSBIODATASEG ; 70h
 24492 00000A77 8ED8                    	mov	ds,ax
 24493                                  
 24494 00000A79 E84A00                  	call	IsXMSLoaded
 24495 00000A7C 7545                    	jnz	short grabhma_error
 24496                                  
 24497 00000A7E B81043                  	mov	ax,4310h
 24498 00000A81 CD2F                    	int	2Fh		; get the vector into es:bx
 24499                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 24500                                  		; Return: ES:BX -> driver entry point
 24501                                  
 24502 00000A83 891E[0E00]              	mov	[xms],bx
 24503                                  	;mov	[0Eh], bx
 24504 00000A87 8C06[1000]              	mov	[xms+2],es
 24505                                  	;mov	[10h],es
 24506                                  
 24507 00000A8B B401                    	mov	ah,1		; request HMA
 24508 00000A8D BAFFFF                  	mov	dx,0FFFFh
 24509                                  	;call	dword ptr ds:0Eh
 24510 00000A90 FF1E[0E00]              	call	far [xms]
 24511 00000A94 48                      	dec	ax
 24512 00000A95 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 24513                                  
 24514                                  ;------ Himem may be lying because it has allocated mem for int 15
 24515                                  
 24516 00000A97 B488                    	mov	ah,88h
 24517 00000A99 CD15                    	int	15h
 24518                                  		; Get Extended Memory Size
 24519                                  		; Return: CF clear on success
 24520                                  		; AX = size of memory above 1M in K
 24521 00000A9B 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 24522                                  	;jb	short grabhma_error
 24523                                  	; 11/12/2022
 24524 00000A9E 7224                    	jb	short grabhma_err ; cf=1
 24525                                  allocHMA_1:
 24526 00000AA0 B405                    	mov	ah,5		; localenableA20
 24527                                  	;call	dword ptr ds:0Eh
 24528 00000AA2 FF1E[0E00]              	call	far [xms]
 24529 00000AA6 48                      	dec	ax
 24530 00000AA7 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 24531                                  
 24532 00000AA9 E89D01                  	call	IsVDiskInstalled
 24533 00000AAC 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 24534                                  
 24535 00000AAE B8FFFF                  	mov	ax,0FFFFh
 24536 00000AB1 8EC0                    	mov	es,ax
 24537 00000AB3 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 24538 00000ABA 26813E10003412          	cmp	word [es:10h],1234h
 24539                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 24540                                  	; 11/12/2022
 24541 00000AC1 7401                    	je	short allocHMA_ok	
 24542                                  
 24543                                  ; 11/12/2022
 24544                                  ;	; 11/12/2022
 24545                                  ;	; cf=0
 24546                                  ;	;clc
 24547                                  ;	pop	ds
 24548                                  ;	retn
 24549                                  
 24550                                  grabhma_error:
 24551 00000AC3 F9                      	stc
 24552                                  	; 11/12/022
 24553                                  grabhma_err:	; cf=1
 24554                                  allocHMA_ok:	; cf=0
 24555 00000AC4 1F                      	pop	ds
 24556 00000AC5 C3                      	retn
 24557                                  
 24558                                  ; ----------------------------------------------------------------------
 24559                                  ;
 24560                                  ; procedure : IsXMSLoaded
 24561                                  ;
 24562                                  ;             Checks whether a XMS driver is loaded
 24563                                  ;
 24564                                  ; Returns : Z flag set if XMS driver loaded
 24565                                  ;           Z flag reset if no XMS drivers are present
 24566                                  ;
 24567                                  ; ----------------------------------------------------------------------
 24568                                  
 24569                                  IsXMSLoaded:
 24570 00000AC6 B80043                  	mov	ax,4300h
 24571 00000AC9 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 24572                                  				; Return: AL = 80h XMS driver installed
 24573                                  				; AL <> 80h no driver
 24574 00000ACB 3C80                    	cmp	al,80h		; XMS installed?
 24575 00000ACD C3                      	retn
 24576                                  
 24577                                  ; ----------------------------------------------------------------------
 24578                                  ; procedure : FTryToMovDOSHi
 24579                                  ;
 24580                                  ;		Called from HMA suballoc calls
 24581                                  ;	
 24582                                  ; ----------------------------------------------------------------------
 24583                                  
 24584                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24585                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 24586                                  
 24587                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24588                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 24589                                  
 24590                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 24591                                  
 24592                                  FTryToMovDOSHi:	; proc	far
 24593                                  
 24594 00000ACE 50                      	push	ax
 24595 00000ACF 53                      	push	bx
 24596 00000AD0 51                      	push	cx
 24597 00000AD1 52                      	push	dx
 24598 00000AD2 56                      	push	si
 24599 00000AD3 57                      	push	di
 24600 00000AD4 1E                      	push	ds
 24601 00000AD5 06                      	push	es
 24602                                  
 24603                                  	; 23/10/2022
 24604                                  	; 27/03/2019 - Retro DOS v4.0
 24605                                  	; 11/12/2022
 24606 00000AD6 0E                      	push	cs
 24607 00000AD7 1F                      	pop	ds
 24608                                  
 24609                                  	;cmp	byte [cs:runhigh],0FFh
 24610                                  	; 11/12/2022
 24611 00000AD8 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24612 00000ADD 7503                    	jne	short _ftymdh_1
 24613                                  
 24614                                  	; ds = cs
 24615 00000ADF E8A2FE                  	call	TryToMovDOSHi
 24616                                  _ftymdh_1:
 24617 00000AE2 07                      	pop	es
 24618 00000AE3 1F                      	pop	ds
 24619 00000AE4 5F                      	pop	di
 24620 00000AE5 5E                      	pop	si
 24621 00000AE6 5A                      	pop	dx
 24622 00000AE7 59                      	pop	cx
 24623 00000AE8 5B                      	pop	bx
 24624 00000AE9 58                      	pop	ax
 24625                                  
 24626 00000AEA CB                      	retf
 24627                                  
 24628                                  ; ----------------------------------------------------------------------
 24629                                  ;
 24630                                  ; following piece of code will be moved into a para boundary. And the para
 24631                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 24632                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 24633                                  ; to determine free extended memory.
 24634                                  ;
 24635                                  ; For more details read "power programming" column by Ray Duncan in the
 24636                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 24637                                  ;
 24638                                  ; ----------------------------------------------------------------------
 24639                                  
 24640                                  	; 30/12/2023 - Retro DOS 5.0
 24641 00000AEB 00                      	db	0
 24642                                  
 24643                                  ; 13/04/2024
 24644                                  ;align 2
 24645                                  
 24646                                  	; 30/12/2023
 24647                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 24648                                  
 24649                                  StartVDHead:
 24650                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 24651                                  
 24652 00000AEC 00000000                	dd	0		; link to next device driver
 24653 00000AF0 0080                    	dw	8000h		; device attribute
 24654 00000AF2 0000                    	dw	0		; strategy routine offset
 24655 00000AF4 0000                    	dw	0		; interrupt routine offset
 24656 00000AF6 01                      	db	1		; number of units
 24657                                  	;db	7 dup(0) 
 24658 00000AF7 00<rep 7h>              	times	7 db 0 		; reserved area
 24659                                  VDiskSig1:
 24660 00000AFE 564449534B              	db	'VDISK'
 24661                                  
 24662                                  VLEN1	equ	($-VDiskSig1)
 24663                                  
 24664 00000B03 202056332E33            	db	'  V3.3'	; vdisk label
 24665                                  	;db	15 dup (0)	; pad
 24666 00000B09 00<rep Fh>              	times	15 db 0
 24667 00000B18 0000                    	dw	0		; bits 0-15 of free HMA
 24668 00000B1A 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 24669                                  VDInt19:
 24670 00000B1B EA                      	db	0EAh		; jmp to old vector
 24671                                  OldVDInt19:
 24672 00000B1C 00000000                	dd	0		; Saved int 19 vector
 24673                                  
 24674                                  EndVDHead: ; label byte
 24675                                  
 24676                                  VDiskHMAHead:	
 24677 00000B20 000000                  	db	0,0,0		; non-bootable disk
 24678                                  VDiskSig2:
 24679 00000B23 564449534B              	db	'VDISK'
 24680                                  
 24681                                  VLEN2	equ	($-VDiskSig2)
 24682                                  
 24683 00000B28 332E33                  	db	'3.3'		; OEM - signature
 24684 00000B2B 8000                    	dw	128		; number of bytes/sector
 24685 00000B2D 01                      	db	1		; sectors/cluster
 24686 00000B2E 0100                    	dw	1		; reserved sectors
 24687 00000B30 01                      	db	1		; number of FAT copies
 24688 00000B31 4000                    	dw	64		; number of root dir entries
 24689 00000B33 0002                    	dw	512		; number of sectors
 24690 00000B35 FE                      	db	0FEh		; media descriptor
 24691 00000B36 0600                    	dw	6		; number of sectors/FAT
 24692 00000B38 0800                    	dw	8		; sectors per track
 24693 00000B3A 0100                    	dw	1		; number of heads
 24694 00000B3C 0000                    	dw	0		; number of hidden sectors
 24695 00000B3E 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 24696                                  
 24697                                  EndVDiskHMAHead: ; label byte
 24698                                  
 24699                                  ; ----------------------------------------------------------------------
 24700                                  ;
 24701                                  ; procedure : InstVDiskHeader
 24702                                  ;
 24703                                  ;             Installs the VDISK header to reserve the 64k of HMA
 24704                                  ;	      It puts a 32 byte header at 10000:0 and
 24705                                  ;	      another header at (seg of int19):0
 24706                                  ;
 24707                                  ; Inputs : None
 24708                                  ;
 24709                                  ; Outputs : None
 24710                                  ;
 24711                                  ; USES : DS,SI,AX,CX,DX
 24712                                  ;
 24713                                  ; ----------------------------------------------------------------------
 24714                                  
 24715                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24716                                  
 24717                                  InstVDiskHeader:
 24718 00000B40 31C0                    	xor	ax,ax
 24719 00000B42 8ED8                    	mov	ds,ax			; seg of int vect table
 24720                                  
 24721                                  ;-------------- save old int 19 vector
 24722                                  
 24723                                  	; 23/10/2022
 24724 00000B44 A16400                  	mov	ax,[19h*4]
 24725                                  	;mov	[OldVDInt19],ax
 24726 00000B47 2EA3[1C0B]              	mov	[cs:OldVDInt19],ax
 24727 00000B4B A16600                  	mov	ax,[19h*4+2]
 24728                                  	;mov	[OldVDInt19+2],ax
 24729 00000B4E 2EA3[1E0B]              	mov	[cs:OldVDInt19+2],ax
 24730                                  
 24731                                  ;-------------- calculate seg of new int 19 handler
 24732                                  
 24733 00000B52 B448                    	mov	ah,48h			; allocate memory
 24734                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 24735                                  	; 23/10/2022
 24736 00000B54 BB0400                  	mov	bx,4
 24737 00000B57 CD21                    	int	21h
 24738                                  
 24739                                  ;	if carry, fatal hanging error!!!!!
 24740                                  
 24741 00000B59 48                      	dec	ax			; point to arena
 24742 00000B5A 8EC0                    	mov	es,ax
 24743                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 24744 00000B5C 26C70601000800          	mov	word [es:1],8
 24745                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 24746 00000B63 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 24747 00000B6A 40                      	inc	ax
 24748 00000B6B 8EC0                    	mov	es,ax			; get back to allocated memory
 24749                                  
 24750                                  ;-------------- install new int 19 vector
 24751                                  
 24752 00000B6D FA                      	cli				; no reboots at this time
 24753                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 24754 00000B6E C70664002F00            	mov	word [19h*4],47
 24755 00000B74 A36600                  	mov	[19h*4+2],ax
 24756                                  
 24757                                  ;-------------- move the code into proper place
 24758                                  
 24759                                  	;mov	cx,(EndVDHead-StartVDHead)
 24760 00000B77 B93400                  	mov	cx,52
 24761 00000B7A BE[EC0A]                	mov	si,StartVDHead
 24762 00000B7D 31FF                    	xor	di,di
 24763 00000B7F 0E                      	push	cs
 24764 00000B80 1F                      	pop	ds
 24765 00000B81 FC                      	cld
 24766 00000B82 F3A4                    	rep	movsb
 24767 00000B84 FB                      	sti				; BUGBUG is sti OK now?
 24768                                  
 24769                                  ;-------------- mov the HMA VDisk head into HMA
 24770                                  
 24771                                  	; 23/10/2022
 24772 00000B85 57                      	push	di
 24773 00000B86 06                      	push	es
 24774                                  
 24775                                  	;mov	ax,0FFFFh
 24776                                  	;mov	es,ax
 24777                                  	; 03/09/2023
 24778 00000B87 49                      	dec	cx
 24779                                  	; cx = 0FFFFh
 24780 00000B88 8EC1                    	mov	es,cx
 24781                                  
 24782 00000B8A BF1000                  	mov	di,10h
 24783                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 24784 00000B8D B92000                  	mov	cx,32
 24785 00000B90 BE[200B]                	mov	si,VDiskHMAHead
 24786 00000B93 F3A4                    	rep	movsb			; ds already set to cs
 24787                                  
 24788 00000B95 5F                      	pop	di
 24789 00000B96 07                      	pop	es
 24790                                  
 24791 00000B97 C3                      	retn
 24792                                  
 24793                                  ; ----------------------------------------------------------------------
 24794                                  ; procedure : ClrVDISKHeader
 24795                                  ;
 24796                                  ;		Clears the first 32 bytes at 1MB boundary
 24797                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 24798                                  ;		left by previous DOS=HIGH session
 24799                                  ;
 24800                                  ; ----------------------------------------------------------------------
 24801                                  
 24802                                  struc desc
 24803 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 24804 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 24805 00000004 ??                       .hi_byte:	resb 	1		; address
 24806 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 24807 00000006 ????                     .reserved:	resw	1		;
 24808                                   .size:
 24809                                  endstruc
 24810                                  
 24811                                  		; 23/10/2022
 24812                                  bmove:		;label byte
 24813                                  
 24814                                  dummy:		;times desc.size db 0	; desc	<>
 24815 00000B98 00<rep 8h>              		times 8 db 0		 
 24816                                  gdt:		;times desc.size db 0	; desc	<>
 24817 00000BA0 00<rep 8h>              		times 8 db 0
 24818 00000BA8 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 24819 00000BAA 0000                    		dw	0
 24820 00000BAC 00                      		db	0
 24821 00000BAD 93                      		db	93h
 24822 00000BAE 0000                    		dw	0
 24823 00000BB0 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 24824 00000BB2 0000                    		dw	0
 24825 00000BB4 10                      		db	10h
 24826 00000BB5 93                      		db	93h
 24827 00000BB6 0000                    		dw	0
 24828                                  
 24829                                  rombios_code:	;times desc.size db 0	; desc	<>
 24830 00000BB8 00<rep 8h>              		times 8 db 0
 24831                                  temp_stack:	;times desc.size db 0	; desc	<>
 24832 00000BC0 00<rep 8h>              		times 8 db 0
 24833                                  
 24834 00000BC8 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 24835                                  
 24836                                  
 24837                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 24838                                  
 24839                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 24840                                  ; (SYSINIT:0CA6h)
 24841                                  
 24842                                  ClrVDISKHeader:	; proc	near
 24843                                  
 24844                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 24845                                  ;;-----------------------------------------------------------	      ;I070
 24846                                  ;; The following workaround get around a problem with the	      ;I070
 24847                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 24848                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 24849                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 24850                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 24851                                  ;; move crashes the system. We can do this because these	      ;I070
 24852                                  ;; systems clear all of memory on a cold boot.			      ;I070
 24853                                  ;								      ;I070
 24854                                  ;               in      al,64h         ; Test for password servr mode ;I070
 24855                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 24856                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 24857                                  ;                                      ; Check for Tortugas...	      ;I070
 24858                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 24859                                  ;               je      short ClrVDISKno                              ;I070
 24860                                  ;                                      ; Check for mod 30-286	      ;I070
 24861                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 24862                                  ;               jne     short ClrVDISKok			      ;I070
 24863                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 24864                                  ;								      ;I070
 24865                                  ;ClrVDISKok:							      ;I070
 24866                                  ;-----------------------------------------------------------	      ;I070
 24867                                  
 24868                                  	; 30/12/2023 - Retro DOS v5.0
 24869                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 24870                                  ClrVDISKHeader:
 24871 00000BE8 E464                    	in	al,64h	; 8042 keyboard controller status register
 24872                                  			; 7:  PERR    1=parity error in data received from keyboard
 24873                                  			;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 24874                                  			; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 24875                                  			; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 24876                                  			;    +------------------------------+-----------------------------------+
 24877                                  			; 4:  INH     0=keyboard communications inhibited
 24878                                  			; 3:  A2      0=60h was the port last written to, 1=64h was last
 24879                                  			; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 24880                                  			; 1:  IBF     1=input buffer full (keyboard can't accept data)
 24881                                  			; 0:  OBF     1=output buffer full (data from keyboard is available)
 24882 00000BEA A810                    	test	al,10h	; test bit 4 - Is keyboard inhibited?
 24883 00000BEC 7511                    	jnz	short ClrVDISKok ; No, go do block move
 24884                                  	; 30/12/2023
 24885                                  	; ds = cs	
 24886 00000BEE 813E[B902]F819          	cmp	word [sys_model_byte],19F8h ; check for TORTUGA models
 24887 00000BF4 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 24888                                  				 ; (while 8042 is disabled)
 24889 00000BF6 813E[B902]FC09          	cmp	word [sys_model_byte],9FCh ; check for PS/2 30-286 model
 24890 00000BFC 7501                    	jnz	short ClrVDISKok
 24891                                  ClrVDISKno:
 24892 00000BFE C3                      	retn
 24893                                  ; ---------------------------------------------------------------------------
 24894                                  	; 30/12/2023
 24895                                  ClrVDISKok:
 24896                                  	; 12/12/2022
 24897                                  	; ds = cs
 24898                                  
 24899                                  	; 30/12/2022 - Retro DOS v4.2
 24900                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 24901                                  
 24902 00000BFF 06                      	push	es
 24903 00000C00 8CC8                    	mov	ax,cs
 24904 00000C02 89C2                    	mov	dx,ax
 24905 00000C04 B10C                    	mov	cl,12
 24906 00000C06 D3EA                    	shr	dx,cl
 24907 00000C08 B104                    	mov	cl,4
 24908 00000C0A D3E0                    	shl	ax,cl
 24909 00000C0C 05[C80B]                	add	ax,ClrdVDISKHead
 24910 00000C0F 80D200                  	adc	dl,0
 24911                                  
 24912                                  	;; 23/10/2022
 24913                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 24914                                  	;mov	[cs:src_desc+2],ax
 24915                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 24916                                  	;mov	[cs:src_desc+4],dl
 24917                                  	; 12/12/2022
 24918                                  	;mov	[src_desc+desc.lo_word],ax
 24919 00000C12 A3[AA0B]                	mov	[src_desc+2],ax
 24920                                  	;mov	[src_desc+desc.hi_byte],dl
 24921 00000C15 8816[AC0B]              	mov	[src_desc+4],dl
 24922                                  
 24923 00000C19 B91000                  	mov	cx,16	; 16 words
 24924 00000C1C 0E                      	push	cs
 24925 00000C1D 07                      	pop	es
 24926 00000C1E BE[980B]                	mov	si,bmove
 24927 00000C21 B487                    	mov	ah,87h
 24928 00000C23 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 24929                                  			; CX = number of words to move 
 24930                                  			; ES:SI -> global descriptor table
 24931                                  			; Return: CF set on error, AH = status
 24932 00000C25 07                      	pop	es
 24933 00000C26 C3                      	retn
 24934                                  
 24935                                  ; ----------------------------------------------------------------------
 24936                                  ;
 24937                                  ; procedure : SaveFreeHMAPtr
 24938                                  ;
 24939                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 24940                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 24941                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 24942                                  ;		the offset.
 24943                                  ;
 24944                                  ; Inputs : ES:DI - pointer to free HMA
 24945                                  ; Output : FreeHMAPtr in BIOS data segment updated
 24946                                  ;
 24947                                  ; ----------------------------------------------------------------------
 24948                                  
 24949                                  SaveFreeHMAPtr:
 24950                                  	; 03/09/2023
 24951 00000C27 1E                      	push	ds
 24952 00000C28 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 24953 00000C2B 8ED8                    	mov	ds,ax
 24954                                  	;
 24955 00000C2D 8CC3                    	mov	bx,es
 24956 00000C2F B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 24957                                  	; 03/09/2023
 24958 00000C32 A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 24959                                  	;
 24960 00000C35 29D8                    	sub	ax,bx
 24961 00000C37 83C70F                  	add	di,15		   ; para round
 24962 00000C3A 83E7F0                  	and	di,0FFF0h
 24963 00000C3D B104                    	mov	cl,4
 24964 00000C3F D3E0                    	shl	ax,cl
 24965 00000C41 29C7                    	sub	di,ax
 24966                                  	;
 24967                                  	; 03/09/2023
 24968                                  	;push	ds
 24969                                  	;;mov	ax,Bios_Data ; 0070h
 24970                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 24971                                  	; 21/10/2022
 24972                                  	; 03/09/2023
 24973                                  	;mov	ax,DOSBIODATASEG ; 0070h
 24974                                  	;mov	ds,ax
 24975                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 24976 00000C43 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 24977                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 24978 00000C47 1F                      	pop	ds
 24979 00000C48 C3                      	retn
 24980                                  
 24981                                  ; ----------------------------------------------------------------------
 24982                                  ;
 24983                                  ; procedure : IsVDiskInstalled
 24984                                  ;
 24985                                  ;		Checks for the presence of VDISK header at 1MB boundary
 24986                                  ;		& INT 19 vector
 24987                                  ;
 24988                                  ; Inputs  : A20 flag should be ON
 24989                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 24990                                  ;
 24991                                  ; ----------------------------------------------------------------------
 24992                                  
 24993                                  IsVDiskInstalled:
 24994 00000C49 31C0                    	xor	ax,ax
 24995 00000C4B 8ED8                    	mov	ds,ax
 24996 00000C4D 8E1E4E00                	mov	ds,[19*4+2]
 24997                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 24998                                  	; 23/10/2022
 24999 00000C51 BE1200                  	mov	si,12h ; 18
 25000                                  	;mov	cx,VLEN1 ; 5
 25001 00000C54 B90500                  	mov	cx,5
 25002 00000C57 0E                      	push	cs
 25003 00000C58 07                      	pop	es
 25004 00000C59 BF[FE0A]                	mov	di,VDiskSig1
 25005 00000C5C F3A6                    	rep	cmpsb
 25006 00000C5E 740F                    	je	short ivdins_retn
 25007 00000C60 B8FFFF                  	mov	ax,0FFFFh
 25008 00000C63 8ED8                    	mov	ds,ax
 25009                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 25010 00000C65 BE1300                  	mov	si,13h
 25011 00000C68 BF[230B]                	mov	di,VDiskSig2
 25012                                  	;;mov	cx,VLEN2  ; 5
 25013                                  	;mov	cx,5
 25014                                  	; 03/09/2023
 25015 00000C6B B105                    	mov	cl,5
 25016 00000C6D F3A6                    	rep	cmpsb
 25017                                  ivdins_retn: 
 25018 00000C6F C3                      	retn			; returns the Zero flag
 25019                                  
 25020                                  ; ----------------------------------------------------------------------
 25021                                  ;
 25022                                  ; procedure : CPMHack
 25023                                  ;
 25024                                  ;		Copies the code from 0:c0 into ffff:0d0h
 25025                                  ;		for CPM compatibility
 25026                                  ;
 25027                                  ; ----------------------------------------------------------------------
 25028                                  
 25029                                  	; 11/12/2022
 25030                                  CPMHack:
 25031 00000C70 1E                      	push	ds
 25032 00000C71 B9FFFF                  	mov	cx,0FFFFh
 25033 00000C74 8EC1                    	mov	es,cx		; ES = FFFF
 25034                                  	;xor	cx,cx
 25035                                  	; 11/12/2022
 25036 00000C76 41                      	inc	cx  ; cx = 0
 25037 00000C77 8ED9                    	mov	ds,cx		; DS = 0
 25038 00000C79 BEC000                  	mov	si,0C0h
 25039 00000C7C BFD000                  	mov	di,0D0h
 25040                                  	;mov	cx,5
 25041 00000C7F B105                    	mov	cl,5
 25042 00000C81 FC                      	cld
 25043 00000C82 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 25044 00000C84 1F                      	pop	ds
 25045 00000C85 C3                      	retn
 25046                                  
 25047                                  ; ----------------------------------------------------------------------
 25048                                  ;
 25049                                  ; procedure : off_to_para
 25050                                  ;
 25051                                  ; ----------------------------------------------------------------------
 25052                                  off_to_para:
 25053 00000C86 D1E8                    	shr	ax,1
 25054 00000C88 D1E8                    	shr	ax,1
 25055 00000C8A D1E8                    	shr	ax,1
 25056 00000C8C D1E8                    	shr	ax,1
 25057 00000C8E C3                      	retn
 25058                                  
 25059                                  ; ----------------------------------------------------------------------
 25060                                  ;**	TempCDS - Create (Temporary?) CDS
 25061                                  ;
 25062                                  ;	ENTRY	?? BUGBUG
 25063                                  ;		(DS) = SysInitSeg
 25064                                  ;	EXIT	?? BUGBUG
 25065                                  ;	USES	?? BUGBUG
 25066                                  ; ----------------------------------------------------------------------
 25067                                  
 25068                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25069                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25070                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25071                                  TempCDS:
 25072 00000C8F C43E[6D02]              	les	di,[DOSINFO]
 25073 00000C93 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 25074                                  
 25075                                  	;mov	cl,[es:di+20h]
 25076 00000C97 30ED                    	xor	ch,ch			; (cx) = # of block devices
 25077                                  
 25078 00000C99 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 25079                                  	;mov	[es:di+21h],cl	
 25080                                  
 25081                                  	;mov	al,cl
 25082                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 25083                                  	;;mov	ah,88
 25084                                  	;mul	ah			; (ax) = byte size for those CDSs
 25085                                  	; 30/12/2023
 25086 00000C9D B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 25087                                  	;mov	al,88
 25088 00000C9F F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 25089                                  
 25090 00000CA1 E85D05                  	call	ParaRound		; (ax) = paragraph size for CDSs
 25091 00000CA4 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 25092                                  
 25093                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 25094                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 25095                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 25096                                  ;		   variable which has the top of free memory for
 25097                                  ;		   device driver loads, etc.
 25098                                  
 25099 00000CA8 29C6                    	sub	si,ax
 25100                                  
 25101                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 25102                                  ;		that automatically updates alloclim every time we
 25103                                  ;		set up some new CDSs. Instead, I've added code
 25104                                  ;		which pre-allocates space for 26 CDSs. This
 25105                                  ;	        way we've got room for worst case CDSs before
 25106                                  ;		we place MagicDrv.sys
 25107                                  ;
 25108                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 25109                                  
 25110                                  	; 30/12/2022
 25111                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25112                                  	; (SYSINIT:0C52h)
 25113                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 25114                                  
 25115 00000CAA 26897518                	mov	[es:di+SYSI_CDS+2],si
 25116                                  	;mov	[es:di+18h],si
 25117 00000CAE 89F0                    	mov	ax,si
 25118 00000CB0 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 25119                                  	;mov	[word es:di+16h],0
 25120                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 25121 00000CB6 26C535                  	lds	si,[es:di]
 25122 00000CB9 8EC0                    	mov	es,ax
 25123 00000CBB 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 25124                                  
 25125                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 25126                                  ;	info from the corresponding DPB.
 25127                                  ;
 25128                                  ;	(cx) = count of CDSs left to process
 25129                                  ;	(es:di) = address of next CDS
 25130                                  
 25131                                  fooset:
 25132                                  	; 23/10/2022
 25133 00000CBD 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 25134 00000CC1 AB                      	stosw				; setup the root as the curdir
 25135                                  	
 25136                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25137                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25138                                  
 25139                                  	; 30/12/2022
 25140                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 25141 00000CC2 E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25142                                  
 25143                                  ;	(ds:si) = address of DPB
 25144                                  ;		 (si) = -1 if no drive
 25145                                  
 25146 00000CC5 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 25147 00000CC9 AB                      	stosw
 25148 00000CCA 2EFE06[A702]            	inc	byte [cs:DirStrng]
 25149 00000CCF 31C0                    	xor	ax,ax ; 0
 25150 00000CD1 51                      	push	cx
 25151                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 25152 00000CD2 B93F00                  	mov	cx,63	; 23/10/2022
 25153 00000CD5 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 25154                                  
 25155                                  ;	should handle the system that does not have any floppies.
 25156                                  ;	in this case,we are going to pretended there are two dummy floppies
 25157                                  ;	in the system. still they have dpb and cds,but we are going to
 25158                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 25159                                  ;	"invalid drive specification" message when the user try to
 25160                                  ;	access them.
 25161                                  ;
 25162                                  ;	(ax) = 0
 25163                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25164                                  ;	(ds:si) = Next DPB (-1 if none)
 25165                                  
 25166 00000CD7 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 25167 00000CDA 740C                    	je	short fooset_zero	; don't have any physical drive.
 25168                                  
 25169                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 25170                                  ;	if we are faking floppy drives then see if this cds being initialised
 25171                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 25172                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 25173                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 25174                                  ;	for dpb offsets look at inc\dpb.inc.
 25175                                  
 25176                                  	; 03/09/2023
 25177 00000CDC 41                      	inc	cx  ; cx = 1
 25178                                  
 25179 00000CDD 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 25180                                  	;cmp	byte [cs:fake_floppy_drv],1
 25181 00000CE2 750A                    	jne	short normcds 		; machine has floppy drives
 25182                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 25183                                  	;cmp	byte [si],1
 25184 00000CE4 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 25185 00000CE6 7706                    	ja	short normcds
 25186                                  
 25187                                  	; 30/12/2023
 25188                                  	; ax = 0
 25189                                  fooset_zero:
 25190 00000CE8 B103                    	mov	cl,3			; the next dbp pointer
 25191                                  					; AX should be zero here
 25192 00000CEA F3AB                    	rep	stosw
 25193                                  	; 30/12/2023
 25194                                  	;pop	cx
 25195 00000CEC EB0F                    	jmp	short get_next_dpb ; findcds
 25196                                  
 25197                                  ;	(ax) = 0
 25198                                  
 25199                                  	; 30/12/2023
 25200                                  ;fooset_zero:
 25201                                  	;mov	cl,3
 25202                                  	;rep	stosw
 25203                                  	;pop	cx
 25204                                  	;jmp	short fincds
 25205                                  
 25206                                  ;*	We have a "normal" DPB and thus a normal CDS.
 25207                                  ;
 25208                                  ;	(ax) = 0
 25209                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25210                                  ;	(ds:si) = Next DPB (-1 if none)
 25211                                  
 25212                                  normcds:
 25213                                  	; 30/12/2023
 25214                                  	;pop	cx
 25215                                  
 25216                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 25217                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 25218                                  ;	this media is a non-fat based one.
 25219                                  
 25220                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 25221                                  	; 23/10/2022
 25222                                  	;cmp	byte [si+8],0
 25223                                  	; 03/09/2023 (ax=0)
 25224 00000CEE 384408                  	cmp	[si+8],al ; 0
 25225 00000CF1 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 25226 00000CF3 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 25227                                  	;mov	ax,4000h
 25228                                  setnormcds:
 25229 00000CF6 AB                      	stosw				; curdir_flags
 25230 00000CF7 89F0                    	mov	ax,si
 25231 00000CF9 AB                      	stosw				; curdir_devptr
 25232 00000CFA 8CD8                    	mov	ax,ds
 25233 00000CFC AB                      	stosw
 25234                                  
 25235                                  get_next_dpb:				; entry point for fake_fooset_zero
 25236                                  	; 30/12/2022
 25237                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25238                                  	; 23/10/2022
 25239                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 25240                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25241                                  fincds:	; get_next_dpb
 25242                                  	; 30/12/2023
 25243 00000CFD 59                      	pop	cx
 25244                                  	; 30/12/2022
 25245                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25246 00000CFE B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 25247 00000D01 AB                      	stosw				; curdir_id
 25248 00000D02 AB                      	stosw				; curdir_id
 25249 00000D03 AB                      	stosw				; curdir_user_word
 25250 00000D04 B80200                  	mov	ax,2
 25251 00000D07 AB                      	stosw				; curdir_end
 25252 00000D08 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 25253 00000D0A AA                      	stosb
 25254 00000D0B AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 25255 00000D0C AB                      	stosw
 25256 00000D0D AB                      	stosw
 25257                                  
 25258 00000D0E E2AD                    	loop	fooset
 25259                                  	
 25260 00000D10 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 25261                                  	
 25262 00000D16 C3                      	retn
 25263                                  
 25264                                  ; ----------------------------------------------------------------------
 25265                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 25266                                  ;
 25267                                  ;	entry:
 25268                                  ;	   al == ASCII CAPS drive letter
 25269                                  ;
 25270                                  ;	exit:
 25271                                  ;	   ds:si -> DPB, or si = -1 if not found
 25272                                  ; ----------------------------------------------------------------------
 25273                                  
 25274                                  ; 30/12/2023
 25275                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 25276                                  
 25277                                  	; 30/12/2022
 25278                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 25279                                  	; 23/10/2022
 25280                                  get_dpb_for_drive_al:
 25281 00000D17 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 25282                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 25283 00000D1C C534                    	lds	si,[si]
 25284 00000D1E 2C41                    	sub	al,'A'
 25285                                  
 25286                                  get_dpb_for_drive_1:
 25287                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 25288 00000D20 3A04                    	cmp	al,[si]
 25289 00000D22 7408                    	je	short got_dpb_for_drive	;  done if so
 25290                                  
 25291 00000D24 C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25292 00000D27 83FEFF                  	cmp	si,-1
 25293 00000D2A 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 25294                                  
 25295                                  got_dpb_for_drive:
 25296 00000D2C C3                      	retn
 25297                                  
 25298                                  ;=======================================================================
 25299                                  
 25300                                  ;**	EndFile - Build DOS structures
 25301                                  ;
 25302                                  ; This procedure is called after the config.sys has been processed and
 25303                                  ; installable device drivers have been loaded (but before "install="
 25304                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 25305                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 25306                                  ; to allow for the safe EXECing of "install=" programs. All memory
 25307                                  ; above these structures is deallocated back to DOS.
 25308                                  ;
 25309                                  ;	ENTRY	?? BUGBUG
 25310                                  ;	EXIT	?? BUGBUG
 25311                                  ;	USES	?? BUGBUG
 25312                                  
 25313                                  ;=======================================================================
 25314                                  ; allocate files
 25315                                  ; ----------------------------------------------------------------------
 25316                                  
 25317                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25318                                  	; (SYSINIT:0CCDh)
 25319                                  
 25320                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25321                                  	; (SYSINIT:0E00h)
 25322                                  
 25323                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25324                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 25325                                  	
 25326                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 25327                                  
 25328                                  endfile:
 25329                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 25330                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 25331                                  ; to confbot.
 25332                                  
 25333                                  ;	if this procedure has been called to take care of install= command,
 25334                                  ;	   then we have to save es,si registers.
 25335                                  
 25336                                  	; 11/12/2022
 25337                                  	; ds = cs
 25338                                  
 25339                                  	; 23/10/2022
 25340                                  	; 31/03/2019
 25341 00000D2D 1E                      	push	ds
 25342                                  
 25343                                  	;;mov	ax,Bios_Data ; 0070h
 25344                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25345                                  	; 21/10/2022
 25346 00000D2E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25347 00000D31 8ED8                    	mov	ds,ax
 25348                                  
 25349                                  	;cmp	word [052Fh],0
 25350 00000D33 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 25351 00000D38 7505                    	jne	short multrk_flag_done
 25352                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25353                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 25354                                  	; 12/12/2022
 25355 00000D3A 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 25356                                  multrk_flag_done:
 25357                                  	; 23/10/2022
 25358                                  	; 31/03/2019
 25359 00000D3F 1F                      	pop	ds
 25360                                  
 25361                                  	; 11/12/2022
 25362                                  	; ds = cs
 25363                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 25364                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25365                                  	; (SYSINIT:0E14h)
 25366 00000D40 A1[A102]                	mov	ax,[CONFBOT]
 25367 00000D43 A3[A302]                	mov	[ALLOCLIM],ax
 25368                                  	; 23/10/2022
 25369                                  	;mov	ax, [cs:top_of_cdss]
 25370                                  	;mov	[cs:ALLOCLIM], ax 
 25371                                  
 25372                                  	; 11/12/2022
 25373                                  	; ds = cs
 25374                                  	;push	cs
 25375                                  	;pop	ds
 25376                                  	
 25377                                  	;mov	ax,[CONFBOT]
 25378                                  	;mov	[ALLOCLIM],ax
 25379                                  
 25380                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 25381                                  	;;;
 25382                                  	;;mov	ax,[cs:ALLOCLIM]
 25383                                  	;mov	ax,[ALLOCLIM]
 25384                                  	;mov	[cs:prev_alloclim],ax
 25385 00000D46 A3[6A03]                	mov	[prev_alloclim],ax
 25386                                  	;mov	ax,[cs:memhi]
 25387 00000D49 A1[6203]                	mov	ax,[memhi]
 25388                                  	;mov	[cs:prev_memhi],ax
 25389 00000D4C A3[6803]                	mov	[prev_memhi],ax
 25390                                  dosfts:
 25391                                  	;;;
 25392                                  
 25393 00000D4F E87936                  	call	round
 25394                                  
 25395                                  	; 11/12/2022
 25396                                  	; ds = cs
 25397 00000D52 A0[9D02]                	mov	al,[FILES]
 25398                                  	; 23/10/2022
 25399                                  	;mov	al,[cs:FILES]
 25400 00000D55 2C05                    	sub	al,5
 25401 00000D57 764B                    	jbe	short dofcbs
 25402                                  
 25403 00000D59 50                      	push	ax
 25404                                  	;mov	al,devmark_files ; 'F'
 25405 00000D5A B046                    	mov	al,'F'
 25406 00000D5C E81808                  	call	setdevmark		; set devmark for sfts (files)
 25407 00000D5F 58                      	pop	ax
 25408 00000D60 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25409                                  					;  it does sign extend.
 25410                                  	; 11/12/2022
 25411                                  	; ds = cs
 25412 00000D62 8B1E[6003]              	mov	bx,[memlo]
 25413 00000D66 8B16[6203]              	mov	dx,[memhi]
 25414 00000D6A C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25415                                  	; 23/10/2022
 25416                                  	;mov	bx,[cs:memlo]
 25417                                  	;mov	dx,[cs:memhi]
 25418                                  	;lds	di,[cs:DOSINFO]		
 25419                                  
 25420                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 25421 00000D6E C57D04                  	lds	di,[di+4]
 25422                                  
 25423                                  	;mov	[di+SF.SFLink],bx
 25424 00000D71 891D                    	mov	[di],bx
 25425 00000D73 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 25426                                  
 25427 00000D76 0E                      	push	cs
 25428 00000D77 1F                      	pop	ds
 25429                                  
 25430                                  	; 11/12/2022
 25431                                  	; ds = cs
 25432 00000D78 C43E[6003]              	les	di,[memlo]		;point to new sft
 25433                                  	; 23/10/2022
 25434                                  	;les	di,[cs:memlo]
 25435                                  
 25436                                  	;mov	word [es:di+SF.SFLink],-1
 25437 00000D7C 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 25438                                  	;mov	[es:di+SF.SFCount],ax
 25439 00000D81 26894504                	mov	[es:di+4],ax
 25440                                  	; 09/04/2024
 25441 00000D85 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25442                                  	;mov	bl,59
 25443 00000D87 F6E3                    	mul	bl			;ax = number of bytes to clear
 25444 00000D89 89C1                    	mov	cx,ax
 25445                                  	; 11/12/2022
 25446                                  	; ds = cs
 25447 00000D8B 0106[6003]              	add	[memlo],ax		;allocate memory
 25448                                  	; 23/10/2022
 25449                                  	;add	[cs:memlo],ax
 25450 00000D8F B80600                  	mov	ax,6
 25451                                  	; 11/12/2022
 25452 00000D92 0106[6003]              	add	[memlo],ax		;remember the header too
 25453                                  	;add	[cs:memlo],ax
 25454                                  	; 11/12/2022
 25455 00000D96 800E[9C15]02            	or	byte [setdevmarkflag],for_devmark ; 2
 25456                                  	; 23/10/2022
 25457                                  	;or	byte [cs:setdevmarkflag],2
 25458 00000D9B E82D36                  	call	round			; check for mem error before the stosb
 25459 00000D9E 01C7                    	add	di,ax
 25460 00000DA0 31C0                    	xor	ax,ax
 25461 00000DA2 F3AA                    	rep	stosb			;clean out the stuff
 25462                                  
 25463                                  ; allocate fcbs
 25464                                  ; ----------------------------------------------------------------------
 25465                                  
 25466                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25467                                  	; (SYSINIT:0D48h)
 25468                                  dofcbs:
 25469                                  	; 11/12/2022
 25470                                  	; ds = cs
 25471                                  	;push	cs
 25472                                  	;pop	ds
 25473 00000DA4 E82436                  	call	round
 25474                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 25475 00000DA7 B058                    	mov	al,'X'
 25476 00000DA9 E8CB07                  	call	setdevmark
 25477                                  	; 11/12/2022
 25478                                  	; ds = cs
 25479 00000DAC A0[9E02]                	mov	al,[FCBS]
 25480                                  	;mov	al,[cs:FCBS]
 25481 00000DAF 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25482                                  					;  it does sign extend.
 25483                                  	; 11/12/2022
 25484 00000DB1 8B1E[6003]              	mov	bx,[memlo]
 25485 00000DB5 8B16[6203]              	mov	dx,[memhi]
 25486 00000DB9 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25487                                  	; 23/10/2022
 25488                                  	;mov	bx,[cs:memlo]
 25489                                  	;mov	dx,[cs:memhi]
 25490                                  	;lds	di,[cs:DOSINFO]
 25491                                  
 25492                                  	;mov	[di+SYSI_FCB],bx
 25493                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 25494                                  	; 23/10/2022
 25495 00000DBD 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 25496 00000DC0 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 25497                                  
 25498 00000DC3 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 25499 00000DC8 30FF                    	xor	bh,bh
 25500                                  	;mov	[di+SYSI_KEEP],bx
 25501 00000DCA 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 25502                                  
 25503 00000DCD 0E                      	push	cs
 25504 00000DCE 1F                      	pop	ds
 25505                                  	
 25506 00000DCF C43E[6003]              	les	di,[memlo]		;point to new table
 25507                                  	;mov	word [es:di+SF.SFLink],-1
 25508 00000DD3 26C705FFFF              	mov	word [es:di],-1
 25509                                  	;mov	[es:di+SF.SFCount],ax
 25510                                  	; 02/11/2022
 25511 00000DD8 26894504                	mov	[es:di+4],ax
 25512 00000DDC B33B                    	mov	bl,SF_ENTRY.size ; 59
 25513 00000DDE 89C1                    	mov	cx,ax
 25514 00000DE0 F6E3                    	mul	bl			;ax = number of bytes to clear
 25515 00000DE2 0106[6003]              	add	[memlo],ax		;allocate memory
 25516                                  	;mov	ax,6
 25517 00000DE6 B80600                  	mov	ax,SF.size-2 ; 6
 25518 00000DE9 0106[6003]              	add	[memlo],ax		;remember the header too
 25519                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25520 00000DED 800E[9C15]02            	or	byte [setdevmarkflag],2
 25521 00000DF2 E8D635                  	call	round			; check for mem error before the stosb
 25522 00000DF5 01C7                    	add	di,ax			;skip over header
 25523 00000DF7 B041                    	mov	al,'A'
 25524                                  fillloop:
 25525 00000DF9 51                      	push	cx			; save count
 25526 00000DFA B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 25527 00000DFD FC                      	cld
 25528 00000DFE F3AA                    	rep	stosb			; filled
 25529                                  
 25530                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 25531                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 25532                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 25533                                  
 25534                                  	; 18/12/2022
 25535                                  	;cx = 0
 25536 00000E00 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 25537 00000E04 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 25538 00000E08 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 25539                                  	
 25540                                  	; 23/10/2022	
 25541                                  	;mov     word [es:di-3Bh],0
 25542                                  	;mov     word [es:di-26h],0
 25543                                  	;mov     word [es:di-24h],0
 25544                                  
 25545 00000E0C 59                      	pop	cx
 25546 00000E0D E2EA                    	loop	fillloop
 25547                                  
 25548                                  ; allocate buffers
 25549                                  ; ----------------------------------------------------------------------
 25550                                  
 25551                                  ; search through the list of media supported and allocate 3 buffers if the
 25552                                  ; capacity of the drive is > 360kb
 25553                                  
 25554                                  	; 18/12/2022
 25555                                  	; cx = 0
 25556 00000E0F 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 25557 00000E14 7403                    	je	short dodefaultbuff
 25558 00000E16 E98000                  	jmp	dobuff			; the user entered the buffers=.
 25559                                  
 25560                                  dodefaultbuff:
 25561                                  	; 18/12/2022
 25562 00000E19 890E[9902]              	mov	[h_buffers],cx ; 0
 25563                                  	;inc	cx
 25564                                  	;inc	cx
 25565                                  	;mov	[buffers],cx ; 2
 25566                                  	; 10/04/2024
 25567 00000E1D C706[9702]0200          	mov	word [buffers],2
 25568                                  
 25569                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 25570                                  	;mov	word [buffers],2	; default to 2 buffers
 25571                                  
 25572                                  	; 23/10/2022
 25573                                  	; 04/09/2023
 25574                                  	;push	ax
 25575                                  	;push	ds ; 26/03/2019
 25576                                  
 25577                                  	; 04/09/2023
 25578                                  	; ds = cs
 25579 00000E23 C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 25580                                  	;les	bp,[cs:DOSINFO]
 25581                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 25582                                  	; 11/12/2022
 25583 00000E27 26C46E00                	les	bp,[es:bp]
 25584                                  	; 23/10/2022
 25585                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 25586                                  
 25587                                  	; 04/09/2023
 25588                                  	; ds = cs
 25589                                  	;push	cs
 25590                                  	;pop	ds
 25591                                  ;SYSINIT:0DE2h:
 25592                                  nextdpb:				; test if the drive supports removeable media
 25593                                  	;mov	bl,[es:bp+DPB.drive]
 25594                                  	; 11/12/2022
 25595 00000E2B 268A5E00                	mov	bl,[es:bp]
 25596                                  	; 23/10/2022
 25597                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25598                                  
 25599                                  	;inc	bl
 25600                                  	; 18/12/2022
 25601 00000E2F 43                      	inc	bx
 25602                                  
 25603                                  	;mov	ax,(IOCTL<<8)|8
 25604 00000E30 B80844                  	mov	ax,4408h
 25605 00000E33 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25606                                  
 25607                                  ; ignore fixed disks
 25608                                  
 25609 00000E35 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 25610 00000E37 7534                    	jnz	short nosetbuf
 25611                                  
 25612                                  ; get parameters of drive
 25613                                  
 25614 00000E39 31DB                    	xor	bx,bx
 25615                                  	;;mov	bl,[es:bp+DPB.drive]
 25616                                  	; 11/12/2022
 25617 00000E3B 268A5E00                	mov	bl,[es:bp]
 25618                                  	; 23/10/2022
 25619                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25620                                  	
 25621                                  	;inc	bl
 25622                                  	; 18/12/2022
 25623 00000E3F 43                      	inc	bx
 25624                                  
 25625 00000E40 BA[9849]                	mov	dx,deviceparameters
 25626                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 25627 00000E43 B80D44                  	mov	ax,440Dh
 25628                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 25629 00000E46 B96008                  	mov	cx,860h
 25630 00000E49 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25631 00000E4B 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 25632                                  					; generic ioctl
 25633                                  ; determine capacity of drive
 25634                                  ; media capacity = #sectors * bytes/sector
 25635                                  
 25636                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 25637                                  	; 23/10/2022
 25638 00000E4D 8B1E[A749]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 25639                                  	
 25640                                  ; to keep the magnitude of the media capacity within a word,
 25641                                  ; scale the sector size
 25642                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 25643                                  
 25644                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 25645                                  	; 23/10/2022
 25646 00000E51 A1[9F49]                	mov	ax,[deviceparameters+7] ; bytes per sector
 25647 00000E54 31D2                    	xor	dx,dx
 25648 00000E56 B90002                  	mov	cx,512
 25649 00000E59 F7F1                    	div	cx			; scale sector size in factor of
 25650                                  					; 512 bytes
 25651 00000E5B F7E3                    	mul	bx			; ax = #sectors * size factor
 25652 00000E5D 09D2                    	or	dx,dx			; just in case of large floppies
 25653 00000E5F 7505                    	jnz	short setbuf
 25654 00000E61 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 25655 00000E64 7607                    	jbe	short nosetbuf
 25656                                  setbuf:
 25657                                  	; 18/12/2022
 25658                                  	; word [buffers] = 2
 25659 00000E66 C606[9702]03            	mov	byte [buffers],3
 25660                                  	;mov	word [buffers],3
 25661 00000E6B EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 25662                                  					; for default buffer count
 25663                                  nosetbuf:
 25664                                  	; 23/10/2022
 25665                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 25666 00000E6D 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 25667 00000E72 7406                    	je	short chk_memsize_for_buffers
 25668                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 25669 00000E74 26C46E19                	les	bp,[es:bp+19h]
 25670 00000E78 EBB1                    	jmp	short nextdpb
 25671                                  
 25672                                  ;from dos 3.3,the default number of buffers will be changed according to the
 25673                                  ;memory size too.
 25674                                  ; default buffers = 2
 25675                                  ; if diskette media > 360 kb,then default buffers = 3
 25676                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 25677                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 25678                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 25679                                  
 25680                                  chk_memsize_for_buffers:
 25681                                  	; 18/12/2022
 25682                                  	;cmp	word [MEMORY_SIZE],2000h
 25683                                  	;jbe	short bufset
 25684                                  	;mov	word [buffers],5
 25685                                  	;cmp	word [MEMORY_SIZE],4000h
 25686                                  	;jbe	short bufset
 25687                                  	;mov	word [buffers],10
 25688                                  	;cmp	word [MEMORY_SIZE],8000h
 25689                                  	;jbe	short bufset
 25690                                  	;mov	word [buffers],15
 25691                                  
 25692                                  	; 18/12/2022
 25693                                  	; word [buffers] = 3 or 2
 25694 00000E7A BB[9702]                	mov	bx,buffers
 25695 00000E7D A1[9202]                	mov	ax,[MEMORY_SIZE]
 25696 00000E80 48                      	dec	ax	; [MEMORY_SIZE] - 1
 25697                                  
 25698 00000E81 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 25699 00000E84 7213                    	jb	short bufset
 25700 00000E86 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 25701 00000E89 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 25702 00000E8C 730B                    	jnb	short bufset
 25703 00000E8E C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 25704 00000E91 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 25705 00000E94 7303                    	jnb	short bufset
 25706 00000E96 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 25707                                  bufset:
 25708                                  	; 23/10/2022
 25709                                  	; 26/03/2019
 25710                                  	; 04/09/2023
 25711                                  	;pop	ds
 25712                                  	;pop	ax
 25713                                  
 25714                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25715                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 25716                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25717                                  
 25718                                  ; 26/03/2019
 25719                                  
 25720                                  ;*******************************************************************************
 25721                                  ;									       *
 25722                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 25723                                  ; input :								       *
 25724                                  ;    memhi:memlo - start of the next available memory			       *
 25725                                  ;    buffers = number of buffers					       *
 25726                                  ;    h_buffers = number of secondary buffers				       *
 25727                                  ;									       *
 25728                                  ; output:								       *
 25729                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 25730                                  ;	buffinfo set.							       *
 25731                                  ;	bufferqueue set.						       *
 25732                                  ;									       *
 25733                                  ; subroutines to be called:						       *
 25734                                  ;									       *
 25735                                  ;*******************************************************************************
 25736                                  
 25737                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25738                                  	; (SYSINIT:0E60h)
 25739                                  dobuff:
 25740                                  	; ds = cs ; 31/03/2019
 25741                                  	; 23/10/2022
 25742                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 25743                                  	; 04/09/2023
 25744 00000E99 A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 25745 00000E9C 8B0E[9902]              	mov	cx,[h_buffers] ; *
 25746 00000EA0 C51E[6D02]              	lds	bx,[DOSINFO]
 25747                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 25748                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 25749 00000EA4 89473F                  	mov	[bx+3Fh],ax
 25750                                  	; 04/09/2023
 25751                                  	;mov	ax,[cs:h_buffers]
 25752                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 25753                                  	;mov	[bx+41h],ax
 25754                                  	; 04/09/2023
 25755 00000EA7 894F41                  	mov	[bx+41h],cx ; *
 25756 00000EAA C55F12                  	lds	bx,[bx+12h]
 25757                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 25758 00000EAD E81B35                  	call	round		; get [memhi]:[memlo]
 25759                                  	;mov	al,devmark_buf	; ='B'
 25760 00000EB0 B042                    	mov	al,'B'	
 25761 00000EB2 E8C206                  	call	setdevmark
 25762                                  
 25763                                  ;allocate buffers
 25764                                  
 25765 00000EB5 1E                      	push	ds			; save buffer info. ptr.
 25766 00000EB6 53                      	push	bx
 25767                                  
 25768 00000EB7 E8D403                  	call	set_buffer
 25769                                  
 25770 00000EBA 5B                      	pop	bx
 25771 00000EBB 1F                      	pop	ds
 25772                                  
 25773                                  ;now set the secondary buffer if specified.
 25774                                  
 25775 00000EBC 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 25776 00000EC2 742D                    	je	short xif16
 25777 00000EC4 E80435                  	call	round
 25778                                  	; 23/10/2022
 25779 00000EC7 2E8B0E[6003]            	mov	cx,[cs:memlo]
 25780                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 25781 00000ECC 894F06                  	mov	[bx+6],cx
 25782 00000ECF 2E8B0E[6203]            	mov	cx,[cs:memhi]
 25783                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 25784 00000ED4 894F08                  	mov	[bx+8],cx
 25785 00000ED7 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 25786                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 25787 00000EDC 894F0A                  	mov	[bx+10],cx
 25788 00000EDF B80002                  	mov	ax,512			; 512 byte
 25789 00000EE2 F7E1                    	mul	cx
 25790 00000EE4 2EA3[6003]              	mov	[cs:memlo],ax
 25791                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25792 00000EE8 2E800E[9C15]02          	or	byte [cs:setdevmarkflag],2
 25793 00000EEE E8DA34                  	call	round
 25794                                  xif16:
 25795                                  
 25796                                  ; ----------------------------------------------------------------------
 25797                                  ; allocate cdss
 25798                                  ; ----------------------------------------------------------------------
 25799                                  
 25800                                  buf1:
 25801 00000EF1 E8D734                  	call	round
 25802                                  
 25803 00000EF4 50                      	push	ax
 25804                                  	; 23/10/2022
 25805                                  	;mov	ax,devmark_cds		;='L'
 25806 00000EF5 B84C00                  	mov	ax, 'L'
 25807 00000EF8 E87C06                  	call	setdevmark
 25808 00000EFB 58                      	pop	ax
 25809                                  
 25810 00000EFC 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 25811                                  	;mov	cl,[es:di+SYSI_NUMIO]
 25812 00000F01 268A4D20                	mov	cl,[es:di+20h]
 25813 00000F05 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 25814 00000F0A 7305                    	jae	short gotncds 		; user setting must be at least numio
 25815 00000F0C 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 25816                                  gotncds:
 25817 00000F11 30ED                    	xor	ch,ch
 25818                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 25819 00000F13 26884D21                	mov	[es:di+21h],cl
 25820 00000F17 2EA1[6203]              	mov	ax,[cs:memhi]
 25821                                  	;mov	[es:di+SYSI_CDS+2],ax
 25822 00000F1B 26894518                	mov	[es:di+18h],ax
 25823 00000F1F 2EA1[6003]              	mov	ax,[cs:memlo]
 25824                                  	;mov	[es:di+SYSI_CDS],ax
 25825 00000F23 26894516                	mov	[es:di+16h],ax
 25826 00000F27 88C8                    	mov	al,cl
 25827                                  	;mov	ah,curdirlen ; curdir_list.size
 25828 00000F29 B458                    	mov	ah,88
 25829 00000F2B F6E4                    	mul	ah
 25830 00000F2D E8D102                  	call	ParaRound
 25831 00000F30 2E0106[6203]            	add	[cs:memhi],ax
 25832                                  
 25833                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25834 00000F35 2E800E[9C15]02          	or	byte [cs:setdevmarkflag],2
 25835 00000F3B E88D34                  	call	round			; check for mem error before initializing
 25836                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 25837 00000F3E 26C535                  	lds	si,[es:di]
 25838                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 25839 00000F41 26C47D16                	les	di,[es:di+16h]
 25840 00000F45 E875FD                  	call	fooset
 25841                                  
 25842                                  ; ----------------------------------------------------------------------
 25843                                  ; allocate space for internal stack
 25844                                  ; ----------------------------------------------------------------------
 25845                                  
 25846 00000F48 0E                      	push	cs
 25847 00000F49 1F                      	pop	ds
 25848                                  
 25849                                  ;	if the user did not entered stacks= command, as a default, do not install
 25850                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 25851                                  ;	otherwise,install it to the user specified value or to the default
 25852                                  ;	value of 9,128 for other systems.
 25853                                  
 25854 00000F4A 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 25855 00000F4F 740E                    	je	short doinstallstack	; then install as specified by the user
 25856 00000F51 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 25857 00000F56 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 25858 00000F58 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 25859 00000F5D 736D                    	jae	short skipstack
 25860                                  doinstallstack:
 25861 00000F5F A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 25862 00000F62 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 25863 00000F64 7466                    	jz	short skipstack		; don't install stack.
 25864                                  
 25865                                  ;	dynamic relocation of stack code.
 25866                                  
 25867 00000F66 E86234                  	call	round			;[memhi] = seg. for stack code
 25868                                  					;[memlo] = 0
 25869                                  
 25870                                  ; set devmark block into memory for mem command
 25871                                  ; devmark_id = 's' for stack
 25872                                  
 25873                                  	;mov	al,devmark_stk	;='S'
 25874                                  	; 23/10/2022
 25875 00000F69 B053                    	mov	al,'S'
 25876 00000F6B E80906                  	call	setdevmark
 25877                                  
 25878 00000F6E A1[6203]                	mov	ax,[memhi]
 25879 00000F71 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 25880                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25881                                  	; 11/12/2022
 25882                                  	; ds = cs
 25883                                  	;push	cs
 25884                                  	;pop	ds
 25885 00000F73 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 25886 00000F75 31FF                    	xor	di,di
 25887 00000F77 B9[6902]                	mov	cx,endstackcode
 25888 00000F7A 890E[6003]              	mov	[memlo],cx
 25889 00000F7E E84A34                  	call	round		;have enough space for relocation?
 25890 00000F81 F3A4                    	rep	movsb
 25891                                  
 25892 00000F83 1E                      	push	ds		; stick the location of the NextStack entry
 25893                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 25894                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25895                                  	; 21/10/2022
 25896 00000F84 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25897 00000F87 8ED8                    	mov	ds,ax
 25898 00000F89 C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 25899 00000F8F 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 25900                                  
 25901 00000F93 2EA1[6003]              	mov	ax,[cs:memlo]
 25902 00000F97 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 25903 00000F9B A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 25904 00000F9E 2EA1[6203]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 25905 00000FA2 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 25906 00000FA6 A3[0A08]                	mov	[IT_StackLoc+2],ax
 25907                                  
 25908                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 25909                                  
 25910                                  	;mov	ax,entrysize ; mov ax,8
 25911                                  	; 23/10/2022
 25912 00000FA9 B80800                  	mov	ax,8
 25913 00000FAC 2E0306[8C02]            	add	ax,[cs:stack_size]
 25914 00000FB1 2EF726[8A02]            	mul	word [cs:stack_count]
 25915                                  
 25916 00000FB6 A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 25917                                  
 25918 00000FB9 1F                      	pop	ds		; no more need to access Instance Table
 25919                                  
 25920 00000FBA E84402                  	call	ParaRound	; convert size to paragraphs
 25921                                  	
 25922                                  	; 11/12/2022
 25923                                  	; ds = cs
 25924                                  	;add	[cs:memhi],ax
 25925 00000FBD 0106[6203]              	add	[memhi],ax
 25926                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25927                                  	;or	byte [cs:setdevmarkflag],2
 25928 00000FC1 800E[9C15]02            	or	byte [setdevmarkflag],2
 25929                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25930                                  				;to set the devmark_size for stack by round routine.
 25931 00000FC6 E80234                  	call	round		; check for memory error before
 25932                                  				; continuing
 25933 00000FC9 E87D03                  	call	stackinit	; initialize hardware stack. 
 25934                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 25935                                  skipstack:
 25936                                  	
 25937                                  	; 10/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25938                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:11F0h)
 25939                                  	;;;
 25940                                  	;push	cs
 25941                                  	;pop	ds
 25942                                  	; ds = cs
 25943 00000FCC 803E[6C03]01            	cmp	byte [dosdata_umb],1	; PCDOS 7 feature - DOSDATA=UMB/NOUMB configuration
 25944                                  					; 1 = DOSDATA=UMB, 2 = (UMB) done, 0 = NOUMB
 25945 00000FD1 7773                    	ja	short dosdata_umb_done	; 2 - done
 25946 00000FD3 727D                    	jb	short dosdata_noumb	; 0 - DOSDATA=NOUMB
 25947                                  	
 25948 00000FD5 803E[7715]EA            	cmp	byte [setdevmark],0EAh
 25949 00000FDA 7476                    	je	short dosdata_noumb
 25950                                  	
 25951 00000FDC B80258                  	mov	ax,5802h
 25952 00000FDF CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25953                                  				; AL = function code: (DOS 5beta) get UMB link state
 25954 00000FE1 98                      	cbw
 25955 00000FE2 89C7                    	mov	di,ax			; al = 01h -> UMBs in DOS memory chain
 25956                                  					; save current (previous) UMB link state
 25957 00000FE4 BB0100                  	mov	bx,1			; bx = 01h -> add UMBs to DOS memory chain
 25958                                  	
 25959 00000FE7 B80358                  	mov	ax,5803h
 25960 00000FEA CD21                    	int	21h
 25961 00000FEC 7264                    	jc	short dosdata_noumb
 25962                                  	
 25963 00000FEE B80058                  	mov	ax,5800h
 25964 00000FF1 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25965                                  				; AL = function code: get allocation strategy
 25966                                  	
 25967 00000FF3 89C6                    	mov	si,ax			; ax = current strategy
 25968                                  					; save current (previous) allocation strategy
 25969 00000FF5 BB4000                  	mov	bx,40h			; bl = new strategy = 40h - high memory first fit
 25970                                  	
 25971 00000FF8 B80158                  	mov	ax,5801h
 25972 00000FFB CD21                    	int	21h
 25973                                  
 25974 00000FFD 8B1E[6203]              	mov	bx,[memhi]
 25975 00001001 2B1E[6803]              	sub	bx,[prev_memhi]
 25976                                  	
 25977 00001005 B448                    	mov	ah,48h
 25978 00001007 CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
 25979                                  				; BX = number of 16-byte paragraphs desired
 25980 00001009 89C1                    	mov	cx,ax			; ax = segment of allocated block
 25981 0000100B 89FB                    	mov	bx,di			; restore previous UMB link state
 25982                                  	
 25983 0000100D B80358                  	mov	ax,5803h
 25984 00001010 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25985                                  				; AL = function code: (DOS 5beta) set UMB link state
 25986 00001012 89F3                    	mov	bx,si			; restore previous allocation strategy
 25987                                  	
 25988 00001014 B80158                  	mov	ax,5801h
 25989 00001017 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25990                                  				; AL = function code: set allocation strategy
 25991 00001019 81F900A0                	cmp	cx,0A000h		; Is the allocated memory block (segment) a UMB?
 25992 0000101D 7233                    	jb	short dosdata_noumb	; no
 25993                                  	
 25994                                  	;mov	word [ALLOCLIM],0FFFFh
 25995                                  	;mov	word [memlo],0
 25996 0000101F 890E[6203]              	mov	[memhi],cx
 25997 00001023 49                      	dec	cx
 25998 00001024 8EC1                    	mov	es,cx			; point to arena/mcb
 25999                                  	; 10/04/2024
 26000 00001026 31C9                    	xor	cx,cx ; 0
 26001 00001028 890E[6003]              	mov	[memlo],cx ; 0
 26002 0000102C 49                      	dec	cx
 26003 0000102D 890E[A302]              	mov	[ALLOCLIM],cx ; 0FFFFh
 26004                                  
 26005 00001031 26C70601000800          	mov	word [es:1],8		; [es:arena_owner], 8 ; set impossible owner
 26006 00001038 26C70608005344          	mov	word [es:8],4453h	; [es:arena_name],'SD' ; System Data
 26007 0000103F FE06[6C03]              	inc	byte [dosdata_umb]	; 1 -> 2 ; DOSDATA=UMB done.
 26008 00001043 E909FD                  	jmp	dosfts
 26009                                  
 26010                                  dosdata_umb_done:
 26011 00001046 A1[6803]                	mov	ax,[prev_memhi]		; (recent memory block/segment before UMBs)
 26012 00001049 A3[6203]                	mov	[memhi],ax
 26013 0000104C A1[6A03]                	mov	ax,[prev_alloclim]
 26014 0000104F A3[A302]                	mov	[ALLOCLIM],ax
 26015                                  dosdata_noumb:
 26016                                   	;;;
 26017                                  
 26018                                  ;skipstack:
 26019                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26020                                  	; (SYSINIT:0F99h)
 26021                                  
 26022                                  	; 11/12/2022
 26023                                  	; ds = cs
 26024                                  	;push	cs
 26025                                  	;pop	ds
 26026                                  
 26027 00001052 A0[9D02]                	mov	al,[FILES]
 26028 00001055 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 26029                                  				;  it does sign extend.
 26030 00001057 89C1                    	mov	cx,ax
 26031 00001059 31DB                    	xor	bx,bx		;close standard input
 26032 0000105B B43E                    	mov	ah,3Eh ; CLOSE
 26033 0000105D CD21                    	int	21h
 26034 0000105F BB0200                  	mov	bx,2
 26035                                  rcclloop:			;close everybody but standard output
 26036 00001062 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 26037 00001064 CD21                    	int	21h		; in case we can't get new one open.
 26038 00001066 43                      	inc	bx
 26039 00001067 E2F9                    	loop	rcclloop
 26040                                  
 26041 00001069 BA[9E46]                	mov	dx,condev
 26042 0000106C B002                    	mov	al,2
 26043 0000106E B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 26044 00001070 F9                      	stc			; set for possible int 24
 26045 00001071 CD21                    	int	21h
 26046 00001073 7305                    	jnc	short goaux
 26047 00001075 E88935                  	call	badfil
 26048 00001078 EB13                    	jmp	short goaux2
 26049                                  goaux:	
 26050 0000107A 50                      	push	ax
 26051 0000107B BB0100                  	mov	bx,1		;close standard output
 26052 0000107E B43E                    	mov	ah,3Eh ; CLOSE
 26053 00001080 CD21                    	int	21h
 26054 00001082 58                      	pop	ax
 26055                                  
 26056 00001083 89C3                    	mov	bx,ax		;new device handle
 26057 00001085 B445                    	mov	ah,45h ; XDUP
 26058 00001087 CD21                    	int	21h		;dup to 1,stdout
 26059 00001089 B445                    	mov	ah,45h ; XDUP
 26060 0000108B CD21                    	int	21h		;dup to 2,stderr
 26061                                  goaux2: 
 26062 0000108D BA[A246]                	mov	dx,auxdev
 26063 00001090 B002                    	mov	al,2		;read/write access
 26064 00001092 E89D35                  	call	open_dev
 26065                                  
 26066 00001095 BA[A646]                	mov	dx,prndev
 26067 00001098 B001                    	mov	al,1		;write only
 26068 0000109A E89535                  	call	open_dev
 26069                                  
 26070                                  ;global rearm command for shared interrupt devices attached in the system;
 26071                                  ;shared interrupt attachment has some problem when it issues interrupt
 26072                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 26073                                  ;no further interrupts on that level will be presented until a global rearm
 26074                                  ;is issued. by the request of the system architecture group, msbio will
 26075                                  ;issue a global rearm after every device driver is loaded.
 26076                                  ;to issue a global rearm:	;for pc1,xt,palace
 26077                                  ;
 26078                                  ;			  out 02f2h,xx  ; interrupt level 2
 26079                                  ;			  out 02f3h,xx  ; interrupt level 3
 26080                                  ;			  out 02f4h,xx  ; interrupt level 4
 26081                                  ;			  out 02f5h,xx  ; interrupt level 5
 26082                                  ;			  out 02f6h,xx  ; interrupt level 6
 26083                                  ;			  out 02f7h,xx  ; interrupt level 7
 26084                                  ;
 26085                                  ;	for pc at,in addition to the above commands,
 26086                                  ;	need to handle the secondary interrupt handler
 26087                                  ;
 26088                                  ;			  out 06f2h,xx  ; interrupt level 10
 26089                                  ;			  out 06f3h,xx  ; interrupt level 11
 26090                                  ;			  out 06f4h,xx  ; interrupt level 12
 26091                                  ;			  out 06f6h,xx  ; interrupt level 14
 26092                                  ;			  out 06f7h,xx  ; interrupt level 15
 26093                                  ;
 26094                                  ;	for round-up machine
 26095                                  ;
 26096                                  ;			  none.
 26097                                  
 26098                                  ; where xx stands for any value.
 26099                                  ;
 26100                                  ; for your information,after naples level machine,the system service bios
 26101                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 26102                                  
 26103                                  	; 24/10/2022
 26104                                  
 26105 0000109D 50                      	push	ax
 26106 0000109E 53                      	push	bx
 26107 0000109F 52                      	push	dx
 26108 000010A0 06                      	push	es
 26109                                  
 26110 000010A1 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 26111 000010A3 BAF202                  	mov	dx,2F2h 		;get starting address
 26112 000010A6 EE                      	out	dx,al			; out 02f2h,0ffh
 26113 000010A7 42                      	inc	dx
 26114 000010A8 EE                      	out	dx,al			; out 02f3h,0ffh
 26115 000010A9 42                      	inc	dx
 26116 000010AA EE                      	out	dx,al			; out 02f4h,0ffh
 26117 000010AB 42                      	inc	dx
 26118 000010AC EE                      	out	dx,al			; out 02f5h,0ffh
 26119 000010AD 42                      	inc	dx
 26120 000010AE EE                      	out	dx,al			; out 02f6h,0ffh
 26121 000010AF 42                      	inc	dx
 26122 000010B0 EE                      	out	dx,al			; out 02f7h,0ffh
 26123                                  
 26124                                  ;sb secondary global rearm
 26125                                  
 26126 000010B1 B800F0                  	mov	ax,0F000h		;get machine type
 26127 000010B4 8EC0                    	mov	es,ax
 26128 000010B6 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 26129 000010BC 740D                    	je	short startrearm	; *if at no need to check
 26130                                  
 26131 000010BE B4C0                    	mov	ah,0C0h 		;get system configuration
 26132 000010C0 CD15                    	int	15h			; *
 26133 000010C2 7216                    	jc	short finishrearm	; *jmp if old rom
 26134                                  
 26135                                  ; test feature byte for secondary interrupt controller
 26136                                  
 26137 000010C4 26F6470540              	test	byte [es:bx+5],40h
 26138                                  	; 24/10/2022
 26139                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 26140 000010C9 740F                    	je	short finishrearm	;jmp if it is there
 26141                                  
 26142                                  startrearm:
 26143 000010CB B0FF                    	mov	al,0FFh 		;write any pattern to port
 26144 000010CD BAF206                  	mov	dx,6F2h 		;get starting address
 26145 000010D0 EE                      	out	dx,al			;out 06f2h,0ffh
 26146 000010D1 42                      	inc	dx			;bump address
 26147 000010D2 EE                      	out	dx,al			;out 06f3h,0ffh
 26148 000010D3 42                      	inc	dx			;bump address
 26149 000010D4 EE                      	out	dx,al			;out 06f4h,0ffh
 26150 000010D5 42                      	inc	dx			;bump address
 26151 000010D6 42                      	inc	dx			;bump address
 26152 000010D7 EE                      	out	dx,al			;out 06f6h,0ffh
 26153 000010D8 42                      	inc	dx			;bump address
 26154 000010D9 EE                      	out	dx,al			;out 06f7h,0ffh
 26155                                  
 26156                                  finishrearm:
 26157 000010DA 07                      	pop	es
 26158 000010DB 5A                      	pop	dx
 26159 000010DC 5B                      	pop	bx
 26160 000010DD 58                      	pop	ax
 26161                                  
 26162                                  ;    global rearm end *******************
 26163                                  
 26164                                  ; ----------------------------------------------------------------------
 26165                                  ; allocate sysinit_base for install= command
 26166                                  ; ----------------------------------------------------------------------
 26167                                  ; sysinit_base allocation.
 26168                                  ;   check if endfile has been called to handle install= command.
 26169                                  
 26170                                  set_sysinit_base:
 26171                                  
 26172                                  ; ----------------------------------------------------------------------
 26173                                  ;sysinit_base will be established in the secure area of
 26174                                  ;lower memory when it handles the first install= command.
 26175                                  ;sysinit_base is the place where the actual exec function will be called and
 26176                                  ;will check sysinit module in high memory if it is damaged by the application
 26177                                  ;program.  if sysinit module has been broken,then "memory error..." message
 26178                                  ;is displayed by sysinit_base.
 26179                                  ; ----------------------------------------------------------------------
 26180                                  
 26181                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26182                                  	; (SYSINIT:1028h)
 26183                                  
 26184                                  	; 11/12/2022
 26185                                  	; ds = cs
 26186 000010DE 50                      	push	ax			; set devmark for mem command
 26187 000010DF A1[6203]                	mov	ax,[memhi]
 26188 000010E2 2B06[6603]              	sub	ax,[area]
 26189 000010E6 A3[5E03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 26190                                  	;mov	al,devmark_inst ; 'T'
 26191 000010E9 B054                    	mov	al,'T'
 26192 000010EB E88904                  	call	setdevmark
 26193 000010EE 58                      	pop	ax
 26194                                  
 26195 000010EF 8B3E[6203]              	mov	di,[memhi]
 26196 000010F3 8EC7                    	mov	es,di
 26197 000010F5 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 26198 000010F9 31FF                    	xor	di,di
 26199 000010FB 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 26200 000010FF BE[0D12]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 26201 00001102 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 26202                                  	; 24/10/2022 
 26203                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 26204 00001105 010E[6003]              	add	[memlo],cx
 26205                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 26206                                  	; 11/12/2022
 26207                                  	; ds = cs
 26208                                  	;or	byte [cs:setdevmarkflag],2
 26209 00001109 800E[9C15]02            	or	byte [setdevmarkflag],2
 26210                                  	;or	byte [setdevmarkflag],for_devmark
 26211 0000110E E8BA32                  	call	round			; check mem error. also,readjust memhi for the next use.
 26212 00001111 F3A4                    	rep	movsb			; reallocate it.
 26213                                  
 26214 00001113 C706[D402][F411]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 26215 00001119 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 26216                                  	;or	word [install_flag],has_installed ; set the flag.
 26217                                  	;or	byte [install_flag],has_installed ; 2
 26218                                  	; 11/12/2022
 26219 0000111D 800E[CC02]02            	or	byte [install_flag],2
 26220                                  	; 24/10/2022
 26221                                  	;or	word [install_flag],2	
 26222                                  
 26223                                  ; ----------------------------------------------------------------------
 26224                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 26225                                  ; the top of the memory will be allocated for sysinit and config.sys if
 26226                                  ; have_install_cmd.
 26227                                  ; ----------------------------------------------------------------------
 26228                                  
 26229 00001122 E8A632                  	call	round
 26230 00001125 8B1E[6203]              	mov	bx,[memhi]
 26231 00001129 A1[6603]                	mov	ax,[area]
 26232 0000112C A3[5C03]                	mov	[old_area],ax		; save [area]
 26233 0000112F 8EC0                    	mov	es,ax			;calc what we needed
 26234 00001131 29C3                    	sub	bx,ax
 26235                                  	; 24/10/2022
 26236 00001133 B44A                    	mov	ah,4Ah ; SETBLOCK
 26237 00001135 CD21                    	int	21h			;give the rest back
 26238                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26239                                  		; ES = segment address of block to change
 26240                                  		; BX = new size in paragraphs
 26241 00001137 06                      	push	es
 26242 00001138 8CC0                    	mov	ax,es
 26243 0000113A 48                      	dec	ax
 26244 0000113B 8EC0                    	mov	es,ax			;point to arena
 26245                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 26246                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 26247                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 26248                                  	; 24/10/2022
 26249 0000113D 26C70601000800          	mov	word [es:1],8		;set impossible owner
 26250 00001144 26C70608005344          	mov	word [es:8],'SD'	; System Data
 26251 0000114B 07                      	pop	es
 26252                                  
 26253 0000114C BBFFFF                  	mov	bx,0FFFFh
 26254 0000114F B448                    	mov	ah,48h ; ALLOC
 26255 00001151 CD21                    	int	21h
 26256 00001153 B448                    	mov	ah,48h ; ALLOC
 26257 00001155 CD21                    	int	21h			; allocate the rest of the memory
 26258                                  		; DOS - 2+ - ALLOCATE MEMORY
 26259                                  		; BX = number of 16-byte paragraphs desired
 26260 00001157 A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 26261 0000115A C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 26262                                  
 26263                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 26264                                  ;;;; allocated.
 26265                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 26266                                  ;;;; this time) to the top-of-the memory),here we are going to
 26267                                  ;;;; 1). "setblock" from memhi to confbot.
 26268                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 26269                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 26270                                  
 26271                                  ;memory allocation for sysinit,confbot module.
 26272                                  
 26273 00001160 8EC0                    	mov	es,ax
 26274                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26275                                  	; (SYSINIT:11DFh)
 26276 00001162 8B1E[A102]              	mov	bx,[CONFBOT]
 26277                                  	; 24/10/2022
 26278                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 26279 00001166 29C3                    	sub	bx,ax			; confbot - memhi
 26280 00001168 4B                      	dec	bx			; make a room for the memory block id.
 26281 00001169 4B                      	dec	bx			; make sure!!!.
 26282 0000116A B44A                    	mov	ah,4Ah ; SETBLOCK
 26283 0000116C CD21                    	int	21h			; this will free (confbot to top of memory)
 26284                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26285                                  		; ES = segment address of block to change
 26286                                  		; BX = new size in paragraphs
 26287 0000116E BBFFFF                  	mov	bx,0FFFFh
 26288 00001171 B448                    	mov	ah,48h ; ALLOC
 26289 00001173 CD21                    	int	21h
 26290 00001175 B448                    	mov	ah,48h ; ALLOC
 26291 00001177 CD21                    	int	21h			; allocate (confbot to top of memory)
 26292                                  		; DOS - 2+ - ALLOCATE MEMORY
 26293                                  		; BX = number of 16-byte paragraphs desired
 26294 00001179 A3[6603]                	mov	[area],ax		; save allocated memory segment.
 26295                                  					; need this to free this area for command.com.
 26296 0000117C 8E06[6203]              	mov	es,[memhi]
 26297 00001180 B449                    	mov	ah,49h			; free allocated memory.
 26298 00001182 CD21                    	int	21h			; free (memhi to confbot(=area))
 26299                                  		; DOS - 2+ - FREE MEMORY
 26300                                  		; ES = segment address of area to be freed
 26301                                  endfile_ret:
 26302 00001184 C3                      	retn
 26303                                  
 26304                                  ; End of "EndFile" DOS structure configuration.
 26305                                  
 26306                                  ; ----------------------------------------------------------------------
 26307                                  ; 26/03/2019 - Retro DOS v4.0
 26308                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 26309                                  ; ----------------------------------------------------------------------
 26310                                  ; Do_Install_Exec
 26311                                  ;
 26312                                  ; This procedure is used to EXEC a program being loaded via the 
 26313                                  ; "install=" mechanism in config.sys. It does this by setting up
 26314                                  ; the parameters, and then jumping to sysinit_base, which has been
 26315                                  ; setup in low memory. When complete, sysinit_base will jump back
 26316                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 26317                                  ; program).
 26318                                  
 26319                                  ;SYSINIT:10CFh:
 26320                                  
 26321                                  do_install_exec:			; now,handles install= command.
 26322                                  
 26323 00001185 56                      	push	si			; save si for config.sys again.
 26324                                  
 26325                                  ; we are going to call load/exec function.
 26326                                  ; set es:bx to the parameter block here;;;;;;;
 26327                                  ; set ds:dx to the asciiz string. remember that we already has 0
 26328                                  ; after the filename. so parameter starts after that. if next
 26329                                  ; character is a line feed (i.e. 10),then assume that the 0
 26330                                  ; we already encountered used to be a carrage return. in this
 26331                                  ; case,let's set the length to 0 which will be followed by
 26332                                  ; carridge return.
 26333                                  
 26334                                  ; es:si -> command line in config.sys. points to the first non blank
 26335                                  ;character after =.
 26336                                  
 26337 00001186 06                      	push	es
 26338 00001187 1E                      	push	ds
 26339 00001188 07                      	pop	es
 26340 00001189 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 26341 0000118A 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 26342                                  
 26343 0000118C 31C9                    	xor	cx,cx
 26344 0000118E FC                      	cld
 26345 0000118F 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 26346 00001195 BF[F002]                	mov	di,ldexec_parm
 26347                                  installfilename:			; skip the file name
 26348 00001198 AC                      	lodsb				; al = ds:si; si++
 26349                                  	; 05/09/2023
 26350 00001199 08C0                    	or	al,al
 26351                                  	;cmp	al,0
 26352                                  	;je	short got_installparm
 26353                                  	;jmp	short installfilename
 26354                                  	; 10/04/2024
 26355 0000119B 75FB                    	jnz	short installfilename
 26356                                  got_installparm:			; copy the parameters to ldexec_parm
 26357 0000119D AC                      	lodsb
 26358 0000119E 268805                  	mov	[es:di],al
 26359 000011A1 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 26360 000011A3 7405                    	je	short done_installparm
 26361 000011A5 FEC1                    	inc	cl			; # of char. in the parm.
 26362 000011A7 47                      	inc	di
 26363 000011A8 EBF3                    	jmp	short got_installparm
 26364                                  done_installparm:
 26365 000011AA 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 26366                                  	; 05/09/2023
 26367 000011AF 08C9                    	or	cl,cl
 26368                                  	;cmp	cl,0			; if no parm,then
 26369 000011B1 7506                    	jne	short install_seg_set 	; let the parm area
 26370 000011B3 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 26371                                  					; starts with cr.
 26372                                  install_seg_set:
 26373                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 26374 000011B9 31DB                    	xor	bx,bx
 26375                                  	;mov	word [cs:0],0		; make a null environment segment
 26376 000011BB 2E891F                  	mov	[cs:bx],bx ; 05/09/2023
 26377 000011BE 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 26378                                  
 26379                                  ;---------------------------------------------------M067----------------
 26380                                  ;
 26381                                  ; 	the environment pointer is made 0. so the current environment ptr.
 26382                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 26383                                  ;
 26384                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 26385                                  ;
 26386                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 26387                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 26388                                  ; 	was fixed. 
 26389                                  ;
 26390                                  ; ----------------------------------------------------------------------
 26391                                  
 26392                                  ;;ifdef MULTI_CONFIG
 26393                                  
 26394                                  ; If there's any environment data in "config_wrkseg", pass to app
 26395                                  
 26396                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 26397                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26398                                  ;%if 0
 26399 000011C0 89C1                    	mov	cx,ax ; *
 26400                                  	; 05/09/2023
 26401 000011C2 2E391E[9315]            	cmp	[cs:config_envlen],bx ; 0
 26402                                  	;cmp	word [cs:config_envlen],0
 26403 000011C7 7405                    	je	short no_envdata2
 26404 000011C9 2E8B0E[9515]            	mov	cx,[cs:config_wrkseg] ; *
 26405                                  no_envdata2:
 26406                                  ;;endif  ;MULTI_CONFIG
 26407                                  
 26408                                  ;%endif	; 24/10/2022
 26409                                  
 26410                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 26411                                  	; 05/09/2023 (BugFix)
 26412                                  	; 24/10/2022
 26413 000011CE 2E890E[4003]            	mov	[cs:iexec.environ],cx ; *
 26414                                  	; 02/11/2022
 26415                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 26416                                  
 26417                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 26418 000011D3 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 26419                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 26420 000011D7 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 26421                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 26422 000011DB 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 26423 000011DF E86000                  	call	sum_up
 26424 000011E2 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 26425 000011E6 31C0                    	xor	ax,ax
 26426 000011E8 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 26427 000011EA BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 26428 000011ED 06                      	push	es			; save es,ds for load/exec
 26429 000011EE 1E                      	push	ds			; these registers will be restored in sysinit_base.
 26430 000011EF 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 26431                                  					; load/exec function and check sum.
 26432                                  
 26433                                  ;----------------------------------------
 26434                                  
 26435                                  ;j.k. this is the returning address from sysinit_base.
 26436                                  
 26437                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26438                                  
 26439                                  sysinitptr:				; returning far address from sysinit_base
 26440 000011F4 5E                      	pop	si			; restore si for config.sys file.
 26441 000011F5 06                      	push	es
 26442 000011F6 1E                      	push	ds
 26443 000011F7 07                      	pop	es
 26444 000011F8 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 26445 000011F9 7305                            jnc     short install_exit_ret
 26446                                  
 26447 000011FB 56                      	push	si			; error in loading the file for install=.
 26448 000011FC E80634                  	call	badload 		; es:si-> path,filename,0.
 26449 000011FF 5E                      	pop	si
 26450                                  
 26451                                  	; 24/10/2022
 26452                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 26453                                  	; 11/12/2022
 26454                                  	; ds = cs
 26455                                  
 26456                                  	; 30/12/2022 - Retro DOS v4.2
 26457                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 26458                                  
 26459                                  install_exit_ret:
 26460 00001200 C3                      	retn
 26461                                  
 26462                                  ; 30/12/2022 - Retro DOS v4.2
 26463                                  %if 0
 26464                                  install_exit_ret:
 26465                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 26466                                  
 26467                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 26468                                  ;SYSINIT:1142h:
 26469                                  	mov     ah,4Dh
 26470                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 26471                                  	cmp     ah,3
 26472                                  	jz      short sysinitptr_retn
 26473                                  	call    error_line
 26474                                  	stc
 26475                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 26476                                  	retn		
 26477                                  
 26478                                  %endif ; 24/10/2022
 26479                                  
 26480                                  ; ----------------------------------------------------------------------
 26481                                  
 26482                                  ;**	ParaRound - Round Up length to paragraph multiple
 26483                                  ;
 26484                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 26485                                  ;	by 16 yielding a "length in paragraphs" value.
 26486                                  ;
 26487                                  ;	ENTRY	(ax) = byte length
 26488                                  ;	EXIT	(ax) = rounded up length in paragraphs
 26489                                  ;	USES	ax, flags
 26490                                  
 26491                                  ParaRound:
 26492 00001201 83C00F                  	add	ax,15
 26493 00001204 D1D8                    	rcr	ax,1
 26494 00001206 D1E8                    	shr	ax,1
 26495 00001208 D1E8                    	shr	ax,1
 26496 0000120A D1E8                    	shr	ax,1
 26497 0000120C C3                      	retn
 26498                                  
 26499                                  ; ----------------------------------------------------------------------
 26500                                  ; sysinit_base module.
 26501                                  ;
 26502                                  ; This module is relocated by the routine EndFile to a location in low
 26503                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 26504                                  ; that are being loaded by the "install=" command. After the EXEC call
 26505                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 26506                                  ; top of memory) to be sure that the EXECed program did not damage it.
 26507                                  ; If it did, then this module will print an error message and stop the
 26508                                  ; system. Otherwise, it returns control to SYSINIT.
 26509                                  ;
 26510                                  ;in: after relocation,
 26511                                  ;    ax = 4b00h - load and execute the program dos function.
 26512                                  ;    ds = confbot. segment of config.sys file image
 26513                                  ;    es = sysinitseg. segment of sysinit module itself.
 26514                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 26515                                  ;    es:bx = pointer to a parameter block for load.
 26516                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 26517                                  ;    bigsize (word) - # of word from confbot to SI_end.
 26518                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 26519                                  ;			word boundary moduler form.
 26520                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 26521                                  ;
 26522                                  ;note: sysinit should save necessary registers and when the control is back
 26523                                  
 26524                                  	; 24/10/2022
 26525                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 26526                                  sysinit_base:				
 26527 0000120D 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 26528 00001212 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 26529 00001217 CD21                    	int	21h			; load/exec dos call.
 26530 00001219 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 26531 0000121E 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 26532 00001223 1F                      	pop	ds			; restore confbot seg
 26533 00001224 07                      	pop	es			; restore sysinitseg
 26534 00001225 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 26535                                  					; at this time,i don't have to worry about
 26536                                  					; that sysinit module has been broken or not.
 26537 00001227 E81800                  	call	sum_up			; otherwise,check if it is good.
 26538 0000122A 263906[D802]            	cmp	[es:checksum],ax
 26539 0000122F 740C                    	je	short sysinit_base_end
 26540                                  
 26541                                  ;	memory broken. show "memory allocation error" message and stall.
 26542                                  
 26543 00001231 B409                    	mov	ah,9
 26544 00001233 0E                      	push	cs
 26545 00001234 1F                      	pop	ds
 26546                                  	; 30/12/2022
 26547                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 26548                                  	;mov	dx,102
 26549 00001235 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 26550                                  					; 66h (for MSDOS 6.21 SYSINIT)
 26551 00001238 CD21                    	int	21h
 26552                                  		; DOS - PRINT STRING
 26553                                  		; DS:DX -> string terminated by "$"
 26554                                  
 26555                                  	; 30/12/2022 - Retro DOS v4.2
 26556                                  stall:
 26557                                  	; 24/10/2022
 26558                                  _stall: 
 26559                                  	; 11/12/2022
 26560 0000123A F4                      	hlt 
 26561                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26562                                  	;hlt				;use HLT to minimize energy consumption
 26563 0000123B EBFD                            jmp	short _stall
 26564                                  
 26565                                  sysinit_base_end: 
 26566 0000123D 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 26567                                  
 26568                                  ;-------------------------------------
 26569                                  
 26570                                  sum_up:
 26571                                  
 26572                                  ;in:   es - sysinitseg.
 26573                                  ;out:  ax - result
 26574                                  ;
 26575                                  ;remark: since this routine will only check starting from "locstack" to the end of
 26576                                  ;	 sysinit segment,the data area, and the current stack area are not
 26577                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 26578                                  ;	 gaurantee to be safe.
 26579                                  ;
 26580                                  ;first sum up confbot seg.
 26581                                  
 26582 00001242 1E                      	push	ds
 26583                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26584                                  	; (SYSINIT:12C6h)
 26585 00001243 26A1[A102]              	mov	ax,[es:CONFBOT]
 26586                                  	; 24/10/2022
 26587                                  	;mov	ax,[es:top_of_cdss]
 26588 00001247 8ED8                    	mov	ds,ax
 26589 00001249 31F6                    	xor	si,si
 26590 0000124B 31C0                    	xor	ax,ax
 26591 0000124D 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 26592                                  					; whole test better fail.
 26593 00001252 D1E9                    	shr	cx,1			; make it a word count
 26594 00001254 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 26595                                  sum1:
 26596 00001256 0304                    	add	ax,[si]
 26597 00001258 46                      	inc	si
 26598 00001259 46                      	inc	si
 26599 0000125A E2FA                    	loop	sum1
 26600                                  ;now,sum up sysinit module.
 26601                                  sum_sys_code:
 26602                                  	; 24/10/2022
 26603 0000125C BE5C12                  	mov	si,locstack ;; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 26604                                  			    ;; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 26605                                  			    ; 10/04/2024	
 26606                                  			    ; 586h (PCDOS 7.1 IBMBIO.COM, SYSINIT)	
 26607                                  				        ; starting after the stack.  M069
 26608                                  					;  this does not cover the possible stack code!!!
 26609                                  	;;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 26610                                  	; 02/11/2022
 26611                                  	;;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 26612                                  	; 10/04/2024
 26613                                  	;mov	cx,5B40h  ; (23360) for PCDOS 7.1 IBMBIO.COM (SYSINIT)	
 26614                                  	; 30/12/2022  
 26615 0000125F B9[F04F]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 26616 00001262 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 26617 00001264 D1E9                    	shr	cx,1
 26618                                  sum2:
 26619 00001266 260304                  	add	ax,[es:si]
 26620 00001269 46                      	inc	si
 26621 0000126A 46                      	inc	si
 26622 0000126B E2F9                    	loop	sum2
 26623 0000126D 1F                      	pop	ds
 26624 0000126E C3                      	retn
 26625                                  
 26626                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26627                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 26628                                  ; (SYSINIT:12F2h)
 26629                                  ; 10/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 26630                                  ; (SYSINIT:149Dh)
 26631                                  
 26632                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 26633                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h)
 26634                                  				    ; = 62 (PCDOS 7.1 IBMBIO.COM, SYSINIT:143Bh)
 26635                                  sysinit_base_ssx:	
 26636 0000126F 0000                    	dw	0
 26637                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 26638                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1295h)
 26639                                  				    ; = 64 (PCDOS 7.1 IBMBIO.COM, SYSINIT:1440h)
 26640                                  sysinit_base_spx:
 26641 00001271 0000                    	dw	0	
 26642                                  
 26643                                  mem_alloc_err_msgx:
 26644                                  
 26645                                         ;include msbio.cl4		; memory allocation error message
 26646                                  
 26647                                  ;(SYSINIT:12F6h: ; MSDOS 6.21 IO.SYS)
 26648                                  ;SYSINIT:14A1h:	; PCDOS 7.1 IBMBIO.COM
 26649 00001273 0D0A                    	db	0Dh,0Ah
 26650 00001275 4D656D6F727920616C-     	db 	'Memory allocation error $'
 26650 0000127E 6C6F636174696F6E20-
 26650 00001287 6572726F722024     
 26651                                  
 26652                                  end_sysinit_base: ; label byte
 26653                                  	; 24/10/2022
 26654                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 26655                                  
 26656                                  ; ----------------------------------------------------------------------
 26657                                  ; Set_Buffer
 26658                                  ;
 26659                                  ;function: set buffers in the real memory.				  
 26660                                  ;	   lastly set the memhi,memlo for the next available free address.
 26661                                  ;
 26662                                  ;input:    ds:bx -> buffinfo.
 26663                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 26664                                  ;	   singlebuffersize = buffer header size + sector size		  
 26665                                  ;
 26666                                  ;output:   buffers Queue established.	       				   
 26667                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 26668                                  ; ----------------------------------------------------------------------
 26669                                  
 26670                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26671                                  	; (SYSINIT:11DCh)
 26672                                  
 26673                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26674                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:14BCh)
 26675                                  
 26676                                  set_buffer:
 26677 0000128E 30D2                    	xor	dl,dl				; assume buffers not in HMA
 26678 00001290 E85500                  	call	GetBufferAddr
 26679 00001293 7402                    	jz	short set_buff_1
 26680 00001295 B201                    	mov	dl,1				; buffers in HMA
 26681                                  set_buff_1:
 26682                                  	; 25/10/2022
 26683                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 26684 00001297 893F                    	mov	[bx],di
 26685                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 26686 00001299 8C4702                  	mov	[bx+2],es
 26687                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 26688 0000129C C747040000              	mov	word [bx+4],0
 26689                                  
 26690 000012A1 89F8                    	mov	ax,di
 26691 000012A3 2E8B0E[9702]            	mov	cx,[cs:buffers]
 26692 000012A8 57                      	push	di				; remember first buffer
 26693                                  
 26694                                  ;	for each buffer
 26695                                  
 26696                                  nxt_buff:
 26697 000012A9 E87500                  	call	set_buffer_info 		; set buf_link,buf_id...
 26698 000012AC 89C7                    	mov	di,ax
 26699 000012AE E2F9                    	loop	nxt_buff
 26700                                  
 26701 000012B0 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 26702                                  
 26703 000012B5 59                      	pop	cx				; get first buffer
 26704                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 26705 000012B6 26890D                  	mov	[es:di],cx
 26706 000012B9 87F9                    	xchg	cx,di
 26707                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 26708                                  	; 25/10/2022
 26709 000012BB 26894D02                	mov	[es:di+2],cx
 26710                                  
 26711 000012BF 08D2                    	or	dl,dl				; In HMa ?
 26712 000012C1 7417                    	jz	short set_buff_2		; no
 26713                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 26714 000012C3 C6470C01                	mov	byte [bx+12],1
 26715 000012C7 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 26716                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 26717 000012CB C7470D0000              	mov	word [bx+13],0
 26718                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 26719 000012D0 89470F                  	mov	word [bx+15],ax
 26720 000012D3 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 26721                                  	; 11/04/2024 - Retro DOS v5.0
 26722                                  	; 05/09/2023
 26723                                  	;;sub	ax,bufinsiz ; 20		; buffer head not required
 26724                                  	;sub	ax,20
 26725 000012D7 83E818                  	sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 26726                                  
 26727                                  set_buff_2:
 26728 000012DA 2E0106[6003]            	add	[cs:memlo],ax
 26729                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26730 000012DF 2E800E[9C15]02          	or	byte [cs:setdevmarkflag],2
 26731                                  	;call	round
 26732                                  	;retn
 26733                                  	; 12/12/2022
 26734 000012E5 E9E330                  	jmp	round
 26735                                  
 26736                                  ; ----------------------------------------------------------------------
 26737                                  ; procedure : GetBufferAddr
 26738                                  ;
 26739                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 26740                                  ;
 26741                                  ; returns in es:di the buffer adress
 26742                                  ; returns NZ if allocated in HMA
 26743                                  ; ----------------------------------------------------------------------
 26744                                  
 26745                                  	; 25/10/2022 
 26746                                  GetBufferAddr:
 26747 000012E8 53                      	push	bx
 26748 000012E9 52                      	push	dx
 26749                                  
 26750                                  	; 11/04/2024 - Retro DOS v5.0
 26751                                  	; PCDOS 7.1 IBMBIO.COM
 26752                                  	;;;
 26753 000012EA 2E803E[6C03]02          	cmp	byte [cs:dosdata_umb],2
 26754                                  				; is dosdata moved to UMB ? (DOSDATA=UMB done)
 26755 000012F0 7506                    	jne	short gba_1     ; no
 26756 000012F2 837F02FF                	cmp	word [bx+2],0FFFFh ; is the buffer (already) in HMA ?
 26757 000012F6 7423                    	je	short gba_2	; yes
 26758                                  gba_1:
 26759                                  	;;;
 26760                                  
 26761 000012F8 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 26762 000012FC 2EF726[9702]            	mul	word [cs:buffers]
 26763                                  	;add	ax,0Fh
 26764 00001301 83C00F                  	add	ax,15 
 26765                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26766                                  	;and	ax,~15	; 0FFF0h	; para round
 26767                                  	; 12/12/2022
 26768 00001304 24F0                    	and	al,~15	; 0F0h
 26769 00001306 89C3                    	mov	bx,ax
 26770 00001308 B8024A                  	mov	ax,4A02h
 26771                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 26772 0000130B CD2F                    	int	2Fh	; DOS 5+ - ALLOCATE HMA SPACE
 26773                                  			;     AX = 4A02h
 26774                                  			;     BX = number of bytes
 26775                                  			; Return:
 26776                                  			;     ES:DI -> start of allocated HMA block or FFFFh:FFFFh
 26777                                  			;     BX = number of bytes actually allocated
 26778                                  			;	   (rounded up to next paragraph)
 26779                                  			; Notes:
 26780                                  			;     this call is not valid unless DOS is loaded in the HMA
 26781                                  			;     (DOS=HIGH)
 26782                                  
 26783 0000130D 83FFFF                  	cmp	di,0FFFFh
 26784 00001310 7506                    	jne	short got_hma
 26785                                  	
 26786                                  	;mov	di,0		; dont xor di,di Z flag needed
 26787                                  	; 05/09/2023
 26788                                  	; zf=1
 26789 00001312 47                      	inc	di ; 0FFFFh -> 0
 26790                                  	; zf=1
 26791                                  	
 26792                                  	;zf=1
 26793                                  	;xor	di,di	; 25/10/2022
 26794                                  	;zf=1
 26795 00001313 2E8E06[6203]            	mov	es,[cs:memhi]
 26796                                  got_hma:
 26797 00001318 5A                      	pop	dx
 26798 00001319 5B                      	pop	bx
 26799 0000131A C3                      	retn
 26800                                  
 26801                                  	; 11/04/2024 - Retro DOS v5.0
 26802                                  	; PCDOS 7.1 IBMBIO.COM
 26803                                  	;;;
 26804                                  gba_2:
 26805 0000131B C43F                    	les	di,[bx]
 26806 0000131D 09FF                    	or	di,di
 26807                                  	;pop	dx
 26808                                  	;pop	bx
 26809                                  	;retn
 26810                                  	; 11/04/2024 - Retro DOS v5.0
 26811 0000131F EBF7                    	jmp	short got_hma
 26812                                  	;;;
 26813                                  
 26814                                  ; ----------------------------------------------------------------------
 26815                                  
 26816                                  set_buffer_info:
 26817                                  
 26818                                  ;function: set buf_link,buf_id,buf_sector
 26819                                  ;
 26820                                  ;in: es:di -> buffer header to be set.
 26821                                  ;    ax = di
 26822                                  ;
 26823                                  ;out:
 26824                                  ;    above entries set.
 26825                                  
 26826                                  	; 25/10/2022 
 26827 00001321 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 26828                                  	;pop	word [es:di+buffinfo.buf_prev]
 26829 00001326 268F4502                	pop	word [es:di+2]
 26830 0000132A 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 26831 0000132E 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 26832                                  	;mov	[es:di+buffinfo.buf_next],ax
 26833 00001333 268905                  	mov	[es:di],ax
 26834                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 26835 00001336 26C74504FF00            	mov	word [es:di+4],00FFh
 26836                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 26837 0000133C 26C745060000            	mov	word [es:di+6],0
 26838                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 26839 00001342 26C745080000            	mov	word [es:di+8],0
 26840 00001348 C3                      	retn
 26841                                  
 26842                                  ; ======================================================================
 26843                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 26844                                  ; ----------------------------------------------------------------------
 26845                                  ; 27/03/2019 - Retro DOS v4.0
 26846                                  
 26847                                  ; ----------------------------------------------------------------------
 26848                                  ; ibmstack initialization routine.
 26849                                  ;
 26850                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 26851                                  ;	has been modified. this initialization routine also has to
 26852                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 26853                                  ;	should be set to signal that this interrupt handler is the
 26854                                  ;	first handler hooked to this interrupt vector.
 26855                                  ;	we determine this by looking at the instruction pointed by
 26856                                  ;	this vector. if it is iret, then this handler should be the
 26857                                  ;	first one. in our case, only the interrupt vector 77h is the
 26858                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 26859                                  ;
 26860                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 26861                                  ;	some design changes are needed to the above interrupt sharing
 26862                                  ;	method. the above sharing scheme assumes that 1). interrupt
 26863                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 26864                                  ;	interrupts would only be generated on levels 7 and 15.
 26865                                  ;	these assumptions are not true any more. we have to use the firstflag
 26866                                  ;	for every level of interrupt. we will set the firstflag on the following
 26867                                  ;	conditions:
 26868                                  ;
 26869                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 26870                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 26871                                  ;	 c. else if cs:ip points to an iret, then "first"
 26872                                  ;	 d. else if cs:ip points to dummy, then "first"
 26873                                  ;
 26874                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 26875                                  ;	be equal to the value at f000:ff01. this location is the initial value
 26876                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 26877                                  ;	the bioses for all of the machines.
 26878                                  ;
 26879                                  ;	system design group requests bios to handle the phantom interrupts.
 26880                                  ;
 26881                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 26882                                  ;	produced by the bogus adapter card even without interrupt request is
 26883                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 26884                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 26885                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 26886                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 26887                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 26888                                  ;	interrupt line.
 26889                                  ;
 26890                                  ;	to handle those "phantom" interrupts, the main stack code will check
 26891                                  ;	the own firstflag, and if it is not "first" (which means the forward
 26892                                  ;	pointer points to the legal shared interrupt handler), then pass the
 26893                                  ;	control. if it is the first, then the following action should be
 26894                                  ;	taken. we don't have to implement skack logic in this case.
 26895                                  ;
 26896                                  ;	to implement this logic, we rather choose a simple method.
 26897                                  ;	if ont of the above "firstflag" conditions is met, we are not
 26898                                  ;	going to hook this interrupt vector. the reason is if the original
 26899                                  ;	vector points to "iret" and do nothing, we don't need
 26900                                  ;	to implement the stack logic for it. this will simplify implementation
 26901                                  ;	while maintaining compatibility with the old version of dos.
 26902                                  ;	this implies that in the main stack code, there might be a stack code
 26903                                  ;	that will never be used, a dead code.
 26904                                  ;
 26905                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 26906                                  
 26907                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26908                                  	; (SYSINIT:1287h)
 26909                                  
 26910                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26911                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:157Ch)
 26912                                  
 26913                                  	; 14/12/2022
 26914                                  stackinit:
 26915 00001349 50                      	push	ax
 26916 0000134A 1E                      	push	ds
 26917 0000134B 06                      	push	es
 26918 0000134C 53                      	push	bx
 26919 0000134D 51                      	push	cx
 26920 0000134E 52                      	push	dx
 26921 0000134F 57                      	push	di
 26922 00001350 56                      	push	si
 26923 00001351 55                      	push	bp
 26924                                  
 26925                                  ;currently es -> stack code area
 26926                                  
 26927                                  	; 12/12/2022
 26928                                  	; ds = cs
 26929 00001352 A1[8A02]                	mov	ax,[stack_count]
 26930 00001355 89C1                    	mov	cx,ax  ; *!*!*  
 26931                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26932                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 26933                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 26934 00001357 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 26935                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 26936 0000135B A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 26937 0000135E 26A3[0600]              	mov	[es:stacksize],ax
 26938                                  	; 12/12/2022
 26939 00001362 A1[8E02]                	mov	ax,[stack_addr]			; offset
 26940                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26941                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26942                                  	;mov	ax,[cs:stack_addr]  ; !!
 26943 00001365 26A3[0800]              	mov	[es:stacks],ax
 26944                                  	; 12/12/2022
 26945 00001369 89C5                    	mov	bp,ax ; *!*
 26946 0000136B A1[9002]                	mov	ax,[stack_addr+2]
 26947                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26948                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26949                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 26950 0000136E 26A3[0A00]              	mov	[es:stacks+2],ax
 26951                                  
 26952                                  ; initialize the data fields with the parameters
 26953                                  
 26954                                  ; "firstentry" will always be at stacks
 26955                                  
 26956                                  	;mov	bp,[es:stacks]			; get offset of stack
 26957                                  	; 12/12/2022
 26958                                  	; bp = [es:stacks] ; *!*
 26959 00001372 26892E[0C00]            	mov	[es:firstentry],bp
 26960                                  
 26961                                  ; the stacks will always immediately follow the table entries
 26962                                  
 26963 00001377 B80800                  	mov	ax,entrysize ; 8
 26964                                  	;mov	cx,[es:stackcount]
 26965                                  	; 12/12/2022
 26966                                  	; cx = [es:stackcount] ; *!*!*
 26967 0000137A F7E1                    	mul	cx
 26968 0000137C 01E8                    	add	ax,bp
 26969 0000137E 26A3[0400]              	mov	[es:stackat],ax
 26970 00001382 89C3                    	mov	bx,ax
 26971 00001384 83EB02                  	sub	bx,2
 26972                                  
 26973                                  ; zero the entire stack area to start with
 26974                                  
 26975 00001387 268B3E[0400]            	mov	di,[es:stackat]
 26976 0000138C 26A1[0600]              	mov	ax,[es:stacksize]
 26977 00001390 F7E1                    	mul	cx
 26978 00001392 89C1                    	mov	cx,ax
 26979 00001394 31C0                    	xor	ax,ax
 26980 00001396 06                      	push	es
 26981 00001397 1F                      	pop	ds				;ds = relocated stack code seg.
 26982                                  
 26983                                  ;now, ds -> stack code area
 26984                                  
 26985 00001398 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 26986 0000139C FC                      	cld
 26987 0000139D F3AA                    	rep	stosb
 26988                                  
 26989 0000139F 8B0E[0200]              	mov	cx,[stackcount]
 26990                                  
 26991                                  ; loop for "count" times, building a table entry
 26992                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 26993                                  ;  cx = number of entries
 26994                                  ;  es:bp => base of stacks - 2
 26995                                  ;  es:bx => first table entry
 26996                                  
 26997                                  buildloop:
 26998                                  	; 11/12/2022
 26999                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 27000                                  	; 25/10/2022
 27001                                  	;mov	byte [es:bp],free
 27002                                  	; 06/07/2023
 27003 000013A3 26884600                	mov	[es:bp],al ; 0 ; free
 27004 000013A7 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 27005                                  	;mov	[es:bp+1],al
 27006 000013AB 26894602                	mov	[es:bp+savedsp],ax
 27007                                  	;mov	[es:bp2],ax
 27008 000013AF 26894604                	mov	[es:bp+savedss],ax
 27009                                  	;mov	[es:bp+4],ax
 27010 000013B3 031E[0600]              	add	bx,[stacksize]
 27011 000013B7 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 27012                                  	;mov	[es:bp+6],bx
 27013 000013BB 26892F                  	mov	[es:bx],bp
 27014 000013BE 83C508                  	add	bp,entrysize ; 8
 27015                                  
 27016 000013C1 E2E0                    	loop	buildloop
 27017                                  
 27018 000013C3 83ED08                  	sub	bp,entrysize ; 8
 27019 000013C6 892E[0E00]              	mov	[lastentry],bp
 27020 000013CA 892E[1000]              	mov	[nextentry],bp
 27021                                  
 27022 000013CE 1E                      	push	ds
 27023                                  	;mov	ax,0F000h		;look at the model byte
 27024                                  	; 05/09/2023
 27025 000013CF B4F0                    	mov	ah,0F0h ; ax = 0F000h
 27026 000013D1 8ED8                    	mov	ds,ax
 27027 000013D3 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 27028 000013D8 1F                      	pop	ds
 27029 000013D9 7504                    	jne	short skip_disablenmis
 27030                                  
 27031 000013DB B007                    	mov	al,07h			; disable convertible nmis
 27032 000013DD E672                    	out	72h,al
 27033                                  
 27034                                  skip_disablenmis:
 27035 000013DF 31C0                    	xor	ax,ax
 27036 000013E1 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 27037                                  					;ds - relocated stack code segment
 27038 000013E3 FA                      	cli
 27039                                  
 27040                                  	;irp	aa,<02,08,09,70>
 27041                                  	;
 27042                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27043                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 27044                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 27045                                  	;mov	dx,offset int&aa	;pass where new handler is
 27046                                  	;call	new_init_loop		;adjust the vector to new handler,
 27047                                  	;				;saving pointer to original owner
 27048                                  	;endm
 27049                                  
 27050                                  stkinit_02:
 27051 000013E4 BE0800                  	mov	si,02h*4 ; 8
 27052 000013E7 BF[B305]                	mov	di,INT19OLD02
 27053 000013EA BB[1200]                	mov	bx,old02
 27054 000013ED BA[1600]                	mov	dx,int02
 27055 000013F0 E84801                  	call	new_init_loop
 27056                                  stkinit_08:
 27057 000013F3 BE2000                  	mov	si,08h*4 ; 32
 27058 000013F6 BF[B805]                	mov	di,INT19OLD08
 27059 000013F9 BB[3800]                	mov	bx,old08
 27060 000013FC BA[3C00]                	mov	dx,int08
 27061 000013FF E83901                  	call	new_init_loop
 27062                                  stkinit_09:
 27063 00001402 BE2400                  	mov	si,09h*4 ; 36
 27064 00001405 BF[BD05]                	mov	di,INT19OLD09
 27065 00001408 BB[4100]                	mov	bx,old09
 27066 0000140B BA[4500]                	mov	dx,int09
 27067 0000140E E82A01                  	call	new_init_loop
 27068                                  stkinit_70:
 27069 00001411 BEC001                  	mov	si,70h*4 ; 448
 27070 00001414 BF[DB05]                	mov	di,INT19OLD70
 27071 00001417 BB[4E00]                	mov	bx,old70
 27072 0000141A BA[5200]                	mov	dx,int70
 27073 0000141D E81B01                  	call	new_init_loop
 27074                                  
 27075                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 27076                                  	;
 27077                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27078                                  	;push	ds			;save relocated stack code segment
 27079                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 27080                                  	;push	ds
 27081                                  	;pop	dx			;dx = segment value
 27082                                  	;	
 27083                                  	;cmp	dx,0
 27084                                  	;jz	int&aa&_first
 27085                                  	;
 27086                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 27087                                  	;jz	int&aa&_first
 27088                                  	;
 27089                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 27090                                  	;jz	int&aa&_not_first
 27091                                  	;
 27092                                  	;cmp	dx,0f000h		;rom bios segment
 27093                                  	;jnz	int&aa&_not_first
 27094                                  	;
 27095                                  	;push	es
 27096                                  	;push	dx
 27097                                  	;mov	dx,0f000h
 27098                                  	;mov	es,dx
 27099                                  	;cmp	bx,word ptr es:0ff01h
 27100                                         	;pop	dx
 27101                                  	;pop	es
 27102                                  	;jz	int&aa&_first
 27103                                  	;
 27104                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 27105                                  	;pop	ds
 27106                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 27107                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 27108                                  	;mov	dx, offset int&aa	;pass where new handler is
 27109                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 27110                                  	;				;pointer to original owner.
 27111                                  	;jmp	short int&aa&_end
 27112                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 27113                                  	;pop	ds
 27114                                  ;int&aa&_end:
 27115                                  	;
 27116                                  	;endm
 27117                                  
 27118                                  stkinit_0A:
 27119 00001420 BE2800                  	mov	si,0Ah*4 ; 40
 27120                                  	
 27121                                  ; 14/12/2022
 27122                                  %if 0	
 27123                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27124                                  	push	ds
 27125                                  	
 27126                                  	lds	bx,[es:si]
 27127                                  	push	ds
 27128                                  	pop	dx
 27129                                  		
 27130                                  	cmp	dx,0
 27131                                  	je	short int_0A_first
 27132                                  	
 27133                                  	cmp	byte [bx],0CFh
 27134                                  	je	short int_0A_first
 27135                                  	
 27136                                  	cmp	word [bx+6],424Bh
 27137                                  	je	short int_0A_not_first
 27138                                  	
 27139                                  	cmp	dx,0F000h
 27140                                  	jne	short int_0A_not_first
 27141                                  	
 27142                                  	push	es
 27143                                  	push	dx
 27144                                  	mov	dx,0F000h
 27145                                  	mov	es,dx
 27146                                  	cmp	bx,[es:0FF01h]
 27147                                         	pop	dx
 27148                                  	pop	es
 27149                                  	je	short int_0A_first
 27150                                  %Endif
 27151                                  
 27152                                  	; 14/12/2022
 27153                                  	; 25/10/2022
 27154 00001423 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27155 00001426 730C                    	jnc	short int_0A_first
 27156                                  	
 27157                                  int_0A_not_first:
 27158                                  	; 14/12/2022
 27159                                  	; 25/10/2022
 27160                                  	;pop	ds
 27161 00001428 BF[C205]                	mov	di,INT19OLD0A
 27162 0000142B BB[5900]                	mov	bx,old0A
 27163 0000142E BA[5700]                	mov	dx,int0A
 27164 00001431 E80701                  	call	new_init_loop
 27165                                  	
 27166                                  	; 14/12/2022	
 27167                                  	;jmp	short int_0A_end
 27168                                  ;int_0A_first:
 27169                                  	; 25/10/2022
 27170                                  	;pop	ds
 27171                                  
 27172                                  	; 14/12/2022
 27173                                  int_0A_first:
 27174                                  int_0A_end:
 27175                                  
 27176                                  stkinit_0B:
 27177 00001434 BE2C00                  	mov	si,0Bh*4 ; 44
 27178                                  	
 27179                                  	; 14/12/2022
 27180                                  	; 25/10/2022
 27181 00001437 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27182 0000143A 730C                    	jnc	short int_0B_end ; int_0B_first
 27183                                  
 27184                                  ; 14/12/2022
 27185                                  %if 0	
 27186                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27187                                  	push	ds
 27188                                  	lds	bx,[es:si]
 27189                                  	push	ds
 27190                                  	pop	dx
 27191                                  		
 27192                                  	cmp	dx,0
 27193                                  	je	short int_0B_first
 27194                                  
 27195                                  	cmp	byte [bx],0CFh
 27196                                  	je	short int_0B_first
 27197                                  	
 27198                                  	cmp	word [bx+6],424Bh
 27199                                  	je	short int_0B_not_first
 27200                                  	
 27201                                  	cmp	dx,0F000h
 27202                                  	jne	short int_0B_not_first
 27203                                  
 27204                                  	push	es
 27205                                  	push	dx
 27206                                  	mov	dx,0F000h
 27207                                  	mov	es,dx
 27208                                  	cmp	bx,[es:0FF01h]
 27209                                  	pop	dx
 27210                                  	pop	es
 27211                                  	je	short int_0B_first
 27212                                  %endif
 27213                                  
 27214                                  int_0B_not_first:
 27215                                  	; 14/12/2022
 27216                                  	; 25/10/2022
 27217                                  	;pop	ds
 27218 0000143C BF[C705]                	mov	di,INT19OLD0B
 27219 0000143F BB[7100]                	mov	bx,old0B
 27220 00001442 BA[6F00]                	mov	dx,int0B
 27221 00001445 E8F300                  	call	new_init_loop
 27222                                  
 27223                                  	; 14/12/2022
 27224                                  	;jmp	short int_0B_end
 27225                                  ;int_0B_first:
 27226                                  	; 25/10/2022
 27227                                  	;pop	ds
 27228                                  
 27229                                  int_0B_end:
 27230                                  	
 27231                                  stkinit_0C:
 27232 00001448 BE3000                  	mov	si,0Ch*4 ; 48
 27233                                  	
 27234                                  	; 14/12/2022
 27235                                  	; 25/10/2022
 27236 0000144B E8C300                  	call	int_xx_first_check
 27237 0000144E 730C                    	jnc	short int_0C_end ; int_0C_first
 27238                                  
 27239                                  ; 14/12/2022
 27240                                  %if 0	
 27241                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27242                                  	push	ds
 27243                                  	lds	bx,[es:si]
 27244                                  	push	ds
 27245                                  	pop	dx
 27246                                  		
 27247                                  	cmp	dx,0
 27248                                  	je	short int_0C_first
 27249                                  
 27250                                  	cmp	byte [bx],0CFh
 27251                                  	je	short int_0C_first
 27252                                  	
 27253                                  	cmp	word [bx+6],424Bh
 27254                                  	je	short int_0C_not_first
 27255                                  	
 27256                                  	cmp	dx,0F000h
 27257                                  	jne	short int_0C_not_first
 27258                                  
 27259                                  	push	es
 27260                                  	push	dx
 27261                                  	mov	dx,0F000h
 27262                                  	mov	es,dx
 27263                                  	cmp	bx,[es:0FF01h]
 27264                                  	pop	dx
 27265                                  	pop	es
 27266                                  	je	short int_0C_first
 27267                                  %endif
 27268                                  	
 27269                                  int_0C_not_first:
 27270                                  	; 14/12/2022
 27271                                  	; 25/10/2022
 27272                                  	;pop	ds
 27273 00001450 BF[CC05]                	mov	di,INT19OLD0C
 27274 00001453 BB[8900]                	mov	bx,old0C
 27275 00001456 BA[8700]                	mov	dx,int0C
 27276 00001459 E8DF00                  	call	new_init_loop
 27277                                  
 27278                                  	; 14/12/2022
 27279                                  	;jmp	short int_0C_end
 27280                                  ;int_0C_first:
 27281                                  	; 25/10/2022
 27282                                  	;pop	ds
 27283                                  
 27284                                  int_0C_end:
 27285                                  
 27286                                  stkinit_0D:
 27287 0000145C BE3400                  	mov	si,0Dh*4 ; 52
 27288                                  
 27289                                  	; 14/12/2022	
 27290                                  	; 25/10/2022
 27291 0000145F E8AF00                  	call	int_xx_first_check
 27292 00001462 730C                    	jnc	short int_0D_end ; int_0D_first
 27293                                  
 27294                                  ; 14/12/2022
 27295                                  %if 0	
 27296                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27297                                  	push	ds
 27298                                  	lds	bx,[es:si]
 27299                                  	push	ds
 27300                                  	pop	dx
 27301                                  		
 27302                                  	cmp	dx,0
 27303                                  	je	short int_0D_first
 27304                                  
 27305                                  	cmp	byte [bx],0CFh
 27306                                  	je	short int_0D_first
 27307                                  	
 27308                                  	cmp	word [bx+6],424Bh
 27309                                  	je	short int_0D_not_first
 27310                                  	
 27311                                  	cmp	dx,0F000h
 27312                                  	jne	short int_0D_not_first
 27313                                  
 27314                                  	push	es
 27315                                  	push	dx
 27316                                  	mov	dx,0F000h
 27317                                  	mov	es,dx
 27318                                  	cmp	bx,[es:0FF01h]
 27319                                  	pop	dx
 27320                                  	pop	es
 27321                                  	je	short int_0D_first
 27322                                  %endif
 27323                                  	
 27324                                  int_0D_not_first:
 27325                                  	; 14/12/2022
 27326                                  	; 25/10/2022
 27327                                  	;pop	ds
 27328 00001464 BF[D105]                	mov	di,INT19OLD0D
 27329 00001467 BB[A100]                	mov	bx,old0D
 27330 0000146A BA[9F00]                	mov	dx,int0D
 27331 0000146D E8CB00                  	call	new_init_loop
 27332                                  
 27333                                  	; 14/12/2022
 27334                                  	;jmp	short int_0D_end
 27335                                  	; 02/11/2022
 27336                                  ;int_0D_first:
 27337                                  	;pop	ds
 27338                                  
 27339                                  int_0D_end:
 27340                                  
 27341                                  stkinit_0E:
 27342 00001470 BE3800                  	mov	si,0Eh*4 ; 56
 27343                                  
 27344                                  	; 14/12/2022	
 27345                                  	; 25/10/2022
 27346 00001473 E89B00                  	call	int_xx_first_check
 27347 00001476 730C                    	jnc	short int_0E_end ; int_0E_first
 27348                                  
 27349                                  ; 14/12/2022
 27350                                  %if 0	
 27351                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27352                                  	push	ds
 27353                                  	lds	bx,[es:si]
 27354                                  	push	ds
 27355                                  	pop	dx
 27356                                  		
 27357                                  	cmp	dx,0
 27358                                  	je	short int_0E_first
 27359                                  
 27360                                  	cmp	byte [bx],0CFh
 27361                                  	je	short int_0E_first
 27362                                  	
 27363                                  	cmp	word [bx+6],424Bh
 27364                                  	je	short int_0E_not_first
 27365                                  	
 27366                                  	cmp	dx,0F000h
 27367                                  	jne	short int_0E_not_first
 27368                                  
 27369                                  	push	es
 27370                                  	push	dx
 27371                                  	mov	dx,0F000h
 27372                                  	mov	es,dx
 27373                                  	cmp	bx,[es:0FF01h]
 27374                                  	pop	dx
 27375                                  	pop	es
 27376                                  	je	short int_0E_first
 27377                                  %endif
 27378                                  	
 27379                                  int_0E_not_first:
 27380                                  	; 14/12/2022
 27381                                  	; 25/10/2022
 27382                                  	;pop	ds
 27383 00001478 BF[D605]                	mov	di,INT19OLD0E
 27384 0000147B BB[B900]                	mov	bx,old0E
 27385 0000147E BA[B700]                	mov	dx,int0E
 27386 00001481 E8B700                  	call	new_init_loop
 27387                                  
 27388                                  	; 14/12/2022
 27389                                  	;jmp	short int_0E_end
 27390                                  ;int_0E_first:
 27391                                  	; 25/10/2022
 27392                                  	;pop	ds	
 27393                                  
 27394                                  int_0E_end:
 27395                                  
 27396                                  stkinit_72:
 27397 00001484 BEC801                  	mov	si,72h*4 ; 456
 27398                                  	
 27399                                  	; 14/12/2022
 27400                                  	; 25/10/2022
 27401 00001487 E88700                  	call	int_xx_first_check
 27402 0000148A 730C                    	jnc	short int_72_end ; int_72_first
 27403                                  
 27404                                  ; 14/12/2022
 27405                                  %if 0	
 27406                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27407                                  	push	ds
 27408                                  	lds	bx,[es:si]
 27409                                  	push	ds
 27410                                  	pop	dx
 27411                                  		
 27412                                  	cmp	dx,0
 27413                                  	je	short int_72_first
 27414                                  
 27415                                  	cmp	byte [bx],0CFh
 27416                                  	je	short int_72_first
 27417                                  	
 27418                                  	cmp	word [bx+6],424Bh
 27419                                  	je	short int_72_not_first
 27420                                  	
 27421                                  	cmp	dx,0F000h
 27422                                  	jne	short int_72_not_first
 27423                                  
 27424                                  	push	es
 27425                                  	push	dx
 27426                                  	mov	dx,0F000h
 27427                                  	mov	es,dx
 27428                                  	cmp	bx,[es:0FF01h]
 27429                                  	pop	dx
 27430                                  	pop	es
 27431                                  	je	short int_72_first
 27432                                  %endif
 27433                                  	
 27434                                  int_72_not_first:
 27435                                  	; 14/12/2022
 27436                                  	; 25/10/2022
 27437                                  	;pop	ds
 27438 0000148C BF[E005]                	mov	di,INT19OLD72
 27439 0000148F BB[D100]                	mov	bx,old72
 27440 00001492 BA[CF00]                	mov	dx,int72
 27441 00001495 E8A300                  	call	new_init_loop
 27442                                  
 27443                                  	; 14/12/2022
 27444                                  	;jmp	short int_72_end
 27445                                  ;int_72_first:
 27446                                  	; 25/10/2022
 27447                                  	;pop	ds
 27448                                  
 27449                                  int_72_end:
 27450                                  
 27451                                  stkinit_73:
 27452 00001498 BECC01                  	mov	si,73h*4 ; 460
 27453                                  	
 27454                                  	; 14/12/2022
 27455                                  	; 25/10/2022
 27456 0000149B E87300                  	call	int_xx_first_check
 27457 0000149E 730C                    	jnc	short int_73_end ; int_73_first
 27458                                  
 27459                                  ; 14/12/2022
 27460                                  %if 0	
 27461                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27462                                  	push	ds
 27463                                  	lds	bx,[es:si]
 27464                                  	push	ds
 27465                                  	pop	dx
 27466                                  		
 27467                                  	cmp	dx,0
 27468                                  	je	short int_73_first
 27469                                  
 27470                                  	cmp	byte [bx],0CFh
 27471                                  	je	short int_73_first
 27472                                  	
 27473                                  	cmp	word [bx+6],424Bh
 27474                                  	je	short int_73_not_first
 27475                                  	
 27476                                  	cmp	dx,0F000h
 27477                                  	jne	short int_73_not_first
 27478                                  
 27479                                  	push	es
 27480                                  	push	dx
 27481                                  	mov	dx,0F000h
 27482                                  	mov	es,dx
 27483                                  	cmp	bx,[es:0FF01h]
 27484                                  	pop	dx
 27485                                  	pop	es
 27486                                  	je	short int_73_first
 27487                                  %endif	
 27488                                  	
 27489                                  int_73_not_first:
 27490                                  	; 14/12/2022
 27491                                  	; 25/10/2022
 27492                                  	;pop	ds
 27493 000014A0 BF[E505]                	mov	di,INT19OLD73
 27494 000014A3 BB[E900]                	mov	bx,old73
 27495 000014A6 BA[E700]                	mov	dx,int73
 27496 000014A9 E88F00                  	call	new_init_loop
 27497                                  
 27498                                  	; 14/12/2022
 27499                                  	;jmp	short int_73_end
 27500                                  ;int_73_first:
 27501                                  	; 25/10/2022
 27502                                  	;pop	ds
 27503                                  
 27504                                  int_73_end:
 27505                                  
 27506                                  stkinit_74:
 27507 000014AC BED001                  	mov	si,74h*4 ; 464
 27508                                  	
 27509                                  	; 14/12/2022
 27510                                  	; 25/10/2022
 27511 000014AF E85F00                  	call	int_xx_first_check
 27512 000014B2 730C                    	jnc	short int_74_end ; int_74_first
 27513                                  
 27514                                  ; 14/12/2022
 27515                                  %if 0		
 27516                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27517                                  	push	ds
 27518                                  	lds	bx,[es:si]
 27519                                  	push	ds
 27520                                  	pop	dx
 27521                                  		
 27522                                  	cmp	dx,0
 27523                                  	je	short int_74_first
 27524                                  
 27525                                  	cmp	byte [bx],0CFh
 27526                                  	je	short int_74_first
 27527                                  	
 27528                                  	cmp	word [bx+6],424Bh
 27529                                  	je	short int_74_not_first
 27530                                  	
 27531                                  	cmp	dx,0F000h
 27532                                  	jne	short int_74_not_first
 27533                                  
 27534                                  	push	es
 27535                                  	push	dx
 27536                                  	mov	dx,0F000h
 27537                                  	mov	es,dx
 27538                                  	cmp	bx,[es:0FF01h]
 27539                                  	pop	dx
 27540                                  	pop	es
 27541                                  	je	short int_74_first
 27542                                  %endif
 27543                                  
 27544                                  int_74_not_first:
 27545                                  	; 14/12/2022
 27546                                  	; 25/10/2022
 27547                                  	;pop	ds
 27548 000014B4 BF[EA05]                	mov	di,INT19OLD74
 27549 000014B7 BB[0101]                	mov	bx,old74
 27550 000014BA BA[FF00]                	mov	dx,int74
 27551 000014BD E87B00                  	call	new_init_loop
 27552                                  	
 27553                                  	; 14/12/2022
 27554                                  	;jmp	short int_74_end
 27555                                  ;int_74_first:
 27556                                  	; 25/10/2022
 27557                                  	;pop	ds
 27558                                  
 27559                                  int_74_end:
 27560                                  
 27561                                  stkinit_76:
 27562 000014C0 BED801                  	mov	si,76h*4 ; 472
 27563                                  	
 27564                                  	; 14/12/2022
 27565                                  	; 25/10/2022
 27566 000014C3 E84B00                  	call	int_xx_first_check
 27567 000014C6 730E                    	jnc	short int_76_end ; int_76_first
 27568                                  
 27569                                  ; 14/12/2022
 27570                                  %if 0	
 27571                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27572                                  	push	ds
 27573                                  	lds	bx,[es:si]
 27574                                  	push	ds
 27575                                  	pop	dx
 27576                                  		
 27577                                  	cmp	dx,0
 27578                                  	je	short int_76_first
 27579                                  
 27580                                  	cmp	byte [bx],0CFh
 27581                                  	je	short int_76_first
 27582                                  	
 27583                                  	cmp	word [bx+6],424Bh
 27584                                  	je	short int_76_not_first
 27585                                  	
 27586                                  	cmp	dx,0F000h
 27587                                  	jne	short int_76_not_first
 27588                                  
 27589                                  	push	es
 27590                                  	push	dx
 27591                                  	mov	dx,0F000h
 27592                                  	mov	es,dx
 27593                                  	cmp	bx,[es:0FF01h]
 27594                                  	pop	dx
 27595                                  	pop	es
 27596                                  	je	short int_76_first
 27597                                  %endif
 27598                                  	
 27599                                  int_76_not_first:
 27600                                  	; 14/12/2022
 27601                                  	; 25/10/2022
 27602                                  	;pop	ds
 27603 000014C8 BF[EF05]                	mov	di,INT19OLD76
 27604 000014CB BB[1901]                	mov	bx,old76
 27605 000014CE BA[1701]                	mov	dx,int76
 27606 000014D1 E86700                  	call	new_init_loop
 27607                                  
 27608                                  	; 14/12/2022
 27609 000014D4 EB00                    	jmp	short int_76_end
 27610                                  ;int_76_first:
 27611                                  	; 25/10/2022
 27612                                  	;pop	ds
 27613                                  
 27614                                  int_76_end:
 27615                                  
 27616                                  stkinit_77:
 27617 000014D6 BEDC01                  	mov	si,77h*4 ; 476
 27618                                  	
 27619                                  	; 14/12/2022
 27620                                  	; 25/10/2022
 27621 000014D9 E83500                  	call	int_xx_first_check
 27622 000014DC 730C                    	jnc	short int_77_end ; int_77_first
 27623                                  
 27624                                  ; 14/12/2022
 27625                                  %if 0	
 27626                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27627                                  	push	ds
 27628                                  	lds	bx,[es:si]
 27629                                  	push	ds
 27630                                  	pop	dx
 27631                                  		
 27632                                  	cmp	dx,0
 27633                                  	je	short int_77_first
 27634                                  
 27635                                  	cmp	byte [bx],0CFh
 27636                                  	je	short int_77_first
 27637                                  	
 27638                                  	cmp	word [bx+6],424Bh
 27639                                  	je	short int_77_not_first
 27640                                  	
 27641                                  	cmp	dx,0F000h
 27642                                  	jne	short int_77_not_first
 27643                                  
 27644                                  	push	es
 27645                                  	push	dx
 27646                                  	mov	dx,0F000h
 27647                                  	mov	es,dx
 27648                                  	cmp	bx,[es:0FF01h]
 27649                                  	pop	dx
 27650                                  	pop	es
 27651                                  	je	short int_77_first
 27652                                  %endif
 27653                                  	
 27654                                  int_77_not_first:
 27655                                  	; 14/12/2022
 27656                                  	; 25/10/2022
 27657                                  	;pop	ds
 27658 000014DE BF[F405]                	mov	di,INT19OLD77
 27659 000014E1 BB[3101]                	mov	bx,old77
 27660 000014E4 BA[2F01]                	mov	dx,int77
 27661 000014E7 E85100                  	call	new_init_loop
 27662                                  
 27663                                  	; 14/12/2022
 27664                                  	;jmp	short int_77_end
 27665                                  ;int_77_first:
 27666                                  	; 25/10/2022
 27667                                  	;pop	ds
 27668                                  
 27669                                  int_77_end:
 27670 000014EA 1E                      	push	ds
 27671 000014EB B800F0                  	mov	ax,0F000h		; look at the model byte
 27672 000014EE 8ED8                    	mov	ds,ax
 27673 000014F0 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 27674 000014F5 1F                      	pop	ds
 27675 000014F6 7504                    	jne	short skip_enablenmis
 27676                                  
 27677 000014F8 B027                    	mov	al,27h			; enable convertible nmis
 27678 000014FA E672                    	out	72h,al
 27679                                  
 27680                                  ; 25/10/2022
 27681                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 27682                                  
 27683                                  skip_enablenmis:
 27684 000014FC FB                      	sti
 27685                                  	;;mov	ax,Bios_Data ; 70h
 27686                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27687                                  	; 21/10/2022
 27688 000014FD B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27689 00001500 8ED8                    	mov	ds,ax
 27690                                  
 27691                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 27692                                  
 27693 00001502 C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 27694                                  					; initialization is complete
 27695                                  
 27696 00001507 5D                      	pop	bp			; restore all
 27697 00001508 5E                      	pop	si
 27698 00001509 5F                      	pop	di
 27699 0000150A 5A                      	pop	dx
 27700 0000150B 59                      	pop	cx
 27701 0000150C 5B                      	pop	bx
 27702 0000150D 07                      	pop	es
 27703 0000150E 1F                      	pop	ds
 27704 0000150F 58                      	pop	ax
 27705 00001510 C3                      	retn
 27706                                  
 27707                                  ; 14/12/2022
 27708                                  ; ----------------------------------------------------------------------
 27709                                  
 27710                                  	; 14/12/2022
 27711                                  	; 25/10/2022
 27712                                  ;%if 0
 27713                                  	; 27/03/2019 - Retro DOS v4.0
 27714                                  int_xx_first_check:
 27715 00001511 1E                      	push	ds
 27716 00001512 26C51C                  	lds	bx,[es:si]
 27717 00001515 1E                      	push	ds
 27718 00001516 5A                      	pop	dx
 27719                                  		
 27720                                  	;cmp	dx,0
 27721                                  	;je	short int_xx_first
 27722                                  	; 05/09/2023
 27723 00001517 21D2                    	and	dx,dx
 27724 00001519 741E                    	jz	short int_xx_first
 27725                                  	
 27726 0000151B 803FCF                  	cmp	byte [bx],0CFh
 27727 0000151E 7419                    	je	short int_xx_first
 27728                                  	
 27729 00001520 817F064B42              	cmp	word [bx+6],424Bh
 27730 00001525 7411                    	je	short int_xx_not_first
 27731                                  	
 27732 00001527 81FA00F0                	cmp	dx,0F000h
 27733 0000152B 750B                    	jne	short int_xx_not_first
 27734                                  
 27735 0000152D 06                      	push	es
 27736                                  	;push	dx
 27737                                  	;mov	dx,0F000h
 27738 0000152E 8EC2                    	mov	es,dx
 27739 00001530 263B1E01FF              	cmp	bx,[es:0FF01h]
 27740                                        	;pop	dx
 27741 00001535 07                      	pop	es
 27742 00001536 7401                    	je	short int_xx_first
 27743                                  
 27744                                  int_xx_not_first:
 27745 00001538 F9                      	stc
 27746                                  int_xx_first:
 27747 00001539 1F                      	pop	ds
 27748 0000153A C3                      	retn
 27749                                  
 27750                                  ;%endif
 27751                                  
 27752                                  ; ----------------------------------------------------------------------
 27753                                  ; 27/03/2019 - Retro DOS v4.0
 27754                                  
 27755                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27756                                  ; (SYSINIT:1610h)
 27757                                  
 27758                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 27759                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1905h)
 27760                                  
 27761                                  new_init_loop:
 27762                                  	;;; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 27763 0000153B 2E803E[6C03]02          	cmp	byte [cs:dosdata_umb],2
 27764                                  				; is DOSDATA=UMB done ? (DOSDATA is in UMB)
 27765 00001541 7510                    	jne	short new_init_loop_1st
 27766 00001543 1E                      	push	ds		; restore original/previous interrupt handler
 27767                                  				; (from int19old?? field in BIOSDATA)
 27768                                  	;mov	ax,70h
 27769 00001544 B87000                  	mov	ax,DOSBIODATASEG
 27770 00001547 8ED8                    	mov	ds,ax
 27771 00001549 C505                    	lds	ax,[di]		; restore original Int ?? handler addr from int19old?? field
 27772 0000154B 268904                  	mov	[es:si],ax	; copy the original int handler addr to its int vector addr
 27773 0000154E 268C5C02                	mov	[es:si+2],ds
 27774 00001552 1F                      	pop	ds
 27775                                  new_init_loop_1st: 
 27776                                  	;;;
 27777                                  
 27778                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 27779                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 27780                                  ;	dx=ds:offset of intxx, the new interrupt handler
 27781                                  ;	di=offset value of int19old&aa variable in bios.
 27782                                  ;	es=zero, segid of vector table
 27783                                  ;	ds=relocated stack code segment
 27784                                  
 27785                                  ; 13/04/2024
 27786                                  %if 0
 27787                                  	mov	ax,[es:si]		;remember offset in vector
 27788                                  	mov	[bx],ax			; to original owner in ds
 27789                                  	mov	ax,[es:si+2]		;remember segid in vector
 27790                                  	mov	[bx+2],ax		; to original owner in ds
 27791                                  
 27792                                  	push	ds
 27793                                  	;;mov	ax,Bios_Data ; 70h
 27794                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27795                                  	; 21/10/2022
 27796                                  	mov	ax,DOSBIODATASEG ; 0070h
 27797                                  	mov	ds,ax			;set int19oldxx value in bios for
 27798                                  	mov	ax,[es:si]		;int 19 handler
 27799                                  	mov	[di],ax
 27800                                  	mov	ax,[es:si+2]
 27801                                  	mov	[di+2],ax
 27802                                  	pop	ds
 27803                                  %else
 27804                                  	; 13/04/2024 - Retro DOS v5.0
 27805 00001553 1E                      	push	ds
 27806 00001554 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 27807 00001558 894702                  	mov	[bx+2],ax		; to original owner in ds
 27808 0000155B 50                      	push	ax
 27809 0000155C 268B04                  	mov	ax,[es:si]		;remember offset in vector
 27810 0000155F 8907                    	mov	[bx],ax			; to original owner in ds
 27811 00001561 50                      	push	ax
 27812 00001562 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27813 00001565 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 27814 00001567 58                      	pop	ax			;int 19 handler
 27815 00001568 8905                    	mov	[di],ax
 27816 0000156A 58                      	pop	ax
 27817 0000156B 894502                  	mov	[di+2],ax
 27818 0000156E 1F                      	pop	ds
 27819                                  %endif
 27820 0000156F 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 27821 00001572 268C5C02                	mov	[es:si+2],ds
 27822 00001576 C3                      	retn
 27823                                  
 27824                                  ; End of STACK initialization routine
 27825                                  ; ----------------------------------------------------------------------
 27826                                  
 27827                                  ; ----------------------------------------------------------------------
 27828                                  ;set the devmark for mem command.
 27829                                  ;in: [memhi] - the address to place devmark
 27830                                  ;    [memlo] = 0
 27831                                  ;    al = id for devmark_id
 27832                                  ;out: devmark established.
 27833                                  ;     the address saved in cs:[devmark_addr]
 27834                                  ;     [memhi] increase by 1.
 27835                                  ; ----------------------------------------------------------------------
 27836                                  
 27837                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27838                                  ; (SYSINIT:1637h)
 27839                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 27840                                  ; (SYSINIT:176Ch)
 27841                                  
 27842                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 27843                                  
 27844                                  setdevmark:
 27845                                  
 27846                                  	; 04/09/2023
 27847                                  	;push	es
 27848                                  	;push	cx
 27849                                  
 27850 00001577 2E8B0E[6203]            	mov	cx,[cs:memhi]
 27851 0000157C 2E890E[9A15]            	mov	[cs:devmark_addr],cx
 27852 00001581 8EC1                    	mov	es,cx
 27853                                  	; 25/10/2022
 27854                                  	;mov	[es:devmark.id],al
 27855 00001583 26A20000                	mov	[es:0],al
 27856 00001587 41                      	inc	cx
 27857                                  	;mov	[es:devmark.seg],cx
 27858 00001588 26890E0100              	mov	[es:1],cx
 27859                                  
 27860                                  	; 04/09/2023
 27861                                  	;pop	cx
 27862                                  	;pop	es
 27863                                  	
 27864 0000158D 2EFF06[6203]            	inc	word [cs:memhi]
 27865 00001592 C3                      	retn
 27866                                  
 27867                                  ; ----------------------------------------------------------------------
 27868                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 27869                                  ; ----------------------------------------------------------------------
 27870                                  ; 27/03/2019 - Retro DOS v4.0
 27871                                  
 27872                                  ;MULTI_CONFIG	equ 1
 27873                                  
 27874                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 27875                                                                          ; allocation strategy call
 27876                                  
 27877                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 27878                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 27879                                  
 27880                                  default_filenum equ 8
 27881                                  
 27882                                  ;stacksw	equ true		; include switchable hardware stacks
 27883                                  
 27884                                  ; external variable defined in ibmbio module for multi-track
 27885                                  
 27886                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 27887                                  					; it on after handling config.sys file as a
 27888                                  					; default value,if multrk_flag = multrk_off1.
 27889                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 27890                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 27891                                  
 27892                                  ; if stacksw
 27893                                  
 27894                                  ; internal stack parameters
 27895                                  
 27896                                  ;entrysize	equ 8
 27897                                  
 27898                                  ;mincount	equ 8
 27899                                  ;defaultcount	equ 9
 27900                                  ;maxcount	equ 64
 27901                                  
 27902                                  ;minsize 	equ 32
 27903                                  ;defaultsize	equ 128
 27904                                  ;maxsize 	equ 512
 27905                                  
 27906                                  DOS_FLAG_OFFSET	equ 86h
 27907                                  
 27908                                  ;ifdef MULTI_CONFIG
 27909                                  ;
 27910                                  ;   config_envlen must immediately precede config_wrkseg, because they
 27911                                  ;   may be loaded as a dword ptr
 27912                                  
 27913                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27914                                  ; 25/10/2022
 27915 00001593 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 27916                                                 				;  a scratch env, this is its length
 27917 00001595 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 27918                                                     			;  segment of work area
 27919                                  
 27920 00001597 00                      config_cmd:	db  0  			; current config cmd
 27921                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 27922 00001598 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 27923                                  
 27924                                  ;endif ; MULTI_CONFIG
 27925                                  
 27926 00001599 00                      multdeviceflag:	db  0
 27927                                  
 27928 0000159A 0000                    devmark_addr:	dw  0			;segment address for devmark.
 27929                                  
 27930 0000159C 00                      setdevmarkflag: db  0			;flag used for devmark
 27931                                  
 27932                                  ; 30/12/2022
 27933                                  ; 12/12/2022
 27934 0000159D 00                      driver_units:	db  0			;total unitcount for driver
 27935                                  
 27936                                  ; 12/12/2022
 27937                                  ;ems_stub_installed:
 27938                                  ;		db  0
 27939                                  
 27940                                  ; 12/12/2022	
 27941                                  ;align 2
 27942                                  
 27943                                  badparm_ptr:	; label	dword
 27944 0000159E 0000                    badparm_off:	dw  0
 27945 000015A0 0000                    badparm_seg:	dw  0
 27946                                  
 27947                                  ;******************************************************************************
 27948                                  ;take care of config.sys file.
 27949                                  ;system parser data and code.
 27950                                  ;******************************************************************************
 27951                                  
 27952                                  ;*******************************************************************
 27953                                  ; parser options set for msbio sysconf module
 27954                                  ;*******************************************************************
 27955                                  ;
 27956                                  ;**** default assemble swiches definition **************************
 27957                                  
 27958                                  ;farsw	equ 0		; near call expected
 27959                                  ;datesw	equ 0		; check date format
 27960                                  ;timesw	equ 0		; check time format
 27961                                  ;filesw	equ 1		; check file specification
 27962                                  ;capsw	equ 0		; perform caps if specified
 27963                                  ;cmpxsw	equ 0		; check complex list
 27964                                  ;numsw	equ 1		; check numeric value
 27965                                  ;keysw	equ 0		; support keywords
 27966                                  ;swsw	equ 1		; support switches
 27967                                  ;val1sw	equ 1		; support value definition 1
 27968                                  ;val2sw	equ 0		; support value definition 2
 27969                                  ;val3sw	equ 1		; support value definition 3
 27970                                  ;drvsw	equ 1		; support drive only format
 27971                                  ;qussw	equ 0		; support quoted string format
 27972                                  
 27973                                  ; psdata_seg equ cs
 27974                                  
 27975                                  	;.xlist
 27976                                  	;include parse.asm		;together with psdata.inc
 27977                                  	;.list
 27978                                  
 27979                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 27980                                  ; ======================================================================
 27981                                  ; 27/03/2019 - Retro DOS v4.0
 27982                                  
 27983                                  ; 30/03/2019
 27984                                  ; VERSION.INC (MSDOS 6.0) 
 27985                                  ; Set DBCS Blank constant
 27986                                  
 27987                                  ; ifndef DBCS
 27988                                  DB_SPACE EQU 2020h
 27989                                  DB_SP_HI EQU 20h
 27990                                  DB_SP_LO EQU 20h
 27991                                  ; else
 27992                                  
 27993                                  ;*******************************************************************
 27994                                  ; Parser include file
 27995                                  ;*******************************************************************
 27996                                  
 27997                                  ;**** Equation field
 27998                                  ;-------- Character code definition
 27999                                  
 28000                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 28001                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 28002                                  _$P_Period	   equ	"."             ;AN020;
 28003                                  _$P_Slash	   equ	"/"             ;AN020;
 28004                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 28005                                  _$P_Comma	   equ	","             ;AN000;
 28006                                  _$P_Switch	   equ	"/"             ;AN000;
 28007                                  _$P_Keyword	   equ	"="             ;AN000;
 28008                                  _$P_Colon	   equ	":"             ;AN000;
 28009                                  _$P_Plus 	   equ	"+"             ;AN000;
 28010                                  _$P_Minus	   equ	"-"             ;AN000;
 28011                                  _$P_Rparen	   equ	")"             ;AN000;
 28012                                  _$P_Lparen	   equ	"("             ;AN000;
 28013                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 28014                                  _$P_DQuote	   equ	'"'             ;AN000;
 28015                                  _$P_NULL 	   equ	0		;AN000;
 28016                                  _$P_TAB		   equ	9		;AN000;
 28017                                  _$P_CR		   equ	0Dh		;AN000;
 28018                                  _$P_LF		   equ	0Ah		;AN000;
 28019                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 28020                                  
 28021                                  ;-------- Masks
 28022                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 28023                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 28024                                  
 28025                                  ;-------- DOS function call related equs
 28026                                  
 28027                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 28028                                  					; by this call, following information
 28029                                  struc _$P_CDI	
 28030 00000000 ????                     .DateF: resw 1
 28031 00000002 ??????????               .Money: resb 5
 28032 00000007 ????                     .1000:	 resb 2
 28033 00000009 ????                     .Dec:	 resb 2
 28034 0000000B ????                     .DateS: resb 2
 28035 0000000D ????                     .TimeS: resb 2
 28036 0000000F ??                          	 resb 1
 28037 00000010 ??                      	 resb 1
 28038 00000011 ??                       .TimeF: resb 1	 
 28039 00000012 ????????                	 resw 2
 28040 00000016 ????                    	 resb 2
 28041 00000018 <res Ah>                	 resw 5
 28042                                   .size:
 28043                                  endstruc
 28044                                  
 28045                                  _$P_Date_MDY	   equ	0		;AN000;
 28046                                  _$P_Date_DMY	   equ	1		;AN000;
 28047                                  _$P_Date_YMD	   equ	2		;AN000;
 28048                                  ;-------------
 28049                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 28050                                  					;AN000; DS:SI will points to DBCS EV
 28051                                  ;-------------
 28052                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 28053                                  					;AN000; following parameters are set
 28054                                  					;AN000; to get casemap table.
 28055                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 28056                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 28057                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 28058                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 28059                                  					; By this call following information
 28060                                  					; is returned.
 28061                                  struc _$P_DOS_TBL
 28062 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 28063 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 28064 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 28065                                  endstruc
 28066                                  
 28067                                  ; ----------------------------------------------------------------------------
 28068                                  ; PARMS 	LABEL	BYTE
 28069                                  ;		DW	PARMSX
 28070                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 28071                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28072                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 28073                                  ;					; TYPICAL ARE ";", "="
 28074                                  ;					; "," & WHITESPACE ALWAYS
 28075                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28076                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 28077                                  ; ----------------------------------------------------------------------------
 28078                                  
 28079                                  ;-------------------------------- PARMS block structure
 28080                                  struc _$P_PARMS_Blk
 28081 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 28082 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 28083 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 28084                                  endstruc
 28085                                  
 28086                                  _$P_Len_PARMS	   equ	4		;AN000;
 28087                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 28088                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 28089                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 28090                                  
 28091                                  ; ----------------------------------------------------------------------------
 28092                                  ; PARMSX	LABEL	BYTE
 28093                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 28094                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 28095                                  ;		:			; REPEATS maxp-1 TIMES
 28096                                  ;		DB	maxs		; # OF SWITCHES
 28097                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 28098                                  ;		:			; REPEATS maxs-1 TIMES
 28099                                  ;		DB	maxk		; # OF KEYWORD
 28100                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 28101                                  ;		:			; REPEATS maxk-1 TIMES
 28102                                  ; ----------------------------------------------------------------------------
 28103                                  
 28104                                  ;-------------------------------- PARMSX block structure
 28105                                  struc _$P_PARMSX_Blk		;AN000;
 28106 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 28107 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 28108 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 28109                                  endstruc
 28110                                  
 28111                                  ; ----------------------------------------------------------------------------
 28112                                  ; << Control field definition  >>
 28113                                  ;
 28114                                  ;
 28115                                  ;CONTROL   LABEL   BYTE
 28116                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 28117                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 28118                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 28119                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 28120                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 28121                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 28122                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 28123                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 28124                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 28125                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 28126                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 28127                                  ;				   ; 0002H=REPEATS ALLOWED
 28128                                  ;				   ; 0001H=OPTIONAL
 28129                                  ;	   DW	   FUNCTION_FLAGS
 28130                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 28131                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 28132                                  ;				   ; 0010H=REMOVE ":" AT END
 28133                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 28134                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 28135                                  ;	   DW	   VALUES	   ; VALUE LISTS
 28136                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 28137                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 28138                                  ;	   :
 28139                                  ;
 28140                                  ;Note:
 28141                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 28142                                  ;      DATE bit simalteniously.
 28143                                  ;
 28144                                  ;      The parser examins each bit along with the following priority.
 28145                                  ;
 28146                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 28147                                  ;      FILE SPEC -> SIMPLE STRING.
 28148                                  ;
 28149                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 28150                                  ;      in the result buffer is capitalized.
 28151                                  ;
 28152                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 28153                                  ;
 28154                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 28155                                  ;      switch, for example, '/A', then STRING points to;
 28156                                  ;
 28157                                  ;			DB    1 	; number of following synonyms
 28158                                  ;			DB   '/A',0
 28159                                  ;
 28160                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 28161                                  ;
 28162                                  ;			DB    1 	; number of following synonyms
 28163                                  ;			DB   'CODEPAGE=',0
 28164                                  ;
 28165                                  ;    - "..." must consist of upper case characters only because the parser
 28166                                  ;      performs pattern matching after converting input to upper case (by
 28167                                  ;      using the current country upper case table)
 28168                                  ;
 28169                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 28170                                  ;      example /A and /B, the format will be;
 28171                                  ;
 28172                                  ;			DB    2 	; number of following synonyms
 28173                                  ;			DB    '/A',0
 28174                                  ;			DB    '/B',0
 28175                                  ; ----------------------------------------------------------------------------
 28176                                  
 28177                                  ;**** Match_Flags
 28178                                  
 28179                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 28180                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 28181                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 28182                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 28183                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 28184                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 28185                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 28186                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 28187                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 28188                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 28189                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 28190                                  _$P_Optional	   equ	0001h		;AN000; Optional
 28191                                  
 28192                                  ;**** Function flags
 28193                                  
 28194                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 28195                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 28196                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 28197                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 28198                                  
 28199                                  ;-------------------------------- Control block structure
 28200                                  struc _$P_Control_Blk
 28201 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 28202 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 28203 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 28204 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 28205 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 28206 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 28207                                  endstruc
 28208                                  
 28209                                  ; ----------------------------------------------------------------------------
 28210                                  ; << Value List Definition >>
 28211                                  ;
 28212                                  ;VALUES 	LABEL	BYTE
 28213                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 28214                                  ;	     +-
 28215                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 28216                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 28217                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 28218                                  ;	     |	:
 28219                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 28220                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 28221                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 28222                                  ;	     |	:
 28223                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 28224                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 28225                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 28226                                  ;	     +-	:
 28227                                  ;
 28228                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 28229                                  ;
 28230                                  ;Note:
 28231                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 28232                                  ;      when no choice lists are provided.
 28233                                  ;
 28234                                  ;    - STRING must consist of upper case characters only because the parser
 28235                                  ;      performs pattern matching after converting input to upper case (by
 28236                                  ;      using the current country upper case table)
 28237                                  ; ----------------------------------------------------------------------------
 28238                                  
 28239                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 28240                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 28241                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 28242                                  _$P_nval_String	   equ	3		;AN000; string list ID
 28243                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 28244                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 28245                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 28246                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 28247                                  
 28248                                  struc _$P_Val_List
 28249 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 28250 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 28251 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 28252 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 28253 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 28254                                  endstruc
 28255                                  
 28256                                  ; ----------------------------------------------------------------------------
 28257                                  ; << Result Buffer Definition  >>
 28258                                  ;
 28259                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 28260                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 28261                                  ;						;	1=NUMBER, 2=LIST INDEX,
 28262                                  ;						;	3=STRING, 4=COMPLEX,
 28263                                  ;						;	5=FILESPEC, 6=DRIVE
 28264                                  ;						;	7=DATE, 8=TIME
 28265                                  ;						;	9=QUOTED STRING
 28266                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 28267                                  ;
 28268                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 28269                                  ;
 28270                                  ;            +-
 28271                                  ;	    | DD	n			; VALUE IF NUMBER
 28272                                  ;	    | or
 28273                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 28274                                  ;	    |					; (ES presents Segment address)
 28275                                  ;	    | or
 28276                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 28277                                  ;	    | or
 28278                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 28279                                  ;	    | or
 28280                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 28281                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 28282                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 28283                                  ;	    | or
 28284                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 28285                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 28286                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 28287                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 28288                                  ;	    +-
 28289                                  ;
 28290                                  ;
 28291                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 28292                                  ;      list.
 28293                                  ;
 28294                                  ;      YEAR: If the input value for the year is less than 100, parser
 28295                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 28296                                  ;	     the year value, he returns 1987.
 28297                                  ; ----------------------------------------------------------------------------
 28298                                  
 28299                                  ;-------------------------------- Result block structure
 28300                                  struc _$P_Result_Blk
 28301 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 28302 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 28303 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 28304 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 28305                                  endstruc
 28306                                  
 28307                                  ;--------------------------------
 28308                                  ;**** values for the type field in the result block
 28309                                  
 28310                                  _$P_EOL		   equ	0		;AN000; End of line
 28311                                  _$P_Number	   equ	1		;AN000; Number
 28312                                  _$P_List_Idx	   equ	2		;AN000; List Index
 28313                                  _$P_String	   equ	3		;AN000; String
 28314                                  _$P_Complex	   equ	4		;AN000; Complex
 28315                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 28316                                  _$P_Drive	   equ	6		;AN000; Drive
 28317                                  _$P_Date_F	   equ	7		;AN000; Date
 28318                                  _$P_Time_F	   equ	8		;AN000; Time
 28319                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 28320                                  
 28321                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 28322                                  
 28323                                  ;**** Return code
 28324                                  ;
 28325                                  ; following return code will be returned in the AX register.
 28326                                  
 28327                                  _$P_No_Error	   equ	0		;AN000; No error
 28328                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 28329                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 28330                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 28331                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 28332                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 28333                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 28334                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 28335                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 28336                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 28337                                  
 28338                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 28339                                  
 28340                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 28341                                  
 28342                                  ; 14/04/2024 - Retro DOS v5.0
 28343                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:1C62h
 28344                                  
 28345                                  ;********************** Local Data *************************************
 28346 000015A2 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 28347 000015A4 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 28348 000015A6 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 28349 000015A8 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 28350 000015AA 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 28351 000015AB 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 28352 000015AD 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 28353 000015AF 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 28354                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 28355                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 28356                                  
 28357                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 28358                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 28359                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 28360                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 28361                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 28362                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 28363                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 28364                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 28365                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 28366                                  
 28367                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 28368                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 28369                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 28370                                  
 28371 000015B1 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 28372 000015B3 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 28373 000015B5 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 28374 000015B7 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 28375                                  
 28376 000015B9 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 28377                                  _$P_STRING_BUF_END equ	$		;AN000;
 28378                                  
 28379                                  ; 25/10/2022
 28380                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 28381                                  
 28382 00001639 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 28383 0000163A 0000                    		   dw	0		;AN000; offset	of char case map table
 28384 0000163C 0000                    		   dw	0		;AN000; segment of char case map table
 28385                                  ; 25/10/2022
 28386                                  ;IF CAPSW
 28387                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 28388                                  ;		   dw	0		;AN000; offset	of file case map table
 28389                                  ;		   dw	0		;AN000; segment of file case map table
 28390                                  ;ENDIF
 28391                                  
 28392                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 28393                                  ;
 28394                                  
 28395                                  ;M029
 28396                                  ;!!!WARNING!!!
 28397                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 28398                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 28399                                  ;changes need to be made in SYSPARSE
 28400                                  
 28401                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 28402                                  
 28403                                  ; 25/10/2022
 28404                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 28405                                  
 28406 0000163E 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 28407                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 28408                                  
 28409                                  ;ENDIF					;AN000;(of FileSW)
 28410                                  
 28411                                  ; delimiter parsing
 28412                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 28413                                  _$P_period_only	   equ	02h		;AN032; check only for period
 28414                                  
 28415                                  ;filespec error flag
 28416 00001647 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 28417                                  					;AN033;  was detected.
 28418                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 28419                                  
 28420                                  
 28421                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 28422                                  ; ======================================================================
 28423                                  ; 27/03/2019 - Retro DOS v4.0
 28424                                  
 28425                                  ;***********************************************************************
 28426                                  ; SysParse;
 28427                                  ;
 28428                                  ;  Function : Parser Entry
 28429                                  ;
 28430                                  ;  Input: DS:SI -> command line
 28431                                  ;	  ES:DI -> parameter block
 28432                                  ;	  cs -> psdata.inc
 28433                                  ;	  CX = operand ordinal
 28434                                  ;
 28435                                  ;	  Note:  ES is the segment containing all the control blocks defined
 28436                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 28437                                  ;		 is in DS.
 28438                                  ;
 28439                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 28440                                  ;		    invalid value list. But this parser does NOT implement
 28441                                  ;		    this feature. Therefore CY always zero.
 28442                                  ;
 28443                                  ;	   CY = 0   AX = return code
 28444                                  ;		    BL = terminated delimiter code
 28445                                  ;		    CX = new operand ordinal
 28446                                  ;		    SI = set past scaned operand
 28447                                  ;		    DX = selected result buffer
 28448                                  ;
 28449                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 28450                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 28451                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 28452                                  ;
 28453                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 28454                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 28455                                  ;
 28456                                  ;-------- Modification History -----------------------------------------
 28457                                  ;
 28458                                  ;  4/04/87 : Created by K. K,
 28459                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 28460                                  ;	   : JMP SHORT assemble error (tm02)
 28461                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 28462                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 28463                                  ;	     DateSW equ 1)	      (tm04)
 28464                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 28465                                  ;				      (tm05) in PSDATA.INC
 28466                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 28467                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 28468                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 28469                                  ;	     value-list block	      (tm07)
 28470                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 28471                                  ;	     switch (keyword) or not. If there is, backup si for next call
 28472                                  ;	     (tm08)
 28473                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 28474                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 28475                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 28476                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 28477                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 28478                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 28479                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 28480                                  ;					  (tm12)
 28481                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 28482                                  ;					  (tm13)
 28483                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 28484                                  ;					  (tm14)
 28485                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 28486                                  ;					  (tm15)
 28487                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 28488                                  
 28489                                  ;  7/24/87 : Quoted strings being returned with quotes.
 28490                                  
 28491                                  ;  7/28/87 : Kerry S (;AN018;)
 28492                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 28493                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 28494                                  ;	     affected: _$P_Chk_SW_Control.
 28495                                  
 28496                                  ;  7/29/87 : Kerry S (;AN019;)
 28497                                  ;	     Now allow the optional bit in match flags for switches.  This
 28498                                  ;	     allows the switch to be encountered with a value or without a
 28499                                  ;	     value and no error is returned.
 28500                                  ;
 28501                                  
 28502                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 28503                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 28504                                  ;	     within a date response, instead of checking just for the one
 28505                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 28506                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 28507                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 28508                                  
 28509                                  ;  9/1/87  : Kerry S (;AN021)
 28510                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 28511                                  ;	     the command line with the string in the control block the
 28512                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 28513                                  ;	     on the command line and assuming a match.	This allowed a shorter
 28514                                  ;	     string on the command line than in the synonym list in the control
 28515                                  ;	     block.  I put in a test for a null in the control block so the
 28516                                  ;	     string in the control block must be the same length as the string
 28517                                  ;	     preceeding the colon or equal on the command line.
 28518                                  
 28519                                  ;  8/28/87 : Kerry S (;AN022;)
 28520                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 28521                                  ;	     problems for people who included it themselves in a segment other
 28522                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 28523                                  ;	     segment.
 28524                                  
 28525                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 28526                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 28527                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 28528                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 28529                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 28530                                  ;	     BL be used if TIME is being parsed.
 28531                                  
 28532                                  ;  9/24/87 : Ed K
 28533                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 28534                                  ;	     invocations with their normally expanded code; made comments
 28535                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 28536                                  
 28537                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 28538                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 28539                                  ;	     pointed to by non-existant CONTROL.
 28540                                  
 28541                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 28542                                  ;	     A quoted text string can be framed only by double quote.  Remove
 28543                                  ;	     support to frame quoted text string with single quote.
 28544                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 28545                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 28546                                  ;	     single quote in PROC prologues are left as is for history reasons.
 28547                                  
 28548                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 28549                                  ;	     quote chars within a quoted string is supposed to be reported as
 28550                                  ;	     one quote character, but is reported as two quotes.  This changed
 28551                                  ;	     two instructions in PROC _$P_Quoted_Str.
 28552                                  
 28553                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 28554                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 28555                                  
 28556                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 28557                                  
 28558                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 28559                                  ;	     psdata buffer should have cs.
 28560                                  
 28561                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 28562                                  ;	     positional missing.
 28563                                  
 28564                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 28565                                  ;	     as a line delimiter, should use carriage return.
 28566                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 28567                                  
 28568                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 28569                                  
 28570                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 28571                                  ;	     endless loop since SI is returned still pointing to start
 28572                                  ;	     of that parm.
 28573                                  
 28574                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 28575                                  ;	     Vector to returned string has CS instead of cs, but
 28576                                  ;	     when tried to fix it on previous version, changed similar
 28577                                  ;	     but wrong place.
 28578                                  
 28579                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 28580                                  ;	     delimiters between hours, minutes, seconds for time. And period
 28581                                  ;	     and comma are valid delimiters between seconds and 100th second.
 28582                                  
 28583                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 28584                                  ;	     in a filespec, then flag an error.
 28585                                  
 28586                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 28587                                  ;	     indexed off of the cs equate instead of the DS register.
 28588                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 28589                                  ;  -->	     local parser data. Why were some references to local data changed
 28590                                  ;	     to do this before, but not all ?????
 28591                                  
 28592                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 28593                                  
 28594                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 28595                                  ;
 28596                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 28597                                  
 28598                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 28599                                  
 28600                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 28601                                  ;	     separator in TIME before hundredths field.
 28602                                  ;
 28603                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 28604                                  ;			strings as keywords.
 28605                                  ;
 28606                                  ;***********************************************************************
 28607                                  
 28608                                  ;IF FarSW				;AN000;(Check if need far return)
 28609                                  ;SysParse proc far			;AN000;
 28610                                  ;ELSE					;AN000;
 28611                                  ;SysParse proc near			;AN000;
 28612                                  ;ENDIF					;AN000;(of FarSW)
 28613                                  
 28614                                  ; 27/03/2019 - Retro DOS v4.0
 28615                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 28616                                  
 28617                                  ; 25/10/2022 - Retro DOS v4.0
 28618                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 28619                                  
 28620                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 28621                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 28622                                  
 28623                                  SysParse:
 28624                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 28625                                  	; dx = 0
 28626 00001648 1E                      	push	ds ; *!*
 28627 00001649 0E                      	push	cs
 28628 0000164A 1F                      	pop	ds 
 28629                                  
 28630                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 28631                                  	;cld				;AN000; confirm forward direction
 28632                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 28633                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 28634                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 28635                                  	;
 28636                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 28637                                  
 28638                                  	; 06/09/2023
 28639 0000164B 8916[AF15]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 28640 0000164F FC                      	cld				;AN000; confirm forward direction
 28641 00001650 890E[A215]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 28642 00001654 8916[A415]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 28643 00001658 8916[B715]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 28644 0000165C 8916[A815]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 28645                                  
 28646                                  ;M029 -- Begin changes
 28647                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 28648                                  ;entry to SysParse. This is in the non-checksum region and any program that
 28649                                  ;corrupts this table but does not corrupt the checksum region will leave
 28650                                  ;command.com parsing in an inconsistent state.
 28651                                  ; NB: The special characters string has been hardcoded here. If any change
 28652                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 28653                                  
 28654                                  ;IF FileSW + DrvSW
 28655                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 28656                                  	
 28657                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 28658                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 28659                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 28660                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 28661                                  
 28662                                  	; 14/04/2024
 28663                                  	; 06/09/2023
 28664 00001660 C706[3E16]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 28665 00001666 C706[4016]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 28666 0000166C C706[4216]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 28667 00001672 C706[4416]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 28668                                  ;ENDIF
 28669                                  	; 06/09/2023
 28670 00001678 1F                      	pop	ds ; *!*
 28671                                  
 28672                                  ;M029 -- End of changes
 28673                                  
 28674 00001679 E87806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 28675 0000167C 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 28676                                  ;--------------------------- End of Line
 28677 0000167E B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 28678 00001681 53                      	push	bx			;AN000;
 28679                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 28680                                  					;AN000; Get the PARMSX address to
 28681 00001682 268B1D                  	mov	bx,[es:di]
 28682                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 28683                                  					;AN000; check ORDINAL to see if the minimum
 28684 00001685 263A0F                  	cmp	cl,[es:bx]	
 28685 00001688 7303                    	jae	short _$P_Fin		;AN000; positional found.
 28686                                  
 28687 0000168A B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 28688                                  _$P_Fin: 				;AN000;
 28689 0000168D 5B                      	pop	bx			;AN000;
 28690 0000168E E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 28691                                  ;---------------------------
 28692                                  _$P_Start:				;AN000;
 28693 00001691 2E8936[B115]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 28694 00001696 53                      	push	bx			;AN000; quoted string or file spec.
 28695 00001697 57                      	push	di			;AN000;
 28696 00001698 55                      	push	bp			;AN000;
 28697                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 28698                                  	; 02/11/2022
 28699                                  	;lea	bx,[_$P_STRING_BUF]
 28700                                  	; 07/09/2023
 28701 00001699 BB[B915]                	mov	bx,_$P_STRING_BUF
 28702 0000169C 2EF606[B015]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 28703 000016A2 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 28704                                  
 28705                                  _$P_Pack_Loop:				;AN000;
 28706 000016A4 AC                      	lodsb				;AN000; Pick a operand from buffer
 28707 000016A5 E8F106                  	call	_$P_Chk_Switch		;AN000; Check switch character
 28708 000016A8 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 28709                                  
 28710 000016AA E86906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 28711 000016AD 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 28712                                  
 28713 000016AF E89906                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 28714 000016B2 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 28715                                  
 28716 000016B4 2EF606[B015]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 28717                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 28718 000016BA 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 28719                                  
 28720 000016BC E83506                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 28721 000016BF EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 28722                                  
 28723                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 28724 000016C1 2EF606[B015]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 28725 000016C7 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 28726                                  
 28727 000016C9 4E                      	dec	si			;AN000; (tm08)
 28728 000016CA EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 28729                                  
 28730                                  _$P_PL01:				;AN000;
 28731 000016CC 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 28732 000016CF 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 28733 000016D1 7506                    	jne	short _$P_PL00 		;AN000; then
 28734                                  
 28735 000016D3 2E800E[B015]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 28736                                  _$P_PL00:				;AN000;
 28737 000016D9 43                      	inc	bx			;AN000; ready to see next byte
 28738 000016DA E8D506                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 28739 000016DD 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 28740                                  
 28741 000016DF AC                      	lodsb				;AN000; if yes, store
 28742 000016E0 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 28743 000016E3 43                      	inc	bx			;AN000; update pointer
 28744 000016E4 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 28745                                  
 28746                                  _$P_Pack_End_BY_EOL:			;AN000;
 28747 000016E6 4E                      	dec	si			;AN000; backup si pointer
 28748                                  _$P_Pack_End:				;AN000;
 28749 000016E7 2E8936[A615]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 28750                                  	; 07/09/2023
 28751                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 28752 000016EC 30E4                    	xor	ah,ah ; 0 ; *
 28753 000016EE 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 28754                                  	;
 28755 000016F1 2E891E[B515]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 28756                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 28757 000016F6 268B1D                  	mov	bx,[es:di]
 28758                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 28759                                  	; 02/11/2022
 28760                                  	;lea	si,[_$P_STRING_BUF]
 28761                                  	; 07/09/2023
 28762 000016F9 BE[B915]                	mov	si,_$P_STRING_BUF
 28763 000016FC 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 28764 00001700 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 28765                                  
 28766 00001702 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 28767 00001706 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 28768                                  
 28769 00001708 2EF606[B015]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 28770 0000170E 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 28771                                  
 28772                                  _$P_Positional_Manager:			;AN000; else process as positional
 28773 00001710 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28774                                  	; 07/09/2023
 28775                                  	;xor	ah,ah			;AN000; ax = maxp
 28776 00001714 2E3906[A215]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 28777 00001719 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 28778                                  
 28779 0000171B 2EA1[A215]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 28780 0000171F D1E0                    	shl	ax,1			;AN000; ax = ax*2
 28781 00001721 43                      	inc	bx			;AC035; add '2' to
 28782 00001722 43                      	inc	bx			;AC035;  BX reg
 28783                                  					;AN000; now bx points to 1st CONTROL
 28784 00001723 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 28785 00001725 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 28786 00001728 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 28787 0000172B EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28788                                  
 28789                                  _$P_Too_Many_Error:			;AN000;
 28790 0000172D 2EC706[A415]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 28791 00001734 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28792                                  
 28793                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 28794                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 28795                                  get_maxp:
 28796                                  	;mov	al,[es:bx+1]
 28797 00001736 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28798                                  	; 07/09/2023
 28799                                  	; ah=0 ; *
 28800                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 28801 0000173A 30ED                    	xor	ch,ch ; **
 28802 0000173C 40                      	inc	ax			;AN000;
 28803 0000173D D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 28804 0000173F 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 28805 00001741 C3                      	retn
 28806                                  
 28807                                  _$P_SW_Manager:				;AN000;
 28808                                  	; 07/09/2023
 28809                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28810                                  	;xor	ah,ah			;AN000; ax = maxp
 28811                                  	;inc	ax			;AN000;
 28812                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28813                                  	;add	bx,ax			;AN000; now bx points to maxs
 28814 00001742 E8F1FF                  	call	get_maxp ; 07/09/2023
 28815                                  
 28816 00001745 268A0F                  	mov	cl,[es:bx]		;AN000;
 28817                                  	; 07/09/2023
 28818                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 28819                                  	;or	cx,cx			;AN000; at least one switch ?
 28820                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 28821                                  	; 07/07/2023
 28822 00001748 E30F                    	jcxz	_$P_SW_Not_Found	; no
 28823                                  
 28824 0000174A 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 28825                                  
 28826                                  _$P_SW_Mgr_Loop: 			;AN000;
 28827 0000174B 53                      	push	bx			;AN000;
 28828 0000174C 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 28829 0000174F E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 28830 00001752 5B                      	pop	bx			;AN000;
 28831 00001753 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 28832                                  
 28833 00001755 43                      	inc	bx			;AC035; add '2' to
 28834 00001756 43                      	inc	bx			;AC035;  BX reg
 28835                                  					;AN000; else bx points to the next CONTROL
 28836 00001757 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 28837                                  
 28838                                  _$P_SW_Not_Found:			;AN000;
 28839 00001759 2EC706[A415]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 28840 00001760 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 28841                                  
 28842                                  _$P_Key_Manager: 			;AN000;
 28843                                  	; 07/09/2023
 28844                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28845                                  	;xor	ah,ah			;AN000; ax = maxp
 28846                                  	;inc	ax			;AN000;
 28847                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28848                                  	;add	bx,ax			;AN000; now bx points to maxs
 28849 00001762 E8D1FF                  	call	get_maxp ; 07/09/2023
 28850                                  	
 28851 00001765 268A07                  	mov	al,[es:bx]		;AN000;
 28852 00001768 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 28853 0000176A D1E0                    	shl	ax,1			;AN000;
 28854 0000176C 40                      	inc	ax			;AN000; ax = ax*2+1
 28855 0000176D 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 28856 0000176F 268A0F                  	mov	cl,[es:bx]		;AN000;
 28857                                  	; 07/09/2023
 28858                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 28859                                  	;or	cx,cx			;AN000; at least one keyword ?
 28860                                  	;jz	short _$P_Key_Not_Found	;AN000;
 28861                                  	; 07/07/2023
 28862 00001772 E305                    	jcxz	_$P_Key_Not_Found	; no
 28863                                  
 28864 00001774 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 28865                                  
 28866                                  _$P_Key_Mgr_Loop:			;AN000;
 28867                                  	; 07/09/2023
 28868                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 28869                                  	; (always returns with cf=1)
 28870                                  	;push	bx			;AN000;
 28871                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 28872                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 28873                                  	;pop	bx			;AN000;
 28874                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 28875                                  	; 07/09/2023
 28876                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 28877                                  
 28878 00001775 43                      	inc	bx			;AC035; add '2' to
 28879 00001776 43                      	inc	bx			;AC035;  BX reg
 28880                                  					;AN000; else bx points to the next CONTROL
 28881 00001777 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 28882                                  
 28883                                  _$P_Key_Not_Found:			;AN000;
 28884 00001779 2EC706[A415]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 28885                                  _$P_Return_to_Caller:			;AN000;
 28886 00001780 5D                      	pop	bp			;AN000;
 28887 00001781 5F                      	pop	di			;AN000;
 28888 00001782 5B                      	pop	bx			;AN000;
 28889 00001783 2E8B0E[A215]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 28890 00001788 2EA1[A415]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 28891 0000178C 2E8B36[A615]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 28892 00001791 2E8B16[A815]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 28893 00001796 2E8A1E[AA15]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 28894                                  _$P_Single_Exit: 			;AN000;
 28895 0000179B F8                      	clc				;AN000;
 28896 0000179C C3                      	retn				;AN000;
 28897                                  
 28898                                  ;***********************************************************************
 28899                                  ; _$P_Chk_Pos_Control
 28900                                  ;
 28901                                  ; Function: Parse CONTROL block for a positional
 28902                                  ;
 28903                                  ; Input:     ES:BX -> CONTROL block
 28904                                  ;	     cs:SI -> _$P_STRING_BUF
 28905                                  ;
 28906                                  ; Output:    None
 28907                                  ;
 28908                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 28909                                  ;
 28910                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 28911                                  ;***********************************************************************
 28912                                  
 28913                                  _$P_Chk_Pos_Control:
 28914 0000179D 50                      	push	ax			;AN000;
 28915                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 28916 0000179E 268B07                  	mov	ax,[es:bx]
 28917                                  	; 12/12/2022
 28918 000017A1 A802                    	test	al,_$P_Repeat
 28919                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 28920 000017A3 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 28921                                  
 28922 000017A5 2EFF06[A215]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 28923                                  _$P_CPC00:				;AN000;
 28924 000017AA 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 28925 000017AE 7517                    	jne	short _$P_CPC01		;AN000;
 28926                                  
 28927                                  	; 12/12/2022
 28928 000017B0 A801                    	test	al,_$P_Optional
 28929                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 28930 000017B2 7509                    	jnz	short _$P_CPC02		;AN000;
 28931                                  
 28932 000017B4 2EC706[A415]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 28933 000017BB EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 28934                                  
 28935                                  _$P_CPC02:				;AN000;
 28936 000017BD 50                      	push	ax			;AN000;
 28937                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 28938                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 28939                                  	; 07/07/2023
 28940 000017BE B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 28941 000017C1 E89600                  	call	_$P_Fill_Result		;AN000;
 28942 000017C4 58                      	pop	ax			;AN000;
 28943 000017C5 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 28944                                  
 28945                                  _$P_CPC01:				;AN000;
 28946 000017C7 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 28947                                  _$P_CPC_Exit:				;AN000;
 28948 000017CA 58                      	pop	ax			;AN000;
 28949 000017CB C3                      	retn				;AN000;
 28950                                  
 28951                                  ;***********************************************************************
 28952                                  ; _$P_Chk_Key_Control
 28953                                  ;
 28954                                  ; Function: Parse CONTROL block for a keyword
 28955                                  ;
 28956                                  ; Input:     ES:BX -> CONTROL block
 28957                                  ;	     cs:SI -> _$P_STRING_BUF
 28958                                  ;
 28959                                  ; Output:    CY = 1 : not match
 28960                                  ;
 28961                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 28962                                  ;
 28963                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 28964                                  ;***********************************************************************
 28965                                  
 28966                                  ; 07/09/2023
 28967                                  ;_$P_Chk_Key_Control:
 28968                                  ;	stc				;AN000; this logic works when the KeySW
 28969                                  ;	retn				;AN000; is reset.
 28970                                  
 28971                                  ;***********************************************************************
 28972                                  ; _$P_Search_KEYorSW:
 28973                                  ;
 28974                                  ; Function: Seach specified keyword or switch from CONTROL
 28975                                  ;
 28976                                  ; Input:     ES:BX -> CONTROL block
 28977                                  ;	     cs:SI -> _$P_STRING_BUF
 28978                                  ;
 28979                                  ; Output:    CY = 1 : not match
 28980                                  ;
 28981                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 28982                                  ;***********************************************************************
 28983                                  
 28984                                  	; 25/10/2022 - Retro DOS v4.0
 28985                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 28986                                  
 28987                                  _$P_Search_KEYorSW:			;AN000;
 28988 000017CC 55                      	push	bp			;AN000;
 28989 000017CD 51                      	push	cx			;AN000;
 28990 000017CE 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 28991 000017D2 30ED                    	xor	ch,ch			;AN000; and set it to cx
 28992                                  	;or	cx,cx			;AN000; No synonyms specified ?
 28993                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 28994                                  	; 07/07/2023
 28995 000017D4 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 28996                                  
 28997                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 28998                                  	; 25/10/2022
 28999 000017D6 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 29000                                  	;lea	bp,[bx+9]
 29001                                  _$P_KEYorSW_Loop:			;AN000;
 29002 000017D9 E8B503                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 29003 000017DC 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 29004                                  
 29005 000017DE E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 29006 000017E1 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 29007                                  _$P_KEYorSW_Not_Found:			;AN000;
 29008 000017E3 F9                      	stc				;AN000; indicate not found in synonym list
 29009 000017E4 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 29010                                  
 29011                                  _$P_KEYorSW_Found:			;AN000;
 29012 000017E6 2E892E[B715]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 29013 000017EB F8                      	clc				;AN000; indicate found
 29014                                  _$P_KEYorSW_Exit:			;AN000;
 29015 000017EC 59                      	pop	cx			;AN000;
 29016 000017ED 5D                      	pop	bp			;AN000;
 29017 000017EE C3                      	retn				;AN000;
 29018                                   
 29019                                  ;***********************************************************************
 29020                                  ; _$P_MoveBP_NUL
 29021                                  ;***********************************************************************
 29022                                  
 29023                                  _$P_MoveBP_NUL:
 29024                                  _$P_MBP_Loop:				;AN000;
 29025                                  	; 11/12/2022
 29026 000017EF 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 29027                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29028                                  	; (SYSINIT:18DBh)
 29029                                   	;cmp     byte [es:bp+0],0
 29030 000017F4 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 29031                                  
 29032 000017F6 45                      	inc	bp			;AN000; until
 29033 000017F7 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 29034                                  
 29035                                  _$P_MBP_Exit:				;AN000;
 29036 000017F9 45                      	inc	bp			;AN000; bp points to next to NULL
 29037 000017FA C3                      	retn				;AN000;
 29038                                  
 29039                                  ;***********************************************************************
 29040                                  ; _$P_Chk_SW_Control
 29041                                  ;
 29042                                  ; Function: Parse CONTROL block for a switch
 29043                                  ;
 29044                                  ; Input:     ES:BX -> CONTROL block
 29045                                  ;	     cs:SI -> _$P_STRING_BUF
 29046                                  ;
 29047                                  ; Output:    CY = 1 : not match
 29048                                  ;
 29049                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29050                                  ;
 29051                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29052                                  ;***********************************************************************
 29053                                  
 29054                                  _$P_Chk_SW_Control:
 29055                                  
 29056                                  ;IF SwSW				;AN000;(Check if switch is supported)
 29057                                  	;or	byte [cs:_$P_Flags+1],10h
 29058 000017FB 2E800E[B015]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 29059 00001801 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 29060 00001804 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 29061                                  
 29062                                  	;and	[cs:_$P_Flags+],0EFh
 29063 00001806 2E8026[B015]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 29064                                  					;AC034; reset the indicator previously set
 29065 0000180C 50                      	push	ax			;AN000; 	      /switch:
 29066 0000180D 2EA1[B315]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 29067 00001811 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 29068 00001813 2E0106[B115]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 29069 00001818 58                      	pop	ax			;AN000;
 29070                                  
 29071 00001819 2E8B36[B315]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 29072 0000181E 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 29073 00001822 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 29074                                  
 29075 00001824 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 29076 00001829 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 29077                                  
 29078 0000182B 2EC706[A415]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 29079 00001832 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 29080                                  
 29081                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 29082                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 29083 00001834 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 29084 00001838 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 29085                                  
 29086                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 29087                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 29088                                  	;test	word [es:bx],1
 29089                                  	; 12/12/2022
 29090                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 29091 0000183A 26F60701                	test	byte [es:bx],_$P_Optional
 29092 0000183E 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 29093                                  
 29094 00001840 2EC706[A415]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 29095 00001847 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 29096                                  
 29097                                  _$P_CSW00:				;AN000;
 29098 00001849 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 29099 0000184C F8                      	clc				;AN000; indicate match
 29100                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29101                                  	; 12/12/2022
 29102 0000184D C3                      	retn
 29103                                  
 29104                                  _$P_Chk_SW_Err0: 			;AN000;
 29105 0000184E F9                      	stc				;AN000; not found in switch synonym list
 29106                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29107                                  	; 12/12/2022
 29108 0000184F C3                      	retn	
 29109                                  
 29110                                  _$P_Chk_SW_Exit: 			;AN000;
 29111 00001850 50                      	push	ax			;AN000;
 29112                                  	;mov	al,_$P_String		;AN000;
 29113                                  	;mov	ah,_$P_No_Tag		;AN000;
 29114                                  	; 07/07/2023
 29115 00001851 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29116 00001854 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 29117 00001857 58                      	pop	ax			;AN000;
 29118 00001858 F8                      	clc				;AN000;
 29119                                  _$P_Chk_SW_Single_Exit:			;AN000;
 29120 00001859 C3                      	retn				;AN000;
 29121                                  ;ELSE					;AN000;(of IF SwSW)
 29122                                  ;	stc				;AN000; this logic works when the SwSW
 29123                                  ;	retn				;AN000; is reset.
 29124                                  
 29125                                  ;***********************************************************************
 29126                                  ; _$P_Fill_Result
 29127                                  ;
 29128                                  ; Function: Fill the result buffer
 29129                                  ;
 29130                                  ; Input:    AH = Item tag
 29131                                  ;	    AL = type
 29132                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 29133                                  ;		  AL = 2: DX has index(offset) into value list
 29134                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 29135                                  ;		  AL = 7: DX has year, CL has month and CH has date
 29136                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 29137                                  ;			  amd CH has hundredths
 29138                                  ;		  AL = else: cs:SI points to returned string buffer
 29139                                  ;	    ES:BX -> CONTROL block
 29140                                  ;
 29141                                  ; Output:   None
 29142                                  ;
 29143                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 29144                                  ;
 29145                                  ; Vars: _$P_DX(W)
 29146                                  ;***********************************************************************
 29147                                  
 29148                                  _$P_Fill_Result:
 29149 0000185A 57                      	push	di			;AN000;
 29150 0000185B 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 29151                                  					;AN000; di points to result buffer
 29152 0000185F 2E893E[A815]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 29153                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 29154                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 29155                                  	; 07/09/2023
 29156                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 29157 00001864 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 29158                                  
 29159 00001867 50                      	push	ax			;AN000;
 29160 00001868 2EA1[B715]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 29161 0000186C 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 29162                                  					;AN000;   then set it to the result
 29163 00001870 58                      	pop	ax			;AN000;
 29164                                  _$P_RLT04:				;AN000;
 29165 00001871 3C01                    	cmp	al,_$P_Number		;AN000; if number
 29166 00001873 750A                    	jne	short _$P_RLT00		;AN000;
 29167                                  
 29168                                  _$P_RLT02:				;AN000;
 29169 00001875 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 29170 00001879 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 29171 0000187D EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 29172                                  
 29173                                  _$P_RLT00:				;AN000;
 29174 0000187F 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 29175 00001881 7506                    	jne	short _$P_RLT01		;AN000;
 29176                                  
 29177 00001883 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 29178                                  					;AN000; then store list index
 29179 00001887 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 29180                                  
 29181                                  _$P_RLT01:				;AN000;
 29182 00001889 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 29183 0000188B 74E8                    	je	short _$P_RLT02		;AN000;
 29184                                  
 29185 0000188D 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 29186 0000188F 74E4                    	je	short _$P_RLT02		;AN000;
 29187                                  
 29188 00001891 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 29189 00001893 7506                    	jne	short _$P_RLT03		;AN000;
 29190                                  
 29191 00001895 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 29192 00001899 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 29193                                  
 29194                                  _$P_RLT03:				;AN000;
 29195 0000189B 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 29196 0000189D 750F                    	jne	short _$P_RLT05		;AN000;
 29197                                  
 29198 0000189F 2EA1[B115]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 29199 000018A3 40                      	inc	ax			;AN000; skip left Parentheses
 29200 000018A4 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 29201 000018A8 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 29202 000018AC EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 29203                                  
 29204                                  _$P_RLT05:				;AN000;
 29205                                  ;------------------------  AL = 3, 5, or 9
 29206 000018AE 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 29207                                  					;AN000; store offset of STRING_BUF
 29208 000018B2 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 29209                                  					;AN031; store segment of STRING_BUF
 29210 000018B6 50                      	push	ax			;AN000;
 29211 000018B7 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 29212                                  					;AN000; need CAPS by file table?
 29213 000018BC 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 29214                                  
 29215 000018BE B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 29216 000018C0 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 29217                                  
 29218                                  _$P_RLT_CAP00:				;AN000;
 29219 000018C2 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 29220                                  					;AN000; need CAPS by char table ?
 29221 000018C7 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 29222                                  
 29223 000018C9 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 29224                                  _$P_RLT_CAP02:				;AN000;
 29225 000018CB E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 29226                                  _$P_RLT_CAP01:				;AN000;
 29227 000018CE 58                      	pop	ax			;AN000;
 29228 000018CF 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 29229                                  					;AN000; removing colon at end ?
 29230 000018D4 7403                    	jz	short _$P_RLT_Exit	;AN000;
 29231                                  
 29232 000018D6 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 29233                                  _$P_RLT_Exit:				;AN000;
 29234 000018D9 5F                      	pop	di			;AN000;
 29235 000018DA C3                      	retn				;AN000;
 29236                                  
 29237                                  ;***********************************************************************
 29238                                  ; _$P_Check_Match_Flags
 29239                                  ;
 29240                                  ; Function:  Check the mutch_flags and make the exit code and set the
 29241                                  ;	     result buffer
 29242                                  ;
 29243                                  ;	    Check for types in this order:
 29244                                  ;		Complex
 29245                                  ;		Date
 29246                                  ;		Time
 29247                                  ;		Drive
 29248                                  ;		Filespec
 29249                                  ;		Quoted String
 29250                                  ;		Simple String
 29251                                  ;
 29252                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29253                                  ;	     ES:BX -> CONTROL block
 29254                                  ;
 29255                                  ; Output:    None
 29256                                  ;
 29257                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 29258                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 29259                                  ;	     _$P_Drive_Format
 29260                                  ;***********************************************************************
 29261                                  
 29262                                  	; 25/10/2022 - Retro DOS v4.0
 29263                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 29264                                  
 29265                                  	; 14/04/2024 - Retro DOS v5.0
 29266                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1FC3h)
 29267                                  
 29268                                  	; 12/12/2022
 29269                                  _$P_Check_Match_Flags:
 29270 000018DB 2EC606[4716]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 29271                                  					;AN033;AC034;; clear filespec error flag.
 29272 000018E1 50                      	push	ax			;AN000;
 29273                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 29274 000018E2 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 29275 000018E5 09C0                    	or	ax,ax			;AC035; test ax for zero
 29276 000018E7 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 29277 000018E9 50                      	push	ax			;AN000; (tm12)
 29278 000018EA 53                      	push	bx			;AN000; (tm12)
 29279 000018EB 52                      	push	dx			;AN000; (tm12)
 29280 000018EC 57                      	push	di			;AN000; (tm12)
 29281 000018ED 2EC706[A415]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 29282                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 29283                                  	;mov	al,_$P_String		;AN000; (tm12)
 29284                                  	; 07/07/2023
 29285 000018F4 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29286 000018F7 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 29287 000018FA 5F                      	pop	di			;AN000; (tm12)
 29288 000018FB 5A                      	pop	dx			;AN000; (tm12)
 29289 000018FC 5B                      	pop	bx			;AN000; (tm12)
 29290 000018FD 58                      	pop	ax			;AN000; (tm12)
 29291                                  	; 12/12/2022
 29292                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 29293                                  	; 12/12/2022
 29294                                  ;_$P_Mat: 				;AN000; (tm12)
 29295                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 29296                                  _$P_Bridge:
 29297 000018FE EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 29298                                  	
 29299                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29300                                  	; (SYSINIT:19F9h)
 29301                                  	; 12/12/2022
 29302                                  	;nop	; db 90h
 29303                                  
 29304                                  ; 12/12/2022
 29305                                  _$P_Mat:
 29306                                  _$P_Match03:				;AN000;
 29307                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 29308                                  	; 07/07/2023
 29309 00001900 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 29310 00001903 7412                    	jz	short _$P_Match04	;AN000;
 29311                                  
 29312 00001905 2EC706[A415]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29313 0000190C E81E01                  	call	_$P_Value		;AN000; do process
 29314 0000190F 2E833E[A415]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29315 00001915 7557                    	jne	short _$P_Match_Exit	;AN000;
 29316                                  _$P_Match04:				;AN000;
 29317                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 29318                                  	; 07/07/2023
 29319 00001917 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 29320 0000191A 7412                    	jz	short _$P_Match05	;AN000;
 29321                                  
 29322 0000191C 2EC706[A415]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29323 00001923 E8E300                  	call	_$P_SValue		;AN000; do process
 29324 00001926 2E833E[A415]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29325 0000192C 7540                    	jne	short _$P_Match_Exit	;AN000;
 29326                                  _$P_Match05:				;AN000;
 29327                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 29328                                  	; 07/07/2023
 29329 0000192E F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 29330 00001931 7415                    	jz	short _$P_Match06	;AN000;
 29331                                  
 29332 00001933 2EC706[A415]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29333 0000193A E8F202                  	call	_$P_File_Format		;AN000; 1st, call file format
 29334 0000193D E87203                  	call	_$P_Drive_Format	;AN000; check drive format, next
 29335 00001940 2E833E[A415]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29336 00001946 7526                    	jne	short _$P_Match_Exit	;AN000;
 29337                                  _$P_Match06:				;AN000;
 29338                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 29339                                  	; 07/07/2023
 29340 00001948 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 29341 0000194B 7412                    	jz	short _$P_Match07	;AN000;
 29342                                  
 29343 0000194D 2EC706[A415]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29344 00001954 E8D802                  	call	_$P_File_Format		;AN000; do process
 29345 00001957 2E833E[A415]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29346 0000195D 750F                    	jne	short _$P_Match_Exit	;AN000;
 29347                                  _$P_Match07:				;AN000;
 29348                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 29349                                  	; 07/07/2023
 29350 0000195F F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 29351 00001962 740A                    	jz	short _$P_Match09	;AN000;
 29352                                  
 29353 00001964 2EC706[A415]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29354 0000196B E8BA01                  	call	_$P_Simple_String	;AN000; do process
 29355                                  _$P_Match09:				;AN000;
 29356                                  _$P_Match_Exit:				;AN000;
 29357 0000196E 2E833E[4716]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 29358 00001974 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29359 00001976 2E833E[A415]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 29360 0000197C 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29361 0000197E 2EC706[A415]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 29362                                  _$P_Match2_Exit: 			;AN033;
 29363 00001985 58                      	pop	ax			;AN000;
 29364 00001986 C3                      	retn				;AN000;
 29365                                  
 29366                                  ;***********************************************************************
 29367                                  ; _$P_Remove_Colon;
 29368                                  ;
 29369                                  ; Function: Remove colon at end
 29370                                  ;
 29371                                  ; Input:    cs:SI points to string buffer to be examineed
 29372                                  ;
 29373                                  ; Output:   None
 29374                                  ;
 29375                                  ; Use:	_$P_Chk_DBCS
 29376                                  ;***********************************************************************
 29377                                  
 29378                                  _$P_Remove_Colon:
 29379 00001987 50                      	push	ax			;AN000;
 29380 00001988 56                      	push	si			;AN000;
 29381                                  _$P_RCOL_Loop:				;AN000;
 29382 00001989 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29383 0000198C 08C0                    	or	al,al			;AN000; end of string ?
 29384 0000198E 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 29385                                  
 29386 00001990 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 29387 00001992 750D                    	jne	short _$P_RCOL00	;AN000;
 29388                                  
 29389 00001994 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 29390 00001999 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 29391                                  
 29392 0000199B 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 29393 0000199F EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 29394                                  
 29395                                  _$P_RCOL00:				;AN000;
 29396 000019A1 E80E04                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 29397 000019A4 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 29398                                  
 29399 000019A6 46                      	inc	si			;AN000; if yes, skip trailing byte
 29400                                  _$P_RCOL01:				;AN000;
 29401 000019A7 46                      	inc	si			;AN000; si points to next byte
 29402 000019A8 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 29403                                  
 29404                                  _$P_RCOL_Exit:				;AN000;
 29405 000019AA 5E                      	pop	si			;AN000;
 29406 000019AB 58                      	pop	ax			;AN000;
 29407 000019AC C3                      	retn				;AN000;
 29408                                  
 29409                                  ;***********************************************************************
 29410                                  ; _$P_Do_CAPS_String;
 29411                                  ;
 29412                                  ; Function: Perform capitalization along with the file case map table
 29413                                  ;	    or character case map table.
 29414                                  ;
 29415                                  ; Input:    AL = 2 : Use character table
 29416                                  ;	    AL = 4 : Use file table
 29417                                  ;	    cs:SI points to string buffer to be capitalized
 29418                                  ;
 29419                                  ; Output:   None
 29420                                  ;
 29421                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 29422                                  ;***********************************************************************
 29423                                  
 29424                                  _$P_Do_CAPS_String:
 29425 000019AD 56                      	push	si			;AN000;
 29426 000019AE 52                      	push	dx			;AN000;
 29427 000019AF 88C2                    	mov	dl,al			;AN000; save info id
 29428                                  
 29429                                  _$P_DCS_Loop:				;AN000;
 29430 000019B1 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 29431 000019B4 E8FB03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 29432 000019B7 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 29433                                  
 29434 000019B9 08C0                    	or	al,al			;AN000; end of string ?
 29435 000019BB 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 29436                                  
 29437 000019BD E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 29438 000019C0 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 29439 000019C3 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 29440                                  _$P_DCS00:				;AN000;
 29441 000019C5 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 29442                                  _$P_DCS01:				;AN000;
 29443 000019C6 46                      	inc	si			;AN000; si point to next byte
 29444 000019C7 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 29445                                  _$P_DCS_Exit:				;AN000;
 29446 000019C9 5A                      	pop	dx			;AN000;
 29447 000019CA 5E                      	pop	si			;AN000;
 29448 000019CB C3                      	retn
 29449                                  
 29450                                  ;***********************************************************************
 29451                                  ; _$P_Do_CAPS_Char;
 29452                                  ;
 29453                                  ; Function: Perform capitalization along with the file case map table
 29454                                  ;	    or character case map table.
 29455                                  ;
 29456                                  ; Input:    DL = 2 : Use character table
 29457                                  ;	    DL = 4 : Use file table
 29458                                  ;	    AL = character to be capitalized
 29459                                  ;
 29460                                  ; Output:   None
 29461                                  ;
 29462                                  ; Use:	INT 21h /w AH=65h
 29463                                  ;***********************************************************************
 29464                                  
 29465                                  _$P_Do_CAPS_Char:
 29466 000019CC 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 29467 000019CE 730B                    	jae	short _$P_DCC_Go	;AN000;
 29468                                  
 29469 000019D0 3C61                    	cmp	al,"a"                  ;AN000; if no,
 29470 000019D2 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 29471                                  
 29472 000019D4 3C7A                    	cmp	al,"z"                  ;AN000;
 29473 000019D6 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 29474                                  
 29475 000019D8 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 29476                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 29477                                  	; 07/07/2023
 29478 000019DA C3                      	retn
 29479                                  
 29480                                  _$P_DCC_Go:				;AN000;
 29481 000019DB 53                      	push	bx			;AN000;
 29482 000019DC 06                      	push	es			;AN000;
 29483 000019DD 57                      	push	di			;AN000;
 29484                                  
 29485                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 29486                                  	;lea	di,[_$P_Char_CAP_Ptr]
 29487                                  	; 07/09/2023
 29488 000019DE BF[3916]                	mov	di,_$P_Char_CAP_Ptr
 29489                                  _$P_DCC00:				;AN000;
 29490 000019E1 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 29491 000019E4 7415                    	je	short _$P_DCC01		;AN000; if no,
 29492                                  
 29493                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 29494                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 29495                                  ; call, regardless of what base register is currently be defined as cs.
 29496                                  
 29497 000019E6 50                      	push	ax			;AN000; get CAPS table thru DOS call
 29498 000019E7 51                      	push	cx			;AN000;
 29499 000019E8 52                      	push	dx			;AN000;
 29500                                  
 29501 000019E9 0E                      	push	cs			;AC036; pass current base seg into
 29502                                  					;(Note: this used to push CS.  BUG...
 29503 000019EA 07                      	pop	es			;AN000;   ES reg, required for
 29504                                  					;get extended country information
 29505                                  	;mov	al,dl ; function	;AN000; upper case table
 29506                                  	; 07/07/2023
 29507 000019EB 92                      	xchg	ax,dx
 29508 000019EC B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 29509 000019EE BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 29510 000019F1 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 29511                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 29512                                  	; 07/07/2023
 29513 000019F4 89DA                    	mov	dx,bx ; 0FFFFh
 29514                                  					;DI already set to point to buffer
 29515 000019F6 CD21                    	int	21h			;AN000; es:di point to buffer that
 29516                                  					;now has been filled in with info
 29517 000019F8 5A                      	pop	dx			;AN000;
 29518 000019F9 59                      	pop	cx			;AN000;
 29519 000019FA 58                      	pop	ax			;AN000;
 29520                                  
 29521                                  _$P_DCC01:				;AN000;
 29522                                  
 29523                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 29524                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 29525                                  ; regardless of which base reg is currently the cs reg.
 29526                                  
 29527                                  	; 14/04/2024
 29528                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 29529                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 29530                                  	; 07/07/2023
 29531 000019FB 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 29532 000019FF 43                      	inc	bx			;AC035; add '2' to
 29533 00001A00 43                      	inc	bx			;AC035;  BX reg
 29534                                  					;AN000; skip length field
 29535 00001A01 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 29536                                  	;xlat	es:[bx] 		;AN000; perform case map
 29537 00001A03 26                      	es
 29538 00001A04 D7                      	xlat
 29539 00001A05 5F                      	pop	di			;AN000;
 29540 00001A06 07                      	pop	es			;AN000;
 29541 00001A07 5B                      	pop	bx			;AN000;
 29542                                  _$P_CAPS_Ret:				;AN000;
 29543 00001A08 C3                      	retn				;AN000;
 29544                                  
 29545                                  ;***********************************************************************
 29546                                  ; _$P_Value / _$P_SValue
 29547                                  ;
 29548                                  ; Function:  Make 32bit value from cs:SI and see value list
 29549                                  ;	     and make result buffer.
 29550                                  ;	     _$P_SValue is an entry point for the signed value
 29551                                  ;	     and this will simply call _$P_Value after the handling
 29552                                  ;	     of the sign character, "+" or "-"
 29553                                  ;
 29554                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29555                                  ;	     ES:BX -> CONTROL block
 29556                                  ;
 29557                                  ; Output:    None
 29558                                  ;
 29559                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 29560                                  ;
 29561                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 29562                                  ;***********************************************************************
 29563                                  
 29564                                  	; 26/10/2022 - Retro DOS v4.0
 29565                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 29566                                  
 29567                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29568                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 29569                                  _$P_SValue:				;AN000; when signed value here
 29570 00001A09 50                      	push	ax			;AN000;
 29571 00001A0A 2E800E[B015]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 29572 00001A10 2E8026[B015]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 29573                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 29574 00001A16 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 29575 00001A19 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 29576 00001A1B 740A                    	je	short _$P_SVal00	;AN000;
 29577                                  
 29578 00001A1D 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 29579 00001A1F 7507                    	jne	short _$P_Sval01	;AN000; else
 29580                                  
 29581 00001A21 2E800E[B015]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 29582                                  _$P_SVal00:				;AN000;
 29583 00001A27 46                      	inc	si			;AN000; skip sign char
 29584                                  _$P_Sval01:				;AN000;
 29585 00001A28 E80200                  	call	_$P_Value		;AN000; and process value
 29586 00001A2B 58                      	pop	ax			;AN000;
 29587 00001A2C C3                      	retn
 29588                                  
 29589                                  ;***********************************************************************
 29590                                  
 29591                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29592                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 29593                                  
 29594                                  	; 26/10/2022
 29595                                  _$P_Value:				;AN000;
 29596 00001A2D 50                      	push	ax			;AN000;
 29597 00001A2E 51                      	push	cx			;AN000;
 29598 00001A2F 52                      	push	dx			;AN000;
 29599 00001A30 56                      	push	si			;AN000;
 29600 00001A31 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 29601 00001A33 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 29602 00001A35 53                      	push	bx			;AN000; save control pointer
 29603                                  _$P_Value_Loop:				;AN000;
 29604 00001A36 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29605 00001A39 08C0                    	or	al,al			;AN000; end of line ?
 29606 00001A3B 7438                    	jz	short _$P_Value00	;AN000;
 29607                                  
 29608 00001A3D E8DC00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 29609 00001A40 722F                    	jc	short _$P_Value_Err0	;AN000;
 29610                                  
 29611 00001A42 30E4                    	xor	ah,ah			;AN000;
 29612 00001A44 89C5                    	mov	bp,ax			;AN000; save binary number
 29613                                  
 29614                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29615                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 29616                                  ;				Erdogan Tan - July 2023
 29617                                  %if 0
 29618                                  	shl	dx,1			;AN000; to have 2*x
 29619                                  	rcl	cx,1			;AN000; shift left w/ carry
 29620                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29621                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29622                                  
 29623                                  	mov	bx,dx			;AN000; save low(2*x)
 29624                                  	mov	ax,cx			;AN000; save high(2*x)
 29625                                  	shl	dx,1			;AN000; to have 4*x
 29626                                  	rcl	cx,1			;AN000; shift left w/ carry
 29627                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29628                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29629                                  
 29630                                  	shl	dx,1			;AN000; to have 8*x
 29631                                  	rcl	cx,1			;AN000; shift left w/ carry
 29632                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29633                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29634                                  
 29635                                  	add	dx,bx			;AN000; now have 10*x
 29636                                  	adc	cx,ax			;AN000; 32bit ADD
 29637                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29638                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29639                                  
 29640                                  	add	dx,bp			;AN000; Add the current one degree decimal
 29641                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 29642                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29643                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29644                                  
 29645                                  	inc	si			;AN000; update pointer
 29646                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 29647                                  ;_$P_Value_Err0:
 29648                                  %endif
 29649                                  ;****
 29650                                  %if 1
 29651                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29652                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 29653                                  
 29654                                  	; 14/04/2024 - Retro DOS v5.0
 29655                                  	;xor	ah,ah
 29656                                  	;mov	bp,ax			; save binary number
 29657                                  	
 29658 00001A46 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29659 00001A49 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 29660 00001A4B 89C8                    	mov	ax,cx
 29661 00001A4D E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29662 00001A50 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29663 00001A53 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 29664 00001A55 11C1                    	adc	cx,ax
 29665 00001A57 E80F00                  	call	_$P_Value_Chk_Add_OVF
 29666 00001A5A 01EA                    	add	dx,bp			; Add the current one degree decimal
 29667                                  					; if carry, add 1 to high 16bit
 29668 00001A5C 83D100                  	adc	cx,0
 29669 00001A5F E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 29670                                  					; then error, exit (without return here)
 29671 00001A62 46                      	inc	si			; update pointer
 29672 00001A63 EBD1                    	jmp	short _$P_Value_Loop
 29673                                  
 29674                                  _$P_Value_2x_OVF:
 29675 00001A65 D1E2                    	shl	dx,1 			; to have 2*x
 29676 00001A67 D1D1                    	rcl	cx,1			; shift left w/ carry
 29677                                  _$P_Value_Chk_Add_OVF:
 29678 00001A69 E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 29679 00001A6C 7201                    	jc	short _$P_Value_OVF
 29680 00001A6E C3                      	retn
 29681                                  _$P_Value_OVF:
 29682 00001A6F 44                      	inc	sp 			; skip "call" return address to the caller
 29683 00001A70 44                      	inc	sp
 29684                                  
 29685                                  ;_$P_Value_Err0:	
 29686                                  %endif
 29687                                  ;****
 29688                                  
 29689                                  _$P_Value_Err0:				;AN000;
 29690 00001A71 5B                      	pop	bx			;AN000;
 29691 00001A72 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 29692                                  ;
 29693                                  _$P_Value00:				;AN000;
 29694 00001A75 5B                      	pop	bx			;AN000; restore control pointer
 29695 00001A76 2EF606[B015]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 29696 00001A7C 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 29697                                  
 29698 00001A7E F7D1                    	not	cx			;AN000; +
 29699 00001A80 F7D2                    	not	dx			;AN000; |- Make 2's complement
 29700 00001A82 83C201                  	add	dx,1			;AN000; |
 29701 00001A85 83D100                  	adc	cx,0			;AN000; +
 29702                                  
 29703                                  _$P_Value01:				;AN000; / nval = 0
 29704 00001A88 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 29705 00001A8C 268A04                  	mov	al,[es:si]		;AN000; get nval
 29706                                  	; 07/09/2023
 29707                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 29708                                  	;;*jne	short _$P_Value02	;AN000;
 29709                                  	;;* 07/07/2023
 29710                                  	;je	short _$P_Value05
 29711                                  	; 07/09/2023
 29712 00001A8F 08C0                    	or	al,al
 29713 00001A91 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 29714                                  
 29715                                  	;mov	al,_$P_Number		;AN000; Set type
 29716                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29717                                  	; 07/07/2023
 29718                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29719                                  	;*jmp	short _$P_Value_Exit	;AN000;
 29720                                  
 29721                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 29722                                  	; (SYSINIT:1BA5h)
 29723                                  	; 12/12/2022
 29724                                  	;nop	; db  90h
 29725                                  
 29726                                  _$P_Value02:				;AN000; / nval = 1
 29727                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 29728                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 29729                                  ;(tm07) jne	short _$P_Value03	;AN000;
 29730                                  
 29731 00001A93 46                      	inc	si			;AN000;
 29732 00001A94 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 29733                                  	
 29734                                  	; 07/09/2023
 29735                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 29736                                  	;je	short _$P_Value03	;AN000; (tm07)
 29737 00001A97 08C0                    	or	al,al
 29738 00001A99 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 29739                                  
 29740 00001A9B 46                      	inc	si			;AN000; si points to 1st item_tag
 29741                                  _$P_Val02_Loop:				;AN000;
 29742 00001A9C 2EF606[B015]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 29743 00001AA2 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 29744                                  
 29745 00001AA4 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 29746 00001AA8 7234                    	jb	short _$P_Val02_Next	;AN000;
 29747 00001AAA 7706                    	ja	short _$P_Val_In	;AN000;
 29748                                  
 29749 00001AAC 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 29750 00001AB0 722C                    	jb	short _$P_Val02_Next	;AN000;
 29751                                  
 29752                                  _$P_Val_In:				;AN000;
 29753 00001AB2 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 29754 00001AB6 7726                    	ja	short _$P_Val02_Next	;AN000;
 29755 00001AB8 7237                    	jb	short _$P_Val_Found	;AN000;
 29756                                  
 29757 00001ABA 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 29758 00001ABE 771E                    	ja	short _$P_Val02_Next	;AN000;
 29759                                  
 29760 00001AC0 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 29761                                  
 29762                                  _$P_Val02_Sign:				;AN000;
 29763 00001AC2 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 29764 00001AC6 7C16                    	jl	short _$P_Val02_Next	;AN000;
 29765 00001AC8 7F06                    	jg	short _$P_SVal_In	;AN000;
 29766                                  
 29767 00001ACA 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 29768 00001ACE 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 29769                                  
 29770                                  _$P_SVal_In:				;AN000;
 29771 00001AD0 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 29772 00001AD4 7F08                    	jg	short _$P_Val02_Next	;AN000;
 29773                                  
 29774 00001AD6 7C19                    	jl	short _$P_Val_Found	;AN000;
 29775                                  
 29776 00001AD8 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 29777                                  	;jg	short _$P_Val02_Next	;AN000;
 29778                                  	;jmp	short _$P_Val_Found	;AN000;
 29779                                  	; 07/07/2023
 29780 00001ADC 7E13                    	jng	short _$P_Val_Found
 29781                                  
 29782                                  _$P_Val02_Next:				;AN000;
 29783 00001ADE 83C609                  	add	si,_$P_Len_Range 	;AN000;
 29784 00001AE1 FEC8                    	dec	al			;AN000; loop nrng times in AL
 29785 00001AE3 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 29786                                  					; / Not found
 29787 00001AE5 2EC706[A415]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 29788                                  	;mov	al,_$P_Number		;AN000;
 29789                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29790                                  _$P_Value05:		;* 07/07/2023
 29791                                  	; 07/07/2023
 29792 00001AEC B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29793 00001AEF EB11                    	jmp	short _$P_Value_Exit	;AN000;
 29794                                  
 29795                                  _$P_Val_Found:				;AN000;
 29796 00001AF1 B001                    	mov	al,_$P_Number		;AN000;
 29797 00001AF3 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 29798 00001AF6 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 29799                                  
 29800                                  _$P_Value03:				;AN000; / nval = 2
 29801                                  
 29802                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 29803                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 29804                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 29805                                  ;(tm07) inc	si			;AN000;
 29806                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 29807                                  ;	mov	ah,$P_Len_Range 	;AN000;
 29808                                  ;	mul	ah			;AN000;  Skip nrng field
 29809                                  ;	inc	ax			;AN000;
 29810                                  ;	add	si,ax			;AN000; si points to nnval
 29811                                  ;	mov	al,es:[si]		;AN000; get nnval
 29812                                  ;	inc	si			;AN000; si points to 1st item_tag
 29813                                  ;$P_Val03_Loop:				;AN000;
 29814                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 29815                                  ;	jne	$P_Val03_Next		;AN000;
 29816                                  ;
 29817                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 29818                                  ;	je	$P_Val_Found		;AN000;
 29819                                  ;
 29820                                  ;$P_Val03_Next:				;AN000;
 29821                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 29822                                  ;	dec	al			;AN000; loop nval times in AL
 29823                                  ;	jne	$P_Val03_Loop		;AN000;
 29824                                  ;					;AN000; / Not found
 29825                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 29826                                  ;	mov	al,$P_Number		;AN000;
 29827                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 29828                                  ;	jmp	short $P_Value_Exit	;AN000;
 29829                                  ;
 29830                                  ;ENDIF					;AN000;(of Val2SW)
 29831                                  ;$P_Value04:
 29832                                  
 29833                                  _$P_Value_Err:				;AN000;
 29834 00001AF8 2EC706[A415]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 29835                                  	;mov	al,_$P_String		;AN000; Set type
 29836                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29837                                  	; 07/09/2023
 29838                                  	; 07/07/2023
 29839 00001AFF B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29840                                  _$P_Value_Exit:				;AN000;
 29841 00001B02 E855FD                  	call	_$P_Fill_Result		;AN000;
 29842 00001B05 5E                      	pop	si			;AN000;
 29843 00001B06 5A                      	pop	dx			;AN000;
 29844 00001B07 59                      	pop	cx			;AN000;
 29845 00001B08 58                      	pop	ax			;AN000;
 29846 00001B09 C3                      	retn				;AN000;
 29847                                  
 29848                                  ; 28/03/2019 - Retro DOS v4.0
 29849                                  
 29850                                  ;***********************************************************************
 29851                                  ; _$P_Check_OVF
 29852                                  ;
 29853                                  ; Function:  Check if overflow is occurred with consideration of
 29854                                  ;	     signed or un-signed numeric value
 29855                                  ;
 29856                                  ; Input:     Flag register
 29857                                  ;
 29858                                  ; Output:    CY = 1  :	Overflow
 29859                                  ;
 29860                                  ; Vars:     _$P_Flags(R)
 29861                                  ;***********************************************************************
 29862                                  
 29863                                  	; 26/10/2022
 29864                                  _$P_Check_OVF:
 29865 00001B0A 9C                      	pushf				;AN000;
 29866 00001B0B 2EF606[B015]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 29867 00001B11 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 29868                                  
 29869 00001B13 9D                      	popf				;AN000; by the CY bit
 29870 00001B14 C3                      	retn				;AN000;
 29871                                  
 29872                                  _$P_COVF:				;AN000;
 29873 00001B15 9D                      	popf				;AN000; else,
 29874 00001B16 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 29875                                  
 29876 00001B18 F8                      	clc				;AN000; indicate it with CY bit
 29877 00001B19 C3                      	retn				;AN000; CY=0 means no overflow
 29878                                  
 29879                                  _$P_COVF00:				;AN000;
 29880 00001B1A F9                      	stc				;AN000; and CY=1 means overflow
 29881 00001B1B C3                      	retn				;AN000;
 29882                                  
 29883                                  ;***********************************************************************
 29884                                  ; _$P_0099;
 29885                                  ;
 29886                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 29887                                  ;
 29888                                  ; Input:     AL = character code
 29889                                  ;
 29890                                  ; Output:    CY = 1 : AL is not number
 29891                                  ;	     CY = 0 : AL contains binary value
 29892                                  ;***********************************************************************
 29893                                  
 29894                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29895                                  %if 0
 29896                                  _$P_0099:
 29897                                  	cmp	al,"0"                  ;AN000;
 29898                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29899                                  	; 12/12/2022
 29900                                  	jb	short _$P_0099Err2  ; cf=1
 29901                                  
 29902                                  	cmp	al,"9"                  ;AN000;
 29903                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29904                                  
 29905                                  	sub	al,"0"                  ;AN000; make char -> bin
 29906                                  	; 12/12/2022
 29907                                  	; cf=0	
 29908                                  	;clc				;AN000; indicate no error
 29909                                  	retn				;AN000;
 29910                                  
 29911                                  _$P_0099Err:				;AN000;
 29912                                  	stc				;AN000; indicate error
 29913                                  _$P_0099Err2: ; 12/12/2022	
 29914                                  	retn				;AN000;
 29915                                  %endif
 29916                                  
 29917                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29918                                  %if 1
 29919                                  _$P_0099:
 29920 00001B1C 3C30                    	cmp	al,"0"                  ; cmp al,30h
 29921 00001B1E 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 29922 00001B20 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 29923 00001B22 F5                      	cmc				; cf=0 -> cf=1
 29924 00001B23 7202                    	jb	short _$P_0099Err
 29925 00001B25 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 29926                                  	; cf=0
 29927                                  _$P_0099Err:	; cf=1
 29928 00001B27 C3                      	retn
 29929                                  %endif
 29930                                  
 29931                                  ;***********************************************************************
 29932                                  ; _$P_Simple_String
 29933                                  ;
 29934                                  ; Function:  See value list for the simple string
 29935                                  ;	     and make result buffer.
 29936                                  ;
 29937                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29938                                  ;	     ES:BX -> CONTROL block
 29939                                  ;
 29940                                  ; Output:    None
 29941                                  ;
 29942                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 29943                                  ;
 29944                                  ; Vars: _$P_RC(W)
 29945                                  ;***********************************************************************
 29946                                  
 29947                                  _$P_Simple_String:
 29948 00001B28 50                      	push	ax			;AN000;
 29949 00001B29 53                      	push	bx			;AN000;
 29950 00001B2A 52                      	push	dx			;AN000;
 29951 00001B2B 57                      	push	di			;AN000;
 29952 00001B2C 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 29953 00001B30 268A05                  	mov	al,[es:di]		;AN000; get nval
 29954 00001B33 08C0                    	or	al,al			;AN000; no value list ?
 29955 00001B35 7504                    	jnz	short _$P_Sim00		;AN000; then
 29956                                  
 29957 00001B37 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29958 00001B39 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 29959                                  
 29960                                  _$P_Sim00:				;AN000;
 29961                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 29962 00001B3B 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 29963 00001B3D 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 29964                                  
 29965 00001B3F 47                      	inc	di			;AN000;
 29966 00001B40 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 29967 00001B43 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 29968 00001B45 F6E4                    	mul	ah			;AN000; Skip nrng field
 29969 00001B47 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 29970 00001B48 01C7                    	add	di,ax			;AN000; di points to nnval
 29971 00001B4A 268A05                  	mov	al,[es:di]		;AN000; get nnval
 29972 00001B4D B405                    	mov	ah,_$P_Len_Value 	;AN000;
 29973 00001B4F F6E4                    	mul	ah			;AN000; Skip nnval field
 29974 00001B51 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 29975 00001B52 01C7                    	add	di,ax			;AN000; di points to nstrval
 29976 00001B54 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 29977 00001B57 47                      	inc	di			;AC035; add '2' to
 29978 00001B58 47                      	inc	di			;AC035;  DI reg
 29979                                  					;AN000; di points to 1st string in list
 29980                                  _$P_Sim_Loop:				;AN000;
 29981 00001B59 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 29982 00001B5C E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 29983 00001B5F 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 29984                                  
 29985 00001B61 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 29986 00001B64 FEC8                    	dec	al			;AN000; loop nstval times in AL
 29987 00001B66 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 29988                                  					;AN000; / Not found
 29989 00001B68 2EC706[A415]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 29990 00001B6F B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29991 00001B71 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 29992                                  
 29993                                  _$P_Sim_Found:				;AN000;
 29994 00001B73 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 29995 00001B77 B002                    	mov	al,_$P_List_Idx		;AN000;
 29996 00001B79 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 29997 00001B7C EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 29998                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 29999                                  _$P_Sim01:				;AN000;
 30000 00001B7E 2EC706[A415]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30001 00001B85 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30002                                  _$P_Sim_Exit:				;AN000;
 30003 00001B87 B003                    	mov	al,_$P_String		;AN000; Set type
 30004                                  _$P_Sim_Exit0:				;AN000;
 30005 00001B89 E8CEFC                  	call	_$P_Fill_Result		;AN000;
 30006 00001B8C 5F                      	pop	di			;AN000;
 30007 00001B8D 5A                      	pop	dx			;AN000;
 30008 00001B8E 5B                      	pop	bx			;AN000;
 30009 00001B8F 58                      	pop	ax			;AN000;
 30010 00001B90 C3                      	retn				;AN000;
 30011                                  
 30012                                  ;***********************************************************************
 30013                                  ; _$P_String_Comp:
 30014                                  ;
 30015                                  ; Function:  Compare two string
 30016                                  ;
 30017                                  ; Input:     cs:SI -> 1st string
 30018                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30019                                  ;	     ES:BX -> CONTROL block
 30020                                  ;
 30021                                  ; Output:    CY = 1 if not match
 30022                                  ;
 30023                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 30024                                  ;
 30025                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 30026                                  ;***********************************************************************
 30027                                  
 30028                                  _$P_String_Comp:
 30029 00001B91 50                      	push	ax			;AN000;
 30030 00001B92 55                      	push	bp			;AN000;
 30031 00001B93 52                      	push	dx			;AN000;
 30032 00001B94 56                      	push	si			;AN000;
 30033 00001B95 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 30034                                  _$P_SCOM_Loop:				;AN000;
 30035 00001B97 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30036 00001B9A E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 30037 00001B9D 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 30038                                  
 30039 00001B9F E82AFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 30040                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 30041 00001BA2 2EF606[B015]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 30042 00001BA8 740D                    	jz	short _$P_SCOM04	;AN000;
 30043                                  
 30044 00001BAA 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 30045 00001BAC 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 30046                                  
 30047 00001BAE 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 30048 00001BB3 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 30049                                  
 30050 00001BB5 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 30051                                  
 30052                                  _$P_SCOM04:				;AN000;
 30053 00001BB7 2EF606[B015]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 30054 00001BBD 740E                    	jz	short _$P_SCOM03	;AN000;
 30055                                  
 30056 00001BBF 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 30057 00001BC1 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 30058                                  
 30059                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30060                                  	;cmp	byte [es:bp+0],_$P_NULL
 30061                                  	; 11/12/2022
 30062 00001BC3 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 30063 00001BC8 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 30064                                  
 30065                                  _$P_SCOM05:				;AN000;   found a match
 30066 00001BCA 46                      	inc	si			;AN000; si points to just after "=" or ":"
 30067 00001BCB EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 30068                                  
 30069                                  _$P_SCOM03:				;AN000;
 30070                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 30071                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30072                                  	;cmp	al,[es:bp+0]
 30073                                  	; 11/12/2022
 30074 00001BCD 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 30075 00001BD1 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 30076                                  
 30077 00001BD3 08C0                    	or	al,al			;AN000; end of line
 30078 00001BD5 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 30079                                  
 30080                                  	; 12/12/2022
 30081                                  	;inc	si			;AN000; update operand pointer
 30082                                  	;inc	bp			;AN000;    and synonym pointer
 30083                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30084 00001BD7 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 30085                                  
 30086                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 30087                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30088                                  	;cmp	al,[es:bp+0]
 30089                                  	; 11/12/2022
 30090 00001BD9 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 30091 00001BDD 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 30092                                  
 30093 00001BDF 46                      	inc	si			;AN000; else, load next byte
 30094 00001BE0 2E8A04                  	mov	al,[cs:si]		;AN000; and
 30095 00001BE3 45                      	inc	bp			;AN000;
 30096                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30097                                  	;cmp	al,[es:bp+0]
 30098                                  	; 11/12/2022
 30099 00001BE4 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 30100 00001BE8 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 30101                                  
 30102                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30103                                  	; 12/12/2022
 30104                                  _$P_SCOM01:
 30105 00001BEA 46                      	inc	si			;AN000; else update operand pointer
 30106 00001BEB 45                      	inc	bp			;AN000; 		and synonym pointer
 30107                                  ;_$P_SCOM01:				;AN000;
 30108 00001BEC EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 30109                                  
 30110                                  _$P_SCOM_Differ0:			;AN000;
 30111                                  ;IF SwSW				;AN000;(tm10)
 30112 00001BEE 2EF606[B015]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 30113 00001BF4 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30114                                  
 30115                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30116                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 30117                                  	; 12/12/2022
 30118 00001BF6 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 30119 00001BFB 7407                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30120                                  
 30121                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30122                                  	;cmp	byte [es:bp+0],_$P_NULL
 30123                                  	; 11/12/2022
 30124 00001BFD 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 30125                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 30126 00001C02 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 30127                                  
 30128                                  _$P_not_applicable:			;AN000;(tm10)
 30129                                  ;ENDIF					;AN000;(tm10)
 30130                                  
 30131                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30132                                  					;AN000; ignore colon option specified ?
 30133                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 30134                                  	; 12/12/2022
 30135 00001C04 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30136                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30137                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 30138 00001C08 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 30139                                  
 30140 00001C0A 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 30141 00001C0C 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 30142                                  
 30143                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30144                                  	;cmp	byte [es:bp+0],_$P_NULL
 30145                                  	; 11/12/2022
 30146 00001C0E 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 30147 00001C13 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 30148                                  
 30149 00001C15 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 30150                                  
 30151                                  _$P_SCOM02:				;AN000;
 30152 00001C17 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 30153 00001C19 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 30154                                  
 30155                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30156                                  	;cmp	byte [es:bp+0],_$P_Colon
 30157                                  	; 11/12/2022
 30158 00001C1B 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 30159 00001C20 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 30160                                  
 30161                                  _$P_SCOM_Differ: 			;AN000;
 30162 00001C22 F9                      	stc				;AN000; indicate not found
 30163 00001C23 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 30164                                  
 30165                                  _$P_SCOM_Same:				;AN000;
 30166                                  	; 12/12/2022
 30167                                  	; cf=0
 30168 00001C25 2E8936[B315]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 30169                                  	; 12/12/2022
 30170                                  	;clc				;AN000; indicate found
 30171                                  _$P_SCOM_Exit:				;AN000;
 30172 00001C2A 5E                      	pop	si			;AN000;
 30173 00001C2B 5A                      	pop	dx			;AN000;
 30174 00001C2C 5D                      	pop	bp			;AN000;
 30175 00001C2D 58                      	pop	ax			;AN000;
 30176 00001C2E C3                      	retn
 30177                                  
 30178                                  ; 30/03/2019
 30179                                  
 30180                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 30181                                  
 30182                                  ;***********************************************************************
 30183                                  ; _$P_File_Format;
 30184                                  ;
 30185                                  ; Function:  Check if the input string is valid file spec format.
 30186                                  ;	     And set the result buffer.
 30187                                  ;
 30188                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30189                                  ;	     ES:BX -> CONTROL block
 30190                                  ;
 30191                                  ; Output:    None
 30192                                  ;
 30193                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 30194                                  ;
 30195                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 30196                                  ;	_$P_SaveSI_Cmpx(R)
 30197                                  ;***********************************************************************
 30198                                  
 30199                                  _$P_File_Format:
 30200 00001C2F 50                      	push	ax			;AN000;
 30201 00001C30 57                      	push	di			;AN000;
 30202 00001C31 56                      	push	si			;AN000;
 30203 00001C32 2E8B3E[B115]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 30204                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 30205 00001C37 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 30206 00001C3A 08C0                    	or	al,al			;AN000; end of line ?
 30207 00001C3C 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 30208                                  
 30209 00001C3E E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 30210 00001C41 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 30211                                  
 30212 00001C43 2EC606[4716]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 30213                                  					;AN033;AC034;; set error flag- bad char.
 30214 00001C49 5E                      	pop	si			;AN033;
 30215 00001C4A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 30216 00001C4E 5F                      	pop	di			;AN033;
 30217 00001C4F EB3E                    	jmp	short _$P_FileF02	;AN033;
 30218                                  
 30219                                  _$P_FileF_Err:				;AN000;
 30220 00001C51 5E                      	pop	si			;AN000;
 30221 00001C52 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 30222 00001C56 5F                      	pop	di			;AN000;
 30223                                  
 30224                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 30225                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 30226                                  	; 12/12/2022
 30227 00001C57 26F60701                	test	byte [es:bx],_$P_Optional
 30228                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30229                                  	;test	word [es:bx],_$P_Optional
 30230 00001C5B 7532                    	jnz	short _$P_FileF02	;AN000;
 30231                                  
 30232 00001C5D 2EC706[A415]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 30233 00001C64 EB29                    	jmp	short _$P_FileF02	;AN000;
 30234                                  
 30235                                  _$P_FileF03:				;AN000;
 30236 00001C66 58                      	pop	ax			;AN000; discard save si
 30237 00001C67 56                      	push	si			;AN000; save new si
 30238                                  _$P_FileF_Loop1: 			;AN000;
 30239 00001C68 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 30240 00001C6B 08C0                    	or	al,al			;AN000; end of line ?
 30241 00001C6D 741E                    	jz	short _$P_FileF_RLT	;AN000;
 30242                                  
 30243 00001C6F E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 30244 00001C72 740B                    	je	short _$P_FileF00	;AN000;
 30245                                  
 30246 00001C74 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 30247 00001C77 7302                    	jnc	short _$P_FileF01	;AN000;
 30248 00001C79 47                      	inc	di			;AN000; if yes, skip next byte
 30249 00001C7A 46                      	inc	si			;AN000;
 30250                                  _$P_FileF01:				;AN000;
 30251 00001C7B 47                      	inc	di			;AN000;
 30252 00001C7C 46                      	inc	si			;AN000;
 30253 00001C7D EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 30254                                  ;
 30255                                  _$P_FileF00:				;AN000;
 30256 00001C7F 2EA2[AA15]              	mov	[cs:_$P_Terminator],al	;AC034;
 30257 00001C83 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 30258 00001C87 47                      	inc	di			;AN000;
 30259 00001C88 2E893E[A615]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 30260                                  _$P_FileF_RLT:				;AN000;
 30261 00001C8D 5E                      	pop	si			;AN000;
 30262 00001C8E 5F                      	pop	di			;AN000;
 30263                                  _$P_FileF02:				;AN000;
 30264 00001C8F 58                      	pop	ax			;AN000; (tm14)
 30265                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 30266                                  	; 08/07/2023
 30267 00001C90 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 30268 00001C93 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 30269                                  
 30270 00001C95 50                      	push	ax			;AN000; (tm14)
 30271                                  	;mov	ah,_$P_No_Tag		;AN000; set
 30272                                  	;mov	al,_$P_File_Spec 	;AN000; result
 30273                                  	; 08/07/2023
 30274 00001C96 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 30275                                  					      ; set result
 30276 00001C99 E8BEFB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 30277 00001C9C 58                      	pop	ax			;AN000;
 30278                                  
 30279                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 30280 00001C9D C3                      	retn				;AN000;
 30281                                  
 30282                                  ;***********************************************************************
 30283                                  ; _$P_FileSp_Chk
 30284                                  ;
 30285                                  ; Function:  Check if the input byte is one of file special characters
 30286                                  ;
 30287                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30288                                  ;	     AL = character code to be examineed
 30289                                  ;
 30290                                  ; Output:    ZF = 1 , AL is one of special characters
 30291                                  ;***********************************************************************
 30292                                  
 30293                                  _$P_FileSp_Chk:
 30294 00001C9E 53                      	push	bx			;AN000;
 30295 00001C9F 51                      	push	cx			;AN000;
 30296                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 30297                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 30298                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 30299                                  	; 07/09/2023
 30300 00001CA0 BB[3E16]                	mov	bx,_$P_FileSp_Char
 30301 00001CA3 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 30302                                  _$P_FileSp_Loop: 			;AN000;
 30303 00001CA6 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 30304 00001CA9 7404                    	je	short _$P_FileSp_Exit	;AN000;
 30305                                  
 30306 00001CAB 43                      	inc	bx			;AN000;
 30307 00001CAC E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 30308                                  
 30309 00001CAE 41                      	inc	cx			;AN000; reset ZF
 30310                                  _$P_FileSp_Exit: 			;AN000;
 30311 00001CAF 59                      	pop	cx			;AN000;
 30312 00001CB0 5B                      	pop	bx			;AN000;
 30313 00001CB1 C3                      	retn
 30314                                  
 30315                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 30316                                  
 30317                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 30318                                  
 30319                                  ;***********************************************************************
 30320                                  ; _$P_Drive_Format;
 30321                                  ;
 30322                                  ; Function:  Check if the input string is valid drive only format.
 30323                                  ;	     And set the result buffer.
 30324                                  ;
 30325                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30326                                  ;	     ES:BX -> CONTROL block
 30327                                  ;
 30328                                  ; Output:    None
 30329                                  ;
 30330                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 30331                                  ;
 30332                                  ; Vars: _$P_RC(W)
 30333                                  ;***********************************************************************
 30334                                  
 30335                                  _$P_Drive_Format:
 30336 00001CB2 50                      	push	ax			;AN000;
 30337 00001CB3 52                      	push	dx			;AN000;
 30338 00001CB4 2E8A04                  	mov	al,[cs:si]		;AN000;
 30339 00001CB7 08C0                    	or	al,al			;AN000; if null string
 30340 00001CB9 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 30341                                  
 30342 00001CBB E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 30343 00001CBE 722A                    	jc	short _$P_Drv_Err	;AN000;
 30344                                  
 30345 00001CC0 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 30346 00001CC5 740D                    	je	short _$P_DrvF00	;AN000;
 30347                                  
 30348                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30349                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 30350                                  	; 12/12/2022
 30351 00001CC7 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30352                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30353                                  	;test	word [es:bx],_$P_Ig_Colon
 30354 00001CCB 741D                    	jz	short _$P_Drv_Err	;AN000;
 30355                                  
 30356 00001CCD 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 30357 00001CD2 7516                    	jne	short _$P_Drv_Err	;AN000;
 30358                                  
 30359                                  _$P_DrvF00:				;AN000;
 30360 00001CD4 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 30361 00001CD6 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 30362 00001CD8 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 30363                                  
 30364 00001CDA 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 30365 00001CDC 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 30366                                  
 30367 00001CDE 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 30368 00001CE0 88C2                    	mov	dl,al			;AN000; set
 30369                                  	;mov	ah,_$P_No_Tag		;AN000; result
 30370                                  	;mov	al,_$P_Drive		;AN000; buffer
 30371                                  	; 08/07/2023
 30372 00001CE2 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 30373                                  					      ; set result buffer
 30374 00001CE5 E872FB                  	call	_$P_Fill_Result		;AN000; to drive
 30375 00001CE8 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 30376                                  
 30377                                  _$P_Drv_Err:				;AN000;
 30378 00001CEA 2EC706[A415]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30379                                  _$P_Drv_Exit:				;AN000;
 30380 00001CF1 5A                      	pop	dx			;AN000;
 30381 00001CF2 58                      	pop	ax			;AN000;
 30382 00001CF3 C3                      	retn				;AN000;
 30383                                  
 30384                                  ;ENDIF					;AN000;(of DrvSW)
 30385                                  
 30386                                  ;***********************************************************************
 30387                                  ; _$P_Skip_Delim;
 30388                                  ;
 30389                                  ; Function: Skip delimiters specified in the PARMS list, white space
 30390                                  ;	    and comma.
 30391                                  ;
 30392                                  ; Input:    DS:SI -> Command String
 30393                                  ;	    ES:DI -> Parameter List
 30394                                  ;
 30395                                  ; Output:   CY = 1 if the end of line encounterd
 30396                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 30397                                  ;	    AL = Last examineed character
 30398                                  ;
 30399                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 30400                                  ;
 30401                                  ; Vars:     _$P_Flags(R)
 30402                                  ;***********************************************************************
 30403                                  
 30404                                  _$P_Skip_Delim:
 30405                                  _$P_Skip_Delim_Loop:			;AN000;
 30406 00001CF4 AC                      	lodsb				;AN000;
 30407 00001CF5 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 30408 00001CF8 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 30409                                  
 30410 00001CFA E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 30411 00001CFD 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 30412                                  
 30413 00001CFF 2EF606[B015]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 30414 00001D05 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 30415                                  
 30416 00001D07 2EF606[B015]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 30417                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 30418                                  	; 08/07/2023
 30419                                  	; cf=0
 30420 00001D0D 7505                    	jnz	short _$P_Skip_Delim_Exit
 30421 00001D0F C3                      	retn
 30422                                  
 30423                                  	;dec	si			;AN000; backup si for next call (tm08)
 30424                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 30425                                  	; 12/12/2022
 30426                                  	; cf=0
 30427                                  	; 08/07/2023
 30428                                  	;jmp	short _$P_Skip_Delim_Exit
 30429                                  
 30430                                  _$P_Skip_Delim_CY:			;AN000;
 30431 00001D10 F9                      	stc				;AN000; indicate EOL
 30432 00001D11 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 30433                                  
 30434                                  _$P_Skip_Delim_NCY:			;AN000;
 30435 00001D13 F8                      	clc				;AN000; indicate non delim
 30436                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 30437 00001D14 4E                      	dec	si			;AN000;  backup index pointer
 30438                                  	; 08/07/2023
 30439                                  	; 12/12/2022
 30440                                  ;_$P_Exit_At_Extra:	 ; cf=0
 30441 00001D15 C3                      	retn				;AN000;
 30442                                  
 30443                                  	; 12/12/2022
 30444                                  ;_$P_Exit_At_Extra:			;AN000;
 30445                                  	;clc				;AN000; indicate extra delim
 30446                                  	;retn				;AN000;
 30447                                  
 30448                                  ;***********************************************************************
 30449                                  ; _$P_Chk_EOL;
 30450                                  ;
 30451                                  ; Function: Check if AL is one of End of Line characters.
 30452                                  ;
 30453                                  ; Input:    AL = character code
 30454                                  ;	    ES:DI -> Parameter List
 30455                                  ;
 30456                                  ; Output:   ZF = 1 if one of End of Line characters
 30457                                  ;**********************************************************************
 30458                                  
 30459                                  _$P_Chk_EOL:
 30460 00001D16 53                      	push	bx			;AN000;
 30461 00001D17 51                      	push	cx			;AN000;
 30462 00001D18 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 30463 00001D1A 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30464 00001D1C 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 30465 00001D1E 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30466                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 30467 00001D20 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 30468 00001D22 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30469                                  ;ENDIF					;AN028;
 30470 00001D24 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 30471                                  					;AN000; EOL character specified ?
 30472 00001D29 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 30473 00001D2B 31DB                    	xor	bx,bx			;AN000;
 30474 00001D2D 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 30475                                  					;AN000; get length of delimiter list
 30476 00001D31 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 30477                                  	; 08/07/2023
 30478 00001D34 31C9                    	xor	cx,cx ; *
 30479 00001D36 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 30480 00001D3A 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 30481                                  	; 08/07/2023
 30482                                  	;;xor	cx,cx			;AN000; Get number of extra character
 30483                                  	;xor	ch,ch ; *
 30484 00001D3C 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 30485                                  _$P_Chk_EOL_Loop:			;AN000;
 30486 00001D3F 43                      	inc	bx			;AN000;
 30487 00001D40 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 30488 00001D43 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30489 00001D45 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 30490                                  	; 08/07/2023
 30491                                  	; cx=0
 30492                                  _$P_Chk_EOL_NZ:				;AN000;
 30493                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 30494                                  	; 08/07/2023
 30495 00001D47 41                      	inc	cx  ; zf=0  (cx=1) ; *
 30496                                  _$P_Chk_EOL_Exit:			;AN000;
 30497 00001D48 59                      	pop	cx			;AN000;
 30498 00001D49 5B                      	pop	bx			;AN000;
 30499 00001D4A C3                      	retn
 30500                                  
 30501                                  ;***********************************************************************
 30502                                  ; _$P_Chk_Delim;
 30503                                  ;
 30504                                  ; Function: Check if AL is one of delimiter characters.
 30505                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 30506                                  ;	    blanks.
 30507                                  ;
 30508                                  ; Input:    AL = character code
 30509                                  ;	    DS:SI -> Next Character
 30510                                  ;	    ES:DI -> Parameter List
 30511                                  ;
 30512                                  ; Output:   ZF = 1 if one of delimiter characters
 30513                                  ;	    SI points to the next character
 30514                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 30515                                  ;***********************************************************************
 30516                                  
 30517                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30518                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 30519                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 30520                                  
 30521                                  _$P_Chk_Delim:
 30522 00001D4B 53                      	push	bx			;AN000;
 30523 00001D4C 51                      	push	cx			;AN000;
 30524 00001D4D 2EC606[AA15]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 30525                                  					;AC034; Assume terminated by space
 30526                                  	;and	byte [cs:_$P_Flags20,0DFh
 30527 00001D53 2E8026[B015]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 30528 00001D59 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 30529 00001D5B 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30530                                  
 30531 00001D5D 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 30532 00001D5F 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30533                                  
 30534 00001D61 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 30535 00001D63 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30536                                  
 30537                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 30538                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 30539                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30540                                  ;_$P_Chk_Delim00:
 30541                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 30542                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 30543                                  %if 0
 30544                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30545                                  _$P_Chk_Delim00: 			;AN000;
 30546                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 30547                                  	jne	short _$P_Chk_Delim01	;AN000;
 30548                                  
 30549                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 30550                                  	jne	short _$P_Chk_Delim01	;AN000;
 30551                                  
 30552                                  	mov	al,_$P_Space		;AN000;
 30553                                  	inc	si			;AN000; make si point to next character
 30554                                  	cmp	al,al			;AN000; Set ZF
 30555                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30556                                  %endif
 30557                                  
 30558                                  _$P_Chk_Delim01: 			;AN000;
 30559 00001D65 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 30560                                  					;AN000; delimiter character specified ?
 30561 00001D6A 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 30562                                  
 30563                                  	;xor	cx,cx			;AN000;
 30564 00001D6C 30ED                    	xor	ch,ch
 30565                                  	;mov	cl,[es:di+3]
 30566 00001D6E 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 30567                                  					;AN000; get length of delimiter list
 30568                                  	;or	cx,cx			;AN000; No extra Delim character ?
 30569                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 30570                                  	; 08/07/2023
 30571 00001D72 E30B                    	jcxz	_$P_Chk_Delim_NZ
 30572                                  
 30573 00001D74 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 30574                                  _$P_Chk_Delim_Loop:			;AN000;
 30575 00001D77 43                      	inc	bx			;AN000;
 30576 00001D78 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 30577 00001D7B 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30578                                  
 30579 00001D7D E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 30580                                  
 30581                                  _$P_Chk_Delim_NZ:			;AN000;
 30582                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 30583                                  	; 08/07/2023
 30584                                  	; cx=0 here
 30585 00001D7F 41                      	inc	cx ; cx=1, zf=0
 30586                                  _$P_Chk_Delim_Exit:			;AN000;
 30587                                  _$P_ChkDfin:				;AN000;
 30588 00001D80 59                      	pop	cx			;AN000;
 30589 00001D81 5B                      	pop	bx			;AN000;
 30590 00001D82 C3                      	retn				;AN000;
 30591                                  
 30592                                  _$P_Chk_Delim_Exit0:			;AN000;
 30593 00001D83 2EA2[AA15]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 30594 00001D87 2EF606[B015]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 30595 00001D8D 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 30596                                  
 30597 00001D8F 2E800E[B015]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 30598                                  					;AC034; flag terminated extra delimiter or comma
 30599                                  _$P_No_Set_Extra:			;AN027;
 30600 00001D95 38C0                    	cmp	al,al			;AN000; set ZF
 30601 00001D97 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30602                                  
 30603                                  ;***********************************************************************
 30604                                  ; _$P_Chk_Switch;
 30605                                  ;
 30606                                  ; Function: Check if AL is the switch character not in first position of
 30607                                  ;	    _$P_STRING_BUF
 30608                                  ;
 30609                                  ; Input:    AL = character code
 30610                                  ;	    BX = current pointer within _$P_String_Buf
 30611                                  ;	    SI =>next char on command line (following the one in AL)
 30612                                  ;
 30613                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 30614                                  ;		 position, and has no chance of being part of a date string,
 30615                                  ;		 i.e. should be treated as a delimiter.
 30616                                  
 30617                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 30618                                  ;		 position, or is a slash but may be part of a date string, i.e.
 30619                                  ;		 should not be treated as a delimiter.
 30620                                  ;
 30621                                  ; Vars:  _$P_Terminator(W)
 30622                                  
 30623                                  ; Use:	 _$P_0099
 30624                                  ;***********************************************************************
 30625                                  
 30626                                  _$P_Chk_Switch:
 30627                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 30628                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 30629                                  	; 08/07/2023
 30630 00001D99 BD[B915]                	mov	bp,_$P_STRING_BUF
 30631                                  
 30632                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 30633 00001D9C 39EB                    	cmp	bx,bp			;AN000;
 30634 00001D9E 7406                    	je	short _$P_STRUC_L2	;AN000;
 30635                                  
 30636                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 30637 00001DA0 3C2F                    	cmp	al,_$P_Switch		;AN000;
 30638 00001DA2 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 30639                                  
 30640 00001DA4 F9                      	stc				;AN020;not in first position and is slash
 30641                                  	;jmp     short _$P_STRUC_L1	;AN000;
 30642                                  	; 12/12/2022
 30643 00001DA5 C3                      	retn
 30644                                  
 30645                                  ; 12/12/2022
 30646                                  ;_$P_STRUC_L5:				;AN000;
 30647                                  ;	CLC				;AN020;not a slash
 30648                                  ;;	    .ENDIF			;AN020;
 30649                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 30650                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 30651                                  
 30652                                  _$P_STRUC_L2:				;AN000;
 30653                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 30654 00001DA6 3C2F                    	cmp     al,_$P_Switch		;AN000;
 30655 00001DA8 7506                    	jne	short _$P_STRUC_L12	;AN000;
 30656                                  
 30657 00001DAA 2E800E[B015]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 30658                                  ;	.ENDIF				;AN020;
 30659                                  
 30660                                  	; 12/12/2022
 30661                                  	; cf=0
 30662                                  	;retn
 30663                                  
 30664                                  _$P_STRUC_L5:
 30665                                  	; 12/12/2022
 30666                                  _$P_STRUC_L12:				;AN000;
 30667 00001DB0 F8                      	clc				;AN020;CF=0 indicating first char
 30668                                  ;	.ENDIF				;AN020;
 30669                                  _$P_STRUC_L1:				;AN000;
 30670 00001DB1 C3                      	retn				;AN000;
 30671                                  
 30672                                  ;**************************************************************************
 30673                                  ; _$P_Chk_DBCS:
 30674                                  ;
 30675                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 30676                                  ;
 30677                                  ;  Input:
 30678                                  ;	  AL	= Code to be examineed
 30679                                  ;
 30680                                  ;  Output:
 30681                                  ;	  If CF is on then a lead byte of DBCS
 30682                                  ;
 30683                                  ; Use: INT 21h w/AH=63
 30684                                  ;
 30685                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 30686                                  ;***************************************************************************
 30687                                  
 30688                                  _$P_Chk_DBCS:
 30689 00001DB2 1E                      	push	ds			;AN000;
 30690 00001DB3 56                      	push	si			;AN000;
 30691 00001DB4 53                      	push	bx			;AN000; (tm11)
 30692                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 30693                                  	;jne	short _$P_DBCS00	;AN000;
 30694                                  	; 08/07/2023
 30695 00001DB5 2E8B36[AD15]            	mov	si,[cs:_$P_DBCSEV_SEG]
 30696 00001DBA 21F6                    	and	si,si ; 0 ?
 30697 00001DBC 7525                    	jnz	short _$P_DBCS00 ; already set
 30698 00001DBE 50                      	push	ax			;AN000;
 30699 00001DBF 1E                      	push	ds			;AN000; (tm11)
 30700 00001DC0 51                      	push	cx			;AN000;
 30701 00001DC1 52                      	push	dx			;AN000;
 30702 00001DC2 57                      	push	di			;AN000;
 30703 00001DC3 55                      	push	bp			;AN000;
 30704 00001DC4 06                      	push	es			;AN000;
 30705                                  	; si = 0 ; 08/07/2023
 30706                                  	;xor	si,si			;AN000;
 30707 00001DC5 8EDE                    	mov	ds,si ; 0		;AN000;
 30708 00001DC7 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 30709 00001DCA CD21                    	int	21h			;AN000;
 30710                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 30711 00001DCC 8CDB                    	mov	bx,ds			;AN000; (tm11)
 30712 00001DCE 09DB                    	or	bx,bx			;AN000; (tm11)
 30713 00001DD0 07                      	pop	es			;AN000;
 30714 00001DD1 5D                      	pop	bp			;AN000;
 30715 00001DD2 5F                      	pop	di			;AN000;
 30716 00001DD3 5A                      	pop	dx			;AN000;
 30717 00001DD4 59                      	pop	cx			;AN000;
 30718 00001DD5 1F                      	pop	ds			;AN000; (tm11)
 30719 00001DD6 58                      	pop	ax			;AN000;
 30720 00001DD7 7424                    	jz	short _$P_NON_DBCS	;AN000;
 30721                                  _$P_DBCS02:				;AN000;
 30722 00001DD9 2E8936[AB15]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 30723 00001DDE 2E891E[AD15]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 30724                                  _$P_DBCS00:				;AN000;
 30725                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 30726                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 30727                                  	; 08/07/2023
 30728 00001DE3 2EC536[AB15]            	lds	si,[cs:_$P_DBCSEV_OFF]
 30729                                  _$P_DBCS_LOOP:				;AN000;
 30730 00001DE8 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 30731 00001DEB 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 30732 00001DED 3A04                    	cmp	al,[si] 		;AN000;
 30733 00001DEF 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 30734 00001DF1 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 30735 00001DF4 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 30736 00001DF6 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 30737 00001DF7 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 30738                                  _$P_DBCS01:				;AN000;
 30739 00001DF9 46                      	inc	si			;AC035; add '2' to
 30740 00001DFA 46                      	inc	si			;AC035;  SI reg
 30741                                  					;AN000; get next vector
 30742 00001DFB EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 30743                                  _$P_NON_DBCS:				;AN000;
 30744                                  	; 12/12/2022
 30745                                  	; cf=0
 30746                                  	;clc				;AN000; indicate SBCS
 30747                                  _$P_DBCS_EXIT:				;AN000;
 30748 00001DFD 5B                      	pop	bx			;AN000; (tm11)
 30749 00001DFE 5E                      	pop	si			;AN000;
 30750 00001DFF 1F                      	pop	ds			;AN000;
 30751 00001E00 C3                      	retn				;AN000;
 30752                                  
 30753                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 30754                                  ; ======================================================================
 30755                                  ; 27/03/2019 - Retro DOS v4.0
 30756                                  
 30757                                  ;control block definitions for parser.
 30758                                  ;-----------------------------------------------------------------------
 30759                                  ; buffer = [n | n,m] {/e}
 30760                                  
 30761                                  ; 30/03/2019
 30762                                  
 30763                                  struc p_parms
 30764 00000000 ????                    	resw	1	; dw ?
 30765 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 30766 00000003 ??                      	resb	1	; db 1	; length is 1
 30767 00000004 ??                      	resb 	1	; db ';' ; delimiter
 30768                                  .size:
 30769                                  endstruc
 30770                                  
 30771                                  struc p_pos
 30772 00000000 ????                    	resw	1	; dw ?	; numeric value??
 30773 00000002 ????                    	resw	1	; dw ?	; function
 30774 00000004 ????                    	resw	1	; dw ?	; result value buffer
 30775                                  
 30776                                  ; note: by defining result_val before this structure, we could remove
 30777                                  ;  the "result_val" from every structure invocation
 30778                                  
 30779 00000006 ????                    	resw	1	; dw ?	; value list
 30780 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 30781                                  .size:
 30782                                  endstruc
 30783                                  
 30784                                  struc	p_range
 30785 00000000 ??                      	resb	1	; db 1	; range definition
 30786 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 30787 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 30788 00000003 ????????                	resd	1	; dd ?	; numeric min
 30789 00000007 ????????                	resd	1	; dd ?	; numeric max
 30790                                  .size:
 30791                                  endstruc
 30792                                  
 30793                                  ;-----------------------------------------------------------------------
 30794                                  
 30795                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30796                                  	; (SYSINIT:1F48h)
 30797                                  
 30798                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30799                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 30800                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 30801                                  
 30802                                  ; buffer = [n | n,m] {/e}
 30803                                  
 30804                                  ;buf_parms p_parms <buf_parmsx>
 30805                                  buf_parms: 
 30806 00001E01 [061E]                  	dw	buf_parmsx
 30807 00001E03 01                      	db	1	; an extra delimiter list
 30808 00001E04 01                      	db	1	; length is 1
 30809 00001E05 3B                      	db	';'	; delimiter
 30810                                  
 30811                                  buf_parmsx:
 30812 00001E06 0102[101E][241E]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 30813 00001E0C 01                      	db	1			; one switch
 30814 00001E0D [381E]                  	dw	sw_x_ctrl
 30815 00001E0F 00                      	db	0			; no keywords
 30816                                  
 30817                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 30818                                  buf_pos1:
 30819 00001E10 0080                    	dw	8000h	; numeric value??
 30820 00001E12 0000                    	dw	0	; function
 30821 00001E14 [4A1E]                  	dw	result_val ; result value buffer	
 30822 00001E16 [191E]                  	dw	buf_range_1 ; value list
 30823 00001E18 00                      	db	0  	; no switches/keywords
 30824                                  
 30825                                  ;buf_range_1 p_range <,,,1,99>		; M050
 30826                                  buf_range_1:
 30827 00001E19 01                      	db	1	; range definition
 30828 00001E1A 01                      	db	1	; 1 definition of range
 30829 00001E1B 01                      	db	1	; item tag for this range
 30830 00001E1C 01000000                	dd	1	; numeric min
 30831 00001E20 63000000                	dd	99	; numeric max
 30832                                  
 30833                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 30834                                  buf_pos2:
 30835 00001E24 0180                    	dw	8001h
 30836 00001E26 0000                    	dw	0
 30837 00001E28 [4A1E]                  	dw	result_val	
 30838 00001E2A [2D1E]                  	dw	buf_range_2
 30839 00001E2C 00                      	db	0
 30840                                  
 30841                                  ;buf_range_2 p_range <,,,0,8>
 30842                                  buf_range_2:
 30843 00001E2D 01                      	db	1
 30844 00001E2E 01                      	db	1
 30845 00001E2F 01                      	db	1
 30846 00001E30 00000000                	dd	0
 30847 00001E34 08000000                	dd	8
 30848                                  
 30849                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 30850                                  sw_x_ctrl:
 30851 00001E38 0000                    	dw	0
 30852 00001E3A 0000                    	dw	0
 30853 00001E3C [4A1E]                  	dw	result_val	
 30854 00001E3E [491E]                  	dw	noval
 30855 00001E40 01                      	db	1	; 1 switch
 30856                                  	
 30857                                  switch_x:
 30858 00001E41 2F5800                  	db	'/X',0		; M016
 30859                                  
 30860                                  p_buffers:
 30861 00001E44 0000                    	dw	0	; local variables
 30862                                  p_h_buffers:
 30863 00001E46 0000                    	dw	0
 30864                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30865                                  p_buffer_slash_x:
 30866 00001E48 00                      	db	0 ; 31/03/2019
 30867                                  
 30868                                  ;-- common definitions -------------------------------------------------
 30869                                  
 30870 00001E49 00                      noval:	db	0
 30871                                  
 30872                                  result_val: 	;label	byte
 30873 00001E4A 00                      	db	0		; type returned
 30874                                  result_val_itag:
 30875 00001E4B 00                      	db	0		; item tag returned
 30876                                  result_val_swoff:
 30877 00001E4C 0000                    	dw	0		; es:offset of the switch defined
 30878                                  rv_byte:	;label	byte
 30879 00001E4E 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 30880                                  
 30881                                  ;-----------------------------------------------------------------------
 30882                                  
 30883                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30884                                  	; (SYSINIT:1F99h)
 30885                                  
 30886                                  ; break = [ on | off ]
 30887                                  
 30888                                  ;brk_parms p_parms  <brk_parmsx>
 30889                                  brk_parms:
 30890 00001E52 [571E]                  	dw	brk_parmsx
 30891 00001E54 01                      	db	1	; an extra delimiter list
 30892 00001E55 01                      	db	1	; length is 1
 30893 00001E56 3B                      	db	';'	; delimiter
 30894                                  
 30895                                  brk_parmsx:
 30896 00001E57 0101[5D1E]              	dw	101h,brk_pos	; min,max = 1 positional
 30897 00001E5B 00                      	db	0		; no switches
 30898 00001E5C 00                      	db	0		; no keywords
 30899                                  
 30900                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 30901                                  brk_pos:
 30902 00001E5D 0020                    	dw	2000h
 30903 00001E5F 0000                    	dw	0
 30904 00001E61 [4A1E]                  	dw	result_val	
 30905 00001E63 [661E]                  	dw	on_off_string
 30906 00001E65 00                      	db	0
 30907                                  
 30908                                  on_off_string:	;label	byte
 30909 00001E66 03                      	db	3		; signals that there is a string choice
 30910 00001E67 00                      	db	0		; no range definition
 30911 00001E68 00                      	db	0		; no numeric values choice
 30912 00001E69 02                      	db	2		; 2 strings for choice
 30913 00001E6A 01                      	db	1		; the 1st string tag
 30914 00001E6B [701E]                  	dw	on_string
 30915 00001E6D 02                      	db	2		; the 2nd string tag
 30916 00001E6E [731E]                  	dw	off_string
 30917                                  
 30918                                  on_string:
 30919 00001E70 4F4E00                  	db	"ON",0
 30920                                  off_string:
 30921 00001E73 4F464600                	db	"OFF",0
 30922                                  
 30923                                  p_ctrl_break:
 30924 00001E77 00                      	db	0	; local variable
 30925                                  
 30926                                  ;-----------------------------------------------------------------------
 30927                                  
 30928                                  	; 27/10/2022
 30929                                  
 30930                                  ; country = n {m {path}}
 30931                                  ; or
 30932                                  ; country = n,,path
 30933                                  
 30934                                  ;cntry_parms p_parms <cntry_parmsx>
 30935                                  cntry_parms:
 30936 00001E78 [7D1E]                  	dw	cntry_parmsx
 30937 00001E7A 01                      	db	1
 30938 00001E7B 01                      	db	1
 30939 00001E7C 3B                      	db	';'
 30940                                  	
 30941                                  cntry_parmsx:
 30942 00001E7D 0103[871E][9B1E]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 30942 00001E83 [A41E]             
 30943 00001E85 00                      	db	0		; no switches
 30944 00001E86 00                      	db	0		; no keywords
 30945                                  
 30946                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 30947                                  cntry_pos1:
 30948 00001E87 0080                    	dw	8000h
 30949 00001E89 0000                    	dw	0
 30950 00001E8B [4A1E]                  	dw	result_val	
 30951 00001E8D [901E]                  	dw	cc_range
 30952 00001E8F 00                      	db	0
 30953                                  
 30954                                  ;cc_range p_range <,,,1,999>
 30955                                  cc_range:
 30956 00001E90 01                      	db	1
 30957 00001E91 01                      	db	1
 30958 00001E92 01                      	db	1
 30959 00001E93 01000000                	dd	1
 30960 00001E97 E7030000                	dd	999
 30961                                  
 30962                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 30963                                  cntry_pos2:
 30964 00001E9B 0180                    	dw	8001h
 30965 00001E9D 0000                    	dw	0
 30966 00001E9F [4A1E]                  	dw	result_val	
 30967 00001EA1 [901E]                  	dw	cc_range
 30968 00001EA3 00                      	db	0
 30969                                  
 30970                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 30971                                  cntry_pos3:
 30972 00001EA4 0102                    	dw	201h
 30973 00001EA6 0000                    	dw	0
 30974 00001EA8 [4A1E]                  	dw	result_val	
 30975 00001EAA [491E]                  	dw	noval
 30976 00001EAC 00                      	db	0	
 30977                                  
 30978                                  p_cntry_code:
 30979 00001EAD 0000                    	dw	0	; local variable
 30980                                  p_code_page:
 30981 00001EAF 0000                    	dw	0	; local variable
 30982                                  
 30983                                  ;-----------------------------------------------------------------------
 30984                                  
 30985                                  	; 27/10/2022
 30986                                  
 30987                                  ; files = n
 30988                                  
 30989                                  ;files_parms p_parms <files_parmsx>
 30990                                  files_parms:
 30991 00001EB1 [B61E]                  	dw	files_parmsx
 30992 00001EB3 01                      	db	1
 30993 00001EB4 01                      	db	1
 30994 00001EB5 3B                      	db	';'
 30995                                  
 30996                                  files_parmsx:
 30997 00001EB6 0101[BC1E]              	dw	101h,files_pos	; min,max 1 positional
 30998 00001EBA 00                      	db	0		; no switches
 30999 00001EBB 00                      	db	0		; no keywords
 31000                                  
 31001                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 31002                                  files_pos:
 31003 00001EBC 0080                    	dw	8000h
 31004 00001EBE 0000                    	dw	0
 31005 00001EC0 [4A1E]                  	dw	result_val	
 31006 00001EC2 [C51E]                  	dw	files_range
 31007 00001EC4 00                      	db	0
 31008                                  
 31009                                  ;files_range p_range <,,,8,255>
 31010                                  files_range:
 31011 00001EC5 01                      	db	1
 31012 00001EC6 01                      	db	1
 31013 00001EC7 01                      	db	1
 31014 00001EC8 08000000                	dd	8
 31015 00001ECC FF000000                	dd	255
 31016                                  
 31017                                  p_files:
 31018 00001ED0 00                      	db	0		; local variable
 31019                                  
 31020                                  ;-----------------------------------------------------------------------
 31021                                  
 31022                                  	; 27/10/2022
 31023                                  
 31024                                  ; fcbs = n,m
 31025                                  
 31026                                  ;fcbs_parms p_parms <fcbs_parmsx>
 31027                                  fcbs_parms:
 31028 00001ED1 [D61E]                  	dw	fcbs_parmsx
 31029 00001ED3 01                      	db	1
 31030 00001ED4 01                      	db	1
 31031 00001ED5 3B                      	db	';'
 31032                                  
 31033                                  fcbs_parmsx:
 31034 00001ED6 0102[DE1E][F21E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 31035 00001EDC 00                      	db	0		; no switches
 31036 00001EDD 00                      	db	0		; no keywords
 31037                                  
 31038                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 31039                                  fcbs_pos_1:
 31040 00001EDE 0080                    	dw	8000h
 31041 00001EE0 0000                    	dw	0
 31042 00001EE2 [4A1E]                  	dw	result_val	
 31043 00001EE4 [E71E]                  	dw	fcbs_range
 31044 00001EE6 00                      	db	0
 31045                                  
 31046                                  ;fcbs_range p_range <,,,1,255>
 31047                                  fcbs_range:
 31048 00001EE7 01                      	db	1
 31049 00001EE8 01                      	db	1
 31050 00001EE9 01                      	db	1
 31051 00001EEA 01000000                	dd	1
 31052 00001EEE FF000000                	dd	255
 31053                                  
 31054                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 31055                                  fcbs_pos_2:
 31056 00001EF2 0080                    	dw	8000h
 31057 00001EF4 0000                    	dw	0
 31058 00001EF6 [4A1E]                  	dw	result_val	
 31059 00001EF8 [FB1E]                  	dw	fcbs_keep_range
 31060 00001EFA 00                      	db	0
 31061                                  
 31062                                  ;fcbs_keep_range p_range <,,,0,255>
 31063                                  fcbs_keep_range:
 31064 00001EFB 01                      	db	1
 31065 00001EFC 01                      	db	1
 31066 00001EFD 01                      	db	1
 31067 00001EFE 00000000                	dd	0
 31068 00001F02 FF000000                	dd	255
 31069                                  
 31070 00001F06 00                      p_fcbs:	db	0		; local variable
 31071 00001F07 00                      p_keep:	db	0		; local variable
 31072                                  
 31073                                  ;-----------------------------------------------------------------------
 31074                                  
 31075                                  	; 27/10/2022
 31076                                  
 31077                                  ; lastdrive = x
 31078                                  
 31079                                  ;ldrv_parms p_parms <ldrv_parmsx>
 31080                                  ldrv_parms:
 31081 00001F08 [0D1F]                  	dw	ldrv_parmsx
 31082 00001F0A 01                      	db	1
 31083 00001F0B 01                      	db	1
 31084 00001F0C 3B                      	db	';'
 31085                                  
 31086                                  ldrv_parmsx:
 31087 00001F0D 0101[131F]              	dw	101h,ldrv_pos	; min,max = 1 positional
 31088 00001F11 00                      	db	0		; no switches
 31089 00001F12 00                      	db	0		; no keywords
 31090                                  
 31091                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 31092                                  ldrv_pos:				    ; remove colon at end
 31093 00001F13 1001                    	dw	110h
 31094 00001F15 1000                    	dw	10h
 31095 00001F17 [4A1E]                  	dw	result_val	
 31096 00001F19 [491E]                  	dw	noval
 31097 00001F1B 00                      	db	0
 31098                                  	
 31099 00001F1C 00                      p_ldrv:	db	0		; local variable
 31100                                  
 31101                                  ;-----------------------------------------------------------------------
 31102                                  
 31103                                  	; 27/10/2022
 31104                                  
 31105                                  ; stacks = n,m
 31106                                  
 31107                                  ;stks_parms p_parms <stks_parmsx>
 31108                                  stks_parms:
 31109 00001F1D [221F]                  	dw	stks_parmsx
 31110 00001F1F 01                      	db	1
 31111 00001F20 01                      	db	1
 31112 00001F21 3B                      	db	';'
 31113                                  
 31114                                  stks_parmsx:
 31115 00001F22 0202[2A1F][3E1F]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 31116 00001F28 00                      	db	0		; no switches
 31117 00001F29 00                      	db	0		; no keywords
 31118                                  
 31119                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 31120                                  stks_pos_1:
 31121 00001F2A 0080                    	dw	8000h
 31122 00001F2C 0000                    	dw	0
 31123 00001F2E [4A1E]                  	dw	result_val	
 31124 00001F30 [331F]                  	dw	stks_range
 31125 00001F32 00                      	db	0
 31126                                  
 31127                                  ;stks_range p_range <,,,0,64>
 31128                                  stks_range:
 31129 00001F33 01                      	db	1
 31130 00001F34 01                      	db	1
 31131 00001F35 01                      	db	1
 31132 00001F36 00000000                	dd	0
 31133 00001F3A 40000000                	dd	64
 31134                                  
 31135                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 31136                                  stks_pos_2:
 31137 00001F3E 0080                    	dw	8000h
 31138 00001F40 0000                    	dw	0
 31139 00001F42 [4A1E]                  	dw	result_val	
 31140 00001F44 [471F]                  	dw	stk_size_range
 31141 00001F46 00                      	db	0
 31142                                  
 31143                                  ;stk_size_range p_range <,,,0,512>
 31144                                  stk_size_range:
 31145 00001F47 01                      	db	1
 31146 00001F48 01                      	db	1
 31147 00001F49 01                      	db	1
 31148 00001F4A 00000000                	dd	0
 31149 00001F4E 00020000                	dd	512	
 31150                                  
 31151                                  p_stack_count:
 31152 00001F52 0000                    	dw	0	; local variable
 31153                                  p_stack_size:
 31154 00001F54 0000                    	dw	0	; local variable
 31155                                  
 31156                                  ;-----------------------------------------------------------------------
 31157                                  
 31158                                  	; 27/10/2022
 31159                                  
 31160                                  ; multitrack = [ on | off ]
 31161                                  
 31162                                  ;mtrk_parms p_parms <mtrk_parmsx>
 31163                                  mtrk_parms:
 31164 00001F56 [5B1F]                  	dw	mtrk_parmsx
 31165 00001F58 01                      	db	1
 31166 00001F59 01                      	db	1
 31167 00001F5A 3B                      	db	';'
 31168                                  
 31169                                  mtrk_parmsx:
 31170 00001F5B 0101[611F]              	dw	101h,mtrk_pos	; min,max = 1 positional
 31171 00001F5F 00                      	db	0		; no switches
 31172 00001F60 00                      	db	0		; no keywords
 31173                                  
 31174                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31175                                  mtrk_pos:
 31176 00001F61 0020                    	dw	2000h
 31177 00001F63 0000                    	dw	0
 31178 00001F65 [4A1E]                  	dw	result_val	
 31179 00001F67 [661E]                  	dw	on_off_string
 31180 00001F69 00                      	db	0
 31181                                  
 31182 00001F6A 00                      p_mtrk:	db	0		; local variable
 31183                                  
 31184                                  ;-----------------------------------------------------------------------
 31185                                  
 31186                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31187                                  	; (SYSINIT:20B2h)
 31188                                  
 31189                                  ; switches=/k
 31190                                  
 31191                                  ;swit_parms p_parms <swit_parmsx>
 31192                                  swit_parms:
 31193 00001F6B [701F]                  	dw	swit_parmsx
 31194 00001F6D 01                      	db	1
 31195 00001F6E 01                      	db	1
 31196 00001F6F 3B                      	db	';'
 31197                                  
 31198                                  swit_parmsx:
 31199 00001F70 0000                    	dw	0		; no positionals
 31200                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 31201                                  	;db	5               ; # of switches
 31202                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31203 00001F72 06                      	db	6
 31204                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31205                                  	;db	3
 31206 00001F73 [801F]                  	dw	swit_k_ctrl	; /k control
 31207                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 31208 00001F75 [8C1F]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 31209 00001F77 [981F]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 31210 00001F79 [A41F]                  	dw	swit_t_ctrl     ; /t control
 31211 00001F7B [B01F]                  	dw	swit_w_ctrl     ; /w control
 31212                                  	; 14/04/2024 - Retro DOS v5.0 ; **
 31213 00001F7D [BC1F]                  	dw	swit_i_ctrl	; /i control
 31214 00001F7F 00                      	db	0		; no keywords
 31215                                  
 31216                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31217                                  swit_k_ctrl:
 31218 00001F80 00000000[4A1E]-         	dw	0,0,result_val,noval
 31218 00001F86 [491E]             
 31219 00001F88 01                      	db	1
 31220 00001F89 2F4B00                  swit_k:	db	'/K',0
 31221                                  
 31222                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 31223                                  ; (SYSINIT:220Ch) ; *
 31224                                  
 31225                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31226                                  ;
 31227                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31228                                  swit_n_ctrl: ; *
 31229 00001F8C 00000000[4A1E]-         	dw	0,0,result_val,noval
 31229 00001F92 [491E]             
 31230 00001F94 01                      	db	1
 31231 00001F95 2F4E00                  swit_n: db	'/N',0
 31232                                  
 31233                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31234                                  swit_f_ctrl: ; *
 31235 00001F98 00000000[4A1E]-         	dw	0,0,result_val,noval
 31235 00001F9E [491E]             
 31236 00001FA0 01                      	db	1
 31237 00001FA1 2F4600                  swit_f: db 	'/F',0
 31238                                  
 31239                                  	; 27/10/2022
 31240                                  
 31241                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 31242                                  swit_t_ctrl:
 31243 00001FA4 00000000[4A1E]-         	dw	0,0,result_val,noval
 31243 00001FAA [491E]             
 31244 00001FAC 01                      	db	1
 31245 00001FAD 2F5400                  swit_t:	db	'/T',0			   ;				M059
 31246                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 31247                                  swit_w_ctrl:
 31248 00001FB0 00000000[4A1E]-         	dw	0,0,result_val,noval
 31248 00001FB6 [491E]             
 31249 00001FB8 01                      	db	1
 31250 00001FB9 2F5700                  swit_w:	db	'/W',0			   ;				M063
 31251                                  
 31252                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31253                                  ;;;
 31254                                  ;swit_i_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31255                                  swit_i_ctrl:
 31256 00001FBC 0000                    	dw	0
 31257 00001FBE 0000                    	dw	0
 31258 00001FC0 [4A1E]                  	dw	result_val
 31259 00001FC2 [491E]                  	dw	noval
 31260 00001FC4 01                      	db	1
 31261 00001FC5 2F4900                  swit_i:	db	'/I',0
 31262                                  ;;;
 31263                                  
 31264                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 31265                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 31266                                  ;   in the above table to prevent the parsing code from complaining about them
 31267                                  
 31268 00001FC8 00                      p_swit_k:	db     0	; local variable
 31269 00001FC9 00                      p_swit_t:	db     0	; local variable			M059
 31270 00001FCA 00                      p_swit_w:	db     0	; local variable			M063
 31271                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31272 00001FCB 00                      p_swit_i:	db     0
 31273                                  
 31274                                  ;-----------------------------------------------------------------------
 31275                                  
 31276                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31277                                  	; (SYSINIT:20E8h)
 31278                                  
 31279                                  ; DOS = [ high | low ]
 31280                                  
 31281                                  ;dos_parms p_parms  <dos_parmsx>
 31282                                  dos_parms:
 31283 00001FCC [D11F]                  	dw	dos_parmsx
 31284 00001FCE 01                      	db	1
 31285 00001FCF 01                      	db	1
 31286 00001FD0 3B                      	db	';'
 31287                                  dos_parmsx:
 31288 00001FD1 01                      	db	1		; min parameters
 31289 00001FD2 02                      	db	2		; max parameters
 31290 00001FD3 [D91F]                  	dw	dos_pos		; 
 31291 00001FD5 [D91F]                  	dw	dos_pos		; 
 31292 00001FD7 00                      	db	0		; no switches
 31293 00001FD8 00                      	db	0		; no keywords
 31294                                  
 31295                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31296                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31297                                  dos_pos:
 31298 00001FD9 00200000[4A1E]-         	dw	2000h,0,result_val,dos_strings
 31298 00001FDF [EB1F]             
 31299 00001FE1 00                      	db	0
 31300 00001FE2 00200000[4A1E]-         	dw	2000h,0,result_val,dos_strings
 31300 00001FE8 [EB1F]             
 31301 00001FEA 00                      	db	0	
 31302                                  
 31303                                  dos_strings:	;label	byte
 31304 00001FEB 03                      	db	3		; signals that there is a string choice
 31305 00001FEC 00                      	db	0		; no range definition
 31306 00001FED 00                      	db	0		; no numeric values choice
 31307 00001FEE 04                      	db	4		; 4 strings for choice
 31308 00001FEF 01                      	db	1		; the 1st string tag
 31309 00001FF0 [1920]                  	dw	hi_string
 31310 00001FF2 02                      	db	2		; the 2nd string tag
 31311 00001FF3 [1E20]                  	dw	lo_string
 31312 00001FF5 03                      	db	3
 31313 00001FF6 [2220]                  	dw	umb_string
 31314 00001FF8 04                      	db	4
 31315 00001FF9 [2620]                  	dw	noumb_string
 31316                                  
 31317                                  ; 14/04/2024 - Retro DOS v5.0
 31318                                  ; (PCDOS 7.1 IBMDOS.COM - SYSINIT:273Eh)
 31319                                  ;;;
 31320                                  dosdata_parms:
 31321 00001FFB [0020]                  	dw	dosdata_parmsx	; DOSDATA = UMB|NOUMB
 31322 00001FFD 01                      	db	1
 31323 00001FFE 01                      	db	1
 31324 00001FFF 3B                      	db	';'
 31325                                  dosdata_parmsx:
 31326 00002000 01                      	db	1
 31327 00002001 01                      	db	1		; min,max = 1 positional
 31328 00002002 [0620]                  	dw	dosdata_pos
 31329 00002004 00                      	db	0		; no switches
 31330 00002005 00                      	db	0		; no keywords
 31331                                  
 31332                                  	; dosdata_pos p_pos <2000h,0,result_val,dosdata_strings>
 31333                                  dosdata_pos:
 31334 00002006 0020                    	dw	2000h		; simple string
 31335 00002008 0000                    	dw	0
 31336 0000200A [4A1E]                  	dw	result_val
 31337 0000200C [0F20]                  	dw	dosdata_strings
 31338 0000200E 00                      	db	0
 31339                                  dosdata_strings:
 31340 0000200F 03                      	db	3		; signals that there is a string choice
 31341 00002010 00                      	db	0		; no range definition
 31342 00002011 00                      	db	0		; no numeric values choice
 31343 00002012 02                      	db	2		; 2 strings for choice
 31344 00002013 01                      	db	1		; the 1st string tag
 31345 00002014 [2220]                  	dw	umb_string	; "UMB"
 31346 00002016 02                      	db	2		; the 2nd string tag
 31347 00002017 [2620]                  	dw	noumb_string	; "NOUMB"
 31348                                  ;;;
 31349                                  
 31350 00002019 4849474800              hi_string:	db	"HIGH",0
 31351 0000201E 4C4F5700                lo_string:	db	"LOW",0
 31352 00002022 554D4200                umb_string:	db	"UMB",0
 31353 00002026 4E4F554D4200            noumb_string:	db	"NOUMB",0
 31354                                  
 31355                                  p_dos_hi:
 31356 0000202C 00                      	db	0	; local variable
 31357                                  			; BUGBUG : I dont know whether PARSER uses
 31358                                  			;          this variable or not
 31359                                  	; 14/04/2024 (PCDOS 7.1 IBMBIO.COM)
 31360 0000202D 00                      	db	0
 31361                                  
 31362                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31363                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31364                                  ;%if 0
 31365                                  
 31366                                  ;****************************************************************** RICHID ****
 31367                                  
 31368                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 31369                                  
 31370                                  ; 30/03/2019 - Retro DOS v4.0
 31371                                  ;------------------------------------------------------------------------------
 31372                                  
 31373                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 31374                                  ;
 31375                                  ;   Date:     May 14, 1992
 31376                                  ;
 31377                                  ;******************************************************************************
 31378                                  ;
 31379                                  ;   Modification log:
 31380                                  ;
 31381                                  ;     DATE    WHO      DESCRIPTION
 31382                                  ;   --------  -------  --------------------------------------------------------
 31383                                  ;   05/14/92  t-richj  Original
 31384                                  ;   06/21/92  t-richj  Final revisions before check-in
 31385                                  ;
 31386                                  ;******************************************************************************
 31387                                  ;
 31388                                  ; There are two primary definitions which need to be made, selectively, before
 31389                                  ; this include file should be used.  These are:
 31390                                  ;    HV_Extern - If this has been defined, variables for this module will be
 31391                                  ;                declared as external.  Otherwise, variables will be declared
 31392                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 31393                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 31394                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 31395                                  ;                (as only one module, sysconf.asm, includes this file).
 31396                                  ;    HV_LoadHigh - This should be defined when this module is going into
 31397                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 31398                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 31399                                  ;
 31400                                  ;******************************************************************************
 31401                                  
 31402                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 31403                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 31404                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 31405                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 31406                                  ; space problem (it's just such a nice round number, eh?).
 31407                                  
 31408                                  MAXUMB	equ	16
 31409                                  
 31410                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 31411                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 31412                                  
 31413                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 31414                                  SystemPSPOwner	equ	8
 31415                                  ;JapanPSPOwner	equ	9
 31416                                  
 31417                                  ; for LoadHigh and DeviceHigh:
 31418                                  ;
 31419                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 31420                                  ;	          UnHideUMBs().
 31421                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 31422                                  ;	           line.
 31423                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 31424                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 31425                                  ;	          given a command-line like "/L:3,500;4"
 31426                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 31427                                  ;	          matching its index number was specified on the command-line;
 31428                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 31429                                  ;	          will be set to 1.  All others will be set to 0.
 31430                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 31431                                  ;	          specified by the user for a UMB (in the above example, all
 31432                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 31433                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 31434                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 31435                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 31436                                  ;	           for details).
 31437                                  
 31438 0000202E 00                      fInHigh:  db	0
 31439 0000202F 00                      fUmbTiny: db	0
 31440 00002030 0000                    SegLoad:  dw	0
 31441 00002032 00                      UmbLoad:  db	0
 31442 00002033 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 31443 00002043 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 31444 00002063 00                      fm_umb:   db	0
 31445 00002064 00                      fm_strat: db	0
 31446 00002065 00                      fm_argc:  db	0	
 31447                                  
 31448                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 31449                                  ; UmbLoad is set to the UMB number given.
 31450                                  
 31451                                  UNSPECIFIED	equ	-1
 31452                                  
 31453                                  ;%endif ; 27/10/2022
 31454                                  
 31455                                  ;****************************************************************** RICHID ****
 31456                                  
 31457                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 31458                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 31459                                  
 31460                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31461                                  ; (SYSINIT:212Bh)	
 31462                                  
 31463                                  		;public	DevEntry
 31464                                  
 31465 00002066 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 31466 00002068 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 31467 0000206A 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 31468 0000206C 00000000                DevEntry:	dd	0	; Entry point to the device driver
 31469 00002070 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 31470                                  ; 30/12/2022
 31471                                  ; 27/10/2022 
 31472 00002074 00                      ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 31473                                  ;
 31474 00002075 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 31475 00002076 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 31476 00002078 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 31477 0000207A 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 31478                                  ;
 31479 0000207C 00000000                DevXMSAddr:	dd	0
 31480                                  ;
 31481 00002080 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 31482 00002082 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 31483                                  ;
 31484 00002084 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 31485                                  				;  is being loaded into UMB
 31486 00002085 0000                    DevSizeOption:	dw	0	; SIZE= option
 31487                                  ;
 31488 00002087 00                      Int12Lied:	db	0	; did we trap int 12 ?
 31489 00002088 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 31490 0000208A 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 31491                                  ;
 31492 00002092 00                      FirstUMBLinked:	db	0
 31493 00002093 0000                    DevDOSData:	dw	0	; segment of DOS Data
 31494 00002095 00000000                DevCmdLine:	dd	0	; Current Command line
 31495 00002099 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 31496                                  				; to use the file name in the command line
 31497                                  ; 13/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31498                                  ;	ifdef	dblspace_hooks
 31499 0000209A 00                      MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 31500                                  ;	endif
 31501                                  
 31502                                  ; ===========================================================================
 31503                                  
 31504                                  ; 31/03/2019 - Retro DOS v4.0
 31505                                  
 31506                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31507                                  ; (SYSINIT:215Eh)
 31508                                  
 31509                                  ;----------------------------------------------------------------------------
 31510                                  ;
 31511                                  ; procedure : doconf
 31512                                  ;
 31513                                  ;             Config file is parsed initially with this routine. For the
 31514                                  ;             Subsequent passes 'multi_pass' entry is used .
 31515                                  ;
 31516                                  ;----------------------------------------------------------------------------
 31517                                  
 31518                                  	; 27/10/2022
 31519                                  doconf:
 31520 0000209B 0E                      	push	cs
 31521 0000209C 1F                      	pop	ds
 31522                                  
 31523 0000209D B80037                  	mov	ax,3700h
 31524                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 31525 000020A0 CD21                    	int	21h
 31526 000020A2 8816[9547]              	mov	[command_line+1],dl	; set in default command line
 31527                                  
 31528                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 31529                                  ; 27/10/2022
 31530                                  ;;ifdef	MULTI_CONFIG
 31531                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 31532 000020A6 8816[9347]              	mov	[def_swchr],dl ; 31/03/2019 
 31533                                  ;;endif	;MULTI_CONFIG
 31534                                  
 31535 000020AA BA[AA46]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 31536 000020AD B8003D                  	mov	ax,3D00h
 31537                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 31538 000020B0 F9                      	stc				;in case of int 24
 31539 000020B1 CD21                    	int	21h			;function request
 31540 000020B3 7309                    	jnc	short noprob		; brif opened okay
 31541                                  
 31542                                  ; 31/12/2022
 31543                                  ; 27/10/2022
 31544                                  ;;ifdef	MULTI_CONFIG
 31545 000020B5 E84619                  	call	kbd_read		; we still want to give the guy
 31546                                  ;					; a chance to select clean boot!
 31547                                  ;;endif					; (ie, no autoexec.bat processing)
 31548 000020B8 C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 31549 000020BD C3                      	retn
 31550                                  noprob: 				;get file size (note < 64k!!)
 31551 000020BE 89C3                    	mov	bx,ax  ; File handle
 31552 000020C0 31C9                    	xor	cx,cx			; 0
 31553 000020C2 31D2                    	xor	dx,dx			; 0
 31554                                  	;mov	ax,4202h
 31555 000020C4 B80242                  	mov	ax,(LSEEK<<8)|2
 31556 000020C7 CD21                    	int	21h
 31557 000020C9 A3[5403]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 31558                                  					; 08/09/2023 - Erdogan Tan - Note:
 31559 000020CC 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 31560                                  					; I am not removing 'xor dx,dx' here
 31561                                  					; for MSDOS compatibility.
 31562                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 31563                                  					; (Error will be same if CONGIG.SYS file
 31564                                  					;  size > 64KB) 
 31565                                  	;mov	ax,4200h
 31566 000020CE B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 31567 000020D1 CD21                    	int	21h
 31568                                  
 31569                                  	; 31/12/2022 - Retro DOS v4.2 
 31570 000020D3 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 31571                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31572                                  	;mov	dx,[top_of_cdss] 
 31573                                  
 31574 000020D7 A1[5403]                	mov	ax,[count]
 31575 000020DA A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 31576 000020DD E821F1                  	call	ParaRound
 31577 000020E0 29C2                    	sub	dx,ax
 31578                                  
 31579                                  ; 31/12/2022
 31580                                  ; 27/10/2022
 31581                                  ;ifdef	MULTI_CONFIG
 31582                                  ;
 31583                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 31584                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 31585                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 31586                                  ;  we (may) add a variable to the environment that does not explicity appear
 31587                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 31588                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 31589                                  ;  of extra space, so here we account for it (the worst case of course is
 31590                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 31591                                  ;
 31592 000020E2 4A                      	dec	dx                      ;reserve 1 additional paragraph
 31593 000020E3 8916[9515]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 31594 000020E7 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 31595                                  ;;endif	;MULTI_CONFIG
 31596                                  
 31597 000020E9 83EA11                  	sub	dx,11h			;room for header
 31598                                  	
 31599                                  	; 31/12/2022
 31600 000020EC 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 31601 000020F0 8916[A102]              	mov	[CONFBOT],dx
 31602                                  	
 31603                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31604                                  	;mov	[top_of_cdss],dx
 31605                                  	;call    TempCDS 
 31606                                  	; 31/12/2022
 31607                                  	; 11/12/2022
 31608                                  	; ds <> cs 
 31609                                  	;mov	dx,[cs:top_of_cdss]
 31610                                  
 31611                                  	; 08/09/2023
 31612                                  	; ds = cs
 31613 000020F4 8B0E[5403]              	mov	cx,[count]
 31614                                  	
 31615 000020F8 8EDA                    	mov	ds,dx
 31616 000020FA 8EC2                    	mov	es,dx
 31617                                  
 31618 000020FC 31D2                    	xor	dx,dx
 31619                                  	; 08/09/2023
 31620                                  	;mov	cx,[cs:count]
 31621 000020FE B43F                    	mov	ah,3Fh
 31622                                  	;mov	ah,READ  ; 3Fh
 31623 00002100 F9                      	stc				;in case of int 24
 31624 00002101 CD21                    	int	21h			;function request
 31625 00002103 9C                      	pushf
 31626                                  
 31627                                  ; find the eof mark in the file. if present,then trim length.
 31628                                  
 31629 00002104 50                      	push	ax
 31630 00002105 57                      	push	di
 31631 00002106 51                      	push	cx
 31632 00002107 B01A                    	mov	al,1Ah			; eof mark
 31633 00002109 89D7                    	mov	di,dx			; point to buffer
 31634 0000210B E305                    	jcxz	puteol			; no chars
 31635 0000210D F2AE                    	repnz	scasb			; find end
 31636 0000210F 7501                    	jnz	short puteol		; none found and count exhausted
 31637                                  
 31638                                  ; we found a 1a. back up
 31639                                  
 31640 00002111 4F                      	dec	di			; backup past 1Ah
 31641                                  
 31642                                  ;  just for the halibut, stick in an extra eol
 31643                                  
 31644                                  puteol:
 31645 00002112 B00D                    	mov	al,cr ; 0Dh
 31646 00002114 AA                      	stosb
 31647 00002115 B00A                    	mov	al,lf  ;0Ah
 31648 00002117 AA                      	stosb
 31649 00002118 29D7                    	sub	di,dx			; difference moved
 31650                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31651                                  	;mov	[cs:count],di		; new count
 31652                                  
 31653                                  	; 11/12/2022	
 31654                                  	; 31/03/2019 - Retro DOS v4.0
 31655 0000211A 0E                      	push	cs
 31656 0000211B 1F                      	pop	ds
 31657                                  
 31658 0000211C 893E[5403]              	mov	[count],di		; new count
 31659                                  
 31660 00002120 59                      	pop	cx
 31661 00002121 5F                      	pop	di
 31662 00002122 58                      	pop	ax
 31663                                  
 31664                                  	; 11/12/2022
 31665                                  	; 27/10/2022
 31666                                  	;push	cs
 31667                                  	;pop	ds
 31668                                  
 31669 00002123 50                      	push	ax
 31670                                  	;mov	ah,CLOSE
 31671 00002124 B43E                    	mov	ah,3Eh
 31672 00002126 CD21                    	int	21h
 31673 00002128 58                      	pop	ax
 31674 00002129 9D                      	popf
 31675 0000212A 7204                    	jc	short conferr 		;if not we've got a problem
 31676 0000212C 39C1                    	cmp	cx,ax
 31677 0000212E 742C                    	jz	short getcom		;couldn't read the file
 31678                                  conferr:
 31679 00002130 BA[AA46]                	mov	dx,config		;want to print config error
 31680 00002133 E8CB24                  	call	badfil
 31681                                  	; 14/04/2024
 31682                                  endconv:	; 01/01/2023
 31683 00002136 C3                      	retn
 31684                                  
 31685                                  ;----------------------------------------------------------------------------
 31686                                  ;
 31687                                  ; entry : multi_pass
 31688                                  ;
 31689                                  ;             called to execute device=,install= commands
 31690                                  ;
 31691                                  ;----------------------------------------------------------------------------
 31692                                  
 31693                                  	; 27/10/2022
 31694                                  multi_pass:
 31695 00002137 0E                      	push	cs
 31696 00002138 1F                      	pop	ds
 31697                                  
 31698 00002139 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 31699                                  ;jae_endconv:
 31700 0000213E 73F6                    	jae	short endconv 		; do nothing. just return.
 31701                                  
 31702                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31703 00002140 FF36[A102]              	push	word [CONFBOT]
 31704                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31705                                  	;push	word [top_of_cdss]
 31706 00002144 07                      	pop	es			; es -> confbot
 31707                                  
 31708 00002145 8B36[5603]              	mov	si,[org_count]
 31709 00002149 8936[5403]              	mov	[count],si		; set count
 31710 0000214D 31F6                    	xor	si,si ; 0
 31711 0000214F 8936[5803]                      mov     [chrptr],si		; reset chrptr
 31712 00002153 8936[AD02]                      mov     [linecount],si		; reset linecount
 31713                                  
 31714 00002157 E82E22                  	call	getchr
 31715 0000215A EB06                    	jmp	short conflp
 31716                                  
 31717                                  	; 14/04/2024
 31718                                  	; 01/01/2023
 31719                                  ;endconv:
 31720                                  	;retn	
 31721                                  
 31722                                  getcom:
 31723                                  	; 03/01/2023
 31724                                  	; ds = cs
 31725 0000215C E86616                          call    organize                ; organize the file
 31726 0000215F E82622                  	call	getchr
 31727                                  conflp: 
 31728 00002162 72D2                    	jc	short endconv
 31729                                  
 31730 00002164 FF06[AD02]                      inc     word [linecount]	; increase linecount
 31731                                  
 31732                                  	; 08/09/2023
 31733 00002168 30E4                    	xor	ah,ah ; 0
 31734                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 31735                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 31736 0000216A 8826[9915]              	mov	[multdeviceflag],ah ; 0
 31737 0000216E 8826[9C15]              	mov	[setdevmarkflag],ah ; 0
 31738                                  
 31739 00002172 3C0A                    	cmp	al,lf			; linefeed?
 31740 00002174 7448                    	je	short blank_line	;  then ignore this line.
 31741                                  
 31742                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31743                                  ; (SYSINIT:23CCh)
 31744                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31745                                  ;%if 0
 31746                                  
 31747                                  ;ifdef	MULTI_CONFIG
 31748                                  
 31749                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 31750                                  ;   number immediately following it....
 31751                                  
 31752 00002176 A2[9715]                        mov     [config_cmd],al         ; save original command code
 31753                                  	;and	al,NOT CONFIG_OPTION_QUERY
 31754 00002179 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 31755                                  
 31756                                  	; 08/09/2023
 31757 0000217B 3826[9815]              	cmp	[config_multi],ah ; 0
 31758                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 31759 0000217F 7427                            je      short not_final		; no, line number is not embedded
 31760                                  
 31761 00002181 50                              push    ax                      ;
 31762 00002182 E80322                          call    getchr                  ; ignore end-of-image errors,
 31763 00002185 88C4                            mov     ah,al                   ; because if there's an error
 31764 00002187 E8FE21                          call    getchr                  ; fetching the line number that's
 31765 0000218A 86E0                            xchg    al,ah                   ; supposed to be there, the next
 31766 0000218C A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 31767 0000218F 58                              pop     ax
 31768                                  ;
 31769                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 31770                                  ;   which to obtain its original program name, it grovels through all of
 31771                                  ;   memory to find the filename that was used to exec it; it wants to find
 31772                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 31773                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 31774                                  ;   immediately before the filename, but since we are now storing line # info
 31775                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 31776                                  ;   spot.
 31777                                  ;
 31778                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 31779                                  ;   over the line number info, since we no longer need that info anyway. This
 31780                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 31781                                  ;   retrieved.
 31782                                  ;
 31783 00002190 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 31784 00002195 7211                            jb	short not_final		; no
 31785                                          ;test	word [install_flag],have_install_cmd
 31786 00002197 F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 31787 0000219C 7407                            jz	short final		; no install cmds, so yes it is
 31788 0000219E 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 31789 000021A3 7203                            jb	short not_final		; no
 31790                                  final:                                  ;
 31791 000021A5 268804                  	mov	[es:si],al		; save backward-compatible command code
 31792                                  not_final:                              ;
 31793                                  ;endif
 31794                                  
 31795                                  ; 31/12/2022
 31796                                  ;%endif ; 27/10/2022
 31797                                  
 31798 000021A8 88C4                    	mov	ah,al
 31799 000021AA E8DB21                  	call	getchr
 31800 000021AD 7314                    	jnc	short tryi
 31801                                  
 31802 000021AF 803E[CB02]02            	cmp	byte [multi_pass_id],2
 31803                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 31804                                  	; 27/10/2022
 31805 000021B4 7380                    	jnb	short endconv	
 31806 000021B6 E9A608                  	jmp	badop
 31807                                  	
 31808                                  coff:	
 31809                                  	; 11/12/2022
 31810                                  	; ds = cs
 31811                                  	;push	cs
 31812                                  	;pop	ds
 31813 000021B9 E8C321                  	call	newline
 31814 000021BC EBA4                    	jmp	short conflp	; 13/05/2019
 31815                                  
 31816                                  blank_line:
 31817 000021BE E8C721                  	call	getchr
 31818 000021C1 EB9F                    	jmp	short conflp
 31819                                  
 31820                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31821                                  ; 11/12/2022
 31822                                  ; (there is not a jump or call to here from anywhere!)
 31823                                  ;coff_p:
 31824                                  	;push	cs
 31825                                  	;pop	ds
 31826                                  
 31827                                  ;to handle install= commands,we are going to use multi-pass.
 31828                                  ;the first pass handles the other commands and only set install_flag when
 31829                                  ;it finds any install command. the second pass will only handle the
 31830                                  ;install= command.
 31831                                  
 31832                                  ;------------------------------------------------------------------------------
 31833                                  ;install command
 31834                                  ;------------------------------------------------------------------------------
 31835                                  
 31836                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31837                                  	; (SYSINIT:2250h)
 31838                                  tryi:
 31839 000021C3 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 31840 000021C8 7503                    	jne	short not_init_pass
 31841 000021CA E97F01                  	jmp	multi_try_doshi
 31842                                  not_init_pass:
 31843 000021CD 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 31844                                          ; 11/12/2022
 31845                                  	;je	short multi_pass_coff2	; now it is NOPs
 31846 000021D2 74E5                    	je	short coff
 31847                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31848                                  	;je	short multi_pass_coff	
 31849                                  					; This pass can be made use of if
 31850                                  					; we want do some config.sys process
 31851                                  					; after device drivers are loaded
 31852                                  					; and before install= commands
 31853                                  					; are processed
 31854                                  
 31855 000021D4 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 31856 000021D9 741D                    	je	short multi_try_i
 31857 000021DB 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 31858                                  	; 11/12/2022
 31859                                  	;je	short multi_pass_coff2
 31860 000021DE 74D9                    	je	short coff
 31861                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31862                                  	;je	short multi_pass_coff	
 31863                                  
 31864                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 31865                                  ;       but don't process them now.        
 31866                                          
 31867 000021E0 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 31868                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31869 000021E3 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 31870                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31871                                  	;jne	short tryb	
 31872                                  	
 31873                                  	;or	word [install_flag],have_install_cmd ; set the flag
 31874 000021E5 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 31875                                  multi_pass_coff2:
 31876 000021EA EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 31877                                  
 31878                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31879                                  ; (SYSINIT:2448h)
 31880                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31881                                  ;%if 0
 31882                                  precheck_installhigh:
 31883 000021EC 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 31884 000021EF 756B                    	jne     short tryb		; carry on with normal processing
 31885                                  	;or	word [install_flag],have_install_cmd
 31886 000021F1 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 31887 000021F6 EBC1                    	jmp	short coff
 31888                                  ;%endif ; 27/10/2022
 31889                                  
 31890                                  multi_try_i:
 31891 000021F8 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 31892                                  	; 31/12/2022 - Retro DOS v4.2
 31893 000021FB 750A                    	jne	short multi_try_n	; no, check for installhigh
 31894                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31895                                  	;jne	short multi_pass_filter
 31896                                  
 31897                                  ; 31/12/2022
 31898                                  ;%if 1 
 31899                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31900                                  ;%if 0
 31901                                  ;ifdef	MULTI_CONFIG
 31902 000021FD E8F51F                  	call	query_user              ; query the user if config_cmd
 31903 00002200 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31904                                  ;endif
 31905                                  ;%endif ; 27/10/2022
 31906                                  
 31907 00002202 E880EF                  	call	do_install_exec 	;install it.
 31908 00002205 EBB2                    	jmp	short coff		;to handle next install= command.
 31909                                  
 31910                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31911                                  ; (SYSINIT:2463h)
 31912                                  ;%if 1
 31913                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31914                                  ;%if 0
 31915                                  
 31916                                  multi_try_n:
 31917 00002207 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 31918 0000220A 7537                            jne	short multi_pass_filter	; no. ignore this.
 31919                                  ;ifdef	MULTI_CONFIG
 31920 0000220C E8E61F                          call    query_user              ; query the user if config_cmd
 31921 0000220F 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31922                                  ;endif
 31923                                  
 31924                                  ;       The memory environment is in its normal DOS state, so do
 31925                                  ;       the standard calls to set the alloc strategy for loading high
 31926                                  
 31927 00002211 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 31928 00002214 CD21                    	int	21h			;get alloc strategy
 31929 00002216 89C3                    	mov	bx,ax
 31930 00002218 53                              push    bx                      ; save for the return
 31931                                  
 31932 00002219 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 31933 0000221D B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 31934 00002220 CD21                    	int	21h			;set alloc strategy
 31935                                  
 31936 00002222 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 31937 00002225 CD21                            int     21h                     ; get link state
 31938 00002227 30E4                            xor     ah,ah                   ; clear top byte
 31939 00002229 50                              push    ax                      ; save for return
 31940                                  
 31941 0000222A B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 31942 0000222D BB0100                  	mov	bx,1
 31943 00002230 CD21                    	int	21h			;link in UMBs
 31944                                  
 31945 00002232 E850EF                  	call	do_install_exec 	;install it.
 31946                                  
 31947 00002235 B80358                          mov     ax,(ALLOCOPER<<8)|3
 31948 00002238 5B                              pop     bx                      ; recover original link state
 31949 00002239 CD21                            int     21h
 31950 0000223B 5B                              pop     bx                      ; recover original alloc strategy
 31951 0000223C B80158                          mov     ax,(ALLOCOPER<<8)|1
 31952 0000223F CD21                            int     21h
 31953                                  
 31954                                  	;jmp	short coff		;to handle next install= command.
 31955                                  	; 01/01/2023
 31956 00002241 EBA7                    	jmp	short multi_pass_coff2
 31957                                  
 31958                                  ;%endif ; 27/10/2022
 31959                                  
 31960                                  multi_pass_filter:
 31961 00002243 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 31962 00002246 740A                    	je	short multi_pass_adjust
 31963 00002248 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 31964 0000224B 7405                    	je	short multi_pass_adjust
 31965 0000224D 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 31966 00002250 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 31967                                  
 31968                                  multi_pass_adjust:			; these commands need to
 31969 00002252 FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 31970 00002256 FF06[5403]              	inc	word [count]		;  for newline proc.
 31971                                  
 31972                                  multi_pass_coff:
 31973                                  	; 11/12/2022
 31974                                  	;jmp	short coff		; to handle next install= commands.
 31975                                  	; 01/01/2023
 31976 0000225A EB8E                    	jmp	short multi_pass_coff2
 31977                                  
 31978                                  ;------------------------------------------------------------------------------
 31979                                  ; buffer command
 31980                                  ;------------------------------------------------------------------------------
 31981                                  
 31982                                  ;******************************************************************************
 31983                                  ;									      *
 31984                                  ; function: parse the parameters of buffers= command.			      *
 31985                                  ;									      *
 31986                                  ; input :								      *
 31987                                  ;	es:si -> parameters in command line.				      *
 31988                                  ; output:								      *
 31989                                  ;	buffers set							      *
 31990                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 31991                                  ;	h_buffers set if secondary buffer cache specified.		      *
 31992                                  ;									      *
 31993                                  ; subroutines to be called:						      *
 31994                                  ;	sysinit_parse							      *
 31995                                  ; logic:								      *
 31996                                  ; {									      *
 31997                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 31998                                  ;	set dx,cx to 0; 						      *
 31999                                  ;	reset buffer_slash_x;						      *
 32000                                  ;	while (end of command line)					      *
 32001                                  ;	{ sysinit_parse;						      *
 32002                                  ;	  if (no error) then						      *
 32003                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 32004                                  ;		    buffer_slash_x = 1					      *
 32005                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 32006                                  ;			  buffers = result_val._$P_picked_val;		      *
 32007                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 32008                                  ;	  else	{show error message;error exit} 			      *
 32009                                  ;	};								      *
 32010                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 32011                                  ; };									      *
 32012                                  ;									      *
 32013                                  ;******************************************************************************
 32014                                  
 32015                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32016                                  	; (SYSINIT:229Ch)
 32017                                  tryb:
 32018 0000225C 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 32019 0000225F 755C                    	jne	short tryc
 32020                                  
 32021                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32022                                  ; (SYSINIT:24BFh)
 32023                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32024                                  ;%if 0
 32025                                  ;ifdef	MULTI_CONFIG
 32026 00002261 E8911F                  	call	query_user		; query the user if config_cmd
 32027 00002264 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 32028                                  ;endif
 32029                                  ;%endif ; 27/10/2022
 32030                                  
 32031                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32032                                  	; 18/12/2022
 32033 00002266 31C9                    	xor	cx,cx
 32034                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 32035 00002268 880E[481E]              	mov	[p_buffer_slash_x],cl ; 0
 32036                                  
 32037 0000226C BF[011E]                	mov	di,buf_parms
 32038                                  	;xor	cx,cx	; 18/12/2022
 32039                                  	; 03/01/2023
 32040                                  	;mov	dx,cx
 32041                                  do7:
 32042 0000226F E8CE07                  	call	sysinit_parse
 32043 00002272 7303                    	jnc	short if7		; parse error,
 32044                                  	;call	badparm_p		;  and show messages and end the search loop.
 32045                                  	;;jmp	short sr7
 32046                                  	; 31/12/2022
 32047                                  ;sr7:
 32048                                  	;jmp	coff
 32049                                  	; 03/01/2023
 32050 00002274 E9D006                  	jmp	badparm_p_coff
 32051                                  if7:
 32052 00002277 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 32053 0000227A 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 32054                                  	;cmp	word [result_val_swoff],switch_x
 32055 0000227C 813E[4C1E][411E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 32056                                  	;jne	short if11
 32057                                  	; 31/12/2022
 32058 00002282 74EB                    	je	short do7 ;je short en11
 32059                                  
 32060                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 32061                                  	;jmp	short en11 ; 31/12/2022
 32062                                  if11:
 32063                                  	;mov	ax,[rv_dword]
 32064 00002284 A1[4E1E]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 32065 00002287 83F901                  	cmp	cx,1
 32066 0000228A 7505                    	jne	short if13
 32067                                  
 32068 0000228C A3[441E]                	mov	[p_buffers],ax
 32069                                  	;jmp	short en11
 32070                                  	; 31/12/2022
 32071 0000228F EBDE                    	jmp	short do7
 32072                                  if13:
 32073 00002291 A3[461E]                	mov	[p_h_buffers],ax
 32074                                  en11:
 32075 00002294 EBD9                    	jmp	short do7
 32076                                  en7:
 32077 00002296 833E[441E]63            	cmp	word [p_buffers],99
 32078 0000229B 760B                    	jbe	short if18
 32079                                  
 32080                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 32081                                  ;	jne	short if18
 32082                                  
 32083 0000229D E8CB07                  	call	badparm_p
 32084 000022A0 C706[461E]0000          	mov	word [p_h_buffers],0
 32085 000022A6 EB12                    	jmp	short sr7
 32086                                  if18:
 32087 000022A8 A1[441E]                	mov	ax,[p_buffers]	; we don't have any problem.
 32088 000022AB A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 32089                                  
 32090 000022AE A1[461E]                	mov	ax,[p_h_buffers]
 32091 000022B1 A3[9902]                	mov	[h_buffers],ax
 32092                                  
 32093                                  ;	mov	al,[p_buffer_slash_x]	; M016
 32094                                  ;	mov	[buffer_slash_x],al
 32095                                  
 32096 000022B4 A1[AD02]                	mov	ax,[linecount]
 32097 000022B7 A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 32098                                  	; 31/12/2022
 32099                                  	;jmp	short sr7
 32100                                  	; 03/01/2023
 32101                                  sr7:
 32102 000022BA E9FCFE                  	jmp	coff
 32103                                  
 32104                                  ;------------------------------------------------------------------------------
 32105                                  ; break command
 32106                                  ;------------------------------------------------------------------------------
 32107                                  
 32108                                  ;****************************************************************************
 32109                                  ;									    *
 32110                                  ; function: parse the parameters of break = command.			    *
 32111                                  ;									    *
 32112                                  ; input :								    *
 32113                                  ;	es:si -> parameters in command line.				    *
 32114                                  ; output:								    *
 32115                                  ;	turn the control-c check on or off.				    *
 32116                                  ;									    *
 32117                                  ; subroutines to be called:						    *
 32118                                  ;	sysinit_parse							    *
 32119                                  ; logic:								    *
 32120                                  ; {									    *
 32121                                  ;	set di to brk_parms;						    *
 32122                                  ;	set dx,cx to 0; 						    *
 32123                                  ;	while (end of command line)					    *
 32124                                  ;	{ sysinit_parse;						    *
 32125                                  ;	  if (no error) then						    *
 32126                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 32127                                  ;		   set p_ctrl_break,on;					    *
 32128                                  ;	       else					  /*off 	 */ *
 32129                                  ;		   set p_ctrl_break,off;				    *
 32130                                  ;	  else {show message;error_exit};				    *
 32131                                  ;	};								    *
 32132                                  ;	if (no error) then						    *
 32133                                  ;	   dos function call to set ctrl_break check according to	    *
 32134                                  ; };									    *
 32135                                  ;									    *
 32136                                  ;****************************************************************************
 32137                                  
 32138                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32139                                  	; (SYSINIT:22FFh)
 32140                                  tryc:
 32141 000022BD 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 32142 000022C0 7539                    	jne	short trym
 32143                                  
 32144                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32145                                  ; (SYSINIT:2527h)
 32146                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32147                                  ;%if 0
 32148                                  ;ifdef	MULTI_CONFIG
 32149 000022C2 E8301F                  	call	query_user              ; query the user if config_cmd
 32150 000022C5 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 32151                                  ;endif
 32152                                  ;%endif ; 27/10/2022
 32153                                  
 32154 000022C7 BF[521E]                	mov	di,brk_parms
 32155 000022CA 31C9                    	xor	cx,cx
 32156                                  	; 03/01/2023
 32157                                  	;mov	dx,cx
 32158                                  do22:
 32159 000022CC E87107                  	call	sysinit_parse
 32160 000022CF 7303                    	jnc	short if22		; parse error
 32161                                  	;call	badparm_p		;  show message and end the search loop.
 32162                                  	;;jmp	short sr22
 32163                                  	; 31/12/2022
 32164                                  ;sr22:
 32165                                  	;jmp	coff
 32166                                  	; 03/01/2023
 32167 000022D1 E97306                  	jmp	badparm_p_coff
 32168                                  if22:
 32169 000022D4 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32170 000022D7 7415                    	je	short en22		; then end the $endloop
 32171                                  
 32172                                  	;cmp	byte [result_val_itag],1
 32173 000022D9 803E[4B1E]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32174 000022DE 7507                    	jne	short if26
 32175                                  
 32176 000022E0 C606[771E]01            	mov	byte [p_ctrl_break],1	; turn it on
 32177                                  	;jmp	short en26
 32178                                  	; 31/12/2022
 32179 000022E5 EBE5                    	jmp	short do22
 32180                                  if26:
 32181 000022E7 C606[771E]00            	mov	byte [p_ctrl_break],0	; turn it off
 32182                                  en26:
 32183 000022EC EBDE                    	jmp	short do22		; we actually set the ctrl break
 32184                                  en22:
 32185 000022EE B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 32186 000022F0 B001                    	mov	al,1
 32187 000022F2 8A16[771E]              	mov	dl,[p_ctrl_break]
 32188 000022F6 CD21                    	int	21h
 32189                                  	; 31/12/2022
 32190                                  	;jmp	short sr22
 32191                                  	; 03/01/2023
 32192                                  sr22:
 32193 000022F8 E9BEFE                  	jmp	coff
 32194                                  
 32195                                  ;------------------------------------------------------------------------------
 32196                                  ; multitrack command
 32197                                  ;------------------------------------------------------------------------------
 32198                                  
 32199                                  ;******************************************************************************
 32200                                  ;									      *
 32201                                  ; function: parse the parameters of multitrack= command.		      *
 32202                                  ;									      *
 32203                                  ; input :								      *
 32204                                  ;	es:si -> parameters in command line.				      *
 32205                                  ; output:								      *
 32206                                  ;	turn multrk_flag on or off.					      *
 32207                                  ;									      *
 32208                                  ; subroutines to be called:						      *
 32209                                  ;	sysinit_parse							      *
 32210                                  ; logic:								      *
 32211                                  ; {									      *
 32212                                  ;	set di to brk_parms;						      *
 32213                                  ;	set dx,cx to 0; 						      *
 32214                                  ;	while (end of command line)					      *
 32215                                  ;	{ sysinit_parse;						      *
 32216                                  ;	  if (no error) then						      *
 32217                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 32218                                  ;		   set p_mtrk,on;					      *
 32219                                  ;	       else					  /*off 	 */   *
 32220                                  ;		   set p_mtrk,off;					      *
 32221                                  ;	  else {show message;error_exit};				      *
 32222                                  ;	};								      *
 32223                                  ;	if (no error) then						      *
 32224                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 32225                                  ;									      *
 32226                                  ; };									      *
 32227                                  ;									      *
 32228                                  ;******************************************************************************
 32229                                  
 32230                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32231                                  trym:
 32232 000022FB 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 32233 000022FE 7573                    	jne	short tryu
 32234                                  
 32235                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32236                                  ; (SYSINIT:2569h)
 32237                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32238                                  ;%if 0
 32239                                  ;ifdef	MULTI_CONFIG
 32240 00002300 E8F21E                  	call	query_user      ; query the user if config_cmd
 32241 00002303 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 32242                                  ;endif
 32243                                  ;%endif	; 27/10/2022
 32244                                  
 32245 00002305 BF[561F]                	mov	di,mtrk_parms
 32246 00002308 31C9                    	xor	cx,cx
 32247                                  	; 03/01/2023
 32248                                  	;mov	dx,cx
 32249                                  do31:
 32250 0000230A E83307                  	call	sysinit_parse
 32251 0000230D 7303                    	jnc	short if31	; parse error
 32252                                  	;call	badparm_p	;  show message and end the search loop.
 32253                                  	;;jmp	short sr31
 32254                                  	; 31/12/2022
 32255                                  ;sr31:
 32256                                  	;jmp	coff
 32257                                  	; 03/01/2023
 32258 0000230F E93506                  	jmp	badparm_p_coff
 32259                                  if31:
 32260 00002312 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 32261 00002315 7415                    	je	short en31	; then end the $endloop
 32262                                  
 32263                                  	;cmp	byte [result_val_itag],1
 32264 00002317 803E[4B1E]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32265 0000231C 7507                    	jne	short if35
 32266                                  
 32267 0000231E C606[6A1F]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 32268                                  	;jmp	short en35
 32269                                  	; 31/12/2022
 32270 00002323 EBE5                    	jmp	short do31
 32271                                  if35:
 32272 00002325 C606[6A1F]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 32273                                  en35:
 32274 0000232A EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 32275                                  en31:
 32276 0000232C 1E                      	push	ds
 32277                                  	;;mov	ax,Bios_Data ; 70h
 32278                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 32279                                  	; 21/10/2022
 32280 0000232D B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 32281 00002330 8ED8                    	mov	ds,ax
 32282                                  
 32283 00002332 2E803E[6A1F]00          	cmp	byte [cs:p_mtrk],0
 32284 00002338 7508                    	jne	short if39
 32285                                  
 32286 0000233A C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 32287 00002340 EB06                    	jmp	short en39
 32288                                  if39:
 32289 00002342 C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 32290                                  en39:
 32291 00002348 1F                      	pop	ds
 32292                                  	; 31/12/2022
 32293                                  	;jmp	short sr31
 32294                                  	; 03/01/2023
 32295                                  sr31:
 32296 00002349 E96DFE                  	jmp	coff
 32297                                  
 32298                                  ;----------------------------------------------------------------------------
 32299                                  ; DOS=HIGH/LOW command
 32300                                  ;----------------------------------------------------------------------------
 32301                                  
 32302                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32303                                  multi_try_doshi:
 32304 0000234C 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 32305 0000234F 7403                    	je	short it_is_h
 32306                                  skip_it:
 32307 00002351 E9EFFE                  	jmp	multi_pass_filter
 32308                                  it_is_h:				; M003 - removed initing DevUMB
 32309                                  					;	 & runhigh
 32310                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32311                                  ; (SYSINIT:25C1h)
 32312                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32313                                  ;%if 0
 32314                                  ;ifdef	MULTI_CONFIG
 32315 00002354 E89E1E                  	call	query_user              ; query the user if config_cmd
 32316 00002357 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 32317                                  ;endif
 32318                                  ;%endif ; 27/10/2022
 32319                                  
 32320 00002359 BF[CC1F]                	mov	di,dos_parms
 32321 0000235C 31C9                    	xor	cx,cx
 32322                                  	; 03/01/2023
 32323                                  	;mov	dx,cx
 32324                                  h_do_parse:
 32325 0000235E E8DF06                  	call	sysinit_parse
 32326 00002361 7303                    	jnc	short h_parse_ok	; parse error
 32327                                  h_badparm:
 32328                                  	; 03/01/2023
 32329                                  	;call	badparm_p		; show message and end the search loop.
 32330                                  	;;jmp	short h_end
 32331                                  	; 11/12/2022
 32332                                  ;h_end:
 32333                                  	;jmp	coff
 32334                                  	; 03/01/2023
 32335 00002363 E9E105                  	jmp	badparm_p_coff	
 32336                                  h_parse_ok:
 32337 00002366 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32338 00002369 7405                    	je	short h_end		; then end the $endloop
 32339 0000236B E85407                  	call	ProcDOS
 32340 0000236E EBEE                    	jmp	short h_do_parse
 32341                                  	; 11/12/2022
 32342                                  	; 03/01/2023
 32343                                  h_end:
 32344 00002370 E946FE                  	jmp	coff
 32345                                  
 32346                                  ;-----------------------------------------------------------------------------
 32347                                  ; devicehigh command
 32348                                  ;-----------------------------------------------------------------------------
 32349                                  
 32350                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32351                                  tryu:
 32352 00002373 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 32353 00002376 7554                    	jne	short tryd
 32354                                  
 32355                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32356                                  ; (SYSINIT:25E9h)
 32357                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32358                                  ;%if 0
 32359                                  ;ifdef	MULTI_CONFIG
 32360 00002378 E87A1E                  	call	query_user              ; query the user if config_cmd
 32361 0000237B 724F                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 32362                                  ;endif
 32363                                  ;%endif ; 28/10/2022
 32364                                  
 32365                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32366                                  ;%if 0
 32367                                  	; 01/01/2023
 32368                                  	; ds = cs
 32369                                  
 32370 0000237D E8D707                  	call	InitVar
 32371 00002380 E8AB0F                  	call	ParseSize		; process the size= option
 32372                                  	;jnc	short tryu_0
 32373                                  	; 31/12/2022
 32374 00002383 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 32375                                  
 32376                                  ;%endif ; 28/10/2022
 32377                                  
 32378                                  ; 31/12/2022
 32379                                  %if 0
 32380                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32381                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 32382                                  	;mov	[cs:badparm_seg], es
 32383                                  	; 11/12/2022
 32384                                  	; ds = cs
 32385                                  	mov	[badparm_off], si
 32386                                  	mov	[badparm_seg], es
 32387                                  
 32388                                  	; 31/12/2022
 32389                                  	;call	ParseSize
 32390                                  	;jnc	short tryu_2	; 28/10/2022
 32391                                  	
 32392                                  	;call	badparm_p
 32393                                  	;jmp	coff
 32394                                  	; 03/01/2023
 32395                                  	jmp	badparm_p_coff
 32396                                  %endif
 32397                                  
 32398                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32399                                  ; (SYSINIT:2606h)
 32400                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32401                                  ;%if 0
 32402                                  tryu_0:
 32403                                  	;mov	ax,[cs:DevSizeOption]
 32404                                  	; 31/12/2022
 32405 00002385 A1[8520]                	mov	ax,[DevSizeOption] ; ds = cs
 32406 00002388 09C0                    	or	ax,ax
 32407 0000238A 7510                    	jnz	short tryu_2
 32408                                  
 32409 0000238C E85A08                  	call	ParseVar
 32410 0000238F 730B                    	jnc	short tryu_2
 32411                                  tryu_1:
 32412                                  	; 31/12/2022
 32413                                  	; ds = cs
 32414 00002391 8936[9E15]              	mov	[badparm_off], si
 32415 00002395 8C06[A015]              	mov	[badparm_seg], es
 32416                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 32417                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 32418                                  	
 32419                                  	;call	badparm_p		; so all we have to do is choke and
 32420                                  	;jmp	coff			; die, rather verbosely.
 32421                                  	; 03/01/2023
 32422 00002399 E9AB05                  	jmp	badparm_p_coff
 32423                                  
 32424                                  ;%endif ; 28/10/2022
 32425                                  
 32426                                  tryu_2:	
 32427 0000239C 56                      	push	si
 32428 0000239D 06                      	push	es
 32429                                  
 32430                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 32431                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 32432                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 32433                                  tryu_3:
 32434 0000239E 268A04                  	mov	al,[es:si]
 32435 000023A1 3C0D                    	cmp	al,cr
 32436                                  	; 14/04/2024
 32437                                  	;je	short tryu_4
 32438                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32439 000023A3 740C                    	je	short tryu_5
 32440 000023A5 3C0A                    	cmp	al,lf
 32441 000023A7 740A                    	je	short tryu_4
 32442 000023A9 E8B71F                  	call	delim
 32443 000023AC 7405                    	jz	short tryu_4
 32444 000023AE 46                      	inc	si
 32445 000023AF EBED                    	jmp	short tryu_3
 32446                                  
 32447                                  	; 14/04/2024
 32448                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32449                                  tryu_5:
 32450 000023B1 B020                    	mov     al,20h ; ' '   ; blank instead of cr
 32451                                  
 32452                                  tryu_4:	
 32453                                  	; 11/12/2022
 32454                                  	; ds = cs
 32455 000023B3 A2[9920]                	mov	[DevSavedDelim],al
 32456                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 32457                                  					;  it with null
 32458                                  	; 18/12/2022
 32459 000023B6 29DB                    	sub	bx,bx
 32460 000023B8 26881C                  	mov	[es:si],bl ; 0
 32461                                   	;mov	byte [es:si],0
 32462                                  
 32463 000023BB 07                      	pop	es
 32464 000023BC 5E                      	pop	si	; 14/04/2024
 32465                                  
 32466                                  ;------------------------------------------------------------------------------
 32467                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32468                                  ;------------------------------------------------------------------------------
 32469                                  
 32470                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32471                                  ; (SYSINIT:2642h)
 32472                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32473                                  ;%if 0
 32474                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32475                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 32476                                  %if 1
 32477                                  	; 01/01/2023
 32478                                  	; ds = cs
 32479 000023BD E8960C                  	call	UmbTest			; See if UMBs are around...
 32480                                  	; 01/01/2023
 32481                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 32482                                  	
 32483                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 32484                                  	; 31/12/2022
 32485                                  	; ds = cs, bx = 0
 32486                                  	;mov	byte [DeviceHi],bl ; 0
 32487                                  	;jmp	short LoadDevice
 32488                                  	; 01/01/2023
 32489 000023C0 7222                    	jc	short LoadDevice ; bl = 0
 32490                                  %endif
 32491                                  ;%endif
 32492                                  ;------------------------------------------------------------------------------
 32493                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32494                                  ;------------------------------------------------------------------------------
 32495                                  
 32496                                  NrmTst:
 32497                                  	; 11/12/2022
 32498                                  	; ds = cs
 32499                                  	;;mov	byte [cs:DeviceHi],0
 32500                                  	;mov	byte [DeviceHi],0
 32501                                  	; 18/12/2022
 32502                                  	; bx = 0
 32503 000023C2 381E[7520]              	cmp	[DevUMB],bl ; 0
 32504                                  	;cmp	byte [DevUMB],0
 32505                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 32506 000023C6 741C                    	je	short LoadDevice	; no, we don't
 32507                                  	;mov	byte [cs:DeviceHi],1
 32508                                  	; 11/12/2022
 32509                                  	;mov	byte [DeviceHi],1
 32510                                  	; 18/12/2022
 32511 000023C8 FEC3                    	inc	bl ; mov bl,1 ; (*)
 32512                                  	; 11/12/2022
 32513                                  	;jmp	short LoadDevice2	; 11/12/2022
 32514 000023CA EB18                    	jmp	short LoadDevice
 32515                                  
 32516                                  ;------------------------------------------------------------------------------
 32517                                  ; device command
 32518                                  ;------------------------------------------------------------------------------
 32519                                  
 32520                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32521                                  	; (SYSINIT:2665h)
 32522                                  
 32523                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32524                                  	; (SYSINIT:2401h)
 32525                                  tryd:
 32526                                  	; 11/12/2022
 32527                                  	;xor 	bx,bx ; 31/12/2022
 32528                                  	;
 32529 000023CC 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 32530 000023CF 7403                    	je	short gotd
 32531                                  skip_it2:
 32532 000023D1 E9BA02                  	jmp	tryq
 32533                                  gotd:
 32534                                  
 32535                                  ; 31/12/2022 - Retro DOS v4.2
 32536                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32537                                  ;%if 0
 32538                                  ;ifdef	MULTI_CONFIG
 32539 000023D4 E81E1E                  	call	query_user              ; query the user if config_cmd
 32540 000023D7 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 32541                                  ;endif
 32542                                  ;%endif ; 28/10/2022
 32543                                  
 32544                                  	; 31/12/2022
 32545 000023D9 29DB                    	sub	bx,bx
 32546                                  	; bx = 0
 32547                                  	; 11/12/2022
 32548                                  	; ds = cs
 32549                                  	;mov	byte [DeviceHi],0
 32550                                  	;mov	word [DevSizeOption],0
 32551 000023DB 891E[8520]              	mov	[DevSizeOption],bx ; 0
 32552 000023DF C606[9920]20            	mov	byte [DevSavedDelim],' '
 32553                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 32554                                  	;mov	word [cs:DevSizeOption],0
 32555                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 32556                                  					;  be replaced with a ' '
 32557                                  LoadDevice:                             ; device= or devicehigh= command.
 32558                                  	; 11/12/2022
 32559                                  	;mov	byte [DeviceHi],0
 32560 000023E4 881E[8420]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 32561                                  LoadDevice2:
 32562                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 32563                                  	;
 32564                                  	;push    cs
 32565                                          ;pop     ds
 32566                                  	;
 32567                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 32568                                  	;mov	[bpb_addr+2],es
 32569                                  	;
 32570                                  	;mov	[DevCmdLine],si		; save it for ourself
 32571                                  	;mov	[DevCmdLine+2],es
 32572                                  	;
 32573                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 32574                                  
 32575                                  	; 11/12/2022
 32576                                  	; ds = cs
 32577                                  	;mov	bx,cs
 32578                                  	;mov	ds,bx
 32579                                  
 32580                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 32581 000023E8 8936[7F03]              	mov	[bpb_addr],si
 32582                                  	;mov	[cs:bpb_addr+2],es
 32583 000023EC 8C06[8103]              	mov	[bpb_addr+2],es
 32584                                  
 32585                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 32586 000023F0 8936[9520]              	mov	[DevCmdLine],si
 32587                                  	;mov	[cs:DevCmdLine+2],es	
 32588 000023F4 8C06[9720]              	mov	[DevCmdLine+2],es
 32589                                  
 32590                                  	; 31/12/2022 - Retro DOS v4.2
 32591 000023F8 C606[9D15]00            	mov	byte [driver_units],0	; clear total block units for driver	
 32592                                  
 32593 000023FD E8CB1F                  	call	round
 32594                                  	
 32595 00002400 E8370E                  	call	SizeDevice
 32596 00002403 723F                    	jc	short BadFile
 32597                                  
 32598                                  	; 11/12/2022
 32599                                  	; ds = cs
 32600                                  
 32601                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 32602                                  
 32603                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32604                                  ; (SYSINIT:26A4h)
 32605                                  
 32606                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32607                                  ;%if 0
 32608 00002405 C606[7420]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 32609                                  
 32610                                  	; 22/07/2023
 32611                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 32612 0000240A 800E[8420]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 32613                                  	; 10/07/2023
 32614                                  	;or	al,al
 32615 0000240F 741E                    	jz	short DevConvLoad	; the actual load.
 32616                                  
 32617                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 32618 00002411 A0[3220]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 32619                                  
 32620 00002414 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 32621 00002416 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 32622                                  
 32623 00002418 FE0E[7420]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 32624                                  
 32625 0000241C E8FF09                  	call	GetLoadSize		; Returns size of first UMB specified
 32626 0000241F 09C0                    	or	ax,ax
 32627 00002421 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 32628                                  
 32629 00002423 3B06[6620]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 32630 00002427 7D06                    	jge	short DevConvLoad
 32631                                  tryd_1:
 32632 00002429 A1[6620]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 32633 0000242C E8FB09                  	call	StoLoadSize		; minsize for load UMB.
 32634                                  
 32635                                  ;%endif ; 28/10/2022
 32636                                  
 32637                                  ; - End DeviceHigh primary logic changes --------------------------------------
 32638                                  
 32639                                  DevConvLoad:
 32640                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32641 0000242F E80C0D                  	call	InitDevLoad
 32642                                  
 32643                                  	; 11/12/2022
 32644                                  	; ds = cs
 32645 00002432 A1[6820]                	mov	ax,[DevLoadAddr]
 32646 00002435 0306[6620]              	add	ax,[DevSize]
 32647 00002439 7206                    	jc	short NoMem
 32648 0000243B 3906[6A20]              	cmp	[DevLoadEnd],ax
 32649 0000243F 7315                    	jae	short LoadDev
 32650                                  	
 32651                                  	; 11/12/2022
 32652                                  	;mov	ax,[cs:DevLoadAddr]
 32653                                  	;add	ax,[cs:DevSize]
 32654                                  	;jc	short NoMem
 32655                                  	;cmp	[cs:DevLoadEnd],ax
 32656                                  	;jae	short LoadDev
 32657                                  NoMem:
 32658                                  	; 11/12/2022
 32659                                  	; ds = cs
 32660                                  	;jmp	mem_err
 32661 00002441 E9C61F                  	jmp	mem_err2
 32662                                  
 32663                                  BadFile:
 32664                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32665                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 32666                                  	;;cmp	byte [es:si],' '
 32667                                          ;;jae	short tryd_2
 32668                                  	; 31/12/2022	
 32669                                  	;cmp	byte [es:si],0Dh	; cr
 32670                                          ;jne	short tryd_2
 32671                                  	;jmp	badop
 32672                                  	; 31/12/2022
 32673                                  	; ds = cs
 32674                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32675                                  	; (SYSINIT:26E6h)
 32676 00002444 E8540E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 32677 00002447 26803C20                	cmp	byte [es:si],' ' 
 32678                                  	;cmp	byte [es:si],20h ; space
 32679 0000244B 7303                    	jnb	short tryd_2
 32680 0000244D E90F06                  	jmp	badop
 32681                                  tryd_2:
 32682 00002450 E8B221                  	call	badload
 32683 00002453 E963FD                  	jmp	coff
 32684                                  
 32685                                  LoadDev:
 32686 00002456 06                      	push	es
 32687 00002457 1F                      	pop	ds
 32688                                  
 32689 00002458 89F2                    	mov	dx,si			;ds:dx points to file name
 32690 0000245A E8220E                  	call	ExecDev			; load device driver using exec call
 32691                                  badldreset:
 32692 0000245D 1E                      	push	ds
 32693 0000245E 07                      	pop	es			;es:si back to config.sys
 32694 0000245F 0E                      	push	cs
 32695 00002460 1F                      	pop	ds			;ds back to sysinit
 32696 00002461 72E1                    	jc	short BadFile
 32697                                  goodld:
 32698                                  	; 11/12/2022
 32699                                  	; ds = cs
 32700                                  
 32701 00002463 06                      	push	es ; +	; 31/12/2022
 32702 00002464 56                      	push	si ; ++
 32703 00002465 E8440E                  	call	RemoveNull
 32704 00002468 06                      	push	es
 32705 00002469 56                      	push	si
 32706                                  
 32707 0000246A 0E                      	push	cs
 32708 0000246B 07                      	pop	es
 32709                                  
 32710 0000246C 1E                      	push	ds ; **  ; ds = cs
 32711 0000246D 56                      	push	si
 32712                                  
 32713                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 32714                                  	; 31/12/2022
 32715                                  	; ds = cs
 32716 0000246E C536[6C20]              	lds	si,[DevEntry]
 32717                                  
 32718                                  	;test	word [si+4],8000h
 32719                                  	; 11/12/2022
 32720 00002472 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 32721                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 32722 00002476 7514                    	jnz	short got_device_com_cont   ; no.
 32723                                  
 32724 00002478 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 32725                                  	;cmp	byte [si+32],26
 32726 0000247D 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 32727 00002481 7209                    	jb	short got_device_com_cont
 32728                                  
 32729 00002483 5E                      	pop	si
 32730 00002484 1F                      	pop	ds ; **
 32731                                  
 32732 00002485 5E                      	pop	si			; clear the stack
 32733 00002486 07                      	pop	es
 32734                                  
 32735                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32736                                  	;call	RetFromUM
 32737                                  	; 31/12/2022
 32738                                  	; ds = cs ; **
 32739 00002487 E8110E                  	call	RetFromUM		; Do this before we leave
 32740                                  
 32741                                  	;jmp	short badnumblock
 32742                                  	; 31/12/2022
 32743 0000248A EB73                    	jmp	short badnumblock2  ; ds = cs
 32744                                  
 32745                                  got_device_com_cont:
 32746 0000248C 5E                      	pop	si
 32747 0000248D 1F                      	pop	ds
 32748                                  
 32749                                  	; 11/12/2022
 32750                                  	; ds = cs
 32751                                  
 32752 0000248E E85406                  	call	LieInt12Mem
 32753 00002491 E8B106                  	call	UpdatePDB		; update the PSP:2 value M020
 32754                                  
 32755                                  	; 11/12/2022
 32756                                  	; ds = cs
 32757                                  	; 08/09/2023
 32758 00002494 31C0                    	xor	ax, ax ; 0
 32759 00002496 3806[9915]              	cmp	byte [multdeviceflag],al ; 0
 32760                                  	;cmp	byte [multdeviceflag],0
 32761                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 32762                                  					;  driver in the file ; M027
 32763 0000249A 750B                    	jne	short skip_pass_limit	;		      ; M027
 32764                                  
 32765                                  	; 11/12/2022
 32766                                  	; ds = cs
 32767                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 32768                                  	;mov	bx,[cs:DevLoadEnd]
 32769                                  	;mov	[cs:break_addr+2],bx
 32770                                  
 32771                                  	;mov	word [break_addr],0
 32772                                  	; 08/09/2023
 32773 0000249C A3[7B03]                	mov	[break_addr],ax ; 0
 32774 0000249F 8B1E[6A20]              	mov	bx,[DevLoadEnd]
 32775 000024A3 891E[7D03]              	mov	[break_addr+2],bx
 32776                                  
 32777                                  skip_pass_limit:
 32778                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 32779                                  ;	number of installed devices (including DblSpace drives) where
 32780                                  ;	"drivenumber" is the number that the next block device will
 32781                                  ;	be assigned to. Because some naughty device drivers (like
 32782                                  ;	interlnk) look at the internal DOS variable instead of the
 32783                                  ;	value we pass it, we'll temporarily stick our value into
 32784                                  ;	DOS DATA while we're initializing the device drivers.
 32785                                  ;
 32786                                  ;	Note that this will make it impossible for this device
 32787                                  ;	driver to access the DblSpace drive letters, whether
 32788                                  ;	they are swapped-hosts or unswapped compressed drives,
 32789                                  ;	during its initialization phase.
 32790                                  
 32791                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32792                                  ; (SYSINIT:2752h)
 32793                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32794                                  ;%if 0
 32795                                  	; 31/12/2022
 32796                                  	;push	ds
 32797                                  	
 32798                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32799                                  	; 31/12/2022
 32800                                  	; ds = cs
 32801                                  	; 08/09/2023
 32802                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32803                                  
 32804                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 32805                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 32806                                  	;mov	ah,al
 32807                                  
 32808                                  	; 08/09/2023
 32809                                  	; ds = cs
 32810 000024A7 A0[8303]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 32811 000024AA A2[8303]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 32812 000024AD 88C4                    	mov	ah,al
 32813 000024AF C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32814                                  
 32815 000024B3 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 32816                                  	; 31/12/2022
 32817                                  	;pop	ds
 32818                                  	
 32819 000024B6 50                      	push	ax			; save real sysi_numio/ncds in ax
 32820                                  
 32821                                  ;%endif ; 29/10/2022
 32822                                  
 32823                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32824                                  	; (SYSINIT:24B9h)
 32825                                  
 32826 000024B7 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 32827 000024BA E8561F                  	call	calldev 		; calldev (sdevstrat);
 32828 000024BD BB0800                  	mov	bx,SYSDEV.INT ; 8
 32829 000024C0 E8501F                  	call	calldev 		; calldev (sdevint);
 32830                                  
 32831                                  	; 11/12/2022
 32832                                  	; ds <> cs (from calldev) ; 31/12/2022
 32833                                  
 32834                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32835                                  ; (SYSINIT:2773h)
 32836                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32837                                  ;%if 0
 32838 000024C3 58                      	pop	ax			; get real sysi_numio value
 32839                                  	; 31/12/2022
 32840                                  	;push	ds
 32841 000024C4 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32842 000024C9 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 32843                                  	; 31/12/2022
 32844                                  	;pop	ds
 32845                                  
 32846                                  ;%endif ; 29/10/2022
 32847                                  
 32848                                  	; 11/12/2022
 32849 000024CC 0E                      	push	cs
 32850 000024CD 1F                      	pop	ds
 32851                                  
 32852 000024CE E84206                  	call	TrueInt12Mem
 32853                                  
 32854                                  	; 11/12/2022
 32855                                  	; ds = cs
 32856                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 32857                                  	;mov	[cs:DevBrkAddr],ax
 32858                                  	;mov	ax,[cs:break_addr+2]
 32859                                  	;mov	[cs:DevBrkAddr+2],ax
 32860 000024D1 A1[7B03]                	mov	ax,[break_addr]	
 32861 000024D4 A3[7020]                	mov	[DevBrkAddr],ax
 32862 000024D7 A1[7D03]                	mov	ax,[break_addr+2]
 32863 000024DA A3[7220]                	mov	[DevBrkAddr+2],ax
 32864                                  
 32865                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32866                                  	;call	RetFromUM		; There we go... all done.
 32867                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32868                                  	; (SYSINIT:2791h)
 32869 000024DD E8BB0D                  	call	RetFromUM		; There we go... all done.	
 32870                                  
 32871                                  	; 31/12/2022
 32872                                  	; ds = cs
 32873                                  
 32874                                  	; 11/12/2022
 32875 000024E0 803E[7520]00            	cmp	byte [DevUMB],0	
 32876                                  	;cmp	byte [cs:DevUMB],0
 32877 000024E5 7403                    	je	short tryd_3
 32878 000024E7 E8A60F                  	call	AllocUMB
 32879                                  	; 31/12/2022
 32880                                  	; ds = cs
 32881                                  tryd_3:
 32882                                  
 32883                                  ;ifndef ROMDOS
 32884                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 32885                                  
 32886                                  	; 11/12/2022
 32887                                  	; ds = cs
 32888                                  	
 32889                                  	;cmp	byte [cs:runhigh],0FFh
 32890 000024EA 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 32891 000024EF 7503                    	jne	short tryd_4
 32892                                  	
 32893                                  	; 11/12/2022
 32894                                  	; ds = cs
 32895 000024F1 E890E4                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 32896                                  tryd_4:
 32897                                  ;endif ; ROMDOS
 32898                                  
 32899 000024F4 5E                      	pop	si
 32900 000024F5 1F                      	pop	ds
 32901 000024F6 C60400                  	mov	byte [si],0		; *p = 0;
 32902                                  
 32903 000024F9 0E                      	push	cs
 32904 000024FA 1F                      	pop	ds
 32905                                  
 32906 000024FB EB1F                    	jmp	short was_device_com
 32907                                  
 32908                                  ;----------------------------------------------------------------------------
 32909                                  
 32910                                  ; 02/04/2019 - Retro DOS v4.0
 32911                                  
 32912                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32913                                  ; (SYSINIT:27B3h)
 32914                                  
 32915                                  badnumblock:
 32916 000024FD 0E                      	push	cs
 32917 000024FE 1F                      	pop	ds
 32918                                  badnumblock2:	; 31/12/2022 (ds=cs)
 32919 000024FF BA[4A4D]                	mov	dx,badblock
 32920 00002502 E82821                  	call	print
 32921                                  
 32922                                  ;------ fall thru -----------------------------------------------------------
 32923                                  
 32924                                  	; 31/12/2022 - Retro DOS v4.2
 32925                                  
 32926                                  erase_dev_do:				; modified to show message "error in config.sys..."
 32927                                  	
 32928                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 32929                                  				; (Note: 'call CheckDoubleSpace'
 32930                                  				; has been removed at 'erase_dev_do:' pos
 32931                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 32932                                  				; Erdogan Tan - 10/07/2023
 32933 00002505 5E                      	pop	si ; ++
 32934 00002506 07                      	pop	es ; + ; 31/12/2022
 32935                                  
 32936 00002507 0E                      	push	cs
 32937 00002508 1F                      	pop	ds
 32938                                  
 32939                                  skip1_resetmemhi:
 32940                                  	; 11/12/2022
 32941                                  	; ds = cs
 32942 00002509 833E[8403]00            	cmp	word [configmsgflag],0
 32943                                  	;cmp	word [cs:configmsgflag],0
 32944 0000250E 7409                    	je	short no_error_line_msg
 32945                                  
 32946 00002510 E88005                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 32947                                  	; 11/12/2022
 32948                                  	; ds = cs
 32949                                  	;mov	word [cs:configmsgflag],0
 32950 00002513 C706[8403]0000          	mov	word [configmsgflag],0	; set the default value again.
 32951                                  
 32952                                  no_error_line_msg:
 32953 00002519 E99DFC                  	jmp	coff
 32954                                  
 32955                                  ;----------------------------------------------------------------------------
 32956                                  
 32957                                  was_device_com:
 32958                                  	; 14/12/2022
 32959                                  	; ds = cs
 32960 0000251C A1[7220]                	mov	ax,[DevBrkAddr+2]
 32961                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 32962 0000251F 3B06[6A20]              	cmp	ax,[DevLoadEnd]
 32963                                  	;cmp	ax,[cs:DevLoadEnd]
 32964 00002523 7605                    	jbe	short breakok
 32965                                  
 32966 00002525 5E                      	pop	si
 32967 00002526 07                      	pop	es
 32968 00002527 E91AFF                  	jmp	BadFile
 32969                                  
 32970                                  breakok:
 32971                                  	; 14/12/2022
 32972                                  	; ds = cs
 32973 0000252A C43E[6D02]              	les	di,[DOSINFO] 
 32974 0000252E C516[6C20]              	lds	dx,[DevEntry]
 32975                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 32976 00002532 89D6                    	mov	si,dx
 32977                                  
 32978                                  	; 14/11/2022
 32979                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 32980                                  
 32981                                  	; 14/12/2022
 32982                                  	; ds <> cs
 32983                                  	
 32984                                  	;mov	ax,[si+4]
 32985 00002534 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 32986                                  	; 12/12/2022
 32987 00002537 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 32988                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 32989 0000253A 7426                    	jz	short isblock
 32990                                  
 32991                                  ;------ lets deal with character devices
 32992                                  
 32993 0000253C 2E800E[9C15]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 32994 00002542 E89A0D                  	call	DevSetBreak		;go ahead and alloc mem for device
 32995                                  jc_edd:
 32996 00002545 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 32997                                  
 32998                                  	; 12/12/2022
 32999 00002547 A801                    	test	al,ISCIN
 33000                                  	;test	ax,ISCIN ; 1		;is it a console in?
 33001 00002549 7408                    	jz	short tryclk
 33002                                  
 33003 0000254B 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 33004 0000254F 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 33005                                  tryclk: 
 33006                                  	; 12/12/2022
 33007 00002553 A808                    	test	al,ISCLOCK
 33008                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 33009 00002555 7408                    	jz	short golink
 33010                                  
 33011 00002557 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 33012 0000255B 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 33013                                  golink: 
 33014 0000255F E9DF00                  	jmp	linkit
 33015                                  
 33016                                  ;------ deal with block device drivers
 33017                                  
 33018                                  isblock:
 33019 00002562 2EA0[7A03]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 33020 00002566 08C0                    	or	al,al
 33021 00002568 749B                    	jz	short erase_dev_do
 33022                                  	;mov	[si+10],al
 33023 0000256A 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 33024                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33025                                  	;add	[cs:driver_units],al
 33026                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33027 0000256D 2E0006[9D15]            	add	[cs:driver_units],al	; keep total for all drivers in file
 33028                                  perdrv:
 33029 00002572 98                      	cbw				; warning no device > 127 units
 33030 00002573 89C1                    	mov	cx,ax
 33031 00002575 88E6                    	mov	dh,ah
 33032                                  	;mov	dl,[es:di+32]
 33033 00002577 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 33034 0000257B 88D4                    	mov	ah,dl
 33035 0000257D 00C4                    	add	ah,al			; check for too many devices
 33036 0000257F 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 33037 00002582 7603                    	jbe	short ok_block
 33038 00002584 E976FF                  	jmp	badnumblock
 33039                                  
 33040                                  ok_block:
 33041 00002587 2E800E[9C15]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33042 0000258D E84F0D                  	call	DevSetBreak		; alloc the device
 33043 00002590 72B3                    	jc	short jc_edd
 33044 00002592 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 33045                                  
 33046 00002596 2E0006[8303]            	add	[cs:drivenumber],al	; remember amount for next device
 33047 0000259B 2EC51E[7F03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 33048                                  perunit:
 33049 000025A0 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 33050                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 33051                                  	; 11/12/2022
 33052 000025A5 26C46E00                	les	bp,[es:bp]
 33053                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33054                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 33055                                  scandpb:
 33056                                  	;cmp	word [es:bp+25],-1
 33057 000025A9 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 33058 000025AE 7406                    	je	short foundpb
 33059                                  	;les	bp,[es:bp+25]
 33060 000025B0 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 33061 000025B4 EBF3                    	jmp	short scandpb
 33062                                  foundpb:
 33063 000025B6 2EA1[7020]              	mov	ax,[cs:DevBrkAddr]
 33064 000025BA 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 33065 000025BE 2EA1[7220]              	mov	ax,[cs:DevBrkAddr+2]
 33066 000025C2 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 33067                                  
 33068 000025C6 2EC42E[7020]            	les	bp,[cs:DevBrkAddr]
 33069 000025CB 2E8306[7020]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 33070                                  				; 08/09/2023
 33071                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 33072 000025D1 E8EA0C                  	call	RoundBreakAddr
 33073                                  
 33074 000025D4 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 33075 000025DA 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 33076                                  
 33077 000025DF 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 33078 000025E1 43                      	inc	bx
 33079 000025E2 43                      	inc	bx			;point to next guy
 33080                                  	;mov	[es:bp+DPB.DRIVE],dx
 33081                                  	; 11/12/2022
 33082 000025E3 26895600                	mov	[es:bp],dx ; 13/05/2019
 33083                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33084                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 33085                                  
 33086                                  	; 13/04/2024 - Retro DOS v5.0
 33087                                  	; PCDOS 7.1 IBMBIO.COM
 33088                                  	;;;
 33089 000025E7 52                      	push	dx
 33090 000025E8 51                      	push	cx		; initialize FAT32 extended DPB parameters/fields
 33091 000025E9 BA5241                  	mov	dx,4152h	; 'AR' signature for FAT32 extended DPB
 33092 000025EC 31C9                    	xor	cx,cx	; 0
 33093                                  	;mov	[es:bp+1Dh],cx
 33094 000025EE 26894E1D                	mov	[es:bp+DPB.NEXT_FREE],cx ; last allocated cluster #
 33095                                  	;cmp	[si+0Bh],cx	; BPB.fatsecs16 
 33096 000025F2 394C0B                  	cmp	[si+A_BPB.SECTORSPERFAT],cx ; 0
 33097 000025F5 7514                    	jnz	short set_dpb	; FAT DPB (33 bytes)   -jnz-
 33098                                  				; FAT32 DPB (61 bytes) -jz-
 33099                                  	;mov	[es:bp+39h],cx
 33100 000025F7 26894E39                	mov	[es:bp+DPB.FAT32_NXTFREE],cx ; 0
 33101                                  	;mov	[es:bp+3Bh],cx
 33102 000025FB 26894E3B                	mov	[es:bp+DPB.FAT32_NXTFREE+2],cx ; 0
 33103 000025FF 49                      	dec	cx	; 0FFFFh ; -1
 33104                                  	;mov	[es:bp+1Fh],cx
 33105 00002600 26894E1F                	mov	[es:bp+DPB.FREE_CNT],cx ; -1 = unknown
 33106                                  	;mov	[es:bp+21h],cx
 33107 00002604 26894E21                	mov	[es:bp+DPB.FREE_CNT+2],cx ; -1 = unknown
 33108 00002608 B95845                  	mov	cx,4558h       ; 'EX' signature for FAT32 extended DPB
 33109                                  set_dpb:
 33110                                  	;;;
 33111                                  
 33112 0000260B B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 33113 0000260D CD21                    	int	21h
 33114                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 33115                                  			; DS:SI -> BPB (BIOS Parameter Block)
 33116                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 33117                                  	; 13/04/2024
 33118                                  	;;;
 33119 0000260F 59                      	pop	cx
 33120 00002610 5A                      	pop	dx
 33121                                  	;;;
 33122                                  
 33123                                  	;mov	ax,[es:bp+2]
 33124 00002611 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 33125 00002615 06                      	push	es
 33126 00002616 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 33127                                  	;cmp	ax,[es:di+10h]
 33128 0000261B 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 33129 0000261F 07                      	pop	es
 33130                                  	; 13/04/2024
 33131                                  	;jna	short iblk_1
 33132                                  	;jmp	bad_bpb_size_sector
 33133                                  	; 29/10/2022
 33134 00002620 775E                    	ja	short bad_bpb_size_sector
 33135                                  iblk_1:
 33136 00002622 1E                      	push	ds
 33137 00002623 52                      	push	dx
 33138                                  
 33139 00002624 2EC516[6C20]            	lds	dx,[cs:DevEntry]
 33140                                  	;mov	[es:bp+13h],dx
 33141 00002629 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 33142                                  	;mov	[es:bp+15h],ds
 33143 0000262D 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 33144                                  
 33145 00002631 5A                      	pop	dx
 33146 00002632 1F                      	pop	ds
 33147                                  
 33148 00002633 42                      	inc	dx
 33149 00002634 FEC6                    	inc	dh
 33150                                  	;loop	perunit
 33151                                  	; 13/04/2024
 33152                                  	;;;
 33153 00002636 49                      	dec	cx		; cx = cx - 1
 33154                                  				; cx = remain count from [cs:unitcount]
 33155 00002637 7403                    	jz	short iblk_2	; cx = 0 -> done
 33156 00002639 E964FF                  	jmp	perunit		; loop until cx is 0
 33157                                  iblk_2:
 33158                                  	;;;
 33159                                  	
 33160 0000263C 0E                      	push	cs
 33161 0000263D 1F                      	pop	ds
 33162                                  
 33163 0000263E E84EE6                  	call	TempCDS 		; set cds for new drives
 33164                                  	; 31/12/2022
 33165                                  	; ds <> cs
 33166                                  linkit:
 33167 00002641 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 33168 00002646 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 33169 0000264A 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 33170                                  
 33171 0000264E 2EC536[6C20]            	lds	si,[cs:DevEntry]	;ds:si = device location
 33172 00002653 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 33173 00002657 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 33174 0000265B 8B04                    	mov	ax,[si]			;get pointer to next device
 33175 0000265D 2EA3[6C20]              	mov	[cs:DevEntry],ax	;and save it
 33176                                  
 33177 00002661 890C                    	mov	[si],cx			;link in the driver
 33178 00002663 895402                  	mov	[si+2],dx
 33179                                  enddev:
 33180 00002666 5E                      	pop	si
 33181 00002667 07                      	pop	es
 33182 00002668 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 33183 00002669 740B                    	jz	short coffj3
 33184                                  
 33185 0000266B 2EFE06[9915]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 33186 00002670 E88E0C                  	call	DevBreak		; M009
 33187                                  	; 11/12/2022
 33188                                  	; ds = cs (DevBreak)
 33189                                  
 33190                                  	; 03/04/2019 - Retro DOS v4.0
 33191                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 33192 00002673 E9EDFD                  	jmp	goodld			; otherwise pretend we loaded it in
 33193                                  coffj3: 
 33194                                  	; 18/12/2022
 33195                                  	; ax = 0
 33196 00002676 2EA2[9915]              	mov	[cs:multdeviceflag],al ; 0
 33197                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 33198 0000267A E8840C                  	call	DevBreak
 33199                                  	; 11/12/2022
 33200                                  	; ds = cs (DevBreak)
 33201                                  	
 33202                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33203                                  	; (SYSINIT:2919h)
 33204                                  	; 11/07/2023
 33205                                  	; 07/03/2025 - MiniDOS 1.0
 33206                                  	;call	CheckProtmanArena
 33207                                  	
 33208                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 33209                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 33210                                  ;					;  created a bogus arena to try
 33211                                  ;					;  to protect some of its resident-
 33212                                  ;					;  init code.
 33213                                  	; 13/04/2024 - Retro DOS v5.0
 33214                                  	; PCDOS 7.1 IBMBIO.COM
 33215                                  	;;call	CheckDoubleSpace
 33216                                  	
 33217                                  	; 07/03/2025 - MiniDOS 1.0
 33218 0000267D E939FB                  	jmp	coff
 33219                                  
 33220                                  ;----------------------------------------------------------------------------
 33221                                  
 33222                                  ; 03/04/2019 - Retro DOS v4.0
 33223                                  
 33224                                  bad_bpb_size_sector:
 33225 00002680 5E                      	pop	si
 33226 00002681 07                      	pop	es
 33227 00002682 BA[6C4C]                	mov	dx,badsiz_pre
 33228 00002685 BB[4A4C]                	mov	bx,crlfm
 33229 00002688 E8801F                  	call	prnerr
 33230                                  
 33231 0000268B E92BFB                  	jmp	coff
 33232                                  
 33233                                  ;------------------------------------------------------------------------------
 33234                                  ; country command
 33235                                  ;      the syntax is:
 33236                                  ;	country=country id {,codepage {,path}}
 33237                                  ;	country=country id {,,path}	:default codepage id in dos
 33238                                  ;------------------------------------------------------------------------------
 33239                                  
 33240                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33241                                  	; (SYSINIT:2663h)
 33242                                  tryq:
 33243 0000268E 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 33244 00002691 7403                    	je	short tryq_cont
 33245                                  skip_it3:
 33246 00002693 E90D01                  	jmp	tryf
 33247                                  tryq_cont:
 33248                                  
 33249                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33250                                  ; (SYSINIT:297Eh)
 33251                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33252                                  ;%if 0
 33253                                  ;ifdef	MULTI_CONFIG
 33254 00002696 E85C1B                  	call	query_user		; query the user if config_cmd
 33255 00002699 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 33256                                  ;endif
 33257                                  ;%endif ; 02/11/2022
 33258                                  
 33259                                  	; 31/12/2022
 33260                                  	;xor	bx,bx
 33261 0000269B 31C9                    	xor	cx,cx
 33262                                  	; 14/12/2022
 33263                                  	; ds = cs
 33264                                  	; bx = 0
 33265                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 33266                                  	;mov	word [cs:p_code_page],0
 33267                                  	; 31/12/2022
 33268                                  	; cx = 0
 33269                                  	;mov	[cntry_drv],bl ; 0
 33270                                  	;mov	[p_code_page],bx ; 0
 33271 0000269D 880E[B646]              	mov	[cntry_drv],cl ; 0
 33272 000026A1 890E[AF1E]              	mov	[p_code_page],cx ; 0	
 33273                                  
 33274 000026A5 BF[781E]                	mov	di,cntry_parms
 33275                                  	;xor	cx,cx	; 31/12/2022
 33276                                  	; 03/01/2023
 33277                                  	;mov	dx,cx
 33278                                  do52:
 33279 000026A8 E89503                  	call	sysinit_parse
 33280 000026AB 730B                    	jnc	short if52		; parse error,check error code and
 33281                                  
 33282 000026AD E8E000                  	call	cntry_error		; show message and end the search loop.
 33283                                  	; 14/12/2022
 33284                                  	; ds = cs
 33285 000026B0 C706[AD1E]FFFF          	mov	word [p_cntry_code],-1
 33286                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 33287 000026B6 EB34                    	jmp	short sr52
 33288                                  if52:
 33289 000026B8 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33290 000026BB 742F                    	jz	short sr52		; then end the search loop
 33291                                  
 33292                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 33293                                  	; 14/12/2022
 33294                                  	; ds = cs
 33295 000026BD 803E[4A1E]01            	cmp	byte [result_val],_$P_Number	
 33296                                  	;cmp	byte [cs:result_val],_$P_Number
 33297 000026C2 7512                    	jnz	short if56
 33298                                  
 33299                                  	;;mov	ax,[cs:rw_dword]
 33300                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33301                                  	; 14/12/2022
 33302 000026C4 A1[4E1E]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33303 000026C7 83F901                  	cmp	cx,1
 33304 000026CA 7505                    	jne	short if57
 33305                                  
 33306                                  	;mov	[cs:p_cntry_code],ax
 33307                                  	; 14/12/2022
 33308 000026CC A3[AD1E]                	mov	[p_cntry_code],ax
 33309                                  
 33310                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33311                                  	;jmp	short en57
 33312                                  	; 12/12/2022
 33313                                  	;jmp	short en56
 33314 000026CF EBD7                    	jmp	short do52
 33315                                  if57:
 33316                                  	;mov	[cs:p_code_page],ax
 33317                                  	; 14/12/2022
 33318                                  	; ds = cs
 33319 000026D1 A3[AF1E]                	mov	[p_code_page],ax
 33320                                  en57:
 33321                                  	;jmp	short en56		; path entered
 33322                                  	; 12/12/2022
 33323 000026D4 EBD2                    	jmp	short do52
 33324                                  if56:
 33325 000026D6 1E                      	push	ds
 33326 000026D7 06                      	push	es
 33327 000026D8 56                      	push	si
 33328 000026D9 57                      	push	di
 33329                                  
 33330 000026DA 0E                      	push	cs
 33331 000026DB 07                      	pop	es
 33332                                  
 33333                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 33334                                  	; 14/12/2022
 33335 000026DC C536[4E1E]              	lds	si,[rv_dword]
 33336 000026E0 BF[B646]                	mov	di,cntry_drv
 33337 000026E3 E8141F                  	call	move_asciiz
 33338                                  
 33339 000026E6 5F                      	pop	di
 33340 000026E7 5E                      	pop	si
 33341 000026E8 07                      	pop	es
 33342 000026E9 1F                      	pop	ds
 33343                                  en56:
 33344 000026EA EBBC                    	jmp	short do52
 33345                                  sr52:
 33346                                  	; 14/12/2022
 33347                                  	; ds = cs
 33348 000026EC 833E[AD1E]FF            	cmp	word [p_cntry_code],-1
 33349                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 33350 000026F1 7509                    	jne	short tryq_open
 33351 000026F3 E9C3FA                  	jmp	coff
 33352                                  
 33353                                  tryqbad:				;"invalid country code or code page"
 33354 000026F6 F9                      	stc
 33355 000026F7 BA[B34C]                	mov     dx,badcountry
 33356 000026FA EB79                    	jmp     tryqchkerr
 33357                                  
 33358                                  tryq_open:
 33359                                  	; 14/12/2022
 33360                                  	; ds = cs
 33361 000026FC 803E[B646]00            	cmp	byte [cntry_drv],0
 33362                                  	;cmp	byte [cs:cntry_drv],0
 33363 00002701 7405                    	je	short tryq_def
 33364 00002703 BA[B646]                	mov	dx,cntry_drv
 33365 00002706 EB03                    	jmp	short tryq_openit
 33366                                  
 33367                                  tryq_def:
 33368 00002708 BA[B846]                	mov	dx,cntry_root
 33369                                  tryq_openit:
 33370 0000270B B8003D                  	mov	ax,3D00h		;open a file
 33371 0000270E F9                      	stc
 33372 0000270F CD21                    	int	21h
 33373 00002711 7242                    	jc	short tryqfilebad	;open failure
 33374                                  
 33375                                  	; 14/12/2022
 33376                                  	; ds = cs
 33377 00002713 A3[5A03]                	mov	[cntryfilehandle],ax
 33378                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 33379 00002716 89C3                    	mov	bx,ax
 33380 00002718 A1[AD1E]                	mov	ax,[p_cntry_code]
 33381 0000271B 8B16[AF1E]              	mov	dx,[p_code_page]
 33382                                  	;mov	ax,[cs:p_cntry_code]
 33383                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 33384                                  	;mov	cx,[cs:memhi]
 33385 0000271F 8B0E[6203]              	mov	cx,[memhi]
 33386 00002723 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 33387                                  					;M023
 33388                                  	; 14/12/2022
 33389                                  	; ds = cs
 33390 00002727 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 33391                                  	;cmp	cx,[cs:ALLOCLIM]
 33392 0000272B 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 33393                                  
 33394 0000272D BE[B646]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 33395 00002730 803C00                  	cmp	byte [si],0 		;default path?
 33396 00002733 7502                    	jne	short tryq_set_for_dos
 33397                                  
 33398 00002735 46                      	inc	si
 33399 00002736 46                      	inc	si			;ds:si -> cntry_root
 33400                                  
 33401                                  tryq_set_for_dos:
 33402                                  	; 14/12/2022
 33403                                  	; ds = cs
 33404 00002737 C43E[7902]              	les	di,[sysi_country]
 33405                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 33406 0000273B 57                      	push	di			;save di
 33407                                  	;add	di,8
 33408 0000273C 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 33409 0000273F E8B81E                  	call	move_asciiz		;set the path to country.sys in dos.
 33410 00002742 5F                      	pop	di			;es:di -> country info tab again.
 33411                                  
 33412                                  	; 14/12/2022	
 33413 00002743 8B0E[6203]              	mov	cx,[memhi]
 33414                                  	;mov	cx,[cs:memhi]
 33415 00002747 8ED9                    	mov	ds,cx
 33416 00002749 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 33417 0000274B E8481D                  	call	setdoscountryinfo	;now do the job!!!
 33418                                  	; ds <> cs ; 14/12/2022
 33419 0000274E 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 33420                                  
 33421 00002750 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 33422 00002753 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 33423                                  
 33424                                  tryqfilebad:
 33425 00002755 0E                      	push	cs
 33426 00002756 07                      	pop	es
 33427 00002757 2E803E[B646]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 33428 0000275D 7405                    	je	short tryqdefbad
 33429                                  
 33430 0000275F BE[B646]                	mov	si,cntry_drv
 33431 00002762 EB03                    	jmp	short tryqbadload
 33432                                  
 33433                                  tryqdefbad:				;default file has been used.
 33434 00002764 BE[B846]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 33435                                  tryqbadload:
 33436 00002767 E89B1E                  	call	badload 		;ds will be restored to sysinit_seg
 33437                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33438                                  	; (SYSINIT:2A69h)
 33439 0000276A 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 33440                                  	;mov	cx,[cs:CONFBOT]
 33441                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33442                                  	;mov	cx,[cs:top_of_cdss]
 33443                                  	; 11/12/2022
 33444                                  	; ds = cs
 33445                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 33446 0000276E 8EC1                    	mov	es,cx			;restore es -> confbot.
 33447 00002770 EB13                    	jmp	short coffj4
 33448                                  
 33449                                  tryqmemory:
 33450 00002772 BA[F64C]                	mov	dx,insufmemory
 33451                                  tryqchkerr:
 33452                                  	;mov	cx,[cs:CONFBOT]
 33453                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33454                                  	;mov	cx,[cs:top_of_cdss]
 33455                                  	; 12/12/2022
 33456 00002775 0E                      	push	cs
 33457 00002776 1F                      	pop	ds
 33458                                  	; 31/12/2022 - Retro DOS v4.2
 33459 00002777 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 33460                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 33461 0000277B 8EC1                    	mov	es,cx			;restore es -> confbot seg
 33462                                  	;push	cs
 33463                                  	;pop	ds			;restore ds to sysinit_seg
 33464 0000277D 7306                    	jnc	short coffj4		;if no error,then exit
 33465                                  
 33466 0000277F E8AB1E                  	call	print			;else show error message
 33467 00002782 E80E03                  	call	error_line
 33468                                  coffj4:
 33469                                  	;mov	bx,[cs:cntryfilehandle]
 33470                                  	; 11/12/2022
 33471                                  	; ds = cs
 33472 00002785 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 33473 00002789 B43E                    	mov	ah,3Eh
 33474 0000278B CD21                    	int	21h			;close a file. don't care even if it fails.
 33475 0000278D E929FA                  	jmp	coff
 33476                                  
 33477                                  ;--------------------------------------------
 33478                                  
 33479                                  cntry_error:
 33480                                  
 33481                                  ;function: show "invalid country code or code page" messages,or
 33482                                  ;		"error in country command" depending on the error code
 33483                                  ;		in ax returned by sysparse;
 33484                                  ;in:	ax - error code
 33485                                  ;	ds - sysinitseg
 33486                                  ;	es - confbot
 33487                                  ;out:	show message.  dx destroyed.
 33488                                  
 33489 00002790 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 33490 00002793 7505                    	jne	short if64
 33491 00002795 BA[B34C]                	mov	dx,badcountry		;"invalid country code or code page"
 33492 00002798 EB03                    	jmp	short en64
 33493                                  if64:
 33494 0000279A BA[D94C]                	mov	dx,badcountrycom	;"error in contry command"
 33495                                  en64:
 33496 0000279D E88D1E                  	call	print
 33497                                  	;call	error_line
 33498                                  	;retn
 33499                                  	; 11/12/2022
 33500 000027A0 E9F002                  	jmp	error_line
 33501                                  
 33502                                  ;------------------------------------------------------------------------------
 33503                                  ; files command
 33504                                  ;------------------------------------------------------------------------------
 33505                                  
 33506                                  ;******************************************************************************
 33507                                  ; function: parse the parameters of files= command.			      *
 33508                                  ;									      *
 33509                                  ; input :								      *
 33510                                  ;	es:si -> parameters in command line.				      *
 33511                                  ; output:								      *
 33512                                  ;	variable files set.						      *
 33513                                  ;									      *
 33514                                  ; subroutines to be called:						      *
 33515                                  ;	sysinit_parse							      *
 33516                                  ; logic:								      *
 33517                                  ; {									      *
 33518                                  ;	set di points to files_parms;					      *
 33519                                  ;	set dx,cx to 0; 						      *
 33520                                  ;	while (end of command line)					      *
 33521                                  ;	{ sysinit_parse;						      *
 33522                                  ;	  if (no error) then						      *
 33523                                  ;	     files = result_val._$P_picked_val				      *
 33524                                  ;	  else								      *
 33525                                  ;	     error exit;						      *
 33526                                  ;	};								      *
 33527                                  ; };									      *
 33528                                  ;									      *
 33529                                  ;******************************************************************************
 33530                                  
 33531                                  tryf:
 33532 000027A3 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 33533 000027A6 7528                    	jne	short tryl
 33534                                  
 33535                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33536                                  ; (SYSINIT:2AABh)
 33537                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33538                                  ;%if 0
 33539                                  ;ifdef	MULTI_CONFIG
 33540 000027A8 E84A1A                  	call	query_user              ; query the user if config_cmd
 33541 000027AB 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 33542                                  ;endif
 33543                                  ;%endif ; 30/10/2022
 33544                                  
 33545                                  	; 14/12/2022
 33546                                  	; ds = cs
 33547                                  
 33548 000027AD BF[B11E]                	mov	di,files_parms
 33549 000027B0 31C9                    	xor	cx,cx
 33550                                  	; 03/01/2023
 33551                                  	;mov	dx,cx
 33552                                  do67:
 33553 000027B2 E88B02                  	call	sysinit_parse
 33554 000027B5 7303                    	jnc	short if67		; parse error
 33555                                  	;call	badparm_p		;  and show messages and end the search loop.
 33556                                  	;jmp	short sr67
 33557                                  	; 03/01/2023
 33558 000027B7 E98D01                  	jmp	badparm_p_coff
 33559                                  if67:
 33560 000027BA 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33561 000027BD 7408                    	je	short en67		; then end the $endloop
 33562                                  
 33563                                  	; 14/12/2022
 33564                                  	; ds = cs
 33565                                  	;;mov	al,[cs:rv_dword]
 33566                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33567                                  	;mov	[cs:p_files],al		; save it temporarily
 33568                                  	;mov	al,[rv_dword]
 33569 000027BF A0[4E1E]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 33570 000027C2 A2[D01E]                	mov	[p_files],al
 33571                                  
 33572 000027C5 EBEB                    	jmp	short do67
 33573                                  en67:
 33574                                  	; 14/12/2022
 33575                                  	; ds = cs
 33576 000027C7 A0[D01E]                	mov	al,[p_files]
 33577 000027CA A2[9D02]                	mov	[FILES],al	
 33578                                  	;mov	al,[cs:p_files]
 33579                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 33580                                  sr67:
 33581 000027CD E9E9F9                  	jmp	coff
 33582                                  
 33583                                  ; 04/04/2019 - Retro DOS v4.0
 33584                                  
 33585                                  ;------------------------------------------------------------------------------
 33586                                  ; lastdrive command
 33587                                  ;------------------------------------------------------------------------------
 33588                                  
 33589                                  ;******************************************************************************
 33590                                  ; function: parse the parameters of lastdrive= command. 		      *
 33591                                  ;									      *
 33592                                  ; input :								      *
 33593                                  ;	es:si -> parameters in command line.				      *
 33594                                  ; output:								      *
 33595                                  ;	set the variable num_cds.					      *
 33596                                  ;									      *
 33597                                  ; subroutines to be called:						      *
 33598                                  ;	sysinit_parse							      *
 33599                                  ; logic:								      *
 33600                                  ; {									      *
 33601                                  ;	set di points to ldrv_parms;					      *
 33602                                  ;	set dx,cx to 0; 						      *
 33603                                  ;	while (end of command line)					      *
 33604                                  ;	{ sysinit_parse;						      *
 33605                                  ;	  if (no error) then						      *
 33606                                  ;	     set num_cds to the returned value; 			      *
 33607                                  ;	  else	/*error exit*/						      *
 33608                                  ;	     error exit;						      *
 33609                                  ;	};								      *
 33610                                  ; };									      *
 33611                                  ;									      *
 33612                                  ;******************************************************************************
 33613                                  
 33614                                  tryl:
 33615 000027D0 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 33616 000027D3 7528                    	jne	short tryp
 33617                                  
 33618                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33619                                  ; (SYSINIT:2AE0h)
 33620                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33621                                  ;%if 0
 33622 000027D5 E81D1A                  	call	query_user      ; query the user if config_cmd
 33623 000027D8 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 33624                                  ;endif
 33625                                  ;%endif ; 30/10/2022
 33626                                  
 33627                                  	; 14/12/2022
 33628                                  	; ds = cs
 33629                                  
 33630 000027DA BF[081F]                	mov	di,ldrv_parms
 33631 000027DD 31C9                    	xor	cx,cx
 33632                                  	; 03/01/2023
 33633                                  	;mov	dx,cx
 33634                                  do73:
 33635 000027DF E85E02                  	call	sysinit_parse
 33636 000027E2 7303                    	jnc	short if73	; parse error
 33637                                  	;call	badparm_p	;  and show messages and end the search loop.
 33638                                  	;jmp	short sr73
 33639                                  	; 03/01/2023
 33640 000027E4 E96001                  	jmp	badparm_p_coff
 33641                                  if73:
 33642 000027E7 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 33643 000027EA 7408                    	je	short en73	; then end the $endloop
 33644                                  
 33645                                  	; 14/12/2022
 33646                                  	; ds = cs
 33647                                  	;;mov	al,[cs:rv_dword]
 33648                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 33649                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 33650                                  
 33651                                  	;mov	al,[rv_dword]
 33652 000027EC A0[4E1E]                	mov	al,[rv_byte]
 33653 000027EF A2[1C1F]                	mov	[p_ldrv],al
 33654                                  
 33655 000027F2 EBEB                    	jmp	short do73
 33656                                  en73:
 33657                                  	; 14/12/2022
 33658                                  	; ds = cs
 33659 000027F4 A0[1C1F]                	mov	al,[p_ldrv]
 33660 000027F7 A2[A002]                	mov	[NUM_CDS],al
 33661                                  	;mov	al,[cs:p_ldrv]
 33662                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 33663                                  sr73:
 33664 000027FA E9BCF9                  	jmp	coff
 33665                                  
 33666                                  ;--------------------------------------------------------------------------
 33667                                  ; setting drive parameters
 33668                                  ;--------------------------------------------------------------------------
 33669                                  
 33670                                  tryp:
 33671 000027FD 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 33672 00002800 7516                    	jne	short tryk
 33673                                  
 33674                                  ; 31/12/2022 - Retro DOS v4.2
 33675                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33676                                  ;%if 0
 33677                                  ;ifdef	MULTI_CONFIG
 33678 00002802 E8F019                  	call	query_user      ; query the user if config_cmd
 33679 00002805 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 33680                                  ;endif
 33681                                  ;%endif ; 30/10/2022
 33682                                  
 33683 00002807 E8D40E                  	call	parseline
 33684 0000280A 7209                    	jc	short trypbad
 33685 0000280C E8ED0D                  	call	setparms
 33686 0000280F E82F0E                  	call	diddleback
 33687                                  
 33688                                  ; No error check here, because setparms and diddleback have no error 
 33689                                  ; returns, and setparms as coded now can return with carry set. 
 33690                                  ;       jc	short trypbad
 33691                                  
 33692                                  	; 12/12/2022
 33693                                  	; cf = 0
 33694                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33695                                  	;jc	short trypbad
 33696                                  	
 33697 00002812 E9A4F9                  	jmp	coff
 33698                                  trypbad:
 33699 00002815 E94702                  	jmp	badop
 33700                                  
 33701                                  ;--------------------------------------------------------------------------
 33702                                  ; setting internal stack parameters
 33703                                  ; stacks=m,n where
 33704                                  ;	m is the number of stacks (range 8 to 64,default 9)
 33705                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 33706                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 33707                                  ;	any combinations that are not within the specified limits will
 33708                                  ;	result in "unrecognized command" error.
 33709                                  ;--------------------------------------------------------------------------
 33710                                  
 33711                                  ;**************************************************************************
 33712                                  ;									  *
 33713                                  ; function: parse the parameters of stacks= command.			  *
 33714                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 33715                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 33716                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 33717                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 33718                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 33719                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 33720                                  ;	    (or if "0,0" pair has been entered.)			  *
 33721                                  ; input :								  *
 33722                                  ;	es:si -> parameters in command line.				  *
 33723                                  ; output:								  *
 33724                                  ;	set the variables stack_count,stack_size.			  *
 33725                                  ;									  *
 33726                                  ; subroutines to be called:						  *
 33727                                  ;	sysinit_parse							  *
 33728                                  ; logic:								  *
 33729                                  ; {									  *
 33730                                  ;	set di points to stks_parms;					  *
 33731                                  ;	set dx,cx to 0; 						  *
 33732                                  ;	while (end of command line)					  *
 33733                                  ;	{ sysinit_parse;						  *
 33734                                  ;	  if (no error) then						  *
 33735                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 33736                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 33737                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 33738                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 33739                                  ;	     }								  *
 33740                                  ;	  else	/*error exit*/						  *
 33741                                  ;	     error exit;						  *
 33742                                  ;	};								  *
 33743                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 33744                                  ;	if o.k.,then set stack_count,stack_size;			  *
 33745                                  ;	 else error_exit;						  *
 33746                                  ; };									  *
 33747                                  ;**************************************************************************
 33748                                  
 33749                                  tryk:
 33750                                          ;if      stacksw
 33751                                  
 33752 00002818 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 33753 0000281B 7402                    	je	short do_tryk
 33754                                  skip_it4:
 33755 0000281D EB79                    	jmp	short trys	; 15/12/2022
 33756                                  do_tryk:
 33757                                  
 33758                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33759                                  ; (SYSINIT:2B33h)
 33760                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33761                                  ;%if 0
 33762                                  ;ifdef	MULTI_CONFIG
 33763 0000281F E8D319                         call	query_user              ; query the user if config_cmd
 33764 00002822 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 33765                                  ;endif
 33766                                  ;%endif	; 30/10/2022
 33767                                  
 33768                                  	; 14/12/2022
 33769                                  	; ds = cs
 33770                                  
 33771 00002824 BF[1D1F]                	mov	di,stks_parms
 33772 00002827 31C9                    	xor	cx,cx
 33773                                  	; 03/01/2023
 33774                                  	;mov	dx,cx
 33775                                  do79:
 33776 00002829 E81402                  	call	sysinit_parse
 33777 0000282C 730B                    	jnc	short if79		; parse error
 33778                                  
 33779 0000282E BA[654D]                	mov	dx,badstack		; "invalid stack parameter"
 33780 00002831 E8F91D                  	call	print			;  and show messages and end the search loop.
 33781 00002834 E85C02                  	call	error_line
 33782                                  	;jmp	sr79
 33783                                  	; 11/12/2022
 33784 00002837 EB39                    	jmp	short sr79
 33785                                  if79:
 33786 00002839 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33787 0000283C 7412                    	je	short en79		; then end the $endloop
 33788                                  
 33789                                  	; 14/12/2022
 33790                                  	; ds = cs
 33791                                  
 33792                                  	;;mov	ax,[cs:rv_dword]
 33793                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33794                                  	;mov	ax,[rv_dword]
 33795 0000283E A1[4E1E]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33796                                  
 33797 00002841 83F901                  	cmp	cx,1
 33798 00002844 7505                    	jne	short if83
 33799                                  
 33800                                  	; 14/12/2022
 33801                                  	;mov	[cs:p_stack_count],ax
 33802                                  	;jmp	short en83
 33803 00002846 A3[521F]                	mov	[p_stack_count],ax
 33804 00002849 EBDE                    	jmp	short do79
 33805                                  if83:
 33806                                  	; 14/12/2022
 33807                                  	;mov	[cs:p_stack_size],ax
 33808 0000284B A3[541F]                	mov	[p_stack_size],ax
 33809                                  en83:
 33810 0000284E EBD9                    	jmp	short do79
 33811                                  en79:
 33812                                  	; 14/12/2022
 33813                                  	; ds = cs
 33814 00002850 A1[521F]                	mov	ax,[p_stack_count]
 33815 00002853 09C0                    	or	ax,ax
 33816 00002855 741E                    	jz	short if87		
 33817                                  
 33818                                  	; 14/12/2022
 33819                                  	;cmp	word [p_stack_count],0
 33820                                  	;;cmp	word [cs:p_stack_count],0
 33821                                  	;je	short if87
 33822                                  
 33823                                  	; 14/12/2022
 33824 00002857 83F808                  	cmp	ax, mincount ; 8
 33825                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 33826                                  	; 15/12/2022
 33827 0000285A 721F                    	jb	short en87
 33828 0000285C 833E[541F]20            	cmp	word [p_stack_size],minsize ; 32
 33829                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 33830                                  	; 15/12/2022
 33831 00002861 7218                    	jb	short en87
 33832                                  if94:
 33833                                  	; 14/12/2022
 33834                                  	; ds = cs
 33835                                  	; ax = [p_stack_count]
 33836                                  	;mov	ax,[p_stack_count]
 33837                                  	;;mov	ax,[cs:p_stack_count]
 33838 00002863 A3[8A02]                	mov	[stack_count],ax
 33839                                  	;mov	[cs:stack_count],ax
 33840                                  	;mov	ax,[cs:p_stack_size]
 33841 00002866 A1[541F]                	mov	ax,[p_stack_size]
 33842                                  	;mov	[cs:stack_size],ax
 33843 00002869 A3[8C02]                	mov	[stack_size],ax
 33844                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33845 0000286C C706[8E02]FFFF          	mov	word [stack_addr],-1
 33846                                  sr79:
 33847 00002872 E944F9                  	jmp	coff
 33848                                  
 33849                                  if87:
 33850                                  	; 14/12/2022
 33851 00002875 3906[541F]              	cmp	[p_stack_size],ax ; 0
 33852 00002879 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 33853                                  	;cmp	word [cs:p_stack_size],0
 33854                                  	;je	short if94
 33855                                  en87:
 33856                                  	; 15/12/2022
 33857                                  	; ([p_stack_count] is invalid, use default values)
 33858                                  	; 14/12/2022
 33859                                  	; ds = cs
 33860 0000287B C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 33861 00002881 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 33862 00002887 C706[8E02]0000          	mov	word [stack_addr],0
 33863                                  	;mov	word [cs:stack_count],defaultcount ; 9
 33864                                  	;				; reset to default value.
 33865                                  	;mov	word [cs:stack_size],defaultsize ; 128
 33866                                  	;mov	word [cs:stack_addr],0
 33867                                  
 33868 0000288D BA[654D]                	mov	dx,badstack
 33869 00002890 E89A1D                  	call	print
 33870 00002893 E8FD01                  	call	error_line
 33871 00002896 EBDA                    	jmp	short sr79
 33872                                  
 33873                                  ; 15/12/2022
 33874                                  %if 0
 33875                                  	mov	di,stks_parms
 33876                                  	xor	cx,cx
 33877                                  	; 03/01/2023
 33878                                  	;mov	dx,cx
 33879                                  do79:
 33880                                  	call	sysinit_parse
 33881                                  	jnc	short if79		; parse error
 33882                                  
 33883                                  	mov	dx,badstack		; "invalid stack parameter"
 33884                                  	call	print			;  and show messages and end the search loop.
 33885                                  	call	error_line
 33886                                  	;jmp	sr79
 33887                                  	; 11/12/2022
 33888                                  	jmp	short sr79
 33889                                  if79:
 33890                                  	cmp	ax,_$P_RC_EOL		; end of line?
 33891                                  	je	short en79		; then end the $endloop
 33892                                  
 33893                                  	;mov	ax,[cs:rv_dword]
 33894                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33895                                  	cmp	cx,1
 33896                                  	jne	short if83
 33897                                  
 33898                                  	mov	[cs:p_stack_count],ax
 33899                                  	jmp	short en83
 33900                                  if83:
 33901                                  	mov	[cs:p_stack_size],ax
 33902                                  en83:
 33903                                  	jmp	short do79
 33904                                  en79:
 33905                                  	cmp	word [cs:p_stack_count],0
 33906                                  	je	short if87
 33907                                  
 33908                                  	cmp	word [cs:p_stack_count],mincount ; 8
 33909                                  	jb	short ll88
 33910                                  	cmp	word [cs:p_stack_size],minsize ; 32
 33911                                  	jnb	short if88
 33912                                  ll88:
 33913                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33914                                  if88:
 33915                                  	jmp	short en87
 33916                                  
 33917                                  	; 11/12/2022
 33918                                  if94:
 33919                                  	mov	ax,[cs:p_stack_count]
 33920                                  	mov	[cs:stack_count],ax
 33921                                  	mov	ax,[cs:p_stack_size]
 33922                                  	mov	[cs:stack_size],ax
 33923                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33924                                  sr79:
 33925                                  	jmp	coff
 33926                                  
 33927                                  if87:
 33928                                  	cmp	word [cs:p_stack_size],0
 33929                                  	je	short en87
 33930                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33931                                  en87:
 33932                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 33933                                  	jne	short if94
 33934                                  
 33935                                  	mov	word [cs:stack_count],defaultcount ; 9
 33936                                  					; reset to default value.
 33937                                  	mov	word [cs:stack_size],defaultsize ; 128
 33938                                  	mov	word [cs:stack_addr],0
 33939                                  
 33940                                  	mov	dx,badstack
 33941                                  	call	print
 33942                                  	call	error_line
 33943                                  	jmp	short sr79
 33944                                  
 33945                                  %endif
 33946                                  
 33947                                  ; 11/12/2022
 33948                                  %if 0 
 33949                                  if94:
 33950                                  	mov	ax,[cs:p_stack_count]
 33951                                  	mov	[cs:stack_count],ax
 33952                                  	mov	ax,[cs:p_stack_size]
 33953                                  	mov	[cs:stack_size],ax
 33954                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33955                                  sr79:
 33956                                  	jmp	coff
 33957                                  %endif
 33958                                  	;endif
 33959                                  
 33960                                  ;------------------------------------------------------------------------
 33961                                  ; shell command
 33962                                  ;------------------------------------------------------------------------
 33963                                  
 33964                                  trys:
 33965 00002898 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 33966 0000289B 755A                    	jne	short tryx
 33967                                  
 33968                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33969                                  ; (SYSINIT:2BE1h)
 33970                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33971                                  ;%if 0
 33972                                  ;ifdef	MULTI_CONFIG
 33973 0000289D E85519                  	call	query_user              ; query the user if config_cmd
 33974 000028A0 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 33975                                  	; 14/04/2024
 33976                                  	; ds = cs
 33977                                  	;mov	byte [cs:newcmd],1
 33978 000028A2 C606[0347]01            	mov	byte [newcmd],1
 33979                                  ;endif
 33980                                  ;%endif ; 30/10/2022
 33981                                  
 33982                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 33983                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33984                                  	;mov	byte [cs:command_line+1],0
 33985                                  	; 15/12/2022
 33986                                  	; ds = cs
 33987                                  	; 08/09/2023
 33988                                  	;mov	byte [command_line+1],0
 33989 000028A7 C706[9447]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 33990                                  
 33991 000028AD BF[0747]                        mov     di,commnd+1		; we already have the first char
 33992 000028B0 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 33993                                  storeshell:
 33994 000028B3 E8D21A                  	call	getchr
 33995 000028B6 08C0                            or      al,al                   ; this is the normal case: "organize"
 33996 000028B8 741C                            jz	short getshparms	; put a ZERO right after the filename
 33997                                  
 33998 000028BA 3C20                            cmp     al," "                  ; this may happen if there are no args
 33999 000028BC 7209                            jb	short endofshell	; I suppose...
 34000 000028BE 8805                    	mov	[di],al
 34001 000028C0 47                      	inc	di
 34002                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 34003                                          ;jb	short storeshell	; commnd (the filename)
 34004                                          ;jmp	short endofshell
 34005                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34006                                  	;jmp	short storeshell
 34007                                  	; 03/01/2023
 34008 000028C1 81FF[4547]              	cmp	di,commnd+63		; this makes sure we don't overflow
 34009 000028C5 72EC                            jb	short storeshell	; commnd (the filename)
 34010                                  	;jmp	short endofshell
 34011                                  
 34012                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34013                                  ;getshparms:
 34014                                  ;	mov     byte [di],0		; zero-terminate the filename
 34015                                  ;	mov     di,command_line+1	; prepare to process the command-line
 34016                                  ;
 34017                                  ;parmloop:
 34018                                  ;	call	getchr
 34019                                  ;	cmp	al," "
 34020                                  ;	jb	short endofparms
 34021                                  ;	mov	[di],al
 34022                                  ;	inc	di
 34023                                  ;	cmp     di,command_line+126
 34024                                  ;	jb	short parmloop
 34025                                  ;endofparms:
 34026                                  ;	mov     cx,di
 34027                                  ;	sub     cx,command_line+1
 34028                                  ;	mov     [cs:command_line],cl
 34029                                  ;
 34030                                  ;endofshell:
 34031                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 34032                                  ;					; the command-line as the case may be)
 34033                                  ;skipline:
 34034                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34035                                  ;       je	short endofline		; the line: watch for ever-present LF
 34036                                  ;call	getchr
 34037                                  ;       jnc	short skipline		; keep it up as long as there are chars
 34038                                  ;
 34039                                  ;endofline:
 34040                                  ;       jmp     conflp
 34041                                  
 34042                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34043                                  endofshell:
 34044 000028C7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 34045                                  					; the command-line as the case may be)
 34046                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34047                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34048                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 34049                                  	;call	getchr
 34050                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34051 000028CA 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34052 000028CC 7405                    	je	short endofline		; the line: watch for ever-present LF
 34053 000028CE E8B71A                  	call	getchr
 34054                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 34055                                  	; (SYSINIT:2C3Ah)
 34056 000028D1 73F7                    	jnb	short skipline
 34057                                  	
 34058                                  endofline:
 34059 000028D3 E98CF8                  	jmp     conflp
 34060                                  
 34061                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34062                                  getshparms:
 34063                                  	; 18/12/2022
 34064                                  	; al = 0
 34065 000028D6 8805                    	mov	[di],al ; 0
 34066                                  	;mov	byte [di],0		; zero-terminate the filename
 34067 000028D8 BF[9547]                	mov     di,command_line+1	; prepare to process the command-line
 34068                                  parmloop:
 34069 000028DB E8AA1A                  	call	getchr
 34070 000028DE 3C20                    	cmp	al," " ; 20h
 34071                                  	;jb	short endofshell
 34072                                  	; 03/01/2023
 34073 000028E0 7209                    	jb	short endofparms
 34074                                  
 34075 000028E2 8805                    	mov	[di],al
 34076 000028E4 47                      	inc	di
 34077                                  	;jmp	short parmloop
 34078                                  	; 03/01/2023 - Retro DOS v4.2
 34079 000028E5 81FF[1248]              	cmp     di,command_line+126
 34080 000028E9 72F0                    	jb	short parmloop
 34081                                  
 34082                                  	; 03/01/2023 - Retro DOS v4.2
 34083                                  endofparms:
 34084 000028EB 89F9                    	mov	cx,di
 34085 000028ED 81E9[9547]              	sub	cx,command_line+1
 34086                                  	;mov	[cs:command_line],cl
 34087                                  	; 03/01/2023
 34088 000028F1 880E[9447]              	mov	[command_line],cl
 34089 000028F5 EBD0                    	jmp	short endofshell
 34090                                  
 34091                                  ;------------------------------------------------------------------------
 34092                                  ; fcbs command
 34093                                  ;------------------------------------------------------------------------
 34094                                  
 34095                                  ;************************************************************************
 34096                                  ; function: parse the parameters of fcbs= command.			*
 34097                                  ;									*
 34098                                  ; input :								*
 34099                                  ;	es:si -> parameters in command line.				*
 34100                                  ; output:								*
 34101                                  ;	set the variables fcbs,keep.					*
 34102                                  ;									*
 34103                                  ; subroutines to be called:						*
 34104                                  ;	sysinit_parse							*
 34105                                  ; logic:								*
 34106                                  ; {									*
 34107                                  ;	set di points to fcbs_parms;					*
 34108                                  ;	set dx,cx to 0; 						*
 34109                                  ;	while (end of command line)					*
 34110                                  ;	{ sysparse;							*
 34111                                  ;	  if (no error) then						*
 34112                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 34113                                  ;		   fcbs = result_val._$P_picked_val;			*
 34114                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 34115                                  ;		   keep = result_val._$P_picked_val;			*
 34116                                  ;	     }								*
 34117                                  ;	  else	/*error exit*/						*
 34118                                  ;	     error exit;						*
 34119                                  ;	};								*
 34120                                  ; };									*
 34121                                  ;************************************************************************
 34122                                  
 34123                                  tryx:
 34124 000028F7 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 34125                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34126 000028FA 7534                    	jne	short try1
 34127                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34128                                  	;jne	short tryy	; comment command
 34129                                  
 34130                                  ; 31/12/2022 - Retro DOS v4.2
 34131                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34132                                  ;%if 0
 34133                                  ;ifdef	MULTI_CONFIG
 34134 000028FC E8F618                  	call	query_user      ; query the user if config_cmd
 34135 000028FF 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 34136                                  ;endif
 34137                                  ;%endif ; 30/10/2022
 34138                                  
 34139 00002901 BF[D11E]                	mov	di,fcbs_parms
 34140 00002904 31C9                    	xor	cx,cx
 34141                                  	; 03/01/2023
 34142                                  	;mov	dx,cx
 34143                                  do98:
 34144 00002906 E83701                  	call	sysinit_parse
 34145                                          ; 03/01/2023
 34146                                  	;jnc	short if98	; parse error
 34147                                          ;call	badparm_p	;  and show messages and end the search loop.
 34148                                  	;jmp	short sr98
 34149                                  	;------------------------
 34150                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34151 00002909 723C                    	jc	short badparm_p_coff
 34152                                  if98:
 34153 0000290B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34154 0000290E 7412                    	je	short en98	; then end the $endloop
 34155                                  
 34156                                  	;;mov	al,[cs:rv_dword]
 34157                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34158                                  	; 15/12/2022
 34159                                  	; ds = cs
 34160 00002910 A0[4E1E]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34161 00002913 83F901                  	cmp	cx,1		; the first positional?
 34162 00002916 7505                    	jne	short if102
 34163                                  	;mov	[cs:p_fcbs],al
 34164                                  	; 15/12/2022
 34165 00002918 A2[061F]                	mov	[p_fcbs],al
 34166                                  	;jmp	short en102
 34167 0000291B EBE9                    	jmp	short do98
 34168                                  if102:
 34169                                  	;mov	[cs:p_keep],al
 34170                                  	; 15/12/2022
 34171 0000291D A2[071F]                	mov	[p_keep],al
 34172                                  en102:
 34173 00002920 EBE4                    	jmp	short do98
 34174                                  en98:
 34175                                  	; 15/12/2022
 34176                                  	; ds = cs
 34177 00002922 A0[061F]                	mov	al,[p_fcbs]
 34178 00002925 A2[9E02]                	mov	[FCBS],al
 34179 00002928 C606[9F02]00            	mov	byte [KEEP],0
 34180                                  	;mov	al,[cs:p_fcbs]	 ; M017
 34181                                  	;mov	[cs:FCBS],al	 ; M017
 34182                                  	;mov	byte [cs:KEEP],0 ; M017
 34183                                  sr98:
 34184 0000292D E989F8                  	jmp	coff
 34185                                  
 34186                                  ; 31/12/2022 - Retro DOS v4.2
 34187                                  %if 0
 34188                                  
 34189                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34190                                  ;-------------------------------------------------------------------------
 34191                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34192                                  ;		line number
 34193                                  ;-------------------------------------------------------------------------
 34194                                  
 34195                                  tryy:
 34196                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34197                                  	jne	short try0
 34198                                  
 34199                                  donothing:
 34200                                  	; 15/12/2022
 34201                                  	; ds = cs
 34202                                  	dec	word [chrptr]
 34203                                  	inc	word [count]
 34204                                  	; 02/11/2022
 34205                                  	;dec	word [cs:chrptr]
 34206                                  	;inc	word [cs:count]
 34207                                  
 34208                                  	jmp	coff
 34209                                  
 34210                                  ;------------------------------------------------------------------------
 34211                                  ; rem command
 34212                                  ;------------------------------------------------------------------------
 34213                                  
 34214                                  try0:				; do nothing with this line.
 34215                                  	cmp     ah,CONFIG_REM ; '0'
 34216                                  	je	short donothing
 34217                                  
 34218                                  %endif
 34219                                  
 34220                                  ; 07/04/2019 - Retro DOS v4.0
 34221                                  
 34222                                  ;-----------------------------------------------------------------------
 34223                                  ; switches command
 34224                                  ;-----------------------------------------------------------------------
 34225                                  
 34226                                  ;***********************************************************************
 34227                                  ;								       *
 34228                                  ; function: parse the option switches specified.		       *
 34229                                  ; note - this command is intended for the future use also.	       *
 34230                                  ; when we need to set system data flag,use this command.	       *
 34231                                  ;								       *
 34232                                  ; input :							       *
 34233                                  ;	es:si -> parameters in command line.			       *
 34234                                  ; output:							       *
 34235                                  ;	p_swit_k set if /k option chosen.			       *
 34236                                  ;								       *
 34237                                  ; subroutines to be called:					       *
 34238                                  ;	sysinit_parse						       *
 34239                                  ; logic:							       *
 34240                                  ; {								       *
 34241                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 34242                                  ;	set dx,cx to 0; 					       *
 34243                                  ;	while (end of command line)				       *
 34244                                  ;	{ sysinit_parse;					       *
 34245                                  ;	  if (no error) then					       *
 34246                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 34247                                  ;		    p_swit_k = 1				       *
 34248                                  ;	       endif						       *
 34249                                  ;	  else {show error message;error exit}			       *
 34250                                  ;	};							       *
 34251                                  ; };								       *
 34252                                  ;								       *
 34253                                  ;***********************************************************************
 34254                                  
 34255                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 34256                                  
 34257                                  try1:
 34258 00002930 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 34259 00002933 7403                    	je	short do_try1	; switches= command entered?
 34260                                  skip_it5:
 34261                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34262                                  	; (SYSINIT:2C8Ah)
 34263 00002935 E98E00                  	jmp	tryv
 34264                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34265                                  	;jmp	tryz
 34266                                  
 34267                                  do_try1:
 34268                                  
 34269                                  ; 31/12/2022 - Retro DOS v4.2
 34270                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34271                                  ;%if 0
 34272                                  ;ifdef	MULTI_CONFIG
 34273 00002938 E8BA18                  	call	query_user      ; query the user if config_cmd
 34274 0000293B 72F8                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 34275                                  ;endif
 34276                                  ;%endif ; 30/10/2022
 34277                                  
 34278 0000293D BF[6B1F]                	mov	di,swit_parms
 34279 00002940 31C9                    	xor	cx,cx
 34280                                  	; 03/01/2023
 34281                                  	;mov	dx,cx
 34282                                  do110:
 34283 00002942 E8FB00                  	call	sysinit_parse
 34284 00002945 7306                    	jnc	short if110	; parse error
 34285                                  	;call	badparm_p	;  and show messages and end the search loop.
 34286                                  	;jmp	short sr110
 34287                                  	; -----------------------
 34288                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34289                                  badparm_p_coff:
 34290 00002947 E82101                  	call	badparm_p
 34291 0000294A E96CF8                  	jmp	coff
 34292                                  	;------------------------
 34293                                  if110:
 34294 0000294D 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34295 00002950 743C                    	je	short en110	; then jmp to $endloop for semantic check
 34296                                  
 34297                                  	; 15/12/2022
 34298                                  	; ds = cs
 34299                                  	;;cmp	word [cs:result_val_swoff],swit_k
 34300                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34301 00002952 813E[4C1E][891F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34302 00002958 7507                    	jne	short if115	;				;M059
 34303                                  	; 15/12/2022
 34304 0000295A C606[C81F]01            	mov	byte [p_swit_k],1
 34305                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 34306 0000295F EBE1                    	jmp	short do110
 34307                                  if115:	
 34308                                  	; 15/12/2022							;M059
 34309                                  	;;cmp	word [cs:result_val_swoff],swit_t
 34310                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 34311 00002961 813E[4C1E][AD1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 34312                                  	;jne	short if116					;M059 M063
 34313                                  	; 14/04/2024
 34314                                  	;;;
 34315 00002967 7507                    	jne	short if118  ; (PCDOS 7.1 IBMBIO.COM)
 34316                                  	;;; 
 34317                                  	; 15/12/2022
 34318 00002969 C606[C91F]01            	mov	byte [p_swit_t],1
 34319                                  	;mov	byte [cs:p_swit_t],1				;M059
 34320 0000296E EBD2                    	jmp	short do110					;M059
 34321                                  
 34322                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34323                                  	;;;
 34324                                  if118:
 34325                                  	;;cmp	word [cs:result_val_swoff],swit_i ; offset "/I"
 34326                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34327 00002970 813E[4C1E][C51F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34328 00002976 7507                    	jne	short if116
 34329                                  	;mov	byte [cs:p_swit_i],1	; set the flag
 34330 00002978 C606[CB1F]01            	mov	byte [p_swit_i],1
 34331 0000297D EBC3                    	jmp     short do110
 34332                                  	;;;
 34333                                  if116:
 34334                                  	; 15/12/2022
 34335                                  	;;cmp	word [cs:result_val_swoff],swit_w
 34336                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 34337 0000297F 813E[4C1E][B91F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 34338 00002985 75BB                    	jne	short do110					;M063
 34339                                  	; 15/12/2022
 34340 00002987 C606[CA1F]01            	mov	byte [p_swit_w],1
 34341                                  	;mov	byte [cs:p_swit_w],1				;M063
 34342 0000298C EBB4                    	jmp	short do110					;M063
 34343                                  en110:
 34344                                  	; 15/12/2022
 34345                                  	; ds = cs
 34346 0000298E 803E[C81F]01            	cmp	byte [p_swit_k],1
 34347                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 34348 00002993 1E                      	push	ds
 34349                                  	;;mov	ax,Bios_Data
 34350                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 34351                                  	; 21/10/2022
 34352 00002994 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 34353 00002997 8ED8                    	mov	ds,ax
 34354 00002999 750A                    	jne	short if117
 34355                                  	; 14/04/2024
 34356 0000299B C606[7E04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 34357                                  				; BIOSDATA:047Eh for PCDOS 7.1 IBMBIO.COM
 34358 000029A0 C606[7F04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 34359                                  				; BIOSDATA:047Fh for PCDOS 7.1 IBMBIO.COM
 34360                                  if117:
 34361                                  	; 15/12/2022
 34362                                  	; ds <> cs
 34363 000029A5 2EA0[C91F]              	mov	al,[cs:p_swit_t]				;M059
 34364 000029A9 A2[8B04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 34365                                  		; 14/04/2024	; BIOSDATA:048Bh for PCDOS 7.1 IBMBIO.COM
 34366 000029AC 2E803E[CA1F]00          	cmp	byte [cs:p_swit_w],0				;M063
 34367 000029B2 740E                    	je	short skip_dos_flag				;M063
 34368 000029B4 06                      	push	es
 34369 000029B5 53                      	push	bx
 34370 000029B6 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 34371 000029B8 CD21                    	int	21h						;M063
 34372                                  			; DOS - 2+ internal - GET LIST OF LISTS
 34373                                  			; Return: ES:BX -> DOS list of lists
 34374                                  	;or	bytes [es:86h],2
 34375 000029BA 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 34376 000029C0 5B                      	pop	bx
 34377 000029C1 07                      	pop	es
 34378                                  skip_dos_flag:							;M063
 34379 000029C2 1F                      	pop	ds
 34380                                  sr110:
 34381 000029C3 E9F3F7                  	jmp	coff
 34382                                  
 34383                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34384                                  ; (SYSINIT:2D14h)
 34385                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34386                                  ;%if 0
 34387                                  
 34388                                  tryv:
 34389                                  
 34390                                  ;ifdef	MULTI_CONFIG
 34391                                  ;------------------------------------------------------------------------
 34392                                  ; set command (as in "set var=value<cr/lf>")
 34393                                  ;------------------------------------------------------------------------
 34394                                  
 34395 000029C6 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 34396 000029C9 750F                    	jne	short tryn
 34397 000029CB E82718                  	call	query_user      ; query the user if config_cmd
 34398 000029CE 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 34399 000029D0 E81E14                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 34400 000029D3 73EE                    	jnc	short sr110	; no error
 34401                                  err:    
 34402 000029D5 E8BB00                  	call	error_line      ; whoops, display error in line XXX
 34403 000029D8 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 34404                                  
 34405                                  ;------------------------------------------------------------------------
 34406                                  ; numlock command (as in "numlock=on|off")
 34407                                  ;------------------------------------------------------------------------
 34408                                  tryn:
 34409 000029DA 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 34410                                  	;jne	short tryy
 34411                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34412 000029DD 750C                    	jne	short tryt
 34413                                  
 34414 000029DF E81318                  	call	query_user      ; query the user if config_cmd
 34415 000029E2 7238                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 34416 000029E4 E89F10                  	call	set_numlock
 34417 000029E7 72EC                    	jc	short err
 34418 000029E9 EBD8                    	jmp	short sr110	; all done
 34419                                  
 34420                                  ;endif	;MULTI_CONFIG
 34421                                  
 34422                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34423                                  ;------------------------------------------------------------------------
 34424                                  ; dosdata command
 34425                                  ;------------------------------------------------------------------------
 34426                                  tryt:
 34427                                  	;cmp	ah,54h ; 'T'
 34428 000029EB 80FC54                  	cmp	ah,CONFIG_DOSDATA ; 'T' ; PCDOS 7 new config cmd
 34429 000029EE 752C                    	jne	short tryy
 34430                                  
 34431 000029F0 E80218                  	call	query_user
 34432 000029F3 7227                    	jc	short tryy
 34433                                  
 34434 000029F5 BF[FB1F]                	mov	di,dosdata_parms
 34435 000029F8 31C9                    	xor	cx,cx
 34436                                  	; 14/04/2024 - Retro DOS v5.0
 34437                                  	;mov	dx,cx ; 0
 34438                                  do120:
 34439 000029FA E84300                  	call	sysinit_parse
 34440 000029FD 7303                    	jnc	short if120
 34441                                  
 34442                                  	;call	badparm_p
 34443                                  	;jmp	short en120
 34444                                  	; 14/04/2024 - Retro DOS v5.0
 34445 000029FF E945FF                  	jmp	badparm_p_coff
 34446                                  if120:
 34447                                  	;cmp	ax,0FFFFh
 34448 00002A02 83F8FF                  	cmp	ax,_$P_RC_EOL ; -1 ; end of line?
 34449 00002A05 7422                    	jz	short en120
 34450 00002A07 803E[4B1E]01            	cmp	byte [result_val_itag],1 ; tag 1 (UMB)
 34451                                  				; [result_val+_$P_Result_Blk.Item_Tag]
 34452 00002A0C 7507                     	jnz	short if121
 34453 00002A0E C606[6C03]01            	mov	byte [dosdata_umb],1 ; DOSDATA=UMB (1) NOUMB (0)
 34454                                  	;jmp	short sr120
 34455                                  	; 14/04/2024
 34456 00002A13 EBE5                    	jmp	short do120
 34457                                  if121:
 34458 00002A15 C606[6C03]00            	mov	byte [dosdata_umb],0 ; DOSDATA=UMB (1) NOUMB (0)
 34459                                  sr120:
 34460 00002A1A EBDE                    	jmp	short do120
 34461                                  	; 14/04/2024
 34462                                  ;en120:
 34463                                  	;jmp	coff
 34464                                  
 34465                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34466                                  ;-------------------------------------------------------------------------
 34467                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34468                                  ;		line number
 34469                                  ;-------------------------------------------------------------------------
 34470                                  
 34471                                  	; 31/12/2022
 34472                                  tryy:
 34473 00002A1C 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34474 00002A1F 750B                    	jne	short try0
 34475                                  
 34476                                  donothing:
 34477                                  	; 15/12/2022
 34478                                  	; ds = cs
 34479 00002A21 FF0E[5803]              	dec	word [chrptr]
 34480 00002A25 FF06[5403]              	inc	word [count]
 34481                                  	; 02/11/2022
 34482                                  	;dec	word [cs:chrptr]
 34483                                  	;inc	word [cs:count]
 34484                                  en120:		; 14/04/2024
 34485 00002A29 E98DF7                  	jmp	coff
 34486                                  
 34487                                  ;------------------------------------------------------------------------
 34488                                  ; rem command
 34489                                  ;------------------------------------------------------------------------
 34490                                  
 34491                                  try0:				; do nothing with this line.
 34492 00002A2C 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 34493 00002A2F 74F0                    	je	short donothing
 34494                                  
 34495                                  ;%endif	; 30/10/2022
 34496                                  
 34497                                  ; 30/10/2022
 34498                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 34499                                  
 34500                                  ;------------------------------------------------------------------------
 34501                                  ; bogus command
 34502                                  ;------------------------------------------------------------------------
 34503                                  
 34504                                  tryz:
 34505 00002A31 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 34506                                  	; 31/12/2022
 34507 00002A34 74EB                    	je	short donothing
 34508                                  	; 02/11/2022
 34509                                  	;je	short tryz_donothing
 34510                                  
 34511 00002A36 FF0E[5803]              	dec	word [chrptr]
 34512 00002A3A FF06[5403]              	inc	word [count]
 34513 00002A3E EB1F                    	jmp	short badop
 34514                                  
 34515                                  ; 31/12/2022
 34516                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34517                                  ;tryz_donothing:
 34518                                  ;	jmp	donothing
 34519                                  
 34520                                  ;------------------------------------------------------------------------------
 34521                                  
 34522                                  sysinit_parse:
 34523                                  
 34524                                  ;------------------------------------------------------------------------------
 34525                                  ;set up registers for sysparse
 34526                                  ;in)	es:si -> command line in confbot
 34527                                  ;	di -> offset of the parse control definition.
 34528                                  ;
 34529                                  ;out)	calls sysparse.
 34530                                  ;	carry will set if parse error.
 34531                                  ;	*** the caller should check the eol condition by looking at ax
 34532                                  ;	*** after each call.
 34533                                  ;	*** if no parameters are found,then ax will contain a error code.
 34534                                  ;	*** if the caller needs to look at the synomym@ of the result,
 34535                                  ;	***  the caller should use cs:@ instead of es:@.
 34536                                  ;	cx register should be set to 0 at the first time the caller calls this
 34537                                  ;	 procedure.
 34538                                  ;	ax - exit code
 34539                                  ;	bl - terminated delimeter code
 34540                                  ;	cx - new positional ordinal
 34541                                  ;	si - set to pase scanned operand
 34542                                  ;	dx - selected result buffer
 34543                                  ;------------------------------------------------------------------------------
 34544                                  
 34545                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34546                                  	; (SYSINIT:2D78h)
 34547                                  
 34548                                  	; 14/04/2024 - Retro DOS v5.0
 34549                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:32F3h)
 34550                                  
 34551                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34552                                  	; ds = cs
 34553 00002A40 8C06[A015]              	mov	[badparm_seg],es	;save the pointer to the parm
 34554 00002A44 8936[9E15]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 34555                                  
 34556                                  	; 24/10/2022
 34557 00002A48 06                      	push	es			;save es,ds
 34558 00002A49 1E                      	push	ds
 34559                                  
 34560 00002A4A 06                      	push	es
 34561 00002A4B 1F                      	pop	ds			;now ds:si -> command line
 34562                                  
 34563 00002A4C 0E                      	push	cs
 34564 00002A4D 07                      	pop	es			;now es:di -> control definition
 34565                                  
 34566                                  	; 09/09/2023
 34567                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 34568                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 34569                                  	
 34570                                  	;mov	dx,0
 34571                                  	; 04/01/2023
 34572 00002A4E 29D2                    	sub	dx,dx ; 0
 34573 00002A50 E8F5EB                  	call	SysParse
 34574                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 34575                                  	; 06/09/2023
 34576 00002A53 21C0                    	and	ax,ax
 34577                                  
 34578                                  ;**cas note: when zero true after cmp, carry clear
 34579                                  
 34580                                  	;je	short ll4
 34581                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 34582                                  	; 12/12/2022
 34583 00002A55 7405                    	je	short en4 ; cf=0
 34584 00002A57 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 34585                                  	;jne	short if4
 34586                                  	; 12/12/2022
 34587 00002A5A 7400                    	je	short en4 ; cf=0
 34588                                  	; 06/09/2023
 34589                                  	; cf=1
 34590                                  
 34591                                  ; 12/12/2022
 34592                                  ;ll4:
 34593                                  ;	; 12/12/2022
 34594                                  ;	; cf=0
 34595                                  ;	;clc
 34596                                  ;	jmp	short en4
 34597                                  
 34598                                  if4:
 34599                                  	; 24/10/2022
 34600                                  	; 06/09/2023 (cf=1)
 34601                                  	;stc
 34602                                  en4:
 34603 00002A5C 1F                      	pop	ds
 34604 00002A5D 07                      	pop	es
 34605 00002A5E C3                      	retn
 34606                                  
 34607                                  ; 11/12/2022
 34608                                  %if 0
 34609                                  
 34610                                  ;----------------------------------------------------------------------------
 34611                                  ;
 34612                                  ; procedure : badop_p
 34613                                  ;
 34614                                  ;             same thing as badop,but will make sure to set ds register back
 34615                                  ;             to sysinitseg and return back to the caller.
 34616                                  ;
 34617                                  ;----------------------------------------------------------------------------
 34618                                  
 34619                                  badop_p:
 34620                                  	push	cs
 34621                                  	pop	ds		;set ds to configsys seg.
 34622                                  	mov	dx,badopm
 34623                                  	call	print
 34624                                          ;call	error_line
 34625                                  	;retn
 34626                                  	; 11/12/2022
 34627                                  	jmp	error_line
 34628                                  
 34629                                  %endif
 34630                                  
 34631                                  ;----------------------------------------------------------------------------
 34632                                  ;
 34633                                  ; label : badop
 34634                                  ;
 34635                                  ;----------------------------------------------------------------------------
 34636                                  
 34637                                  badop:	
 34638 00002A5F BA[264C]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 34639 00002A62 E8C81B                  	call	print
 34640 00002A65 E82B00                  	call	error_line	;show "error in config.sys ..." .
 34641 00002A68 E94EF7                  	jmp	coff
 34642                                  
 34643                                  ;----------------------------------------------------------------------------
 34644                                  ;
 34645                                  ; procedure : badparm_p
 34646                                  ;
 34647                                  ;             show "bad command or parameters - xxxxxx"
 34648                                  ;             in badparm_seg,badparm_off -> xxxxx
 34649                                  ;
 34650                                  ;----------------------------------------------------------------------------
 34651                                  
 34652                                  	; 24/10/2022
 34653                                  badparm_p:
 34654                                  	; 11/12/2022
 34655                                  	; ds = cs
 34656                                  	; 11/12/2022
 34657                                  	;push	ds ; *
 34658 00002A6B 52                      	push	dx
 34659 00002A6C 56                      	push	si
 34660                                  
 34661                                  	; 11/12/2022
 34662                                  	; ds = cs
 34663                                  	;push	cs
 34664                                  	;pop	ds
 34665                                  
 34666 00002A6D BA[4D4C]                	mov	dx,badparm
 34667 00002A70 E8BA1B                  	call	print			; "bad command or parameters - "
 34668 00002A73 C536[9E15]              	lds	si,[badparm_ptr]
 34669                                  
 34670                                  ;	print "xxxx" until cr.
 34671                                  
 34672                                  do1:
 34673 00002A77 8A14                    	mov	dl,[si]			; get next character
 34674 00002A79 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 34675 00002A7C 7407                    	je	short en1		; exit loop if so
 34676                                  
 34677 00002A7E B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 34678 00002A80 CD21                    	int	21h			; display character
 34679 00002A82 46                      	inc	si			; next character
 34680 00002A83 EBF2                    	jmp	short do1
 34681                                  en1:
 34682 00002A85 0E                      	push	cs
 34683 00002A86 1F                      	pop	ds
 34684                                  
 34685 00002A87 BA[4A4C]                	mov	dx,crlfm
 34686 00002A8A E8A01B                  	call	print
 34687 00002A8D E80300                  	call	error_line
 34688                                  
 34689 00002A90 5E                      	pop	si
 34690 00002A91 5A                      	pop	dx
 34691                                  	; 11/12/2022
 34692                                  	;pop	ds ; *
 34693                                  badparmp_ret:
 34694 00002A92 C3                      	retn
 34695                                  
 34696                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34697                                  %if 0
 34698                                  
 34699                                  ;----------------------------------------------------------------------------
 34700                                  ;
 34701                                  ; procedure : getchr
 34702                                  ;
 34703                                  ;----------------------------------------------------------------------------
 34704                                  
 34705                                  	; 24/10/2022
 34706                                  getchr:
 34707                                  	; 12/12/2022
 34708                                  	;push	cx
 34709                                  	;mov	cx,[count]
 34710                                  	;jcxz	nochar
 34711                                  	; 12/12/2022
 34712                                  	cmp	word [count],1 
 34713                                  	jb	short nochar ; cf=1 ([count] = 0)
 34714                                  	
 34715                                  	mov	si,[chrptr]
 34716                                  	mov	al,[es:si]
 34717                                  	dec	word [count]
 34718                                  	inc	word [chrptr]
 34719                                  	; 12/12/202
 34720                                  	; cf=0
 34721                                  	;clc
 34722                                  ;get_ret:
 34723                                  	;pop	cx
 34724                                  	;retn
 34725                                  nochar: 
 34726                                  	; 12/12/2022
 34727                                  	; cf=1
 34728                                  	;stc
 34729                                  	;jmp	short get_ret
 34730                                  	
 34731                                  	retn
 34732                                  %endif
 34733                                  
 34734                                  ; 11/12/2022
 34735                                  %if 0
 34736                                  
 34737                                  ;----------------------------------------------------------------------------
 34738                                  ;
 34739                                  ; procedure : incorrect_order
 34740                                  ;
 34741                                  ;             show "incorrect order in config.sys ..." message.
 34742                                  ;
 34743                                  ;----------------------------------------------------------------------------
 34744                                  
 34745                                  incorrect_order:
 34746                                  	mov	dx,badorder
 34747                                  	call	print
 34748                                  	call	showlinenum
 34749                                  	retn
 34750                                  
 34751                                  %endif
 34752                                  
 34753                                  ;----------------------------------------------------------------------------
 34754                                  ;
 34755                                  ; procedure : error_line
 34756                                  ;
 34757                                  ;             show "error in config.sys ..." message.
 34758                                  ;
 34759                                  ;----------------------------------------------------------------------------
 34760                                  
 34761                                  	; 11/12/2022
 34762                                  	; 24/10/2022
 34763                                  error_line:
 34764                                  	; 11/12/2022
 34765                                  	; ds = cs
 34766                                  	;push	cs
 34767                                  	;pop	ds
 34768                                  
 34769 00002A93 BA[824D]                	mov	dx,errorcmd
 34770 00002A96 E8941B                  	call	print
 34771                                  	;call	showlinenum
 34772                                  	;retn
 34773                                  	; 11/12/2022
 34774                                  	;jmp	short shortlinemum
 34775                                  
 34776                                  ;----------------------------------------------------------------------------
 34777                                  ;
 34778                                  ; procedure : showlinenum
 34779                                  ;
 34780                                  ; convert the binary linecount to decimal ascii string in showcount
 34781                                  ; and display showcount at the current curser position.
 34782                                  ; in.) linecount
 34783                                  ;
 34784                                  ; out) the number is printed.
 34785                                  ;
 34786                                  ;----------------------------------------------------------------------------
 34787                                  
 34788                                  	; 11/12/2022
 34789                                  	; ds = cs
 34790                                  	; 24/10/2022
 34791                                  showlinenum:
 34792 00002A99 06                      	push	es
 34793                                  	; 11/12/2022
 34794                                  	;push	ds
 34795 00002A9A 57                      	push	di
 34796                                  
 34797 00002A9B 0E                      	push	cs
 34798 00002A9C 07                      	pop	es		; es=cs
 34799                                  
 34800                                  	; 11/12/2022
 34801                                  	;push	cs
 34802                                  	;pop	ds
 34803                                  
 34804 00002A9D BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 34805 00002AA0 B90A00                  	mov	cx,10		; decimal divide factor
 34806                                  	;mov	ax,[cs:linecount]
 34807                                  	; 11/12/2022
 34808 00002AA3 A1[AD02]                	mov	ax,[linecount]
 34809                                  sln_loop:
 34810                                  	; 11/12/2022
 34811 00002AA6 39C8                    	cmp	ax,cx ; < 10 ?
 34812                                  	;cmp	ax,10		; < 10?
 34813 00002AA8 720C                    	jb	short sln_last
 34814                                  
 34815 00002AAA 31D2                    	xor	dx,dx
 34816 00002AAC F7F1                    	div	cx	; cx = 10
 34817 00002AAE 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 34818 00002AB1 8815                    	mov	[di],dl
 34819 00002AB3 4F                      	dec	di
 34820 00002AB4 EBF0                    	jmp	short sln_loop
 34821                                  
 34822                                  sln_last:
 34823 00002AB6 0C30                    	or	al,30h	; "0"
 34824 00002AB8 8805                    	mov	[di],al
 34825 00002ABA 89FA                    	mov	dx,di
 34826 00002ABC E86E1B                  	call	print		; show it.
 34827 00002ABF 5F                      	pop	di
 34828                                  	; 11/12/2022
 34829                                  	;pop	ds
 34830 00002AC0 07                      	pop	es
 34831 00002AC1 C3                      	retn
 34832                                  
 34833                                  ; 07/04/2019 - Retro DOS v4.0
 34834                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 34835                                  
 34836                                  ;----------------------------------------------------------------------------
 34837                                  ;
 34838                                  ; procedure : ProcDOS
 34839                                  ;
 34840                                  ;	Process the result of DOS= parsing
 34841                                  ;
 34842                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 34843                                  ;				= 2 for DOS=LOW
 34844                                  ;				= 3 for DOS=UMB
 34845                                  ;				= 4 for DOS=NOUMB
 34846                                  ;----------------------------------------------------------------------------
 34847                                  
 34848                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 34849                                  	; (SYTSINIT:2AB5h)
 34850                                  ProcDOS:
 34851                                  	; 01/01/2023
 34852                                  	; ds = cs
 34853 00002AC2 30E4                    	xor	ah,ah
 34854                                  	;;mov	al,[cs:result_val_itag]
 34855                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 34856                                  	; 01/01/2023
 34857 00002AC4 A0[4B1E]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 34858 00002AC7 48                      	dec	ax
 34859 00002AC8 7415                    	jz	short pd_hi
 34860 00002ACA 48                      	dec	ax
 34861 00002ACB 740E                    	jz	short pd_lo
 34862 00002ACD 48                      	dec	ax
 34863 00002ACE 7405                    	jz	short pd_umb
 34864                                  	;;mov	byte [cs:DevUMB],0
 34865                                  	; 18/12/2022
 34866                                  	;mov	byte [cs:DevUMB],ah ; 0
 34867                                  	; 01/01/2023
 34868 00002AD0 8826[7520]              	mov	byte [DevUMB],ah ; 0
 34869 00002AD4 C3                      	retn
 34870                                  pd_umb:
 34871                                  	; 01/01/2023
 34872 00002AD5 C606[7520]FF            	mov	byte [DevUMB],0FFh
 34873                                  	;mov	byte [cs:DevUMB],0FFh
 34874 00002ADA C3                      	retn
 34875                                  pd_lo:
 34876                                  	; 01/01/2023
 34877 00002ADB A2[6C02]                	mov	[runhigh],al ; 0
 34878                                  	; 18/12/2022
 34879                                  	;mov	[cs:runhigh],al ; 0
 34880                                  	;;mov	byte [cs:runhigh],0
 34881 00002ADE C3                      	retn
 34882                                  pd_hi:
 34883                                  	; 01/01/2023
 34884 00002ADF C606[6C02]FF            	mov	byte [runhigh],0FFh
 34885                                  	;mov	byte [cs:runhigh],0FFh
 34886                                  limx:	; 11/12/2022
 34887 00002AE4 C3                      	retn
 34888                                  
 34889                                  ;----------------------------------------------------------------------------
 34890                                  ;
 34891                                  ; procedure : LieInt12Mem
 34892                                  ;
 34893                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 34894                                  ;		alloclim set to the limit of low memory.
 34895                                  ;
 34896                                  ;	Output : none
 34897                                  ;
 34898                                  ;	Changes the ROM BIOS variable which stores the total low memory
 34899                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 34900                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 34901                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 34902                                  ;	converted into Ks and stored in 40:13h
 34903                                  ;
 34904                                  ;----------------------------------------------------------------------------
 34905                                  
 34906                                  LieInt12Mem:
 34907                                  	; 11/12/2022
 34908                                  	; ds = cs
 34909 00002AE5 A1[A302]                	mov	ax,[ALLOCLIM]
 34910                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 34911                                  					; assuming that it is 3Com
 34912 00002AE8 E84200                  	call	IsIt3Com		; Is it 3Com driver?
 34913 00002AEB 740A                    	jz	short lim_set		; yes, lie to him differently
 34914                                  	; 13/05/2019
 34915                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 34916                                  	;je	short limx		; no, don't lie
 34917                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 34918                                  	; 11/12/2022
 34919                                  	; ds = cs
 34920 00002AED 803E[8420]00            	cmp	byte [DeviceHi],0
 34921 00002AF2 74F0                    	je	short limx
 34922 00002AF4 A1[6A20]                	mov	ax,[DevLoadEnd]
 34923                                  lim_set:
 34924                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34925                                  	; 11/12/2022
 34926                                  	;call	SetInt12Mem
 34927                                  ;limx:
 34928                                  	;retn
 34929                                  	
 34930                                  	;jmp	short SetInt12Mem 
 34931                                  
 34932                                  ;----------------------------------------------------------------------------
 34933                                  ;
 34934                                  ; procedure : SetInt12Mem
 34935                                  ;
 34936                                  ;	Input : AX = Memory size to be set (in paras)
 34937                                  ;	Output : none
 34938                                  ;
 34939                                  ;	Sets the variable 40:13 to the memory size passed in AX
 34940                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 34941                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 34942                                  ;	restoring the value of 40:13
 34943                                  ;
 34944                                  ;----------------------------------------------------------------------------
 34945                                  
 34946                                  	; 01/11/2022
 34947                                  SetInt12Mem:
 34948 00002AF7 1E                      	push	ds
 34949 00002AF8 BB4000                  	mov	bx,40h
 34950 00002AFB 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 34951 00002AFD 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 34952                                  	;mov	[cs:OldInt12Mem],bx	; save it
 34953 00002B01 B106                    	mov	cl,6
 34954 00002B03 D3E8                    	shr	ax,cl			; convert paras into Ks
 34955 00002B05 A31300                  	mov	[13h],ax		; Lie
 34956                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 34957 00002B08 1F                      	pop	ds
 34958                                  	; 14/04/2024
 34959                                  	; ds = cs
 34960 00002B09 891E[8820]              	mov	[OldInt12Mem],bx
 34961 00002B0D C606[8720]FF            	mov	byte [Int12Lied],0FFh
 34962                                  ;limx:
 34963 00002B12 C3                      	retn
 34964                                  
 34965                                  ;----------------------------------------------------------------------------
 34966                                  ;
 34967                                  ; procedure : TrueInt12Mem
 34968                                  ;
 34969                                  ;	Input : Int12Lied = 0 if we are not lying currently
 34970                                  ;			  = 0ffh if we are lying
 34971                                  ;		OldInt12Mem = Saved value of 40:13h
 34972                                  ;
 34973                                  ;	Output : none
 34974                                  ;
 34975                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 34976                                  ;	and resets the flag which indicates that we were lying
 34977                                  ;
 34978                                  ;----------------------------------------------------------------------------
 34979                                  
 34980                                  TrueInt12Mem:
 34981                                  	; 11/12/2022
 34982                                  	; ds = cs
 34983 00002B13 803E[8720]00            	cmp	byte [Int12Lied],0
 34984                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 34985                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 34986                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 34987 00002B18 7412                    	je	short timx		; no, we weren't
 34988                                  	; 18/12/2022
 34989 00002B1A B84000                  	mov	ax,40h
 34990 00002B1D 8826[8720]              	mov	[Int12Lied],ah ; 0
 34991                                  	;mov	byte [Int12Lied],0
 34992                                  	;mov	byte [cs:Int12Lied],0
 34993 00002B21 1E                      	push	ds
 34994                                  	;mov	ax,40h
 34995 00002B22 8ED8                    	mov	ds,ax
 34996 00002B24 2EA1[8820]              	mov	ax,[cs:OldInt12Mem]
 34997 00002B28 A31300                  	mov	[13h],ax		; restore INT 12 memory
 34998 00002B2B 1F                      	pop	ds
 34999                                  timx:
 35000 00002B2C C3                      	retn
 35001                                  
 35002                                  ;----------------------------------------------------------------------------
 35003                                  ;
 35004                                  ; procedure : IsIt3Com?
 35005                                  ;
 35006                                  ;	Input : DevEntry = Seg:0 of device driver
 35007                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 35008                                  ;		 else Zero flag is reset
 35009                                  ;
 35010                                  ;----------------------------------------------------------------------------
 35011                                  
 35012                                  IsIt3Com:
 35013                                  	; 11/12/2022
 35014                                  	; ds = cs
 35015 00002B2D 1E                      	push	ds
 35016 00002B2E 06                      	push	es
 35017 00002B2F 56                      	push	si
 35018                                  	; 11/12/2022
 35019 00002B30 C536[6C20]              	lds	si,[DevEntry]
 35020                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 35021 00002B34 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 35022 00002B37 0E                      	push	cs
 35023 00002B38 07                      	pop	es
 35024 00002B39 BF[8A20]                	mov	di,ThreeComName
 35025 00002B3C B90800                  	mov	cx,8			; name length
 35026 00002B3F F3A6                    	rep	cmpsb
 35027 00002B41 5E                      	pop	si
 35028 00002B42 07                      	pop	es
 35029 00002B43 1F                      	pop	ds
 35030 00002B44 C3                      	retn
 35031                                  
 35032                                  ;M020 : BEGIN
 35033                                  ;----------------------------------------------------------------------------
 35034                                  
 35035                                  UpdatePDB:
 35036 00002B45 1E                      	push	ds
 35037 00002B46 B462                    	mov	ah,62h
 35038 00002B48 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 35039 00002B4A 8EDB                    	mov	ds,bx
 35040 00002B4C 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 35041                                  	;mov	[2],bx
 35042 00002B51 891E0200                	mov	[PDB.BLOCK_LEN],bx
 35043 00002B55 1F                      	pop	ds
 35044 00002B56 C3                      	retn
 35045                                  
 35046                                  ; M020 : END
 35047                                  
 35048                                  ;----------------------------------------------------------------------------
 35049                                  
 35050                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35051                                  ;%if 0
 35052                                  
 35053                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35054                                  ; (SYSINIT:2EEEh)
 35055                                  
 35056                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 35057                                  ;include highexit.inc	; umb's, etc
 35058                                  
 35059                                  ; ----------------------------------------------------------------------
 35060                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 35061                                  ; ----------------------------------------------------------------------
 35062                                  ; 07/04/2019 - Retro DOS v4.0
 35063                                  
 35064                                  ;******************************************************************************
 35065                                  ;
 35066                                  ; This file contains routines needed to parse and implement user-given
 35067                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 35068                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 35069                                  ; the variables in highvar.inc, for use by the rest of the routines.
 35070                                  ;
 35071                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 35072                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 35073                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 35074                                  ;    DH/LH module opts
 35075                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 35076                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 35077                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 35078                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 35079                                  ; available during the load.
 35080                                  ;
 35081                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 35082                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 35083                                  ; upper-memory block which was not specified by the user... in addition, if
 35084                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 35085                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 35086                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 35087                                  ; free any UMBs so allocated.
 35088                                  ;
 35089                                  ; When a device driver loads, there is the additional problem of allocating its
 35090                                  ; initial load site; this should be restricted to the first UMB specified on
 35091                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 35092                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 35093                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 35094                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 35095                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 35096                                  ;
 35097                                  ;******************************************************************************
 35098                                  
 35099                                  SWTCH	equ	'/'		; Switch character
 35100                                  
 35101                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 35102                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 35103                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 35104                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 35105                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 35106                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 35107                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 35108                                  
 35109                                  CR	equ	0Dh		; Carriage Return
 35110                                  LF	equ	0Ah		; Line Feed
 35111                                  TAB	equ	09h		; Tab character (^I)
 35112                                  
 35113                                  ; -----------------------------------------------------------------------------
 35114                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 35115                                  ; -----------------------------------------------------------------------------
 35116                                  ; ENTRY:       None
 35117                                  ; EXIT:        Variables listed in highvar.inc are initialized
 35118                                  ; ERROR EXIT:  None
 35119                                  ; USES:        Flags, variables in highvar.inc
 35120                                  ; -----------------------------------------------------------------------------
 35121                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 35122                                  ; are largely ignored, but it is initialized nonetheless.
 35123                                  ; -----------------------------------------------------------------------------
 35124                                  
 35125                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35126                                  ; (SYSINIT:2EEEh)
 35127                                  
 35128                                  InitVar:
 35129                                  	; 01/01/2023
 35130                                  	; ds = cs
 35131                                  
 35132                                  	;pushreg <ax, cx, di, es>
 35133                                  	; 03/01/2023
 35134                                  	;push	ax
 35135                                  	;push	cx
 35136                                  	;push	di
 35137 00002B57 06                      	push	es
 35138                                  
 35139                                  	;dataseg es			;Point ES into appropriate data segment
 35140 00002B58 0E                      	push	cs
 35141 00002B59 07                      	pop	es
 35142                                  
 35143 00002B5A 31C0                    	xor	ax,ax
 35144                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 35145                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 35146                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 35147                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 35148                                  	;				;Later is the # of the 1st spec'd UMB
 35149                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 35150                                  
 35151                                  	; 01/01/2023
 35152                                  	; ds = cs
 35153 00002B5C A2[2F20]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 35154 00002B5F A2[2E20]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 35155 00002B62 A3[3020]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 35156 00002B65 C606[3220]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 35157                                  					;Later is the # of the 1st spec'd UMB
 35158 00002B6A A2[6520]                	mov	[fm_argc], al		;Start with zero args having been read
 35159                                  
 35160 00002B6D FC                      	cld
 35161                                  
 35162 00002B6E B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 35163 00002B71 BF[3320]                	mov	di,UmbUsed		;on the UmbUsed array,
 35164 00002B74 F3AA                    	rep	stosb			;	Store 0
 35165                                  
 35166                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 35167                                  	; 01/01/2033
 35168 00002B76 B110                    	mov	cl,MAXUMB ; 16
 35169 00002B78 BF[4320]                	mov	di,UmbSize		;on the UmbSize array,
 35170 00002B7B F3AB                    	rep	stosw			;	Store 0
 35171                                  
 35172                                  	;normseg es			; Return ES
 35173                                  
 35174                                  	;popreg	<es, di, cx, ax>
 35175 00002B7D 07                      	pop	es
 35176                                  	; 03/01/2023
 35177                                  	;pop	di
 35178                                  	;pop	cx
 35179                                  	;pop	ax	 	
 35180                                  
 35181 00002B7E C3                      	retn
 35182                                  
 35183                                  ; -----------------------------------------------------------------------------
 35184                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 35185                                  ; -----------------------------------------------------------------------------
 35186                                  ; ENTRY   : None
 35187                                  ; EXIT    : None
 35188                                  ; ERROR   : None
 35189                                  ; USES    : Flags, fm_umb, fm_strat
 35190                                  ; -----------------------------------------------------------------------------
 35191                                  
 35192                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35193                                  	; (SYSINIT:2F22h)
 35194                                  FixMem:
 35195                                  	; 01/01/2023
 35196                                  	;push	ax
 35197                                  	;push	bx
 35198                                  	;push	cx
 35199                                  	;push	dx
 35200 00002B7F 06                      	push	es
 35201                                  
 35202 00002B80 E84900                  	call	fm_link		; Link in UMBs
 35203                                  
 35204 00002B83 E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 35205 00002B86 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 35206                                  
 35207 00002B88 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 35208                                  
 35209                                  ; - Walk MCB Chain ------------------------------------------------------------
 35210                                  
 35211 00002B8A 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 35212 00002B8C 89D1                    	mov 	cx,dx		; in CX... and the last owner
 35213 00002B8E 42                      	inc	dx		; in dx as we go through the loop:
 35214                                  
 35215                                  ; ------------------------------------------
 35216                                  ; FM10--DX  = last MCB's owner's PSP address
 35217                                  ;       CX  = last MCB's address (segment)
 35218                                  ; ------------------------------------------
 35219                                  
 35220 00002B8F 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 35221 00002B93 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 35222 00002B98 09D3                    	or	bx,dx			; dx was owner of previous MCB
 35223 00002B9A 7516                    	jnz	short fm30		; If not both zero, don't cat.
 35224                                  
 35225                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 35226                                  
 35227 00002B9C 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 35228 00002BA1 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 35229 00002BA3 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 35230                                  
 35231 00002BA7 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 35232                                  	;add	bx,1			; And add one for the header
 35233                                  	; 11/07/2023
 35234 00002BAC 43                      	inc	bx
 35235 00002BAD 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 35236                                  
 35237                                  	; ---------------------------------------------------------------------
 35238                                  
 35239 00002BB2 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 35240 00002BB4 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 35241                                  
 35242 00002BB9 8CC3                    	mov	bx,es			; Move to the next MCB
 35243 00002BBB 26031E0300              	add	bx,[es:ARENA.SIZE]
 35244 00002BC0 43                      	inc	bx
 35245 00002BC1 8EC3                    	mov	es,bx
 35246                                  
 35247                                  	;cmp	al,'Z'
 35248 00002BC3 3C5A                    	cmp	al,arena_signature_end
 35249 00002BC5 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 35250                                  fmX:	
 35251 00002BC7 E81300                  	call	fm_unlink		; Unlink UMBs
 35252                                  
 35253 00002BCA 07                      	pop	es
 35254                                  	; 01/01/2023
 35255                                  	;pop	dx
 35256                                  	;pop	cx
 35257                                  	;pop	bx
 35258                                  	;pop	ax
 35259                                  
 35260 00002BCB C3                      	retn
 35261                                  
 35262                                  ; -----------------------------------------------------------------------------
 35263                                  ;*** fm_link - links UMBs not already linked in
 35264                                  ; -----------------------------------------------------------------------------
 35265                                  ; ENTRY:    None
 35266                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 35267                                  ; ERROR:    None
 35268                                  ; USES:     AX, BX, fm_umb
 35269                                  ; -----------------------------------------------------------------------------
 35270                                  
 35271                                  	; 01/01/2023 - Retro DOS v4.2
 35272                                  fm_link:
 35273 00002BCC B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 35274 00002BCF CD21                    	int	21h			; Current link-state is now in al
 35275                                  
 35276                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 35277                                  	;
 35278                                  	;push	es
 35279                                  	;push	cs
 35280                                  	;pop	es
 35281                                  	;mov	[es:fm_umb],al
 35282                                  	;pop	es
 35283                                  	
 35284                                  	; 01/01/2023
 35285                                  	; ds = cs
 35286                                  	;mov	[cs:fm_umb],al
 35287 00002BD1 A2[6320]                	mov	[fm_umb],al
 35288                                  
 35289 00002BD4 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35290 00002BD7 BB0100                  	mov	bx,1
 35291 00002BDA CD21                    	int	21h
 35292 00002BDC C3                      	retn
 35293                                  
 35294                                  ; -----------------------------------------------------------------------------
 35295                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 35296                                  ; -----------------------------------------------------------------------------
 35297                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 35298                                  ; EXIT:     None
 35299                                  ; ERROR:    None
 35300                                  ; USES:     AX, BX
 35301                                  ; -----------------------------------------------------------------------------
 35302                                  
 35303                                  	; 01/01/2023 - Retro DOS v4.2
 35304                                  fm_unlink:
 35305 00002BDD 31DB                    	xor	bx,bx
 35306                                  	
 35307                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 35308                                  	;
 35309                                  	;push	ds
 35310                                  	;push	cs
 35311                                  	;pop	ds
 35312                                  	;mov	bl,[fm_umb]	
 35313                                  	;pop	ds
 35314                                  	
 35315                                  	; 01/01/2023
 35316                                  	; ds = cs
 35317                                  	;mov	bl,[cs:fm_umb]
 35318 00002BDF 8A1E[6320]              	mov	bl,[fm_umb]
 35319                                  
 35320 00002BE3 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35321 00002BE6 CD21                    	int	21h			; so just use that, and call int 21h
 35322 00002BE8 C3                      	retn
 35323                                  
 35324                                  ; 08/04/2019 - Retro DOS v4.0
 35325                                  
 35326                                  ; -----------------------------------------------------------------------------
 35327                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 35328                                  ; laid out in highvar.inc
 35329                                  ; -----------------------------------------------------------------------------
 35330                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 35331                                  ; EXIT:     ES:SI points to first character in child program name
 35332                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 35333                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 35334                                  ; -----------------------------------------------------------------------------
 35335                                  ; Error codes (in AX if carry set on return):
 35336                                  ;
 35337                                  PV_InvArg	equ	1	; Invalid argument passed
 35338                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 35339                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 35340                                  ;
 35341                                  ; This routine exects ES:SI to point to a string much like the following:
 35342                                  ;    "/S/L:1,200;2 module options"
 35343                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 35344                                  ; required, though that's what this routine is supposed to parse.
 35345                                  ;
 35346                                  optS		equ	'S'	; /S
 35347                                  optL		equ	'L'	; /L:...
 35348                                  ;
 35349                                  ; -----------------------------------------------------------------------------
 35350                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 35351                                  ; a command-line for spawning a child process. For a typical LH command, say,
 35352                                  ;     lh /l:1,1000;2 print/d:lpt2
 35353                                  ; the arguments would look like (one per line):
 35354                                  ;     lh
 35355                                  ;     /l
 35356                                  ;     1
 35357                                  ;     1000
 35358                                  ;     2
 35359                                  ;     print
 35360                                  ;     /d
 35361                                  ;     :lpt2
 35362                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 35363                                  ; arg was the filename. So, inside this routine, we keep a running counter
 35364                                  ; of the number of arguments LH will need to skip in order to get to the
 35365                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 35366                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 35367                                  ; for:
 35368                                  ;    Each /L
 35369                                  ;    Each /S (there should be only one)
 35370                                  ;    Each UMB number (they follow ":" or ";")
 35371                                  ;    Each UMB size   (they follow ",")
 35372                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 35373                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 35374                                  ; -----------------------------------------------------------------------------
 35375                                  
 35376                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35377                                  	; (SYSINIT:2F9Fh)
 35378                                  
 35379                                  ParseVar:
 35380                                  	;pushreg <di, ds, es>
 35381                                  	; 01/01/2023
 35382                                  	;push	di ; * ; (not required) ; 01/01/2023
 35383 00002BE9 1E                      	push	ds
 35384 00002BEA 06                      	push	es
 35385                                  
 35386 00002BEB 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 35387 00002BEC 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 35388 00002BED FC                      	cld
 35389                                  
 35390                                  ; ------------------------------------------------
 35391                                  ; PV10--ES:SI = any whitespace on the command-line
 35392                                  ; ------------------------------------------------
 35393                                  
 35394 00002BEE AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 35395 00002BEF E8A200                  	call	isWhite
 35396 00002BF2 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 35397                                  	;cmp	al,'/'
 35398 00002BF4 3C2F                    	cmp	al,SWTCH
 35399 00002BF6 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 35400                                  
 35401 00002BF8 4E                      	dec	si		; Backup--it's now "odule options", and we need
 35402 00002BF9 F8                      	clc			; that "m" we just read (or whatever it is).
 35403 00002BFA EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 35404                                  
 35405 00002BFC AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 35406                                  	;toUpper al		; So we make it upper-case, and...
 35407 00002BFD 24DF                    	and	al,0DFh
 35408                                  	;cmp	al,'S'
 35409 00002BFF 3C53                    	cmp	al,optS		; just read 'S'?
 35410 00002C01 750D                    	jne	short pv30
 35411                                  
 35412                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 35413 00002C03 2EFE06[6520]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35414                                  
 35415                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 35416                                  	;
 35417                                  	;push	es
 35418                                  	;push	cs
 35419                                  	;pop	es
 35420                                  	;mov	[es:fUmbTiny],1	
 35421                                  	;pop	es
 35422                                  
 35423 00002C08 2EC606[2F20]01          	mov	byte [cs:fUmbTiny],1
 35424                                  
 35425 00002C0E EBDE                    	jmp	short pv10	; possibly even "/L...".
 35426                                  
 35427                                  pv30:	;cmp	al,'L'
 35428 00002C10 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 35429 00002C12 750D                    	jne	short pvE1		; switch!
 35430                                  
 35431                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 35432 00002C14 2EFE06[6520]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35433                                  
 35434 00002C19 E80E00                  	call	parseL
 35435 00002C1C 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 35436                                  
 35437 00002C1E 4E                      	dec	si		; Else, back up and exit.
 35438 00002C1F EB03                    	jmp	short pvErr	; AX has already been set by parseL
 35439                                  
 35440                                  pvE1:	;mov	ax,3
 35441 00002C21 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 35442 00002C24 4E                      pvErr:	dec	si
 35443 00002C25 4E                      	dec	si
 35444 00002C26 F9                      	stc
 35445                                  pvX:	;popreg	<es, ds, di>
 35446 00002C27 07                      	pop	es
 35447 00002C28 1F                      	pop	ds
 35448                                  	; 01/01/2023
 35449                                  	;pop	di ; * ; (not required) ; 01/01/2023
 35450 00002C29 C3                      	retn
 35451                                  
 35452                                  ; -----------------------------------------------------------------------------
 35453                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 35454                                  ; -----------------------------------------------------------------------------
 35455                                  ; ENTRY:    ES:SI points to colon
 35456                                  ; EXIT:     ES:SI points to first character not parsed
 35457                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 35458                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 35459                                  ; -----------------------------------------------------------------------------
 35460                                  ; If the string here is terminated with anything other than whitespace or a
 35461                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 35462                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 35463                                  ; makes sure the app /L: is reported as being the culprit.
 35464                                  ; -----------------------------------------------------------------------------
 35465                                  
 35466                                  parseL:
 35467 00002C2A AC                      	lodsb
 35468 00002C2B 3C3A                    	cmp	al,':'		; Make sure they did /L:
 35469 00002C2D 754E                    	jne	short plE1	; If they didn't, return with carry set.
 35470                                  
 35471                                  ; ------------------------------------------
 35472                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 35473                                  ; ------------------------------------------
 35474                                  
 35475 00002C2F E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 35476 00002C32 724F                    	jc	short plE2	; And error if it's a bad number.
 35477 00002C34 E89D01                  	call	convUMB		; Convert any address to a UMB number
 35478                                  
 35479 00002C37 88C1                    	mov	cl,al		; Remember the UMB number
 35480 00002C39 E87600                  	call	stowUMB		; Mark this UMB # as used;
 35481 00002C3C 7245                    	jc	short plE2	; If it was already marked, it'll error
 35482                                  
 35483                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 35484 00002C3E 2EFE06[6520]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35485                                  
 35486 00002C43 AC                      	lodsb
 35487 00002C44 3C3B                    	cmp	al,';'		; Did "umb;" ?
 35488 00002C46 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 35489                                  
 35490 00002C48 E84900                  	call	isWhite		; Did "umb " ?
 35491 00002C4B 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 35492                                  
 35493 00002C4D E83900                  	call	isEOL		; Did "umb" ?
 35494 00002C50 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35495                                  
 35496                                  	;cmp	al,'/'
 35497 00002C52 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 35498 00002C54 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 35499                                  
 35500 00002C56 3C2C                    	cmp	al,','		; Did "umb," ?
 35501 00002C58 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 35502                                  
 35503                                  ; --- Read a size -------------------------------------------------------------
 35504                                  
 35505 00002C5A E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 35506 00002C5D 721E                    	jc	short plE1	; And error if it's a bad size.
 35507                                  
 35508 00002C5F E81601                  	call	toPara		; Convert from bytes to paragraphs
 35509                                  
 35510 00002C62 E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 35511                                  
 35512                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 35513 00002C65 2EFE06[6520]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35514                                  
 35515 00002C6A AC                      	lodsb
 35516 00002C6B 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 35517 00002C6D 74C0                    	je	short pl10	;
 35518                                  
 35519 00002C6F E82200                  	call	isWhite		; Did it end with whitespace?
 35520 00002C72 7414                    	jz	short plX	; If so, we're done here--go back.
 35521                                  
 35522 00002C74 E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 35523 00002C77 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35524                                  
 35525                                  	;cmp	al,'/'
 35526 00002C79 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 35527 00002C7B 740A                    	je	short plSwX	; If so, again, we're done here.
 35528                                  plE1:	
 35529                                  	;mov	ax,1
 35530 00002C7D B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 35531 00002C80 4E                      	dec	si
 35532 00002C81 F9                      	stc
 35533 00002C82 C3                      	retn
 35534                                  
 35535                                  plE2:	;mov	ax,2
 35536 00002C83 B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 35537                                  	; 12/12/2022
 35538                                  	; cf=1
 35539                                  	;stc
 35540 00002C86 C3                      	retn
 35541                                  plSwX:	
 35542 00002C87 4E                      	dec	si		; If we hit a '/' character, back up one char
 35543                                  				; so the whitespace checker will see it too.
 35544                                  plX:	; 12/12/2022
 35545                                  	; cf=0
 35546                                  	;clc			; Then just return with carry clear, so
 35547 00002C88 C3                      	retn			; ParseVar will go about its business.
 35548                                  
 35549                                  ; -----------------------------------------------------------------------------
 35550                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 35551                                  ; -----------------------------------------------------------------------------
 35552                                  ; ENTRY:    None
 35553                                  ; EXIT:     None
 35554                                  ; ERROR:    None
 35555                                  ; USES:     fm_argc, flags
 35556                                  ; -----------------------------------------------------------------------------
 35557                                  
 35558                                  ;incArgc:
 35559                                  	;push	ax
 35560                                  
 35561                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 35562                                  
 35563                                  	;mov	al,[cs:fm_argc]
 35564                                  
 35565                                  	;inc	al		; Increment it,
 35566                                  
 35567                                  	;;putdata fm_argc, al	; And store it right back.
 35568                                  
 35569                                  	;mov	[cs:fm_argc],al
 35570                                  
 35571                                  	;pop	ax
 35572                                  	;retn
 35573                                  
 35574                                  ; -----------------------------------------------------------------------------
 35575                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 35576                                  ; -----------------------------------------------------------------------------
 35577                                  ; ENTRY:    AL contains character to test
 35578                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 35579                                  ; ERROR:    None
 35580                                  ; USES:     ZF
 35581                                  ; -----------------------------------------------------------------------------
 35582                                  
 35583                                  isEOL:
 35584 00002C89 3C00                    	cmp	al,0		; Null-terminator
 35585 00002C8B 7406                    	je	short ieX
 35586 00002C8D 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 35587 00002C8F 7402                    	je	short ieX
 35588 00002C91 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 35589                                  ieX:	
 35590 00002C93 C3                      	retn
 35591                                  
 35592                                  ; -----------------------------------------------------------------------------
 35593                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 35594                                  ; -----------------------------------------------------------------------------
 35595                                  ; ENTRY:    AL contains character to test
 35596                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 35597                                  ; ERROR:    None
 35598                                  ; USES:     ZF
 35599                                  ; -----------------------------------------------------------------------------
 35600                                  
 35601                                  isWhite:
 35602 00002C94 3C20                    	cmp	al,' '		; Space
 35603 00002C96 7406                    	je	short iwX
 35604 00002C98 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 35605 00002C9A 7402                    	je	short iwX
 35606 00002C9C 3C09                    	cmp	al,tab ; 9	; Tab
 35607                                  iwX:	
 35608 00002C9E C3                      	retn
 35609                                  
 35610                                  ; -----------------------------------------------------------------------------
 35611                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 35612                                  ; -----------------------------------------------------------------------------
 35613                                  ; ENTRY:    AL contains UMB number
 35614                                  ; EXIT:     None
 35615                                  ; ERROR:    None
 35616                                  ; USES:     Flags, variables in highvar.inc
 35617                                  ; -----------------------------------------------------------------------------
 35618                                  
 35619                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35620                                  
 35621                                  unMarkUMB:
 35622                                  	; 02/01/2023
 35623                                  	;push	ax
 35624                                  	;push	bx
 35625                                  	;push	di
 35626                                  	;push	es
 35627                                  	;
 35628                                  	;push	cs
 35629                                  	;pop	es
 35630                                  
 35631 00002C9F 30E4                    	xor	ah,ah
 35632 00002CA1 89C3                    	mov	bx,ax
 35633                                  
 35634                                  	; 19/04/2019
 35635                                  	
 35636                                  	;;mov	byte [es:bx+UmbUsed],0
 35637                                  	;mov	[es:bx+UmbUsed],ah ; 0
 35638                                  	; 02/01/2023
 35639                                  	; ds= cs
 35640                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 35641 00002CA3 88A7[3320]              	mov	[bx+UmbUsed],ah ; 0
 35642                                  
 35643 00002CA7 3806[3220]              	cmp	[UmbLoad],al
 35644                                  	;cmp	[cs:UmbLoad],al
 35645                                  	;;cmp	[es:UmbLoad],al
 35646 00002CAB 7504                    	jne	short umu10
 35647                                  
 35648                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 35649                                  	;mov	[es:UmbLoad],ah ; 0
 35650                                  	; 02/01/2023
 35651                                  	; ds = cs
 35652                                  	;mov	[cs:UmbLoad],ah ; 0
 35653 00002CAD 8826[3220]              	mov	[UmbLoad],ah ; 0
 35654                                  umu10:	
 35655                                  	;pop	es
 35656                                  	;pop	di
 35657                                  	;pop	bx
 35658                                  	;pop	ax
 35659 00002CB1 C3                      	retn
 35660                                  
 35661                                  ; -----------------------------------------------------------------------------
 35662                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 35663                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 35664                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 35665                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 35666                                  ; -----------------------------------------------------------------------------
 35667                                  ; ENTRY:    AL contains UMB number, as specified by the user
 35668                                  ; EXIT:     None
 35669                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 35670                                  ; USES:     AX, Flags, variables in highvar.inc
 35671                                  ; -----------------------------------------------------------------------------
 35672                                  
 35673                                  	; 01/01/2023 - Retro DOS v4.2
 35674                                  stowUMB:
 35675 00002CB2 3C10                    	cmp	al,MAXUMB ; 16
 35676 00002CB4 7202                    	jb	short su10
 35677 00002CB6 F9                      	stc
 35678 00002CB7 C3                      	retn			; Ooops-- UMB>=MAXUMB
 35679                                  su10:	
 35680                                  	; 01/01/2023
 35681                                  	;push	bx
 35682                                  	;push	di
 35683                                  	;push	si
 35684                                  	;push	ds
 35685                                  	;push	es
 35686                                  	;push	cs
 35687                                  	;pop	es
 35688                                  	;push	cs
 35689                                  	;pop	ds
 35690                                  
 35691                                  	; 01/01/2023
 35692                                  	; ds <> cs
 35693                                  	;cmp	byte [cs:UmbLoad],0FFh
 35694 00002CB8 2E803E[3220]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 35695                                  				; If this, we haven't been here before
 35696 00002CBE 7504                    	jne	short su20
 35697 00002CC0 2EA2[3220]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 35698                                  
 35699                                  	;;cmp	byte [UmbLoad],0FFh
 35700                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 35701                                  	;jne	short su20
 35702                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 35703                                  su20:	
 35704 00002CC4 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 35705 00002CC6 740E                    	jz	short su30	; that we should do here.
 35706                                  
 35707                                  	;mov	bl,al
 35708                                  	;xor	bh,bh
 35709                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 35710                                  	; 01/01/2023
 35711 00002CC8 30E4                    	xor	ah,ah
 35712 00002CCA 89C3                    	mov	bx,ax
 35713 00002CCC B001                    	mov	al,1
 35714                                  
 35715                                  	;xchg	[es:bx+UmbUsed],al
 35716                                  	; 01/01/2023
 35717 00002CCE 2E8687[3320]            	xchg	[cs:bx+UmbUsed],al
 35718                                  
 35719                                  	;or	al,al		; If it was already 1, then al==1... and that
 35720                                  	;jz	short su30	; means an error.
 35721                                  	;
 35722                                  	;stc			; OOOPS!  This one's been used before.  :(
 35723                                  	
 35724                                  	; 01/01/2023
 35725 00002CD3 3C01                    	cmp	al,1
 35726 00002CD5 F5                      	cmc 	; if al > 0 -> cf = 1
 35727                                  su30:	
 35728                                  	; 01/01/2023
 35729                                  	;pop	es
 35730                                  	;pop	ds
 35731                                  	;pop	si
 35732                                  	;pop	di
 35733                                  	;pop	bx
 35734 00002CD6 C3                      	retn
 35735                                  
 35736                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35737                                  %if 0
 35738                                  ; -----------------------------------------------------------------------------
 35739                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 35740                                  ; -----------------------------------------------------------------------------
 35741                                  ; ENTRY:    CL contains UMB number, AX contains size
 35742                                  ; EXIT:     None
 35743                                  ; ERROR:    None
 35744                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 35745                                  ; -----------------------------------------------------------------------------
 35746                                  
 35747                                  ; 13/05/2019
 35748                                  
 35749                                  	; 01/01/2023 - Retro DOS v4.2
 35750                                  stowSiz:
 35751                                  	; 01/01/2023
 35752                                  	;push	bx
 35753                                  	;;push	di ; ?
 35754                                  	;push	es
 35755                                  
 35756                                  	;push	cs
 35757                                  	;pop	es	
 35758                                  
 35759                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 35760                                  	mov	bh,0			;     bx==UMB number, AX==size
 35761                                  	shl	bl,1			;     bx==offset into array, AX=size
 35762                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 35763                                  	; 01/01/2023
 35764                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 35765                                  
 35766                                  	; 01/01/2023
 35767                                  	;pop	es
 35768                                  	;;pop	di ; ?
 35769                                  	;pop	bx
 35770                                  
 35771                                  	retn
 35772                                  %endif
 35773                                  
 35774                                  ; -----------------------------------------------------------------------------
 35775                                  ;*** toDigit - converts a character-digit to its binary counterpart
 35776                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 35777                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 35778                                  ; A-F are considered valid iff gnradix is 16.
 35779                                  ; -----------------------------------------------------------------------------
 35780                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 35781                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 35782                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 35783                                  ; USES:     CL, Flags
 35784                                  ; -----------------------------------------------------------------------------
 35785                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35786                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35787                                  ; will be 10 or 16.
 35788                                  ; -----------------------------------------------------------------------------
 35789                                  
 35790                                  gnradix:
 35791 00002CD7 0000                    	dw	0		; Must be a word--16x16 multiplication
 35792                                  
 35793                                  toDigit:
 35794 00002CD9 2E833E[D72C]10          	cmp	word [cs:gnradix],16
 35795 00002CDF 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 35796                                  
 35797                                  toDigit_hex:
 35798 00002CE1 80F961                  	cmp	cl,'a'	; 61h
 35799 00002CE4 7209                    	jb	short td10
 35800 00002CE6 80F966                  	cmp	cl,'f'	; 66h
 35801 00002CE9 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 35802 00002CEB 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 35803                                  	;clc			; <- CLC is implicit from last SUB
 35804 00002CEE C3                      	retn
 35805                                  td10:	
 35806 00002CEF 80F941                  	cmp	cl,'A'  ; 41h
 35807 00002CF2 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 35808 00002CF4 80F946                  	cmp	cl,'F'	; 46h
 35809 00002CF7 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 35810 00002CF9 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 35811                                  	;clc			; <- CLC is implicit from last SUB
 35812 00002CFC C3                      	retn
 35813                                  toDigit_dec:
 35814                                  td20:	
 35815 00002CFD 80F930                  	cmp	cl,'0'		; If less than zero,
 35816                                  	;jb	short tdE	; Done.
 35817 00002D00 720A                    	jb	short tdEr ; 08/04/2019
 35818 00002D02 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 35819 00002D05 7704                    	ja	short tdE	; Done.
 35820 00002D07 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 35821                                  	;clc			; <- CLC is implicit from last SUB
 35822 00002D0A C3                      	retn
 35823                                  tdE:	
 35824 00002D0B F9                      	stc
 35825                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 35826 00002D0C C3                      	retn
 35827                                  
 35828                                  ; -----------------------------------------------------------------------------
 35829                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 35830                                  ; -----------------------------------------------------------------------------
 35831                                  ; ENTRY:    ES:SI points to an ascii string to scan
 35832                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 35833                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 35834                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 35835                                  ; -----------------------------------------------------------------------------
 35836                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35837                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35838                                  ; will be 10 or 16.
 35839                                  ; -----------------------------------------------------------------------------
 35840                                  
 35841                                  ; 08/04/2019 - Retro DOS v4.0
 35842                                  
 35843                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35844                                  ; (SYSINIT:3109h)
 35845                                  
 35846                                  GetXNum:
 35847                                  	;pushreg <bx, cx, ds>
 35848                                  	; 01/01/2023
 35849                                  	;push	bx
 35850 00002D0D 51                      	push	cx ; *
 35851                                  	;push	ds
 35852                                  
 35853 00002D0E FC                      	cld
 35854 00002D0F 31C0                    	xor	ax,ax
 35855 00002D11 31DB                    	xor	bx,bx
 35856 00002D13 31C9                    	xor	cx,cx
 35857 00002D15 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 35858                                  
 35859 00002D17 2EC706[D72C]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 35860                                  
 35861 00002D1E 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 35862                                  	;call	toDigit
 35863 00002D21 E8D9FF                  	call	toDigit_dec
 35864                                  	;jc	short gxnE		; If it's not a digit, leave now.
 35865                                  	; 01/01/2023
 35866 00002D24 7233                    	jc	short gxnX
 35867                                  
 35868 00002D26 08C9                    	or	cl,cl
 35869 00002D28 7517                    	jnz	short gxn20		; Doesn't have '0x'
 35870 00002D2A 268A4C01                	mov	cl,[es:si+1]
 35871 00002D2E 80F978                  	cmp	cl,'x'			; Either 'x'...
 35872 00002D31 7405                    	je	short gxn10
 35873 00002D33 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 35874 00002D36 7509                    	jne	short gxn20
 35875                                  
 35876                                  gxn10:	
 35877 00002D38 2EC706[D72C]1000        	mov	word [cs:gnradix], 16
 35878 00002D3F 46                      	inc	si			; Since we read "0x", march over it.
 35879 00002D40 46                      	inc	si
 35880                                  
 35881                                  ; ------------------------------------------------------
 35882                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 35883                                  ;        DX:AX = current total
 35884                                  ;        BX    = 0
 35885                                  ;        CH    = 0
 35886                                  ; ------------------------------------------------------
 35887                                  
 35888                                  gxn20:	
 35889 00002D41 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 35890 00002D44 46                      	inc	si
 35891                                  
 35892 00002D45 E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 35893 00002D48 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 35894                                  
 35895 00002D4A E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 35896 00002D4D 720A                    	jc	short gxnX	; (if it's too big, error out)
 35897                                  
 35898 00002D4F 01C8                    	add	ax,cx		; Add the digit
 35899 00002D51 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 35900                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 35901                                  	;jmp	short gxn20
 35902 00002D53 73EC                    	jnc	short gxn20
 35903                                  gxnE:	
 35904                                  	;stc			; In this case, we need to set the carry
 35905 00002D55 EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 35906                                  gxnQ:	
 35907 00002D57 4E                      	dec	si		; Don't read in the offensive character.
 35908 00002D58 F8                      	clc			; And clear carry, so they know it's okay.
 35909                                  gxnX:	
 35910                                  	; 01/01/2023
 35911                                  	;pop	ds
 35912 00002D59 59                      	pop	cx ; *
 35913                                  	;pop	bx
 35914 00002D5A C3                      	retn
 35915                                  
 35916                                  ; -----------------------------------------------------------------------------
 35917                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 35918                                  ; -----------------------------------------------------------------------------
 35919                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 35920                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 35921                                  ; ERROR:   Carry set if number was too large
 35922                                  ; USES:    Flags, AX, DX
 35923                                  ; -----------------------------------------------------------------------------
 35924                                  
 35925                                  mul32:
 35926 00002D5B 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 35927 00002D5C 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 35928 00002D5E 2EF726[D72C]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 35929 00002D63 7211                    	jc	short m32E	; Too big?
 35930                                  
 35931 00002D65 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 35932 00002D67 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 35933                                  
 35934 00002D68 87DA                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 35935 00002D6A 2EF726[D72C]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 35936 00002D6F 87DA                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 35937 00002D71 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 35938 00002D73 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 35939 00002D75 C3                      	retn
 35940                                  m32E:	
 35941 00002D76 58                      	pop	ax
 35942 00002D77 C3                      	retn
 35943                                  
 35944                                  ; -----------------------------------------------------------------------------
 35945                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 35946                                  ; -----------------------------------------------------------------------------
 35947                                  ; ENTRY:   DX:AX = the number to be divided
 35948                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 35949                                  ; ERROR:   None
 35950                                  ; USES:    Flags, AX, DX
 35951                                  ; -----------------------------------------------------------------------------
 35952                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 35953                                  ;       can't ensure a 386 host machine. Sorry.
 35954                                  ; -----------------------------------------------------------------------------
 35955                                  
 35956                                  	; 01/01/2023 - Retro DOS v4.2
 35957                                  toPara:
 35958 00002D78 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 35959                                  
 35960 00002D79 B104                    	mov	cl,4		;
 35961 00002D7B D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 35962 00002D7D 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 35963 00002D7E B10C                    	mov	cl,12
 35964 00002D80 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 35965 00002D82 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 35966                                  
 35967 00002D84 59                      	pop	cx
 35968 00002D85 C3                      	retn
 35969                                  
 35970                                  ; -----------------------------------------------------------------------------
 35971                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 35972                                  ; -----------------------------------------------------------------------------
 35973                                  ; ENTRY:  Nothing
 35974                                  ; EXIT:   AX contains 0x9FFF for most systems
 35975                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 35976                                  ; USES:   Flags, AX
 35977                                  ; -----------------------------------------------------------------------------
 35978                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 35979                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 35980                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 35981                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 35982                                  ; -----------------------------------------------------------------------------
 35983                                  
 35984                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35985                                  UmbHead:
 35986                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 35987                                  
 35988                                  	;push	si ; ?
 35989                                  	;push	ds ; ? 
 35990                                  	;push	es
 35991                                  	;push	bx ; *	
 35992                                  
 35993                                  	; 09/04/2019
 35994                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 35995                                  
 35996 00002D86 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 35997 00002D88 CD21                    	int	21h
 35998                                  
 35999 00002D8A 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 36000                                  	
 36001                                  	; 01/01/2023
 36002 00002D8E 83F8FF                  	cmp	ax,0FFFFh
 36003 00002D91 F5                      	cmc
 36004                                  	; if AX=0FFFFh -> CF=1
 36005 00002D92 C3                      	retn
 36006                                  
 36007                                  ; 01/01/2023
 36008                                  ;%if 0
 36009                                  ;	cmp	ax,0FFFFh
 36010                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 36011                                  ;
 36012                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 36013                                  ;	;jmp	short uhX
 36014                                  ;	; 12/12/2022
 36015                                  ;	retn
 36016                                  ;uhE:	
 36017                                  ;	stc
 36018                                  ;uhX:	
 36019                                  ;	;pop	bx ; *
 36020                                  ;	;pop	es
 36021                                  ;	;pop	ds ; ?
 36022                                  ;	;pop	si ; ?
 36023                                  ;	retn
 36024                                  ;%endif
 36025                                  
 36026                                  ; -----------------------------------------------------------------------------
 36027                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 36028                                  ; -----------------------------------------------------------------------------
 36029                                  ; ENTRY:  ES:0 should point to a valid MCB
 36030                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 36031                                  ; USES:   Flags
 36032                                  ; -----------------------------------------------------------------------------
 36033                                  
 36034                                  isSysMCB:
 36035                                  	;push	ax
 36036                                  
 36037                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 36038                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 36039                                  	;je	short ism10
 36040                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 36041                                  	;;je	short ism10
 36042                                  	;;jmp	short ismX		; Anything else isn't.
 36043                                  	;jne	short ismX
 36044 00002D93 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 36045 00002D99 7507                    	jne	short ismX 
 36046                                  ism10:	
 36047                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 36048                                  	;cmp	ax,'SC' ; 4353h
 36049 00002D9B 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 36050                                  ismX:	
 36051                                  	;pop	ax
 36052 00002DA2 C3                      	retn
 36053                                  
 36054                                  ; 09/04/2019 - Retro DOS v4.0
 36055                                  
 36056                                  ; -----------------------------------------------------------------------------
 36057                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 36058                                  ; -----------------------------------------------------------------------------
 36059                                  ; ENTRY:  AX contains a segment address
 36060                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 36061                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 36062                                  ; USES:   Flags, AX
 36063                                  ; -----------------------------------------------------------------------------
 36064                                  ; An address in the following areas is treated as:
 36065                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 36066                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 36067                                  ;      ...
 36068                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 36069                                  ; -----------------------------------------------------------------------------
 36070                                  
 36071                                  	; 01/01/2023 - Retro DOS v4.2
 36072                                  AddrToUmb:
 36073                                  	; 01/01/2023
 36074                                  	;push	cx
 36075                                  	;push	dx
 36076 00002DA3 06                      	push	es
 36077                                  
 36078 00002DA4 89C2                    	mov	dx,ax		; DX = address to search for
 36079                                  
 36080 00002DA6 E8DDFF                  	call	UmbHead		; AX = first segment
 36081 00002DA9 7222                    	jc	short atuE	; If it couldn't get it, error out.
 36082                                  
 36083                                  	; 22/07/2023
 36084                                  	;mov	es,ax ; *	; ES = first UMB segment
 36085 00002DAB 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 36086                                  
 36087                                  	; 22/07/2023
 36088                                  atu10:
 36089 00002DAD 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 36090                                  ; ----------------------------------------
 36091                                  ; ATU10--ES - Current MCB address
 36092                                  ;        DX - Address given for conversion
 36093                                  ;        CX - Current UMB #
 36094                                  ; ----------------------------------------
 36095                                  
 36096                                  ;atu10:	
 36097                                  	;mov	ax,es ; * ; 18/07/2023
 36098 00002DAF 39D0                            cmp	ax,dx		; Present segment >= given segment?
 36099 00002DB1 731D                    	jae	short atuX	; Yep--done.
 36100                                  
 36101 00002DB3 E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 36102 00002DB6 7501                    	jnz	short atu20
 36103                                  
 36104 00002DB8 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 36105                                  atu20:	
 36106                                  	;mov	al,[es:ARENA.SIGNATURE]
 36107                                  	;cmp	al,arena_signature_end  ; 'Z'
 36108                                  	; 22/07/2023
 36109                                  	; ax = es
 36110                                  	;mov	ax,es ; **
 36111 00002DB9 2603060300              	add	ax,[es:ARENA.SIZE]
 36112 00002DBE 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36113 00002DC4 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 36114                                  
 36115                                  	;NextMCB es,ax
 36116                                  
 36117                                  	;mov	ax,es ; **
 36118                                  	;;add	ax,[es:3]
 36119                                  	;add	ax,[es:ARENA.SIZE]
 36120 00002DC6 40                      	inc	ax
 36121                                  	; 22/07/2023
 36122                                  	;mov	es,ax ; *
 36123 00002DC7 EBE4                    	jmp	short atu10
 36124                                  
 36125                                  ; -----------------------------------------------------------------------------
 36126                                  ; if we get to atu30, they specified a number that was past the last MCB.
 36127                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 36128                                  ; -----------------------------------------------------------------------------
 36129                                  
 36130                                  atu30:	
 36131                                  	; 22/07/2023
 36132                                  	; ax = es + [es:ARENA.SIZE] 
 36133                                  	;mov	ax,es ; **
 36134                                  	;add	ax,[es:ARENA.SIZE] ; **
 36135 00002DC9 39D0                    	cmp	ax,dx		; Present >= given?
 36136 00002DCB 7303                    	jae	short atuX	; Yep! It _was_ inside.
 36137                                  atuE:	
 36138 00002DCD 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 36139 00002DCF 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 36140                                  atuX:	
 36141 00002DD0 89C8                    	mov	ax,cx		; Return the UMB number in AX
 36142                                  	
 36143 00002DD2 07                      	pop	es	
 36144                                  	; 01/01/2023
 36145                                  	;pop	dx
 36146                                  	;pop	cx
 36147 00002DD3 C3                      	retn
 36148                                  
 36149                                  ; -----------------------------------------------------------------------------
 36150                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 36151                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 36152                                  ; address rather than a UMB number... and use that address to look up a UMB.
 36153                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 36154                                  ; -----------------------------------------------------------------------------
 36155                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 36156                                  ; EXIT:   AX will contain a UMB number
 36157                                  ; ERROR:  None
 36158                                  ; USES:   Flags, AX
 36159                                  ; -----------------------------------------------------------------------------
 36160                                  
 36161                                  	; 01/01/2023 - Retro DOS v4.2
 36162                                  convUMB:
 36163 00002DD4 2E833E[D72C]10          	cmp	word [cs:gnradix],16
 36164 00002DDA 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 36165 00002DDC E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 36166                                  	;cmp	ax,0FFFFh
 36167                                  	;jne	short cu10
 36168                                  	;inc	ax		; If too high, ignore it (make it conventional)
 36169                                  	; 01/01/2023
 36170 00002DDF 40                      	inc	ax
 36171 00002DE0 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 36172 00002DE2 48                      	dec	ax
 36173                                  cu10:	
 36174 00002DE3 C3                      	retn
 36175                                  
 36176                                  ; 01/01/2023 - Retro DOS v4.2
 36177                                  ;%if 0
 36178                                  ;
 36179                                  ;; -----------------------------------------------------------------------------
 36180                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 36181                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 36182                                  ;; of the usual HIGH_FIRST. See the code.
 36183                                  ;; -----------------------------------------------------------------------------
 36184                                  ;; ENTRY:  None
 36185                                  ;; EXIT:   None
 36186                                  ;; ERROR:  None
 36187                                  ;; USES:   Flags, fm_umb, fm_strat
 36188                                  ;; -----------------------------------------------------------------------------
 36189                                  ;
 36190                                  ;setUMBs:
 36191                                  ;	push	ax
 36192                                  ;	push	bx
 36193                                  ;	call	fm_link
 36194                                  ;	pop	bx
 36195                                  ;	pop	ax
 36196                                  ;	retn
 36197                                  ;
 36198                                  ;%endif
 36199                                  
 36200                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36201                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 36202                                  %if 0
 36203                                  
 36204                                  ; -----------------------------------------------------------------------------
 36205                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 36206                                  ; -----------------------------------------------------------------------------
 36207                                  ; ENTRY:  None
 36208                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 36209                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 36210                                  ; ERROR:  None
 36211                                  ; USES:   Flags, fm_strat, fm_umb
 36212                                  ; -----------------------------------------------------------------------------
 36213                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 36214                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 36215                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 36216                                  ; such that the load UMB is too small, and shouldn't be used.
 36217                                  ; -----------------------------------------------------------------------------
 36218                                  
 36219                                  loadLow:
 36220                                  	;push	ds
 36221                                  	;push	cs		; Point DS into appropriate data segment
 36222                                  	;pop	ds	
 36223                                  
 36224                                  	;mov	al,[UmbLoad]
 36225                                  	mov	al,[cs:UmbLoad]
 36226                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 36227                                  	jne	short ll10
 36228                                  
 36229                                  	stc
 36230                                  ll15:
 36231                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 36232                                  	;stc
 36233                                  	;jmp	short llX
 36234                                  	retn
 36235                                  ll10:	
 36236                                  	or	al,al		; AL=the load UMB: Is it == 0?
 36237                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 36238                                  
 36239                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 36240                                  	retn
 36241                                  
 36242                                  	;mov	al,1
 36243                                  	;clc
 36244                                  ;llX:
 36245                                  	;pop	ds		; Return DS to where it was
 36246                                  	;retn
 36247                                  
 36248                                  %endif
 36249                                  
 36250                                  ; -----------------------------------------------------------------------------
 36251                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 36252                                  ; -----------------------------------------------------------------------------
 36253                                  ; ENTRY:  None
 36254                                  ; EXIT:   None
 36255                                  ; ERROR:  None
 36256                                  ; USES:   Flags, fm_strat, fm_umb
 36257                                  ; -----------------------------------------------------------------------------
 36258                                  
 36259                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36260                                  	; (SYSINIT:322Fh)
 36261                                  HideUMBs:
 36262                                  	; 01/01/2023
 36263                                  	;push	ax
 36264                                  	;push	cx
 36265                                  	;push	ds
 36266 00002DE4 06                      	push	es
 36267                                  
 36268                                  	; 01/01/2023
 36269                                  	; ds = cs
 36270                                  
 36271 00002DE5 E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 36272 00002DE8 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 36273                                  
 36274 00002DEA E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 36275                                  	
 36276                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 36277                                  	; 01/01/2023
 36278 00002DED E8DCFD                  	call	fm_link
 36279                                  
 36280                                  	;putdata fInHigh,1	; Remember that we're now running high
 36281                                  	;mov	byte [cs:fInHigh],1
 36282                                  	; 01/01/2023
 36283 00002DF0 C606[2E20]01            	mov	byte [fInHigh],1
 36284                                  
 36285                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 36286                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 36287                                  	; 01/01/2023
 36288 00002DF5 A0[3220]                	mov	al,[UmbLoad]
 36289                                  
 36290 00002DF8 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 36291 00002DFA 7420                    	je	short husX	; then we shouldn't do this loop:
 36292                                  
 36293 00002DFC 31C9                    	xor	cx,cx
 36294                                  
 36295                                  ; -----------------------------------------------
 36296                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 36297                                  ; -----------------------------------------------
 36298                                  
 36299 00002DFE 41                      hus10:	inc	cx		; For each UMB:
 36300                                  	; 01/01/2023
 36301 00002DFF 80F910                  	cmp	cl,MAXUMB
 36302                                  	;cmp	cx,MAXUMB ; 16
 36303 00002E02 730E                    	jae	short hus20
 36304                                  
 36305 00002E04 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 36306 00002E06 06                      	push	es
 36307 00002E07 E8A200                  	call	findUMB		; valid range of UMBs)
 36308 00002E0A 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 36309 00002E0B 7205                    	jc	short hus20
 36310                                  	
 36311                                  	; 02/01/2023
 36312                                  	;push	cx ; *
 36313 00002E0D E84F01                  	call	_hideUMB_	; hide what we need to hide.
 36314                                  	;pop	cx ; *
 36315                                  
 36316 00002E10 EBEC                    	jmp	short hus10
 36317                                  hus20:	
 36318                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 36319                                  	; 01/01/2023
 36320                                  	; ds = cs
 36321                                  	;mov	al,[UmbLoad]
 36322                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 36323 00002E12 800E[3220]00            	or	byte [UmbLoad],0
 36324                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 36325 00002E17 7503                    	jnz	short husX	; If not, we're done.
 36326                                  
 36327 00002E19 E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 36328                                  husX:	
 36329 00002E1C 07                      	pop	es
 36330                                  	; 01/01/2023
 36331                                  	;pop	ds
 36332                                  	;pop	cx
 36333                                  	;pop	ax
 36334 00002E1D C3                      	retn
 36335                                  
 36336                                  ; -----------------------------------------------------------------------------
 36337                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 36338                                  ; -----------------------------------------------------------------------------
 36339                                  ; ENTRY:  None
 36340                                  ; EXIT:   AL == load UMB
 36341                                  ; ERROR:  None
 36342                                  ; USES:   Flags, AX
 36343                                  ; -----------------------------------------------------------------------------
 36344                                  
 36345                                  ;GetLoadUMB:
 36346                                  ;	;getdata al, UmbLoad
 36347                                  ;	push	ds
 36348                                  ;	push	cs
 36349                                  ;	pop	ds
 36350                                  ;	mov	al,[UmLoad]
 36351                                  ;	pop	ds
 36352                                  ;	retn
 36353                                  
 36354                                  ; -----------------------------------------------------------------------------
 36355                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36356                                  ; -----------------------------------------------------------------------------
 36357                                  ; ENTRY:  None
 36358                                  ; EXIT:   AX == load UMB minimum size
 36359                                  ; ERROR:  None
 36360                                  ; USES:   Flags, AX
 36361                                  ; -----------------------------------------------------------------------------
 36362                                  
 36363                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36364                                  %if 0
 36365                                  	; 01/01/2023 - Retro DOS v4.2
 36366                                  GetLoadSize:
 36367                                  	; 09/04/2019 - Retro DOS v4.0
 36368                                  	;mov	al,[cs:UmbLoad]
 36369                                  	; 01/01/2023
 36370                                  	; ds = cs
 36371                                  	mov	al,[UmbLoad] 
 36372                                  	;jmp	short GetSize
 36373                                  
 36374                                  	;push	bx
 36375                                  	;;push	si
 36376                                  	;push	ds
 36377                                  	;push	cs
 36378                                  	;pop	ds
 36379                                  
 36380                                  	;mov	al,[UmbLoad]
 36381                                  
 36382                                  	;xor	ah,ah			;    ax==UMB
 36383                                  	;mov	bx,UmbSize		;    bx==array
 36384                                  	;shl	al,1	                ;    ax==offset
 36385                                  	;;add	ax,bx			;    ax==element index
 36386                                  	;;mov	si,ax			; ds:si==element index
 36387                                  
 36388                                  	;;lodsw				;    hh
 36389                                  
 36390                                  	;add	bx,ax
 36391                                  	;mov	ax,[bx]
 36392                                  
 36393                                  	;pop	ds
 36394                                  	;;pop	si
 36395                                  	;pop	bx
 36396                                  	;retn
 36397                                  %endif
 36398                                  
 36399                                  ; -----------------------------------------------------------------------------
 36400                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 36401                                  ; -----------------------------------------------------------------------------
 36402                                  ; ENTRY:  AL == a UMB number
 36403                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 36404                                  ; ERROR:  None
 36405                                  ; USES:   Flags, AX
 36406                                  ; -----------------------------------------------------------------------------
 36407                                  
 36408                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36409                                  GetLoadSize:
 36410                                  	; ds = cs
 36411                                  	;mov	al,[UmbLoad]
 36412                                  	; al = [UmbLoad] 
 36413                                  	; ....
 36414                                  
 36415                                  	; 01/01/2023 - Retro DOS v4.2
 36416                                  GetSize:
 36417                                  	; 09/04/2019 - Retro DOS v4.0
 36418                                  
 36419                                  	;push	bx ; 01/01/2023
 36420                                  	;push	si
 36421                                  	;push	ds
 36422                                  	;push	cs
 36423                                  	;pop	ds
 36424                                  
 36425 00002E1E 30E4                    	xor	ah,ah			;    ax==UMB
 36426 00002E20 BB[4320]                	mov	bx,UmbSize		;    bx==array
 36427 00002E23 D0E0                    	shl	al,1	                ;    ax==offset
 36428                                  	;add	ax,bx			;    ax==element index
 36429                                  	;mov	si,ax			; ds:si==element index
 36430                                  
 36431                                  	;lodsw				;    ax==size
 36432                                  
 36433 00002E25 01C3                    	add	bx,ax
 36434                                  	; 01/01/2023
 36435                                  	; ds = cs
 36436 00002E27 8B07                    	mov	ax,[bx]
 36437                                  	;mov	ax,[cs:bx]
 36438                                  
 36439                                  	;pop	ds
 36440                                  	;pop	si
 36441                                  	;pop	bx ; 01/01/2023
 36442                                  sls10:	; 08/09/2023
 36443 00002E29 C3                      	retn
 36444                                  
 36445                                  ; -----------------------------------------------------------------------------
 36446                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 36447                                  ; -----------------------------------------------------------------------------
 36448                                  ; ENTRY:   AL == new load UMB
 36449                                  ; EXIT:    None
 36450                                  ; ERROR:   None
 36451                                  ; USES:    Flags, AX
 36452                                  ; -----------------------------------------------------------------------------
 36453                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 36454                                  ;          time you would ever need this, so that's okay.
 36455                                  ; -----------------------------------------------------------------------------
 36456                                  
 36457                                  ; StoLoadUMB subroutine is not used anywhere
 36458                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 36459                                  ; Erdogan Tan - 18/07/2023
 36460                                  
 36461                                  ;StoLoadUMB:
 36462                                  ;	;putdata UmbLoad, al
 36463                                  ;	push	es
 36464                                  ;	push	cs
 36465                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 36466                                  ;	mov	[es:UmbLoad],al
 36467                                  ;	pop	es
 36468                                  ;	retn
 36469                                  
 36470                                  ; -----------------------------------------------------------------------------
 36471                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36472                                  ; -----------------------------------------------------------------------------
 36473                                  ; ENTRY:  AL == new load size
 36474                                  ; EXIT:   None
 36475                                  ; ERROR:  None
 36476                                  ; USES:   Flags, AX
 36477                                  ; -----------------------------------------------------------------------------
 36478                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 36479                                  	; 01/01/2023 - Retro DOS v4.2
 36480                                  StoLoadSize:
 36481                                  	; 01/01/2023
 36482                                  	;push	dx
 36483                                  
 36484                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 36485                                  	;
 36486                                  	;push	ds
 36487                                  	;push	cs
 36488                                  	;pop	ds
 36489                                  	;mov	dl,[UmbLoad]
 36490                                  	;pop	ds	
 36491                                  
 36492                                  	; 08/09/2023
 36493                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 36494                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 36495                                  
 36496                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 36497                                  					; instead of DL (*) ; 18/07/2023
 36498                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 36499                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 36500                                  	;je	short sls10
 36501                                  			
 36502                                  		; BUG ! stowSiz uses CL instead of DL !
 36503                                  		; (CL is set in ParseL which calls stowSiz)
 36504                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 36505                                  		; Erdogan Tan - 18/07/2023
 36506                                  
 36507                                  	; 08/09/2023 (BugFix)
 36508                                  	;mov	cl,[cs:UmbLoad]
 36509                                  	; 08/09/2023 
 36510                                  	; ds = cs
 36511 00002E2A 8A0E[3220]              	mov	cl,[UmbLoad]
 36512 00002E2E 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 36513 00002E31 74F6                    	je	short sls10 
 36514                                  
 36515                                  	; 08/09/2023
 36516                                  ;	call	stowSiz			; We've got a function to do just this
 36517                                  ;sls10:	
 36518                                  ;	; 01/01/2023
 36519                                  ;	;pop	dx
 36520                                  ;	retn
 36521                                  	
 36522                                  	; 08/09/2023
 36523                                  	;;jmp	stowSiz
 36524                                  	;jmp	short stowSiz
 36525                                  
 36526                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36527                                  %if 1
 36528                                  ; -----------------------------------------------------------------------------
 36529                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36530                                  ; -----------------------------------------------------------------------------
 36531                                  ; ENTRY:    CL contains UMB number, AX contains size
 36532                                  ; EXIT:     None
 36533                                  ; ERROR:    None
 36534                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36535                                  ; -----------------------------------------------------------------------------
 36536                                  
 36537                                  ; 13/05/2019
 36538                                  
 36539                                  	; 01/01/2023 - Retro DOS v4.2
 36540                                  stowSiz:
 36541                                  	; 01/01/2023
 36542                                  	;push	bx
 36543                                  	;;push	di ; ?
 36544                                  	;push	es
 36545                                  
 36546                                  	;push	cs
 36547                                  	;pop	es	
 36548                                  
 36549 00002E33 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 36550 00002E35 B700                    	mov	bh,0			;     bx==UMB number, AX==size
 36551 00002E37 D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 36552                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36553                                  	; 01/01/2023
 36554 00002E39 2E8987[4320]            	mov	[cs:bx+UmbSize],ax	; Store the size
 36555                                  
 36556                                  	; 01/01/2023
 36557                                  	;pop	es
 36558                                  	;;pop	di ; ?
 36559                                  	;pop	bx
 36560                                  
 36561 00002E3E C3                      	retn
 36562                                  %endif
 36563                                  
 36564                                  ; -----------------------------------------------------------------------------
 36565                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 36566                                  ; -----------------------------------------------------------------------------
 36567                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 36568                                  ; EXIT:     None; free elements in UMB marked as hidden
 36569                                  ; ERROR:    None
 36570                                  ; USES:     Flags
 36571                                  ; -----------------------------------------------------------------------------
 36572                                  
 36573                                  	; 01/01/2023 - Retro DOS v4.2
 36574                                  hideUMB:
 36575                                  	; 02/01/2023
 36576 00002E3F 52                      	push	dx ; (*)
 36577                                  	; 01/01/2023
 36578                                  	;push	ax
 36579 00002E40 06                      	push	es
 36580                                  
 36581 00002E41 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 36582 00002E44 7224                    	jc	short huX
 36583                                  
 36584                                  ; ------------------------------------------------
 36585                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 36586                                  ;            we're not in the same UMB, so exit.
 36587                                  ; ------------------------------------------------
 36588                                  
 36589 00002E46 E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36590 00002E49 741F                    	jz	short huX	; If it is, we've finished the UMB.
 36591                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 36592 00002E4B 26830E010000            	or	word [es:ARENA.OWNER],0
 36593 00002E51 7503                    	jnz	short hu20
 36594                                  
 36595 00002E53 E81700                  	call	hideMCB
 36596                                  hu20:	
 36597                                  	;mov	al,[es:ARENA.SIGNATURE]
 36598                                  	;cmp	al,arena_signature_end  ;'Z'
 36599                                  	; 19/07/2023
 36600 00002E56 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 36601 00002E5C 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 36602                                  
 36603                                  	;NextMCB es,ax		; Go on forward.
 36604 00002E5E 8CC0                    	mov     ax,es
 36605                                  	;add	ax,[es:3]
 36606 00002E60 2603060300              	add     ax,[es:ARENA.SIZE]
 36607 00002E65 40                      	inc     ax
 36608 00002E66 8EC0                    	mov     es,ax
 36609                                  
 36610 00002E68 EBDC                    	jmp	short hu10
 36611                                  huX:	
 36612 00002E6A 07                      	pop	es
 36613                                  	; 01/01/2023
 36614                                  	;pop	ax
 36615                                  	; 02/01/2023
 36616 00002E6B 5A                      	pop	dx ; (*)
 36617 00002E6C C3                      	retn
 36618                                  
 36619                                  ; 02/01/2023
 36620                                  %if 0
 36621                                  
 36622                                  ; -----------------------------------------------------------------------------
 36623                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 36624                                  ; -----------------------------------------------------------------------------
 36625                                  ; ENTRY:    None
 36626                                  ; EXIT:     ZF set if user DIDN'T specify /S
 36627                                  ; ERROR:    None
 36628                                  ; USES:     Flags
 36629                                  ; -----------------------------------------------------------------------------
 36630                                  
 36631                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36632                                  isTiny:
 36633                                  	; 02/01/2023
 36634                                  	;push	ax
 36635                                  
 36636                                  	;getdata al,fUmbTiny
 36637                                  	;
 36638                                  	;push	ds
 36639                                  	;push	cs
 36640                                  	;pop	ds
 36641                                  	;mov	al,[fUmbTiny]
 36642                                  	;pop	ds
 36643                                  
 36644                                  	; 09/09/2023
 36645                                  	;mov	al,[cs:fUmbTiny]
 36646                                  	; 02/01/2023
 36647                                  	; ds = cs
 36648                                  	mov	al,[fUmbTiny]
 36649                                  
 36650                                  	or	al,al
 36651                                  	; 02/01/2023
 36652                                  	;pop	ax
 36653                                  	retn
 36654                                  
 36655                                  %endif
 36656                                  
 36657                                  ; -----------------------------------------------------------------------------
 36658                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 36659                                  ; -----------------------------------------------------------------------------
 36660                                  ; ENTRY:    ES:0 should point to an MCB
 36661                                  ; EXIT:     ZF set if MCB is free, else !ZF
 36662                                  ; ERROR:    None
 36663                                  ; USES:     Flags
 36664                                  ; -----------------------------------------------------------------------------
 36665                                  
 36666                                  ;isFreeMCB:
 36667                                  ;	or	word [es:ARENA.OWNER],0
 36668                                  ;	retn
 36669                                  
 36670                                  ; -----------------------------------------------------------------------------
 36671                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 36672                                  ; -----------------------------------------------------------------------------
 36673                                  ; ENTRY:    ES:0 should point to an MCB
 36674                                  ; EXIT:     None; MCB marked as HIDDEN
 36675                                  ; ERROR:    None
 36676                                  ; USES:     None
 36677                                  ; -----------------------------------------------------------------------------
 36678                                  
 36679                                  hideMCB:
 36680 00002E6D 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 36681 00002E74 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 36682 00002E7B 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 36683 00002E82 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 36684 00002E89 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 36685 00002E90 C3                      	retn
 36686                                  
 36687                                  ; -----------------------------------------------------------------------------
 36688                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 36689                                  ; -----------------------------------------------------------------------------
 36690                                  ; ENTRY:    ES:0 should point to an MCB
 36691                                  ; EXIT:     None; MCB marked as FREE
 36692                                  ; ERROR:    None
 36693                                  ; USES:     None
 36694                                  ; -----------------------------------------------------------------------------
 36695                                  
 36696                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36697                                  
 36698                                  unHideMCB:
 36699                                  	; 03/01/2023
 36700                                  	;push	ax
 36701 00002E91 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 36702 00002E98 B82020                  	mov	ax,'  ' ; 2020h
 36703 00002E9B 26A30800                	mov	[es:ARENA.NAME+0],ax
 36704 00002E9F 26A30A00                	mov	[es:ARENA.NAME+2],ax
 36705 00002EA3 26A30C00                	mov	[es:ARENA.NAME+4],ax
 36706 00002EA7 26A30E00                	mov	[es:ARENA.NAME+6],ax
 36707                                  	; 03/01/2023
 36708                                  	;pop	ax
 36709 00002EAB C3                      	retn
 36710                                  
 36711                                  ; -----------------------------------------------------------------------------
 36712                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 36713                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 36714                                  ; -----------------------------------------------------------------------------
 36715                                  ; ENTRY:    AL should be to a valid UMB number
 36716                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 36717                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 36718                                  ; USES:     Flags, ES
 36719                                  ; -----------------------------------------------------------------------------
 36720                                  
 36721                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36722                                  	; (SYSINIT:3344h)
 36723                                  findUMB:
 36724                                  	; 01/01/2023
 36725                                  	;push	ax
 36726                                  	; 02/01/2023
 36727 00002EAC 51                      	push	cx ; *
 36728                                  	;push	dx
 36729                                  
 36730 00002EAD 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 36731                                  
 36732 00002EAF 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 36733                                  
 36734 00002EB1 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 36735                                  	; 22/07/2023
 36736                                  	;mov	es,ax ; *
 36737 00002EB4 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 36738                                  
 36739                                  	; 22/07/2023
 36740                                  fu10:
 36741 00002EB6 8EC0                    	mov	es,ax ; * ; **
 36742                                  ; ---------------------------------------------
 36743                                  ; FU10--CX - This UMB number; 0 == conventional
 36744                                  ;       DX - The UMB number they're looking for
 36745                                  ;       ES - The current MCB address
 36746                                  ; ---------------------------------------------
 36747                                  
 36748                                  ;fu10:	
 36749 00002EB8 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 36750 00002EBA 7417                    	je	short fuX	; searching for--so exit.
 36751                                  
 36752 00002EBC E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36753 00002EBF 7501                    	jnz	short fu20
 36754                                  
 36755 00002EC1 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 36756                                  fu20:	
 36757                                  	;mov	al,[es:ARENA.SIGNATURE]
 36758                                  	;cmp	al,arena_signature_end ; 'Z'
 36759                                  	; 19/07/2023
 36760 00002EC2 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 36761 00002EC8 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 36762                                  
 36763                                  	;NextMCB es,ax		; Go on forward.
 36764                                  	; 22/07/2023
 36765                                  	; ax = es
 36766                                  	;mov	ax,es ; * ; 22/07/2023
 36767                                  	;add	ax,[es:3]
 36768 00002ECA 2603060300              	add	ax,[es:ARENA.SIZE]
 36769 00002ECF 40                      	inc	ax
 36770                                  	; 22/07/2023
 36771                                  	;mov	es,ax ; **
 36772 00002ED0 EBE4                    	jmp	short fu10
 36773                                  fuE:	
 36774 00002ED2 F9                      	stc
 36775                                  fuX:
 36776                                  	; 01/01/2023
 36777                                  	;pop	dx
 36778                                  	; 02/01/2023
 36779 00002ED3 59                      	pop	cx ; *
 36780                                  	;pop	ax		; The address is already in ES.
 36781 00002ED4 C3                      	retn
 36782                                  
 36783                                  ; -----------------------------------------------------------------------------
 36784                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 36785                                  ; -----------------------------------------------------------------------------
 36786                                  ; ENTRY:    AL should be to a valid UMB number
 36787                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 36788                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 36789                                  ; USES:     Flags, ES
 36790                                  ; -----------------------------------------------------------------------------
 36791                                  
 36792                                  	; 01/01/2023 - Retro DOS v4.2
 36793                                  BigFree:
 36794                                  	; 01/01/2023
 36795                                  	;push	bx
 36796 00002ED5 51                      	push	cx
 36797                                  
 36798 00002ED6 E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 36799 00002ED9 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 36800                                  
 36801 00002EDB 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 36802 00002EDD 31C9                    	xor	cx,cx			; Size of largest free MCB
 36803                                  
 36804                                  ; ---------------------------------------------
 36805                                  ; BF10--ES - Current MCB address
 36806                                  ;       BX - Address of largest free MCB so far
 36807                                  ;       CX - Size of largest free MCB so far
 36808                                  ; ---------------------------------------------
 36809                                  
 36810                                  bf10:	
 36811 00002EDF E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 36812 00002EE2 7428                    	jz	short bf30
 36813                                  
 36814                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 36815 00002EE4 26830E010000            	or	word [es:ARENA.OWNER],0
 36816 00002EEA 750C                    	jnz	short bf20
 36817                                  
 36818 00002EEC 26A10300                	mov	ax,[es:ARENA.SIZE]
 36819                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 36820 00002EF0 39C1                    	cmp	cx,ax
 36821                                  	;jg	short bf20		; Unless we're bigger,
 36822                                  	; 19/07/2023
 36823 00002EF2 7D04                    	jge	short bf20
 36824                                  
 36825 00002EF4 8CC3                    	mov	bx,es			; Store this new element's address,
 36826                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 36827 00002EF6 89C1                    	mov	cx,ax
 36828                                  
 36829                                  bf20:	
 36830                                  	;mov	al,[es:ARENA.SIGNATURE]
 36831                                  	;cmp	al,arena_signature_end	; 'Z'
 36832                                  	; 19/07/2023
 36833                                  	;cmp	byte [es:0],'Z'
 36834 00002EF8 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36835 00002EFE 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 36836                                  
 36837                                  	;NextMCB es,ax			; Go on forward.
 36838 00002F00 8CC0                    	mov     ax,es
 36839                                  	;add	ax,[es:3]
 36840 00002F02 2603060300              	add     ax,[es:ARENA.SIZE]
 36841 00002F07 40                      	inc     ax
 36842 00002F08 8EC0                    	mov     es,ax
 36843                                  
 36844 00002F0A EBD3                    	jmp	short bf10
 36845                                  
 36846 00002F0C 8EC3                    bf30:	mov	es,bx			; Return the address
 36847 00002F0E 89C8                    	mov	ax,cx			; Return the size
 36848 00002F10 09DB                    	or	bx,bx
 36849 00002F12 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 36850                                  bfE:	
 36851 00002F14 F9                      	stc
 36852                                  bfX:
 36853 00002F15 59                      	pop	cx
 36854                                  	; 01/01/2023
 36855                                  	;pop	bx
 36856 00002F16 C3                      	retn
 36857                                  
 36858                                  ; -----------------------------------------------------------------------------
 36859                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36860                                  ; -----------------------------------------------------------------------------
 36861                                  ; ENTRY:    AL should be to a valid UMB number
 36862                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 36863                                  ; ERROR:    None
 36864                                  ; USES:     Flags
 36865                                  ; -----------------------------------------------------------------------------
 36866                                  
 36867                                  	; 02/01/2023 - Retro DOS v4.2
 36868                                  
 36869                                  isSpecified:
 36870                                  	; 02/01/2023
 36871                                  	;push	ax
 36872                                  
 36873 00002F17 30FF                    	xor	bh,bh
 36874 00002F19 88C3                    	mov	bl,al
 36875                                  
 36876                                  	;getdata al,DS:UmbUsed[bx]
 36877                                  	;
 36878                                  	;push	ds
 36879                                  	;push	cs
 36880                                  	;pop	ds
 36881                                  	;mov	al,[bx+UmbUsed]
 36882                                  	;pop	ds
 36883                                  	
 36884                                  	;mov	al,[cs:bx+UmbUsed]
 36885                                  	; 02/01/2023
 36886                                  	; ds = cs
 36887 00002F1B 8A87[3320]              	mov	al,[bx+UmbUsed]
 36888                                  
 36889 00002F1F 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 36890                                  
 36891                                  	; 09/09/2023
 36892                                  	; 02/01/2023
 36893                                  	;pop	ax
 36894                                  
 36895 00002F21 C3                      	retn
 36896                                  
 36897                                  ; -----------------------------------------------------------------------------
 36898                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 36899                                  ; -----------------------------------------------------------------------------
 36900                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 36901                                  ; EXIT:     None; MCB broken if carry clear
 36902                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 36903                                  ; USES:     Flags
 36904                                  ; -----------------------------------------------------------------------------
 36905                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 36906                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 36907                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 36908                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 36909                                  ; minimum for performing a split.
 36910                                  ; -----------------------------------------------------------------------------
 36911                                  
 36912                                  MIN_SPLIT_SIZE	equ	20h
 36913                                  
 36914                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36915                                  
 36916                                  shrinkMCB:
 36917                                  	;pushreg <bx,cx,es>
 36918                                  	; 02/01/2023
 36919                                  	;push	bx
 36920 00002F22 51                      	push	cx
 36921 00002F23 06                      	push	es
 36922                                  
 36923 00002F24 89C3                    	mov	bx,ax			; Move things around... and
 36924                                  	; 02/01/2023
 36925                                  	;mov	ax,es			; save this one for later.
 36926                                  
 36927 00002F26 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 36928                                  	; 02/01/2023
 36929 00002F2B 89C8                    	mov	ax,cx 
 36930                                  
 36931 00002F2D 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 36932                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 36933                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 36934                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 36935                                  	; 18/12/2022
 36936                                  	;cmp	cx,bx
 36937                                  	; 02/01/2023
 36938 00002F30 39D8                    	cmp	ax,bx
 36939 00002F32 7228                    	jb	short smE ; (*)
 36940                                  
 36941 00002F34 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 36942                                  	
 36943                                  	;mov	cx,[es:ARENA.SIZE]
 36944                                  	; 02/01/2023
 36945 00002F39 8CC0                    	mov	ax,es
 36946                                  
 36947 00002F3B 26891E0300              	mov	[es:ARENA.SIZE],bx
 36948 00002F40 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 36949                                  
 36950 00002F46 01D8                    	add	ax,bx
 36951 00002F48 40                      	inc	ax
 36952 00002F49 8EC0                    	mov	es,ax			; Move to new arena area
 36953                                  
 36954 00002F4B 89C8                    	mov	ax,cx
 36955 00002F4D 29D8                    	sub	ax,bx
 36956                                  	; 12/12/2022
 36957                                  	; ax > 0
 36958 00002F4F 48                      	dec	ax			; And prepare the new size
 36959                                  
 36960                                  	; 18/12/2022
 36961 00002F50 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 36962                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 36963 00002F55 26A30300                	mov	[es:ARENA.SIZE],ax
 36964                                  	;mov	ax,'  ' ; 2020h
 36965                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 36966                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 36967                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 36968                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 36969                                  
 36970                                  	; 18/12/2022
 36971 00002F59 E8A801                  	call	freeMCB	; (**)
 36972                                  
 36973                                  	; 12/12/2022
 36974                                  	; cf=0
 36975                                  	;clc
 36976                                  	; 18/12/2022
 36977                                  	;jmp	short smX
 36978                                  smE:	
 36979                                  	; 18/12/2022
 36980                                  	; cf=1 (*)
 36981                                  	;stc
 36982                                  smX:	
 36983                                  	;popreg	<es,cx,bx>
 36984 00002F5C 07                      	pop	es
 36985 00002F5D 59                      	pop	cx
 36986                                  	; 02/01/2023
 36987                                  	;pop	bx
 36988 00002F5E C3                      	retn
 36989                                  
 36990                                  ; -----------------------------------------------------------------------------
 36991                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 36992                                  ; -----------------------------------------------------------------------------
 36993                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 36994                                  ; EXIT:     None; UMB is hidden as necessary
 36995                                  ; ERROR:    None
 36996                                  ; USES:     Flags, AX, CX
 36997                                  ; -----------------------------------------------------------------------------
 36998                                  ; PRIMARY LOGIC:
 36999                                  ;
 37000                                  ; If the UMB is specified in the DH/LH statement, then:
 37001                                  ;    If the largest free segment is too small (check specified size), then:
 37002                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37003                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37004                                  ;       If /S was given on the command-line, then:
 37005                                  ;          Break that element into two pieces
 37006                                  ;          Set a flag that we're shrinking
 37007                                  ;       Endif
 37008                                  ;    Endif
 37009                                  ; Endif
 37010                                  ; If the UMB is NOT specified (or was removed by the above):
 37011                                  ;    Hide all free elements in the UMB
 37012                                  ;    If the flag that we're shrinking was set, then:
 37013                                  ;       UN-hide the lower portion of the shrunken UMB
 37014                                  ;    ENDIF
 37015                                  ; ENDIF
 37016                                  ; -----------------------------------------------------------------------------
 37017                                  
 37018                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37019                                  	; (SYSINIT:3426h)
 37020                                  _hideUMB_:
 37021                                  	; 02/01/2023
 37022                                  	; ds = cs
 37023                                  
 37024                                  	; 01/01/2023
 37025                                  	;push	bx
 37026                                  	;push	dx
 37027 00002F5F 06                      	push	es
 37028                                  
 37029 00002F60 88C8                    	mov	al,cl
 37030 00002F62 E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37031 00002F65 742D                    	jz	short hu_20
 37032                                  
 37033 00002F67 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37034 00002F69 E869FF                  	call	BigFree		; free element in AX; put its address in ES
 37035 00002F6C 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 37036                                  
 37037 00002F6E 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37038 00002F6F 88C8                    	mov	al,cl		; Retrieve the user's specified
 37039 00002F71 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 37040 00002F74 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37041                                  
 37042 00002F75 09C0                    	or	ax,ax		; If they didn't specify one,
 37043 00002F77 741B                    	jz	short hu_20	; Skip over all this.
 37044                                  
 37045 00002F79 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37046 00002F7B 7607                    	jbe	short hu_10
 37047                                  
 37048 00002F7D 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37049 00002F7F E81DFD                  	call	unMarkUMB
 37050 00002F82 EB10                    	jmp	short hu_20
 37051                                  hu_10:	
 37052                                  	;call	isTiny		; Returns ZF clear if user specified /S
 37053                                  	;jz	short hu_20
 37054                                  	; 02/01/2023
 37055                                  ;isTiny:
 37056                                  	;mov	al,[fUmbTiny] ; ds = cs
 37057                                  	;or	al,al
 37058 00002F84 800E[2F20]00            	or	byte [fUmbTiny],0
 37059 00002F89 7409                    	jz	short hu_20
 37060                                  
 37061 00002F8B E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37062 00002F8E 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 37063                                  
 37064 00002F90 8CC2                    	mov	dx,es
 37065 00002F92 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 37066                                  
 37067 00002F94 89C8                    hu_20:	mov	ax,cx
 37068 00002F96 E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 37069 00002F99 7510                    	jnz	short hu_X	; so leave.
 37070                                  
 37071 00002F9B 31D2                    	xor	dx,dx
 37072                                  hu_30:	
 37073 00002F9D 88C8                    	mov	al,cl
 37074                                  
 37075 00002F9F E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 37076                                  
 37077 00002FA2 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37078 00002FA4 7405                    	jz	short hu_X	; So we should leave.
 37079                                  
 37080 00002FA6 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37081 00002FA8 E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37082                                  hu_X:	
 37083 00002FAB 07                      	pop	es
 37084                                  	; 01/01/2023
 37085                                  	;pop	dx
 37086                                  	;pop	bx
 37087 00002FAC C3                      	retn
 37088                                  
 37089                                  ; -----------------------------------------------------------------------------
 37090                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 37091                                  ; -----------------------------------------------------------------------------
 37092                                  ; Entry:  None
 37093                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 37094                                  ; Error:  None
 37095                                  ; Uses:   Flags
 37096                                  ; -----------------------------------------------------------------------------
 37097                                  
 37098                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37099                                  UnFreeze:
 37100                                  	; 03/01/2023
 37101                                  	;push	ax
 37102 00002FAD 06                      	push	es
 37103                                  
 37104 00002FAE E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 37105 00002FB1 721C                    	jc	short ufX
 37106                                  
 37107                                  	; 22/07/2023
 37108                                  uf10:
 37109 00002FB3 8EC0                    	mov	es,ax ; *
 37110                                  
 37111                                  ; ------------------------------
 37112                                  ; UF10--ES - Current MCB address
 37113                                  ; ------------------------------
 37114                                  
 37115                                  ;uf10:	
 37116 00002FB5 E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 37117 00002FB8 7505                    	jnz	short uf20
 37118 00002FBA E8D4FE                  	call	unHideMCB
 37119                                  	; 09/09/2023
 37120                                  	; ax <> es
 37121 00002FBD 8CC0                    	mov	ax,es ; *
 37122                                  uf20:	
 37123                                  	;mov	al,[es:ARENA.SIGNATURE]
 37124                                  	;cmp	al,arena_signature_end ; 'Z'
 37125                                  	; 22/07/2023
 37126 00002FBF 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37127 00002FC5 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 37128                                  
 37129                                  	;NextMCB es,ax		; Go on forward.
 37130                                  	; 22/07/2023
 37131                                  	; ax = es
 37132                                  	;mov	ax,es ; *
 37133                                  	;add	ax,[es:3]
 37134 00002FC7 2603060300              	add	ax,[es:ARENA.SIZE]
 37135 00002FCC 40                      	inc	ax
 37136                                  	; 22/07/2023
 37137                                  	;mov	es,ax
 37138 00002FCD EBE4                    	jmp	short uf10
 37139                                  ufX:	
 37140 00002FCF 07                      	pop	es
 37141                                  	; 03/01/2023
 37142                                  	;pop	ax
 37143 00002FD0 C3                      	retn
 37144                                  
 37145                                  ; -----------------------------------------------------------------------------
 37146                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 37147                                  ; -----------------------------------------------------------------------------
 37148                                  ; ENTRY:    ES:0 should point to an MCB
 37149                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 37150                                  ; ERROR:    None
 37151                                  ; USES:     Flags
 37152                                  ; -----------------------------------------------------------------------------
 37153                                  
 37154                                  isFrozMCB:
 37155                                  	;push	ax
 37156                                  
 37157                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37158                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37159 00002FD1 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 37160 00002FD7 7522                    	jne	short ifmX
 37161                                  
 37162                                  	;mov	ax,[es:ARENA.NAME+0]
 37163                                  	;cmp	ax,'FR' ; 5246h
 37164 00002FD9 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 37165 00002FE0 7519                    	jne	short ifmX
 37166                                  	;mov	ax,[es:ARENA.NAME+2]
 37167                                  	;cmp	ax,'OZ' ; 5A4Fh
 37168 00002FE2 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 37169 00002FE9 7510                    	jne	short ifmX
 37170                                  	;mov	ax,[es:ARENA.NAME+4]
 37171                                  	;cmp	ax,'EN' ; 4E45h
 37172 00002FEB 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37173 00002FF2 7507                    	jne	short ifmX
 37174                                  	;mov	ax,[es:ARENA.NAME+6]
 37175                                  	;cmp	ax,'  ' ; 2020h
 37176 00002FF4 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37177                                  ifmX:	
 37178                                  	;pop	ax
 37179 00002FFB C3                      	retn
 37180                                  
 37181                                  ; -----------------------------------------------------------------------------
 37182                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 37183                                  ; -----------------------------------------------------------------------------
 37184                                  ; ENTRY:    ES:0 should point to an MCB
 37185                                  ; EXIT:     None; MCB frozen
 37186                                  ; ERROR:    None
 37187                                  ; USES:     None
 37188                                  ; -----------------------------------------------------------------------------
 37189                                  
 37190                                  frezMCB:
 37191 00002FFC 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37192 00003003 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 37193 0000300A 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 37194 00003011 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 37195 00003018 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 37196 0000301F C3                      	retn
 37197                                  
 37198                                  ; -----------------------------------------------------------------------------
 37199                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 37200                                  ; -----------------------------------------------------------------------------
 37201                                  ; Entry:  None
 37202                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 37203                                  ; Error:  None
 37204                                  ; Uses:   Flags
 37205                                  ; -----------------------------------------------------------------------------
 37206                                  
 37207                                  	; 01/01/2023 - Retro DOS v4.2  
 37208                                  FreezeUM:
 37209                                  	; 01/01/2023
 37210                                  	;push	ax
 37211                                  	;push	cx
 37212                                  	;push	dx
 37213 00003020 06                      	push	es
 37214                                  
 37215                                  	;;call	GetLoadUMB
 37216                                  	; 01/01/2023
 37217                                  	; ds = cs
 37218                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 37219 00003021 A0[3220]                	mov	al,[UmbLoad] 	
 37220                                  
 37221 00003024 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37222 00003026 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 37223                                  
 37224 00003028 E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 37225                                  	; 22/07/2023
 37226                                  	;mov	es,ax ; *
 37227 0000302B 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37228                                  
 37229                                  	; 22/07/2023
 37230                                  fum10:
 37231 0000302D 8EC0                    	mov	es,ax ; *
 37232                                  
 37233                                  ; -----------------------------------------
 37234                                  ; FUM10--ES - Current MCB address
 37235                                  ;        CX - Current UMB number
 37236                                  ;        DX - UMB number to skip (load UMB)
 37237                                  ; -----------------------------------------
 37238                                  
 37239                                  ;fum10:	
 37240 0000302F E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37241 00003032 7501                    	jnz	short fum20
 37242                                  
 37243 00003034 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37244                                  fum20:	
 37245 00003035 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 37246 00003037 740B                    	je	short fum30	; freeze anything... so skip that section.
 37247                                  
 37248                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 37249 00003039 26830E010000            	or	word [es:ARENA.OWNER],0
 37250 0000303F 7503                    	jnz	short fum30	; either.
 37251                                  
 37252 00003041 E8B8FF                  	call	frezMCB
 37253                                  fum30:	
 37254                                  	;mov	al,[es:ARENA.SIGNATURE]
 37255                                  	;cmp	al,arena_signature_end ; 'Z'
 37256                                  	; 22/07/2023
 37257 00003044 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37258 0000304A 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 37259                                  
 37260                                  	;NextMCB es, ax		; Go on forward.
 37261                                  	; 22/07/2023
 37262                                  	; ax = es
 37263                                  	;mov	ax,es
 37264                                  	;add	ax,[es:3]
 37265 0000304C 2603060300              	add	ax,[es:ARENA.SIZE]
 37266 00003051 40                      	inc	ax
 37267                                  	; 22/07/2023
 37268                                  	;mov	es,ax ; *
 37269 00003052 EBD9                    	jmp	short fum10
 37270                                  
 37271 00003054 07                      fumX:	pop	es
 37272                                  	; 01/01/2023
 37273                                  	;pop	dx
 37274                                  	;pop	cx
 37275                                  	;pop	ax
 37276 00003055 C3                      	retn
 37277                                  
 37278                                  ; -----------------------------------------------------------------------------
 37279                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 37280                                  ; -----------------------------------------------------------------------------
 37281                                  ; ENTRY:    None
 37282                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 37283                                  ; ERROR:    None
 37284                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 37285                                  ; -----------------------------------------------------------------------------
 37286                                  
 37287                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37288                                  UmbTest:
 37289                                  	; 01/01/2023
 37290                                  	;push	ax
 37291 00003056 53                      	push	bx ; *
 37292                                  	;push	ds
 37293 00003057 06                      	push	es ; **
 37294                                  
 37295                                  	; 01/01/2023
 37296                                  	; ds = cs
 37297                                  
 37298 00003058 E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 37299 0000305B E80800                  	call	WalkMem			; Check to see if they're really linked
 37300 0000305E 9C                      	pushf				; And remember what we found out
 37301 0000305F E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 37302 00003062 9D                      	popf				; And restore what we found out.
 37303                                  
 37304 00003063 07                      	pop	es ; **
 37305                                  	; 01/01/2023
 37306                                  	;pop	ds
 37307 00003064 5B                      	pop	bx ; *
 37308                                  	;pop	ax
 37309 00003065 C3                      	retn
 37310                                  
 37311                                  ; -----------------------------------------------------------------------------
 37312                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 37313                                  ; -----------------------------------------------------------------------------
 37314                                  ; ENTRY:    None
 37315                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 37316                                  ; ERROR:    None
 37317                                  ; USES:     Flags
 37318                                  ; -----------------------------------------------------------------------------
 37319                                  
 37320                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37321                                  	; (SYSINIT:3541h)
 37322                                  
 37323                                  WalkMem:
 37324                                  	;push	ax ; ?
 37325                                  	;push	bx ; ?
 37326                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 37327                                  	;push	es ; ? no need to save contents of these registers ?
 37328                                  		   	
 37329 00003066 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37330 00003068 CD21                    	int	21h
 37331                                  
 37332 0000306A 268B47FE                	mov	ax,[es:bx-2]
 37333                                  	; 22/07/2023
 37334                                  um10:
 37335 0000306E 8EC0                    	mov	es,ax ; * ; **
 37336                                  
 37337                                  ; ------------------------------
 37338                                  ; UM10: ES = Current MCB pointer
 37339                                  ; ------------------------------
 37340                                  
 37341                                  ;um10:
 37342                                  	;mov	al,[es:ARENA.SIGNATURE]
 37343                                  	;cmp	al,arena_signature_end ; 'Z'
 37344                                  	; 22/07/2023
 37345 00003070 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37346 00003076 7408                    	je	short um20		; If signature == 'Z', hay no more.
 37347                                  
 37348                                  	;NextMCB es,bx			; Move to the next MCB
 37349                                  
 37350                                  	;mov	bx,es
 37351                                  	;;add	bx,[es:3]
 37352                                  	;add	bx,[es:ARENA.SIZE]
 37353                                  	;inc	bx
 37354                                  	;mov	es,bx
 37355                                  	; 22/07/2023
 37356                                  	; ax = es
 37357                                  	;mov	ax,es ; *
 37358 00003078 2603060300              	add	ax,[es:ARENA.SIZE]
 37359 0000307D 40                      	inc	ax
 37360                                  	;mov	es,ax ; **
 37361                                  	
 37362 0000307E EBEE                    	jmp	short um10		; And restart the loop.
 37363                                  um20:	
 37364                                  	; 22/07/2023
 37365                                  	; ax = es
 37366                                  	;mov	ax,es
 37367                                  
 37368 00003080 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 37369                                  
 37370                                  	;pop	es ; ?
 37371                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 37372                                  	;pop	bx ; ?
 37373                                  	;pop	ax ; ?
 37374                                  	
 37375 00003083 C3                      	retn
 37376                                  
 37377                                  ; -----------------------------------------------------------------------------
 37378                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 37379                                  ; -----------------------------------------------------------------------------
 37380                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37381                                  ; EXIT:     None
 37382                                  ; ERROR:    None
 37383                                  ; USES:     AX, BX
 37384                                  ; -----------------------------------------------------------------------------
 37385                                  
 37386                                  	; 01/01/2023 - Retro DOS v4.2
 37387                                  hl_unlink:
 37388 00003084 30FF                    	xor	bh,bh
 37389                                  
 37390                                  	;getdata bl,fm_umb		; Restore original link-state
 37391                                  	;
 37392                                  	;push	ds
 37393                                  	;push	cs
 37394                                  	;pop	ds
 37395                                  	;mov	bl,[fm_umb]
 37396                                  	;pop	ds
 37397                                  
 37398                                  	; 01/01/2023
 37399                                  	; ds = cs
 37400                                  	;mov	bl,[cs:fm_umb]
 37401 00003086 8A1E[6320]              	mov	bl,[fm_umb]
 37402                                  
 37403 0000308A B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37404 0000308D CD21                    	int	21h
 37405 0000308F C3                      	retn
 37406                                  
 37407                                  ; ----------------------------------------------------------------------
 37408                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 37409                                  ; ----------------------------------------------------------------------
 37410                                  ; 09/04/2019 - Retro DOS v4.0
 37411                                  
 37412                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 37413                                  ;   Date:     May 14, 1992
 37414                                  
 37415                                  ;   Modification log:
 37416                                  ;
 37417                                  ;     DATE    WHO      DESCRIPTION
 37418                                  ;   --------  -------  --------------------------------------------------------
 37419                                  ;   05/14/92  t-richj  Original
 37420                                  ;   06/21/92  t-richj  Final revisions before check-in
 37421                                  
 37422                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 37423                                  
 37424                                  ; -----------------------------------------------------------------------------
 37425                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 37426                                  ; -----------------------------------------------------------------------------
 37427                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 37428                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 37429                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 37430                                  ; ERROR:  None
 37431                                  ; USES:   fInHigh (from highvar.inc), carry flag
 37432                                  ; -----------------------------------------------------------------------------
 37433                                  
 37434                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37435                                  	; (SYSINIT:357Bh)
 37436                                  
 37437                                  UnHideUMBs:
 37438 00003090 50                      	push	ax		; Save ax for what we're about to do
 37439                                  
 37440                                  ; -----------------------------------------------------------------------------
 37441                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 37442                                  ;    length of time. Those six constitute a check of whether or not we should
 37443                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 37444                                  ;    will destroy the current link-state and memory-allocation strategy after
 37445                                  ;    every command execution.
 37446                                  ; -----------------------------------------------------------------------------
 37447                                  
 37448                                  	;getdata al,fInHigh	; Get InHigh from data segment
 37449                                  	;
 37450                                  	;push	ds
 37451                                  	;push	cs
 37452                                  	;pop	ds
 37453                                  	;mov	al,[fInHigh]
 37454                                  	;pop	ds	
 37455                                  
 37456                                  	;mov	al,[cs:fInHigh]
 37457                                  	; 31/12/2022
 37458                                  	; ds = cs
 37459 00003091 A0[2E20]                	mov	al,[fInHigh]	
 37460                                  
 37461 00003094 08C0                    	or	al,al
 37462 00003096 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 37463                                  
 37464 00003098 58                      	pop	ax		; then there's nothing to do here... so
 37465 00003099 F9                      	stc			; restore everything and return. Just like
 37466 0000309A C3                      	retn			; that.
 37467                                  uhu10:	
 37468 0000309B E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 37469 0000309E E81200                  	call	FreeUMBs
 37470                                  
 37471                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 37472                                  	;
 37473                                  	;push	es
 37474                                  	;push	cs
 37475                                  	;pop	es
 37476                                  	;mov	byte [es:fInHigh],0
 37477                                  	;pop	ds
 37478                                  
 37479                                  	; 31/12/2022
 37480                                  	; ds = cs	
 37481                                  	;mov	byte [cs:fInHigh],0
 37482 000030A1 C606[2E20]00            	mov	byte [fInHigh],0
 37483                                  
 37484                                  	;call	he_unlink	; Unlink UMBs
 37485                                  	; 31/12/2022
 37486                                  ;;he_unlink:
 37487 000030A6 30FF                    	xor	bh,bh
 37488                                  
 37489                                  	;getdata bl,fm_umb	; Restore original link-state
 37490                                  	;mov	bl,[cs:fm_umb]	
 37491 000030A8 8A1E[6320]              	mov	bl,[fm_umb]
 37492                                  
 37493 000030AC B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37494 000030AF CD21                    	int	21h
 37495                                  	;;retn
 37496                                  
 37497 000030B1 58                      	pop	ax
 37498                                  	; 12/12/2022
 37499                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 37500 000030B2 C3                      	retn
 37501                                  
 37502                                  ; 31/12/2022
 37503                                  ;%if 0
 37504                                  ;
 37505                                  ;; -----------------------------------------------------------------------------
 37506                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 37507                                  ;; -----------------------------------------------------------------------------
 37508                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37509                                  ;; EXIT:     None
 37510                                  ;; ERROR:    None
 37511                                  ;; USES:     AX, BX
 37512                                  ;; -----------------------------------------------------------------------------
 37513                                  ;
 37514                                  ;he_unlink:
 37515                                  ;	xor	bh, bh
 37516                                  ;
 37517                                  ;	;getdata bl, fm_umb	; Restore original link-state
 37518                                  ;	mov	bl,[cs:fm_umb]	
 37519                                  ;
 37520                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 37521                                  ;	int	21h
 37522                                  ;	retn
 37523                                  ;
 37524                                  ;%endif
 37525                                  
 37526                                  ; -----------------------------------------------------------------------------
 37527                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 37528                                  ; -----------------------------------------------------------------------------
 37529                                  ; ENTRY:    None
 37530                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 37531                                  ; ERROR:    None (ignore CF)
 37532                                  ; USES:     Flags
 37533                                  ; -----------------------------------------------------------------------------
 37534                                  
 37535                                  FreeUMBs:
 37536 000030B3 50                      	push	ax
 37537 000030B4 06                      	push	es
 37538                                  
 37539 000030B5 E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 37540 000030B8 721C                    	jc	short fusX
 37541                                  fus10:
 37542 000030BA 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 37543                                  ;fus10:	
 37544 000030BC E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 37545 000030BF 7505                    	jnz	short fus20
 37546 000030C1 E84000                  	call	freeMCB
 37547                                  	; 09/09/2023
 37548                                  	; ax <> es
 37549 000030C4 8CC0                    	mov	ax,es
 37550                                  fus20:	   
 37551                                  	;mov	al,[es:ARENA.SIGNATURE]
 37552                                  	;cmp	al,arena_signature_end ; 'Z'
 37553                                  	; 22/07/2023
 37554 000030C6 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37555 000030CC 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 37556                                  	
 37557                                  	; 22/07/2023
 37558                                  	; ax = es
 37559                                  	;mov	ax,es
 37560 000030CE 2603060300              	add	ax,[es:ARENA.SIZE]
 37561 000030D3 40                      	inc	ax
 37562                                  	; 22/07/2023
 37563                                  	;mov	es,ax
 37564 000030D4 EBE4                    	jmp	short fus10	; Go on forward.
 37565                                  fusX:	
 37566 000030D6 07                      	pop	es
 37567 000030D7 58                      	pop	ax
 37568 000030D8 C3                      	retn
 37569                                  
 37570                                  ; -----------------------------------------------------------------------------
 37571                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 37572                                  ; -----------------------------------------------------------------------------
 37573                                  ; ENTRY:    ES:0 should point to an MCB
 37574                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 37575                                  ; ERROR:    None
 37576                                  ; USES:     Flags
 37577                                  ; -----------------------------------------------------------------------------
 37578                                  
 37579                                  isHideMCB:
 37580                                  	;push	ax
 37581                                  
 37582 000030D9 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 37583 000030DF 7522                    	jne	short ihm_x				; then check for HIDDEN
 37584                                  
 37585                                  	;mov	ax,[es:ARENA.NAME]
 37586                                  	;cmp	ax,'HI' ; 4948h
 37587 000030E1 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 37588 000030E8 7519                    	jne	short ihm_x
 37589                                  	;mov	ax,[es:ARENA.NAME+2]
 37590                                  	;cmp	ax,'DD' ; 4444h
 37591 000030EA 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 37592 000030F1 7510                    	jne	short ihm_x
 37593                                  	;mov	ax,[es:ARENA.NAME+4]
 37594                                  	;cmp	ax,'EN' ; 4E45h
 37595 000030F3 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37596 000030FA 7507                    	jne	short ihm_x
 37597                                  	;mov	ax,[es:ARENA.NAME+6]
 37598                                  	;cmp	ax,'  ' ; 2020h
 37599 000030FC 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37600                                  ihm_x:	
 37601                                  	;pop	ax
 37602 00003103 C3                      	retn
 37603                                  
 37604                                  ; -----------------------------------------------------------------------------
 37605                                  ;*** freeMCB - marks as free the MCB at ES:0
 37606                                  ; -----------------------------------------------------------------------------
 37607                                  ; ENTRY:    ES:0 should point to an MCB
 37608                                  ; EXIT:     None; MCB free'd
 37609                                  ; ERROR:    None
 37610                                  ; USES:     AX
 37611                                  ; -----------------------------------------------------------------------------
 37612                                  
 37613                                  freeMCB:
 37614 00003104 26C70601000000          	mov	word [es:ARENA.OWNER],0
 37615 0000310B B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 37616 0000310E 26A30800                	mov	[es:ARENA.NAME+0],ax
 37617 00003112 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37618 00003116 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37619 0000311A 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37620 0000311E C3                      	retn
 37621                                  
 37622                                  ; -----------------------------------------------------------------------------
 37623                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 37624                                  ; -----------------------------------------------------------------------------
 37625                                  ; ENTRY:  Nothing
 37626                                  ; EXIT:   AX contains 0x9FFF for most systems
 37627                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37628                                  ; USES:   Flags, AX
 37629                                  ; -----------------------------------------------------------------------------
 37630                                  
 37631                                  HeadUmb:
 37632                                  	; 13/05/2019
 37633                                  
 37634                                  	;push	si ; ?
 37635                                  	;push	ds ; ?
 37636                                  	;push	es
 37637                                  	;push	bx ; *
 37638                                  
 37639                                  	; 09/04/2019
 37640                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 37641                                  
 37642 0000311F B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37643 00003121 CD21                    	int	21h
 37644                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37645                                  			; Return: ES:BX -> DOS list of lists
 37646                                  	;mov	ax,[es:8Ch]
 37647 00003123 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 37648 00003127 83F8FF                  	cmp	ax,0FFFFh
 37649                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 37650                                  
 37651                                  	;clc				; Else, it isn't.
 37652                                  	;jmp	short xhu_x
 37653                                  xhu_e:	
 37654                                  	;stc
 37655 0000312A F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 37656                                  xhu_x:	
 37657                                  	;pop	bx ; *
 37658                                  	;pop	es	
 37659                                  	;pop	ds ; ?
 37660                                  	;pop	si ; ?
 37661 0000312B C3                      	retn
 37662                                  
 37663                                  ; -----------------------------------------------------------------------------
 37664                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 37665                                  ; -----------------------------------------------------------------------------
 37666                                  ; ENTRY:    None
 37667                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37668                                  ; ERROR:    None
 37669                                  ; USES:     AX, BX, fm_umb
 37670                                  ; -----------------------------------------------------------------------------
 37671                                  
 37672                                  linkumb:
 37673 0000312C B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 37674 0000312F CD21                    	int	21h			; Current link-state is now in al
 37675                                  
 37676 00003131 08C0                    	or	al,al			; BUGBUG: proper check?
 37677 00003133 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 37678                                  
 37679 00003135 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37680 00003138 BB0100                  	mov	bx,1
 37681 0000313B CD21                    	int	21h
 37682                                  lumbX:
 37683 0000313D C3                      	retn
 37684                                  
 37685                                  ;%endif
 37686                                  
 37687                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37688                                  ; (SYSINIT:2B5Fh)
 37689                                  
 37690                                  ; ----------------------------------------------------------------------
 37691                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 37692                                  ; ----------------------------------------------------------------------
 37693                                  ; 09/04/2019 - Retro DOS v4.0
 37694                                  
 37695                                  ;----------------------------------------------------------------------------
 37696                                  ;
 37697                                  ; procedure : InitDevLoad
 37698                                  ;
 37699                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 37700                                  ;			 = 1 indicates load in UMB:
 37701                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 37702                                  ;		                    = 1 indicates a DOS 5-style load
 37703                                  ;		DevSize  = Size of the device driver file in paras
 37704                                  ;
 37705                                  ;	Output : none
 37706                                  ;
 37707                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 37708                                  ;	Also sets up a header for the Device driver entry for mem utility
 37709                                  ;
 37710                                  ;----------------------------------------------------------------------------
 37711                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 37712                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 37713                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 37714                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 37715                                  ;----------------------------------------------------------------------------
 37716                                  
 37717                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37718                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37719                                  	; (SYSINIT:364Ah)
 37720                                  InitDevLoad:
 37721                                  	; 01/01/2023
 37722                                  	;push	es ; *
 37723                                  
 37724                                  	; 11/12/2022
 37725                                  	; ds = cs
 37726 0000313E 803E[8420]00            	cmp	byte [DeviceHi],0
 37727                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 37728                                  	;je	short InitForLo		; no, init for lo mem
 37729 00003143 7439                    	je	short initforlo_x ; 09/04/2019
 37730                                  
 37731                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37732                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37733                                  ; %if 0
 37734                                  	; 01/01/2023
 37735 00003145 803E[7420]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 37736                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 37737 0000314A 7413                    	je	short InitForConv
 37738                                  
 37739                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 37740                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 37741                                  ; any areas left in upper-memory, except for elements in the load UMB...
 37742                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 37743                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 37744                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 37745                                  
 37746 0000314C E85904                  	call	ShrinkUMB		; Stop using the old device arena
 37747                                  
 37748 0000314F E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 37749 00003152 E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 37750 00003155 E85700                  	call	GetUMBForDev		; And grab that load area as needed
 37751 00003158 9C                      	pushf
 37752 00003159 E851FE                  	call	UnFreeze		; Then unhide everything frozen
 37753 0000315C 9D                      	popf
 37754                                  	;jc	short InitForLo		; (if carry, it's loading low)
 37755                                  	;jmp	short InitForHi
 37756                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 37757 0000315D EB0B                    	jmp	short idl0
 37758                                  
 37759                                  ;%endif ; 01/11/2022
 37760                                  
 37761                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37762                                  	; (SYSINIT:2B67h)
 37763                                  InitForConv:
 37764                                  	; 11/12/2022
 37765                                  	; ds = cs
 37766 0000315F E83700                  	call	SpaceInUMB		; Do we have space left in the
 37767                                  					;  current UMB ?
 37768 00003162 7308                    	jnc	short InitForHi		; yes, we have
 37769 00003164 E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 37770 00003167 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 37771                                  idl0: ; 06/07/2023
 37772 0000316A 720D                    	jc	short InitForLo		; we didn't succeed, so load
 37773                                  					;  in low memory
 37774                                  InitForHi:
 37775                                  	; 11/12/2022
 37776                                  	; ds = cs
 37777                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 37778                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 37779                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 37780 0000316C A1[7A20]                	mov	ax,[DevUMBFree]
 37781 0000316F 8B16[7620]              	mov	dx,[DevUMBAddr]
 37782 00003173 0316[7820]              	add	dx,[DevUMBSize]
 37783 00003177 EB0C                    	jmp	short idl1
 37784                                  
 37785                                  InitForLo:
 37786                                  	; 11/12/2022
 37787                                  	; ds = cs
 37788                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 37789 00003179 C606[8420]00            	mov	byte [DeviceHi],0
 37790                                  initforlo_x:
 37791                                  	; 11/12/2022
 37792                                  	; ds = cs
 37793                                  					;  into UMB indicate that
 37794                                  					;  we are loading low
 37795                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 37796                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 37797 0000317E A1[6203]                	mov	ax,[memhi]
 37798 00003181 8B16[A302]              	mov	dx,[ALLOCLIM]
 37799                                  idl1:
 37800 00003185 E86600                  	call	DevSetMark		; setup a sub-arena for DD
 37801                                  	; 11/12/2022
 37802                                  	; ds = cs
 37803                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 37804                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 37805                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 37806                                  	;mov	[cs:DevEntry+2],ax
 37807 00003188 A3[6820]                	mov	[DevLoadAddr],ax
 37808 0000318B 8916[6A20]              	mov	[DevLoadEnd],dx
 37809 0000318F C706[6C20]0000          	mov	word [DevEntry],0
 37810 00003195 A3[6E20]                	mov	[DevEntry+2],ax
 37811                                  	; 01/01/2023
 37812                                  	;pop	es ; *
 37813 00003198 C3                      	retn
 37814                                  
 37815                                  ;----------------------------------------------------------------------------
 37816                                  ;
 37817                                  ; procedure : SpaceInUMB?
 37818                                  ;
 37819                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 37820                                  ;	Output : Carry set if no space in UMB
 37821                                  ;		 Carry clear if Space is available for the device in
 37822                                  ;		   current UMB
 37823                                  ;
 37824                                  ;----------------------------------------------------------------------------
 37825                                  
 37826                                  SpaceInUMB:
 37827                                  	; 11/12/2022
 37828                                  	; ds = cs
 37829                                  	;mov	ax,[cs:DevUMBSize]
 37830                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 37831                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 37832 00003199 A1[7820]                	mov	ax,[DevUMBSize]
 37833 0000319C 0306[7620]              	add	ax,[DevUMBAddr]		; End of UMB
 37834 000031A0 2B06[7A20]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 37835                                  	; 11/12/2022
 37836                                  	;or	ax,ax			; Nospace ?
 37837                                  	;jnz	short spcinumb1
 37838                                  	;stc
 37839                                  	;retn
 37840                                  	; 11/12/2022
 37841 000031A4 83F801                  	cmp	ax,1
 37842 000031A7 7205                    	jb	short spcinumb2	; cf=1
 37843                                  spcinumb1:
 37844 000031A9 48                      	dec	ax			; space for sub-arena
 37845                                  	; 11/12/2022
 37846                                  	; ds = cs
 37847 000031AA 3B06[6620]              	cmp	ax,[DevSize]
 37848                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 37849                                  spcinumb2:
 37850 000031AE C3                      	retn
 37851                                  
 37852                                  ;----------------------------------------------------------------------------
 37853                                  ;
 37854                                  ; procedure : PrepareMark
 37855                                  ;
 37856                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 37857                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 37858                                  ;
 37859                                  ;----------------------------------------------------------------------------
 37860                                  
 37861                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37862                                  ;
 37863                                  ;PrepareMark:
 37864                                  ;	push	ds
 37865                                  ;	mov	ds,ax
 37866                                  ;	mov	word [ARENA.OWNER],8
 37867                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 37868                                  ;	pop	ds
 37869                                  ;
 37870                                  ;	inc	ax
 37871                                  ;	mov	[cs:DevUMBAddr],ax
 37872                                  ;	mov	[cs:DevUMBFree],ax
 37873                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 37874                                  ;	retn
 37875                                  
 37876                                  ;----------------------------------------------------------------------------
 37877                                  ;
 37878                                  ; procedure : GetUMBForDev
 37879                                  ;
 37880                                  ;	Input : DevSize
 37881                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 37882                                  ;		 the device.
 37883                                  ;		 If success carry clear
 37884                                  ;
 37885                                  ;	Allocates the biggest UMB for loading devices and updates
 37886                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 37887                                  ;	UMB.
 37888                                  ;
 37889                                  ;	This routine relies on the fact that all of the low memory
 37890                                  ;	is allocated, and any DOS alloc calls should return memory
 37891                                  ;	from the UMB pool.
 37892                                  ;
 37893                                  ;----------------------------------------------------------------------------
 37894                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37895                                  	; (SYSINIT:2BC6h)
 37896                                  
 37897                                  GetUMBForDev:
 37898                                  	; 11/12/2022
 37899                                  	; ds = cs
 37900 000031AF BBFFFF                  	mov	bx,0FFFFh
 37901 000031B2 B80048                  	mov	ax,4800h
 37902 000031B5 CD21                    	int	21h
 37903                                  		; DOS - 2+ - ALLOCATE MEMORY
 37904                                  		; BX = number of 16-byte paragraphs desired
 37905                                  
 37906 000031B7 09DB                    	or	bx,bx
 37907                                  	;jz	short gufd_err
 37908                                  	; 09/09/2023
 37909 000031B9 742E                    	jz	short gufd_error ; bx = 0
 37910                                  
 37911 000031BB 4B                      	dec	bx
 37912                                  	; 11/12/2022
 37913                                  	; ds = cs
 37914 000031BC 391E[6620]              	cmp	[DevSize],bx
 37915                                  	;cmp	[cs:DevSize],bx
 37916 000031C0 7725                    	ja	short gufd_err
 37917                                  
 37918 000031C2 43                      	inc	bx
 37919                                  
 37920 000031C3 B80048                  	mov	ax,4800h
 37921 000031C6 CD21                    	int	21h
 37922 000031C8 721D                    	jc	short gufd_err
 37923                                  
 37924                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37925                                  	;dec	ax
 37926                                  	;call	PrepareMark
 37927                                  	;
 37928                                  PrepareMark:
 37929 000031CA 1E                      	push	ds
 37930 000031CB 48                      	dec	ax
 37931 000031CC 8ED8                    	mov	ds,ax
 37932 000031CE C70601000800            	mov	word [ARENA.OWNER],8
 37933 000031D4 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 37934 000031DA 40                      	inc	ax
 37935 000031DB 1F                      	pop	ds
 37936                                  	; 11/12/2022
 37937                                  	; ds = cs
 37938                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 37939                                  	;mov	[cs:DevUMBAddr],ax
 37940                                  	;mov	[cs:DevUMBFree],ax
 37941                                  gufd_x:		; 09/09/2023
 37942 000031DC 891E[7820]              	mov	[DevUMBSize],bx		; update the UMB Variables
 37943 000031E0 A3[7620]                	mov	[DevUMBAddr],ax
 37944 000031E3 A3[7A20]                	mov	[DevUMBFree],ax
 37945                                  	;
 37946                                  	; 11/12/2022
 37947                                  	; cf=0
 37948                                  	;clc				; mark no error
 37949 000031E6 C3                      	retn
 37950                                  
 37951                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37952                                  %if 1
 37953                                  gufd_err:
 37954 000031E7 31DB                    	xor	bx,bx ; 0
 37955                                  gufd_error:
 37956 000031E9 31C0                    	xor	ax,ax ; 0
 37957 000031EB F9                      	stc	; cf=1
 37958 000031EC EBEE                    	jmp	short gufd_x	
 37959                                  %endif
 37960                                  
 37961                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37962                                  %if 0
 37963                                  gufd_err:
 37964                                  	xor	ax,ax ; 0
 37965                                  	; 11/12/2022
 37966                                  	; ds = cs
 37967                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 37968                                  	;mov	[cs:DevUMBAddr],ax
 37969                                  	;mov	[cs:DevUMBFree],ax
 37970                                  	mov	[DevUMBSize],ax		; erase the previous values
 37971                                  	mov	[DevUMBAddr],ax
 37972                                  	mov	[DevUMBFree],ax
 37973                                  	stc
 37974                                  	retn
 37975                                  %endif
 37976                                  
 37977                                  ;----------------------------------------------------------------------------
 37978                                  ;
 37979                                  ; procedure : DevSetMark
 37980                                  ;
 37981                                  ;	Input : AX - Free segment were device is going to be loaded
 37982                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 37983                                  ;
 37984                                  ;	Creates a sub-arena for the device driver
 37985                                  ;	puts 'D' marker in the sub-arena
 37986                                  ;	Put the owner of the sub-arena as (AX+1)
 37987                                  ;	Copies the file name into sub-arena name field
 37988                                  ;
 37989                                  ;	Size field of the sub-arena will be set only at succesful
 37990                                  ;	completion of Device load.
 37991                                  ;
 37992                                  ;----------------------------------------------------------------------------
 37993                                  
 37994                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37995                                  	; (SYSINIT:2C13h)
 37996                                  
 37997                                  DevSetMark:
 37998 000031EE 06                      	push	es
 37999                                  	; 03/01/2023
 38000                                  	;push	di
 38001 000031EF 1E                      	push	ds
 38002 000031F0 56                      	push	si
 38003 000031F1 8EC0                    	mov	es,ax
 38004 000031F3 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 38005 000031F9 40                      	inc	ax
 38006 000031FA 26A30100                	mov	[es:devmark.seg],ax
 38007                                  
 38008                                  ;-------------- Copy file name
 38009                                  
 38010 000031FE 50                      	push	ax			; save load addr
 38011                                  
 38012                                  	; 09/09/2023
 38013                                  	; ds = cs
 38014                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 38015 000031FF C536[7F03]              	lds	si,[bpb_addr]
 38016                                  
 38017 00003203 89F7                    	mov	di,si
 38018 00003205 FC                      	cld
 38019                                  dsm_again:
 38020 00003206 AC                      	lodsb
 38021 00003207 3C3A                    	cmp	al,':'
 38022 00003209 7504                    	jne	short isit_slash
 38023 0000320B 89F7                    	mov	di,si
 38024 0000320D EBF7                    	jmp	short dsm_again
 38025                                  isit_slash:
 38026 0000320F 3C5C                    	cmp	al, '\'
 38027 00003211 7504                    	jne	short isit_null
 38028 00003213 89F7                    	mov	di,si
 38029 00003215 EBEF                    	jmp	short dsm_again
 38030                                  isit_null:
 38031 00003217 08C0                    	or	al,al
 38032 00003219 75EB                    	jnz	short dsm_again
 38033 0000321B 89FE                    	mov	si,di
 38034                                  
 38035 0000321D BF0800                  	mov	di,devmark.filename ; 8
 38036 00003220 B90800                  	mov	cx,8			; maximum 8 characters
 38037                                  dsm_next_char:
 38038 00003223 AC                      	lodsb
 38039 00003224 08C0                    	or	al, al
 38040 00003226 7407                    	jz	short blankout
 38041 00003228 3C2E                    	cmp	al, '.'
 38042 0000322A 7403                    	je	short blankout
 38043 0000322C AA                      	stosb
 38044 0000322D E2F4                    	loop	dsm_next_char
 38045                                  blankout:
 38046 0000322F E304                    	jcxz	dsm_exit
 38047 00003231 B020                    	mov	al, ' '
 38048 00003233 F3AA                    	rep	stosb			; blank out the rest
 38049                                  dsm_exit:
 38050 00003235 58                      	pop	ax			; restore load addr
 38051 00003236 5E                      	pop	si
 38052 00003237 1F                      	pop	ds
 38053                                  	; 03/01/2023
 38054                                  	;pop	di
 38055 00003238 07                      	pop	es
 38056 00003239 C3                      	retn
 38057                                  
 38058                                  ;----------------------------------------------------------------------------
 38059                                  ;
 38060                                  ; procedure : SizeDevice
 38061                                  ;
 38062                                  ;	Input : ES:SI - points to device file to be sized
 38063                                  ;
 38064                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 38065                                  ;
 38066                                  ;	Calculates the size of the device file in paras and stores it
 38067                                  ;	in DevSize
 38068                                  ;
 38069                                  ;----------------------------------------------------------------------------
 38070                                  
 38071                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38072                                  SizeDevice:
 38073                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38074                                  	; 11/12/2022 ; *
 38075 0000323A 1E                      	push	ds ; *
 38076 0000323B 06                      	push	es
 38077 0000323C 1F                      	pop	ds
 38078 0000323D 89F2                    	mov	dx,si			; ds:dx -> file name
 38079 0000323F B8003D                  	mov	ax,3D00h		; open
 38080 00003242 CD21                    	int	21h
 38081 00003244 7237                    	jc	short sd_err		; open failed
 38082                                  
 38083 00003246 89C3                    	mov	bx,ax			; BX - file handle
 38084 00003248 B80242                  	mov	ax,4202h		; seek
 38085 0000324B 31C9                    	xor	cx,cx
 38086 0000324D 89CA                    	mov	dx,cx			; to end of file
 38087 0000324F CD21                    	int	21h
 38088 00003251 7223                    	jc	short sd_close		; did seek fail (impossible)
 38089 00003253 83C00F                  	add	ax,15			; para convert
 38090 00003256 83D200                  	adc	dx,0
 38091 00003259 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 38092                                  	;jz	short szdev1		; no
 38093                                  	; 22/07/2023
 38094 0000325D 7409                    	jz	short sd_ctp
 38095 0000325F 2EC706[6620]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 38096                                  					; assuming that we fail later
 38097 00003266 EB0E                    	jmp	short sd_close
 38098                                  sd_ctp:	
 38099                                  	; 22/07/2023
 38100                                  ;szdev1:
 38101 00003268 B104                    	mov	cl,4			; convert it to paras
 38102 0000326A D3E8                    	shr	ax,cl
 38103 0000326C B10C                    	mov	cl,12
 38104 0000326E D3E2                    	shl	dx,cl
 38105 00003270 09D0                    	or	ax,dx ; * ; cf=0
 38106                                  	;
 38107                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 38108                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 38109                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38110                                  	;cmp	ax,[cs:DevSizeOption]
 38111                                  	;ja	short szdev2
 38112                                  	;mov	ax,[cs:DevSizeOption]
 38113                                  	; 12/12/2022
 38114                                  	;clc
 38115                                  ;szdev2:
 38116 00003272 2EA3[6620]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 38117                                  	; 22/07/2023
 38118                                  	;clc ; cf=0 ; *	; CLC is not needed here
 38119                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 38120                                  
 38121                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38122                                  	; 12/12/2022
 38123                                  	; cf=0
 38124                                  	;clc
 38125                                  sd_close:
 38126 00003276 9C                      	pushf				; let close not spoil our
 38127                                  					;  carry flag
 38128 00003277 B8003E                  	mov	ax,3E00h		; close
 38129 0000327A CD21                    	int	21h			; we are not checking for err
 38130 0000327C 9D                      	popf
 38131                                  sd_err:
 38132                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38133                                  	; 11/12/2022 ; *
 38134 0000327D 1F                      	pop     ds ; *
 38135 0000327E C3                      	retn
 38136                                  
 38137                                  ;----------------------------------------------------------------------------
 38138                                  ;
 38139                                  ; procedure : ExecDev
 38140                                  ;
 38141                                  ;	Input : ds:dx -> device to be executed
 38142                                  ;		DevLoadAddr - contains where device has to be loaded
 38143                                  ;
 38144                                  ;	Output : Carry if error
 38145                                  ;		 Carry clear if no error
 38146                                  ;
 38147                                  ;	Loads a device driver using the 4b03h function call
 38148                                  ;
 38149                                  ;----------------------------------------------------------------------------
 38150                                  
 38151                                  	; 01/11/2022
 38152                                  ExecDev:
 38153 0000327F 2E8B1E[6820]            	mov	bx,[cs:DevLoadAddr]
 38154 00003284 2E891E[8020]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 38155                                  					;  block for exec with
 38156                                  					;  load address
 38157 00003289 2E891E[8220]            	mov	[cs:DevExecReloc],bx
 38158 0000328E 8CCB                    	mov	bx,cs
 38159 00003290 8EC3                    	mov	es,bx
 38160 00003292 BB[8020]                	mov	bx,DevExecAddr		; es:bx points to parameters
 38161                                  	;mov	al,3	; (load program only)
 38162                                  	;mov	ah,EXEC ; 4Bh
 38163                                  	; 04/07/2023
 38164 00003295 B8034B                  	mov	ax,(EXEC<<8)|03h
 38165 00003298 CD21                    	int	21h			; load in the device driver
 38166                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 38167                                  		; DS:DX -> ASCIZ filename
 38168                                  		; ES:BX -> parameter block
 38169                                  		; AL = subfunction 
 38170 0000329A C3                      	retn
 38171                                  
 38172                                  ;----------------------------------------------------------------------------
 38173                                  ;
 38174                                  ; procedure : RetFromUM
 38175                                  ;
 38176                                  ;	Input : None
 38177                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 38178                                  ;		 ConvLoad clear if did.
 38179                                  ;
 38180                                  ;	Prepares memory for more devices after returning from loading one
 38181                                  ;	using the DOS 6 options (/L:... etc).
 38182                                  ;
 38183                                  ;----------------------------------------------------------------------------
 38184                                  
 38185                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38186                                  ;  (SYSINIT:37D1h)
 38187                                  
 38188                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38189                                  ;%if 0
 38190                                  RetFromUM:
 38191                                  	; 31/12/2022
 38192                                  	; ds = cs
 38193 0000329B 9C                      	pushf
 38194                                  	;mov	byte [cs:ConvLoad],1
 38195 0000329C C606[7420]01            	mov	byte [ConvLoad],1
 38196 000032A1 E8ECFD                  	call	UnHideUMBs
 38197 000032A4 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 38198                                  	; 31/12/2022
 38199                                  	; ds = cs
 38200                                  	;;mov	byte [cs:ConvLoad],0
 38201                                  	;mov	byte [ConvLoad],0
 38202                                  	; 09/09/2023
 38203 000032A6 FE0E[7420]              	dec	byte [ConvLoad] ; -> 0
 38204                                  rfUM1:	
 38205 000032AA 9D                      	popf
 38206 000032AB C3                      	retn
 38207                                  
 38208                                  ;%endif ; 01/11/2022
 38209                                  
 38210                                  ;----------------------------------------------------------------------------
 38211                                  ;
 38212                                  ; procedure : RemoveNull
 38213                                  ;
 38214                                  ;	Input : ES:SI points to a null terminated string
 38215                                  ;
 38216                                  ;	Output : none
 38217                                  ;
 38218                                  ;	Replaces the null at the end of a string with blank
 38219                                  ;
 38220                                  ;----------------------------------------------------------------------------
 38221                                  
 38222                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38223                                  	; (SYSINIT:2CCEh)
 38224                                  RemoveNull:
 38225                                  	; 11/12/2022
 38226                                  	; ds = cs
 38227                                  rn_next:
 38228 000032AC 268A1C                  	mov	bl,[es:si]
 38229 000032AF 08DB                    	or	bl,bl			; null ?
 38230 000032B1 7403                    	jz	short rn_gotnull
 38231 000032B3 46                      	inc	si			; advance the pointer
 38232 000032B4 EBF6                    	jmp	short rn_next
 38233                                  rn_gotnull:
 38234                                  	; 11/12/2022
 38235 000032B6 8A1E[9920]              	mov	bl,[DevSavedDelim]
 38236                                  	;mov	bl,[cs:DevSavedDelim]
 38237 000032BA 26881C                  	mov	[es:si],bl		; replace null with blank
 38238                                  	; 02/11/2022
 38239                                  ; 11/12/2022
 38240                                  rba_ok:		; 10/04/2019
 38241 000032BD C3                      	retn
 38242                                  
 38243                                  ;----------------------------------------------------------------------------
 38244                                  ;
 38245                                  ; procedure : RoundBreakAddr
 38246                                  ;
 38247                                  ;	Input : DevBrkAddr
 38248                                  ;	Output : DevBrkAddr
 38249                                  ;
 38250                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 38251                                  ;
 38252                                  ;----------------------------------------------------------------------------
 38253                                  
 38254                                  RoundBreakAddr:
 38255 000032BE 2EA1[7020]              	mov	ax,[cs:DevBrkAddr]
 38256 000032C2 E83CDF                  	call	ParaRound
 38257 000032C5 2E0106[7220]            	add	[cs:DevBrkAddr+2],ax
 38258 000032CA 2EC706[7020]0000        	mov	word [cs:DevBrkAddr],0
 38259 000032D1 2EA1[6A20]              	mov	ax,[cs:DevLoadEnd]
 38260 000032D5 2E3906[7220]            	cmp	[cs:DevBrkAddr+2],ax
 38261 000032DA 76E1                    	jbe	short rba_ok
 38262 000032DC E92911                  	jmp	mem_err
 38263                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38264                                  	; 11/12/2022
 38265                                  ;rba_ok:
 38266                                  ;	retn
 38267                                  
 38268                                  ;----------------------------------------------------------------------------
 38269                                  ;
 38270                                  ; procedure : DevSetBreak
 38271                                  ;
 38272                                  ;	Input : DevBrkAddr
 38273                                  ;	Output : Carry set if Device returned Init failed
 38274                                  ;		 Else carry clear
 38275                                  ;
 38276                                  ;----------------------------------------------------------------------------
 38277                                  
 38278                                  DevSetBreak:
 38279 000032DF 50                      	push	ax
 38280                                  
 38281 000032E0 2EA1[7220]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 38282 000032E4 2E803E[9915]00          	cmp	byte [cs:multdeviceflag],0
 38283 000032EA 750F                    	jne	short set_break_continue ;do not check it.
 38284 000032EC 2E3B06[6820]            	cmp	ax,[cs:DevLoadAddr]
 38285 000032F1 7508                    	jne	short set_break_continue ;if not same, then o.k.
 38286                                  
 38287                                  	;cmp	word [cs:DevBrkAddr],0
 38288                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 38289                                  	; 12/12/2022
 38290 000032F3 2E833E[7020]01          	cmp	word [cs:DevBrkAddr],1
 38291 000032F9 7204                    	jb	short break_failed
 38292                                  
 38293                                  set_break_continue:
 38294 000032FB E8C0FF                  	call	RoundBreakAddr
 38295                                  	; 12/12/2022
 38296 000032FE F8                      	clc
 38297                                  break_failed:
 38298 000032FF 58                      	pop	ax
 38299                                  	;clc
 38300 00003300 C3                      	retn
 38301                                  
 38302                                  	; 12/12/2022
 38303                                  ;break_failed:
 38304                                  	;pop	ax
 38305                                  	;stc
 38306                                  	;retn
 38307                                  
 38308                                  ;----------------------------------------------------------------------------
 38309                                  ;
 38310                                  ; procedure : DevBreak
 38311                                  ;
 38312                                  ;	Input : DevLoadAddr & DevBrkAddr
 38313                                  ;	Output : none
 38314                                  ;
 38315                                  ;	Marks a succesful install of a device driver
 38316                                  ;	Sets device size field in sub-arena &
 38317                                  ;	Updates Free ptr in UMB or adjusts memhi
 38318                                  ;
 38319                                  ;----------------------------------------------------------------------------
 38320                                  
 38321                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38322                                  DevBreak:
 38323                                  	;push	ds ; 11/12/2022
 38324                                  
 38325                                  	; 11/12/2022
 38326 00003301 0E                      	push	cs
 38327 00003302 1F                      	pop	ds
 38328                                  	;mov	ax,[cs:DevLoadAddr]
 38329                                  	;mov	bx,[cs:DevBrkAddr+2]
 38330 00003303 A1[6820]                	mov	ax,[DevLoadAddr]
 38331 00003306 8B1E[7220]              	mov	bx,[DevBrkAddr+2]
 38332                                  	; 11/12/2022
 38333 0000330A 1E                      	push	ds
 38334                                  
 38335 0000330B 48                      	dec	ax			; seg of sub-arena
 38336 0000330C 8ED8                    	mov	ds,ax
 38337 0000330E 40                      	inc	ax			; Back to Device segment
 38338 0000330F 29D8                    	sub	ax,bx
 38339 00003311 F7D8                    	neg	ax			; size of device in paras
 38340 00003313 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 38341                                  	
 38342                                  	; 11/12/2022
 38343 00003316 1F                      	pop	ds
 38344                                  	; ds = cs
 38345                                   	
 38346 00003317 803E[8420]00            	cmp	byte [DeviceHi],0
 38347                                  	;cmp	byte [cs:DeviceHi],0
 38348 0000331C 7405                    	je	short db_lo
 38349                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 38350                                  	;jmp	short db_exit
 38351                                  	; 11/12/2022
 38352 0000331E 891E[7A20]              	mov	[DevUMBFree],bx
 38353 00003322 C3                      	retn	
 38354                                  db_lo:
 38355                                  	; 11/12/2022
 38356                                  	; ds = cs
 38357                                  	;mov	[cs:memhi],bx
 38358                                  	;mov	word [cs:memlo],0
 38359 00003323 891E[6203]              	mov	[memhi],bx
 38360 00003327 C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 38361                                  db_exit:
 38362                                  	;pop	ds ; 11/12/2022
 38363                                  sd_ret:		; 09/09/2023
 38364 0000332D C3                      	retn
 38365                                  
 38366                                  ; 10/04/2019 - Retro DOS v4.0
 38367                                  
 38368                                  ;----------------------------------------------------------------------------
 38369                                  ;
 38370                                  ; procedure : ParseSize
 38371                                  ;
 38372                                  ;	Parses the command line for SIZE= command
 38373                                  ;
 38374                                  ;	ES:SI = command line to parsed
 38375                                  ;
 38376                                  ;	returns ptr to command line after SIZE= option in ES:SI
 38377                                  ;	updates the DevSizeOption variable with value supplied
 38378                                  ;	in SIZE=option
 38379                                  ;	Returns carry if the SIZE option was invalid
 38380                                  ;
 38381                                  ;----------------------------------------------------------------------------
 38382                                  
 38383                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38384                                  	; (SYSINIT:2D5Ah)
 38385                                  
 38386                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 38387                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 38388                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 38389                                  ParseSize:
 38390                                  	;push	bx
 38391                                  	;mov	bx,si
 38392                                  
 38393                                  	; 09/09/2023
 38394 0000332E 56                      	push	si ; * ; mov bx,si
 38395                                  
 38396                                  	; 11/12/2022
 38397                                  	; ds = cs
 38398                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 38399                                  	;mov	[cs:DevCmdLine],si
 38400                                  	;mov	[cs:DevCmdLine+2],es
 38401 0000332F C706[8520]0000          	mov	word [DevSizeOption],0 ; init the value
 38402 00003335 8936[9520]              	mov	[DevCmdLine],si
 38403 00003339 8C06[9720]              	mov	[DevCmdLine+2],es	
 38404 0000333D E82400                  	call	SkipDelim
 38405 00003340 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 38406 00003345 7528                    	jne	short ps_no_size
 38407 00003347 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 38408 0000334D 7520                    	jne	short ps_no_size
 38409 0000334F 268A4404                	mov	al,[es:si+4]
 38410 00003353 E80D10                  	call	delim
 38411                                  	;jne	short ps_no_size
 38412                                  	; 22/07/2023
 38413 00003356 7518                    	jne	short ps_no_size_2 ; cf=0 here
 38414 00003358 83C605                  	add	si,5
 38415 0000335B E81400                  	call	GetHexNum
 38416 0000335E 7210                    	jc	short ps_err
 38417                                  	; 11/12/2022
 38418                                  	; ds = cs
 38419                                  	;mov	[cs:DevSizeOption],ax
 38420 00003360 A3[8520]                	mov	[DevSizeOption],ax
 38421                                  	
 38422                                  	; 09/09/2023
 38423 00003363 58                      	pop	ax  ; * (discard previous si value on top of stack)
 38424                                  
 38425                                  ;	call	SkipDelim ; **
 38426                                  ;	
 38427                                  ;	; 22/07/2023
 38428                                  ;;ps_no_size_2:
 38429                                  ;	; cf = 0
 38430                                  ;	retn
 38431                                  
 38432                                  	; 09/09/2023
 38433                                  	;jmp	short SkipDelim
 38434                                  
 38435                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38436                                  %if 1
 38437                                  	; 01/11/2022
 38438                                  SkipDelim:
 38439                                  sd_next_char:
 38440 00003364 268A04                  	mov	al,[es:si]
 38441 00003367 E8F90F                  	call	delim
 38442 0000336A 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 38443 0000336C 46                      	inc	si
 38444 0000336D EBF5                    	jmp	short sd_next_char ; 01/11/2022
 38445                                  	; 11/12/2022
 38446                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38447                                  ;sd_ret:
 38448                                  	;retn
 38449                                  %endif
 38450                                  
 38451                                  	;;;call	SkipDelim ; **
 38452                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38453                                  	;mov	bx,si
 38454                                  ps_no_size:
 38455                                  	;mov	si,bx
 38456                                  	;pop	bx
 38457 0000336F F8                      	clc	; cf=0
 38458                                  	;retn
 38459                                  	; 11/12/2022
 38460                                  ps_err:		; cf=1
 38461                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 38462                                  	; 09/09/2023
 38463 00003370 5E                      	pop	si ; * ; mov si,bx
 38464                                  ;sd_ret:	; cf=?
 38465 00003371 C3                      	retn
 38466                                  
 38467                                  ;ps_err:
 38468                                  	; 02/11/2022
 38469                                  	;pop	bx
 38470                                  	;stc
 38471                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38472                                  	; 11/12/2022
 38473                                  	; cf=1
 38474                                  	;stc
 38475                                  	; 11/12/2022
 38476                                  ;sd_ret: 
 38477                                  	; 22/07/2023
 38478                                  	; 12/04/2019
 38479                                  	;retn
 38480                                  
 38481                                  ; 12/04/2019 - Retro DOS v4.0
 38482                                  
 38483                                  ;----------------------------------------------------------------------------
 38484                                  ;
 38485                                  ; procedure : SkipDelim
 38486                                  ;
 38487                                  ;	Skips delimiters in the string pointed to by ES:SI
 38488                                  ;	Returns ptr to first non-delimiter character in ES:SI
 38489                                  ;
 38490                                  ;----------------------------------------------------------------------------
 38491                                  
 38492                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38493                                  %if 0
 38494                                  	; 01/11/2022
 38495                                  SkipDelim:
 38496                                  sd_next_char:
 38497                                  	mov	al,[es:si]
 38498                                  	call	delim
 38499                                  	jnz	short sd_ret
 38500                                  	inc	si
 38501                                  	jmp	short sd_next_char ; 01/11/2022
 38502                                  	; 11/12/2022
 38503                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38504                                  ;sd_ret:
 38505                                  	;retn
 38506                                  %endif
 38507                                  
 38508                                  ;----------------------------------------------------------------------------
 38509                                  ;
 38510                                  ; procedure : GetHexNum
 38511                                  ;
 38512                                  ;	Converts an ascii string terminated by a delimiter into binary.
 38513                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 38514                                  ;
 38515                                  ;	Returns in AX the number number of paras equivalent to the
 38516                                  ;	hex number of bytes specified by the hexadecimal string.
 38517                                  ;
 38518                                  ;	Returns carry in case it encountered a non-hex character or
 38519                                  ;	if it encountered crlf
 38520                                  ;
 38521                                  ;----------------------------------------------------------------------------
 38522                                  
 38523                                  ; 13/05/2019
 38524                                  
 38525                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38526                                  	; (SYSINIT:38C5h)
 38527                                  
 38528                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38529                                  	; (SYSINIT:2DA5h)
 38530                                  GetHexNum:
 38531 00003372 31C0                    	xor	ax,ax
 38532 00003374 31D2                    	xor	dx,dx
 38533                                  ghn_next:
 38534 00003376 268A1C                  	mov	bl,[es:si]
 38535 00003379 80FB0D                  	cmp	bl,cr  ; 0Dh
 38536 0000337C 7436                    	je	short ghn_err
 38537 0000337E 80FB0A                  	cmp	bl,lf  ; 0Ah
 38538 00003381 7431                    	je	short ghn_err
 38539 00003383 50                      	push	ax
 38540 00003384 88D8                    	mov	al,bl
 38541 00003386 E8DA0F                  	call	delim
 38542 00003389 58                      	pop	ax
 38543                                  	; 03/01/2023
 38544 0000338A B90400                  	mov	cx,4
 38545 0000338D 7410                    	jz	short ghn_into_paras
 38546 0000338F E82400                  	call	GetNibble
 38547                                  	;jc	short ghn_err
 38548                                  	; 11/12/2022
 38549 00003392 7221                    	jc	short ghn_ret ; cf=1
 38550                                  	; 03/01/2023
 38551                                  	;mov	cx,4
 38552                                  ghn_shift1:
 38553 00003394 D1E0                    	shl	ax,1
 38554 00003396 D1D2                    	rcl	dx,1
 38555 00003398 E2FA                    	loop	ghn_shift1
 38556 0000339A 08D8                    	or	al,bl
 38557 0000339C 46                      	inc	si
 38558 0000339D EBD7                    	jmp	short ghn_next
 38559                                  ghn_into_paras:
 38560 0000339F 83C00F                  	add	ax,15
 38561 000033A2 83D200                  	adc	dx,0
 38562 000033A5 F7C2F0FF                	test	dx,0FFF0h
 38563 000033A9 7509                    	jnz	short ghn_err
 38564                                  	; 03/01/2023
 38565                                  	;mov	cx,4
 38566                                  ghn_shift2:
 38567 000033AB F8                      	clc
 38568 000033AC D1DA                    	rcr	dx,1
 38569 000033AE D1D8                    	rcr	ax,1
 38570 000033B0 E2F9                    	loop	ghn_shift2
 38571 000033B2 F8                      	clc
 38572 000033B3 C3                      	retn
 38573                                  	; 11/12/2022
 38574                                  ghn_err:
 38575                                  gnib_err:
 38576 000033B4 F9                      	stc
 38577                                  ghn_ret:
 38578                                  gnib_ret:
 38579 000033B5 C3                      	retn
 38580                                  
 38581                                  ;----------------------------------------------------------------------------
 38582                                  ;
 38583                                  ; procedure : GetNibble
 38584                                  ;
 38585                                  ;	Convert one nibble (hex digit) in BL into binary
 38586                                  ;
 38587                                  ;	Returns binary value in BL
 38588                                  ;
 38589                                  ;	Returns carry if BL contains non-hex digit
 38590                                  ;
 38591                                  ;----------------------------------------------------------------------------
 38592                                  
 38593                                  GetNibble:
 38594 000033B6 80FB30                  	cmp	bl,'0'
 38595                                  	;jb	short gnib_err
 38596                                  	; 11/12/2022
 38597 000033B9 72FA                    	jb	short gnib_ret ; cf=1
 38598 000033BB 80FB39                  	cmp	bl,'9'
 38599 000033BE 7704                    	ja	short is_it_hex
 38600 000033C0 80EB30                  	sub	bl,'0'		; clc
 38601 000033C3 C3                      	retn
 38602                                  is_it_hex:
 38603 000033C4 80FB41                  	cmp	bl,'A'
 38604                                  	;jb	short gnib_err
 38605                                  	; 11/12/2022
 38606 000033C7 72EC                    	jb	short gnib_ret ; cf=1
 38607 000033C9 80FB46                  	cmp	bl,'F'
 38608 000033CC 77E6                    	ja	short gnib_err ; 11/12/2022
 38609 000033CE 80EB37                  	sub	bl,'A'- 10	; clc
 38610 000033D1 C3                      	retn
 38611                                  
 38612                                  	; 11/12/2022
 38613                                  ;gnib_err:
 38614                                  ;	stc
 38615                                  ;gnib_ret:
 38616                                  ;	retn
 38617                                  
 38618                                  ;============================================================================
 38619                                  
 38620                                  ; 12/04/2019 - Retro DOS v4.0
 38621                                  
 38622                                  ; umb.inc (MSDOS 6.0, 1991)
 38623                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 38624                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 38625                                  
 38626                                  XMM_REQUEST_UMB	equ 10h
 38627                                  XMM_RELEASE_UMB	equ 11h
 38628                                  
 38629                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38630                                  
 38631                                  ;---------------------------------------------------------------------------
 38632                                  ;
 38633                                  ; Procedure Name	: umb_insert
 38634                                  ;
 38635                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 38636                                  ;			: BX = seg address of UMB to be linked in
 38637                                  ;			: DX = size of UMB to be linked in paras
 38638                                  ;			; DS = data
 38639                                  ;
 38640                                  ; Outputs		: links the UMB into the arena chain
 38641                                  ;
 38642                                  ; Uses			: AX, CX, ES, DX, BX
 38643                                  ;
 38644                                  ;---------------------------------------------------------------------------
 38645                                  
 38646                                  umb_insert:
 38647 000033D2 1E                      	push	ds
 38648                                  
 38649                                  	; 31/12/2022
 38650                                  	; ds = cs
 38651                                  
 38652                                  	;mov	ds,[cs:DevDOSData]
 38653 000033D3 8E1E[9320]              	mov	ds,[DevDOSData] ; 31/12/2022 
 38654                                  	;mov	ds,[8Ch]
 38655 000033D7 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 38656 000033DB 8CD8                    	mov	ax,ds
 38657 000033DD 8EC0                    	mov	es,ax
 38658                                  ui_next:
 38659 000033DF 39D8                    	cmp	ax,bx			; Q: is current block above
 38660                                  					;    new block
 38661 000033E1 770F                    	ja	short ui_insert		; Y: insert it
 38662                                  					; Q: is current block the
 38663                                  					;    last
 38664 000033E3 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38665 000033E9 745C                    	je	short ui_append		; Y: append new block to chain
 38666                                  					; N: get next block
 38667 000033EB 8ED8                    	mov	ds,ax			; M005
 38668                                  	;call	get_next		; ax = es = next block
 38669 000033ED E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 38670 000033F0 EBED                    	jmp	short ui_next
 38671                                  
 38672                                  ui_insert:
 38673 000033F2 8CD9                    	mov	cx,ds			; ds = previous arena
 38674 000033F4 41                      	inc	cx			; top of previous block
 38675                                  
 38676 000033F5 29D9                    	sub	cx,bx
 38677 000033F7 F7D9                    	neg	cx			; cx = size of used block
 38678                                  	;mov	byte [0],'M'
 38679 000033F9 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38680                                  	;mov	word [1],8
 38681 000033FE C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 38682                                  	;mov	[3],cx
 38683 00003404 890E0300                	mov	[ARENA.SIZE],cx	
 38684                                  	;mov	word [8],4353h ; 'SC'
 38685 00003408 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 38686                                  
 38687                                  ; prepare the arena at start of new block
 38688                                  
 38689 0000340E 8EC3                    	mov	es,bx
 38690 00003410 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38691 00003416 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 38692                                  					; mark as free
 38693 0000341D 83EA02                  	sub	dx,2			; make room for arena at
 38694                                  					; start & end of new block
 38695 00003420 2689160300              	mov	[es:ARENA.SIZE],dx
 38696                                  
 38697                                  ; prepare arena at end of new block
 38698                                  	
 38699 00003425 01D3                    	add	bx,dx
 38700 00003427 43                      	inc	bx
 38701 00003428 8EC3                    	mov	es,bx			; es=arena at top of new block
 38702 0000342A 43                      	inc	bx			; bx=top of new block
 38703                                  
 38704                                  					; ax contains arena just above
 38705                                  					; this block
 38706 0000342B 29D8                    	sub	ax,bx			; ax = size of used block
 38707                                  	
 38708 0000342D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38709 00003433 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38710 0000343A 26A30300                	mov	[es:ARENA.SIZE],ax	
 38711 0000343E 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 38712                                  
 38713 00003445 EB47                    	jmp	short ui_done
 38714                                  
 38715                                  ui_append:
 38716                                  					; es = arena of last block	
 38717 00003447 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 38718 0000344C 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 38719                                  					; going to rsrv on top of this 
 38720                                  					; block for the next arena.
 38721                                  	; 13/05/2019
 38722 00003452 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38723                                  
 38724 00003458 89C1                    	mov	cx,ax			; cx=top of prev block-1
 38725 0000345A 40                      	inc	ax
 38726 0000345B 29D8                    	sub	ax,bx			; ax=top of prev block - 
 38727                                  					;    seg. address of new block
 38728 0000345D F7D8                    	neg	ax
 38729                                  
 38730 0000345F 8EC1                    	mov	es,cx			; ds = arena of unused block
 38731                                  
 38732 00003461 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38733 00003467 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38734 0000346E 26A30300                	mov	[es:ARENA.SIZE],ax	
 38735 00003472 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 38736                                  
 38737                                  ; prepare the arena at start of new block
 38738 00003479 8EC3                    	mov	es,bx
 38739 0000347B 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 38740 00003481 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 38741                                  					; mark as free
 38742 00003488 4A                      	dec	dx			; make room for arena
 38743 00003489 2689160300              	mov	[es:ARENA.SIZE],dx	
 38744                                  ui_done:
 38745                                  uc_done: ; 31/12/2022 ; *!
 38746 0000348E 1F                      	pop	ds
 38747                                  	; ds = cs ; 31/12/2022
 38748                                  ;uc_done:	; 18/12/2022
 38749                                  au_exit:	; 09/09/2023
 38750 0000348F C3                      	retn
 38751                                  
 38752                                  ;----------------------------------------------------------------------------
 38753                                  ;
 38754                                  ; procedure : AllocUMB
 38755                                  ;
 38756                                  ;	Allocate all UMBs and link it to DOS arena chain
 38757                                  ;
 38758                                  ;----------------------------------------------------------------------------
 38759                                  
 38760                                  AllocUMB:
 38761                                  	; 31/12/2022
 38762                                  	; ds = cs
 38763 00003490 E84700                  	call	InitAllocUMB		; link in the first UMB
 38764 00003493 72FA                    	jc	short au_exit		; quit on error
 38765                                  au_next:
 38766 00003495 E87000                  	call	umb_allocate		; allocate
 38767 00003498 7205                    	jc	short au_coalesce
 38768 0000349A E835FF                  	call	umb_insert		; & insert till no UMBs
 38769 0000349D EBF6                    	jmp	short au_next
 38770                                  au_coalesce:
 38771                                  	; 09/09/2023
 38772                                  ;	call	umb_coalesce		; coalesce all UMBs
 38773                                  ;au_exit:
 38774                                  ;	; 31/12/2022
 38775                                  ;	; ds = cs
 38776                                  ;	retn
 38777                                  
 38778                                  	; 09/09/2023
 38779                                  	;jmp	short umb_coalesce
 38780                                  
 38781                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38782                                  
 38783                                  ; 13/04/2019 - Retro DOS v4.0
 38784                                  
 38785                                  ;----------------------------------------------------------------------------
 38786                                  ;
 38787                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 38788                                  ;
 38789                                  ;	Coalesce adds the block following the argument to the argument block,
 38790                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 38791                                  ;	some callers (such as $setblock) use it to join a free block to it's
 38792                                  ;	preceeding allocated block.
 38793                                  ;
 38794                                  ;	EXIT	'C' clear if OK
 38795                                  ;		  (ds) unchanged, this block updated
 38796                                  ;		  (ax) = address of next block, IF not at end
 38797                                  ;		'C' set if arena trashed
 38798                                  ;	USES	cx, di, ds, es
 38799                                  ;
 38800                                  ;----------------------------------------------------------------------------
 38801                                  
 38802                                  umb_coalesce:
 38803                                  	; 31/12/2022
 38804                                  	; ds = cs
 38805 0000349F 1E                      	push	ds ; *!
 38806                                  
 38807 000034A0 31FF                    	xor	di, di
 38808                                  
 38809                                  	;mov	es,[cs:DevDOSData]
 38810                                  	; 31/12/2022
 38811 000034A2 8E06[9320]              	mov	es,[DevDOSData]
 38812 000034A6 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 38813                                  uc_nextfree:
 38814 000034AB 8CC0                    	mov	ax,es
 38815 000034AD 8ED8                    	mov	ds,ax
 38816                                  	;cmp	[es:1],di
 38817 000034AF 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 38818 000034B4 7407                    	je	short uc_again		; Y: try to coalesce with next block
 38819                                  					; N: get next arena
 38820 000034B6 E86B00                  	call	get_next		; es, ax = next arena
 38821 000034B9 72D3                    	jc	short uc_done	; *!
 38822 000034BB EBEE                    	jmp	short uc_nextfree
 38823                                  uc_again:
 38824 000034BD E86400                  	call	get_next		; es, ax = next arena
 38825 000034C0 72CC                    	jc	short uc_done	; *!
 38826                                  uc_check:
 38827 000034C2 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 38828 000034C7 75E2                    	jne	short uc_nextfree	; N: get next free arena
 38829                                  					; Y: coalesce
 38830 000034C9 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 38831 000034CE 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 38832                                  	;add	[3],cx
 38833 000034CF 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 38834 000034D3 268A0D                  	mov     cl,[es:di]              ; move up signature
 38835 000034D6 880D                    	mov     [di],cl
 38836 000034D8 EBE3                    	jmp     short uc_again		; try again
 38837                                  
 38838                                  	; 18/12/2022
 38839                                  ;uc_done:
 38840                                  	;retn
 38841                                  
 38842                                  ;----------------------------------------------------------------------------
 38843                                  ;
 38844                                  ; procedure : InitAllocUMB
 38845                                  ;
 38846                                  ;----------------------------------------------------------------------------
 38847                                  
 38848                                  InitAllocUMB:
 38849                                  	; 31/12/2022
 38850                                  	; ds = cs
 38851 000034DA E8E9D5                  	call	IsXMSLoaded
 38852 000034DD 7527                    	jnz	short iau_err		; quit on no XMS driver
 38853 000034DF B452                    	mov	ah,52h
 38854 000034E1 CD21                    	int	21h			; get DOS DATA seg
 38855                                  	; 31/12/2022
 38856                                  	; ds = cs
 38857                                  	;mov	[cs:DevDOSData],es	; & save it for later
 38858 000034E3 8C06[9320]              	mov	[DevDOSData],es		; & save it for later
 38859 000034E7 B81043                  	mov	ax,4310h
 38860 000034EA CD2F                    	int	2Fh
 38861                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 38862                                  	;mov	[cs:DevXMSAddr+2],es
 38863 000034EC 891E[7C20]              	mov	[DevXMSAddr],bx		; get XMS driver address
 38864 000034F0 8C06[7E20]              	mov	[DevXMSAddr+2],es	
 38865                                  	; 31/12/2022
 38866 000034F4 803E[9220]00            	cmp	byte [FirstUMBLinked],0 
 38867                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 38868                                  	;jne	short ia_1		; quit if we already did it
 38869                                  	; 12/12/2022
 38870 000034F9 770A                    	ja	short ia_1 ; cf=0
 38871 000034FB E83900                  	call	LinkFirstUMB		; else link the first UMB
 38872                                  	;jc	short iau_err
 38873                                  	; 12/12/2022
 38874 000034FE 7207                    	jc	short iau_err2  ; cf=1
 38875                                  	; 31/12/2022
 38876                                  	; ds = cs
 38877 00003500 C606[9220]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38878                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38879                                  ia_1:
 38880                                  	; 12/12/2022
 38881                                  	; cf=0
 38882                                  	;clc
 38883 00003505 C3                      	retn
 38884                                  iau_err:
 38885 00003506 F9                      	stc
 38886                                  iau_err2:
 38887 00003507 C3                      	retn
 38888                                  
 38889                                  ;-------------------------------------------------------------------------
 38890                                  ;
 38891                                  ; Procedure Name	: umb_allocate
 38892                                  ;
 38893                                  ; Inputs		: DS = data
 38894                                  ;
 38895                                  ; Outputs		: if UMB available
 38896                                  ;				Allocates the largest available UMB and 
 38897                                  ;			  	BX = segment of allocated block
 38898                                  ;				DX = size of allocated block
 38899                                  ;				NC
 38900                                  ;			  else 
 38901                                  ;				CY
 38902                                  ;
 38903                                  ; Uses			: BX, DX
 38904                                  ;
 38905                                  ;-------------------------------------------------------------------------
 38906                                  
 38907                                  umb_allocate:
 38908                                  	; 31/12/2022
 38909                                  	; ds = cs
 38910 00003508 50                      	push	ax
 38911 00003509 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 38912 0000350B BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 38913                                  					;   possible
 38914                                  	; 31/12/2022
 38915 0000350E FF1E[7C20]              	call	far [DevXMSAddr]
 38916                                  	;call	far [cs:DevXMSAddr]
 38917                                  					; dx now contains the size of
 38918                                  					; the largest UMB
 38919 00003512 09D2                    	or	dx,dx
 38920 00003514 740B                    	jz	short ua_err
 38921                                  	
 38922 00003516 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 38923                                  
 38924                                  	; 31/12/2022
 38925 00003518 FF1E[7C20]              	call	far [DevXMSAddr]
 38926                                  	;call	far [cs:DevXMSAddr]
 38927                                  
 38928 0000351C 83F801                  	cmp	ax,1			; Q: was the reqst successful
 38929                                  	;jne	short ua_err		; N: error
 38930                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38931 0000351F 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 38932                                  ua_err:
 38933 00003521 F9                      	stc	
 38934                                  
 38935                                  	;clc
 38936                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38937                                  	; 12/12/2022
 38938                                  	; cf=0
 38939                                  	;clc 
 38940                                  ua_done:
 38941 00003522 58                      	pop	ax
 38942 00003523 C3                      	retn
 38943                                  	; 27/07/2023
 38944                                  ;ua_err:
 38945                                  	;stc
 38946                                  	;jmp	short ua_done
 38947                                  
 38948                                  ;----------------------------------------------------------------------------
 38949                                  ;
 38950                                  ;**	get_next - Find Next item in Arena
 38951                                  ;
 38952                                  ;	ENTRY	dS - pointer to block head
 38953                                  ;	EXIT	AX,ES - pointers to next head
 38954                                  ;		'C' set if arena damaged
 38955                                  ;
 38956                                  ;----------------------------------------------------------------------------
 38957                                  
 38958                                  	; 01/11/2022
 38959                                  get_next:
 38960 00003524 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 38961 00003529 740A                    	je	short gn_err
 38962                                  _get_next_:
 38963 0000352B 8CD8                    	mov     ax,ds                   ; ax=current block
 38964 0000352D 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 38965 00003531 40                      	inc     ax                      ; remember that header!
 38966 00003532 8EC0                    	mov	es,ax
 38967                                  	;clc
 38968                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38969                                  	; 11/12/2022
 38970                                  	; cf=0
 38971                                  	;clc
 38972 00003534 C3                      	retn
 38973                                  gn_err:
 38974 00003535 F9                      	stc
 38975                                  	; 11/12/2022	
 38976                                  lfu_err:	 ; cf=1
 38977 00003536 C3                      	retn
 38978                                  
 38979                                  ;----------------------------------------------------------------------------
 38980                                  ;
 38981                                  ; procedure : LinkFirstUMB
 38982                                  ;
 38983                                  ;----------------------------------------------------------------------------
 38984                                  
 38985                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38986                                  	; (SYSINIT:2F81h)
 38987                                  LinkFirstUMB:
 38988                                  	; 31/12/2022
 38989                                  	; ds = cs
 38990 00003537 E8CEFF                  	call	umb_allocate
 38991 0000353A 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 38992                                  
 38993                                  ; bx = segment of allocated UMB
 38994                                  ; dx = size of UMB
 38995                                  
 38996                                  	; 31/12/2022
 38997                                  	; ds = cs
 38998                                  
 38999 0000353C CD12                    	int	12h			; ax = size of memory
 39000 0000353E B106                    	mov	cl,6
 39001 00003540 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 39002                                  
 39003 00003542 89C1                    	mov	cx,ax			; cx = size in paras
 39004 00003544 29D8                    	sub	ax,bx			; ax = - size of unused block
 39005                                  
 39006 00003546 F7D8                    	neg	ax
 39007                                  
 39008                                  	;sub	cx,1			; cx = first umb_arena
 39009                                  	; 09/09/2023
 39010 00003548 49                      	dec	cx
 39011 00003549 8EC1                    	mov	es,cx			; es = first umb_arena
 39012                                  	
 39013 0000354B 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39014 00003551 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39015                                  					
 39016 00003558 26A30300                	mov	[es:ARENA.SIZE],ax	
 39017 0000355C 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39018                                  
 39019                                  ; put in the arena for the first UMB
 39020                                  
 39021 00003563 8EC3                    	mov	es,bx			; es has first free umb seg
 39022 00003565 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39023 0000356B 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 39024                                  					; mark as free 
 39025 00003572 4A                      	dec	dx			; make room for arena
 39026 00003573 2689160300              	mov	[es:ARENA.SIZE],dx	
 39027                                  
 39028                                  	;mov	es,[cs:DevDOSData]
 39029                                  	; 31/12/2022
 39030 00003578 8E06[9320]              	mov	es,[DevDOSData] ; ds = cs
 39031 0000357C BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 39032 0000357F 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 39033                                  					;  data segment with the arena
 39034                                  					;  just below Top of Mem
 39035                                  
 39036                                  ; we must now scan the arena chain and update the size of the last arena
 39037                                  
 39038 00003582 BF2400                  	mov	di,DOS_ARENA ; 24h
 39039 00003585 268E05                  	mov	es,[es:di]		; es = start arena
 39040 00003588 31FF                    	xor	di,di
 39041                                  ;scan_next
 39042                                  ; 09/12/2022
 39043                                  scannext:
 39044 0000358A 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 39045 0000358E 740C                    	je	short got_last
 39046                                  	
 39047 00003590 8CC0                    	mov	ax,es
 39048 00003592 2603060300              	add	ax,[es:ARENA.SIZE]
 39049 00003597 40                      	inc	ax
 39050 00003598 8EC0                    	mov	es,ax
 39051                                  	;jmp	short scan_next
 39052                                  	; 09/12/2022
 39053 0000359A EBEE                    	jmp	short scannext
 39054                                  got_last:
 39055                                  	;sub	word [es:ARENA.SIZE],1
 39056                                  	; 09/09/2023
 39057 0000359C 26FF0E0300              	dec	word [es:ARENA.SIZE]
 39058                                  
 39059 000035A1 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39060                                  	;clc
 39061                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39062                                  	; 11/12/2022
 39063                                  	; cf=0
 39064                                  	;clc
 39065 000035A7 C3                      	retn
 39066                                  
 39067                                  ; 11/12/2022
 39068                                  ;;lfu_err:
 39069                                  ;	;stc
 39070                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39071                                  ;	; 11/12/2022
 39072                                  ;	; cf=1
 39073                                  ;	;stc
 39074                                  ;	retn
 39075                                  
 39076                                  ;----------------------------------------------------------------------------
 39077                                  ;
 39078                                  ; procedure : ShrinkUMB
 39079                                  ;
 39080                                  ;	Shrinks the current UMB in use, so that the unused portions
 39081                                  ;	of the UMB is given back to the DOS free mem pool
 39082                                  ;
 39083                                  ;----------------------------------------------------------------------------
 39084                                  
 39085                                  ShrinkUMB:
 39086                                  	; 12/12/2022
 39087                                  	; ds = cs
 39088 000035A8 833E[7620]00            	cmp	word [DevUMBAddr],0
 39089                                  	;cmp	word [cs:DevUMBAddr],0
 39090 000035AD 741F                    	je	short su_exit
 39091 000035AF 06                      	push	es
 39092                                  	; 01/01/2023
 39093                                  	;push	bx
 39094                                  	; 12/12/2022
 39095                                  	;mov	bx,[cs:DevUMBFree]
 39096                                  	;sub	bx,[cs:DevUMBAddr]
 39097                                  	;mov	es,[cs:DevUMBAddr]
 39098 000035B0 8B1E[7A20]              	mov	bx,[DevUMBFree]
 39099 000035B4 2B1E[7620]              	sub	bx,[DevUMBAddr]
 39100 000035B8 8E06[7620]              	mov	es,[DevUMBAddr]
 39101                                  	
 39102 000035BC B8004A                  	mov	ax,4A00h
 39103 000035BF CD21                    	int	21h
 39104                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 39105                                  		; ES = segment address of block to change
 39106                                  		; BX = new size in paragraphs
 39107 000035C1 8CC0                    	mov	ax,es
 39108 000035C3 48                      	dec	ax
 39109 000035C4 8EC0                    	mov	es,ax
 39110 000035C6 26C70601000800          	mov	word [es:ARENA.OWNER],8
 39111                                  	; 01/01/2023
 39112                                  	;pop	bx
 39113 000035CD 07                      	pop	es
 39114                                  su_exit:
 39115 000035CE C3                      	retn
 39116                                  
 39117                                  ;----------------------------------------------------------------------------
 39118                                  ;
 39119                                  ; procedure : UnlinkUMB
 39120                                  ;
 39121                                  ;	Unlinks the UMBs from the DOS arena chain
 39122                                  ;
 39123                                  ;----------------------------------------------------------------------------
 39124                                  
 39125                                  UnlinkUMB:
 39126                                  	; 12/12/2022
 39127                                  	; ds = cs
 39128 000035CF 1E                      	push	ds
 39129 000035D0 06                      	push	es
 39130                                  	; 12/12/2022
 39131 000035D1 803E[9220]00            	cmp	byte [FirstUMBLinked],0
 39132                                  	;cmp	byte [cs:FirstUMBLinked],0
 39133 000035D6 7420                    	je	short ulu_x		; nothing to unlink
 39134                                  	; 12/12/2022
 39135 000035D8 8E06[9320]              	mov	es,[DevDOSData]
 39136                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 39137 000035DC 268E1E2400              	mov	ds,[es:DOS_ARENA]
 39138 000035E1 268B3E8C00              	mov	di,[es:UMB_ARENA]
 39139                                  ulu_next:
 39140 000035E6 E83BFF                  	call	get_next
 39141 000035E9 720D                    	jc	short ulu_x
 39142 000035EB 39C7                    	cmp	di,ax			; is the next one UMB ?
 39143 000035ED 7404                    	je	short ulu_found
 39144 000035EF 8ED8                    	mov	ds,ax
 39145 000035F1 EBF3                    	jmp	short ulu_next
 39146                                  ulu_found:
 39147                                  	;mov	byte [0],'Z'
 39148 000035F3 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39149                                  ulu_x:
 39150 000035F8 07                      	pop	es
 39151 000035F9 1F                      	pop	ds
 39152 000035FA C3                      	retn
 39153                                  
 39154                                  ; ----------------------------------------------------------------------
 39155                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 39156                                  ; ----------------------------------------------------------------------
 39157                                  ; 14/04/2019 - Retro DOS v4.0
 39158                                  
 39159                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 39160                                  ;
 39161                                  ; Summary:
 39162                                  ;
 39163                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 39164                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 39165                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 39166                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 39167                                  ;   and/or config.inc for the full list.
 39168                                  ;
 39169                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 39170                                  ;   configuration support. blockname is either MENU, which contains one
 39171                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 39172                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 39173                                  ;   INCLUDE allows the current block to name another block for inclusion
 39174                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 39175                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 39176                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 39177                                  ;
 39178                                  ; Example:
 39179                                  ;
 39180                                  ;   [menu]
 39181                                  ;   menuitem=misc,Miscellaneous
 39182                                  ;   menuitem=network,Network Configuration
 39183                                  ;   menudefault=network,15
 39184                                  ;
 39185                                  ;   [network]
 39186                                  ;   include misc
 39187                                  ;   device=foo
 39188                                  ;
 39189                                  ;   [misc]
 39190                                  ;   device=bar
 39191                                  ;   include alternate
 39192                                  ;
 39193                                  ;   [alternate]
 39194                                  ;   device=tar
 39195                                  ;
 39196                                  ;
 39197                                  ;   When the menu is displayed
 39198                                  ;
 39199                                  ;    1. Miscellaneous
 39200                                  ;    2. Network Configuration
 39201                                  ;
 39202                                  ;   #2 is highlighted as the default option, and will be automatically
 39203                                  ;   selected after 15 seconds. It will invoke the following lines in the
 39204                                  ;   following order:
 39205                                  ;
 39206                                  ;       DEVICE=BAR
 39207                                  ;       DEVICE=TAR
 39208                                  ;       DEVICE=FOO
 39209                                  ;
 39210                                  
 39211                                  ;MULTI_CONFIG equ 1
 39212                                  
 39213                                  ; the following depend on the positions of the various letters in switchlist
 39214                                  
 39215                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 39216                                  
 39217                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 39218                                  flagdrive	equ 00001000b ; 8 
 39219                                  flagcyln	equ 00010000b ; 16
 39220                                  flagseclim	equ 00100000b ; 32
 39221                                  flagheads	equ 01000000b ; 64
 39222                                  flagff		equ 10000000b ; 128
 39223                                  
 39224                                  ;----------------------------------------------------------------------------
 39225                                  ; 19/04/2019 - Retro DOS v4.0
 39226                                  
 39227                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 39228                                  
 39229                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39230                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 39231                                  
 39232 000035FB 00                      insert_blank:	db 	0
 39233                                  
 39234                                  ;----------------------------------------------------------------------------
 39235                                  ;
 39236                                  ; procedure : setparms
 39237                                  ;
 39238                                  ; the following set of routines is used to parse the drivparm = command in
 39239                                  ; the config.sys file to change the default drive parameters.
 39240                                  ;
 39241                                  ;----------------------------------------------------------------------------
 39242                                  
 39243                                  setparms:
 39244 000035FC 1E                      	push	ds
 39245 000035FD 50                      	push	ax
 39246 000035FE 53                      	push	bx
 39247 000035FF 51                      	push	cx
 39248 00003600 52                      	push	dx
 39249                                  
 39250 00003601 0E                      	push	cs
 39251 00003602 1F                      	pop	ds
 39252                                  
 39253 00003603 31DB                    	xor	bx,bx
 39254 00003605 8A1E[F64A]              	mov	bl,[drive]
 39255                                  	; 18/12/2022
 39256 00003609 43                      	inc	bx
 39257                                  	;inc	bl			; get it correct for ioctl call
 39258                                  					; (1=a,2=b...)
 39259 0000360A BA[9849]                	mov	dx,deviceparameters
 39260                                  	;mov	ah,IOCTL ; 44h
 39261                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 39262                                  	; 04/07/2023
 39263 0000360D B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 39264                                  	;mov	ch,RAWIO ; 8
 39265                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 39266                                  	; 04/07/2023
 39267 00003610 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 39268 00003613 CD21                    	int	21h
 39269                                  
 39270                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39271 00003615 8A26[F74A]              	mov	ah,[switches]
 39272                                  	;mov	al,[deviceparameters+20]
 39273 00003619 A0[AC49]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39274 0000361C 8A0E[F64A]              	mov	cl,[drive]
 39275                                  ;
 39276                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39277                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 39278                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 39279                                  ;	; 21/10/2022
 39280                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 39281                                  ;	;mov	ds,ax			; set Bios_Data segment
 39282                                  ;
 39283                                  ;	; 27/07/2023
 39284                                  ;	;;test	word [cs:switches],flagec35 ; 4
 39285                                  ;	;test	byte [cs:switches],flagec35
 39286                                  ;	;jz	short not_ec35
 39287                                  ;
 39288                                  ;	; 27/07/2023
 39289                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39290                                  ;	;;test	word [switches],flagec35 ; 4
 39291                                  ;	; 12/12/2022
 39292                                  ;	;test	byte [switches],flagec35 ; 4
 39293                                  ;	;jz	short eot_ok
 39294                                  ;	
 39295                                  	;mov	cl,[cs:drive]		; which drive was this for?
 39296                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39297                                  	;mov	cl,[drive]
 39298                                  	; 27/07/2023
 39299                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 39300                                  	;mov	ds,ax
 39301                                  
 39302 00003620 BA7000                  	mov	dx,DOSBIODATASEG
 39303 00003623 8EDA                    	mov	ds,dx
 39304                                  
 39305 00003625 F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 39306 00003628 7408                    	jz	short not_ec35
 39307                                  
 39308                                  	;mov	al,1			; assume drive 0
 39309                                  	;shl	al,cl			; set proper bit depending on drive
 39310                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 39311                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 39312                                  	; 27/07/2023
 39313 0000362A B401                    	mov	ah,1
 39314 0000362C D2E4                    	shl	ah,cl
 39315 0000362E 0826[A204]              	or	[ec35_flag],ah
 39316                                  
 39317                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39318                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 39319                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39320                                  not_ec35:
 39321                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 39322                                  ;	sectors per track than any old ones.
 39323                                  
 39324                                  	; 27/07/2023
 39325                                  	;;mov	al,[cs:deviceparameters+20]
 39326                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39327                                  	
 39328                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 39329 00003632 3A06[2C01]              	cmp	al,[eot]
 39330 00003636 7603                    	jbe	short eot_ok
 39331 00003638 A2[2C01]                	mov	[eot],al
 39332                                  eot_ok:
 39333 0000363B 5A                      	pop	dx			; fix up all the registers
 39334 0000363C 59                      	pop	cx
 39335 0000363D 5B                      	pop	bx
 39336 0000363E 58                      	pop	ax
 39337 0000363F 1F                      	pop	ds ; 13/05/2019
 39338 00003640 C3                      	retn
 39339                                  
 39340                                  ;----------------------------------------------------------------------------
 39341                                  ;
 39342                                  ; procedure : diddleback
 39343                                  ;
 39344                                  ; replace default values for further drivparm commands
 39345                                  ;
 39346                                  ;----------------------------------------------------------------------------
 39347                                  
 39348                                  diddleback:
 39349 00003641 1E                      	push	ds
 39350 00003642 0E                      	push	cs
 39351 00003643 1F                      	pop	ds
 39352                                  	;mov	word [deviceparameters+4],80
 39353 00003644 C706[9C49]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39354                                  	;mov	byte [deviceparameters+1],2
 39355 0000364A C606[9949]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 39356                                  	;mov	word [deviceparameters+2],0
 39357 0000364F C706[9A49]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 39358 00003655 C706[F74A]0000          	mov	word [switches],0	    ; zero all switches
 39359 0000365B 1F                      	pop	ds
 39360 0000365C C3                      	retn
 39361                                  
 39362                                  ; 03/01/2023
 39363                                  %if 0
 39364                                  
 39365                                  ; 15/04/2019 - Retro DOS v4.0
 39366                                  
 39367                                  ;----------------------------------------------------------------------------
 39368                                  ;
 39369                                  ; procedure : parseline
 39370                                  ;
 39371                                  ; entry point is parseline. al contains the first character in command line.
 39372                                  ;
 39373                                  ;----------------------------------------------------------------------------
 39374                                  
 39375                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39376                                  	; (SYSINIT:3EDFh)
 39377                                  
 39378                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39379                                  	; (SYSINIT:30ACh)
 39380                                  parseline:
 39381                                  	; 03/01/2023
 39382                                  	; ds = cs ; *
 39383                                  
 39384                                  	;push	ds ; *
 39385                                  
 39386                                  	;push	cs ; *
 39387                                  	;pop	ds ; *
 39388                                  
 39389                                  nextswtch:
 39390                                  	cmp	al,cr			; carriage return?
 39391                                  	je	short done_line
 39392                                  	cmp	al,lf			; linefeed?
 39393                                  	je	short put_back		; put it back and done
 39394                                  
 39395                                  ; anything less or equal to a space is ignored.
 39396                                  
 39397                                  	cmp	al,' '                  ; space?
 39398                                  	jbe	short getnext		; skip over space
 39399                                  	cmp	al,'/'
 39400                                  	je	short getparm
 39401                                  	stc				; mark error invalid-character-in-input
 39402                                  	;jmp	short exitpl
 39403                                  	; 03/01/2023
 39404                                  swterr:
 39405                                  	retn
 39406                                  
 39407                                  getparm:
 39408                                  	call	check_switch
 39409                                  	mov	[switches],bx		; save switches read so far
 39410                                  	jc	short swterr
 39411                                  getnext:
 39412                                  	call	getchr
 39413                                  	;jc	short done_line
 39414                                  	;jmp	short nextswtch
 39415                                  	; 03/01/2023
 39416                                  	jnc	short nextswtch
 39417                                  ;swterr:
 39418                                  	;jmp	short exitpl		; exit if error
 39419                                  
 39420                                  done_line:
 39421                                  	; 12/12/2022
 39422                                  	test	byte [switches],flagdrive ; 8
 39423                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39424                                  	jnz	short okay
 39425                                  	stc				; mark error no-drive-specified
 39426                                  	;jmp	short exitpl
 39427                                  	; 03/01/2023
 39428                                  	retn
 39429                                  
 39430                                  okay:
 39431                                  	mov	ax,[switches]
 39432                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39433                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39434                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39435                                  	;clc			    ; everything is fine
 39436                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39437                                  	; 12/12/2022
 39438                                  	; cf=0
 39439                                  	;clc
 39440                                  	;call	setdeviceparameters
 39441                                  	; 03/01/2023
 39442                                  	jmp	setdeviceparameters
 39443                                  ;exitpl:
 39444                                  	; 03/01/2023
 39445                                  	; ds = cs
 39446                                  	;pop	ds ; *
 39447                                  	retn
 39448                                  put_back:
 39449                                  	inc	word [count]		; one more char to scan
 39450                                  	dec	word [chrptr]		; back up over linefeed
 39451                                  	jmp	short done_line
 39452                                  
 39453                                  %endif
 39454                                  
 39455                                  ;----------------------------------------------------------------------------
 39456                                  ;
 39457                                  ; procedure : check_switch
 39458                                  ;
 39459                                  ; processes a switch in the input. it ensures that the switch is valid, and
 39460                                  ; gets the number, if any required, following the switch. the switch and the
 39461                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 39462                                  ; error.
 39463                                  ;
 39464                                  ;----------------------------------------------------------------------------
 39465                                  
 39466                                  ; 09/09/2023
 39467                                  
 39468                                  err_swtch:
 39469 0000365D 31CB                    	xor	bx,cx			; remove this switch from the records
 39470                                  err_check:
 39471 0000365F F9                      	stc
 39472                                  err_chk:
 39473                                  done_swtch:	; 09/09/2023 (cf=0)
 39474 00003660 C3                      	retn
 39475                                  
 39476                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39477                                  
 39478                                  check_switch:
 39479 00003661 E8240D                  	call	getchr
 39480                                  	;jc	short err_check
 39481 00003664 72FA                    	jc	short err_chk
 39482 00003666 24DF                            and     al,0DFh                 ; convert it to upper case
 39483 00003668 3C41                    	cmp	al,'A'
 39484                                  	;jb	short err_check
 39485 0000366A 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 39486 0000366C 3C5A                    	cmp	al,'Z'
 39487 0000366E 77EF                    	ja	short err_check
 39488                                  
 39489 00003670 06                      	push	es
 39490                                  
 39491 00003671 0E                      	push	cs
 39492 00003672 07                      	pop	es
 39493                                  
 39494                                  	;mov	cl,[switchlist]		; get number of valid switches
 39495                                  	;mov	ch,0
 39496                                  	;mov	di,1+switchlist		; point to string of valid switches
 39497                                  	; 09/09/2023
 39498 00003673 BF[1C4C]                	mov	di,switchlist
 39499 00003676 8A0D                    	mov	cl,[di]
 39500 00003678 B500                    	mov	ch,0
 39501 0000367A 47                      	inc	di	; 1+switchlist
 39502                                  
 39503 0000367B F2AE                    	repne	scasb
 39504                                  
 39505 0000367D 07                      	pop	es
 39506 0000367E 75DF                    	jnz	short err_check
 39507                                  
 39508 00003680 B80100                  	mov	ax,1
 39509 00003683 D3E0                    	shl	ax,cl			; set bit to indicate switch
 39510 00003685 8B1E[F74A]              	mov	bx,[switches]		; get switches so far
 39511 00003689 09C3                    	or	bx,ax			; save this with other switches
 39512 0000368B 89C1                    	mov	cx,ax
 39513                                  	; 12/12/2022
 39514 0000368D A8F8                    	test	al,switchnum ; 0F8h
 39515                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 39516 0000368F 74CF                    	jz	short done_swtch
 39517                                  
 39518 00003691 E8F40C                  	call	getchr
 39519 00003694 72C7                    	jc	short err_swtch
 39520                                  
 39521 00003696 3C3A                    	cmp	al,':'
 39522 00003698 75C3                    	jne	short err_swtch
 39523                                  
 39524 0000369A E8EB0C                  	call	getchr
 39525 0000369D 53                      	push	bx			; preserve switches
 39526                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39527                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 39528                                  	; 12/12/2022
 39529                                  	; ds = cs
 39530 0000369E C606[AC02]20            	mov	byte [sepchr],' '
 39531 000036A3 E8980D                  	call	getnum
 39532                                  	;mov	byte [cs:sepchr],0
 39533                                  	; 12/12/2022
 39534 000036A6 C606[AC02]00            	mov	byte [sepchr],0
 39535 000036AB 5B                      	pop	bx			; restore switches
 39536                                  
 39537                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 39538                                  ; not check for carry set here. if there is an error, it will be detected
 39539                                  ; further on (hopefully).
 39540                                  
 39541                                  	; 09/09/2023
 39542                                  	;call	process_num
 39543                                  	;jmp	short process_num
 39544                                  
 39545                                  ;done_swtch:
 39546                                  ;	;clc
 39547                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39548                                  ;	; 12/12/2022
 39549                                  ;	; cf=0
 39550                                  ;	;clc
 39551                                  ;	retn
 39552                                  
 39553                                  ;----------------------------------------------------------------------------
 39554                                  ;
 39555                                  ; procedure : process_num
 39556                                  ;
 39557                                  ; this routine takes the switch just input, and the number following (if any),
 39558                                  ; and sets the value in the appropriate variable. if the number input is zero
 39559                                  ; then it does nothing - it assumes the default value that is present in the
 39560                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 39561                                  ;
 39562                                  ;----------------------------------------------------------------------------
 39563                                  
 39564                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39565                                  	; (SYSINIT:3156h)
 39566                                  process_num:
 39567 000036AC 850E[F74A]              	test	[switches],cx		; if this switch has been done before,
 39568 000036B0 752B                    	jnz	short done_ret		; ignore this one.
 39569                                  	; 12/12/2022
 39570 000036B2 F6C108                  	test	cl,flagdrive ; 8
 39571                                  	;test	cx,flagdrive ; 8
 39572 000036B5 7404                    	jz	short try_f
 39573 000036B7 A2[F64A]                	mov	byte [drive],al
 39574                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39575                                  	;jmp	short done_ret
 39576                                  	; 12/12/2022
 39577                                  	; cf=0
 39578 000036BA C3                      	retn	; 13/05/2019
 39579                                  try_f:
 39580                                  	; 12/12/2022
 39581 000036BB F6C180                  	test	cl,flagff ; 80h
 39582                                  	;test	cx,flagff ; 80h
 39583 000036BE 7404                    	jz	short try_t
 39584                                  
 39585                                  ; ensure that we do not get bogus form factors that are not supported
 39586                                  
 39587                                  	;mov	[deviceparameters+1],al
 39588 000036C0 A2[9949]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 39589                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39590                                  	;jmp	short done_ret
 39591                                  	; 12/12/2022
 39592                                  	; cf=0
 39593 000036C3 C3                      	retn	; 13/05/2019
 39594                                  try_t:
 39595 000036C4 09C0                    	or	ax,ax
 39596 000036C6 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 39597                                  	; 12/12/2022
 39598 000036C8 F6C110                  	test	cl,flagcyln ; 10h
 39599                                  	;test	cx,flagcyln ; 10h
 39600 000036CB 7404                    	jz	short try_s
 39601                                  
 39602                                  	;mov	[deviceparameters+4],ax
 39603 000036CD A3[9C49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 39604                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39605                                  	;jmp	short done_ret
 39606                                  	; 12/12/2022
 39607                                  	; cf=0
 39608 000036D0 C3                      	retn	; 13/05/2019
 39609                                  try_s:
 39610                                  	; 12/12/2022
 39611 000036D1 F6C120                  	test	cl,flagseclim ; 20h
 39612                                  	;test	cx,flagseclim ; 20h
 39613 000036D4 7404                    	jz	short try_h
 39614 000036D6 A3[F44A]                	mov	[slim],ax
 39615                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39616                                  	;jmp	short done_ret
 39617                                  	; 12/12/2022
 39618                                  	; cf=0
 39619 000036D9 C3                      	retn	; 13/05/2019
 39620                                  
 39621                                  ; must be for number of heads
 39622                                  
 39623                                  try_h:
 39624 000036DA A3[F24A]                	mov	[hlim],ax
 39625                                  done_ret:
 39626                                  	;clc
 39627                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39628                                  	; 12/12/2022
 39629                                  	; cf=0 (test instruction resets cf)
 39630                                  	;clc
 39631 000036DD C3                      	retn
 39632                                  
 39633                                  
 39634                                  ; 16/04/2024 - Retro DOS v5.0
 39635                                  ; 03/01/2023 - Retro DOS v4.2
 39636                                  %if 1
 39637                                  
 39638                                  ; 15/04/2019 - Retro DOS v4.0
 39639                                  
 39640                                  ;----------------------------------------------------------------------------
 39641                                  ;
 39642                                  ; procedure : parseline
 39643                                  ;
 39644                                  ; entry point is parseline. al contains the first character in command line.
 39645                                  ;
 39646                                  ;----------------------------------------------------------------------------
 39647                                  
 39648                                  	; 16/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 39649                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4151h)
 39650                                  
 39651                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39652                                  	; (SYSINIT:3EDFh)
 39653                                  
 39654                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39655                                  	; (SYSINIT:30ACh)
 39656                                  
 39657                                  parseline:
 39658                                  	; 03/01/2023
 39659                                  	; ds = cs ; *
 39660                                  
 39661                                  	;push	ds ; *
 39662                                  
 39663                                  	;push	cs ; *
 39664                                  	;pop	ds ; *
 39665                                  
 39666                                  nextswtch:
 39667 000036DE 3C0D                    	cmp	al,cr			; carriage return?
 39668 000036E0 741C                    	je	short done_line
 39669 000036E2 3C0A                    	cmp	al,lf			; linefeed?
 39670 000036E4 7421                    	je	short put_back		; put it back and done
 39671                                  
 39672                                  ; anything less or equal to a space is ignored.
 39673                                  
 39674 000036E6 3C20                    	cmp	al,' '                  ; space?
 39675 000036E8 760F                    	jbe	short getnext		; skip over space
 39676 000036EA 3C2F                    	cmp	al,'/'
 39677 000036EC 7402                    	je	short getparm
 39678 000036EE F9                      	stc				; mark error invalid-character-in-input
 39679                                  	;jmp	short exitpl
 39680                                  	; 03/01/2023
 39681                                  swterr:
 39682 000036EF C3                      	retn
 39683                                  
 39684                                  getparm:
 39685 000036F0 E86EFF                  	call	check_switch
 39686 000036F3 891E[F74A]              	mov	[switches],bx		; save switches read so far
 39687 000036F7 72F6                    	jc	short swterr
 39688                                  getnext:
 39689 000036F9 E88C0C                  	call	getchr
 39690                                  	;jc	short done_line
 39691                                  	;jmp	short nextswtch
 39692                                  	; 03/01/2023
 39693 000036FC 73E0                    	jnc	short nextswtch
 39694                                  ;swterr:
 39695                                  	;jmp	short exitpl		; exit if error
 39696                                  
 39697                                  done_line:
 39698                                  	; 12/12/2022
 39699 000036FE F606[F74A]08            	test	byte [switches],flagdrive ; 8
 39700                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39701 00003703 750C                    	jnz	short okay
 39702 00003705 F9                      	stc				; mark error no-drive-specified
 39703                                  	;jmp	short exitpl
 39704                                  	; 03/01/2023
 39705 00003706 C3                      	retn
 39706                                  
 39707                                  ;exitpl:
 39708                                  	; 03/01/2023
 39709                                  	; ds = cs
 39710                                  	;;pop	ds ; *
 39711                                  	;retn
 39712                                  
 39713                                  put_back:
 39714 00003707 FF06[5403]              	inc	word [count]		; one more char to scan
 39715 0000370B FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 39716 0000370F EBED                    	jmp	short done_line
 39717                                  
 39718                                  okay:
 39719 00003711 A1[F74A]                	mov	ax,[switches]
 39720 00003714 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39721 00003717 A3[9A49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39722                                  	; 16/04/2024
 39723                                  	;mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39724                                  	;;;
 39725 0000371A C706[F449]0000          	mov	word [deviceparameters+92],0 ; PCDOS 7.1 IBMBIO.COM	
 39726                                  	;;;
 39727                                  	;clc			    ; everything is fine
 39728                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39729                                  	; 12/12/2022
 39730                                  	; cf=0
 39731                                  	;clc
 39732                                  	;call	setdeviceparameters
 39733                                  	; 03/01/2023
 39734                                  	;jmp	short setdeviceparameters
 39735                                  
 39736                                  %endif
 39737                                  
 39738                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 39739                                  
 39740                                  ;----------------------------------------------------------------------------
 39741                                  ;
 39742                                  ; procedure : setdeviceparameters
 39743                                  ;
 39744                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 39745                                  ; system based on the form factor. it is assumed that the bpbs for the
 39746                                  ; various form factors are present in the bpbtable. for hard files,
 39747                                  ; the recommended bpb is the same as the bpb on the drive.
 39748                                  ; no attempt is made to preserve registers since we are going to jump to
 39749                                  ; sysinit straight after this routine.
 39750                                  ;
 39751                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 39752                                  ;	  we always return no carry
 39753                                  ;
 39754                                  ;	note:  there is a routine by the same name in msdioctl.asm
 39755                                  ;
 39756                                  ;----------------------------------------------------------------------------
 39757                                  
 39758                                  ; 15/04/2019 - Retro DOS v4.0
 39759                                  
 39760                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39761                                  
 39762                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39763                                  	; (SYSINIT:3FC4h)
 39764                                  
 39765                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39766                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 39767                                  
 39768                                  setdeviceparameters:
 39769                                  	; 03/01/2023
 39770                                  	; ds = cs
 39771                                  
 39772 00003720 06                      	push	es
 39773                                  
 39774 00003721 0E                      	push	cs
 39775 00003722 07                      	pop	es
 39776                                  
 39777 00003723 31DB                    	xor	bx,bx
 39778 00003725 8A1E[9949]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 39779 00003729 80FB00                  	cmp	bl,DEV_5INCH ; 0
 39780 0000372C 7506                    	jne	short got_80
 39781                                  
 39782 0000372E C706[9C49]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39783                                  							; 48 tpi=40 cyl
 39784                                  got_80:
 39785 00003734 D1E3                    	shl	bx,1			; get index into bpb table
 39786 00003736 8BB7[084C]              	mov	si,[bpbtable+bx]	; get address of bpb
 39787                                  
 39788                                  	;mov	di,deviceparameters+7	
 39789                                  	; 02/11/2022
 39790 0000373A BF[9F49]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 39791 0000373D B93B00                  	mov	cx,A_BPB.size ; 31
 39792                                  	; 09/09/2023
 39793                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 39794 00003740 FC                      	cld
 39795                                  	;repe	movsb
 39796                                  	; 02/11/2022
 39797 00003741 F3A4                    	rep	movsb
 39798                                  
 39799 00003743 07                      	pop	es
 39800                                  
 39801                                  	; 12/12/2022
 39802 00003744 F606[F74A]20            	test	byte [switches],flagseclim ; 20h
 39803                                  	;test	word [switches],flagseclim ; 20h
 39804 00003749 7406                    	jz	short see_heads
 39805                                  
 39806 0000374B A1[F44A]                	mov	ax,[slim]
 39807                                  	;mov	[deviceparameters+20],ax
 39808 0000374E A3[AC49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 39809                                  
 39810                                  see_heads:
 39811                                  	; 12/12/2022
 39812 00003751 F606[F74A]40            	test	byte [switches],flagheads ; 40h
 39813                                  	;test	word [switches],flagheads ; 40h
 39814 00003756 7406                    	jz	short heads_not_altered
 39815                                  
 39816 00003758 A1[F24A]                	mov	ax,[hlim]
 39817                                  	;mov	[deviceparameters+22],ax	
 39818 0000375B A3[AE49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 39819                                  
 39820                                  heads_not_altered:
 39821                                  
 39822                                  ; set up correct media descriptor byte and sectors/cluster
 39823                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 39824                                  
 39825                                  	;mov	byte [deviceparameters+9],2
 39826                                  	; 02/11/2022
 39827                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 39828                                  	; 03/01/2023
 39829 0000375E B80200                  	mov	ax,2	
 39830 00003761 A2[A149]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 39831                                  
 39832 00003764 B3F0                    	mov	bl,0F0h			; get default mediabyte
 39833                                  
 39834                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 39835                                  
 39836                                  	;mov	bh,[deviceparameters+17]
 39837                                  	; 02/11/2022
 39838 00003766 8A3E[A949]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 39839                                  	
 39840                                  	; 03/01/2023
 39841                                  	; ax = 2
 39842 0000376A 3906[AE49]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 39843                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 39844 0000376E 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 39845                                  
 39846 00003770 7524                    	jne	short only_one_head	; one head, do one head stuff
 39847                                  
 39848                                  ;	two head drives will use the mediadescriptor from the bpb
 39849                                  
 39850 00003772 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 39851                                  
 39852                                  ;	two sided drives have two special cases to look for. One is
 39853                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 39854                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 39855                                  ;	   one sector/cluster.
 39856                                  
 39857                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 39858                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 39859                                  ;	   type of 2 headed drive is all set.
 39860                                  
 39861 00003774 833E[AC49]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 39862 00003779 7509                    	jne	short not_144m
 39863 0000377B 833E[9C49]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39864 00003780 7502                    	jne	short not_144m
 39865                                  
 39866                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 39867                                  
 39868 00003782 EB24                    	jmp	short got_one_secperclus_drive
 39869                                  
 39870                                  ;	check for 320K
 39871                                  
 39872                                  not_144m:
 39873 00003784 833E[9C49]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39874 00003789 7521                    	jne	short got_correct_mediad
 39875 0000378B 833E[AC49]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39876 00003790 751A                    	jne	short got_correct_mediad
 39877                                  
 39878 00003792 B3FC                    	mov	bl,0FCh
 39879 00003794 EB16                    	jmp	short got_correct_mediad
 39880                                  
 39881                                  only_one_head:
 39882                                  
 39883                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 39884                                  
 39885 00003796 803E[9949]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 39886 0000379B 740B                    	je	short got_one_secperclus_drive
 39887                                  
 39888                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 39889                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 39890                                  ;	  besides 8 will be considered 0fch
 39891                                  
 39892 0000379D B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 39893 0000379F 833E[AC49]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39894                                  	; 12/12/2022
 39895 000037A4 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 39896                                  
 39897 000037A6 B3FE                    	mov	bl,0FEh			; 160K mediaid
 39898                                  
 39899                                  ;	we've either got a one sided drive, or a 1.44M drive
 39900                                  ;	  either case we'll use 1 sector per cluster instead of 2
 39901                                  
 39902                                  got_one_secperclus_drive:
 39903                                  	; 03/01/2023
 39904                                  	; ax = 2
 39905 000037A8 48                      	dec	ax  ; ax = 1
 39906 000037A9 A2[A149]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 39907                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 39908                                  
 39909                                  got_correct_mediad:
 39910 000037AC 881E[A949]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 39911                                  
 39912                                  ;	 Calculate the correct number of Total Sectors on medium
 39913                                  
 39914 000037B0 A1[9C49]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 39915 000037B3 F726[AE49]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 39916 000037B7 F726[AC49]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39917 000037BB A3[A749]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 39918 000037BE F8                      	clc				; we currently return no errors
 39919                                  
 39920 000037BF C3                      	retn
 39921                                  
 39922                                  ;	M047 -- end rewritten routine
 39923                                  
 39924                                  ;----------------------------------------------------------------------------
 39925                                  ;
 39926                                  ; procedure : organize
 39927                                  ;
 39928                                  ;----------------------------------------------------------------------------
 39929                                  
 39930                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 39931                                  %if 1
 39932                                  end_commd_line:
 39933 000037C0 AA                      	stosb				; store line feed char in buffer for the linecount.
 39934                                  	;mov	byte [cs:com_level],0	; reset the command level.
 39935                                  	; 03/01/2023
 39936                                  	; ds = cs
 39937                                  	;mov	byte [com_level],0
 39938                                  	;jmp	short org1
 39939                                  	; 09/09/2023
 39940 000037C1 EB0E                    	jmp	short org0
 39941                                  nochar1:
 39942 000037C3 F9                      	stc
 39943 000037C4 C3                      	retn
 39944                                  %endif
 39945                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39946                                  	; (SYSINIT:3234h)
 39947                                  
 39948                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39949                                  	; (SYSINIT:4067h)
 39950                                  
 39951                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 39952                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 39953                                  
 39954                                  organize:
 39955                                  	; 03/01/2023
 39956                                  	; ds = cs
 39957 000037C5 8B0E[5403]              	mov	cx,[count]
 39958                                  	;mov	cx,[cs:count]
 39959 000037C9 E3F8                    	jcxz	nochar1
 39960                                  
 39961                                  ;ifndef	MULTI_CONFIG
 39962                                  ;
 39963                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 39964                                  ;;   because we the case of values in SET commands preserved
 39965                                  ;
 39966                                  ;	call	mapcase
 39967                                  ;endif
 39968                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39969                                  	; 03/01/2023 - Retro DOS v4.2
 39970                                  	;call	mapcase
 39971                                  
 39972 000037CB 31F6                    	xor	si,si
 39973 000037CD 89F7                    	mov	di,si
 39974 000037CF 31C0                    	xor	ax,ax
 39975                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 39976                                  	;;mov	byte [cs:com_level],0
 39977                                  	; 12/12/2022
 39978                                  	;mov	[cs:com_level],al ; 0
 39979                                  	; 03/01/2023
 39980                                  	; ds = cs
 39981                                  	; 09/09/2023
 39982                                  	;mov	[com_level],al ; 0
 39983                                  org0:
 39984 000037D1 C606[4E03]00            	mov	byte [com_level],0 ; 09/09/2023
 39985                                  org1:
 39986 000037D6 E8EF01                  	call	skip_comment
 39987 000037D9 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 39988 000037DB E8D001                  	call	get2			; not a comment string. then get a char.
 39989 000037DE 3C0A                    	cmp	al,lf ; 0Ah
 39990 000037E0 74DE                    	je	short end_commd_line	; starts with a blank line.
 39991 000037E2 3C20                    	cmp	al,' ' ; 20h
 39992 000037E4 76F0                    	jbe	short org1		; skip leading control characters
 39993                                  	; 09/09/2023
 39994                                  	;jmp	short findit
 39995                                  
 39996                                  ; 09/09/2023
 39997                                  %if 0
 39998                                  end_commd_line:
 39999                                  	stosb				; store line feed char in buffer for the linecount.
 40000                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40001                                  	; 03/01/2023
 40002                                  	; ds = cs
 40003                                  	mov	byte [com_level],0
 40004                                  	jmp	short org1
 40005                                  
 40006                                  nochar1:
 40007                                  	stc
 40008                                  	retn
 40009                                  %endif
 40010                                  
 40011                                  findit:
 40012 000037E6 51                      	push	cx
 40013 000037E7 56                      	push	si
 40014 000037E8 57                      	push	di
 40015 000037E9 89F5                    	mov	bp,si
 40016 000037EB 4D                      	dec	bp
 40017 000037EC BE[AB48]                        mov     si,comtab		; prepare to search command table
 40018 000037EF B500                    	mov	ch,0
 40019                                  findcom:
 40020 000037F1 89EF                    	mov	di,bp
 40021 000037F3 8A0C                    	mov	cl,[si]
 40022 000037F5 46                      	inc	si
 40023 000037F6 E345                    	jcxz	nocom
 40024                                  
 40025                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40026                                  
 40027                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40028                                  
 40029                                  ;ifdef	MULTI_CONFIG
 40030                                  
 40031                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 40032                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 40033                                  ;   anything in particular)
 40034                                  
 40035 000037F8 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 40036 000037FC 7430                    	je	short semicolon
 40037                                  loopcom:
 40038                                  	;mov	al,[es:di]
 40039                                  	;inc	di
 40040                                  	;and	al,~20h ; 0DFh		; force upper case
 40041                                  	;inc	si                      ; compare to byte @es:di
 40042                                  	;cmp	al,[si-1]
 40043                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40044 000037FE 268A25                  	mov	ah,[es:di]
 40045 00003801 47                      	inc	di
 40046 00003802 80E4DF                  	and	ah,~20h ; 0DFh		
 40047 00003805 AC                      	lodsb			; mov al,[si]
 40048                                  				; inc si
 40049                                  	;cmp	al,ah
 40050                                  	;loope	loopcom
 40051                                  	; 28/07/2023
 40052 00003806 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 40053 00003808 E1F4                    	loopz	loopcom
 40054                                  ;else
 40055                                  ;	repe	cmpsb
 40056                                  ;endif
 40057                                  	; 02/11/2022
 40058                                  	; 03/01/2023 - Retro DOS v4.2
 40059                                  	;repe	cmpsb
 40060                                  
 40061                                  	; 28/07/2023
 40062                                  	;lahf
 40063 0000380A 01CE                            add     si,cx                   ; bump to next position without affecting flags
 40064                                  	;sahf
 40065 0000380C AC                              lodsb                           ; get indicator letter
 40066                                  	;jnz	short findcom
 40067                                          ; 28/07/2023
 40068 0000380D 08E4                    	or	ah,ah			; (*)
 40069 0000380F 75E0                    	jnz	short findcom		
 40070                                  	
 40071 00003811 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 40072 00003815 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 40073 00003817 26803D0A                	cmp	byte [es:di],lf
 40074 0000381B 741B                    	je	short gotcom0
 40075                                  
 40076                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40077                                  
 40078                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40079                                  
 40080                                  ;ifdef	MULTI_CONFIG
 40081                                  
 40082                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 40083                                  
 40084 0000381D 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 40085 0000381F 7417                    	je	short gotcom0
 40086                                  ;endif
 40087 00003821 50                      	push	ax
 40088 00003822 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 40089                                  
 40090                                  ;ifdef	MULTI_CONFIG
 40091                                  
 40092                                  ;   If keyword is *immediately* followed by a question mark (?), then
 40093                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 40094                                  ;   stored in the CONFIG.SYS memory image.
 40095                                  
 40096 00003825 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 40097 00003827 7509                    	jne	short no_query		; no
 40098 00003829 58                      	pop	ax                      ; yes, so retrieve the original code
 40099                                  	;or	al,80h ; 03/01/2023
 40100 0000382A 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 40101 0000382C EB0A                    	jmp	short gotcom0           ;
 40102                                  semicolon:
 40103 0000382E B030                    	mov	al,CONFIG_REM ; '0'
 40104 00003830 EB06                    	jmp	short gotcom0
 40105                                  no_query:
 40106                                  ;endif  ;MULTI_CONFIG
 40107                                  
 40108                                  	; 02/11/2022
 40109                                  	; 03/01/2023 - Retro DOS v4.2
 40110                                  	;push	ax
 40111                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 40112                                  
 40113 00003832 E82E0B                  	call	delim
 40114                                  no_delim:
 40115 00003835 58                      	pop	ax
 40116 00003836 75B9                    	jnz	short findcom
 40117                                  gotcom0:
 40118 00003838 5F                      	pop	di
 40119 00003839 5E                      	pop	si
 40120 0000383A 59                      	pop	cx
 40121 0000383B EB10                    	jmp	short gotcom
 40122                                  nocom:
 40123 0000383D 5F                      	pop	di
 40124 0000383E 5E                      	pop	si
 40125 0000383F 59                      	pop	cx
 40126 00003840 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 40127 00003842 AA                      	stosb				; save indicator char.
 40128                                  _skipline:
 40129 00003843 E86801                  	call	get2
 40130 00003846 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 40131 00003848 75F9                            jne     short _skipline
 40132                                  	;jmp	short end_commd_line	; handle next command line
 40133                                  	; 09/09/2023
 40134 0000384A E973FF                  	jmp	end_commd_line
 40135                                  gotcom:
 40136 0000384D AA                              stosb                           ; save indicator char in buffer
 40137                                  
 40138                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40139                                  
 40140                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40141                                  
 40142                                  ;ifdef	MULTI_CONFIG
 40143                                  
 40144                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 40145                                  ;   it screws up the direct comparisons below.
 40146                                  
 40147 0000384E 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 40148                                  ;endif
 40149                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 40150                                  	; 03/01/2023
 40151                                  	; ds = cs
 40152 00003850 A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.
 40153                                  
 40154                                  ;ifdef	MULTI_CONFIG
 40155                                  
 40156                                  ;   There is no whitespace/delimiter between the "begin block" character
 40157                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 40158                                  ;   skipping code
 40159                                  
 40160 00003853 3C5B                    	cmp	al,CONFIG_BEGIN
 40161 00003855 7455                    	je	short org31
 40162 00003857 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 40163 00003859 740F                    	je	short no_mapcase
 40164 0000385B 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 40165 0000385D 740B                    	je	short no_mapcase
 40166 0000385F 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 40167 00003861 7407                    	je	short no_mapcase
 40168 00003863 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 40169 00003865 7403                    	je	short no_mapcase
 40170 00003867 E8350B                  	call	mapcase			; map case of rest of line to UPPER
 40171                                  no_mapcase:
 40172                                  ;endif
 40173                                  	;; 02/11/2022
 40174                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 40175                                  	;; 03/01/2023
 40176                                  	;; ds = cs
 40177                                  	;mov	[cmd_indicator],al
 40178                                  org2:	
 40179 0000386A E84101                  	call    get2                    ; skip the command name until delimiter
 40180 0000386D 3C0A                            cmp     al,lf 	    ; 0Ah
 40181 0000386F 740F                    	je	short org21
 40182 00003871 3C0D                    	cmp	al,cr 	    ; 0Dh	
 40183 00003873 740B                    	je	short org21
 40184                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40185                                  	; 03/01/2023 - Retro DOS v4.2
 40186 00003875 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 40187 00003877 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 40188                                  
 40189 00003879 E8E70A                  	call	delim
 40190 0000387C 75EC                            jnz	short org2
 40191 0000387E EB02                    	jmp	short org3
 40192                                  org21:					;if cr or lf then
 40193 00003880 4E                      	dec	si			; undo si, cx register
 40194 00003881 41                      	inc	cx			;  and continue
 40195                                  org3:	
 40196                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 40197                                  	;je	short get_cmt_token
 40198                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40199                                  	; 03/01/2023 - Retro DOS v4.2	
 40200                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40201                                  	;je	short org_file
 40202                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 40203                                  	;je	short org_file
 40204                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40205                                  	;je	short org_file
 40206                                  	; 02/11/2022
 40207                                  	; 03/01/2023 - Retro DOS v4.2
 40208                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40209                                  	;;je	short org_file
 40210                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 40211                                  	;je	short org_file
 40212                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 40213                                  	;je	short org_switch
 40214                                  
 40215                                  	; 03/01/2023
 40216                                  	; ds = cs
 40217                                  
 40218 00003882 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 40219 00003887 745D                    	je	short get_cmt_token
 40220                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40221                                  	; 03/01/2023 - Retro DOS v4.2	
 40222 00003889 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40223 0000388E 7430                    	je	short org_file
 40224 00003890 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 40225 00003895 7429                    	je	short org_file
 40226 00003897 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40227 0000389C 7422                    	je	short org_file
 40228                                  	; 02/11/2022
 40229                                  	; 03/01/2023 - Retro DOS v4.2
 40230                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40231                                  	;je	short org_file
 40232 0000389E 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 40233 000038A3 741B                    	je	short org_file
 40234 000038A5 803E[5203]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 40235 000038AA 7403                    	je	short org_switch
 40236                                  	
 40237                                  org31:
 40238 000038AC E99500                  	jmp	org4
 40239                                  
 40240                                  org_switch:
 40241 000038AF E81601                  	call	skip_comment
 40242 000038B2 7472                    	jz	short end_commd_line_brdg
 40243                                  
 40244 000038B4 E8F700                  	call	get2
 40245 000038B7 E8B10A                  	call	org_delim
 40246 000038BA 74F3                    	jz	short org_switch
 40247                                  
 40248 000038BC AA                      	stosb
 40249 000038BD E99300                  	jmp	org5
 40250                                  
 40251                                  org_file:			; get the filename and put 0 at end
 40252 000038C0 E80501                  	call	skip_comment
 40253 000038C3 7464                    	jz	short org_put_zero
 40254                                  
 40255 000038C5 E8E600                  	call	get2		; not a comment
 40256 000038C8 E8980A                  	call	delim
 40257 000038CB 74F3                    	jz	short org_file	; skip the possible delimiters
 40258                                  
 40259 000038CD AA                      	stosb			; copy the first non delim char found in buffer
 40260                                  
 40261                                  org_copy_file:
 40262 000038CE E8F700                  	call	skip_comment	; comment char in the filename?
 40263 000038D1 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 40264                                  
 40265 000038D3 E8D800                  	call	get2
 40266 000038D6 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 40267 000038D8 7457                    	je	short end_file_slash ; this will be the special case.
 40268                                  
 40269 000038DA AA                      	stosb			; save the char. in buffer
 40270 000038DB E8850A                  	call	delim
 40271 000038DE 7459                    	jz	short end_copy_file
 40272                                  
 40273 000038E0 3C20                    	cmp	al, ' '
 40274 000038E2 77EA                    	ja	short org_copy_file ; keep copying
 40275 000038E4 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 40276                                  
 40277                                  get_cmt_token:			; get the token. just max. 2 char.
 40278 000038E6 E8C500                  	call	get2
 40279 000038E9 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 40280 000038EB 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 40281 000038ED 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 40282 000038EF 74F5                    	je	short get_cmt_token ;  character.)
 40283 000038F1 3C3D                    	cmp	al,'='		; = is special in this case.
 40284 000038F3 74F1                    	je	short get_cmt_token
 40285 000038F5 3C0D                    	cmp	al,cr
 40286 000038F7 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 40287 000038F9 3C0A                    	cmp	al,lf
 40288 000038FB 7422                    	je	short get_cmt_end
 40289                                  
 40290                                  	; 03/01/2023
 40291                                  	; ds = cs
 40292                                  	;mov	[cs:cmmt1],al	; store it
 40293                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 40294 000038FD A2[5003]                	mov	[cmmt1],al	; store it
 40295 00003900 C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 40296 00003905 E8A600                  	call	get2
 40297 00003908 3C20                    	cmp	al,' ' ; 20h
 40298 0000390A 7413                    	je	short get_cmt_end
 40299 0000390C 3C09                    	cmp	al,tab ; 9
 40300 0000390E 740F                    	je	short get_cmt_end
 40301 00003910 3C0D                    	cmp	al,cr  ; 0Dh
 40302 00003912 740B                    	je	short get_cmt_end
 40303 00003914 3C0A                    	cmp	al,lf  ; 0Ah
 40304 00003916 740E                    	je	short end_commd_line_brdg
 40305                                  
 40306                                  	;mov	[cs:cmmt2],al
 40307                                  	;inc	byte [cs:cmmt]
 40308                                  	; 03/01/2023
 40309 00003918 A2[5103]                	mov	[cmmt2],al
 40310 0000391B FE06[4F03]              	inc	byte [cmmt]
 40311                                  
 40312                                  get_cmt_end:
 40313 0000391F E88C00                  	call	get2
 40314 00003922 3C0A                    	cmp	al,lf
 40315 00003924 75F9                    	jne	short get_cmt_end	; skip it.
 40316                                  end_commd_line_brdg: 
 40317 00003926 E997FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 40318                                  
 40319                                  org_put_zero:				; make the filename in front of
 40320 00003929 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 40321 0000392D 47                      	inc	di
 40322 0000392E E98FFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 40323                                  
 40324                                  end_file_slash: 			; al = "/" option char.
 40325 00003931 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 40326 00003935 47                      	inc	di			; and
 40327 00003936 AA                      	stosb				; store "/" after that.
 40328 00003937 EB1A                    	jmp	short org5		; continue with the rest of the line
 40329                                  
 40330                                  end_copy_file:
 40331 00003939 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 40332 0000393E 3C0A                    	cmp	al,lf
 40333 00003940 74E4                    	je	short end_commd_line_brdg
 40334 00003942 EB0F                    	jmp	short org5
 40335                                  
 40336                                  org4:					; org4 skips all delimiters after the command name except for '/'
 40337 00003944 E88100                  	call	skip_comment
 40338 00003947 74DD                    	jz	short end_commd_line_brdg
 40339                                  
 40340 00003949 E86200                  	call	get2
 40341 0000394C E81C0A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 40342 0000394F 74F3                    	jz	short org4
 40343 00003951 EB08                    	jmp	short org51
 40344                                  
 40345                                  org5:					; rest of the line
 40346 00003953 E87200                  	call	skip_comment		; comment?
 40347 00003956 74CE                    	jz	short end_commd_line_brdg
 40348 00003958 E85300                  	call	get2			; not a comment.
 40349                                  
 40350                                  org51:
 40351 0000395B AA                      	stosb				; copy the character
 40352 0000395C 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 40353 0000395E 743A                    	je	short at_quote
 40354 00003960 3C20                    	cmp	al,' '  ; 20h
 40355 00003962 77EF                    	ja	short org5
 40356                                  
 40357                                  	; 09/09/2023
 40358                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 40359                                  
 40360                                  					; M051 - Start
 40361                                  	; 03/01/2023
 40362                                  	; ds = cs
 40363 00003964 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 40364                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 40365 00003969 7514                    	jne	short not_dh		; N: 
 40366 0000396B 3C0A                    	cmp	al,lf			; Q: is this line feed
 40367 0000396D 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 40368 0000396F 3C0D                    	cmp	al,cr			; Q: is this a cr
 40369 00003971 75E0                    	jne	short org5		; N: 
 40370 00003973 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 40371 00003978 AA                      	stosb				; put cr after blank
 40372 00003979 FE06[FB35]              	inc	byte [insert_blank]
 40373                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 40374                                  					; inserted
 40375 0000397D EBD4                    	jmp	short org5
 40376                                  not_dh:					; M051 - End
 40377                                  
 40378 0000397F 3C0A                    	cmp	al,lf			; line feed?
 40379 00003981 740F                    	je	short org1_brdg		; handles the next command line.
 40380 00003983 EBCE                    	jmp	short org5		; handles next char in this line.
 40381                                  
 40382                                  org_dhlf:				; M051 - Start
 40383                                  	; 03/01/2023
 40384                                  	; ds = cs
 40385 00003985 803E[FB35]01            	cmp	byte [insert_blank],1
 40386                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 40387 0000398A 7406                    	je	short org1_brdg		; Y:
 40388 0000398C 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 40389 00003991 AA                      	stosb				; put lf after blank
 40390                                  					; M051 - End
 40391                                  org1_brdg:
 40392 00003992 C606[FB35]00            	mov	byte [insert_blank],0 
 40393                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 40394                                  					; M051: devicehigh
 40395 00003997 E93CFE                  	jmp	org1
 40396                                  
 40397                                  at_quote:
 40398 0000399A 803E[4E03]00            	cmp	byte [com_level],0
 40399                                  	;cmp	byte [cs:com_level],0
 40400 0000399F 7407                    	je	short up_level
 40401                                  	;mov	byte [cs:com_level],0	; reset it.
 40402 000039A1 C606[4E03]00            	mov	byte [com_level],0
 40403 000039A6 EBAB                    	jmp	short org5
 40404                                  
 40405                                  up_level:
 40406                                  	;inc	byte [cs:com_level]	; set it.
 40407 000039A8 FE06[4E03]              	inc	byte [com_level]
 40408 000039AC EBA5                    	jmp	short org5
 40409                                  
 40410                                  ;----------------------------------------------------------------------------
 40411                                  ;
 40412                                  ; procedure : get2
 40413                                  ;
 40414                                  ;----------------------------------------------------------------------------
 40415                                  
 40416                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40417                                  	; (SYSINIT:33FAh)
 40418                                  
 40419                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40420                                  	; (SYSINIT:4270h)
 40421                                  get2:
 40422 000039AE E304                    	jcxz	noget
 40423                                  	;
 40424                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40425                                  	;;lods	byte ptr es:[si]
 40426                                  	; 12/12/2022
 40427 000039B0 26                      	es	
 40428 000039B1 AC                      	lodsb
 40429                                  	;mov	al, [es:si]
 40430                                  	;inc	si
 40431                                  	;
 40432 000039B2 49                      	dec	cx
 40433 000039B3 C3                      	retn
 40434                                  noget:
 40435 000039B4 59                      	pop	cx
 40436                                  	; 03/01/2023
 40437                                  	; ds = cs
 40438                                  	;mov	[cs:count],di ; 13/05/2019
 40439                                  	;mov	[cs:org_count],di
 40440 000039B5 893E[5403]              	mov	[count],di
 40441 000039B9 893E[5603]              	mov	[org_count],di
 40442 000039BD 31F6                    	xor	si,si
 40443                                  	;mov	[cs:chrptr],si
 40444 000039BF 8936[5803]              	mov	[chrptr],si
 40445                                  
 40446                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40447                                  
 40448                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40449                                  
 40450                                  ;ifndef MULTI_CONFIG
 40451                                  ;	retn
 40452                                  ;else
 40453                                  
 40454                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 40455                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 40456                                  ;   and the new boot menu stuff...
 40457                                  
 40458 000039C3 89F9                    	mov     cx,di
 40459 000039C5 E9E300                  	jmp     menu_check
 40460                                  
 40461                                  ;endif
 40462                                  	; 02/11/2022
 40463                                  	; 03/01/2023 - Retro DOS v4.2
 40464                                  	;retn
 40465                                  
 40466                                  ;----------------------------------------------------------------------------
 40467                                  ;
 40468                                  ; procedure : skip_comment
 40469                                  ;
 40470                                  ;skip the commented string until lf, if current es:si-> a comment string.
 40471                                  ;in) es:si-> string
 40472                                  ;	 cx -> length.
 40473                                  ;out) zero flag not set if not found a comment string.
 40474                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 40475                                  ;	  the line feed character at this moment when return.
 40476                                  ;	  ax register destroyed.
 40477                                  ;	  if found, si, cx register adjusted accordingly.
 40478                                  ;
 40479                                  ;----------------------------------------------------------------------------
 40480                                  
 40481                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40482                                  	; (SYSINIT:428Dh)
 40483                                  
 40484                                  skip_comment:
 40485 000039C8 E3EA                    	jcxz	noget		; get out of the organize routine.
 40486                                  
 40487                                  	; 03/01/2023
 40488                                  	; ds = cs	
 40489                                  
 40490 000039CA 803E[4E03]00            	cmp	byte [com_level],0
 40491                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 40492 000039CF 752C                    	jne	short no_commt	 ; (not inside quotations)
 40493                                  
 40494 000039D1 803E[4F03]01            	cmp	byte [cmmt],1
 40495                                  	;cmp	byte [cs:cmmt],1
 40496 000039D6 7225                    	jb	short no_commt
 40497                                  
 40498 000039D8 268A04                  	mov	al,[es:si]
 40499                                  	
 40500 000039DB 3806[5003]              	cmp	[cmmt1],al
 40501                                  	;cmp	[cs:cmmt1],al
 40502 000039DF 751C                    	jne	short no_commt
 40503                                  
 40504 000039E1 803E[4F03]02            	cmp	byte [cmmt],2
 40505                                  	;cmp	byte [cs:cmmt],2
 40506 000039E6 750A                    	jne	short skip_cmmt
 40507                                  
 40508 000039E8 268A4401                	mov	al,[es:si+1]
 40509                                  	
 40510 000039EC 3806[5103]              	cmp	[cmmt2],al
 40511                                  	;cmp	[cs:cmmt2],al
 40512 000039F0 750B                    	jne	short no_commt
 40513                                  skip_cmmt:
 40514 000039F2 E3C0                    	jcxz	noget		; get out of organize routine.
 40515 000039F4 268A04                  	mov	al,[es:si]
 40516 000039F7 46                      	inc	si
 40517 000039F8 49                      	dec	cx
 40518 000039F9 3C0A                    	cmp	al,lf		; line feed?
 40519 000039FB 75F5                    	jne	short skip_cmmt
 40520                                  no_commt:
 40521 000039FD C3                      	retn
 40522                                  
 40523                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40524                                  ; (SYSINIT:42C8h)
 40525                                  
 40526                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40527                                  ;%if 0
 40528                                  
 40529                                  ;ifdef	MULTI_CONFIG
 40530                                  
 40531                                  ;----------------------------------------------------------------------------
 40532                                  ;
 40533                                  ;   kbd_read: wait for keystroke
 40534                                  ;
 40535                                  ;   INPUT
 40536                                  ;       DS == CS == sysinitseg
 40537                                  ;
 40538                                  ;   OUTPUT
 40539                                  ;       Carry SET to clean boot, CLEAR otherwise
 40540                                  ;
 40541                                  ;   OTHER REGS USED
 40542                                  ;       All
 40543                                  ;
 40544                                  ;   HISTORY
 40545                                  ;       Created 16-Nov-1992 by JeffPar
 40546                                  ;
 40547                                  ;----------------------------------------------------------------------------
 40548                                  
 40549                                  kbd_read:
 40550 000039FE F606[5A48]02                    test    byte [bDisableUI],2
 40551 00003A03 7520                            jnz     short kbd_nodelay
 40552                                  
 40553 00003A05 1E                              push    ds              ; the bios timer tick count is incremented
 40554 00003A06 29C0                            sub     ax,ax           ; 18.2 times per second;
 40555 00003A08 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 40556                                  	;mov	dx,[046Ch]	; get initial value
 40557                                  kbd_loop:
 40558 00003A0A B401                            mov     ah,1            ;
 40559 00003A0C CD16                            int     16h             ; peek the keyboard
 40560 00003A0E 7514                            jnz	short kbd_loopdone ; something's there, get out
 40561 00003A10 B402                            mov     ah,2            ; peek the shift states
 40562 00003A12 CD16                            int     16h             ;
 40563 00003A14 A803                            test    al,03h          ; either right or left shift key bits set?
 40564 00003A16 750C                            jnz	short kbd_loopdone ; yes
 40565 00003A18 A16C04                          mov     ax,[046Ch]	;
 40566                                  	;sub	ax,dx           ; get difference
 40567                                  	; 15/04/2019 - Retro DOS v4.0
 40568 00003A1B 2E2B06[8A03]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 40569                                  
 40570 00003A20 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 40571 00003A22 72E6                            jb	short kbd_loop	; not yet
 40572                                  kbd_loopdone:
 40573 00003A24 1F                              pop     ds              ; delay complete!
 40574                                  kbd_nodelay:
 40575 00003A25 29DB                            sub     bx,bx           ; assume clean boot
 40576 00003A27 B402                            mov     ah,2            ; peek the shift states
 40577 00003A29 CD16                            int     16h             ;
 40578 00003A2B A803                            test    al,03h          ; either right or left shift key bits set?
 40579 00003A2D 7407                            jz      short kbd_notshift ; no
 40580 00003A2F 43                              inc     bx              ; yes
 40581 00003A30 43                              inc     bx
 40582                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 40583 00003A31 800E[5E48]04            	or	byte [bQueryOpt],4
 40584                                  kbd_notshift:                   ;
 40585 00003A36 B401                            mov     ah,1            ; peek the keyboard
 40586 00003A38 CD16                            int     16h             ;
 40587 00003A3A 743E                            jz	short kbd_test	; no key present
 40588 00003A3C 08C0                            or      al,al           ; is it a function key?
 40589 00003A3E 753A                            jnz	short kbd_test	; no
 40590                                  
 40591                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 40592 00003A40 80FC62                          cmp     ah,62h          ; CTRL F5
 40593 00003A43 7405                            je	short kbd_cfg_bypass
 40594                                  	
 40595 00003A45 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 40596 00003A48 750D                            jne	short kbd_notf5	; no
 40597                                  kbd_cfg_bypass:
 40598 00003A4A BA[D64D]                        mov     dx,_$CleanMsg
 40599 00003A4D E8DD0B                          call    print
 40600                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 40601 00003A50 800E[5E48]04            	or	byte [bQueryOpt],4 
 40602 00003A55 EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 40603                                  kbd_notf5:
 40604                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 40605 00003A57 80FC65                          cmp     ah,65h          ; CTRL F8
 40606 00003A5A 7405                            je	short kbd_cfg_confirm
 40607                                  
 40608 00003A5C 80FC42                          cmp     ah,42h          ; F8 function key?
 40609 00003A5F 7523                            jne	short kbd_exit	; no
 40610                                  kbd_cfg_confirm:
 40611 00003A61 BA[144E]                        mov     dx,_$InterMsg
 40612 00003A64 E8C60B                          call    print           ;
 40613 00003A67 B301                            mov     bl,1            ; yes, interactive-boot option enabled
 40614 00003A69 881E[5E48]                      mov     [bQueryOpt],bl  ; change default setting
 40615                                  kbd_eat:                        ;
 40616 00003A6D B400                            mov     ah,0            ;
 40617 00003A6F CD16                            int     16h             ; eat the key we assumed was a signal
 40618 00003A71 C606[6448]FF                    mov	byte [secElapsed],-1
 40619 00003A76 09DB                            or      bx,bx           ;
 40620 00003A78 7405                            jz	short kbd_clean	;
 40621                                  kbd_test:                       ;
 40622 00003A7A 80FB02                          cmp     bl,2            ;
 40623 00003A7D 7205                            jb	short kbd_exit	;
 40624                                  kbd_clean:                      ;
 40625 00003A7F E86E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 40626 00003A82 F9                              stc                     ; set carry to indicate abort
 40627 00003A83 C3                              retn			;
 40628                                  kbd_exit:                       ;
 40629 00003A84 F8                              clc                     ; clear carry to indicate success
 40630 00003A85 C3                              retn			;
 40631                                  
 40632                                  ;----------------------------------------------------------------------------
 40633                                  ;
 40634                                  ;   set_numlock: set numlock LED
 40635                                  ;
 40636                                  ;   INPUT
 40637                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 40638                                  ;
 40639                                  ;   OUTPUT
 40640                                  ;       None
 40641                                  ;
 40642                                  ;   OTHER REGS USED
 40643                                  ;       None
 40644                                  ;
 40645                                  ;   HISTORY
 40646                                  ;       Created 16-Nov-1992 by JeffPar
 40647                                  ;
 40648                                  ;----------------------------------------------------------------------------
 40649                                  
 40650                                  	; 04/01/2023 - Retro DOS v4.2
 40651                                  
 40652                                  set_numlock:
 40653                                          ; 04/01/2023
 40654                                  	;push	ax
 40655 00003A86 1E                              push    ds
 40656 00003A87 29C0                            sub     ax,ax
 40657 00003A89 8ED8                            mov     ds,ax
 40658 00003A8B 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 40659 00003A8E 2E3B06[9E4D]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 40660 00003A93 7507                            jne	short not_off	; no
 40661 00003A95 80261704DF                      and     byte [0417h],~20h ; 0DFh
 40662 00003A9A EB0D                            jmp     short set_done
 40663                                  not_off:
 40664 00003A9C 2E3B06[9C4D]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 40665 00003AA1 F9                              stc
 40666 00003AA2 7505                            jne	short set_done	; no
 40667 00003AA4 800E170420                      or      byte [0417h],20h
 40668                                  set_done:
 40669 00003AA9 1F                              pop     ds
 40670                                  	; 04/01/2023
 40671                                  	;pop	ax
 40672 00003AAA C3                              retn
 40673                                  
 40674                                  ; 16/04/2019 - Retro DOS v4.0
 40675                                  
 40676                                  ;----------------------------------------------------------------------------
 40677                                  ;
 40678                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 40679                                  ;
 40680                                  ;   INPUT
 40681                                  ;       CX == "organized" config.sys memory image length
 40682                                  ;    ES:SI -> "organized" config.sys memory image
 40683                                  ;       DS == CS == sysinitseg
 40684                                  ;
 40685                                  ;   OUTPUT
 40686                                  ;       Same as above; the idea is that menu_check simply transforms
 40687                                  ;       a block-structured config.sys image into a conventional image,
 40688                                  ;       based on the user's block selection and any other boot-time options
 40689                                  ;       the user may have employed...
 40690                                  ;
 40691                                  ;   OTHER REGS USED
 40692                                  ;       All
 40693                                  ;
 40694                                  ;   NOTES
 40695                                  ;       [count] and [org_count] are set to the new config.sys image length
 40696                                  ;
 40697                                  ;   HISTORY
 40698                                  ;       Created 16-Mar-1992 by JeffPar
 40699                                  ;
 40700                                  ;----------------------------------------------------------------------------
 40701                                  
 40702                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40703                                  	; (SYSINIT:4378h)
 40704                                  
 40705                                  menu_check:
 40706                                  
 40707                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 40708                                  ;   disable clean/interactive boot options
 40709                                  
 40710 00003AAB 51                              push    cx              ;
 40711 00003AAC 56                              push    si              ;
 40712 00003AAD 29DB                            sub     bx,bx           ; remains ZERO until first block
 40713                                  swchk_loop:                     ;
 40714 00003AAF E83507                          call    get_char        ; get first char of current line
 40715 00003AB2 724C                            jc	short swchk_end	; hit eof
 40716 00003AB4 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 40717 00003AB6 7503                            jne	short swchk_next1 ;
 40718 00003AB8 43                              inc     bx              ; remember that we've seen a block
 40719 00003AB9 EB40                            jmp     short swchk_nextline
 40720                                  swchk_next1:                    ;
 40721 00003ABB 3C4E                            cmp     al,CONFIG_NUMLOCK
 40722 00003ABD 750E                            jne	short swchk_next2 ;
 40723 00003ABF 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 40724 00003AC1 7538                            jnz	short swchk_nextline ; before the first block
 40725 00003AC3 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 40726 00003AC6 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 40727 00003ACB EB2E                            jmp     short swchk_nextline
 40728                                  swchk_next2:                    ;
 40729 00003ACD 3C31                            cmp     al,CONFIG_SWITCHES
 40730 00003ACF 752A                            jne	short swchk_nextline ; this line ain't it
 40731                                  swchk_scan:                     ;
 40732 00003AD1 E81307                          call    get_char        ; look for /N or /F
 40733                                  swchk_scan1:                    ;
 40734 00003AD4 3C0A                            cmp     al,LF           ; end of line?
 40735 00003AD6 7423                            je	short swchk_nextline ; yes
 40736 00003AD8 3C2F                            cmp     al,'/'          ; switch-char?
 40737 00003ADA 75F5                            jne	short swchk_scan ; no
 40738 00003ADC E80807                          call    get_char        ;
 40739 00003ADF 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 40740 00003AE1 3A06[961F]                      cmp     al,[swit_n+1]	; 'N'
 40741 00003AE5 7507                            jne	short swchk_scan2 ; no
 40742 00003AE7 800E[5A48]01                    or      byte [bDisableUI],1
 40743 00003AEC EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 40744                                  swchk_scan2:                    ;
 40745 00003AEE 3A06[A21F]                      cmp     al,[swit_f+1]	; 'F'
 40746 00003AF2 75E0                            jne	short swchk_scan1 ; no
 40747 00003AF4 800E[5A48]02                    or      byte [bDisableUI],2
 40748 00003AF9 EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 40749                                  swchk_nextline:                 ;
 40750 00003AFB E8C306                          call    skip_opt_line   ;
 40751 00003AFE EBAF                            jmp     short swchk_loop ;
 40752                                  swchk_end:                      ;
 40753 00003B00 5E                              pop     si              ;
 40754 00003B01 59                              pop     cx              ;
 40755                                  
 40756                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 40757                                  ;   the DisableUI flag is still clear
 40758                                  
 40759 00003B02 F606[5A48]01                    test    byte [bDisableUI],1
 40760 00003B07 7508                            jnz	short menu_search
 40761                                  ;
 40762                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 40763                                  ;   there is anything at all in the keyboard buffer
 40764                                  ;
 40765 00003B09 E8F2FE                          call    kbd_read
 40766 00003B0C 7303                            jnc	short menu_search
 40767 00003B0E E9EE01                          jmp	menu_abort
 40768                                  
 40769                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 40770                                  
 40771                                  menu_search:
 40772 00003B11 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 40773 00003B13 BF[9F48]                        mov     di,szMenu	;
 40774 00003B16 E80304                          call    find_block      ; find the MENU block
 40775 00003B19 7337                            jnc	short menu_found ;
 40776 00003B1B C606[9748]00                    mov     byte [szBoot],0
 40777 00003B20 E90C02                          jmp	no_selection ; not found
 40778                                  
 40779                                  ;   Process the requested menu color(s)
 40780                                  
 40781                                  menu_color:
 40782 00003B23 51                      	push	cx              ;
 40783 00003B24 52                      	push	dx              ;
 40784                                  	;;mov	dx,0007h        ; default color setting
 40785                                  	; 10/09/2023
 40786                                  	;mov	dl,7 ; !*!
 40787 00003B25 E89E06                  	call	get_number	; get first number
 40788 00003B28 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 40789 00003B2B 88DD                    	mov	ch,bl           ; save it in CH
 40790                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 40791                                  	; (high nibble of dl is 0)
 40792                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 40793                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 40794 00003B2D 88DA                    	mov	dl,bl	; 14/08/2023
 40795 00003B2F E83108                  	call	delim           ; did we hit a delimiter
 40796 00003B32 750E                    	jne	short check_color ; no, all done
 40797 00003B34 E88F06                  	call	get_number	; get next number
 40798 00003B37 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 40799 00003B3A 88DE                    	mov	dh,bl           ; save it in DH
 40800                                  	; 10/09/2023
 40801                                  	;and	dl,0Fh	; !**!	;
 40802 00003B3C B104                    	mov	cl,4            ;
 40803 00003B3E D2E3                    	shl	bl,cl           ;
 40804 00003B40 08DA                    	or	dl,bl           ;
 40805                                  check_color:
 40806 00003B42 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 40807 00003B44 7503                    	jne	short set_color	; no
 40808 00003B46 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 40809                                  set_color:
 40810 00003B49 8816[5548]              	mov	[bMenuColor],dl ;
 40811 00003B4D 5A                      	pop	dx              ;
 40812 00003B4E 59                      	pop	cx              ;
 40813 00003B4F E9A900                  	jmp	menu_nextitem
 40814                                  
 40815                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 40816                                  ;   above is there simply to alleviate short jump problems)
 40817                                  
 40818                                  menu_found:
 40819 00003B52 C606[5F48]01                    mov     byte [bDefBlock],1
 40820                                          ;mov	word [offDefBlock],0
 40821 00003B57 C606[6348]FF                    mov     byte [secTimeOut],-1
 40822 00003B5C 8026[5E48]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 40823                                  	; 10/09/2023
 40824 00003B61 29D2                    	sub	dx,dx
 40825 00003B63 8916[6148]              	mov	[offDefBlock],dx ; 0
 40826                                  
 40827 00003B67 E85706                          call    skip_opt_line   ; skip to next line
 40828                                  	; 10/09/2023
 40829                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 40830                                  
 40831                                  ;   Process the menu block now
 40832                                  
 40833                                  menu_process:
 40834 00003B6A E87A06                          call    get_char        ; get first char of current line
 40835 00003B6D 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 40836 00003B6F 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 40837 00003B71 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 40838 00003B73 7428                            je	short to_menu_getdefault
 40839 00003B75 3C4F                            cmp     al,CONFIG_SUBMENU
 40840 00003B77 744D                            je	short menu_item	; go process sub-menu
 40841 00003B79 3C45                            cmp     al,CONFIG_MENUITEM
 40842 00003B7B 7449                            je	short menu_item	; go process menu item
 40843 00003B7D 3C41                            cmp     al,CONFIG_MENUDEFAULT
 40844 00003B7F 741E                            je	short menu_default ; go process menu default
 40845 00003B81 3C52                            cmp     al,CONFIG_MENUCOLOR
 40846 00003B83 749E                            je	short menu_color ; go process menu color
 40847 00003B85 3C4E                            cmp     al,CONFIG_NUMLOCK
 40848 00003B87 740F                            je	short menu_numlock ;
 40849 00003B89 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 40850 00003B8B 746E                            je	short menu_nextitem ;
 40851 00003B8D E8C307                          call    any_delim       ; allow blank lines and such
 40852 00003B90 7469                            je	short menu_nextitem ;
 40853 00003B92 F9                              stc                     ;
 40854 00003B93 E82607                          call    print_error     ; non-MENU command!
 40855 00003B96 EB63                            jmp     short menu_nextitem
 40856                                  menu_numlock:
 40857 00003B98 E8EBFE                          call    set_numlock
 40858 00003B9B EB5E                            jmp     short menu_nextitem
 40859                                  to_menu_getdefault:
 40860 00003B9D EB62                            jmp     short menu_getdefault
 40861                                  
 40862                                  ;   Save the offset of the default block name, we'll need it later
 40863                                  
 40864                                  menu_default:
 40865 00003B9F 8936[6148]                      mov     [offDefBlock],si; save address of default block name
 40866 00003BA3 803E[6448]00                    cmp     byte [secElapsed],0
 40867 00003BA8 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 40868 00003BAA E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 40869 00003BAD 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 40870 00003BAF E8FB05                          call    skip_delim      ; something is typed
 40871 00003BB2 7247                            jc	short menu_nextitem ;
 40872 00003BB4 89DE                            mov     si,bx           ;
 40873 00003BB6 E80D06                          call    get_number      ; get number (of seconds for timeout)
 40874 00003BB9 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 40875                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 40876 00003BBC 7602                            jna	short timeout_ok ; 01/08/2023
 40877 00003BBE B35A                    	mov     bl,90           ;  display function can handle)
 40878                                  timeout_ok:                    ;
 40879 00003BC0 881E[6348]                      mov     [secTimeOut],bl ;
 40880                                  timeout_skip:
 40881 00003BC4 EB35                            jmp     short menu_nextitem
 40882                                  
 40883                                  ;   Verify that this is a valid menu item by searching for the named block
 40884                                  
 40885                                  menu_item:
 40886                                  	;cmp	dl,9	; 04/01/2023
 40887 00003BC6 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 40888 00003BC9 7330                            jae	short menu_nextitem ;
 40889 00003BCB 89F7                            mov     di,si           ; DS:DI -> block name to search for
 40890 00003BCD E83303                          call    srch_block      ;
 40891 00003BD0 7406                            je	short menu_itemfound ;
 40892 00003BD2 F9                              stc                     ;
 40893 00003BD3 E8E606                          call    print_error     ; print error and pause
 40894 00003BD6 EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 40895                                  
 40896                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 40897                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 40898                                  ;   and CX are unmodified
 40899                                  
 40900                                  menu_itemfound:
 40901 00003BD8 42                              inc     dx              ; otherwise, increment total block count
 40902 00003BD9 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 40903 00003BDB 8887[6548]                      mov	[abBlockType+bx],al
 40904 00003BDF 01DB                            add     bx,bx           ; of recorded block names and descriptions
 40905                                  
 40906                                  ;   There should be a description immediately following the block name on
 40907                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 40908                                  ;   description...
 40909                                  
 40910 00003BE1 89B7[6F48]                      mov     [aoffBlockName+bx],si
 40911 00003BE5 89B7[8348]                      mov     [aoffBlockDesc+bx],si
 40912 00003BE9 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 40913 00003BEB E8A905                          call    skip_token      ;
 40914 00003BEE 720B                            jc	short menu_nextitem ; hit eol/eof
 40915 00003BF0 E8BA05                          call    skip_delim      ;
 40916 00003BF3 7206                            jc	short menu_nextitem ; hit eol/eof
 40917 00003BF5 87FB                            xchg    bx,di           ;
 40918 00003BF7 89BF[8348]                      mov     [aoffBlockDesc+bx],di
 40919                                  
 40920                                  menu_nextitem:
 40921 00003BFB E8C305                          call    skip_opt_line   ;
 40922 00003BFE E969FF                          jmp     menu_process    ; go back for more lines
 40923                                  
 40924                                  ;   Display menu items now, after determining which one is default
 40925                                  
 40926                                  menu_getdefault:
 40927 00003C01 08D2                            or      dl,dl           ; where there any valid blocks at all?
 40928 00003C03 7505                            jnz	short menu_valid ; yes
 40929 00003C05 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 40930 00003C07 E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 40931                                  menu_valid:
 40932 00003C0A 29DB                            sub     bx,bx           ;
 40933 00003C0C 8816[6048]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 40934 00003C10 8B3E[6148]                      mov     di,[offDefBlock];
 40935 00003C14 09FF                            or      di,di           ; does a default block exist?
 40936 00003C16 741C                            jz	short menu_nodefault ; no
 40937 00003C18 43                              inc     bx              ; yes, walk name table, looking for default
 40938                                  menu_chkdefault:
 40939 00003C19 53                              push    bx              ;
 40940 00003C1A 01DB                            add     bx,bx           ;
 40941 00003C1C 8BB7[6F48]                      mov     si,[aoffBlockName+bx]
 40942 00003C20 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 40943 00003C23 1E                              push    ds              ;
 40944 00003C24 06                              push    es              ;
 40945 00003C25 1F                              pop     ds              ;
 40946 00003C26 E81A03                          call    comp_names      ; is this block the same as the default?
 40947 00003C29 1F                              pop     ds              ;
 40948 00003C2A 5B                              pop     bx              ;
 40949 00003C2B 7409                            je	short menu_setdefault ; yes
 40950 00003C2D 43                              inc     bx              ;
 40951 00003C2E 3A1E[6048]                      cmp     bl,[bMaxBlock]  ; all done searching?
 40952 00003C32 76E5                            jbe	short menu_chkdefault ; not yet
 40953                                  menu_nodefault:
 40954 00003C34 B301                            mov     bl,1            ; if no default, force default to #1
 40955                                  menu_setdefault:
 40956 00003C36 881E[5F48]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 40957                                  
 40958                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 40959                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 40960                                  ;   supposed to skip menu display and run with the specified default block;
 40961                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 40962                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 40963                                  ;   with no timeout)
 40964                                  
 40965 00003C3A 803E[6348]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 40966 00003C3F 750A                            jne	short menu_display ; no
 40967 00003C41 F606[5E48]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 40968 00003C46 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 40969 00003C48 E9C700                          jmp     not_topmenu	;
 40970                                  
 40971                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 40972                                  
 40973                                  menu_display:
 40974 00003C4B B40F                            mov     ah,0Fh          ; get current video mode
 40975 00003C4D CD10                            int     10h             ;
 40976 00003C4F B400                            mov     ah,00h          ; just re-select that mode
 40977 00003C51 CD10                            int     10h             ;
 40978 00003C53 06                              push    es              ;
 40979 00003C54 B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 40980 00003C57 8EC0                            mov     es,ax           ; and save the current (default) video page
 40981 00003C59 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 40982 00003C5D A3[5C48]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 40983 00003C60 26A06200                        mov     al,[es:0062h]   ;
 40984 00003C64 A2[5B48]                        mov     [bCRTPage],al   ;
 40985 00003C67 A1[5648]                        mov     ax,[bMenuPage]	; select new page for menu
 40986 00003C6A CD10                            int     10h             ;
 40987 00003C6C B80006                          mov     ax,0600h        ; clear entire screen
 40988 00003C6F 8A3E[5548]                      mov     bh,[bMenuColor] ; using this color
 40989 00003C73 29C9                            sub     cx,cx           ; upper left row/col
 40990                                          ;mov	dl,[es:CRT_Cols] 
 40991 00003C75 268A164A00                      mov	dl,[es:4Ah]
 40992 00003C7A FECA                    	dec     dl              ;
 40993                                          ;mov	dh,[es:CRT_Rows];
 40994 00003C7C 268A368400                      mov	dh,[es:84h]
 40995 00003C81 08F6                    	or      dh,dh           ; # of rows valid?
 40996 00003C83 7504                            jnz	short menu_clear ; hopefully
 40997 00003C85 8A36[5948]                      mov     dh,[bLastRow]   ; no, use a default
 40998                                  menu_clear:
 40999 00003C89 CD10                            int     10h             ; clear the screen using the req. attribute
 41000 00003C8B 07                              pop     es              ;
 41001 00003C8C 8836[5948]                      mov     [bLastRow],dh   ; save DH
 41002 00003C90 BA[514E]                        mov     dx,_$MenuHeader
 41003 00003C93 E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 41004                                  
 41005 00003C96 F606[5A48]01                    test    byte [bDisableUI],1
 41006 00003C9B 751F                            jnz     short menu_nostatus
 41007 00003C9D 8A3E[5648]                      mov     bh,[bMenuPage]  ;
 41008 00003CA1 8A36[5948]                      mov     dh,[bLastRow]   ; restore DH
 41009 00003CA5 B200                            mov     dl,0            ; print the status line on row DH, col 0,
 41010 00003CA7 B402                            mov     ah,02h          ; now that we can trash the cursor position
 41011 00003CA9 CD10                            int     10h             ;
 41012 00003CAB BA[9D4E]                        mov     dx,_$StatusLine
 41013 00003CAE E87C09                          call    print           ;
 41014 00003CB1 B403                            mov     ah,3            ; get cursor position
 41015 00003CB3 CD10                            int     10h             ;
 41016 00003CB5 80EA02                          sub     dl,2            ;
 41017 00003CB8 8816[5848]                      mov     [bLastCol],dl   ; save column where status char will go
 41018                                  
 41019                                  menu_nostatus:
 41020 00003CBC BB0100                          mov     bx,1            ; now prepare to display all the menu items
 41021                                  menu_disploop:
 41022 00003CBF E8B002                          call    print_item	; print item #BL
 41023 00003CC2 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 41024 00003CC3 3A1E[6048]                      cmp     bl,[bMaxBlock]  ; all done?
 41025 00003CC7 76F6                            jbe	short menu_disploop ; not yet
 41026                                  
 41027                                  ;   Set cursor position to just below the menu items
 41028                                  
 41029 00003CC9 B200                            mov     dl,0            ; select column
 41030 00003CCB 88DE                            mov     dh,bl           ;
 41031 00003CCD 80C604                          add     dh,4            ; select row below menu
 41032 00003CD0 8A3E[5648]                      mov     bh,[bMenuPage]  ;
 41033 00003CD4 B402                            mov     ah,02h          ; set cursor position beneath the block list
 41034 00003CD6 CD10                            int     10h             ;
 41035                                  
 41036 00003CD8 BA[8A4E]                        mov     dx,_$MenuPrmpt
 41037 00003CDB E84F09                          call    print           ;
 41038 00003CDE E82903                          call    select_item     ; make a selection, return # in BX
 41039 00003CE1 BA[4A4C]                        mov     dx,crlfm	
 41040 00003CE4 E84609                          call    print           ;
 41041 00003CE7 FF36[5A48]                      push    word [bDisableUI]
 41042 00003CEB 800E[5A48]01                    or      byte [bDisableUI],1
 41043 00003CF0 E86704                          call    show_status     ; clear the status line now
 41044 00003CF3 8F06[5A48]                      pop     word [bDisableUI]
 41045                                  
 41046                                  ;   Now begins the "re-organization" process...
 41047                                  
 41048                                  menu_autoselect:
 41049 00003CF7 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 41050 00003CFA 7508                            jne	short normal_boot ; no
 41051 00003CFC E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 41052                                  menu_abort:
 41053 00003CFF 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 41054 00003D01 E9E400                          jmp	menu_exit	;
 41055                                  
 41056                                  normal_boot:
 41057 00003D04 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 41058 00003D07 7509                            jne	short not_topmenu ; no
 41059 00003D09 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 41060 00003D0D 29F6                            sub     si,si           ;
 41061 00003D0F E9FFFD                          jmp     menu_search
 41062                                  
 41063                                  not_topmenu:
 41064 00003D12 80BF[6548]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 41065 00003D17 7510                            jne	short not_submenu
 41066 00003D19 01DB                            add     bx,bx           ;
 41067 00003D1B 8BBF[6F48]                      mov     di,[aoffBlockName+bx]
 41068 00003D1F E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 41069 00003D22 89FE                            mov     si,di           ;
 41070 00003D24 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 41071 00003D26 E929FE                          jmp     menu_found
 41072                                  
 41073                                  not_submenu:
 41074 00003D29 01DB                            add     bx,bx           ; get BX -> name of selected block
 41075 00003D2B 8B9F[6F48]                      mov     bx,[aoffBlockName+bx]
 41076                                  
 41077                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 41078                                  ;   the offset relative to ES of the block name to be processed (along with
 41079                                  ;   all the "common" lines of course)
 41080                                  
 41081                                  no_selection:
 41082 00003D2F 891E[6148]                      mov     [offDefBlock],bx; save selection
 41083 00003D33 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 41084 00003D37 29F6                            sub     si,si           ;
 41085 00003D39 1E                              push    ds              ;
 41086 00003D3A 8E1E[9515]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 41087 00003D3E 29FF                            sub     di,di           ;
 41088                                  
 41089                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 41090                                  ;
 41091                                  ;   Work our way through the config.sys image again, this time copying
 41092                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 41093                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 41094                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 41095                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 41096                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 41097                                  ;
 41098                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 41099                                  ;   stack we're running on, then we should check it inside copy_block
 41100                                  
 41101                                  copyblock_loop:
 41102 00003D40 53                              push    bx              ; save selected block name
 41103 00003D41 E82F01                          call    copy_block      ; process (named or common) block
 41104 00003D44 5B                              pop     bx              ;
 41105 00003D45 7232                            jc	short move_config ; hit eof
 41106                                  
 41107                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 41108                                  
 41109                                  copyblock_begin:
 41110                                  
 41111                                  ; 10/09/2023
 41112                                  %if 0
 41113                                          push    ax              ;
 41114                                          push    cx              ;
 41115                                          push    si              ;
 41116                                          push    di              ; always do "common" blocks
 41117                                          mov     di,szCommon
 41118                                          push    ds              ;
 41119                                          push    cs              ;
 41120                                          pop     ds              ;
 41121                                          call    comp_names      ;
 41122                                          pop     ds              ;
 41123                                          pop     di              ;
 41124                                          pop     si              ;
 41125                                          pop     cx              ;
 41126                                          pop     ax              ;
 41127                                          je	short copyblock_check
 41128                                  %endif
 41129                                  	; 10/09/2023
 41130 00003D47 57                      	push	di
 41131 00003D48 BF[A448]                	mov	di,szCommon	; always do "common" blocks
 41132 00003D4B E81602                  	call	comp_names_x	; (comp_names_safe)
 41133 00003D4E 5F                      	pop	di
 41134 00003D4F 740F                    	je	short copyblock_check
 41135                                  
 41136 00003D51 09DB                            or      bx,bx           ; is there a block name to check?
 41137 00003D53 7414                            jz	short copyblock_skip ; no
 41138 00003D55 57                              push    di              ;
 41139 00003D56 89DF                            mov     di,bx           ; check block against given block name
 41140 00003D58 1E                              push    ds              ;
 41141 00003D59 06                              push    es              ;
 41142 00003D5A 1F                              pop     ds              ;
 41143 00003D5B E8E501                          call    comp_names      ; is this the block we really want to do?
 41144 00003D5E 1F                              pop     ds              ;
 41145 00003D5F 5F                              pop     di              ;
 41146                                  copyblock_check:
 41147 00003D60 7217                            jc	short move_config ; hit eof
 41148 00003D62 7505                            jne	short copyblock_skip ;
 41149 00003D64 E85A04                          call    skip_opt_line   ;
 41150 00003D67 EBD7                            jmp	short copyblock_loop
 41151                                  
 41152                                  copyblock_skip:                 ;
 41153 00003D69 E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 41154 00003D6C E87804                          call    get_char        ;
 41155 00003D6F 7208                            jc	short move_config ; hit eof
 41156 00003D71 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41157 00003D73 3C5B                            cmp     al,CONFIG_BEGIN ;
 41158 00003D75 74D0                            je	short copyblock_begin
 41159 00003D77 EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 41160                                  ;
 41161                                  ;   To create as little risk to the rest of SysInit as little as possible,
 41162                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 41163                                  ;   copy the new config.sys image to "confbot"
 41164                                  ;
 41165                                  move_config:
 41166 00003D79 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 41167 00003D7B 51                              push    cx              ;
 41168                                  ;
 41169                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 41170                                  ;   since the configuration name only currently exists in the "confbot" area
 41171                                  ;
 41172                                   	;mov	cx,7
 41173 00003D7C B90700                  	mov     cx,szMenu-szBoot-1
 41174 00003D7F BE[9748]                        mov     si,szBoot	; first copy the CONFIG= part
 41175 00003D82 47                              inc     di              ; skip a byte, in case absolutely nothing
 41176                                                                  ; was copied to the workspace, because we always
 41177                                                                  ; zero the first byte of the workspace (below)
 41178                                  copy_boot: 
 41179                                  	;lods    byte ptr cs:[si];
 41180 00003D83 2E                              cs
 41181 00003D84 AC                      	lodsb
 41182 00003D85 8805                    	mov     [di],al         ;
 41183 00003D87 47                              inc     di              ;
 41184 00003D88 E2F9                            loop    copy_boot       ;
 41185                                  
 41186 00003D8A 06                              push    es              ; then copy the configuration name
 41187                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 41188                                  	; 04/01/2023
 41189 00003D8B B179                    	mov	cl,128-7
 41190 00003D8D 2E8B36[6148]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 41191 00003D92 09F6                            or      si,si           ; valid?
 41192 00003D94 7505                            jnz	short l1	; yes
 41193 00003D96 0E                              push    cs              ;
 41194 00003D97 07                              pop     es              ;
 41195 00003D98 BE[A448]                        mov     si,szCommon
 41196 00003D9B 268A04                  l1:     mov     al,[es:si]      ;
 41197 00003D9E E8B205                          call    any_delim       ;
 41198 00003DA1 7406                            je	short l2	;
 41199 00003DA3 8805                            mov     [di],al         ;
 41200 00003DA5 46                              inc     si              ;
 41201 00003DA6 47                              inc     di              ;
 41202 00003DA7 E2F2                            loop    l1              ;
 41203 00003DA9 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 41204 00003DAC 07                              pop     es              ;
 41205                                  
 41206                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 41207                                  
 41208 00003DAD 29FF                            sub     di,di           ;
 41209 00003DAF 2E893E[9315]                    mov     [cs:config_envlen],di
 41210 00003DB4 29F6                            sub     si,si           ;
 41211 00003DB6 59                              pop     cx              ; recover the size of "config_wrkseg"
 41212                                  
 41213 00003DB7 51                              push    cx              ;
 41214 00003DB8 F3A4                            rep     movsb           ; moved!
 41215 00003DBA 59                              pop     cx              ;
 41216 00003DBB 8CD8                            mov     ax,ds           ;
 41217 00003DBD 1F                              pop     ds              ;
 41218                                  
 41219                                  ;   Now that the config_wrkseg is available once again, we shall
 41220                                  ;   use it to create an environment. The first thing to go in will be
 41221                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 41222                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 41223                                  ;   is empty.
 41224                                  
 41225 00003DBE 06                              push    es              ;
 41226 00003DBF 8EC0                            mov     es,ax           ;
 41227 00003DC1 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 41228 00003DC2 26C606000000                    mov     byte [es:0],0	;empty the environment block
 41229 00003DC8 E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 41230 00003DCB 07                              pop     es
 41231                                  
 41232                                  ;   Before returning, restore the default video page setting but do NOT
 41233                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 41234                                  ;   displayed on a different page, then it's because we don't want to see
 41235                                  ;   all the device driver/TSR goop (which goes to the default page)
 41236                                  
 41237                                  menu_done:
 41238 00003DCC 803E[5648]00                    cmp     byte [bMenuPage],0
 41239 00003DD1 7415                            je	short menu_exit	;
 41240 00003DD3 06                              push    es              ;
 41241 00003DD4 B84000                          mov     ax,40h          ;
 41242 00003DD7 8EC0                            mov     es,ax           ;
 41243 00003DD9 A1[5C48]                        mov     ax,[wCRTStart]  ;
 41244 00003DDC 26A34E00                        mov     [es:004Eh],ax   ;
 41245 00003DE0 A0[5B48]                        mov     al,[bCRTPage]   ;
 41246 00003DE3 26A26200                        mov     [es:0062h],al   ;
 41247 00003DE7 07                              pop     es              ;
 41248                                  menu_exit:
 41249 00003DE8 890E[5403]                      mov     [count],cx      ; set new counts
 41250 00003DEC 890E[5603]                      mov     [org_count],cx  ;
 41251                                          ; 10/09/2023 (*) - Erdogan Tan
 41252                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 41253                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 41254                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 41255 00003DF0 C3                      	retn
 41256                                  
 41257                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 41258                                  ;	position (then 'retn' just after it)
 41259                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 41260                                  
 41261                                  ;----------------------------------------------------------------------------
 41262                                  ;
 41263                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 41264                                  ;
 41265                                  ;   INPUT
 41266                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 41267                                  ;
 41268                                  ;   OUTPUT
 41269                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 41270                                  ;       carry set if error (eg, missing =); clear otherwise
 41271                                  ;
 41272                                  ;   OTHER REGS USED
 41273                                  ;       None
 41274                                  ;
 41275                                  ;   NOTES
 41276                                  ;       None
 41277                                  ;
 41278                                  ;   HISTORY
 41279                                  ;       Created 29-Mar-1992 by JeffPar
 41280                                  ;
 41281                                  ;----------------------------------------------------------------------------
 41282                                  
 41283                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41284                                  	; (SYSINIT:46D4h)
 41285                                  
 41286                                  copy_envvar:
 41287 00003DF1 51                              push    cx              ;
 41288 00003DF2 56                              push    si              ;
 41289 00003DF3 1E                              push    ds              ;
 41290 00003DF4 06                              push    es              ;
 41291 00003DF5 06                              push    es              ;
 41292 00003DF6 8E06[9515]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 41293 00003DFA 1F                              pop     ds                 ; DS:SI to point to envvar
 41294                                  
 41295                                  ;   Have to calculate the length of the variable name (and if we hit
 41296                                  ;   the end of the line before we hit '=', then it's curtains for this
 41297                                  ;   config.sys line)
 41298                                  ;
 41299                                  ;   The check for NULL is important because copy_envvar is also used to copy
 41300                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 41301                                  ;   menu block existed (in order to prevent the creation of an environment)
 41302                                  
 41303 00003DFB 29C9                            sub     cx,cx           ;
 41304                                  copy_varlen:                    ;
 41305 00003DFD AC                              lodsb                   ;
 41306 00003DFE 08C0                            or      al,al           ; NULL?
 41307                                          ;stc	; 10/09/2023 (x)
 41308 00003E00 746B                            jz	short copy_envexit ; yes, abort
 41309 00003E02 3C0D                            cmp     al,cr           ;
 41310                                          ;stc	; 10/09/2023 (x)
 41311 00003E04 7467                            je	short copy_envexit
 41312 00003E06 3C0A                            cmp     al,lf           ;
 41313                                          ;stc	; 10/09/2023 (x)
 41314 00003E08 7463                            je	short copy_envexit
 41315 00003E0A 41                              inc     cx              ;
 41316 00003E0B 3C3D                            cmp     al,'='          ;
 41317 00003E0D 75EE                            jne	short copy_varlen
 41318 00003E0F B000                            mov     al,0            ;
 41319 00003E11 8A24                            mov     ah,[si]         ; save char after '='
 41320 00003E13 29CE                            sub     si,cx           ; back up to given varname
 41321 00003E15 49                              dec     cx              ; CX == # of bytes in varname
 41322 00003E16 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 41323                                  copy_varsrch:
 41324 00003E18 263805                          cmp     byte [es:di],al
 41325 00003E1B 7425                            je	short copy_envprep ; search failed, just copy var
 41326 00003E1D 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 41327 00003E1F 51                              push    cx              ;
 41328 00003E20 56                              push    si              ;
 41329 00003E21 F3A6                            repe    cmpsb           ;
 41330 00003E23 5E                              pop     si              ;
 41331 00003E24 59                              pop     cx              ;
 41332 00003E25 7531                            jne	short copy_varnext ; no match, skip to next varname
 41333 00003E27 26803D3D                        cmp     byte [es:di],'='
 41334 00003E2B 752B                            jne     short copy_varnext ; no match, there's more characters
 41335                                  
 41336                                  ;   Previous occurrence of variable has been found; determine the
 41337                                  ;   entire length and then destroy it
 41338                                  
 41339 00003E2D B9FFFF                          mov     cx,-1           ;
 41340 00003E30 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 41341 00003E32 56                              push    si              ;
 41342 00003E33 89FE                            mov     si,di           ;
 41343 00003E35 89DF                            mov     di,bx           ;
 41344 00003E37 2E8B0E[9315]                    mov     cx,[cs:config_envlen]
 41345 00003E3C 29F1                            sub     cx,si           ; destroy variable now
 41346                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 41347                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 41348                                  
 41349 00003E3E F3                      	rep	; 0F3h
 41350 00003E3F 26                      	es	; 26h
 41351 00003E40 A4                      	movsb	; 0A4h
 41352                                  
 41353 00003E41 5E                      	pop     si
 41354                                  copy_envprep:
 41355 00003E42 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 41356 00003E45 741D                            je	short copy_envdel ; then just exit with variable deleted
 41357 00003E47 80FC0A                          cmp     ah,lf           ;
 41358 00003E4A 7418                            je	short copy_envdel
 41359                                          ;jmp	short copy_envloop
 41360                                  	; 04/01/2023
 41361                                  copy_envloop:                  ;
 41362 00003E4C AC                      	lodsb                   ;
 41363 00003E4D 3C0D                    	cmp	al,cr           ;
 41364 00003E4F 7410                    	je	short copy_envdone
 41365 00003E51 3C0A                    	cmp	al,lf           ;
 41366 00003E53 740C                    	je	short copy_envdone
 41367 00003E55 AA                      	stosb                   ;
 41368 00003E56 EBF4                    	jmp	short copy_envloop
 41369                                  
 41370                                  copy_varnext:                   ;
 41371 00003E58 51                              push    cx              ;
 41372 00003E59 B9FFFF                          mov     cx,-1           ;
 41373 00003E5C F2AE                            repne   scasb           ;
 41374 00003E5E 59                              pop     cx              ;
 41375 00003E5F EBB7                            jmp	short copy_varsrch
 41376                                  
 41377                                  	; 04/01/2023
 41378                                  ;copy_envloop:                  ;
 41379                                  ;	lodsb                   ;
 41380                                  ;	cmp	al,cr           ;
 41381                                  ;	je	short copy_envdone
 41382                                  ;	cmp	al,lf           ;
 41383                                  ;	je	short copy_envdone
 41384                                  ;	stosb                   ;
 41385                                  ;	jmp	short copy_envloop
 41386                                  
 41387                                  copy_envdone:                   ;
 41388 00003E61 28C0                            sub     al,al           ; do SUB to clear carry as well
 41389 00003E63 AA                              stosb                   ; always null-terminate these puppies
 41390                                  copy_envdel:                    ;
 41391 00003E64 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 41392 00003E67 2E893E[9315]                    mov     [cs:config_envlen],di
 41393                                  	; 10/09/2023 (x) - Erdogan Tan
 41394 00003E6C F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 41395                                  copy_envexit:                   ;
 41396 00003E6D F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 41397 00003E6E 07                              pop     es              ;
 41398 00003E6F 1F                              pop     ds              ;
 41399 00003E70 5E                              pop     si              ;
 41400 00003E71 59                              pop     cx              ;
 41401                                  
 41402                                  copy_done:	; 18/12/2022
 41403 00003E72 C3                              retn
 41404                                  
 41405                                  ;----------------------------------------------------------------------------
 41406                                  ;
 41407                                  ;   copy_block:  copy the current block to the new config.sys workspace
 41408                                  ;
 41409                                  ;   INPUT
 41410                                  ;       CX == remaining bytes in "organized" config.sys memory image
 41411                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 41412                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 41413                                  ;             config.sys image) where the current block is to be copied
 41414                                  ;
 41415                                  ;   OUTPUT
 41416                                  ;       Same as above
 41417                                  ;       AL also equals the last character read from the organized image
 41418                                  ;
 41419                                  ;   OTHER REGS USED
 41420                                  ;       All
 41421                                  ;
 41422                                  ;   NOTES
 41423                                  ;       None
 41424                                  ;
 41425                                  ;   HISTORY
 41426                                  ;       Created 16-Mar-1992 by JeffPar
 41427                                  ;
 41428                                  ;----------------------------------------------------------------------------
 41429                                  
 41430                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41431                                  	; (SYSINIT:4759h)
 41432                                  
 41433                                  copy_block:
 41434 00003E73 E87103                          call    get_char        ; check for include
 41435 00003E76 72FA                            jc	short copy_done	;
 41436 00003E78 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41437 00003E7A 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 41438 00003E7C 74F4                            je	short copy_done ;
 41439                                  
 41440 00003E7E 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 41441 00003E80 88E0                            mov     al,ah           ; AL == the original line code
 41442 00003E82 753A                            jne	short copy_line	; not an "include" line
 41443                                  
 41444                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 41445                                  ;   never try to include the block again (no infinite include loops please),
 41446                                  ;   then search for the named block and call copy_block again.
 41447                                  
 41448 00003E84 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 41449 00003E89 57                              push    di              ;
 41450                                  
 41451 00003E8A BF[9F48]                        mov     di,szMenu
 41452 00003E8D E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 41453 00003E90 7426                            je	short copy_skip	;
 41454                                  
 41455 00003E92 BF[A448]                        mov     di,szCommon
 41456 00003E95 E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 41457 00003E98 741E                            je	short copy_skip	;
 41458                                  
 41459 00003E9A 89F7                            mov     di,si           ; try to find the block
 41460 00003E9C E86400                          call    srch_block      ;
 41461 00003E9F 89FA                            mov     dx,di           ;
 41462                                  	; 10/09/2023
 41463                                  	;pop    di              ;
 41464 00003EA1 7514                            jne	short copy_error ; no such block
 41465 00003EA3 5F                      	pop	di  ; 10/09/2023
 41466 00003EA4 51                              push    cx              ;
 41467 00003EA5 89D9                            mov     cx,bx           ;
 41468 00003EA7 56                              push    si              ;
 41469 00003EA8 4A                              dec     dx              ;
 41470 00003EA9 89D6                            mov     si,dx           ;
 41471 00003EAB E80E03                          call    skip_line       ; skip the rest of the "block name" line
 41472 00003EAE E8C2FF                          call    copy_block      ; and copy in the rest of that block
 41473 00003EB1 5E                              pop     si              ;
 41474 00003EB2 59                              pop     cx              ;
 41475 00003EB3 28C0                            sub     al,al           ; force skip_opt_line to skip...
 41476 00003EB5 EB2B                            jmp     short copy_nextline
 41477                                  
 41478                                  copy_error:
 41479                                  	; 10/09/2023
 41480 00003EB7 F8                      	clc
 41481                                  copy_skip:
 41482 00003EB8 5F                              pop     di
 41483                                  ;copy_error:
 41484                                  	; 10/09/2023 (cf=0)
 41485                                  	;clc                    ;
 41486 00003EB9 E80004                          call    print_error     ; note that carry is clear, no pause
 41487 00003EBC EB24                            jmp     short copy_nextline
 41488                                  
 41489                                  ;   Copy the line at ES:SI to the current location at DS:DI
 41490                                  
 41491                                  copy_line:
 41492 00003EBE 8805                            mov     [di],al         ;
 41493 00003EC0 47                              inc     di              ;
 41494 00003EC1 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 41495 00003EC3 721D                            jb	short copy_nextline ; no
 41496 00003EC5 2E803E[9815]00                  cmp     byte [cs:config_multi],0
 41497 00003ECB 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 41498 00003ECD E81700                          call    get_linenum	; BX == line # of line @ES:SI
 41499 00003ED0 891D                            mov     [di],bx         ; stash it immediately following the line code
 41500 00003ED2 47                              inc     di              ;
 41501 00003ED3 47                              inc     di              ;
 41502 00003ED4 EB08                            jmp     short copy_next ;
 41503                                  copy_loop:                      ;
 41504 00003ED6 E80E03                          call    get_char        ;
 41505 00003ED9 7297                            jc	short copy_done ; end of file
 41506 00003EDB 8805                            mov     [di],al         ;
 41507 00003EDD 47                              inc     di              ;
 41508                                  copy_next:
 41509 00003EDE 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 41510 00003EE0 75F4                            jne	short copy_loop	; nope
 41511                                  
 41512                                  copy_nextline:
 41513 00003EE2 E8DC02                          call    skip_opt_line   ;
 41514 00003EE5 EB8C                            jmp     short copy_block
 41515                                  
 41516                                  	; 18/12/2022
 41517                                  ;copy_done:
 41518                                          ;retn
 41519                                  
 41520                                  ;----------------------------------------------------------------------------
 41521                                  ;
 41522                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 41523                                  ;
 41524                                  ;   INPUT
 41525                                  ;    ES:SI -> some line in the config.sys memory image
 41526                                  ;
 41527                                  ;   OUTPUT
 41528                                  ;       BX == line # (relative to 1)
 41529                                  ;
 41530                                  ;   OTHER REGS USED
 41531                                  ;       DX
 41532                                  ;
 41533                                  ;   NOTES
 41534                                  ;       None
 41535                                  ;
 41536                                  ;   HISTORY
 41537                                  ;       Created 16-Mar-1992 by JeffPar
 41538                                  ;
 41539                                  ;----------------------------------------------------------------------------
 41540                                  
 41541                                  get_linenum:
 41542 00003EE7 50                              push    ax              ;
 41543 00003EE8 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 41544 00003EEA 51                              push    cx              ;
 41545 00003EEB 89F2                            mov     dx,si           ; DX == the offset we're looking for
 41546 00003EED 56                              push    si              ;
 41547 00003EEE 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 41548 00003EF3 29F6                            sub     si,si           ; prepare to scan entire file
 41549                                  get_linenum_loop:               ;
 41550 00003EF5 E8C402                          call    skip_line       ;
 41551 00003EF8 7205                            jc	short get_linenum_done
 41552 00003EFA 43                              inc     bx              ;
 41553 00003EFB 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 41554 00003EFD 72F6                            jb	short get_linenum_loop ; no
 41555                                  get_linenum_done:               ;
 41556 00003EFF 5E                              pop     si              ;
 41557 00003F00 59                              pop     cx              ;
 41558 00003F01 58                              pop     ax              ;
 41559 00003F02 C3                              retn
 41560                                  
 41561                                  ;----------------------------------------------------------------------------
 41562                                  ;
 41563                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 41564                                  ;
 41565                                  ;   INPUT
 41566                                  ;       ES -> config.sys image
 41567                                  ;    ES:DI -> block name to find
 41568                                  ;
 41569                                  ;   OUTPUT
 41570                                  ;       ZF flag set, if found
 41571                                  ;    ES:DI -> just past the name in the block heading, if found
 41572                                  ;       BX == # bytes remaining from that point, if found
 41573                                  ;
 41574                                  ;   OTHER REGS USED
 41575                                  ;       None
 41576                                  ;
 41577                                  ;   NOTES
 41578                                  ;       This differs from "find_block" in that it searches the ENTIRE
 41579                                  ;       config.sys image, not merely the remaining portion, and that it
 41580                                  ;       takes a pointer to block name that is *elsewhere* in the image
 41581                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 41582                                  ;
 41583                                  ;   HISTORY
 41584                                  ;       Created 16-Mar-1992 by JeffPar
 41585                                  ;
 41586                                  ;----------------------------------------------------------------------------
 41587                                  
 41588                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 41589 00003F03 50                              push    ax              ;
 41590 00003F04 51                              push    cx              ;
 41591 00003F05 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 41592 00003F0A 56                              push    si              ;
 41593 00003F0B 29F6                            sub     si,si           ;
 41594 00003F0D 1E                              push    ds              ;
 41595 00003F0E 06                              push    es              ;
 41596 00003F0F 1F                              pop     ds              ;
 41597 00003F10 E80900                          call    find_block      ;
 41598 00003F13 89F7                            mov     di,si           ;
 41599 00003F15 89CB                            mov     bx,cx           ;
 41600 00003F17 1F                              pop     ds              ;
 41601 00003F18 5E                              pop     si              ;
 41602 00003F19 59                              pop     cx              ;
 41603 00003F1A 58                              pop     ax              ;
 41604                                  find_exit: ; 16/04/2019
 41605 00003F1B C3                              retn			;
 41606                                  
 41607                                  ;----------------------------------------------------------------------------
 41608                                  ;
 41609                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 41610                                  ;
 41611                                  ;   INPUT
 41612                                  ;    DS:DI -> block name to find
 41613                                  ;    ES:SI -> remainder of config.sys image
 41614                                  ;       CX == remaining size of config.sys image
 41615                                  ;
 41616                                  ;   OUTPUT
 41617                                  ;       ZF flag set, if found (also, CF set if EOF)
 41618                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 41619                                  ;       CX == # bytes remaining from that point
 41620                                  ;
 41621                                  ;   OTHER REGS USED
 41622                                  ;       AX
 41623                                  ;
 41624                                  ;   NOTES
 41625                                  ;       This differs from "srch_block" in that it searches only the
 41626                                  ;       remaining portion of the config.sys image and leaves SI and CX
 41627                                  ;       pointing to where the search left off, and that it takes a pointer
 41628                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 41629                                  ;
 41630                                  ;   HISTORY
 41631                                  ;       Created 16-Mar-1992 by JeffPar
 41632                                  ;
 41633                                  ;----------------------------------------------------------------------------
 41634                                  
 41635                                  find_block:
 41636 00003F1C E8C802                          call    get_char        ; get line code
 41637 00003F1F 72FA                            jc	short find_exit	; end of file
 41638 00003F21 247F                            and     al,~CONFIG_OPTION_QUERY
 41639 00003F23 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 41640 00003F25 740C                            je	short check_line ; no
 41641 00003F27 3C4A                            cmp     al,CONFIG_INCLUDE
 41642 00003F29 7513                            jne	short next_line	;
 41643 00003F2B 2E800E[9815]01                  or	byte [cs:config_multi],1
 41644 00003F31 EB0B                            jmp     short next_line ;
 41645                                  check_line:
 41646 00003F33 2E800E[9815]01                  or      byte [cs:config_multi],1
 41647 00003F39 E80700                          call    comp_names      ; compare block names
 41648 00003F3C 76DD                            jbe	short find_exit	; end of file, or names matched
 41649                                  next_line:
 41650 00003F3E E88002                          call    skip_opt_line   ; no, so skip to next line
 41651 00003F41 EBD9                            jmp	short find_block  ;
 41652                                  ;find_exit:
 41653                                  ;	retn
 41654                                  
 41655                                  ;----------------------------------------------------------------------------
 41656                                  ;
 41657                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 41658                                  ;
 41659                                  ;   INPUT
 41660                                  ;    DS:DI -> keyword to compare
 41661                                  ;    ES:SI -> position in config.sys
 41662                                  ;       CX == remaining bytes in config.sys
 41663                                  ;
 41664                                  ;   OUTPUT
 41665                                  ;       ZF flag set, if match (also, CF set if EOF)
 41666                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 41667                                  ;       CX == # bytes remaining from that point
 41668                                  ;
 41669                                  ;   OTHER REGS USED
 41670                                  ;       AX
 41671                                  ;
 41672                                  ;   NOTES
 41673                                  ;       None
 41674                                  ;
 41675                                  ;   HISTORY
 41676                                  ;       Created 16-Mar-1992 by JeffPar
 41677                                  ;
 41678                                  ;----------------------------------------------------------------------------
 41679                                  
 41680                                  comp_names:
 41681 00003F43 57                              push    di              ;
 41682                                  comp_loop:                      ;
 41683 00003F44 E8A002                          call    get_char        ;
 41684 00003F47 7210                            jc	short comp_exit	;
 41685 00003F49 E80704                          call    any_delim       ; is next character a delimiter?
 41686 00003F4C 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 41687 00003F4E 740B                            je	short comp_almost ; yes, it *could* be a match
 41688 00003F50 47                              inc     di              ;
 41689 00003F51 25DFDF                          and     ax,~2020h ; 0DFDFh 
 41690                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 41691 00003F54 38E0                            cmp     al,ah           ; match?
 41692 00003F56 74EC                            je	short comp_loop ; yes, keep looking at the characters
 41693 00003F58 F8                              clc                     ; prevent erroneous eof indication: clear carry
 41694                                  comp_exit:                      ;
 41695 00003F59 5F                              pop     di              ;
 41696 00003F5A C3                              retn			;
 41697                                  comp_almost:                    ;
 41698 00003F5B 86E0                            xchg    al,ah           ; we don't know for sure if it's a match
 41699 00003F5D E8F303                          call    any_delim       ; until we verify that the second string has
 41700 00003F60 86E0                            xchg    al,ah           ; been exhausted also...
 41701 00003F62 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 41702                                  
 41703                                  ;----------------------------------------------------------------------------
 41704                                  
 41705                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 41706                                  comp_names_x:
 41707                                  	;
 41708                                  comp_names_safe:
 41709 00003F64 50                              push    ax
 41710 00003F65 51                              push    cx
 41711 00003F66 56                              push	si
 41712 00003F67 1E                              push    ds
 41713 00003F68 0E                              push    cs
 41714 00003F69 1F                              pop     ds
 41715 00003F6A E8D6FF                          call    comp_names
 41716 00003F6D 1F                              pop     ds
 41717 00003F6E 5E                      	pop	si
 41718 00003F6F 59                              pop     cx
 41719 00003F70 58                              pop     ax
 41720 00003F71 C3                              retn
 41721                                  
 41722                                  ;----------------------------------------------------------------------------
 41723                                  ;
 41724                                  ;   print_item:  display menu item #BL
 41725                                  ;
 41726                                  ;   INPUT
 41727                                  ;       BL == menu item # to display
 41728                                  ;
 41729                                  ;   OUTPUT
 41730                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 41731                                  ;
 41732                                  ;   OTHER REGS USED
 41733                                  ;       None
 41734                                  ;
 41735                                  ;   NOTES
 41736                                  ;       This function saves/restores the current cursor position, so you
 41737                                  ;       needn't worry about it.
 41738                                  ;
 41739                                  ;   HISTORY
 41740                                  ;       Created 16-Mar-1992 by JeffPar
 41741                                  ;
 41742                                  ;----------------------------------------------------------------------------
 41743                                  
 41744                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41745                                  	; (SYSINIT:485Ah)
 41746                                  
 41747                                  print_item:		; prints menu item #BL (1 to N)
 41748 00003F72 50                              push    ax              ;
 41749 00003F73 53                              push    bx              ;
 41750 00003F74 51                              push    cx              ;
 41751 00003F75 52                              push    dx              ;
 41752 00003F76 56                              push    si              ;
 41753 00003F77 B403                            mov     ah,03h          ; get cursor position
 41754 00003F79 8A3E[5648]                      mov     bh,[bMenuPage]  ; always page zero
 41755 00003F7D CD10                            int     10h             ; DH/DL = row/column
 41756 00003F7F 52                              push    dx              ; save it
 41757 00003F80 B402                            mov     ah,02h          ; set cursor position
 41758 00003F82 88DE                            mov     dh,bl           ;
 41759 00003F84 80C603                          add     dh,3            ;
 41760 00003F87 B205                            mov     dl,5            ;
 41761 00003F89 CD10                            int     10h             ; set cursor position for correct row/col
 41762 00003F8B 88D8                            mov     al,bl           ;
 41763 00003F8D 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 41764 00003F8F 8A26[5548]                      mov     ah,[bMenuColor] ; normal attribute
 41765 00003F93 3A1E[5F48]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 41766 00003F97 7510                            jne	short print_other ; no
 41767 00003F99 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 41768 00003F9C 88E5                            mov     ch,ah           ;
 41769 00003F9E B104                            mov     cl,4            ;
 41770 00003FA0 D2C5                            rol     ch,cl           ;
 41771 00003FA2 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 41772 00003FA4 7503                            jne	short print_other ; no
 41773 00003FA6 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 41774                                  print_other:                    ;
 41775 00003FA9 B700                            mov     bh,0            ;
 41776 00003FAB 01DB                            add     bx,bx           ;
 41777 00003FAD 8BBF[8348]                      mov     di,[aoffBlockDesc+bx]
 41778 00003FB1 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 41779 00003FB3 8A3E[5648]                      mov     bh,[bMenuPage]  ; get correct video page #
 41780 00003FB7 B409                            mov     ah,09h          ; write char/attr
 41781 00003FB9 B90100                          mov     cx,1            ;
 41782 00003FBC CD10                            int     10h             ;
 41783 00003FBE FEC2                            inc     dl              ; increment column
 41784 00003FC0 B402                            mov     ah,02h          ;
 41785 00003FC2 CD10                            int     10h             ;
 41786                                          ;mov	ax,0900h+'.'    ;
 41787 00003FC4 B82E09                          mov	ax,092Eh
 41788 00003FC7 CD10                    	int     10h             ; display '.'
 41789 00003FC9 FEC2                            inc     dl              ; increment column
 41790 00003FCB B402                            mov     ah,02h          ;
 41791 00003FCD CD10                            int     10h             ;
 41792                                          ;mov	ax,0900h+' '    ;
 41793 00003FCF B82009                          mov	ax,0920h
 41794 00003FD2 CD10                    	int     10h             ; display ' '
 41795 00003FD4 FEC2                            inc     dl              ; increment column
 41796 00003FD6 B402                            mov     ah,02h          ;
 41797 00003FD8 CD10                            int     10h             ;
 41798 00003FDA 06                              push    es              ;
 41799                                  print_loop:                     ;
 41800 00003FDB 268A05                          mov     al,[es:di]	; get a character of the description
 41801 00003FDE 47                              inc     di              ;
 41802 00003FDF 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 41803 00003FE1 7502                            jne	short print_nontab ;
 41804 00003FE3 B020                            mov     al,' '          ;
 41805                                  print_nontab:                   ;
 41806 00003FE5 3C20                            cmp     al,' '          ;
 41807 00003FE7 7215                            jb	short print_done ; stop at the 1st character < space
 41808 00003FE9 3C24                            cmp     al,'$'          ;
 41809 00003FEB 7411                            je	short print_done ; also stop on $
 41810 00003FED B409                            mov     ah,09h          ; display function #
 41811 00003FEF CD10                            int     10h             ;
 41812 00003FF1 FEC2                            inc     dl              ; increment column
 41813 00003FF3 80FA4E                          cmp     dl,78           ; far enough?
 41814 00003FF6 7306                            jae	short print_done ; yes
 41815 00003FF8 B402                            mov     ah,02h          ;
 41816 00003FFA CD10                            int     10h             ;
 41817 00003FFC EBDD                            jmp	short  print_loop
 41818                                  print_done:                     ;
 41819 00003FFE 07                              pop     es              ;
 41820 00003FFF 5A                              pop     dx              ;
 41821 00004000 B402                            mov     ah,02h          ;
 41822 00004002 CD10                            int     10h             ; restore previous row/col
 41823 00004004 5E                              pop     si              ;
 41824 00004005 5A                              pop     dx              ;
 41825 00004006 59                              pop     cx              ;
 41826 00004007 5B                              pop     bx              ;
 41827 00004008 58                              pop     ax              ;
 41828 00004009 C3                              retn			;
 41829                                  
 41830                                  ;----------------------------------------------------------------------------
 41831                                  ;
 41832                                  ;   select_item:  wait for user to select menu item, with time-out
 41833                                  ;
 41834                                  ;   INPUT
 41835                                  ;       None
 41836                                  ;
 41837                                  ;   OUTPUT
 41838                                  ;       BX == menu item # (1-N), or -1 for clean boot
 41839                                  ;       Selected menu item highlighted
 41840                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 41841                                  ;
 41842                                  ;   OTHER REGS USED
 41843                                  ;       None
 41844                                  ;
 41845                                  ;   NOTES
 41846                                  ;       None
 41847                                  ;
 41848                                  ;   HISTORY
 41849                                  ;       Created 16-Mar-1992 by JeffPar
 41850                                  ;
 41851                                  ;----------------------------------------------------------------------------
 41852                                  
 41853                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 41854 0000400A 8A1E[5F48]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 41855 0000400E 88D8                            mov     al,bl           ;
 41856 00004010 E83701                          call    disp_num        ;
 41857 00004013 E84401                          call    show_status     ; display current interactive status
 41858 00004016 803E[6348]FF                    cmp     byte [secTimeOut],-1
 41859 0000401B 7452                            je	short input_key	; no time-out, just go to input
 41860 0000401D B42C                            mov     ah,GET_TIME ; 2Ch
 41861 0000401F CD21                            int     21h             ;
 41862 00004021 88F7                            mov     bh,dh           ; BH = initial # of seconds
 41863                                  check_time:
 41864 00004023 A0[6348]                        mov     al,[secTimeOut] ;
 41865 00004026 2A06[6448]                      sub     al,[secElapsed] ;
 41866 0000402A 730D                            jae	short show_time	;
 41867 0000402C 800E[5E48]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 41868 00004031 C606[6448]00                    mov     byte [secElapsed],0
 41869 00004036 E9F600                          jmp	select_done	; time's up!
 41870                                  show_time:
 41871 00004039 53                              push    bx              ;
 41872 0000403A 88C3                            mov     bl,al           ; save # in BL
 41873 0000403C 8A3E[5648]                      mov     bh,[bMenuPage]  ;
 41874 00004040 B403                            mov     ah,03h          ; get cursor position
 41875 00004042 CD10                            int     10h             ;
 41876 00004044 52                              push    dx              ;
 41877 00004045 80C208                  	add	dl,8		; move cursor to the right
 41878 00004048 B402                            mov     ah,02h          ; set cursor position
 41879 0000404A CD10                            int     10h             ;
 41880 0000404C BA[014F]                        mov     dx,_$TimeOut
 41881 0000404F E8DB05                          call    print           ; print the "Time remaining: " prompt
 41882 00004052 88D8                            mov     al,bl           ; recover # from BL
 41883 00004054 98                              cbw                     ; this works because AL is always <= 90
 41884 00004055 B10A                            mov     cl,10           ;
 41885 00004057 F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 41886 00004059 88E1                            mov     cl,ah           ;
 41887 0000405B 0430                            add     al,'0'          ;
 41888 0000405D B40E                            mov     ah,0Eh          ;
 41889 0000405F CD10                            int     10h             ; write TTY tens digit
 41890 00004061 88C8                            mov     al,cl           ;
 41891 00004063 0430                            add     al,'0'          ;
 41892 00004065 B40E                            mov     ah,0Eh          ;
 41893 00004067 CD10                            int     10h             ; write TTY ones digit
 41894 00004069 5A                              pop     dx
 41895 0000406A B402                            mov     ah,02h          ; set cursor position back to where it was
 41896 0000406C CD10                            int     10h             ;
 41897 0000406E 5B                              pop     bx              ;
 41898                                  input_key:
 41899 0000406F B406                            mov     ah,RAW_CON_IO ; 6
 41900 00004071 B2FF                            mov     dl,0FFh         ; input request
 41901 00004073 CD21                            int     21h             ;
 41902 00004075 751F                            jnz	short got_key	;
 41903 00004077 803E[6348]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 41904 0000407C 74F1                            je	short input_key	; no, just go back to input
 41905 0000407E B42C                            mov     ah,GET_TIME     ;
 41906 00004080 CD21                            int     21h             ; DH = seconds
 41907 00004082 88F4                            mov     ah,dh           ;
 41908 00004084 28FE                            sub     dh,bh           ; should generally be zero or one
 41909 00004086 88E7                            mov     bh,ah           ;
 41910 00004088 7302                            jnc	short got_time	;
 41911 0000408A B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 41912                                  got_time:
 41913 0000408C 08F6                            or      dh,dh           ; any change?
 41914 0000408E 74DF                            jz	short input_key	; no
 41915 00004090 0036[6448]                      add     [secElapsed],dh ;
 41916 00004094 EB8D                            jmp	short check_time ;
 41917                                  got_key:
 41918 00004096 50                              push    ax              ;
 41919 00004097 B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 41920 0000409A 8706[6348]                      xchg    [secTimeOut],ax
 41921 0000409E 3CFF                            cmp     al,-1           ; was time-out already disabled?
 41922 000040A0 740E                            je	short timeout_disabled ; yes
 41923 000040A2 53                              push    bx              ; let's disable # seconds display
 41924 000040A3 B8200A                          mov     ax,0A20h        ; write multiple spaces
 41925 000040A6 8B1E[5548]                      mov     bx,[bMenuColor]
 41926 000040AA B95000                          mov     cx,80           ; 80 of them, to be safe
 41927 000040AD CD10                            int     10h             ; to completely obliterate # seconds display
 41928 000040AF 5B                              pop     bx   		;
 41929                                  
 41930                                  timeout_disabled:
 41931 000040B0 58                              pop     ax              ;
 41932 000040B1 08C0                            or      al,al           ; extended key pressed?
 41933 000040B3 755A                            jnz	short normal_key ; no
 41934 000040B5 CD21                            int     21h             ; get the next part of the key then
 41935 000040B7 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 41936                                  
 41937 000040B9 3C48                            cmp     al,48h          ; up arrow?
 41938 000040BB 7510                            jne	short not_up	; no
 41939 000040BD 80FB01                          cmp     bl,1            ; are we as up as up can get?
 41940 000040C0 76AD                            jbe	short input_key	; yes, ignore it
 41941 000040C2 FE0E[5F48]                      dec     byte [bDefBlock] ;
 41942 000040C6 E8A9FE                          call    print_item      ; re-print the current item
 41943 000040C9 FECB                            dec     bl              ; and then print the new current item
 41944 000040CB EB12                            jmp     short print1
 41945                                  not_up:
 41946 000040CD 3C50                            cmp     al,50h          ; down arrow?
 41947 000040CF 7518                            jne	short not_down	; no
 41948 000040D1 3A1E[6048]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 41949 000040D5 7310                            jae	short to_input_key ; yes, ignore it
 41950 000040D7 FE06[5F48]                      inc     byte [bDefBlock] ;
 41951 000040DB E894FE                          call    print_item      ; re-print the current item
 41952 000040DE 43                              inc     bx              ; and then print the new current item
 41953                                  print1: 
 41954 000040DF 88D8                    	mov     al,bl           ;
 41955                                  print2: 
 41956 000040E1 E88EFE                  	call    print_item      ;
 41957 000040E4 E86300                          call    disp_num        ;
 41958                                  to_input_key:
 41959 000040E7 EB86                            jmp	short input_key ; 10/09/2023
 41960                                  not_down:
 41961 000040E9 F606[5A48]01                    test    byte [bDisableUI],1
 41962 000040EE 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 41963 000040F0 3C42                            cmp     al,42h          ; F8 function key?
 41964 000040F2 750B                            jne	short not_f8	; no
 41965 000040F4 8036[5E48]01                    xor     byte [bQueryOpt],1
 41966 000040F9 E85E00                          call    show_status     ;
 41967 000040FC E970FF                          jmp     input_key	;
 41968                                  not_f8:
 41969 000040FF 3C3F                            cmp     al,3Fh          ; F5 function key?
 41970 00004101 75E4                            jne	short to_input_key ; no
 41971                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 41972                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 41973                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 41974 00004103 800E[5E48]04            	or	byte [bQueryOpt],4 ; no more queries
 41975 00004108 BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 41976 0000410B B020                            mov     al,' '          ; don't want to display anything really;
 41977 0000410D EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 41978                                  
 41979                                  normal_key:
 41980 0000410F 3C0D                            cmp     al,0Dh          ; Enter?
 41981 00004111 741C                            je	short select_done ; yes
 41982 00004113 3C08                            cmp     al,08h          ; backspace?
 41983 00004115 7504                            jne	short not_backspace ; no
 41984 00004117 BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 41985 0000411A C3                              retn			;
 41986                                  not_backspace:
 41987 0000411B 2C30                            sub     al,'0'          ; is greater than '0'?
 41988 0000411D 76C8                            jbe	short to_input_key ; no
 41989 0000411F 3A06[6048]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 41990 00004123 77C2                            ja	short to_input_key ; no
 41991 00004125 A2[5F48]                        mov	[bDefBlock],al  ;
 41992 00004128 E847FE                          call    print_item      ; redisplay the current selection
 41993 0000412B 88C3                            mov     bl,al           ; set new selection
 41994 0000412D EBB2                            jmp	short print2
 41995                                  
 41996                                  select_done:
 41997 0000412F B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 41998 00004131 88D8                            mov     al,bl           ;
 41999 00004133 0430                            add     al,'0'          ; convert it into a digit, then display it
 42000                                  
 42001                                  	; fall into disp_input
 42002                                  
 42003                                  ; 16/04/2019 - Retro DOS v4.0
 42004                                  
 42005                                  ;----------------------------------------------------------------------------
 42006                                  ;
 42007                                  ;   disp_input:  display a single character + cr/lf
 42008                                  ;
 42009                                  ;   INPUT
 42010                                  ;       AL == character to display
 42011                                  ;
 42012                                  ;   OUTPUT
 42013                                  ;       None
 42014                                  ;
 42015                                  ;   OTHER REGS USED
 42016                                  ;       None
 42017                                  ;
 42018                                  ;   NOTES
 42019                                  ;       This function is used not only for the menu input selection but
 42020                                  ;       also for the interactive line prompting (the y/n/a thing).
 42021                                  ;
 42022                                  ;   HISTORY
 42023                                  ;       Created 16-Mar-1992 by JeffPar
 42024                                  ;
 42025                                  ;----------------------------------------------------------------------------
 42026                                  
 42027                                  
 42028                                  disp_input:
 42029 00004135 50                      	push	ax
 42030                                  	;cmp	al,' '
 42031                                  	;jae	short disp_ok
 42032                                  	;mov	al,' '
 42033                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 42034 00004136 B220                    	mov	dl,' ' ; 20h
 42035 00004138 38D0                    	cmp	al,dl
 42036 0000413A 7602                    	jna	short disp_input_ok
 42037                                  disp_ok:
 42038 0000413C 88C2                    	mov	dl,al
 42039                                  disp_input_ok:
 42040 0000413E B402                    	mov	ah,STD_CON_OUTPUT ; 2
 42041 00004140 CD21                    	int	21h
 42042 00004142 BA[4A4C]                	mov	dx,crlfm
 42043 00004145 E8E504                  	call	print
 42044 00004148 58                      	pop	ax
 42045 00004149 C3                      	retn
 42046                                  
 42047                                  ;----------------------------------------------------------------------------
 42048                                  
 42049                                  disp_num:
 42050 0000414A 53                              push    bx
 42051 0000414B 0430                            add     al,'0'
 42052 0000414D B40A                            mov     ah,0Ah
 42053 0000414F 8B1E[5548]                      mov     bx,[bMenuColor]
 42054 00004153 B90100                          mov     cx,1
 42055 00004156 CD10                            int     10h
 42056 00004158 5B                              pop     bx
 42057 00004159 C3                              retn
 42058                                  
 42059                                  ;----------------------------------------------------------------------------
 42060                                  ;
 42061                                  ;   show_status:  display current interactive mode setting (on/off/none)
 42062                                  ;
 42063                                  ;   INPUT
 42064                                  ;       None
 42065                                  ;
 42066                                  ;   OUTPUT
 42067                                  ;       None
 42068                                  ;
 42069                                  ;   OTHER REGS USED
 42070                                  ;       None
 42071                                  ;
 42072                                  ;   NOTES
 42073                                  ;       None
 42074                                  ;
 42075                                  ;   HISTORY
 42076                                  ;       Created 16-Mar-1992 by JeffPar
 42077                                  ;
 42078                                  ;----------------------------------------------------------------------------
 42079                                  
 42080                                  show_status:
 42081 0000415A 53                              push    bx              ; BL = video page #
 42082 0000415B 8B1E[5548]                      mov     bx,[bMenuColor]
 42083 0000415F B403                            mov     ah,03h          ; get cursor position
 42084 00004161 CD10                            int     10h             ;
 42085 00004163 52                              push    dx              ; save it
 42086 00004164 B402                            mov     ah,02h          ; set cursor position
 42087 00004166 8B16[5848]                      mov     dx,[bLastCol]   ; set correct row/col
 42088 0000416A F606[5A48]01                    test    byte [bDisableUI],1
 42089 0000416F 740C                            jz	short show_onoff ; just show on/off
 42090 00004171 B200                            mov     dl,0            ;
 42091 00004173 CD10                            int     10h             ;
 42092 00004175 B8200A                          mov     ax,0A20h        ; write multiple spaces
 42093 00004178 B95000                          mov     cx,80           ; 80 of them, to be exact
 42094                                  	; 10/09/2023
 42095                                  	;int	10h             ; to obliterate the status line
 42096 0000417B EB11                            jmp     short show_done ;
 42097                                  show_onoff: 
 42098 0000417D CD10                            int     10h
 42099                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 42100                                  		; AL = character, BH = display page - alpha mode
 42101                                  		; BL = color of character (graphics mode, PCjr only)
 42102                                  		; CX = number of times to write character
 42103                                  
 42104 0000417F A0[FD4E]                        mov     al,[_$NO]	; assume OFF
 42105 00004182 803E[5E48]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 42106 00004187 7503                            jne	short show_noton ; no
 42107 00004189 A0[F94E]                        mov     al,[_$YES]	; yes
 42108                                  show_noton:                     ;
 42109 0000418C B40E                            mov     ah,0Eh          ; write TTY
 42110                                  show_done:	; 10/09/2023
 42111 0000418E CD10                            int     10h             ;
 42112                                  ;show_done:                     ;
 42113 00004190 5A                              pop     dx              ;
 42114 00004191 B402                            mov     ah,02h          ;
 42115 00004193 CD10                            int     10h             ; restore original cursor position
 42116 00004195 5B                              pop     bx              ;
 42117 00004196 C3                              retn			;
 42118                                  
 42119                                  ; 16/04/2019 - Retro DOS v4.0
 42120                                  
 42121                                  ;----------------------------------------------------------------------------
 42122                                  ;
 42123                                  ;   skip_token: advances ES:SI/CX past the current token
 42124                                  ;
 42125                                  ;   INPUT
 42126                                  ;    ES:SI -> position in config.sys
 42127                                  ;       CX == remaining bytes in config.sys
 42128                                  ;
 42129                                  ;   OUTPUT
 42130                                  ;       CF set if EOL/EOF hit
 42131                                  ;       AL == 1st char of delimiter
 42132                                  ;    ES:SI -> just past the delimiter
 42133                                  ;       CX == # bytes remaining from that point
 42134                                  ;
 42135                                  ;   OTHER REGS USED
 42136                                  ;       AX
 42137                                  ;
 42138                                  ;   NOTES
 42139                                  ;       None
 42140                                  ;
 42141                                  ;   HISTORY
 42142                                  ;       Created 16-Mar-1992 by JeffPar
 42143                                  ;
 42144                                  ;----------------------------------------------------------------------------
 42145                                  
 42146                                  skip_token:
 42147 00004197 E84D00                          call    get_char
 42148 0000419A 7210                            jc	short skip_token_done
 42149 0000419C E8B401                          call    any_delim
 42150 0000419F 75F6                            jne	short skip_token
 42151                                  skip_check_eol:
 42152 000041A1 3C0D                            cmp     al,cr ; 0Dh
 42153 000041A3 7406                            je	short skip_token_eol
 42154 000041A5 3C0A                            cmp     al,lf ; 0Ah
 42155 000041A7 7402                            je	short skip_token_eol
 42156 000041A9 F8                              clc
 42157                                          ;jmp	short skip_token_done
 42158 000041AA C3                      	retn
 42159                                  skip_token_eol:
 42160 000041AB F9                              stc
 42161                                  skip_token_done:
 42162 000041AC C3                              retn
 42163                                  
 42164                                  ;----------------------------------------------------------------------------
 42165                                  ;
 42166                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 42167                                  ;
 42168                                  ;   INPUT
 42169                                  ;    ES:SI -> position in config.sys
 42170                                  ;       CX == remaining bytes in config.sys
 42171                                  ;
 42172                                  ;   OUTPUT
 42173                                  ;       CF set if EOF hit
 42174                                  ;       AL == 1st char of token
 42175                                  ;    ES:SI -> just past the token
 42176                                  ;       CX == # bytes remaining from that point
 42177                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 42178                                  ;
 42179                                  ;   OTHER REGS USED
 42180                                  ;       AX
 42181                                  ;
 42182                                  ;   NOTES
 42183                                  ;       None
 42184                                  ;
 42185                                  ;   HISTORY
 42186                                  ;       Created 16-Mar-1992 by JeffPar
 42187                                  ;
 42188                                  ;----------------------------------------------------------------------------
 42189                                  
 42190                                  skip_delim:	; returns carry set if eol/eof
 42191 000041AD E83700                          call    get_char        ;
 42192 000041B0 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 42193 000041B3 72F7                            jc	short skip_token_done ;
 42194 000041B5 E8AB01                          call    delim           ;
 42195 000041B8 74F3                            je	short skip_delim ;
 42196 000041BA EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 42197                                  
 42198                                  ;----------------------------------------------------------------------------
 42199                                  ;
 42200                                  ;   skip_opt_line: same as skip_line provided AL != LF
 42201                                  ;
 42202                                  ;   INPUT
 42203                                  ;       AL == last character read
 42204                                  ;    ES:SI -> position in config.sys
 42205                                  ;       CX == remaining bytes in config.sys
 42206                                  ;
 42207                                  ;   OUTPUT
 42208                                  ;       CF set if EOF hit
 42209                                  ;       AL == 1st char of new line
 42210                                  ;    ES:SI -> just past 1st char of new line
 42211                                  ;       CX == # bytes remaining from that point
 42212                                  ;
 42213                                  ;   OTHER REGS USED
 42214                                  ;       AX
 42215                                  ;
 42216                                  ;   NOTES
 42217                                  ;       In other words, the purpose here is to skip to the next line,
 42218                                  ;       unless ES:SI is already sitting at the front of the next line (which
 42219                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 42220                                  ;
 42221                                  ;   HISTORY
 42222                                  ;       Created 16-Mar-1992 by JeffPar
 42223                                  ;
 42224                                  ;----------------------------------------------------------------------------
 42225                                  
 42226                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42227                                  ;skip_opt_line:
 42228                                  ;	cmp     al,lf ; 0Ah
 42229                                  ;	je	short skip_line_done
 42230                                       
 42231                                  	; fall into skip_line
 42232                                  
 42233                                  ;----------------------------------------------------------------------------
 42234                                  ;
 42235                                  ;   skip_line: skip to the next line
 42236                                  ;
 42237                                  ;   INPUT
 42238                                  ;    ES:SI -> position in config.sys
 42239                                  ;       CX == remaining bytes in config.sys
 42240                                  ;
 42241                                  ;   OUTPUT
 42242                                  ;       CF set if EOF hit
 42243                                  ;    ES:SI -> just past 1st char of new line
 42244                                  ;       CX == # bytes remaining from that point
 42245                                  ;
 42246                                  ;   OTHER REGS USED
 42247                                  ;       AX
 42248                                  ;
 42249                                  ;   NOTES
 42250                                  ;       None
 42251                                  ;
 42252                                  ;   HISTORY
 42253                                  ;       Created 16-Mar-1992 by JeffPar
 42254                                  ;
 42255                                  ;----------------------------------------------------------------------------
 42256                                  
 42257                                  skip_line:
 42258 000041BC E82800                          call    get_char
 42259 000041BF 7204                            jc	short skip_line_done
 42260                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42261 000041C1 3C0A                            cmp     al,lf ; 0Ah
 42262 000041C3 75F7                            jne	short skip_line
 42263                                  skip_line_done:
 42264                                  num_done:	; 18/12/2022
 42265 000041C5 C3                              retn
 42266                                  
 42267                                  ;----------------------------------------------------------------------------
 42268                                  ;
 42269                                  ;   get_number: return binary equivalent of numeric string
 42270                                  ;
 42271                                  ;   INPUT
 42272                                  ;    ES:SI -> position in config.sys
 42273                                  ;       CX == remaining bytes in config.sys
 42274                                  ;
 42275                                  ;   OUTPUT
 42276                                  ;       AL == non-digit encountered
 42277                                  ;       BX == binary #
 42278                                  ;    ES:SI -> just past 1st non-digit
 42279                                  ;       CX == # bytes remaining from that point
 42280                                  ;
 42281                                  ;   OTHER REGS USED
 42282                                  ;       AX
 42283                                  ;
 42284                                  ;   NOTES
 42285                                  ;       None
 42286                                  ;
 42287                                  ;   HISTORY
 42288                                  ;       Created 16-Mar-1992 by JeffPar
 42289                                  ;
 42290                                  ;----------------------------------------------------------------------------
 42291                                  
 42292                                  ; 13/05/2019
 42293                                  
 42294                                  get_number:
 42295 000041C6 29DB                            sub     bx,bx           ; BX = result
 42296                                  num_loop:
 42297 000041C8 E81C00                          call    get_char        ;
 42298 000041CB 72F8                            jc	short num_done	;
 42299 000041CD 3C30                            cmp     al,'0'          ; convert to value
 42300 000041CF 72F4                            jb	short num_done	; no more number
 42301 000041D1 3C39                            cmp     al,'9'          ;
 42302 000041D3 77F0                            ja	short num_done	;
 42303 000041D5 50                              push    ax              ;
 42304 000041D6 B80A00                          mov     ax,10           ;
 42305 000041D9 52                              push    dx              ;
 42306 000041DA F7E3                            mul     bx              ;
 42307 000041DC 5A                              pop     dx              ;
 42308 000041DD 89C3                            mov     bx,ax           ;
 42309 000041DF 58                              pop     ax              ;
 42310 000041E0 2C30                            sub     al,'0'          ;
 42311 000041E2 98                              cbw                     ;
 42312 000041E3 01C3                            add     bx,ax           ;
 42313 000041E5 EBE1                            jmp	short num_loop	;
 42314                                  
 42315                                  	; 18/12/2022
 42316                                  ;num_done:
 42317                                          ;retn
 42318                                  
 42319                                  ;----------------------------------------------------------------------------
 42320                                  ;
 42321                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 42322                                  ;
 42323                                  ;   INPUT
 42324                                  ;    ES:SI -> position in config.sys
 42325                                  ;       CX == remaining bytes in config.sys
 42326                                  ;
 42327                                  ;   OUTPUT
 42328                                  ;       AL == next character
 42329                                  ;    ES:SI -> just past next character
 42330                                  ;       CX == # bytes remaining from that point
 42331                                  ;
 42332                                  ;   OTHER REGS USED
 42333                                  ;       AX
 42334                                  ;
 42335                                  ;   NOTES
 42336                                  ;       None
 42337                                  ;
 42338                                  ;   HISTORY
 42339                                  ;       Created 16-Mar-1992 by JeffPar
 42340                                  ;
 42341                                  ;----------------------------------------------------------------------------
 42342                                  
 42343                                  get_char:
 42344 000041E7 83E901                          sub     cx,1            ; use SUB to set carry,zero
 42345 000041EA 7205                            jb	short get_fail	; out of data
 42346                                          ;lods	byte ptr es:[si] ;
 42347 000041EC 26                      	es	
 42348 000041ED AC                      	lodsb
 42349 000041EE 88C4                            mov     ah,al           ;
 42350 000041F0 C3                              retn			;
 42351                                  get_fail:                       ; restore CX to zero
 42352 000041F1 B90000                          mov     cx,0            ; leave carry set, zero not set
 42353                                  nearby_ret:
 42354 000041F4 C3                              retn
 42355                                  
 42356                                  ;----------------------------------------------------------------------------
 42357                                  ;
 42358                                  ;   query_user: ask user whether to execute current config.sys command
 42359                                  ;
 42360                                  ;   INPUT
 42361                                  ;       AL == current command code
 42362                                  ;    ES:SI -> current command line in config.sys
 42363                                  ;    config_cmd == current command code, but with QUERY bit intact
 42364                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 42365                                  ;
 42366                                  ;   OUTPUT
 42367                                  ;       CF set if command should be ignored (it is also REM'ed out)
 42368                                  ;
 42369                                  ;   OTHER REGS USED
 42370                                  ;       BX, CX, DX, DI
 42371                                  ;
 42372                                  ;   NOTES
 42373                                  ;       None
 42374                                  ;
 42375                                  ;   HISTORY
 42376                                  ;       Created 16-Mar-1992 by JeffPar
 42377                                  ;
 42378                                  ;----------------------------------------------------------------------------
 42379                                  
 42380                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 42381                                  	; (SYSINIT:4AE5h)
 42382                                  
 42383                                  	; 12/12/2022
 42384                                  query_user:
 42385 000041F5 F606[5E48]04                    test    byte [bQueryOpt],4	; answer no to everything?
 42386                                  	; 01/01/2023
 42387 000041FA 7403                    	jz	short qu_1		;
 42388 000041FC E9B900                  	jmp	skip_all
 42389                                  	; 12/12/2022
 42390                                  	;;jmp	short skip_all		;
 42391                                  	;jnz	short skip_all
 42392                                  qu_1:
 42393 000041FF F606[5E48]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 42394 00004204 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 42395 00004206 50                              push    ax                      ;
 42396 00004207 A0[9715]                        mov     al,[config_cmd]         ;
 42397 0000420A F606[5E48]01                    test    byte [bQueryOpt],1	; query every command?
 42398 0000420F 7506                            jnz	short query_all		; yes
 42399 00004211 A880                            test    al,CONFIG_OPTION_QUERY  ;
 42400                                  	; 01/01/2023
 42401 00004213 7502                    	jnz	short query_all		;
 42402                                  	; 12/12/2022
 42403                                  	;;jmp	short do_cmd		;
 42404                                  	;jz	short do_cmd ; cf=0
 42405                                  
 42406                                  	; 01/01/2023
 42407 00004215 58                      	pop	ax
 42408 00004216 C3                      	retn
 42409                                  
 42410                                  query_all:
 42411                                  
 42412                                  ;   Search for the command code (AL) in "comtab", and then print
 42413                                  ;   out the corresponding keyword, followed by the rest of the actual
 42414                                  ;   line pointed to by ES:SI
 42415                                  
 42416 00004217 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 42417 00004218 BA[5C4F]                        mov     dx,_$AutoPrmpt    	;
 42418 0000421B 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42419 0000421D 7450                            jz	short generic_prompt	; config_cmd must have been 0
 42420                                  
 42421 0000421F 88C6                            mov     dh,al                   ; save config_cmd in DH
 42422 00004221 29DB                            sub     bx,bx                   ;
 42423 00004223 BF[AB48]                        mov     di,comtab		;
 42424                                  find_match:                             ;
 42425 00004226 8A1D                            mov     bl,[di]                 ; get size of current keyword
 42426 00004228 08DB                            or      bl,bl                   ;
 42427 0000422A 7425                            jz	short line_print	; end of table
 42428 0000422C 47                              inc     di                      ;
 42429 0000422D 3A01                            cmp     al,[di+bx]              ; match?
 42430 0000422F 7405                            je	short cmd_match		; yes
 42431 00004231 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 42432                                  	; 13/05/2019	
 42433 00004234 EBF0                            jmp	short find_match	; loop
 42434                                  cmd_match:                              ;
 42435 00004236 8A4DFF                          mov     cl,[di-1]               ;
 42436 00004239 B500                            mov	ch,0                    ;
 42437 0000423B B402                            mov     ah,STD_CON_OUTPUT ; 2
 42438                                  cmd_print:                              ;
 42439 0000423D 8A05                            mov     al,[di]                 ;
 42440 0000423F 47                              inc     di                      ;
 42441 00004240 88C2                            mov     dl,al                   ;
 42442 00004242 CD21                            int     21h                     ;
 42443 00004244 E2F7                            loop    cmd_print               ;
 42444 00004246 B23D                            mov     dl,'='                  ;
 42445 00004248 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 42446 0000424B 7502                            jne	short cmd_notset	;
 42447 0000424D B220                            mov     dl,' '                  ;
 42448                                  cmd_notset:
 42449 0000424F CD21                            int     21h                     ; '=' looks funny on SET commands
 42450                                  line_print:                             ;
 42451                                  	;lods	byte ptr es:[si]        ;
 42452 00004251 26                              es
 42453 00004252 AC                      	lodsb
 42454 00004253 08C0                    	or      al,al                   ;
 42455 00004255 7502                            jnz	short non_null		;
 42456 00004257 B020                            mov     al,' '                  ;
 42457                                  non_null:                               ;
 42458 00004259 3C20                            cmp     al,' '                  ; control code?
 42459 0000425B 720F                            jb	short prompt_user	; yes, assume end of line
 42460 0000425D 7505                            jne	short non_space		;
 42461                                          ; 10/09/2023
 42462 0000425F 263804                  	cmp	[es:si],al ; 20h
 42463                                  	;cmp	byte [es:si],' '	;
 42464 00004262 7208                            jb	short prompt_user	;
 42465                                  non_space:                              ;
 42466 00004264 88C2                            mov     dl,al                   ;
 42467 00004266 B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 42468 00004268 CD21                            int     21h                     ;
 42469 0000426A EBE5                            jmp	short line_print	;
 42470                                  
 42471                                  prompt_user:                            ;
 42472 0000426C BA[ED4E]                        mov     dx,_$InterPrmpt		;
 42473                                  
 42474                                  generic_prompt:
 42475 0000426F E8BB03                          call    print                   ;
 42476                                  input_loop:                             ;
 42477 00004272 B400                            mov     ah,0                    ; read a key
 42478 00004274 CD16                            int     16h                     ;
 42479 00004276 08C0                            or      al,al                   ; is it a function key?
 42480 00004278 750F                            jnz	short not_func		; no
 42481 0000427A 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 42482 0000427D 75F3                            jne	short input_loop	; no
 42483 0000427F A0[FD4E]                        mov     al,[_$NO]                  ;
 42484 00004282 800E[5E48]04                    or      byte [bQueryOpt],4	; no more queries
 42485 00004287 EB21                            jmp     short legal_char        ;
 42486                                  not_func:
 42487 00004289 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 42488 0000428B 3A06[FD4E]                      cmp     al,[_$NO]		; verify character is legal
 42489 0000428F 7419                            je	short legal_char	;
 42490 00004291 3A06[F94E]                      cmp     al,[_$YES]		;
 42491 00004295 7413                            je	short legal_char	;
 42492 00004297 803E[9715]00                    cmp     byte [config_cmd],0	;
 42493 0000429C 74D4                            je	short input_loop	; don't allow Esc on this query
 42494 0000429E 3C1B                            cmp     al,1Bh                  ; Esc?
 42495 000042A0 75D0                            jne	short input_loop	;
 42496 000042A2 800E[5E48]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 42497 000042A7 A0[F94E]                        mov     al,[_$YES]
 42498                                  legal_char:                             ;
 42499 000042AA E888FE                          call    disp_input              ;
 42500 000042AD 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 42501                                  
 42502 000042AE 3A06[FD4E]                      cmp     al,[_$NO]		; process line?
 42503 000042B2 7403                            je	short skip_cmd		; no
 42504                                  	; 12/12/2022
 42505 000042B4 F8                      	clc
 42506                                  do_cmd:
 42507 000042B5 58                      	pop     ax			;
 42508                                  	; 12/12/2022
 42509                                  	; cf=0
 42510                                  	;clc				; just do the command
 42511 000042B6 C3                      	retn
 42512                                  
 42513                                  skip_cmd:
 42514 000042B7 58                      	pop     ax			;
 42515                                  skip_all:
 42516 000042B8 B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 42517 000042BA F9                      	stc
 42518 000042BB C3                      	retn
 42519                                  
 42520                                  ;----------------------------------------------------------------------------
 42521                                  ;
 42522                                  ;   print_error: displays multi-config error conditions
 42523                                  ;
 42524                                  ;   INPUT
 42525                                  ;    Carry set to pause, clear to not
 42526                                  ;    ES:SI -> current command line in config.sys
 42527                                  ;
 42528                                  ;   OUTPUT
 42529                                  ;       None
 42530                                  ;
 42531                                  ;   OTHER REGS USED
 42532                                  ;       None
 42533                                  ;
 42534                                  ;   NOTES
 42535                                  ;       None
 42536                                  ;
 42537                                  ;   HISTORY
 42538                                  ;       Created 16-Mar-1992 by JeffPar
 42539                                  ;
 42540                                  ;----------------------------------------------------------------------------
 42541                                  
 42542                                  print_error:
 42543 000042BC 50                              push    ax
 42544 000042BD 53                              push    bx
 42545 000042BE 51                              push    cx
 42546 000042BF 52                              push    dx
 42547 000042C0 1E                              push    ds
 42548 000042C1 0E                              push    cs
 42549 000042C2 1F                              pop     ds
 42550 000042C3 9C                              pushf
 42551 000042C4 E820FC                          call    get_linenum
 42552 000042C7 891E[AD02]                      mov     [linecount],bx
 42553 000042CB E8C5E7                          call    error_line
 42554 000042CE 9D                              popf
 42555 000042CF 7319                            jnc	short pe_ret
 42556 000042D1 BA[B74D]                        mov     dx,_$PauseMsg
 42557 000042D4 E85603                          call    print
 42558 000042D7 B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 42559 000042DA CD21                            int     21h			; wait for a key
 42560 000042DC 08C0                            or      al,al			; extended key?
 42561 000042DE 7504                            jnz	short pe_1		; no
 42562 000042E0 B407                            mov     ah,07h			; yes
 42563 000042E2 CD21                            int     21h			; eat it too
 42564                                  pe_1:     
 42565 000042E4 BA[4A4C]                	mov     dx,crlfm
 42566 000042E7 E84303                          call    print
 42567                                  pe_ret: 
 42568 000042EA 1F                      	pop     ds
 42569 000042EB 5A                              pop     dx
 42570 000042EC 59                              pop     cx
 42571 000042ED 5B                              pop     bx
 42572 000042EE 58                              pop     ax
 42573 000042EF C3                      	retn
 42574                                  
 42575                                  ;----------------------------------------------------------------------------
 42576                                  
 42577                                  ;   This function is very simple: it merely prepends a "/D" to the
 42578                                  ;   command-line for the shell; this (undocumented) switch disables
 42579                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 42580                                  ;   displayed when there's no AUTOEXEC.BAT.
 42581                                  
 42582                                  disable_autoexec:
 42583                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 42584                                  	; 17/04/2019 - Retro DOS v4.0
 42585                                  
 42586 000042F0 F606[5E48]04            	test	byte [bQueryOpt],4
 42587 000042F5 7443                    	jz	short disable_exit
 42588 000042F7 F606[5448]01            	test	byte [dae_flag],1
 42589 000042FC 753C                    	jnz	short disable_exit
 42590 000042FE 800E[5448]01            	or	byte [dae_flag],1
 42591                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 42592 00004303 810E[5E48]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 42593 00004309 BA4420                  	mov     dx,'D ' ; 2044h
 42594                                  dae_1:
 42595                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42596 0000430C A0[9347]                        mov	al,[def_swchr]
 42597                                  	;mov	al,[command_line-1]     ; get default switchchar
 42598 0000430F 08C0                            or      al,al                   ; anything there?
 42599 00004311 7427                            jz	short disable_exit	; no, disable_autoexec already called
 42600 00004313 8A1E[9447]                      mov     bl,[command_line]       ;
 42601 00004317 B700                            mov     bh,0                    ; BX == command-line length
 42602 00004319 89D9                            mov     cx,bx                   ;
 42603 0000431B 80C303                          add     bl,3                    ;
 42604 0000431E 80FB7E                          cmp     bl,126                  ;
 42605 00004321 7717                            ja	short disable_exit	;
 42606 00004323 881E[9447]                      mov     [command_line],bl       ; update length
 42607 00004327 81C3[9547]                      add     bx,command_line+1	; make sure we move the NULL too
 42608 0000432B 41                              inc     cx                      ; (just for consistency sake)
 42609                                  disable_loop:                           ;
 42610 0000432C 8A67FD                          mov     ah,[bx-3]               ;
 42611 0000432F 8827                            mov     [bx],ah                 ;
 42612 00004331 4B                              dec     bx                      ;
 42613 00004332 E2F8                            loop    disable_loop            ;
 42614 00004334 8847FE                          mov     [bx-2],al               ;
 42615                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 42616 00004337 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 42617                                          ;mov	byte [command_line-1],0 ;
 42618                                  disable_exit:                           ;
 42619 0000433A C3                              retn
 42620                                  
 42621                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 42622 0000433B 803E[5E48]01            	cmp     byte [bQueryOpt],1
 42623 00004340 75F8                    	jnz     short disable_exit
 42624 00004342 F606[5448]02            	test	byte [dae_flag],2
 42625 00004347 75F1                    	jnz     short disable_exit
 42626 00004349 800E[5448]02            	or      byte [dae_flag],2
 42627                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 42628                                  	; 10/09/2023 (BugFix)
 42629 0000434E BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 42630 00004351 EBB9                    	jmp     short dae_1
 42631                                  
 42632                                  ;endif  ;MULTI_CONFIG
 42633                                  
 42634                                  ;%endif	; 02/11/2022
 42635                                  
 42636                                  
 42637                                  ; 19/04/2019 - Retro DOS v4.0
 42638                                  
 42639                                  ;----------------------------------------------------------------------------
 42640                                  ;
 42641                                  ; procedure : delim
 42642                                  ;
 42643                                  ;----------------------------------------------------------------------------
 42644                                  
 42645                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42646                                  ; (SYSINIT:4C45h)
 42647                                  
 42648                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42649                                  ;%if 0
 42650                                  ;;ifdef	MULTI_CONFIG
 42651                                  ;
 42652                                  any_delim:
 42653 00004353 3C0D                    	cmp	al,cr
 42654 00004355 7427                    	je	short delim_ret
 42655 00004357 3C0A                    	cmp	al,lf
 42656 00004359 7423                    	je	short delim_ret
 42657 0000435B 3C5B                    	cmp	al,'['
 42658 0000435D 741F                    	je	short delim_ret
 42659 0000435F 3C5D                    	cmp	al,']'
 42660 00004361 741B                    	je	short delim_ret
 42661                                  ;
 42662                                  ;;endif ;MULTI_CONFIG
 42663                                  ;%endif ; 02/11/2022
 42664                                  
 42665                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42666                                  	; (SYSINIT:3450h)	
 42667                                  delim:
 42668 00004363 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 42669 00004365 7417                    	je	short delim_ret
 42670                                  
 42671 00004367 3C00                    	cmp	al,0		; special case for sysinit!!!
 42672 00004369 7413                    	je	short delim_ret
 42673                                  
 42674                                  org_delim:			; used by organize routine except for getting
 42675 0000436B 3C20                    	cmp	al,' '          ; the filename.
 42676 0000436D 740F                    	je	short delim_ret
 42677 0000436F 3C09                            cmp     al,tab ; 9
 42678 00004371 740B                    	je	short delim_ret
 42679 00004373 3C3D                    	cmp	al,'='
 42680 00004375 7407                    	je	short delim_ret
 42681 00004377 3C2C                    	cmp	al,','
 42682 00004379 7403                    	je	short delim_ret
 42683 0000437B 3C3B                    	cmp	al,';'
 42684                                  
 42685                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42686                                  
 42687                                  ; 04/01/2023 - Retro DOS v4.2
 42688                                  ;ifdef	MULTI_CONFIG
 42689                                  ;   Make sure there's no chance of a false EOF indication
 42690 0000437D F8                      	clc
 42691                                  ;endif
 42692                                  	; 02/11/2022
 42693                                  delim_ret:
 42694                                  	; 04/01/2023
 42695                                  	; cf = 0
 42696                                  nl_ret:	; 10/09/2023
 42697 0000437E C3                      	retn
 42698                                  
 42699                                  ;----------------------------------------------------------------------------
 42700                                  ;
 42701                                  ; procedure : newline
 42702                                  ;
 42703                                  ;  newline returns with first character of next line
 42704                                  ;
 42705                                  ;----------------------------------------------------------------------------
 42706                                  
 42707                                  newline:
 42708 0000437F E80600                  	call	getchr			;skip non-control characters
 42709 00004382 72FA                    	jc	short nl_ret
 42710 00004384 3C0A                    	cmp	al,lf			;look for line feed
 42711 00004386 75F7                    	jne	short newline
 42712                                  
 42713                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42714                                  	;call	getchr
 42715                                  ;nl_ret:
 42716                                  	;retn
 42717                                  	; 10/09/2023
 42718                                  	;jmp	short getchr
 42719                                  
 42720                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42721                                  %if 1
 42722                                  
 42723                                  ;----------------------------------------------------------------------------
 42724                                  ;
 42725                                  ; procedure : getchr
 42726                                  ;
 42727                                  ;----------------------------------------------------------------------------
 42728                                  
 42729                                  	; 24/10/2022
 42730                                  getchr:
 42731                                  	; 12/12/2022
 42732                                  	;push	cx
 42733                                  	;mov	cx,[count]
 42734                                  	;jcxz	nochar
 42735                                  	; 12/12/2022
 42736 00004388 833E[5403]01            	cmp	word [count],1 
 42737 0000438D 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 42738                                  	
 42739 0000438F 8B36[5803]              	mov	si,[chrptr]
 42740 00004393 268A04                  	mov	al,[es:si]
 42741 00004396 FF0E[5403]              	dec	word [count]
 42742 0000439A FF06[5803]              	inc	word [chrptr]
 42743                                  	; 12/12/202
 42744                                  	; cf=0
 42745                                  	;clc
 42746                                  ;get_ret:
 42747                                  	;pop	cx
 42748                                  	;retn
 42749                                  nochar: 
 42750                                  	; 12/12/2022
 42751                                  	; cf=1
 42752                                  	;stc
 42753                                  	;jmp	short get_ret
 42754                                  	
 42755 0000439E C3                      	retn
 42756                                  %endif
 42757                                  
 42758                                  ;----------------------------------------------------------------------------
 42759                                  ; 
 42760                                  ; procedure : mapcase
 42761                                  ;
 42762                                  ;----------------------------------------------------------------------------
 42763                                  
 42764                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 42765                                  
 42766                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 42767                                  	; (SYSINIT:4C7Eh)
 42768                                  mapcase:
 42769 0000439F 51                      	push	cx
 42770 000043A0 56                      	push	si
 42771 000043A1 1E                      	push	ds
 42772                                  
 42773 000043A2 06                      	push	es
 42774 000043A3 1F                      	pop	ds
 42775                                  
 42776                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42777                                  
 42778                                  ; 04/01/2023 - Retro DOS 4.2
 42779                                  
 42780                                  ;ifdef	MULTI_CONFIG
 42781 000043A4 88C3                    	mov	bl,al			; same cmd code this line
 42782                                  ;else
 42783                                  ;	xor	si,si
 42784                                  ;endif
 42785                                  	; 02/11/2022
 42786                                  	; 04/01/2023 - Retro DOS 4.2
 42787                                  	;xor	si, si
 42788                                  
 42789                                  convloop:
 42790 000043A6 AC                      	lodsb
 42791 000043A7 3C61                    	cmp	al,'a'
 42792 000043A9 7209                    	jb	short noconv
 42793 000043AB 3C7A                    	cmp	al,'z'
 42794 000043AD 7705                    	ja	short noconv
 42795 000043AF 2C20                    	sub	al,20h
 42796 000043B1 8844FF                  	mov	[si-1],al
 42797                                  noconv:
 42798                                  
 42799                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42800                                  
 42801                                  ; 04/01/2023 - Retro DOS 4.2
 42802                                  ;ifdef	MULTI_CONFIG
 42803                                  
 42804                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 42805                                  ;   upper-case a line at a time, after we've been able to figure out whether
 42806                                  ;   the line is a SET command or not (since we don't want to upper-case
 42807                                  ;   anything after the "=" in a SET)
 42808                                  ;
 42809 000043B4 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 42810 000043B7 7504                    	jne	short check_eol		; no, just check for end-of-line
 42811 000043B9 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 42812 000043BB 740A                    	je	short convdone		; yes
 42813                                  check_eol:
 42814 000043BD 3C0D                    	cmp	al,cr
 42815 000043BF 7406                    	je	short convdone
 42816 000043C1 3C0A                    	cmp	al,lf
 42817 000043C3 7402                    	je	short convdone
 42818                                  ;endif
 42819                                  	; 02/11/2022
 42820 000043C5 E2DF                    	loop	convloop
 42821                                  convdone:
 42822 000043C7 1F                      	pop	ds
 42823 000043C8 5E                      	pop	si
 42824 000043C9 59                      	pop	cx
 42825 000043CA C3                      	retn
 42826                                  
 42827                                  ;----------------------------------------------------------------------------
 42828                                  ;
 42829                                  ; procedure : round
 42830                                  ;
 42831                                  ; round the values in memlo and memhi to paragraph boundary.
 42832                                  ; perform bounds check.
 42833                                  ;
 42834                                  ;----------------------------------------------------------------------------
 42835                                  
 42836                                  round:
 42837                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42838 000043CB 1E                      	push	ds
 42839 000043CC 0E                      	push	cs
 42840 000043CD 1F                      	pop	ds
 42841                                  
 42842 000043CE 50                      	push	ax
 42843                                  	;mov	ax,[cs:memlo]
 42844 000043CF A1[6003]                	mov	ax,[memlo]
 42845                                  
 42846 000043D2 E82CCE                  	call	ParaRound		; para round up
 42847                                  
 42848                                  	;add	[cs:memhi],ax
 42849 000043D5 0106[6203]              	add	[memhi],ax
 42850                                  	;mov	word [cs:memlo],0
 42851 000043D9 C706[6003]0000          	mov	word [memlo],0
 42852                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 42853 000043DF A1[6203]                	mov	ax,[memhi]
 42854                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 42855 000043E2 3B06[A302]              	cmp	ax,[ALLOCLIM]
 42856                                  	;jae	short mem_err
 42857                                  	; 13/04/2024
 42858 000043E6 7322                    	jae	short mem_err2 ; ds = cs
 42859                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 42860 000043E8 F606[9C15]02            	test	byte [setdevmarkflag],for_devmark ; 2
 42861 000043ED 7416                    	jz	short skip_set_devmarksize
 42862 000043EF 06                      	push	es
 42863 000043F0 56                      	push	si
 42864                                  	;mov	si,[cs:devmark_addr]
 42865 000043F1 8B36[9A15]              	mov	si,[devmark_addr]
 42866 000043F5 8EC6                    	mov	es,si
 42867 000043F7 29F0                    	sub	ax,si
 42868 000043F9 48                      	dec	ax
 42869                                  	;mov	[es:3],ax
 42870 000043FA 26A30300                	mov	[es:devmark.size],ax	; paragraph
 42871                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 42872 000043FE 8026[9C15]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 42873 00004403 5E                      	pop	si
 42874 00004404 07                      	pop	es
 42875                                  skip_set_devmarksize:
 42876 00004405 58                      	pop	ax
 42877                                  
 42878                                  	; 10/09/2023
 42879 00004406 1F                      	pop	ds
 42880                                  
 42881                                  	; 11/12/2022
 42882                                  	; cf = 0
 42883                                  	; 02/11/2022
 42884                                  	;clc	; ? (not needed here)	; clear carry
 42885 00004407 C3                      	retn
 42886                                  
 42887                                  ;----------------------------------------------------------------------------
 42888                                  
 42889                                  mem_err:
 42890                                  	; 11/12/2022
 42891 00004408 0E                      	push	cs
 42892 00004409 1F                      	pop	ds
 42893                                  mem_err2:
 42894 0000440A BA[234D]                	mov	dx,badmem
 42895                                  	;push	cs
 42896                                  	;pop	ds
 42897 0000440D E81D02                  	call	print
 42898 00004410 E927CE                  	jmp	stall
 42899                                  
 42900                                  ;----------------------------------------------------------------------------
 42901                                  ;
 42902                                  ; procedure : calldev
 42903                                  ;
 42904                                  ;----------------------------------------------------------------------------
 42905                                  
 42906                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42907                                  	; (SYSINIT:34E0h)
 42908                                  
 42909                                  	; 13/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 42910                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4F3Eh)
 42911                                  
 42912                                  calldev:
 42913 00004413 2E8E1E[6E20]            	mov	ds,[cs:DevEntry+2]
 42914 00004418 2E031E[6C20]            	add	bx,[cs:DevEntry]	; do a little relocation
 42915 0000441D 8B07                    	mov	ax,[bx]
 42916                                  
 42917 0000441F 2EFF36[6C20]            	push	word [cs:DevEntry]
 42918 00004424 2EA3[6C20]              	mov	[cs:DevEntry],ax
 42919 00004428 BB[6D03]                	mov	bx,packet
 42920 0000442B 2EFF1E[6C20]            	call	far [cs:DevEntry]
 42921 00004430 2E8F06[6C20]            	pop	word [cs:DevEntry]
 42922 00004435 C3                      	retn
 42923                                  
 42924                                  ;----------------------------------------------------------------------------
 42925                                  ;
 42926                                  ; procedure : todigit
 42927                                  ;
 42928                                  ;----------------------------------------------------------------------------
 42929                                  
 42930                                  todigit:
 42931 00004436 2C30                    	sub	al,'0'
 42932                                  	;jb	short notdig  ; 02/11/2022
 42933                                  	; 12/12/2022
 42934 00004438 7203                    	jb	short notdig2
 42935                                  	;cmp	al,9
 42936                                  	;ja	short notdig
 42937                                  	;clc
 42938                                  	;retn
 42939                                  	; 12/12/2022
 42940 0000443A 3C0A                    	cmp	al,10
 42941 0000443C F5                      	cmc
 42942                                  notdig:
 42943                                  	;stc
 42944                                  notdig2:
 42945 0000443D C3                      	retn
 42946                                  
 42947                                  ;----------------------------------------------------------------------------
 42948                                  ;
 42949                                  ; procedure : getnum
 42950                                  ;
 42951                                  ; getnum parses a decimal number.
 42952                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 42953                                  ; error), if number is bad carry is set, zero is set, ax=0.
 42954                                  ;
 42955                                  ;----------------------------------------------------------------------------
 42956                                  
 42957                                  getnum:
 42958 0000443E 53                      	push	bx
 42959 0000443F 31DB                    	xor	bx,bx			; running count is zero
 42960                                  b2:
 42961 00004441 E8F2FF                  	call	todigit 		; do we have a digit ?
 42962 00004444 7247                    	jc	short badnum		; no, bomb
 42963                                  
 42964 00004446 93                      	xchg	ax,bx			; put total in ax
 42965 00004447 53                      	push	bx			; save digit (0 to 9)
 42966                                  	;mov	bx,10			; base of arithmetic
 42967                                  	; 12/12/2022
 42968 00004448 B30A                    	mov	bl,10
 42969 0000444A F7E3                    	mul	bx			; shift by one decimal digit
 42970 0000444C 5B                      	pop	bx			; get back digit (0 to 9)
 42971 0000444D 00D8                    	add	al,bl			; get total
 42972 0000444F 80D400                  	adc	ah,0			; make that 16 bits
 42973 00004452 7239                    	jc	short badnum		; too big a number
 42974                                  
 42975 00004454 93                      	xchg	ax,bx			; stash total
 42976                                  
 42977 00004455 E830FF                  	call	getchr			;get next digit
 42978 00004458 722D                    	jc	short b1		; no more characters
 42979 0000445A 3C20                    	cmp	al,' ' 			; space?
 42980 0000445C 741F                    	je	short b15		; then end of digits
 42981 0000445E 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 42982 00004460 741B                    	je	short b15		; then end of digits.
 42983 00004462 3C09                    	cmp	al, tab ; 9		; tab
 42984 00004464 7417                    	je	short b15
 42985 00004466 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 42986 0000446B 7410                    	je	short b15
 42987 0000446D 3C2F                    	cmp	al,'/'			; see if another switch follows
 42988                                  	; 12/12/2022
 42989                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42990                                  	;nop				; cas - remnant of old bad code
 42991                                  	;nop
 42992 0000446F 740C                    	je	short b15
 42993 00004471 3C0A                    	cmp	al,lf			; line-feed?
 42994 00004473 7408                    	je	short b15
 42995 00004475 3C0D                    	cmp	al,cr			; carriage return?
 42996 00004477 7404                    	je	short b15
 42997 00004479 08C0                    	or	al,al			; end of line separator?
 42998 0000447B 75C4                    	jnz	short b2		; no, try as a valid char...
 42999                                  b15:
 43000 0000447D 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 43001 00004482 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 43002                                  b1:
 43003 00004487 89D8                    	mov	ax,bx			; get proper count
 43004 00004489 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 43005 0000448B 5B                      	pop	bx
 43006 0000448C C3                      	retn
 43007                                  badnum:
 43008                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43009                                  	;mov	byte [cs:sepchr],0
 43010 0000448D 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 43011                                  	; 12 /12/2022
 43012 0000448F 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 43013 00004493 5B                      	pop	bx
 43014 00004494 F9                      	stc				; and carry set
 43015 00004495 C3                      	retn
 43016                                  
 43017                                  ;****************************************************************************
 43018                                  
 43019                                  setdoscountryinfo:
 43020                                  
 43021                                  ;----------------------------------------------------------------------------
 43022                                  ;input: es:di -> pointer to dos_country_cdpg_info
 43023                                  ;	ds:0  -> buffer.
 43024                                  ;	si = 0
 43025                                  ;	ax = country id
 43026                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 43027                                  ;	bx = file handle
 43028                                  ;	this routine can handle maximum 438 country_data entries.
 43029                                  ;
 43030                                  ;output: dos_country_cdpg_info set.
 43031                                  ;	 carry set if any file read failure or wrong information in the file.
 43032                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 43033                                  ;	 codepage_id in the file.
 43034                                  ;----------------------------------------------------------------------------
 43035                                  
 43036                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43037                                  	; (SYSINIT:4D83h)
 43038                                  
 43039                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43040                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 43041                                  
 43042 00004496 57                      	push	di
 43043 00004497 50                      	push	ax
 43044 00004498 52                      	push	dx
 43045                                  
 43046 00004499 31C9                    	xor	cx,cx
 43047 0000449B 31D2                    	xor	dx,dx
 43048 0000449D B80002                  	mov	ax,512			;read 512 bytes
 43049 000044A0 E84301                  	call	readincontrolbuffer	;read the file header
 43050 000044A3 724A                    	jc	short setdosdata_fail
 43051                                  
 43052 000044A5 06                      	push	es
 43053 000044A6 56                      	push	si
 43054                                  
 43055 000044A7 0E                      	push	cs
 43056 000044A8 07                      	pop	es
 43057                                  
 43058 000044A9 BF[F946]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 43059 000044AC B90800                  	mov	cx,8			;length of the signature
 43060 000044AF F3A6                    	repz	cmpsb
 43061                                  
 43062 000044B1 5E                      	pop	si
 43063 000044B2 07                      	pop	es
 43064 000044B3 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 43065                                  
 43066 000044B5 83C612                  	add	si,18			;si -> county info type
 43067 000044B8 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 43068 000044BB 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 43069                                  
 43070 000044BD 46                      	inc	si			;si -> file offset
 43071 000044BE 8B14                    	mov	dx,[si]			;get the info file offset.
 43072 000044C0 8B4C02                  	mov	cx,[si+2]
 43073 000044C3 B80018                  	mov	ax,6144			;read 6144 bytes.
 43074 000044C6 E81D01                  	call	readincontrolbuffer	;read info
 43075 000044C9 7224                    	jc	short setdosdata_fail
 43076                                  
 43077 000044CB 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 43078 000044CD 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 43079 000044D1 771C                    	ja	short setdosdata_fail
 43080                                  
 43081 000044D3 46                      	inc	si
 43082 000044D4 46                      	inc	si			;si -> entry information packet
 43083 000044D5 5A                      	pop	dx			;restore code page id
 43084 000044D6 58                      	pop	ax			;restore country id
 43085 000044D7 5F                      	pop	di
 43086                                  
 43087                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 43088 000044D8 3B4402                  	cmp	ax,[si+2]		;compare country_id
 43089 000044DB 7509                    	jne	short setdoscntry_next
 43090                                  
 43091                                  	;cmp	dx,0			;no user specified code page ?
 43092                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 43093                                  	; 10/09/2023
 43094 000044DD 09D2                    	or	dx,dx ; cmp dx,0
 43095 000044DF 7413                    	jz	short setdoscntry_any_codepage
 43096 000044E1 3B5404                  	cmp	dx,[si+4]		;compare code page id
 43097 000044E4 7411                    	je	short setdoscntry_got_it
 43098                                  
 43099                                  setdoscntry_next:
 43100 000044E6 0334                    	add	si,[si]			;next entry
 43101 000044E8 46                      	inc	si
 43102 000044E9 46                      	inc	si			;take a word for size of entry itself
 43103 000044EA E2EC                    	loop	setdoscntry_find
 43104                                  
 43105                                  	;mov	cx,-1			;signals that bad country id entered.
 43106                                  	; 10/09/2023
 43107 000044EC 49                      	dec	cx ; 0 -> -1
 43108                                  setdoscntry_fail:
 43109 000044ED F9                      	stc
 43110 000044EE C3                      	retn
 43111                                  
 43112                                  setdosdata_fail:
 43113 000044EF 5E                      	pop	si
 43114 000044F0 59                      	pop	cx
 43115 000044F1 5F                      	pop	di
 43116 000044F2 EBF9                    	jmp	short setdoscntry_fail
 43117                                  
 43118                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 43119 000044F4 8B5404                  	mov	dx,[si+4]
 43120                                  
 43121                                  setdoscntry_got_it:			;found the matching entry
 43122 000044F7 2E8916[0147]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 43123 000044FC 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 43124 000044FF 8B4C0C                  	mov	cx,[si+12]
 43125 00004502 B80002                  	mov	ax,512 			;read 512 bytes
 43126 00004505 E8DE00                  	call	readincontrolbuffer
 43127 00004508 72E3                    	jc	short setdoscntry_fail
 43128                                  
 43129 0000450A 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 43130 0000450C 46                      	inc	si
 43131 0000450D 46                      	inc	si			;si -> first entry
 43132                                  
 43133                                  setdoscntry_data:
 43134 0000450E 57                      	push	di			;es:di -> dos_country_cdpg_info
 43135 0000450F 51                      	push	cx			;save # of entry left
 43136 00004510 56                      	push	si			;si -> current entry in control buffer
 43137                                  
 43138 00004511 8A4402                  	mov	al,[si+2]		;get data entry id
 43139 00004514 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 43140 00004517 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 43141                                  
 43142 00004519 8B5404                  	mov	dx,[si+4]		;get offset of data
 43143 0000451C 8B4C06                  	mov	cx,[si+6]
 43144 0000451F B80042                  	mov	ax,4200h
 43145 00004522 F9                      	stc
 43146 00004523 CD21                    	int	21h			;move pointer
 43147 00004525 72C8                    	jc	short setdosdata_fail
 43148                                  
 43149 00004527 BA0002                  	mov	dx,512			;start of data buffer
 43150 0000452A B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 43151 0000452D B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 43152 0000452F F9                      	stc
 43153 00004530 CD21                    	int	21h			;read the country.sys data
 43154 00004532 72BB                    	jc	short setdosdata_fail 	;read failure
 43155                                  
 43156 00004534 39C8                    	cmp	ax,cx
 43157 00004536 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 43158                                  
 43159 00004538 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 43160 0000453B 8B4C06                  	mov	cx,[si+6]
 43161 0000453E B80042                  	mov	ax,4200h
 43162 00004541 F9                      	stc
 43163 00004542 CD21                    	int	21h			;move pointer back again
 43164 00004544 72A9                    	jc	short setdosdata_fail
 43165                                  
 43166 00004546 56                      	push	si
 43167 00004547 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 43168 0000454A 8B0C                    	mov	cx,[si]
 43169 0000454C 5E                      	pop	si
 43170 0000454D BA0002                  	mov	dx,512			;start of data buffer
 43171 00004550 83C10A                  	add	cx,10			;signature + a word for the length itself
 43172 00004553 B43F                    	mov	ah,3Fh			;read the data from the file.
 43173 00004555 F9                      	stc
 43174 00004556 CD21                    	int	21h
 43175 00004558 7295                    	jc	short setdosdata_fail
 43176                                  
 43177 0000455A 39C8                    	cmp	ax,cx
 43178 0000455C 7591                    	jne	short setdosdata_fail
 43179                                  
 43180 0000455E 8A4402                  	mov	al,[si+2]		;save data id for future use.
 43181 00004561 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 43182 00004564 8B0C                    	mov	cx,[si]			;get the length of the file
 43183 00004566 41                      	inc	cx			;take care of a word for lenght of tab
 43184 00004567 41                      	inc	cx			;itself.
 43185 00004568 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 43186 0000456C 7781                    	ja	short setdosdata_fail
 43187                                  
 43188                                  	;if	bugfix
 43189 0000456E E83100                  	call	setdbcs_before_copy
 43190                                  	;endif
 43191                                  
 43192 00004571 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 43193 00004573 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 43194                                  
 43195 00004575 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 43196                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 43197 00004579 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 43198                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 43199                                  	
 43200 0000457D 57                      	push	di			;save di
 43201                                  
 43202                                  	;push	ax
 43203                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 43204                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 43205                                  	;pop	ax
 43206                                  	; 10/09/2023
 43207 0000457E 2EFF36[0147]            	push	word [cs:cntrycodepage_id]
 43208 00004583 8F4404                  	pop	word [si+4]
 43209                                  
 43210                                  setdoscntry_mov:
 43211 00004586 F3A4                    	rep	movsb			;copy the table into dos
 43212 00004588 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 43213 0000458A 7509                    	jne	short setdoscntry_data_next
 43214                                  
 43215 0000458C 5F                      	pop	di			;restore di
 43216 0000458D 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 43217                                  	;pop	word [es:di+26]		;restore
 43218 00004591 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 43219                                  	;pop	word [es:di+24]
 43220                                  
 43221                                  setdoscntry_data_next:
 43222 00004595 5E                      	pop	si			;restore control buffer pointer
 43223 00004596 59                      	pop	cx			;restore # of entries left
 43224 00004597 5F                      	pop	di			;restore pointer to dso_country_cdpg
 43225 00004598 0334                    	add	si,[si]			;try to get the next entry
 43226 0000459A 46                      	inc	si
 43227 0000459B 46                      	inc	si			;take a word of entry length itself
 43228 0000459C 49                      	dec	cx
 43229                                  	; 10/09/2023
 43230 0000459D 741B                    	jz	short setdoscntry_ok 
 43231                                  	;cmp	cx,0
 43232                                  	;je	short setdoscntry_ok
 43233 0000459F E96CFF                  	jmp	setdoscntry_data
 43234                                  
 43235                                  	; 18/12/2022
 43236                                  ;setdoscntry_ok:
 43237                                  	;retn
 43238                                  
 43239                                  ;----------------------------------------------------------------------------
 43240                                  	
 43241                                  	;if	bugfix
 43242                                  
 43243                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43244                                  
 43245                                  setdbcs_before_copy:
 43246 000045A2 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 43247 000045A4 7514                    	jne	short sdbcsbc		; jump if not
 43248                                  	
 43249                                  	; 10/09/2023
 43250 000045A6 50                      	push	ax
 43251 000045A7 31C0                    	xor	ax,ax
 43252 000045A9 263905                  	cmp	[es:di],ax ; 0
 43253 000045AC 740B                    	je	short sdbcsbc_pop
 43254                                  	
 43255                                  	;cmp	word [es:di],0		; zero byte data block?
 43256                                  	;je	short sdbcsbc		; jump if so
 43257                                  
 43258 000045AE 57                      	push	di
 43259                                  	; 10/09/2023
 43260                                  	;push	ax
 43261 000045AF 51                      	push	cx
 43262 000045B0 268B0D                  	mov	cx,[es:di]		; load block length
 43263                                  	;add	di,2			; points actual data
 43264 000045B3 47                      	inc	di
 43265 000045B4 47                      	inc	di
 43266                                  	;xor	al,al			; fill bytes
 43267 000045B5 F3AA                    	rep	stosb			; clear data block
 43268 000045B7 59                      	pop	cx
 43269                                  	;pop	ax
 43270 000045B8 5F                      	pop	di
 43271                                  
 43272                                  sdbcsbc_pop:	; 10/09/2023
 43273 000045B9 58                      	pop	ax
 43274                                  sdbcsbc:
 43275                                  setdoscntry_ok:	; 18/12/2022
 43276 000045BA C3                      	retn
 43277                                  
 43278                                  	;endif
 43279                                  
 43280                                  ;----------------------------------------------------------------------------
 43281                                  
 43282                                  getcountrydestination:
 43283                                  
 43284                                  ;----------------------------------------------------------------------------
 43285                                  ;get the destination address in the dos country info table.
 43286                                  ;
 43287                                  ;input: al - data id
 43288                                  ;	es:di -> dos_country_cdpg_info
 43289                                  ;on return:
 43290                                  ;	es:di -> destination address of the matching data id
 43291                                  ;	carry set if no matching data id found in dos.
 43292                                  ;----------------------------------------------------------------------------
 43293                                  
 43294                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43295                                  	; (SYSINIT:4EB2h)
 43296                                  
 43297                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43298                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 43299                                  
 43300 000045BB 51                      	push	cx
 43301                                  	;add	di,74
 43302 000045BC 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 43303                                  					;skip the reserved area, syscodepage etc.
 43304 000045BF 268B0D                  	mov	cx,[es:di]		;get the number of entries
 43305 000045C2 47                      	inc	di
 43306 000045C3 47                      	inc	di			;si -> the first start entry id
 43307                                  
 43308                                  getcntrydest:
 43309 000045C4 263805                  	cmp	byte [es:di],al
 43310 000045C7 7413                    	je	short getcntrydest_ok
 43311                                  
 43312 000045C9 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 43313 000045CD 7405                    	je	short getcntrydest_1
 43314                                  
 43315 000045CF 83C705                  	add	di,5			;next data id
 43316 000045D2 EB03                    	jmp	short getcntrydest_loop
 43317                                  
 43318                                  getcntrydest_1:
 43319                                  	;add	di,41
 43320 000045D4 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 43321                                  getcntrydest_loop:
 43322 000045D7 E2EB                    	loop	getcntrydest
 43323 000045D9 F9                      	stc
 43324                                  	;jmp	short getcntrydest_exit
 43325                                  getcntrydest_exit:
 43326                                  	; 10/09/2023
 43327 000045DA 59                      	pop	cx
 43328 000045DB C3                      	retn
 43329                                  
 43330                                  getcntrydest_ok:
 43331                                  	; 10/09/2023
 43332 000045DC 47                      	inc	di
 43333                                  
 43334                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 43335                                  ;	jne	short getcntrydest_ok1
 43336                                  ;
 43337                                  ;	;inc	di			;now di -> cccountryinfolen
 43338                                  ;	jmp	short getcntrydest_exit
 43339                                  
 43340                                  	; 10/09/2023
 43341 000045DD 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 43342 000045DF 74F9                    	je	short getcntrydest_exit
 43343                                  
 43344                                  getcntrydest_ok1:
 43345                                  	;les	di,[es:di+1]		;get the destination in es:di
 43346                                  	; 10/09/2023
 43347 000045E1 26C43D                  	les	di,[es:di]
 43348                                  ;getcntrydest_exit:
 43349 000045E4 59                      	pop	cx
 43350 000045E5 C3                      	retn
 43351                                  
 43352                                  ;----------------------------------------------------------------------------
 43353                                  
 43354                                  readincontrolbuffer:
 43355                                  
 43356                                  ;----------------------------------------------------------------------------
 43357                                  ;move file pointer to cx:dx
 43358                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 43359                                  ;si will be set to 0 hence ds:si points to the control buffer.
 43360                                  ;
 43361                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 43362                                  ;	 be moved.
 43363                                  ;	 ax - # of bytes to read
 43364                                  ;	 bx - file handle
 43365                                  ;	 ds - buffer seg.
 43366                                  ;return: the control data information is read into ds:0 - ds:0200.
 43367                                  ;	 cx,dx value destroyed.
 43368                                  ;	 carry set if error in reading file.
 43369                                  ;----------------------------------------------------------------------------
 43370                                  
 43371 000045E6 50                      	push	ax			;# of bytes to read
 43372 000045E7 B80042                  	mov	ax,4200h
 43373 000045EA F9                      	stc
 43374 000045EB CD21                    	int	21h			;move pointer
 43375 000045ED 59                      	pop	cx			;# of bytes to read
 43376 000045EE 7209                    	jc	short ricb_exit
 43377                                  
 43378 000045F0 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 43379 000045F2 31F6                    	xor	si,si
 43380 000045F4 B43F                    	mov	ah,3Fh			;read into the buffer
 43381 000045F6 F9                      	stc
 43382 000045F7 CD21                    	int	21h			;should be less than 1024 bytes.
 43383                                  ricb_exit:
 43384 000045F9 C3                      	retn
 43385                                  
 43386                                  ;----------------------------------------------------------------------------
 43387                                  
 43388                                  ;! set_country_path procedure is not called from anywhere !
 43389                                  ; Erdogan Tan - 04/08/2023
 43390                                  %if 0
 43391                                  
 43392                                  set_country_path:
 43393                                  
 43394                                  ;----------------------------------------------------------------------------
 43395                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 43396                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 43397                                  ;     assumes current directory is the root directory.
 43398                                  ;out: ds:di -> full path (cntry_drv).
 43399                                  ;     set the cntry_drv string from the country=,,path command.
 43400                                  ;     ds, es, si value saved.
 43401                                  ;----------------------------------------------------------------------------
 43402                                  
 43403                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43404                                  	; (SYSINIT:4EF4h)
 43405                                  
 43406                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43407                                  	; (Retrodos v5.0 Pre-Works)
 43408                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 43409                                  
 43410                                  	push	si
 43411                                  
 43412                                  	push	ds			;switch ds, es
 43413                                  	push	es
 43414                                  	pop	ds
 43415                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 43416                                  
 43417                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 43418                                  	jc	short scp_default_drv 	;no, use current default drive.
 43419                                  
 43420                                  	mov	al,[si]
 43421                                  	inc	si
 43422                                  	inc	si			;si -> next char after ":"
 43423                                  	jmp	short scp_setdrv
 43424                                  
 43425                                  scp_default_drv:
 43426                                  	mov	ah,19h
 43427                                  	int	21h
 43428                                  	add	al,"A"			;convert it to a character.
 43429                                  
 43430                                  scp_setdrv:
 43431                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 43432                                  	mov	di,cntry_path
 43433                                  	mov	al,[si]
 43434                                  	cmp	al, "\"
 43435                                  	je	short scp_root_dir
 43436                                  
 43437                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 43438                                  	;je	short scp_root_dir
 43439                                  	;jmp	short scp_path
 43440                                  	; 04/01/2023
 43441                                  	jne	short scp_path
 43442                                  
 43443                                  scp_root_dir:
 43444                                  	dec	di			;di -> cntry_root
 43445                                  scp_path:
 43446                                  	call	move_asciiz		;copy it
 43447                                  
 43448                                  	mov	di,cntry_drv
 43449                                  scpath_exit:
 43450                                  
 43451                                  	push	ds			;switch ds, es
 43452                                  	push	es
 43453                                  	pop	ds
 43454                                  	pop	es			;ds, es value restored
 43455                                  
 43456                                  	pop	si
 43457                                  	retn
 43458                                  
 43459                                  ;----------------------------------------------------------------------------
 43460                                  
 43461                                  chk_drive_letter:
 43462                                  
 43463                                  ;check if ds:[si] is a drive letter followed by ":".
 43464                                  ;assume that every alpha character is already converted to upper case.
 43465                                  ;carry set if not.
 43466                                  
 43467                                  	; 04/01/2023 - Retrodos v4.2
 43468                                  
 43469                                  	push	ax
 43470                                  	cmp	byte [si],"A"
 43471                                  	;jb	short cdletter_no
 43472                                  	jb	short cdletter_exit
 43473                                  	cmp	byte [si],"Z"
 43474                                  	ja	short cdletter_no
 43475                                  	cmp	byte [si+1],":"
 43476                                  	;jne	short cdletter_no
 43477                                  	;jmp	short cdletter_exit
 43478                                  	; 04/01/2023
 43479                                  	je	short cdletter_exit
 43480                                  
 43481                                  cdletter_no:
 43482                                  	stc
 43483                                  cdletter_exit:
 43484                                  	pop	ax
 43485                                  	retn
 43486                                  
 43487                                  %endif
 43488                                  
 43489                                  ;----------------------------------------------------------------------------
 43490                                  
 43491                                  move_asciiz:
 43492                                  
 43493                                  ;in: ds:si -> source es:di -> target
 43494                                  ;out: copy the string until 0.
 43495                                  ;assumes there exists a 0.
 43496                                  
 43497                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43498                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 43499                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 43500                                  
 43501                                  masciiz_loop:
 43502                                  	; 10/09/2023
 43503 000045FA F604FF                  	test	byte [si],0FFh
 43504 000045FD A4                      	movsb
 43505                                  	;cmp	byte [si-1],0	; was it 0?
 43506                                  	;jne	short masciiz_loop
 43507 000045FE 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 43508 00004600 C3                      	retn
 43509                                  
 43510                                  ;----------------------------------------------------------------------------
 43511                                  
 43512                                  ;	ds:dx points to string to output (asciz)
 43513                                  ;
 43514                                  ;	prints <badld_pre> <string> <badld_post>
 43515                                  
 43516                                  badfil:
 43517 00004601 0E                      	push	cs
 43518 00004602 07                      	pop	es
 43519                                  
 43520 00004603 89D6                    	mov	si,dx
 43521                                  badload:
 43522 00004605 BA[8D4C]                	mov	dx,badld_pre	; want to print config error
 43523 00004608 BB[4A4C]                	mov	bx,crlfm
 43524                                  prnerr:
 43525 0000460B 0E                      	push	cs
 43526 0000460C 1F                      	pop	ds ; *
 43527 0000460D E81D00                  	call	print
 43528                                  prn1:
 43529 00004610 268A14                  	mov	dl,[es:si]
 43530 00004613 08D2                    	or	dl,dl
 43531 00004615 7407                    	jz	short prn2
 43532 00004617 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 43533 00004619 CD21                    	int	21h
 43534 0000461B 46                      	inc	si
 43535 0000461C EBF2                    	jmp	short prn1
 43536                                  prn2:
 43537 0000461E 89DA                    	mov	dx,bx
 43538 00004620 E80A00                  	call	print
 43539                                  	; 11/12/2022
 43540                                  	; ds = cs ; *
 43541 00004623 803E[5303]01            	cmp	byte [donotshownum],1
 43542                                  				; suppress line number when handling command.com
 43543                                  	;cmp	byte [cs:donotshownum],1 
 43544 00004628 7407                    	je	short prnexit
 43545                                  	
 43546                                  	; 18/12/2022
 43547                                  	;call	error_line
 43548 0000462A E966E4                  	jmp	error_line
 43549                                  ;prnexit:
 43550                                  	;retn
 43551                                  
 43552                                  ;----------------------------------------------------------------------------
 43553                                  
 43554                                  print:
 43555 0000462D B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 43556 0000462F CD21                    	int	21h
 43557                                  prnexit:	; 18/12/2022
 43558 00004631 C3                      	retn
 43559                                  
 43560                                  ;----------------------------------------------------------------------------
 43561                                  
 43562                                  ;  open device pointed to by dx, al has access code
 43563                                  ;   if unable to open do a device open null device instead
 43564                                  
 43565                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43566                                  	; (SYSINIT:3764h)
 43567                                  open_dev:
 43568 00004632 E80500                  	call	open_file
 43569 00004635 7309                    	jnc	short open_dev3
 43570                                  
 43571                                  open_dev1:
 43572 00004637 BA[9A46]                	mov	dx,nuldev
 43573                                  	; 18/12/2022
 43574                                  	;call	open_file
 43575                                  ;of_retn:
 43576                                  	;retn
 43577                                  	; 18/12/2022
 43578                                  	;jmp	short open_file
 43579                                  open_file:
 43580 0000463A B43D                    	mov	ah,OPEN	; 3Dh
 43581 0000463C F9                      	stc
 43582 0000463D CD21                    	int	21h
 43583                                  of_retn:	; 18/12/2022
 43584 0000463F C3                      	retn
 43585                                  
 43586                                  open_dev3:
 43587 00004640 89C3                    	mov	bx,ax			; handle from open to bx
 43588                                  	;;xor	ax,ax			; get device info
 43589                                  	;;mov	ah,IOCTL ; 44h
 43590                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 43591                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43592                                  	;xor	ax,ax
 43593                                  	;mov	ah,44h	; IOCTL
 43594                                  	; 11/12/2022
 43595 00004642 B80044                  	mov	ax,4400h ; IOCTL<<8 
 43596                                  
 43597 00004645 CD21                    	int	21h
 43598                                  
 43599 00004647 F6C280                  	test	dl,10000000b ; 80h
 43600 0000464A 75F3                    	jnz	short of_retn
 43601                                  
 43602 0000464C B43E                    	mov	ah,CLOSE ; 3Eh
 43603 0000464E CD21                    	int	21h
 43604 00004650 EBE5                    	jmp	short open_dev1
 43605                                  
 43606                                  ;----------------------------------------------------------------------------
 43607                                  
 43608                                  ; 18/12/2022
 43609                                  %if 0
 43610                                  open_file:
 43611                                  	mov	ah,OPEN	; 3Dh
 43612                                  	stc
 43613                                  	int	21h
 43614                                  	retn
 43615                                  %endif
 43616                                  
 43617                                  ;----------------------------------------------------------------------------
 43618                                  
 43619                                  ; test int24. return back to dos with the fake user response of "fail"
 43620                                  
 43621                                  int24:
 43622 00004652 B003                    	mov	al,3			; fail the system call
 43623 00004654 CF                      	iret				; return back to dos.
 43624                                  
 43625                                  ; 19/04/2019 - Retro DOS v4.0
 43626                                  
 43627                                  ;----------------------------------------------------------------------------
 43628                                  ; DATA
 43629                                  ;----------------------------------------------------------------------------
 43630                                  
 43631                                  ;include copyrigh.inc			; copyright statement
 43632                                  
 43633                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 43634                                  
 43635                                  ;MsDosVersion6Copyr:
 43636                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 43637                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 43638                                  
 43639                                  ; 22/10/2022
 43640                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 43641                                  
 43642                                  ; 28/12/2022
 43643                                  %if 0
 43644                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43645                                  MsDosVersion5Copyr:
 43646                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 43647                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 43648                                  %endif
 43649                                  
 43650                                  ; 13/04/2024 - Retro DOS v5.0
 43651                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:51EAh	(IBMBIO.COM offset 42266)
 43652                                  %if 0
 43653                                  IBMDOSV71COPYR:
 43654                                  	db 'IBM DOS Version 7.1 (C)Copyright 1981-2002 IBM Corporation '
 43655                                  	db 'Licensed Material - Property of IBM All rights reserved '
 43656                                  %endif
 43657                                  
 43658                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43659                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 43660                                  ; 20/04/2019 - Retro DOS v4.0
 43661                                  ;BOOTMES:
 43662                                  ;	db      13
 43663                                  ;	db      10
 43664                                  ;	db      "MS-DOS version "
 43665                                  ;	db      MAJOR_VERSION + "0"
 43666                                  ;	db      "."
 43667                                  ;	db      (MINOR_VERSION / 10) + "0"
 43668                                  ;	db      (MINOR_VERSION % 10) + "0"
 43669                                  ;	db      13,10
 43670                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 43671                                  ;	; 22/10/2022
 43672                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 43673                                  ;	;
 43674                                  ;	db	0
 43675                                  
 43676                                  	; 01/01/2023 - Retro DOS v4.2
 43677                                  
 43678                                  	; 28/12/2022 - Retro DOS v4.1
 43679                                  ;MsDosVersion5Copyr:
 43680                                  ;  	db	13,10,"MS DOS Version 5.0"
 43681                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 43682                                  
 43683                                  	; 12/12/2022
 43684 00004655 00                      	db	0
 43685                                  ; 12/12/2022
 43686                                  BOOTMES:
 43687 00004656 0D0A                    	db	13,10
 43688                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 43689                                  	; 28/12/2022
 43690                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 43691                                  	; 01/01/2023
 43692                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 43693                                  	; 30/12/2023
 43694                                  	;db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 43695                                  	; 09/03/2025
 43696 00004658 4D696E69444F532076-     	db	"MiniDOS v1.0 (Simplified PCDOS 7.1) "
 43696 00004661 312E30202853696D70-
 43696 0000466A 6C6966696564205043-
 43696 00004673 444F5320372E312920 
 43697                                  	
 43698 0000467C 0D0A                    	db	13,10
 43699                                  	;db	"by Erdogan Tan [2024] " ; 01/01/2024
 43700 0000467E 6279204572646F6761-     	db	"by Erdogan Tan [2025] " ; 09/03/2025
 43700 00004687 6E2054616E205B3230-
 43700 00004690 32355D20           
 43701 00004694 0D0A                    	db	13,10
 43702 00004696 0D0A2400                	db	13,10,"$",0
 43703                                  
 43704 0000469A 4E554C00                nuldev:	db	"NUL",0
 43705 0000469E 434F4E00                condev:	db	"CON",0
 43706 000046A2 41555800                auxdev:	db	"AUX",0
 43707 000046A6 50524E00                prndev:	db	"PRN",0
 43708                                  
 43709                                  ;IFDEF	CONFIGPROC
 43710 000046AA 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 43710 000046B3 595300             
 43711                                  
 43712 000046B6 413A                    cntry_drv:  db	"A:"
 43713 000046B8 5C                      cntry_root: db	"\"
 43714 000046B9 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 43714 000046C2 595300             
 43715                                  	    ;db	52 dup (0)
 43716 000046C5 00<rep 34h>             	    times 52 db 0	
 43717                                  
 43718                                  country_file_signature:
 43719 000046F9 FF434F554E545259        	db	0FFh,'COUNTRY'
 43720                                  
 43721                                  cntrycodepage_id: 
 43722 00004701 0000                    	dw	0 	
 43723                                  
 43724                                  ;ENDIF ; CONFIGPROC
 43725                                  
 43726                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43727                                  ; (SYSINIT:5081h)
 43728                                  
 43729                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43730                                  ;ifdef	MULTI_CONFIG
 43731 00004703 00                      newcmd:  db	0			; non-zero if non-std shell specified
 43732 00004704 40                      tmplate: db	64                      ; must precede commnd
 43733                                  ;endif
 43734                                  
 43735                                  ;ifdef ROMEXEC
 43736                                  ;	db      7                       ; size of commnd line (excl. null)
 43737                                  ;commnd: db	"COMMAND",0
 43738                                  ;	db	56 dup (0)
 43739                                  ;else
 43740                                  	; 02/11/2022
 43741 00004705 0C                      	db	12                      ; size of commnd line (excl. null)
 43742 00004706 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 43742 0000470F 434F4D00           
 43743                                  	;db	51 dup (0)
 43744 00004713 00<rep 33h>             	times	51 db 0
 43745                                  ;endif
 43746                                  
 43747                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43748                                  ;ifdef	MULTI_CONFIG
 43749 00004746 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 43749 0000474F 434F4D00           
 43750 00004753 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 43751 00004757 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 43751 00004760 4D4D414E442E434F4D-
 43751 00004769 00                 
 43752 0000476A 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 43752 00004773 202F5000           
 43753 00004777 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 43753 00004780 414E442E434F4D00   
 43754 00004788 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 43754 00004791 5000               
 43755                                  def_swchr:	
 43756 00004793 00                      	 db	0			; default switchchar (referenced as command_line-1)
 43757                                  ;endif
 43758                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43759                                  command_line:
 43760 00004794 022F50                  	db	2,"/P"			; default command.com args
 43761                                  	;db	125 dup (0)
 43762 00004797 00<rep 7Dh>             	times	125 db 0
 43763                                  
 43764                                  pathstring:
 43765                                  	;db	64 dup (0)
 43766 00004814 00<rep 40h>             	times	64 db 0
 43767                                  
 43768                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43769                                  ; (SYSINIT:51D3h)
 43770                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43771                                  ;%if 0
 43772                                  
 43773                                  dae_flag:
 43774 00004854 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 43775                                  
 43776                                  ;ifdef	MULTI_CONFIG
 43777                                  
 43778                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 43779                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 43780                                  
 43781                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 43782                                  
 43783 00004855 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 43784 00004856 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 43785 00004857 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 43786 00004858 00                      bLastCol:	db      0               ; ending column on status line
 43787 00004859 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 43788 0000485A 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 43789                                                                          ; 2=disable default 2-second delay
 43790 0000485B 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 43791 0000485C 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 43792 0000485E 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 43793 0000485F 01                      bDefBlock:	db      1               ; default block #
 43794 00004860 00                      bMaxBlock:	db      0               ; maxmimum block #
 43795 00004861 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 43796 00004863 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 43797 00004864 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 43798 00004865 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 43799 0000486F 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 43800 00004883 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 43801                                  
 43802 00004897 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 43803 0000489F 4D454E5500              szMenu:		db      "MENU",0
 43804 000048A4 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 43805                                  
 43806                                  ;endif	;MULTI_CONFIG
 43807                                  
 43808                                  	; 10/09/2023
 43809                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 43810                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 43811                                  
 43812                                  comtab:	 ; label byte
 43813                                  
 43814                                  ;            cmd len    command         cmd code
 43815                                  ;            -------    -------         --------
 43816                                  
 43817                                  ;ifdef MULTI_CONFIG
 43818 000048AB 015B5B                          db      1,      "[",            CONFIG_BEGIN
 43819                                  ;endif
 43820 000048AE 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 43821 000048B5 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 43822 000048BE 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 43823 000048C7 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 43824 000048D0 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 43825 000048D8 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43825 000048E1 474855             
 43826 000048E4 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 43827 000048E9 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43827 000048F2 50                 
 43828 000048F3 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 43829 000048F9 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 43830                                  ;ifdef MULTI_CONFIG
 43831 00004900 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 43832                                  ;endif
 43833 00004909 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 43834 00004912 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 43834 0000491B 49474857           
 43835 0000491F 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43835 00004928 454C               
 43836                                  ;ifdef MULTI_CONFIG
 43837 0000492A 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 43838 00004933 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 43838 0000493C 5252               
 43839 0000493E 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 43839 00004947 554C5441           
 43840 0000494B 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 43840 00004954 45                 
 43841                                  ;endif
 43842 00004955 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43842 0000495E 434B4D             
 43843                                  ;ifdef MULTI_CONFIG
 43844 00004961 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 43845                                  ;endif
 43846 0000496A 0352454D30                      db      3,      "REM",          CONFIG_REM
 43847                                  ;ifdef MULTI_CONFIG
 43848 0000496F 0353455456                      db      3,      "SET",          CONFIG_SET
 43849                                  ;endif
 43850 00004974 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 43851                                  ;if    STACKSW
 43852 0000497B 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 43853                                  ;endif
 43854 00004983 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 43854 0000498C 31                 
 43855 0000498D 00                      	db	0
 43856                                  
 43857                                  	; 10/09/2023
 43858                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h
 43859                                  	; 13/04/2024 - Retro DOS v5.0
 43860 0000498E 07444F534441544154      	db	7,	"DOSDATA",	CONFIG_DOSDATA ; 'T'
 43861 00004997 00                      	db	0
 43862                                  
 43863                                  ;%endif ; 02/11/2022
 43864                                  
 43865                                  ; 01/01/2023 - Retro DOS v4.2
 43866                                  %if 0
 43867                                  
 43868                                  comtab:
 43869                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43870                                  	; (SYSINIT:38EDh)
 43871                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 43872                                  	db      5,      "BREAK",        CONFIG_BREAK
 43873                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 43874                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43875                                  	db      5,      "FILES",        CONFIG_FILES
 43876                                  	db      4,      "FCBS",         CONFIG_FCBS
 43877                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43878                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43879                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43880                                  	db      6,      "STACKS",       CONFIG_STACKS
 43881                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 43882                                  	db      5,      "SHELL",        CONFIG_SHELL
 43883                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 43884                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 43885                                  	db      3,      "REM",          CONFIG_REM
 43886                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 43887                                  	db      3,      "DOS",          CONFIG_DOS
 43888                                  	db	0
 43889                                  
 43890                                  %endif
 43891                                  
 43892                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43893                                  ; (SYSINIT:530Ch)
 43894                                  
 43895                                  ; 13/04/2024 - Retro DOS v5.0
 43896                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:555Ah)
 43897                                  
 43898                                  deviceparameters:	
 43899                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 43900                                  devp.specialfunc:	; deviceparameters +
 43901 00004998 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 43902                                  devp.devtype:
 43903 00004999 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 43904                                  devp.devattr:
 43905 0000499A 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 43906                                  devp.cylinders:
 43907 0000499C 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 43908                                  
 43909                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 43910                                  
 43911                                  	;times	286	db 0
 43912                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 43913 0000499E 00                      	db	0
 43914                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 43915                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 43916 0000499F 0000                    	dw	0
 43917                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 43918 000049A1 00                      	db	0	
 43919 000049A2 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 43920 000049A4 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 43921 000049A5 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 43922                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 43923 000049A7 0000                    	dw	0
 43924                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 43925 000049A9 00                      	db	0
 43926 000049AA 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 43927                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 43928 000049AC 0000                    	dw	0
 43929                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 43930 000049AE 0000                    	dw	0	
 43931                                  
 43932                                  	; 13/04/2024 - Retro DOS v5.0
 43933                                  	; (PCDOS 7.1 IBMBIO.COM)
 43934 000049B0 00<rep 44h>             	times	68 db 0	; PCDOS 7.1 (FAT32 BPB)
 43935                                  	;;times	14 db 0	; MSDOS 6.21
 43936                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 43937                                  	;dw	0
 43938                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 43939                                  	;dw	0
 43940                                  	;times	6 db 0	
 43941                                  
 43942                                  devp.trktblents:
 43943 000049F4 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 43944                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 43945 000049F6 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 43946                                  			; 63*4 bytes
 43947                                  
 43948                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43949                                  ; (SYSINIT:5430h)
 43950                                  
 43951                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 43952                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:56B4h)
 43953                                  	
 43954 00004AF2 0200                    hlim:	dw	2
 43955 00004AF4 0900                    slim:	dw	9
 43956                                  
 43957 00004AF6 00                      drive:	db	0
 43958                                  
 43959                                  switches:
 43960 00004AF7 0000                    	dw	0
 43961                                  
 43962                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43963                                  ; (SYSINIT:5437h)
 43964                                  
 43965                                  ; the following are the recommended bpbs for the media that
 43966                                  ; we know of so far.
 43967                                  
 43968                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 43969                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 43970                                  
 43971                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 43972                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 43973                                  
 43974                                  ; 48 tpi diskettes
 43975                                  
 43976 00004AF9 0002                    bpb48t:	dw	512
 43977 00004AFB 02                      	db	2
 43978 00004AFC 0100                    	dw	1
 43979 00004AFE 02                      	db	2
 43980 00004AFF 7000                    	dw	112
 43981 00004B01 D002                    	dw	2*9*40 ; 720
 43982 00004B03 FD                      	db	0FDh
 43983 00004B04 0200                    	dw	2
 43984 00004B06 0900                    	dw	9
 43985 00004B08 0200                    	dw	2
 43986 00004B0A 00000000                	dd	0
 43987 00004B0E 00000000                        dd      0
 43988                                  	; 27/12/2023
 43989 00004B12 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 43990 00004B2E 90                      	db	90h	
 43991                                  
 43992                                  ; 96tpi diskettes
 43993                                  
 43994 00004B2F 0002                    bpb96t:	dw	512
 43995 00004B31 01                      	db	1
 43996 00004B32 0100                    	dw	1
 43997 00004B34 02                      	db	2
 43998 00004B35 E000                    	dw	224
 43999 00004B37 6009                    	dw	2*15*80 ; 2400
 44000 00004B39 F9                      	db	0F9h
 44001 00004B3A 0700                    	dw	7
 44002 00004B3C 0F00                    	dw	15
 44003 00004B3E 0200                    	dw	2
 44004 00004B40 00000000                	dd	0
 44005 00004B44 00000000                        dd      0
 44006                                  	; 27/12/2023
 44007 00004B48 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44008 00004B64 90                      	db	90h	
 44009                                  
 44010                                  ; 3 1/2 inch diskette bpb
 44011                                  
 44012 00004B65 0002                    bpb35:	dw	512
 44013 00004B67 02                      	db	2
 44014 00004B68 0100                    	dw	1
 44015 00004B6A 02                      	db	2
 44016 00004B6B 7000                    	dw	112
 44017 00004B6D A005                    	dw	2*9*80 ; 1440
 44018 00004B6F F9                      	db	0F9h
 44019 00004B70 0300                    	dw	3
 44020 00004B72 0900                    	dw	9
 44021 00004B74 0200                    	dw	2
 44022 00004B76 00000000                	dd	0
 44023 00004B7A 00000000                        dd      0
 44024                                  	; 27/12/2023
 44025 00004B7E 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44026 00004B9A 90                      	db	90h
 44027                                        
 44028 00004B9B 0002                    bpb35h:	dw	512
 44029 00004B9D 01                      	db	1
 44030 00004B9E 0100                    	dw	1
 44031 00004BA0 02                      	db	2
 44032 00004BA1 E000                    	dw	224
 44033 00004BA3 400B                    	dw	2*18*80 ; 2880
 44034 00004BA5 F0                      	db	0F0h
 44035 00004BA6 0900                    	dw	9
 44036 00004BA8 1200                    	dw	18
 44037 00004BAA 0200                    	dw	2
 44038 00004BAC 00000000                	dd	0
 44039 00004BB0 00000000                        dd      0
 44040                                  	; 27/12/2023
 44041 00004BB4 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44042 00004BD0 90                      	db	90h
 44043                                  
 44044                                  ; m037 - BEGIN
 44045                                  
 44046 00004BD1 0002                    bpb288:	dw	512
 44047 00004BD3 02                      	db	2
 44048 00004BD4 0100                    	dw	1
 44049 00004BD6 02                      	db	2
 44050 00004BD7 F000                    	dw	240
 44051 00004BD9 8016                    	dw	2*36*80 ; 5760
 44052 00004BDB F0                      	db	0F0h
 44053 00004BDC 0900                    	dw	9
 44054 00004BDE 2400                    	dw	36
 44055 00004BE0 0200                    	dw	2
 44056 00004BE2 00000000                	dd	0
 44057 00004BE6 00000000                        dd      0
 44058                                  	; 27/12/2023
 44059 00004BEA 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44060 00004C06 90                      	db	90h
 44061                                  
 44062                                  ; m037 - END
 44063                                  
 44064                                  ; 12/05/2019
 44065                                  
 44066 00004C07 90                      align 2
 44067                                  
 44068                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44069                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 44070                                  
 44071                                  ; 13/04/2024 - Retro DOS v5.0
 44072                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5738h)
 44073                                  
 44074 00004C08 [F94A]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 44075 00004C0A [2F4B]                  	    dw	    bpb96t		; 96tpi drives
 44076 00004C0C [654B]                  	    dw	    bpb35		; 3.5" drives
 44077                                  ; the following are not supported, so default to 3.5" media layout
 44078 00004C0E [654B]                  	    dw	    bpb35		; not used - 8" drives
 44079 00004C10 [654B]                  	    dw	    bpb35		; not used - 8" drives
 44080 00004C12 [654B]                  	    dw	    bpb35		; not used - hard files
 44081 00004C14 [654B]                  	    dw	    bpb35		; not used - tape drives
 44082 00004C16 [9B4B]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 44083 00004C18 [654B]                  	    dw	    bpb35		; ERIMO				m037
 44084 00004C1A [D14B]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 44085                                  
 44086                                  switchlist: 
 44087 00004C1C 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 44088                                  
 44089                                  ;----------------------------------------------------------------------------
 44090                                  ; Messages
 44091                                  ;----------------------------------------------------------------------------
 44092                                  
 44093                                  ; 19/04/2019 - Retro DOS v4.0
 44094                                  
 44095                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 44096                                  
 44097 00004C25 00                      	db 	0
 44098                                  
 44099                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44100                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 44101                                  
 44102                                  ; 13/04/2024
 44103                                  ; MSDOS 6.22 IO.SYS - SYSINIT:559Eh
 44104                                  
 44105                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44106                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5756h
 44107                                  
 44108                                  badopm:
 44109 00004C26 0D0A                    	db	0Dh,0Ah 
 44110 00004C28 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 44110 00004C31 7A656420636F6D6D61-
 44110 00004C3A 6E6420696E20434F4E-
 44110 00004C43 4649472E535953     
 44111                                  crlfm:
 44112 00004C4A 0D0A24                  	db	0Dh,0Ah,'$'
 44113                                  badparm:
 44114 00004C4D 0D0A                    	db	0Dh,0Ah
 44115 00004C4F 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 44115 00004C58 6E64206F7220706172-
 44115 00004C61 616D6574657273202D-
 44115 00004C6A 2024               
 44116                                  badsiz_pre:
 44117 00004C6C 0D0A                    	db	0Dh,0Ah
 44118 00004C6E 536563746F72207369-     	db	'Sector size too large in file $'
 44118 00004C77 7A6520746F6F206C61-
 44118 00004C80 72676520696E206669-
 44118 00004C89 6C652024           
 44119                                  badld_pre:
 44120 00004C8D 0D0A                    	db	0Dh,0Ah
 44121 00004C8F 426164206F72206D69-     	db	'Bad or missing $'
 44121 00004C98 7373696E672024     
 44122                                  badcom:
 44123 00004C9F 436F6D6D616E642049-     	db	'Command Interpreter',0
 44123 00004CA8 6E7465727072657465-
 44123 00004CB1 7200               
 44124                                  badcountry:
 44125 00004CB3 0D0A                    	db	0Dh,0Ah
 44126 00004CB5 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 44126 00004CBE 6F756E74727920636F-
 44126 00004CC7 6465206F7220636F64-
 44126 00004CD0 6520706167650D0A24 
 44127                                  badcountrycom:
 44128 00004CD9 0D0A                    	db	0Dh,0Ah
 44129 00004CDB 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 44129 00004CE4 434F554E5452592063-
 44129 00004CED 6F6D6D616E640D0A24 
 44130                                  insufmemory:
 44131 00004CF6 0D0A                    	db	0Dh,0Ah
 44132 00004CF8 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 44132 00004D01 656E74206D656D6F72-
 44132 00004D0A 7920666F7220434F55-
 44132 00004D13 4E5452592E53595320-
 44132 00004D1C 66696C650D0A24     
 44133                                  badmem:
 44134 00004D23 0D0A                    	db	0Dh,0Ah
 44135 00004D25 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 44135 00004D2E 74696F6E20746F6F20-
 44135 00004D37 6C6172676520666F72-
 44135 00004D40 206D656D6F72790D0A-
 44135 00004D49 24                 
 44136                                  badblock:
 44137 00004D4A 0D0A                    	db	0Dh,0Ah
 44138 00004D4C 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 44138 00004D55 626C6F636B20646576-
 44138 00004D5E 696365730D0A24     
 44139                                  badstack:
 44140 00004D65 0D0A                    	db	0Dh,0Ah
 44141 00004D67 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 44141 00004D70 5441434B2070617261-
 44141 00004D79 6D65746572730D0A24 
 44142                                  	; 18/12/2022
 44143                                  ;badorder:
 44144                                  	;db	0Dh,0Ah
 44145                                  	;db	'Incorrect order in CONFIG.SYS line $'
 44146                                  errorcmd:
 44147 00004D82 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 44147 00004D8B 434F4E4649472E5359-
 44147 00004D94 53206C696E652024   
 44148                                  
 44149                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44150                                  ; (SYSINIT:566Eh)
 44151                                  
 44152                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44153                                  ;%if 0
 44154                                  
 44155 00004D9C 4F4E                    OnOff:	db	'ON'
 44156 00004D9E 4F4646                  OnOff2:	db	'OFF'
 44157                                  
 44158                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44159                                  	; (SYSINIT:5673h)
 44160                                  ;StartMsg:
 44161                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 44162                                  ;	db	0Ah,0
 44163                                  
 44164                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44165                                  	; (SYSINIT:58F7h)
 44166                                  StartMsg:
 44167 00004DA1 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 44167 00004DAA 504320444F532E2E2E-
 44167 00004DB3 0D0A               
 44168 00004DB5 0A00                    	db	0Ah,0
 44169                                  
 44170                                  _$PauseMsg:
 44171                                  	; 17/12/2023
 44172                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 44173                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 44174 00004DB7 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 44174 00004DC0 206B657920746F2063-
 44174 00004DC9 6F6E74696E75652E2E-
 44174 00004DD2 2E0D0A24           
 44175                                  _$CleanMsg:
 44176                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44177                                  	; 17/12/2023
 44178 00004DD6 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44178 00004DDF 20627970617373696E-
 44178 00004DE8 6720796F757220434F-
 44178 00004DF1 4E4649472E53595320-
 44178 00004DFA 616E64204155544F45-
 44178 00004E03 5845432E4241542066-
 44178 00004E0C 696C65732E0D0A24   
 44179                                  _$InterMsg:
 44180                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44181                                  	; 17/12/2023
 44182 00004E14 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44182 00004E1D 6C6C2070726F6D7074-
 44182 00004E26 20796F7520746F2063-
 44182 00004E2F 6F6E6669726D206561-
 44182 00004E38 636820434F4E464947-
 44182 00004E41 2E53595320636F6D6D-
 44182 00004E4A 616E642E0D0A24     
 44183                                  _$MenuHeader:
 44184 00004E51 0D0A                    	db	0Dh,0Ah
 44185                                  	; 17/12/2023
 44186                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 44187                                  	;db	'  '
 44188                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44189                                  	;db 	0Dh,0Ah,'$'
 44190                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 44191 00004E53 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 44191 00004E5C 372E31205374617274-
 44191 00004E65 7570204D656E750D0A 
 44192 00004E6E 2020                    	db	'  '
 44193 00004E70 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44194 00004E87 0D0A24                  	db 	0Dh,0Ah,'$'
 44195                                  _$MenuPrmpt:
 44196 00004E8A 2020456E7465722061-     	db	'  Enter a choice: $'
 44196 00004E93 2063686F6963653A20-
 44196 00004E9C 24                 
 44197                                  _$StatusLine:
 44198 00004E9D 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 44198 00004EA6 207374617274757020-
 44198 00004EAF 66696C65732046383D-
 44198 00004EB8 436F6E6669726D2065-
 44198 00004EC1 616368206C696E6520-
 44198 00004ECA 6F6620434F4E464947-
 44198 00004ED3 2E53595320         
 44199 00004ED8 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 44199 00004EE1 5845432E424154205B-
 44199 00004EEA 205D24             
 44200                                  _$InterPrmpt:
 44201                                  	;db	' [Y,N]?$'
 44202                                  	; 13/04/2024
 44203                                  	; 04/08/2023
 44204 00004EED 205B592C4E2C455343-     	db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 44204 00004EF6 5D3F24             
 44205 00004EF9 59455324                _$YES:	db	'YES$'
 44206 00004EFD 4E4F2024                _$NO:	db	'NO $'
 44207                                  _$TimeOut:
 44208 00004F01 54696D652072656D61-     	db	'Time remaining: $'
 44208 00004F0A 696E696E673A2024   
 44209                                  badcomprmpt:
 44210                                  	;db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 44211                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 44212 00004F12 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (for example, C:\COMMAND.COM)'
 44212 00004F1B 72656374206E616D65-
 44212 00004F24 206F6620436F6D6D61-
 44212 00004F2D 6E6420496E74657270-
 44212 00004F36 72657465722028666F-
 44212 00004F3F 72206578616D706C65-
 44212 00004F48 2C20433A5C434F4D4D-
 44212 00004F51 414E442E434F4D29   
 44213 00004F59 0D0A24                  	db	0Dh,0Ah,'$'
 44214                                  _$AutoPrmpt:
 44215 00004F5C 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 44215 00004F65 55544F455845432E42-
 44215 00004F6E 4154205B592C4E5D3F-
 44215 00004F77 24                 
 44216                                  
 44217                                  ;%endif ; 02/11/2022
 44218                                  
 44219                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44220                                  ; (SYSINIT:5840h)
 44221                                  
 44222                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44223                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 44224                                  
 44225                                  TooManyDrivesMsg:
 44226 00004F78 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 44226 00004F81 4C6F676963616C2064-
 44226 00004F8A 726976657320706173-
 44226 00004F93 74205A3A2065786973-
 44226 00004F9C 7420616E642077696C-
 44226 00004FA5 6C2062652069676E6F-
 44226 00004FAE 7265640D0A24       
 44227                                  
 44228                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 44229                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 44230                                  	;db	7 dup(0)
 44231                                  
 44232                                  	;times	7 db 0
 44233                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44234                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 44235                                  	; 09/12/2022
 44236                                  	;times 4 db 0
 44237                                  
 44238                                  	; 08/04/2024 - Retro DOS v5.0
 44239                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 44240                                  baddblspace:
 44241 00004FB4 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 44241 00004FBD 73797374656D20636F-
 44241 00004FC6 6D706F6E656E742069-
 44241 00004FCF 73206E6F7420696E73-
 44241 00004FD8 74616C6C65640D0A24-
 44241 00004FE1 00                 
 44242                                  	;db	7 dup(0)
 44243                                  
 44244                                  ;----------------------------------------------------------------------------
 44245                                  		; 09/12/2022
 44246                                  		;db 0
 44247                                  
 44248                                  number3div	equ ($-SYSINIT$)
 44249                                  number3mod	equ (number3div % 16)
 44250                                  
 44251                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 44252 00004FE2 00<rep Eh>              		times (16-number3mod) db 0
 44253                                  %endif
 44254                                  
 44255                                  ;---------------------------------------------------------------------------- 
 44256                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 44257                                  ;---------------------------------------------------------------------------- 
 44258                                  
 44259                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 44260                                  
 44261                                  ;----------------------------------------------------------------------------
 44262                                  ; 20/04/2019 - Retro DOS v4.0
 44263                                  
 44264                                  ; 09/12/2022
 44265                                  ;
 44266                                  ;bss_start:
 44267                                  ;
 44268                                  ;ABSOLUTE bss_start
 44269                                  ;
 44270                                  ;alignb 16
 44271                                  
 44272                                  SI_end:  ; SI_end equ $
 44273                                  
 44274                                  ;----------------------------------------------------------------------------
 44275                                  
 44276                                  ;sysinitseg	ends
 44277                                  
 44278                                  ; ***************************************************************************
 44279                                  
 44280                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 44281                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 44282                                  
 44283                                  SYSINITSIZE	equ SI_end - SYSINIT$
 44284                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 44285                                  
 44286                                  ;----------------------------------------------------------------------------
 44287                                  ; End of Retro DOS v5.0 IBMBIO.COM (IO.SYS) source by Erdogan Tan (2023)
 44288                                  ;----------------------------------------------------------------------------
 44289                                  
 44290                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 44291                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 44292                                  ;----------------------------------------------------------------------------
 44293                                  ;----------------------------------------------------------------------------
 44294                                  
 44295                                  ; ----------------------------------------------------------------------------
 44296                                  ; START OF PCDOS 7.1 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 44297                                  ; ----------------------------------------------------------------------------
 44298                                  ; 02/10/2023 - Retro DOS v5.0
 44299                                  ; 03/03/2025 - MiniDOS v1.0
 44300                                  
 44301                                  ;MSDOS_BIN_OFFSET:
 44302                                  IBMDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 44303                                  		
 44304                                  		; 10/07/2024
 44305                                  		; 07/07/2024
 44306                                  		; 08/05/2024
 44307                                  		; 14/04/2024
 44308                                  		; 02/10/2023 - Retro DOS v5.0 - PCDOS 7.1 KERNEL
 44309                                  		;incbin	'IBMDOS7.BIN'
 44310                                  
 44311                                  		; 16/03/2025
 44312                                  		; 07/03/2025
 44313                                  		; 03/03/2025 - MiniDOS v1.0 - PCDOS 7.1 KERNEL
 44314 00004FF0 <bin 989Ch>             		incbin	'KERNEL.BIN'
 44315                                  
 44316                                  ; 28/09/2023	
 44317                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 44318                                  
 44319                                  align 2
 44320                                  
 44321                                  ; 21/12/2022
 44322                                  ;;END_OF_KERNEL:
 44323                                  ;END_OF_KERNEL equ $
 44324                                  
 44325                                  ; 28/09/2023
 44326                                  S3SIZE equ $-$$
 44327                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 44328                                  
 44329                                  ;=============================================================================
 44330                                  ;	END
 44331                                  ;=============================================================================
 44332                                  ; Retro DOS v5.0 by Erdogan Tan (Redevelopment of PC-DOS 7.1 KERNEL via NASM)
 44333                                  ; ------------------------------
 44334                                  ; APRIL 2024, ISTANBUL - TURKIYE.
