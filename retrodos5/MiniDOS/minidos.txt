     1                                  ; ****************************************************************************
     2                                  ; MINIDOS.S (PCDOS 7.1 - MiniDOS 1.0 Kernel) - ERDOGAN TAN - 03/03/2025
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Modified from Retro DOS v5.0 'retrodos5.s' (17/07/2024) ((PCDOS 7.1 Kernel))
     5                                  ;
     6                                  ; Last Update: 18/03/2025
     7                                  ;
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	   ((nasm retrodos5.s -l retrodos5.txt -o PCDOS.SYS -Z error.txt))
    12                                  ; ---------------------------------------------------------------------------- 
    13                                  ; Included binary file: KERNEL.BIN (MiniDOS 1.0 - Kernel file) 
    14                                  ; ****************************************************************************
    15                                  
    16                                  ; 18/03/2025
    17                                  ; MiniDOS 1.0 modifications:
    18                                  ; 1) "DOSDATA=" configuration removed
    19                                  
    20                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    21                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    22                                  ; as below:
    23                                  ;
    24                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    25                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    26                                  ;
    27                                  ;    2) Labels, names, comments, explanations and structure definitions
    28                                  ;	about procedures and code details are almost entirely taken from
    29                                  ;	the original MSDOS 6.0 source code, except for the details that
    30                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    31                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    32                                  ;	the originality of the descriptions.)
    33                                  ;
    34                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    35                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    36                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    37                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    38                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    39                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    40                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    41                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    42                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    43                                  ;	than the original PCDOS/MSDOS. It does not include 
    44                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    45                                  ;	files are almost identical except their INIT codes.)
    46                                  ;
    47                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    48                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    49                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    50                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    51                                  		
    52                                  ; ----------------------------------------------------------------------------
    53                                  
    54                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    55                                  ;
    56                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    57                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    58                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    59                                  ;
    60                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    61                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    62                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    63                                  ; 		
    64                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    65                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    66                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    67                                  
    68                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    69                                  ;     (as included binary, 'IOSYS5.BIN') 
    70                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    71                                  ;						        (except MSLOAD code)
    72                                        
    73                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    74                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    75                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    76                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    77                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    78                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    79                                  
    80                                  ; ----------------------------------------------------------------------------
    81                                  
    82                                  ;=============================================================================
    83                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    84                                  ; by Erdogan Tan, 10/09/2018
    85                                  ;=============================================================================
    86                                  
    87                                  ; MSBIO (IO.SYS 6.0) source files:
    88                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    89                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    90                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    91                                  
    92                                  ;=============================================================================
    93                                  ; MSBIO
    94                                  ;=============================================================================
    95                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    96                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    97                                  ;msend,msbio,msbio;
    98                                  
    99                                  ;=============================================================================
   100                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
   101                                  ;=============================================================================
   102                                  
   103                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
   104                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
   105                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
   106                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
   107                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
   108                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
   109                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
   110                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
   111                                  
   112                                  ;(*) unfinished, draft, canceled (failed in 2019)
   113                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
   114                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
   115                                  
   116                                  ;Disassembly: (reverse engineering via IDA Pro Free)
   117                                  
   118                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
   119                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
   120                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
   121                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
   122                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
   123                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
   124                                  
   125                                  ;-----------------------------------------------------------------------------
   126                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
   127                                  ;-----------------------------------------------------------------------------
   128                                  
   129                                  SECTOR_SIZE     equ     0200h		; size of a sector
   130                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
   131                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
   132                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
   133                                  KEYBUF          equ     041Eh		; keyboard buffer data
   134                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
   135                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
   136                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
   137                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
   138                                  
   139                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
   140                                  ; The following structure defines the disk parameter table
   141                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   142                                  
   143                                  struc	DISK_PARMS
   144 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   145 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   146 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   147 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   148 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   149 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   150 00000006 ??                      .DISK_DTL:	  resb	1
   151 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   152 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   153 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   154 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   155                                  .size:
   156                                  endstruc
   157                                  
   158                                  ; 09/03/2019 - Retro DOS v4.0
   159                                  ; -------------------------------------------------------------------------
   160                                  ; MSEQU.INC, MSDOS 6.0, 1991
   161                                  
   162                                  ftoobig 	equ	80h
   163                                  fbig		equ	40h
   164                                  ; 12/09/2023
   165                                  fbigbig		equ	20h  ; Retro DOS 5.0 ; PCDOS 7.1 ; FAT32 FS flag
   166                                  romstatus	equ	1
   167                                  romread 	equ	2
   168                                  romwrite	equ	3
   169                                  romverify	equ	4
   170                                  romformat	equ	5
   171                                  
   172                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   173                                  ; -------------------------------------------------------------------------
   174                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   175                                  ;
   176                                  ;  BDS is the Bios Data Structure.
   177                                  ;
   178                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   179                                  ;  are linked together in a list with the pointer to the first BDS being
   180                                  ;  found in START_BDS. The BDS hold various values important to the disk
   181                                  ;  drive. For example there is a field for last time accesses. As actions
   182                                  ;  take place in the system the BDS are update to reflect the actions.
   183                                  ;  For example is there is a read to a disk the last access field for the
   184                                  ;  BDS for that drive is update to the current time.
   185                                  ;
   186                                  ; Values for various flags in BDS.flags.
   187                                  ;
   188                                  
   189                                  fnon_removable	    equ     01h 	;For non-removable media
   190                                  fchangeline	    equ     02h 	;If changeline supported on drive
   191                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   192                                  					; just return the fake one
   193                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   194                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   195                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   196                                  fchanged	    equ     40h 	;Indicates media changed
   197                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   198                                  fchanged_by_format  equ    100h		;Media changed by format
   199                                  ; MSDOS 6.0
   200                                  unformatted_media   equ    200h 	;Fixed disk only
   201                                  
   202                                  ;
   203                                  ; Various form factors to describe media
   204                                  ;
   205                                  
   206                                  ff48tpi 	    equ     0
   207                                  ff96tpi 	    equ     1
   208                                  ffSmall 	    equ     2
   209                                  ffHardFile	    equ     5
   210                                  ffOther 	    equ     7
   211                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   212                                  ff288		    equ     9	; 2.88 MB drive
   213                                  ; Retro DOS v4.0 feature only !
   214                                  ;ff144		    equ	   10	; 1.44 MB drive
   215                                  
   216                                  ; 12/09/2023
   217                                  ; Retro DOS v4 (MDOS 5.0-6.22) BDS structure
   218                                  ; -------------------------------------------------------------------------
   219                                  ; 100 bytes
   220                                   
   221                                  %if 0
   222                                  
   223                                  ; 26/05/2019
   224                                  
   225                                  struc	BDS	; BDS_Type
   226                                  .link:		resd 1		; Link to next BDS
   227                                  .drivenum:	resb 1		; Physical drive number
   228                                  .drivelet:	resb 1		; DOS drive number
   229                                  
   230                                  	;We want to embed a BPB declaration here, but we can't initialize
   231                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   232                                  	;of the BPB declaration.
   233                                  .BPB:	
   234                                  .bytespersec:	resw 1		; bytes per sectors ; def = 512
   235                                  .secperclus:	resb 1		; sectors per cluster
   236                                  .resectors:	resw 1		; reserved sectors
   237                                  .fats:		resb 1		; number of fats
   238                                  .direntries:	resw 1		; number of root directory entries
   239                                  .totalsecs16:	resw 1		; total sectors on medium
   240                                  .media:		resb 1		; media descriptor byte ; def = 0F8h
   241                                  .fatsecs: 	resw 1		; number of fat sectors
   242                                  .secpertrack:	resw 1		; sectors per track
   243                                  .heads:		resw 1		; number of heads
   244                                  ;.hiddensecs:	resw 1		; hidden sectors
   245                                  ; MSDOS 6.0
   246                                  .hiddensecs:	resd 1		; hidden sectors
   247                                  .totalsecs32:	resd 1		; big total sectors
   248                                  ;
   249                                  .fatsiz:	resb 1		; flags...
   250                                  .opcnt:		resw 1		; open ref. count
   251                                  ;.volid:	resb 12		; volume ID of medium
   252                                  .formfactor:	resb 1		; form factor index
   253                                  .flags:		resw 1		; various flags ; def: 0020h
   254                                  .cylinders:	resw 1		; number of cylinders
   255                                  ;
   256                                  .R_BPB:  			; recommended BPB
   257                                  .rbytespersec:	resw 1
   258                                  .rsecperclus:	resb 1
   259                                  .rresectors: 	resw 1
   260                                  .rfats:		resb 1
   261                                  .rdirentries:	resw 1
   262                                  .rtotalsecs16:	resw 1
   263                                  .rmedia: 	resb 1
   264                                  .rfatsecs:	resw 1
   265                                  .rsecpertrack: 	resw 1
   266                                  .rheads:	resw 1
   267                                  .rhidsecs: 	resd 1
   268                                  .rtotalsecs32: 	resd 1
   269                                  .rreserved:	resb 6		; not used (reserved)
   270                                  ;
   271                                  .track:		resb 1		; last track accessed on drive
   272                                  .bdsm_ismini:
   273                                  .tim_lo:	resw 1		; time of last access. keep
   274                                  .bdsm_hidden_trks:
   275                                  .tim_hi:	resw 1		; these contiguous.
   276                                  .volid:		resb 12		; volume id of medium
   277                                  	       ;db "NO NAME    ",0
   278                                  .vol_serial:	resd 1	; current volume serial number from boot record
   279                                  .filesys_id:	resb 9	; current file system id from boot record
   280                                  	       ;db "FAT12   ",0
   281                                  .size:	
   282                                  endstruc
   283                                  
   284                                  %endif
   285                                  
   286                                  ; 12/09/2023 - Retro DOS 5.0 - PCDOS 7.1 (FAT32 compatible) BDS structure
   287                                  ; -------------------------------------------------------------------------
   288                                  ; 150 bytes
   289                                  
   290                                  %if 1
   291                                  
   292                                  struc	BDS	; BDS_Type
   293 00000000 ????????                .link:		resd 1		; Link to next BDS
   294 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   295 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   296                                  
   297                                  	;We want to embed a BPB declaration here, but we can't initialize
   298                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   299                                  	;of the BPB declaration.
   300                                  .BPB:	
   301 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   302 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   303 00000009 ????                    .resectors:	resw 1		; reserved sectors
   304 0000000B ??                      .fats:		resb 1		; number of fats
   305 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   306 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   307 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   308 00000011 ????                    .fatsecs16: 	resw 1		; number of fat sectors
   309 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   310 00000015 ????                    .heads:		resw 1		; number of heads
   311 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors
   312 0000001B ????????                .totalsecs32:	resd 1		; big total sectors
   313                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0 -----------
   314 0000001F ????????                .fatsecs32:	resd 1		; BPB_FATSz32   ; FAT32 FAT size in sectors
   315 00000023 ????                    .extflags:	resw 1		; BPB_ExtFlags  ; FAT32 Extended Flags
   316 00000025 ????                    .fsver:		resw 1		; BPB_FSVer	; FAT32 volume version number
   317 00000027 ????????                .rootdirclust:	resd 1		; BPB_RootClus  ; FAT32 root dir's 1st clust num
   318 0000002B ????                    .fsinfo:	resw 1		; BPB_FSInfo	; FAT32 FSINFO sector number
   319 0000002D ????                    .bkbootsec:	resw 1		; BPB_BkBootSec ; FAT32 backup boot sector number
   320 0000002F <res Ch>                .reserved:	resb 12		; BPB_Reserved	; FAT32 reserved field = 0, 12 bytes
   321                                  ; -----------------------------------------------
   322 0000003B ??                      .fatsiz:	resb 1		; flags...
   323 0000003C ????                    .opcnt:		resw 1		; open ref. count
   324 0000003E ??                      .formfactor:	resb 1		; form factor index
   325 0000003F ????                    .flags:		resw 1		; various flags ; def: 0020h
   326 00000041 ????                    .cylinders:	resw 1		; number of cylinders
   327                                  ;
   328                                  .R_BPB:  			; recommended BPB
   329 00000043 ????                    .rbytespersec:	resw 1		
   330 00000045 ??                      .rsecperclus:	resb 1
   331 00000046 ????                    .rresectors: 	resw 1
   332 00000048 ??                      .rfats:		resb 1
   333 00000049 ????                    .rdirentries:	resw 1
   334 0000004B ????                    .rtotalsecs16:	resw 1
   335 0000004D ??                      .rmedia: 	resb 1
   336 0000004E ????                    .rfatsecs:	resw 1
   337 00000050 ????                    .rsecpertrack: 	resw 1
   338 00000052 ????                    .rheads:	resw 1
   339 00000054 ????????                .rhidsecs: 	resd 1
   340 00000058 ????????                .rtotalsecs32: 	resd 1
   341                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0
   342 0000005C ????????                .rfatsecs32:	resd 1		; 
   343 00000060 ????                    .rextflags:	resw 1		; 
   344 00000062 ????                    .rfsver:	resw 1		; 
   345 00000064 ????????                .rrootdirclust:	resd 1		; 
   346 00000068 ????                    .rfsinfo:	resw 1		; default/initial value = -1
   347 0000006A ????                    .rbkbootsec:	resw 1		; default/initial value = -1
   348 0000006C <res Ch>                .rreserved:	resb 12		; default value = 0
   349                                  ; -----------------------------------------------
   350                                  ;
   351 00000078 ??                      .track:		resb 1		; last track accessed on drive (def=-1)
   352                                  .bdsm_ismini:
   353 00000079 ????                    .tim_lo:	resw 1		; time of last access. keep
   354                                  .bdsm_hidden_trks:
   355 0000007B ????                    .tim_hi:	resw 1		; these contiguous.
   356 0000007D <res Ch>                .volid:		resb 12		; volume id of medium
   357                                  	       ;db "NO NAME    ",0
   358 00000089 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   359 0000008D <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   360                                  	       ;db "FAT12   ",0
   361                                  .size:
   362                                  endstruc
   363                                  
   364                                  %endif
   365                                  ; -------------------------------------------------------------------------
   366                                  
   367                                  ;The assembler will generate bad data for "size bds_volid",
   368                                  ;so we'll define an equate here.
   369                                  
   370                                  VOLID_SIZ	equ	12
   371                                  
   372                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   373                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   374                                  
   375                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   376                                  
   377                                  ; 29/12/2018
   378                                  ; Retro DOS v4.0
   379                                  ;
   380                                  ; MSDOS 6.0 - BOOTFORM.INC
   381                                  
   382                                  BOOT_SIZE	    EQU	 512
   383                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   384                                  
   385                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   386                                  
   387                                  struc EBPB ; EXT_BPB_INFO
   388 00000000 ????                    .BYTESPERSECTOR:    resw 1
   389 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   390 00000003 ????                    .RESERVEDSECTORS:   resw 1
   391 00000005 ??                      .NUMBEROFFATS:	    resb 1
   392 00000006 ????                    .ROOTENTRIES:	    resw 1
   393 00000008 ????                    .TOTALSECTORS:	    resw 1
   394 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   395 0000000B ????                    .SECTORSPERFAT:	    resw 1
   396 0000000D ????                    .SECTORSPERTRACK:   resw 1
   397 0000000F ????                    .HEADS:		    resw 1
   398 00000011 ????????                .HIDDENSECTORS:	    resd 1
   399 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   400                                  .size:
   401                                  endstruc
   402                                  
   403                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   404                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   405 00000000 ??????                  .JUMP:		resb 3
   406 00000003 ????????????????        .OEM:		resb 8
   407 0000000B <res 19h>               .BPB:		resb EBPB.size ; 25 bytes
   408 00000024 ??                      .PHYDRV:	resb 1
   409 00000025 ??                      .CURHD:		resb 1
   410 00000026 ??                      .SIG:		resb 1
   411 00000027 ????????                .SERIAL:	resd 1
   412 0000002B <res Bh>                .VOL_LABEL:	resb 11
   413 00000036 ????????????????        .SYSTEM_ID:	resb 8
   414                                  .size:
   415                                  endstruc
   416                                  
   417                                  ; 12/09/2023
   418                                  ; ----------------------------
   419                                  ; Retro DOS v5.0 (PCDOS 7.1) - FAT32 Boot Sector Parameters
   420                                  
   421                                  struc XBPB ; FAT32_BPB_INFO ; 12/09/2023
   422 00000000 ????                    .BYTESPERSECTOR:    resw 1
   423 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   424 00000003 ????                    .RESERVEDSECTORS:   resw 1
   425 00000005 ??                      .NUMBEROFFATS:	    resb 1
   426 00000006 ????                    .ROOTENTRIES:	    resw 1
   427 00000008 ????                    .TOTALSECTORS:	    resw 1
   428 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   429 0000000B ????                    .SECTORSPERFAT:	    resw 1
   430 0000000D ????                    .SECTORSPERTRACK:   resw 1
   431 0000000F ????                    .HEADS:		    resw 1
   432 00000011 ????????                .HIDDENSECTORS:	    resd 1
   433 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   434                                  ;............ FAT32 ......  + 28
   435 00000019 ????????                .FATSIZE32:	    resd 1
   436 0000001D ????                    .EXTFLAGS:	    resw 1
   437 0000001F ????                    .FSVER:		    resw 1
   438 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   439 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   440 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   441 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   442                                  .size:
   443                                  endstruc
   444                                  
   445                                  struc FAT32_EXT_BOOT ; FAT32_IBMBOOT_HEADER ; 12/09/2023
   446 00000000 ??????                  .JUMP:		resb 3
   447 00000003 ????????????????        .OEM:		resb 8
   448 0000000B <res 35h>               .BPB:		resb XBPB.size ; 53 bytes (25+28)
   449 00000040 ??                      .PHYDRV:	resb 1
   450 00000041 ??                      .CURHD:		resb 1
   451 00000042 ??                      .SIG:		resb 1
   452 00000043 ????????                .SERIAL:	resd 1
   453 00000047 <res Bh>                .VOL_LABEL:	resb 11
   454 00000052 ????????????????        .SYSTEM_ID:	resb 8
   455                                  .size:
   456                                  endstruc
   457                                  
   458                                  ; ----------------------------
   459                                  
   460                                  ; 23/03/2018
   461                                  
   462                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   463                                  STRUC SRHEAD
   464 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   465 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   466 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   467 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   468 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   469                                  .size:
   470                                  endstruc
   471                                  
   472                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   473                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   474                                  ;
   475                                  struc IOCTL_REQ
   476 00000000 <res Dh>                		resb SRHEAD.size	
   477                                  			    	;GENERIC IOCTL ADDITION.
   478 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   479 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   480 0000000F ????                    .REG_SI:	resw 1
   481 00000011 ????                    .REG_DI:	resw 1
   482 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   483                                  endstruc
   484                                  
   485                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   486                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   487                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   488                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   489                                  IOC_SC		EQU	3	; SCREEN CONTROL
   490                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   491                                  IOC_PC		EQU	5	; PRINTER CONTROL
   492                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   493                                  
   494                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   495                                  GEN_IOCTL_WRT_TRK   EQU   40H
   496                                  GEN_IOCTL_RD_TRK    EQU   60H
   497                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   498                                  
   499                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   500                                  ;.RC_COUNT:	resw 	1
   501                                  ;endstruc
   502                                  
   503                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   504                                  
   505                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   506                                  
   507                                  ;struc SYSDEV
   508                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   509                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   510                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   511                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   512                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   513                                  ; .size:
   514                                  ;endstruc
   515                                  
   516                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   517                                  
   518                                  ;
   519                                  ; ATTRIBUTE BIT MASKS
   520                                  ;
   521                                  ; CHARACTER DEVICES:
   522                                  ;
   523                                  ; BIT 15 -> MUST BE 1
   524                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   525                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   526                                  ;     12 -> UNUSED
   527                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   528                                  ;     10 -> MUST BE 0
   529                                  ;      9 -> MUST BE 0
   530                                  ;      8 -> UNUSED
   531                                  ;      7 -> UNUSED
   532                                  ;      6 -> UNUSED
   533                                  ;      5 -> UNUSED
   534                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   535                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   536                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   537                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   538                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   539                                  ;
   540                                  ; BLOCK DEVICES:
   541                                  ;
   542                                  ; BIT 15 -> MUST BE 0
   543                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   544                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   545                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   546                                  ;	    THE SAME PLACE.
   547                                  ;     12 -> UNUSED
   548                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   549                                  ;     10 -> MUST BE 0
   550                                  ;      9 -> MUST BE 0
   551                                  ;      8 -> UNUSED
   552                                  ;      7 -> UNUSED
   553                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   554                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   555                                  ;      5 -> UNUSED
   556                                  ;      4 -> UNUSED
   557                                  ;      3 -> UNUSED
   558                                  ;      2 -> UNUSED
   559                                  ;      1 -> UNUSED
   560                                  ;      0 -> UNUSED
   561                                  ;
   562                                  
   563                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   564                                  CHARDEV        EQU   8000H
   565                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   566                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   567                                  				    ;  COMP MEDIA.
   568                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   569                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   570                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   571                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   572                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   573                                  				    ;  ENTRY POINTS, 0 IF NOT
   574                                  
   575                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   576                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   577                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   578                                  				    ;  ITS CURRENT FORM.
   579                                  
   580                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   581                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   582                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   583                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   584                                  
   585                                  ; 18/03/2019 - Retro DOS v4.0
   586                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   587                                  
   588                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   589                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   590                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   591                                  				    ;GENERIC IOCTL CALLS.
   592                                  				    ;FOR CHARACTER DEVICES, THIS
   593                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   594                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   595                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   596                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   597                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   598                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   599                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   600                                  ; 23/07/2019 - Retro DOS v4.0
   601                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   602                                  
   603                                  ; 27/05/2018 - Retro DOS v3.0 
   604                                  ; [MSDOS 3.3, MSDISK.ASM]
   605                                  
   606                                  struc INT13FRAME
   607 00000000 ????                    .oldbp:	resw 1
   608 00000002 ????                    .oldax:	resw 1
   609 00000004 ????                    .oldbx:	resw 1
   610 00000006 ????                    .oldcx:	resw 1
   611 00000008 ????                    .olddx:	resw 1
   612 0000000A ????????                .olddd:	resd 1
   613 0000000E ????                    .oldf:	resw 1
   614                                  .size:
   615                                  endstruc
   616                                  
   617                                  ; 02/06/2018 - Retro DOS v3.0
   618                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   619                                  
   620                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   621 00000000 ????                    .bios_sd_leng:		resw 1				  
   622 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   623                                  .bios_sd_scnd_modelbyte: 
   624 00000003 ??                      			resb 1					  
   625 00000004 ??                      			resb 1					  
   626 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   627 00000006 ????????                			resb 4					  
   628                                  endstruc
   629                                  
   630                                  ;-----------------------------------------------------------------------------
   631                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   632                                  ;-----------------------------------------------------------------------------
   633                                  ; 11/03/2019 - Retro DOS v4.0
   634                                  
   635                                  ; 18/03/2019
   636                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   637                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   638                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   639                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   640                                  					  ; or system turns
   641                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   642                                  ; ............................................................................
   643                                  
   644                                  ;*** J.K.
   645                                  ;General Guide -
   646                                  ;Category Code:
   647                                  ; 0... .... DOS Defined
   648                                  ; 1... .... User defined
   649                                  ; .xxx xxxx Code
   650                                  
   651                                  ;Function Code:
   652                                  ; 0... .... Return error if unsupported
   653                                  ; 1... .... Ignore if unsupported
   654                                  ; .0.. .... Intercepted by DOS
   655                                  ; .1.. .... Passed to driver
   656                                  ; ..0. .... Sends data/commands to device
   657                                  ; ..1. .... Quries data/info from device
   658                                  ; ...x .... Subfunction
   659                                  ;
   660                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   661                                  ; function set.  It plays no critical role; some functions may contain both
   662                                  ; command and query elements. The convention is that such commands are
   663                                  ; defined as "sends data".
   664                                  
   665                                  ;*****************************;*
   666                                  ; BLOCK DRIVERS 	      ;*
   667                                  ;*****************************;*
   668                                  
   669                                  ; IOCTL SUB-FUNCTIONS
   670                                  IOCTL_GET_DEVICE_INFO	EQU	0
   671                                  IOCTL_SET_DEVICE_INFO	EQU	1
   672                                  IOCTL_READ_HANDLE	EQU	2
   673                                  IOCTL_WRITE_HANDLE	EQU	3
   674                                  IOCTL_READ_DRIVE	EQU	4
   675                                  IOCTL_WRITE_DRIVE	EQU	5
   676                                  IOCTL_GET_INPUT_STATUS	EQU	6
   677                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   678                                  IOCTL_CHANGEABLE?	EQU	8
   679                                  IOCTL_DeviceLocOrRem?	EQU	9
   680                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   681                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   682                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   683                                  GENERIC_IOCTL		EQU	0Dh   ;13
   684                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   685                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   686                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   687                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   688                                  
   689                                  ; GENERIC IOCTL SUB-FUNCTIONS
   690                                  RAWIO			EQU	8
   691                                  
   692                                  ; RAWIO SUB-FUNCTIONS
   693                                  GET_DEVICE_PARAMETERS	EQU	60H
   694                                  SET_DEVICE_PARAMETERS	EQU	40H
   695                                  READ_TRACK		EQU	61H
   696                                  WRITE_TRACK		EQU	41H
   697                                  VERIFY_TRACK		EQU	62H
   698                                  FORMAT_TRACK		EQU	42H
   699                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   700                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   701                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   702                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   703                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   704                                  
   705                                  
   706                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   707                                  BUILD_DEVICE_BPB	EQU	000000001B
   708                                  
   709                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   710                                  INSTALL_FAKE_BPB	EQU	000000001B
   711                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   712                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   713                                  
   714                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   715                                  STATUS_FOR_FORMAT	EQU	000000001B
   716                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   717                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   718                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   719                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   720                                  
   721                                  ; DEVICETYPE VALUES
   722                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   723                                  DEV_5INCH		EQU	0
   724                                  DEV_5INCH96TPI		EQU	1
   725                                  DEV_3INCH720KB		EQU	2
   726                                  DEV_8INCHSS		EQU	3
   727                                  DEV_8INCHDS		EQU	4
   728                                  DEV_HARDDISK		EQU	5
   729                                  DEV_OTHER		EQU	7
   730                                  ;DEV_3INCH1440KB	EQU	7
   731                                  DEV_3INCH2880KB		EQU	9
   732                                  ; Retro DOS v2.0 - 26/03/2018
   733                                  ;;DEV_TAPE		EQU	6
   734                                  ;;DEV_ERIMO		EQU	8
   735                                  ;DEV_3INCH2880KB	EQU	9
   736                                  DEV_3INCH1440KB		EQU	10
   737                                  
   738                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   739                                  					; CURRENTLY SUPPORT.
   740                                  MAX_DEV_TYPE		EQU	10
   741                                  
   742                                  struc A_SECTORTABLE
   743 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   744 00000002 ????                    .ST_SECTORSIZE:		resw	1
   745                                  .size:
   746                                  endstruc
   747                                  
   748                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
   749                                  
   750                                  ; MSDOS 6.0 - BPB.INC - 1991
   751                                  ; ####
   752                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   753                                  ;
   754                                  ;	The BPB contains information about the disk structure.  It dates
   755                                  ;	back to the earliest FAT systems and so FAT information is
   756                                  ;	intermingled with physical driver information.
   757                                  ;
   758                                  ;	A boot sector contains a BPB for its device; for other disks
   759                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   760                                  ;	information in the DPB.
   761                                  ;
   762                                  ;	The BDS structure contains a BPB within it.
   763                                  
   764                                  ; 01/01/2024
   765                                  %if 0
   766                                  
   767                                  struc A_BPB
   768                                  .BPB_BYTESPERSECTOR:	resw	1
   769                                  .BPB_SECTORSPERCLUSTER:	resb	1
   770                                  .BPB_RESERVEDSECTORS:	resw	1
   771                                  .BPB_NUMBEROFFATS:	resb	1
   772                                  .BPB_ROOTENTRIES: 	resw	1
   773                                  .BPB_TOTALSECTORS:	resw	1
   774                                  .BPB_MEDIADESCRIPTOR:	resb	1
   775                                  .BPB_SECTORSPERFAT:	resw	1
   776                                  .BPB_SECTORSPERTRACK:	resw	1
   777                                  .BPB_HEADS:		resw	1
   778                                  .BPB_HIDDENSECTORS:	resw	1
   779                                  			resw	1
   780                                  .BPB_BIGTOTALSECTORS:	resw	1
   781                                  			resw	1
   782                                  			resb	6	; NOTE:  many times these
   783                                  ;					; 	 6 bytes are omitted
   784                                  ;					;	 when BPB manipulations
   785                                  ;					;	 are performed!
   786                                  .size:
   787                                  endstruc
   788                                  
   789                                  %else
   790                                  
   791                                  ; 14/04/2024
   792                                  ; 01/01/2024 - Retro DOS v5.0
   793                                  
   794                                  struc A_BPB
   795 00000000 ????                    .BYTESPERSECTOR:    resw 1
   796 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   797 00000003 ????                    .RESERVEDSECTORS:   resw 1
   798 00000005 ??                      .NUMBEROFFATS:	    resb 1
   799 00000006 ????                    .ROOTENTRIES:	    resw 1
   800 00000008 ????                    .TOTALSECTORS:	    resw 1
   801 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   802 0000000B ????                    .SECTORSPERFAT:	    resw 1
   803 0000000D ????                    .SECTORSPERTRACK:   resw 1
   804 0000000F ????                    .HEADS:		    resw 1
   805 00000011 ????????                .HIDDENSECTORS:	    resd 1
   806 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   807                                  ;............ FAT32 ......  + 28
   808 00000019 ????????                .FATSIZE32:	    resd 1
   809 0000001D ????                    .EXTFLAGS:	    resw 1
   810 0000001F ????                    .FSVER:		    resw 1
   811 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   812 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   813 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   814 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   815                                  		; 14/04/2024
   816 00000035 ????????????            		    resb 6  ; A_BPB.size must be 59
   817                                  .size:
   818                                  endstruc
   819                                  
   820                                  %endif
   821                                  
   822                                  struc A_DEVICEPARAMETERS
   823 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   824 00000001 ??                      .DP_DEVICETYPE:		resb	1
   825 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   826 00000004 ????                    .DP_CYLINDERS:		resw	1
   827 00000006 ??                      .DP_MEDIATYPE:		resb	1
   828 00000007 <res 3Bh>               .DP_BPB:		resb	A_BPB.size
   829 00000042 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   830 00000044 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   831                                  endstruc
   832                                  
   833                                  struc A_TRACKREADWRITEPACKET
   834 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   835 00000001 ????                    .TRWP_HEAD:		resw	1
   836 00000003 ????                    .TRWP_CYLINDER:		resw	1
   837 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   838 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   839 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   840                                  endstruc
   841                                  
   842                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   843                                  struc A_FORMATPACKET
   844 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   845 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   846 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   847 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   848                                  endstruc
   849                                  
   850                                  struc A_VERIFYPACKET
   851 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   852 00000001 ????                    .VP_HEAD: 		resw	1
   853 00000003 ????                    .VP_CYLINDER:		resw	1
   854                                  endstruc
   855                                  
   856                                  struc A_MEDIA_ID_INFO
   857 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   858 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   859 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   860 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   861                                  endstruc
   862                                  
   863                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   864 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   865 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   866                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   867                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   868                                  
   869                                  
   870                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   871 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   872 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   873 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   874 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   875                                  endstruc
   876                                  
   877                                  ;********************************;*
   878                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   879                                  ;********************************;*
   880                                  
   881                                  ;RAWIO SUB-FUNCTIONS
   882                                  GET_RETRY_COUNT 	EQU	65H
   883                                  SET_RETRY_COUNT 	EQU	45H
   884                                  
   885                                  struc A_RETRYCOUNT
   886 00000000 ????                    .RC_COUNT:		resw 1
   887                                  endstruc
   888                                  
   889                                  ;********************************;*		;J.K. 4/29/86
   890                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   891                                  ;********************************;*		;J.K. 4/29/86
   892                                  ;
   893                                  ;SC_MODE_INFO	 struc
   894                                  ;SC_INFO_LENGTH 	 DW	 9
   895                                  ;SC_MODE		 DB	 0
   896                                  ;SC_COLORS		 DW	 0
   897                                  ;SC_WIDTH		 DW	 0
   898                                  ;SC_LENGTH		 DW	 0
   899                                  ;SC_MODE_INFO	 ends
   900                                  ;
   901                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   902                                  
   903                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   904                                  ;GET_SC_MODE		 EQU	 60h
   905                                  ;SET_SC_MODE		 EQU	 40h
   906                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   907                                  ;console devices. - J.K. 4/29/86
   908                                  ;Get_active_codepage	 equ	 6Ah
   909                                  ;Invoke_active_codepage  equ	 4Ah
   910                                  ;Start_designate_codepage equ	 4Ch
   911                                  ;End_designate_codepage  equ	 4Dh
   912                                  ;Get_list_of_designated_codepage equ 6Bh
   913                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   914                                  
   915                                  ;-----------------------------------------------------------------------------
   916                                  ; MULT.INC - MSDOS 6.0 - 1991
   917                                  ;-----------------------------------------------------------------------------
   918                                  ; 18/03/2019
   919                                  
   920                                  ; The current set of defined multiplex channels is (* means documented):
   921                                  ;
   922                                  ;   Channel(h)  Issuer          Receiver    Function
   923                                  ;      00       server          PSPRINT     print job control
   924                                  ;     *01       print/apps      PRINT       Queueing of files
   925                                  ;      02       BIOS            REDIR       signal open/close of printers
   926                                  ;
   927                                  ;      05       command         REDIR       obtain text of net int 24 message
   928                                  ;     *06       server/assign   ASSIGN      Install check
   929                                  ;
   930                                  ;      08       external driver IBMBIO      interface to internal routines
   931                                  ;
   932                                  ;      10       sharer/server   Sharer      install check
   933                                  ;      11       DOS/server      Redir       install check/redirection funcs
   934                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   935                                  ;      13       MSNET           MSNET       movement of NCBs
   936                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   937                                  ;                                           of alternative INT_13 drivers after
   938                                  ;                                           boot_up
   939                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   940                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   941                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   942                                  ;      16       WIN386          WIN386      Windows communications
   943                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   944                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   945                                  ;      19       Shell
   946                                  ;      1A       Ansi.sys
   947                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   948                                  ;
   949                                  ;      40h      OS/2
   950                                  ;      41h      Lanman
   951                                  ;      42h      Lanman
   952                                  ;      43h      Himem
   953                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   954                                  ;                               AL = 30h    reserved for Himem external A20 code
   955                                  ;      44h      Dosextender
   956                                  ;      45H      Windows profiler
   957                                  ;      46h      Windows/286 DOS extender
   958                                  ;      47h      Basic Compiler Vn. 7.0
   959                                  ;      48h      Doskey
   960                                  ;      49h      DOS 5.x install 
   961                                  ;      4Ah      Multi Purpose
   962                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   963                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   964                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   965                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   966                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   967                                  ;
   968                                  ;                multSmartdrv           10h
   969                                  ;                multMagicdrv           11h
   970                                  ;      4Bh      Task Switcher API
   971                                  ;
   972                                  ;      4Ch      APPS            APM             Advanced power management
   973                                  ;      4Dh      Kana Kanji Converter, MSKK
   974                                  ;
   975                                  ;      51h      ODI real mode support driver (for Chicago)
   976                                  ;
   977                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   978                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   979                                  ;
   980                                  ;      55h      COMMAND.COM
   981                                  ;                multCOMFIRST           0 - API to determine whether 1st
   982                                  ;                                           instance of command.com
   983                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   984                                  ;                                           instance of ROM COMMAND
   985                                  ;      56h      Sewell Development
   986                                  ;               INTERLNK
   987                                  ;
   988                                  ;      57h      Iomega Corp.
   989                                  ;
   990                                  ;      AB       Unspecified IBM use
   991                                  ;      AC       Graphics
   992                                  ;      AD       NLS (toronto)
   993                                  ;      AE
   994                                  ;      AF       Mode
   995                                  ;      B0       GRAFTABL        GRAFTABL
   996                                  ;
   997                                  ;      D7       Banyan VINES
   998                                  
   999                                  multMULT	  equ	4Ah
  1000                                  
  1001                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
  1002                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
  1003                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
  1004                                  multMULTTASKSHELL equ	5	; Shell/switcher API
  1005                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
  1006                                  
  1007                                  ;-----------------------------------------------------------------------------
  1008                                  ; WIN386.INC - MSDOS 6.0 - 1991
  1009                                  ;-----------------------------------------------------------------------------
  1010                                  ; 18/03/2019
  1011                                  
  1012                                  ; WIN386.INC
  1013                                  ;
  1014                                  ;  Symbols and structures relating to WIN386 support.
  1015                                  ;
  1016                                  ;  Used by files in both the DOS and the BIOS.
  1017                                  ;
  1018                                  ;  Created: 7-13-89 by MRW
  1019                                  ;
  1020                                  
  1021                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  1022                                  
  1023                                  MultWin386		equ     16h	; Int 2f multiplex number
  1024                                  
  1025                                  Win386_Init		equ	05h	; Win386 initialization
  1026                                  Win386_Exit		equ	06h	; Win386 exit
  1027                                  Win386_Devcall		equ	07h	; Win386 device call out
  1028                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  1029                                  
  1030                                  ; ============================================================================
  1031                                  
  1032                                  ;-----------------------------------------------------------------------------
  1033                                  ;
  1034                                  ; +-------------------------------------------------------------------------+
  1035                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
  1036                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
  1037                                  ; |			 Licensed to: Freeware version			    |
  1038                                  ; +-------------------------------------------------------------------------+
  1039                                  ;
  1040                                  ;-----------------------------------------------------------------------------
  1041                                  
  1042                                  ;		.386
  1043                                  ;		.model flat
  1044                                  
  1045                                  ; ============================================================================
  1046                                  
  1047                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1048                                  ; 10/12/2022
  1049                                  ; 09/12/2022
  1050                                  ; 21/10/2022
  1051                                  ; 19/10/2022
  1052                                  ; 17/10/2022, 18/10/2022
  1053                                  ; 15/10/2022, 16/10/2022
  1054                                  ; 03/10/2022
  1055                                  ; 02/10/2022
  1056                                  ; 01/10/2022 - Erdogan Tan
  1057                                  
  1058                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
  1059                                  
  1060                                  ;-----------------------------------------------------------------------------
  1061                                  ; Start of PC-DOS 7.1 IBMBIO.COM  (IO.SYS)
  1062                                  ;-----------------------------------------------------------------------------
  1063                                  
  1064                                  		; [ORG 0]		; segment 0x0070h
  1065                                  
  1066                                  ;=============================================================================
  1067                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  1068                                  ;=============================================================================
  1069                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  1070                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  1071                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  1072                                  
  1073                                  section .BIOSDATA vstart=0
  1074                                  
  1075                                  ;--- DOSBIOS data segment ----------------------------------------------------
  1076                                  ;-----------------------------------------------------------------------------
  1077                                  
  1078                                  ;Bios_Data segment
  1079                                  
  1080                                  BData_start:
  1081 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  1082                                  ; ----------------------------------------------------------------------------
  1083                                  
  1084 00000003 0000                    DosDataSg:	dw 0
  1085                                  
  1086                                  ; DOS's int 2f handler will exit via a jump through here.
  1087                                  ; This is how the BIOS hooks int2f
  1088                                  
  1089                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  1090                                  			
  1091 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  1092                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1093                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  1094                                  		;dw int_2f
  1095                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  1096 00000006 [2B16]                  		dw i2f_handler
  1097                                  bios_i2f_seg:	; 10/08/2023
  1098 00000008 0203                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  1099                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  1100                                  
  1101 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  1102                                  					; This is to maintain binary compatibility
  1103                                  					; with DISK based DOS 5.0
  1104                                  
  1105                                  ; This is a byte used for special key handling in the resident
  1106                                  ; console device driver. It must be here so that it can be included
  1107                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  1108                                  
  1109 0000000C 00                      altah:		db 0			; special key handling
  1110                                  			
  1111 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  1112 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  1113                                  
  1114                                  ; PTRSAV - pointer save
  1115                                  ;
  1116                                  ; This variable holds the pointer to the Request Header passed by a program
  1117                                  ; wishing to use a device driver. When the strategy routine is called it 
  1118                                  ; puts the address of the Request header in this variable and returns.
  1119                                  		
  1120 00000012 00000000                ptrsav:		dd 0			
  1121                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  1122 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  1123 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  1124 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  1125 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  1126 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  1127 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  1128                                  
  1129                                  ;-----------------------------------------------------------------------------
  1130                                  
  1131                                  res_dev_list:
  1132                                  
  1133                                  ; Device Header for the CON Device Driver
  1134                                  
  1135                                  CONHeader:				; HEADER FOR DEVICE "CON"
  1136 00000023 [3500]                  		dw auxdev2
  1137 00000025 7000                    		dw 70h	
  1138 00000027 1380                    word_727:	dw 8013h
  1139 00000029 [1506]                  		dw strategy
  1140 0000002B [2006]                  		dw con_entry
  1141 0000002D 434F4E2020202020        aCon:		db 'CON     '
  1142 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  1143 00000037 7000                    		dw 70h
  1144 00000039 0080                    		dw 8000h
  1145 0000003B [1506]                  		dw strategy
  1146 0000003D [4106]                  		dw aux0_entry
  1147 0000003F 4155582020202020        aAux:		db 'AUX     '
  1148 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  1149 00000049 7000                    		dw 70h
  1150 0000004B C0A0                    word_74B:	dw 0A0C0h
  1151 0000004D [1506]                  		dw strategy
  1152 0000004F [2506]                  		dw prn0_entry
  1153 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  1154 00000059 [6B00]                  timdev:		dw dskdev
  1155 0000005B 7000                    		dw 70h
  1156 0000005D 0880                    		dw 8008h
  1157 0000005F [1506]                  		dw strategy
  1158 00000061 [5906]                  		dw tim_entry
  1159 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  1160 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  1161 0000006D 7000                    		dw 70h
  1162                                  		;dw 8C2h
  1163                                  		; 02/10/2023 - Retro DOS v5.0
  1164 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  1165                                  		;dw offset strategy
  1166                                  		;dw offset dsk_entry
  1167                                  		; 19/10/2022
  1168 00000071 [1506]                  		dw strategy
  1169 00000073 [5E06]                  		dw dsk_entry
  1170                                  
  1171                                  ; maximum number of drives
  1172                                  
  1173 00000075 04                      drvmax:		db 4
  1174 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  1175 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  1176                                  					; 96tpi support		
  1177 00000078 00                      single:		db 0			; used to detect single drive systems
  1178 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  1179                                  					; used by console driver.
  1180 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  1181                                  					; drive. (examined by checksingle).
  1182                                  		
  1183 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  1184 0000007D 7000                    		dw 70h
  1185 0000007F 0080                    		dw 8000h
  1186 00000081 [1506]                  		dw strategy
  1187 00000083 [4106]                  		dw aux0_entry
  1188 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  1189 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  1190 0000008F 7000                    		dw 70h
  1191 00000091 C0A0                    		dw 0A0C0h
  1192 00000093 [1506]                  		dw strategy
  1193 00000095 [2C06]                  		dw prn1_entry
  1194 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1195 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  1196 000000A1 7000                    		dw 70h
  1197 000000A3 C0A0                    		dw 0A0C0h
  1198 000000A5 [1506]                  		dw strategy
  1199 000000A7 [3306]                  		dw prn2_entry
  1200 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1200 000000B2 0000               
  1201                                  
  1202                                  ;M058; Start of changes
  1203                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1204                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1205                                  ;cannot change for them to work. Even ProComm does this.
  1206                                  
  1207 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  1208                                  
  1209 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1210 000000BA 7000                    		dw 70h
  1211 000000BC C0A0                    		dw 0A0C0h
  1212 000000BE [1506]                  		dw strategy
  1213 000000C0 [3A06]                  		dw prn3_entry
  1214 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1215 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1216 000000CC 7000                    		dw 70h
  1217 000000CE 0080                    		dw 8000h
  1218 000000D0 [1506]                  		dw strategy
  1219 000000D2 [4706]                  		dw aux1_entry
  1220                                  		; 19/10/2022
  1221 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1222                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1223 000000DC [EE00]                  		dw com4dev
  1224 000000DE 7000                    		dw 70h
  1225 000000E0 0080                    		dw 8000h
  1226                                  		;dw offset strategy
  1227                                  		;dw offset aux2_entry
  1228 000000E2 [1506]                  		dw strategy
  1229 000000E4 [4D06]                  		dw aux2_entry	
  1230 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1231 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  1232 000000F0 7000                    		dw 70h
  1233 000000F2 0080                    		dw 8000h
  1234 000000F4 [1506]                  		dw strategy
  1235 000000F6 [5306]                  		dw aux3_entry
  1236 000000F8 434F4D3420202020        		db 'COM4    '
  1237                                  
  1238                                  ;-----------------------------------------------------------------------------
  1239                                  
  1240 00000100 10                      RomVectors:	db 10h			
  1241 00000101 00000000                Old10:		dd 0
  1242 00000105 13                      		db 13h
  1243 00000106 00000000                Old13:		dd 0			
  1244 0000010A 15                      		db 15h
  1245 0000010B 00000000                Old15:		dd 0			
  1246 0000010F 19                      		db 19h
  1247 00000110 00000000                Old19:		dd 0
  1248 00000114 1B                      		db 1Bh
  1249 00000115 00000000                Old1B:		dd 0
  1250                                  
  1251                                  ;EndRomVectors	equ $
  1252                                  
  1253                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1254                                  
  1255                                  ;-----------------------------------------------------------------------------
  1256                                  
  1257 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1258 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1259                                  
  1260                                  ; (MSDOS 3.3) NOTE:
  1261                                  ; Some floppy drives do not have changeline support. The result is a
  1262                                  ; large amount of inefficiency in the code. A media-check always returns
  1263                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1264                                  ; always discard any cached data.
  1265                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1266                                  ; The following three items are used to do this. The logical door latch is
  1267                                  ; based on the premise that it is not physically possible to change floppy
  1268                                  ; disks in a drive in under two seconds (most people take about 10). The
  1269                                  ; logical door latch is implemented by saving the time of the last successful
  1270                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1271                                  ; current time is compared to the saved time. If less than two seconds have
  1272                                  ; passed then the value "No Change" is returned. If more than two seconds
  1273                                  ; have passed the value "Don't Know" is returned.
  1274                                  ;    There is one complecation to this algorithm. Some programs change the
  1275                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1276                                  ; This possibility is detected by counting the number of disk operations
  1277                                  ; which occur without any time passing. If this count exceeds the value of
  1278                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1279                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1280                                  ; of disk operation which occur without the time changing.
  1281                                  
  1282 0000011D 00                      accesscount:	db 0			
  1283 0000011E FF                      tim_drv:	db 0FFh			
  1284 0000011F 00                      medbyt:		db 0
  1285                                  wrtverify:	; 15/10/2022			
  1286 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1287 00000121 00                      verify:		db 0			; 1 if verify after write
  1288 00000122 0000                    seccnt:		dw 0			
  1289 00000124 00                      		db 0			; -- pad where hardnum was
  1290 00000125 01                      dsktnum:	db 1			; number of diskette drives
  1291                                  
  1292                                  ; (MSDOS 3.3) NOTE:
  1293                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1294                                  ; have to be made to read the diskette. Consequently a large head settle
  1295                                  ; time was always used in the I/O operations. To get around this problem
  1296                                  ; we need to continually adjust the head settle time. The following
  1297                                  ; algorithm is used:
  1298                                  ;
  1299                                  ;   Get the current head settle value.
  1300                                  ;   If it is 1, then
  1301                                  ;	set slow = 15
  1302                                  ;   else
  1303                                  ;	set slow = value
  1304                                  ;   ...
  1305                                  ;   if we are seeking and writing then
  1306                                  ;	use slow
  1307                                  ;   else
  1308                                  ;	use fast
  1309                                  ;   ...
  1310                                  ;   restore current head settle value
  1311                                  
  1312 00000126 00                      motorstartup:	db 0			; value from table
  1313 00000127 00                      settlecurrent:	db 0			; value from table
  1314 00000128 00                      settleslow:	db 0			; slow settle value
  1315 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1316 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1317 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1318 0000012C 09                      eot:		db 9			
  1319 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1320 00000131 00                      cursec:		db 0			; current sector
  1321 00000132 00                      curhd:		db 0			; current head
  1322 00000133 0000                    curtrk:		dw 0			; current track
  1323 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1324 00000137 08                      formt_eot:	db 8			; eot used for format
  1325 00000138 00                      hdnum:		db 0			; head number
  1326 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1327 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1328                                  
  1329                                  ;-----------------------------------------------------------------------------
  1330                                  
  1331                                  ; disk errors returned from the IBM rom
  1332                                  
  1333 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  1334 0000013D 80                      		db 80h			; write fault (hard disk)
  1335 0000013E 40                      		db 40h			; seek failed
  1336 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  1337 00000140 08                      		db 8			; dma overrun
  1338 00000141 06                      		db 6			; disk changed (floppy)
  1339 00000142 04                      		db 4			; sector not found/read error
  1340 00000143 03                      		db 3			; disk write-protected
  1341                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  1342 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  1343 00000145 B2                      		db 0B2h			; volume not removable	
  1344                                  		;
  1345 00000146 00                      lsterr:		db 0			; all other errors
  1346                                  
  1347                                  ; returned error codes corresponding to above
  1348                                  
  1349 00000147 0A                      errout:		db 10			; write	fault error
  1350 00000148 02                      		db 2			; no response (timeout)
  1351 00000149 06                      		db 6			; seek failure
  1352 0000014A 04                      		db 4			; bad crc
  1353 0000014B 04                      		db 4			; dma overrun
  1354 0000014C 0F                      		db 15			; invalid media	change
  1355 0000014D 08                      		db 8			; sector not found
  1356 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  1357                                  		; 02/10/2023
  1358 0000014F 03                      		db 3			; unknown command error
  1359 00000150 03                      		db 3			; unknown command error
  1360                                  		;
  1361 00000151 0C                      		db 12			; general error
  1362                                  
  1363                                  ;-----------------------------------------------------------------------------
  1364                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  1365                                  
  1366                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1367                                  %if 1
  1368                                  disksector:	;times 174 db 0
  1369                                  NUM174 equ 512-$
  1370 00000152 00<rep AEh>             		times NUM174 db 0
  1371                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  1372 00000200 4A                      		dec	dx
  1373 00000201 42                      		inc	dx	
  1374 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  1375                                  
  1376 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  1376 0000020E 30312E323030332E62-
  1376 00000217 75696C645F312E3332-
  1376 00000220 23402049424D42494F-
  1376 00000229 2E434F4D2855534129-
  1376 00000232 00                 
  1377                                  		
  1378                                  		;times 287 db 0
  1379 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  1380                                  %endif
  1381                                  
  1382                                  ;-----------------------------------------------------------------------------
  1383                                  
  1384                                  ; 30/12/2018 - Retro DOS v4.0
  1385                                  
  1386                                  ; read in boot sector here, read done in readboot.
  1387                                  ; also read sector for dma check for hard disk.
  1388                                  ;
  1389                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1390                                  ; in them which causes the byte after the buffer to be trashed
  1391                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1392                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1393                                  ; makes that system more-or-less work.
  1394                                  
  1395                                  ; 02/10/2023
  1396                                  %if 0
  1397                                  
  1398                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1399                                  		; 19/10/2022
  1400                                  		times 512 db 0
  1401                                  %endif
  1402                                  
  1403                                  ;-----------------------------------------------------------------------------
  1404                                  
  1405                                  ; 02/10/2023 - Retro DOS v5.0
  1406                                  ; 30/12/2018 - Retro DOS v4.0
  1407                                  ;-----------------------------------------------------------------------------
  1408                                  ; 25/05/2018 (04/04/2018)
  1409                                  ;*****************************************************************************
  1410                                  ;	"bds" contains information for each drive in the system.
  1411                                  ;	various values are patched whenever actions are performed.
  1412                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1413                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1414                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1415                                  ;	that the parameters have not been set.
  1416                                  
  1417                                  bds1:		;dw offset bds2
  1418 00000352 [E803]                  		dw bds2	; 19/10/2022
  1419 00000354 7000                    		dw 70h			; dword	link to	next structure
  1420 00000356 00                      		db 0			; int 13h drive	number
  1421 00000357 00                      		db 0			; logical drive	letter
  1422 00000358 0002                    fdrive1:	dw 512			
  1423                                  					; physical sector size in bytes
  1424 0000035A FF                      		db 0FFh			; sectors/allocation unit
  1425 0000035B 0100                    		dw 1			; reserved sectors for dos
  1426 0000035D 02                      		db 2			; no of	file allocation	tables
  1427 0000035E 4000                    		dw 64			; number of root directory entries
  1428 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  1429 00000362 00                      		db 0			; media	descriptor, initially 0
  1430 00000363 0200                    		dw 2			; number of fat	sectors
  1431 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  1432 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  1433                                  		;
  1434                                  		; 02/10/2023
  1435                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  1436                                  		;dw 0			; hidden sector	count (low word)
  1437                                  		;dw 0			; hidden sector	(high)
  1438                                  		;dw 0			; number sectors (low)
  1439                                  		;dw 0			; number sectors (high)
  1440                                  		;db 0			; true => large	fats
  1441                                  		; 02/10/2023
  1442                                  		; PCDOS 7.1 (FAT32 support)
  1443 00000369 00000000                		dd 0			; hidden sector count
  1444 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  1445 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  1446                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  1447                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  1448                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  1449                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  1450 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  1451 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  1452 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  1453 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  1454 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  1455 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  1456 0000038D 00                      		db 0			; true => large	fats
  1457                                  		;
  1458 0000038E 0000                    		dw 0			; open ref. count
  1459 00000390 03                      		db 3			; form factor
  1460 00000391 2000                    		dw 20h			; various flags
  1461 00000393 2800                    		dw 40			; number of cylinders
  1462 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1463 00000397 01                      		db 1
  1464 00000398 0100                    		dw 1
  1465 0000039A 02                      		db 2
  1466 0000039B E000                    		dw 224			; number of root directory entries
  1467 0000039D 6801                    		dw 360
  1468 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1469 000003A0 0200                    		dw 2
  1470 000003A2 0900                    		dw 9
  1471 000003A4 0200                    		dw 2
  1472                                  		;
  1473                                  		; 02/10/2023
  1474                                  		;dw 0
  1475                                  		;dw 0
  1476                                  		;dw 0
  1477                                  		;dw 0
  1478                                  		;;db 6 dup(0)
  1479                                  		;times 6 db 0		; 19/10/2022
  1480 000003A6 00000000                		dd 0
  1481 000003AA 00000000                		dd 0
  1482 000003AE 00000000                		dd 0
  1483 000003B2 0000                    		dw 0
  1484 000003B4 0000                    		dw 0
  1485 000003B6 00000000                		dd 0
  1486 000003BA FFFF                    		dw 0FFFFh
  1487 000003BC FFFF                    		dw 0FFFFh	
  1488                                  		;db 12 dup(0)
  1489 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  1490                                  		;
  1491 000003CA FF                      		db 0FFh			; last track accessed on this drive
  1492 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1493 000003CD FFFF                    		dw 0FFFFh
  1494 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1494 000003D8 202000             
  1495 000003DB 00000000                		dd 0			; current volume serial	from boot record
  1496 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1497                                  ; ----
  1498                                  
  1499                                  ; 02/10/2023
  1500                                  ; PCDOS 7.1
  1501                                  %if 1
  1502                                  
  1503                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1504 000003E8 FFFF                    		dw 0FFFFh ; -1
  1505 000003EA 7000                    		dw 70h
  1506 000003EC 00                      		db 0
  1507 000003ED 00                      		db 0
  1508 000003EE 0002                    fdrive2:	dw 512
  1509 000003F0 FF                      		db 0FFh
  1510 000003F1 0100                    		dw 1
  1511 000003F3 02                      		db 2
  1512 000003F4 4000                    		dw 64
  1513 000003F6 6801                    		dw 360
  1514 000003F8 00                      		db 0
  1515 000003F9 0200                    		dw 2
  1516 000003FB 0900                    		dw 9
  1517 000003FD 0100                    		dw 1
  1518 000003FF 00000000<rep 5h>        		times 5 dd 0
  1519 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  1520 00000417 00000000<rep 3h>        		times 3 dd 0
  1521 00000423 00                      		db 0
  1522 00000424 0000                    		dw 0
  1523 00000426 03                      		db 3
  1524 00000427 2000                    		dw 20h
  1525 00000429 2800                    		dw 40
  1526                                  recbpb2:
  1527 0000042B 0002                    		dw 512
  1528 0000042D 01                                      db 1
  1529 0000042E 0100                                    dw 1
  1530 00000430 02                                      db 2
  1531 00000431 E000                                    dw 224
  1532 00000433 6801                                    dw 360
  1533 00000435 F0                                      db 0F0h
  1534 00000436 0200                                    dw 2
  1535 00000438 0900                                    dw 9
  1536 0000043A 0200                                    dw 2
  1537 0000043C 00000000<rep 5h>        		times 5 dd 0
  1538 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  1539 00000454 00000000<rep 3h>                        times 3 dd 0
  1540 00000460 FF                                      db 0FFh
  1541 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  1542 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  1542 0000046E 202000             
  1543 00000471 00000000                                dd 0
  1544 00000475 464154313220202000                      db 'FAT12   ',0
  1545                                  %endif
  1546                                  
  1547                                  ; ----
  1548                                  
  1549                                  ; 02/10/2023
  1550                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  1551                                  %if 0
  1552                                  
  1553                                  bds2:		dw bds3
  1554                                  		dw 70h
  1555                                  		db 0
  1556                                  		db 0
  1557                                  fdrive2:	dw 512			
  1558                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1559                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1560                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1561                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1562                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1563                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1564                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1565                                  
  1566                                  bds3:		dw bds4
  1567                                  		dw 70h
  1568                                  		db 0
  1569                                  		db 0
  1570                                  fdrive3:	dw 512			
  1571                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1572                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1573                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1574                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1575                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1576                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1577                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1578                                  ; ----
  1579                                  
  1580                                  bds4:		dw 0FFFFh
  1581                                  		dw 70h
  1582                                  		db 0
  1583                                  		db 0
  1584                                  fdrive4:	dw 512			
  1585                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1586                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1587                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1588                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1589                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1590                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1591                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1592                                  
  1593                                  ;-----------------------------------------------------------------------------
  1594                                  
  1595                                  sm92:		db 3			; .spf
  1596                                  		db 9			; .spt
  1597                                  		db 112	; 70h		; .cdire
  1598                                  		dw 1440	; 2*9*80	; .csec
  1599                                  		db 2			; .spau
  1600                                  		db 2			; .chead
  1601                                  
  1602                                  %endif
  1603                                  
  1604 0000047E 00                      keyrd_func:	db 0			
  1605 0000047F 01                      keysts_func:	db 1			
  1606 00000480 00                      printdev:	db 0			; printer device index
  1607                                  
  1608                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1609 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1610                                  
  1611 00000489 0000                    daycnt:		dw 0			
  1612 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  1613 0000048C 00                      havecmosclock:	db 0			
  1614 0000048D 13                      base_century:	db 19			
  1615 0000048E 50                      base_year:	db 80			
  1616                                  
  1617 0000048F 1F                      month_tab:	db 31
  1618 00000490 1C                      february:	db 28 ; 08/08/2023
  1619 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1619 0000049A 1F                 
  1620                                  
  1621                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1622                                  %if 0  
  1623                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1624                                  		dw 70h ; 17/10/2022	
  1625                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1626                                  		dw 70h ; 17/10/2022
  1627                                  %endif
  1628                                  
  1629 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  1630                                  
  1631                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1632                                  ;fat_12_id:	db 'FAT12   ',0         
  1633                                  ;fat_16_id:	db 'FAT16   ',0         
  1634                                  ;vol_no_name:	db 'NO NAME    ',0      
  1635                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  1636                                  
  1637 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  1638 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  1639 000004A0 0000                    multrk_flag:	dw 0			
  1640 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1641 000004A3 0000                    vretry_cnt:	dw 0			
  1642 000004A5 0000                    soft_ecc_cnt:	dw 0			
  1643 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1644 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1645                                  
  1646                                  ; variables for msdioctl.asm module
  1647                                  
  1648                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1649                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1650                                  ;	n	bytes per sector
  1651                                  ;      ---	----------------
  1652                                  ;	0	      128
  1653                                  ;	1	      256
  1654                                  ;	2	      512
  1655                                  ;	3	     1024
  1656                                  
  1657                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1658                                  ;					; we support (was 40 in dos 3.2)
  1659                                  
  1660 000004AA 2400                    sectorspertrack: dw 36
  1661 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  1662 000004B0 00000202                		db 0, 0, 2, 2
  1663 000004B4 00000302                		db 0, 0, 3, 2
  1664 000004B8 00000402                		db 0, 0, 4, 2
  1665 000004BC 00000502                		db 0, 0, 5, 2
  1666 000004C0 00000602                		db 0, 0, 6, 2
  1667 000004C4 00000702                		db 0, 0, 7, 2
  1668 000004C8 00000802                		db 0, 0, 8, 2
  1669 000004CC 00000902                		db 0, 0, 9, 2
  1670 000004D0 00000A02                		db 0, 0, 10, 2
  1671 000004D4 00000B02                		db 0, 0, 11, 2
  1672 000004D8 00000C02                		db 0, 0, 12, 2
  1673 000004DC 00000D02                		db 0, 0, 13, 2
  1674 000004E0 00000E02                		db 0, 0, 14, 2
  1675 000004E4 00000F02                		db 0, 0, 15, 2
  1676 000004E8 00001002                		db 0, 0, 16, 2
  1677 000004EC 00001102                		db 0, 0, 17, 2
  1678 000004F0 00001202                		db 0, 0, 18, 2
  1679 000004F4 00001302                		db 0, 0, 19, 2
  1680 000004F8 00001402                		db 0, 0, 20, 2
  1681 000004FC 00001502                		db 0, 0, 21, 2
  1682 00000500 00001602                		db 0, 0, 22, 2
  1683 00000504 00001702                		db 0, 0, 23, 2
  1684 00000508 00001802                		db 0, 0, 24, 2
  1685 0000050C 00001902                		db 0, 0, 25, 2
  1686 00000510 00001A02                		db 0, 0, 26, 2
  1687 00000514 00001B02                		db 0, 0, 27, 2
  1688 00000518 00001C02                		db 0, 0, 28, 2
  1689 0000051C 00001D02                		db 0, 0, 29, 2
  1690 00000520 00001E02                		db 0, 0, 30, 2
  1691 00000524 00001F02                		db 0, 0, 31, 2
  1692 00000528 00002002                		db 0, 0, 32, 2
  1693 0000052C 00002102                		db 0, 0, 33, 2
  1694 00000530 00002202                		db 0, 0, 34, 2
  1695 00000534 00002302                		db 0, 0, 35, 2
  1696 00000538 00002402                		db 0, 0, 36, 2
  1697                                  
  1698                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1699                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  1700                                  
  1701                                  		;times 108 db 0		; 19/10/2022
  1702                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1703                                  					; times	((4*63)	- 144) db 0
  1704                                  dskdrvs:	
  1705 0000053C [5803]                  		dw fdrive1
  1706 0000053E [EE03]                  		dw fdrive2 
  1707                                  	
  1708                                  		;dw 52 dup(0)
  1709 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  1710                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  1711                                  
  1712                                  ;-----------------------------------------------------------------------------
  1713                                  
  1714                                  ; this is a real ugly place to put this
  1715                                  ; it should really go in the bds
  1716                                  
  1717 000005A8 00                      mediatype:	db 0
  1718 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1719                                  					; type for format call
  1720 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  1721                                  					; failed.
  1722                                  
  1723                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1724                                  ; the one passed by "new roms" before we perform a format operation. the old
  1725                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1726                                  ; this table does not contain the previously saved dpt.
  1727                                  		
  1728 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1729 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  1730 000005B0 00                      secondary_model_byte: db 0
  1731                                  		
  1732 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  1733                                  					; initialization is complete
  1734                                  		
  1735                                  ;; we assume the following remain contiguous and their order doesn't change
  1736                                  ;i19_lst:
  1737                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1738                                  ;	public	int19old&aa
  1739                                  ;		db	aa&h	; store the number as a byte
  1740                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1741                                  ;	endm
  1742                                  
  1743                                  ; 21/10/2022
  1744                                  
  1745 000005B2 02                      i19_lst:	db 2
  1746                                  					; Int19old&aa
  1747 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1748 000005B7 08                      		db 8
  1749 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1750 000005BC 09                      		db 9
  1751 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1752 000005C1 0A                      		db 0Ah
  1753 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1754 000005C6 0B                      		db 0Bh
  1755 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1756 000005CB 0C                      		db 0Ch
  1757 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1758 000005D0 0D                      		db 0Dh
  1759 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1760 000005D5 0E                      		db 0Eh
  1761 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1762 000005DA 70                      		db 70h
  1763 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1764 000005DF 72                      		db 72h
  1765 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1766 000005E4 73                      		db 73h
  1767 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1768 000005E9 74                      		db 74h
  1769 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1770 000005EE 76                      		db 76h
  1771 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1772 000005F3 77                      		db 77h
  1773 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1774                                  
  1775                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1776                                  
  1777                                  ;-----------------------------------------------------------------------------
  1778                                  
  1779                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1780                                  ; 
  1781                                  ;dskdrvs:	dw fdrive1
  1782                                  ;		dw fdrive2
  1783                                  ;		dw fdrive3
  1784                                  ;		dw fdrive4
  1785                                  ;
  1786                                  ;;M011 -- made all hard drive stuff variable
  1787                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  1788                                  ;		times 22 dw 0	; 19/10/2022
  1789                                  
  1790                                  ;-----------------------------------------------------------------------------
  1791                                  
  1792                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1793                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1794                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1795                                  
  1796                                  ;variables for dynamic relocatable modules
  1797                                  ;these should be stay resident.
  1798                                  
  1799 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1800                                  					; for p12 machine
  1801                                  
  1802                                  ; data structures for real-time date and time
  1803                                  			
  1804 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1805                                  
  1806                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1807                                  %if 0
  1808                                  month_table:	dw 0			; january
  1809                                  		dw 31			; february
  1810                                  		dw 59
  1811                                  		dw 90
  1812                                  		dw 120
  1813                                  		dw 151
  1814                                  		dw 181
  1815                                  		dw 212
  1816                                  		dw 243
  1817                                  		dw 273
  1818                                  		dw 304
  1819                                  		dw 334			; december
  1820                                  %endif
  1821                                  
  1822 00000600 0000                    daycnt2:	dw 0
  1823                                  ; 08/08/2023
  1824                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1825                                  
  1826                                  ;-----------------------------------------------------------------------------
  1827                                  ;
  1828                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1829                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1830                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1831                                  
  1832                                  ; ----------------------------------------------------------------------------
  1833                                  
  1834                                  ;************************************************************************
  1835                                  ;*									*
  1836                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1837                                  ;*	  are plugged in by seg_reinit.					*
  1838                                  ;*									*
  1839                                  ;************************************************************************
  1840                                  
  1841                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1842                                  ; BIOSCODE_SEGMENT equ 2C7h
  1843                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1844                                  
  1845                                  ; 01/10/2022 - Erdogan Tan
  1846                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1847                                  ;  addresses, they will be changed to table labels later)
  1848                                  
  1849                                  ; 09/12/2022
  1850                                  %if 0
  1851                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1852                                  					; at 2C7h:43h =	70h:25B3h
  1853                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1854                                  					; at 2C7h:396h = 70h:2906h
  1855                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1856                                  					; at 2C7h:1302h	= 70h:3872h
  1857                                  i13x:		dw 154Bh, 2C7h		; i13z
  1858                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1859                                  %endif
  1860                                  
  1861                                  ; 30/12/2022
  1862                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1863                                  
  1864                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1865                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  1866                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  1867                                  
  1868                                  ; 09/12/2022
  1869 00000602 [4700]0203              cdev:		dw chardev_entry, IOSYSCODESEG
  1870 00000606 [A003]0203              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1871                                  ; 07/08/2023
  1872                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1873 0000060A [5718]0203              i13x:		dw i13z, IOSYSCODESEG
  1874                                  
  1875                                  end_BC_entries:	; 15/10/2022
  1876                                  
  1877                                  ;************************************************************************
  1878                                  ;*									*
  1879                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1880                                  ;*									*
  1881                                  ;************************************************************************
  1882                                  
  1883                                  cbreak:					
  1884 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1885                                  					; indicate break key set
  1886                                  intret:					
  1887 00000614 CF                      		iret
  1888                                  
  1889                                  ; =============== S U B	R O U T	I N E ========================================
  1890                                  
  1891                                  
  1892                                  ;************************************************************************
  1893                                  ;*									*
  1894                                  ;*	strategy - store es:bx (device driver request packet)		*
  1895                                  ;*		     away at [ptrsav] for next driver function call	*
  1896                                  ;*									*
  1897                                  ;************************************************************************
  1898                                  
  1899                                  strategy:	; proc far		
  1900 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1901                                  					; away at [ptrsav] for next driver function call
  1902 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1903 0000061F CB                      		retf
  1904                                  
  1905                                  ; ----------------------------------------------------------------------------
  1906                                  
  1907                                  ;************************************************************************
  1908                                  ;*									*
  1909                                  ;*	device driver entry points. these are the initial		*
  1910                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1911                                  ;*	  in the case of our resident drivers, they'll just		*
  1912                                  ;*	  stick a fake return address on the stack which		*
  1913                                  ;*	  points to dispatch tables and possibly some unit		*
  1914                                  ;*	  numbers, and then call through a common entry point		*
  1915                                  ;*	  which can take care of a20 switching				*
  1916                                  ;*									*
  1917                                  ;************************************************************************
  1918                                  
  1919                                  ; 01/10/2022 - Erdogan Tan
  1920                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1921                                  ;  addresses, they will be changed to table labels later)
  1922                                  
  1923                                  ; 09/12/2022
  1924                                  
  1925                                  ; 02/10/2023 - Retro DOS v5.0
  1926                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  1927                                  
  1928                                  con_entry:				
  1929 00000620 E84000                  		call	cdev_entry
  1930                                  ; ----------------------------------------------------------------------------
  1931                                  		;dw 0E4h		; con_table
  1932 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  1933                                  					; 2C7h:0E4h = 70h:2654h
  1934                                  ; ----------------------------------------------------------------------------
  1935                                  
  1936                                  prn0_entry:				
  1937 00000625 E83B00                  		call	cdev_entry
  1938                                  ; ----------------------------------------------------------------------------
  1939                                  		;dw 0FBh		; prn_table
  1940 00000628 [FB00]                  		dw prn_table
  1941                                  					; 2C7h:0FBh = 70h:266Bh
  1942 0000062A 0000                    		db 0, 0
  1943                                  ; ----------------------------------------------------------------------------
  1944                                  
  1945                                  prn1_entry:				
  1946 0000062C E83400                  		call	cdev_entry
  1947                                  ; ----------------------------------------------------------------------------
  1948                                  		;dw 0FBh		; prn_table
  1949 0000062F [FB00]                  		dw prn_table
  1950                                  					; 2C7h:0FBh = 70h:266Bh
  1951 00000631 0001                    		db 0, 1
  1952                                  ; ----------------------------------------------------------------------------
  1953                                  
  1954                                  prn2_entry:				
  1955 00000633 E82D00                  		call	cdev_entry
  1956                                  ; ----------------------------------------------------------------------------
  1957                                  		;dw 0FBh		; prn_table
  1958 00000636 [FB00]                  		dw prn_table
  1959                                  					; 2C7h:0FBh = 70h:266Bh
  1960 00000638 0102                    		db 1, 2
  1961                                  ; ----------------------------------------------------------------------------
  1962                                  
  1963                                  prn3_entry:				
  1964 0000063A E82600                  		call	cdev_entry
  1965                                  ; ----------------------------------------------------------------------------
  1966                                  		;dw 0FBh		; prn_table
  1967 0000063D [FB00]                  		dw prn_table
  1968                                  					; 2C7h:0FBh = 70h:266Bh
  1969 0000063F 0203                    		db 2, 3
  1970                                  ; ----------------------------------------------------------------------------
  1971                                  
  1972                                  aux0_entry:				
  1973 00000641 E81F00                  		call	cdev_entry
  1974                                  ; ----------------------------------------------------------------------------
  1975                                  		;dw 130h		; aux_table
  1976 00000644 [3001]                  		dw aux_table
  1977                                  					; 2C7h:130h = 70h:26A0h
  1978 00000646 00                      		db 0
  1979                                  ; ----------------------------------------------------------------------------
  1980                                  
  1981                                  aux1_entry:				
  1982 00000647 E81900                  		call	cdev_entry
  1983                                  ; ----------------------------------------------------------------------------
  1984                                  		;dw 130h		; aux_table
  1985 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  1986                                  					; 2C7h:130h = 70h:26A0h
  1987 0000064C 01                      		db 1
  1988                                  ; ----------------------------------------------------------------------------
  1989                                  
  1990                                  aux2_entry:				
  1991 0000064D E81300                  		call	cdev_entry
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  		;dw 130h		; aux_table
  1994 00000650 [3001]                  		dw aux_table
  1995                                  					; 2C7h:130h = 70h:26A0h
  1996 00000652 02                      		db 2
  1997                                  ; ----------------------------------------------------------------------------
  1998                                  
  1999                                  aux3_entry:				
  2000 00000653 E80D00                  		call	cdev_entry
  2001                                  ; ----------------------------------------------------------------------------
  2002                                  		;dw 130h		; aux_table
  2003 00000656 [3001]                  		dw aux_table
  2004                                  					; 2C7h:130h = 70h:26A0h
  2005 00000658 03                      		db 3
  2006                                  ; ----------------------------------------------------------------------------
  2007                                  
  2008                                  tim_entry:				
  2009 00000659 E80700                  		call	cdev_entry
  2010                                  ; ----------------------------------------------------------------------------
  2011                                  		;dw 147h		; tim_table
  2012 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  2013                                  					; 2C7h:147h = 70h:26B7h
  2014                                  ; ----------------------------------------------------------------------------
  2015                                  
  2016                                  ; 15/10/2022
  2017                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  2018                                  ; 09/12/2022
  2019                                  DSKTBL equ dsktbl
  2020                                  
  2021                                  dsk_entry:				
  2022 0000065E E80200                  		call	cdev_entry
  2023                                  ; ----------------------------------------------------------------------------
  2024                                  		;dw 4A2h		; dsktbl
  2025 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  2026                                  					; 2C7h:4A2h = 70h:2A12h
  2027                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  2028                                  					; 364h:579h = 70h:34B9h
  2029                                  
  2030                                  ; =============== S U B	R O U T	I N E ========================================
  2031                                  
  2032                                  ;************************************************************************
  2033                                  ;*									*
  2034                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  2035                                  ;*	This code assumes that if Segment of Device request packet is	*
  2036                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  2037                                  ;*	A20 is already on.						*
  2038                                  ;*									*
  2039                                  ;************************************************************************
  2040                                  
  2041                                  cdev_entry:	; proc near		
  2042 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2043 00000669 740D                    		jz	short ce_enter_codeseg
  2044                                  				; optimized for DOS in HMA
  2045 0000066B 50                      		push	ax
  2046 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  2047 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  2048 00000675 58                      		pop	ax
  2049 00000676 7505                    		jnz	short not_from_dos
  2050                                  				; jump is coded this way to fall thru
  2051                                  				; in 99.99% of the cases
  2052                                  ce_enter_codeseg:
  2053 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  2054                                  		;jmp	dword ptr cs:cdev
  2055                                  ;-----------------------------------------------------------------------------
  2056                                  
  2057                                  not_from_dos:				
  2058 0000067D E8AA00                  		call	EnsureA20On
  2059 00000680 EBF6                    		jmp	short ce_enter_codeseg
  2060                                  
  2061                                  ;************************************************************************
  2062                                  ;*									*
  2063                                  ;*	outchr - this is our int 29h handler. it writes the		*
  2064                                  ;*	   character in al on the display using int 10h ttywrite	*
  2065                                  ;*									*
  2066                                  ;************************************************************************
  2067                                  
  2068                                  	; 17/07/2024
  2069                                  	; 02/10/2023
  2070                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  2071                                  outchr:
  2072 00000682 50                      		push	ax		; int 29h handler
  2073 00000683 56                      		push	si
  2074 00000684 57                      		push	di
  2075 00000685 55                      		push	bp
  2076 00000686 53                      		push	bx
  2077                                  		;;;
  2078                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  2079                                  		;mov	ah,0Eh
  2080                                  		;mov	bx,7
  2081                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2082                                  		;		; AL = character, BH = display page (alpha modes)
  2083                                  		;		; BL = foreground color	(graphics modes)
  2084                                  		; 17/07/2024
  2085                                  		; 02/10/2023
  2086 00000687 1E                      		push	ds ; *
  2087 00000688 31DB                    		xor	bx,bx ; 0
  2088 0000068A 8EDB                    		mov	ds,bx ; 0
  2089 0000068C B40E                    		mov	ah,0Eh
  2090 0000068E B307                    		mov	bl,7
  2091 00000690 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  2092                                  		; 17/07/2024
  2093                                  		;jnz	short win_outchr ; *
  2094                                  		;push	ds ; *
  2095                                  		;mov	ds,bx ; 0
  2096                                  		;mov	ah,0Eh
  2097                                  		;mov	bl,7
  2098 00000695 7508                    		jnz	short win_outchr ; Running on Windows
  2099 00000697 9C                      		pushf			; far call (simulate INT)
  2100 00000698 FA                      		cli	; disable interrupts
  2101 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  2102                                  		; 17/07/2024
  2103                                  		;pop	ds ; *
  2104 0000069D EB02                    		jmp	short outchr_ok
  2105                                  win_outchr:
  2106 0000069F CD10                    		int	10h
  2107                                  outchr_ok:
  2108                                  		; 17/07/2024
  2109 000006A1 1F                      		pop	ds ; *
  2110                                  		;;;
  2111 000006A2 5B                      		pop	bx
  2112 000006A3 5D                      		pop	bp
  2113 000006A4 5F                      		pop	di
  2114 000006A5 5E                      		pop	si
  2115 000006A6 58                      		pop	ax
  2116 000006A7 CF                      		iret
  2117                                  
  2118                                  ;-----------------------------------------------------------------------------
  2119                                  
  2120                                  	; 02/10/2023 - Retro DOS v5.0
  2121                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  2122                                  
  2123 000006A8 50                      		db 50h ; P		; 'PCI' signature
  2124 000006A9 43                      		db 43h ; C
  2125 000006AA 49                      		db 49h ; I
  2126                                  
  2127 000006AB 00000000                Orig1A:		dd 0
  2128                                  
  2129                                  ; =============== S U B R O U T I N E =======================================
  2130                                  
  2131                                  	; 02/10/2023 - Retro DOS v5.0
  2132                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  2133                                  
  2134                                  Int1A:
  2135 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  2136 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  2137 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  2138                                  int1a_1:
  2139 000006B9 55                      		push	bp
  2140                                  int1a_2:
  2141 000006BA 89E5                    		mov	bp,sp
  2142 000006BC 55                      		push	bp
  2143 000006BD 9C                      		pushf
  2144 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2145 000006C3 7220                    		jc	short int1a_4
  2146                                  
  2147                                  		;cmp	cl,0		; Year (BCD)
  2148                                  		; 02/10/2023
  2149 000006C5 08C9                    		or	cl,cl
  2150 000006C7 7515                    		jnz	short int1a_3
  2151 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  2152 000006CC 7510                    		jne	short int1a_3
  2153 000006CE B520                    		mov	ch,20h
  2154 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  2155 000006D2 51                        		push	cx
  2156 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  2157 000006D4 9C                      		pushf
  2158 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2159 000006DA 5A                      		pop	dx
  2160 000006DB 59                      		pop	cx
  2161 000006DC 7207                    		jc	short int1a_4
  2162                                  int1a_3:
  2163 000006DE 5D                      		pop	bp
  2164 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  2165 000006E3 EB05                                    jmp	short int1a_5
  2166                                  int1a_4:
  2167 000006E5 5D                      		pop	bp
  2168 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  2169                                  int1a_5:
  2170 000006EA 5D                      		pop	bp
  2171 000006EB CF                      		iret
  2172                                  
  2173                                  		; 02/10/2023
  2174 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  2175                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  2176                                  	
  2177                                  ;-----------------------------------------------------------------------------
  2178                                  
  2179                                  ;************************************************************************
  2180                                  ;*									*
  2181                                  ;*	block13 - our int13 hooker					*
  2182                                  ;*									*
  2183                                  ;************************************************************************
  2184                                  
  2185                                  	; 02/10/2023 - Retro DOS v5.0
  2186                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  2187                                  
  2188                                  block13:				
  2189 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2190 000006F3 7403                    		jz	short skipa20
  2191                                  		
  2192                                  		;call	IsA20Off	; A20 Off?
  2193                                  		;jnz	short skipa20
  2194                                  		;call	EnableA20	; assure a20 enabled
  2195                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  2196 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  2197                                  skipa20:				
  2198 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  2199 000006FD 9C                      		pushf			; fake interrupt
  2200 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  2201                                  		;call	dword ptr cs:i13x
  2202                                  					; call through Bios_Code entry table
  2203 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  2204 00000708 CA0200                  		retf	2
  2205                                  
  2206                                  ; =============== S U B	R O U T	I N E =======================================
  2207                                  
  2208                                  ; the int13 hook calls back here to call-through to the ROM
  2209                                  ; this is necessary because some people have extended their
  2210                                  ; ROM BIOSs to use ds as a parameter/result register and
  2211                                  ; our int13 hook relies heavily on ds to access Bios_Data
  2212                                  
  2213                                  call_orig13:	; proc far		
  2214 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  2215 0000070F 9C                      		pushf			; simulate an int13
  2216 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  2217                                  		;call	cs:Orig13
  2218 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  2219 0000071A 0E                      		push	cs
  2220 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  2221                                  
  2222 0000071C 9C                      		pushf
  2223                                  		; 10/12/2022
  2224                                  		; ds = cs
  2225 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  2226                                  		;cmp	byte [cs:inHMA],0
  2227 00000722 7403                    		jz	short corig13_popf_retf
  2228                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2229                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  2230                                  		;call	IsA20Off
  2231                                  		;jnz	short corig13_popf_retf
  2232                                  		;call	EnableA20
  2233 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  2234                                  corig13_popf_retf:	
  2235 00000727 9D                      		popf
  2236                                  		; 20/09/2023
  2237                                  re_init:	; 07/08/2023
  2238 00000728 CB                      		retf
  2239                                  
  2240                                  		; 02/10/2023
  2241 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  2242                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  2243                                  
  2244                                  ;-----------------------------------------------------------------------------
  2245                                  
  2246                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  2247                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  2248                                  
  2249                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2250                                  ;HiMem:		dd 0FFFF0090h		
  2251                                  ;LoMem:		dd 80h
  2252                                  
  2253                                  ; ----------------------------------------------------------------------------			
  2254                                  
  2255                                  ; =============== S U B	R O U T	I N E ========================================
  2256                                  
  2257                                  
  2258                                  ;************************************************************************
  2259                                  ;*									*
  2260                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  2261                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  2262                                  ;*									*
  2263                                  ;************************************************************************
  2264                                  
  2265                                  EnsureA20On:	; proc near
  2266 0000072A E80E00                  		call	IsA20Off
  2267                                  		;jz	short EnableA20
  2268                                  		;retn
  2269                                  		; 18/12/2022
  2270 0000072D 750B                    		jnz	short A20On_retn
  2271                                  
  2272                                  ; =============== S U B	R O U T	I N E ========================================
  2273                                  
  2274                                  
  2275                                  EnableA20:	; proc near
  2276 0000072F 50                      		push	ax
  2277 00000730 53                      		push	bx
  2278 00000731 B405                    		mov	ah,5	 ; local enable a20
  2279                                  		;call	cs:xms
  2280 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  2281 00000738 5B                      		pop	bx
  2282 00000739 58                      		pop	ax
  2283                                  A20On_retn:	; 18/12/2022
  2284 0000073A C3                      		retn
  2285                                  
  2286                                  ; =============== S U B	R O U T	I N E ========================================
  2287                                  
  2288                                  
  2289                                  IsA20Off:	; proc near
  2290 0000073B 1E                      		push	ds
  2291 0000073C 06                      		push	es
  2292 0000073D 51                      		push	cx
  2293 0000073E 56                      		push	si
  2294 0000073F 57                      		push	di
  2295                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2296                                  		;lds	si,[cs:HiMem]
  2297                                  		;les	di,[cs:LoMem]
  2298                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  2299 00000740 31FF                    		xor	di,di
  2300 00000742 8EC7                    		mov	es,di
  2301 00000744 4F                      		dec	di
  2302 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  2303 00000748 8EDF                    		mov	ds,di
  2304 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  2305                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  2306                                  		; (following cpu instructions will be modified by 'SYSIN'
  2307                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  2308                                  cpu386_cmpsd:
  2309 0000074D 90                      		nop
  2310 0000074E B90800                  		mov	cx,8
  2311 00000751 F3A7                    		repe cmpsw
  2312                                  				; zf = 0 -> A20 line is ON
  2313                                  				; zf = 1 -> A20 line is OFF
  2314 00000753 5F                      		pop	di
  2315 00000754 5E                      		pop	si
  2316 00000755 59                      		pop	cx
  2317 00000756 07                      		pop	es
  2318 00000757 1F                      		pop	ds
  2319 00000758 C3                      		retn
  2320                                  
  2321                                  ; ----------------------------------------------------------------------------
  2322                                  
  2323                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2324                                  %if 0
  2325                                  DisableA20:
  2326                                  		push	ax
  2327                                  		push	bx
  2328                                  		mov	ah,6		; local disable A20
  2329                                  		call	far [cs:xms]
  2330                                  		;call	cs:xms
  2331                                  		pop	bx
  2332                                  		pop	ax
  2333                                  		retn
  2334                                  %endif
  2335                                  
  2336                                  ; ----------------------------------------------------------------------------
  2337                                  
  2338                                  ;************************************************************************
  2339                                  ;*									*
  2340                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  2341                                  ;*	  interrupt vectors before resuming the original int19 code	*
  2342                                  ;*									*
  2343                                  ;************************************************************************
  2344                                  
  2345                                  		; 02/10/2023 - Retro DOS v5.0
  2346                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  2347                                  int19:
  2348 00000759 0E                      		push	cs
  2349 0000075A 1F                      		pop	ds
  2350                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2351                                  		;mov	es,[zeroseg]	; 16/10/2022
  2352                                  		;mov	cx,5		; NUMROMVECTORS
  2353 0000075B 31C9                    		xor	cx,cx
  2354 0000075D 8EC1                    		mov	es,cx
  2355 0000075F B105                    		mov	cl,5
  2356                                  		;mov	si,offset RomVectors
  2357 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  2358                                  next_int:
  2359 00000764 AC                      		lodsb			; get int number
  2360 00000765 98                      		cbw			; assume < 128
  2361 00000766 D1E0                    		shl	ax,1
  2362 00000768 D1E0                    		shl	ax,1		; int *	4
  2363                                  		; 07/08/2023
  2364                                  		;mov	di,ax
  2365                                  		;lodsw
  2366                                  		;stosw
  2367                                  		;lodsw
  2368                                  		;stosw			; install the saved vector
  2369                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  2370 0000076A 97                      		xchg	ax,di
  2371 0000076B A5                      		movsw
  2372 0000076C A5                      		movsw
  2373 0000076D E2F5                    		loop	next_int
  2374                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  2375 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  2376 00000773 7419                    		jz	short doint19
  2377 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  2378                                  					; stkinit in sysinit1 will initialize int19oldxx values
  2379                                  		;mov	cx,14		; num_i19
  2380                                  		; 07/08/2023
  2381 00000778 B10E                    		mov	cl,14
  2382                                  i19_restore_loop:
  2383 0000077A AC                      		lodsb			; get interrupt	number
  2384 0000077B 98                      		cbw			; assume < 128
  2385                                  		;mov	di,ax
  2386                                  		;lodsw			; get original vector offset
  2387                                  		;mov	bx,ax		; save it
  2388                                  		;lodsw
  2389                                  		; 07/08/2023
  2390 0000077C 97                      		xchg	ax,di
  2391 0000077D AD                      		lodsw
  2392 0000077E 93                      		xchg	ax,bx
  2393 0000077F AD                      		lodsw
  2394                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  2395 00000780 43                      		inc	bx ; 07/08/2023
  2396 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  2397                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  2398                                  		;jz	short i19_restor_1
  2399 00000783 4B                      		dec	bx ; 07/08/2023
  2400 00000784 01FF                    		add	di,di
  2401 00000786 01FF                    		add	di,di
  2402 00000788 93                      		xchg	ax,bx
  2403 00000789 AB                      		stosw
  2404 0000078A 93                      		xchg	ax,bx
  2405 0000078B AB                      		stosw			; put the vector back
  2406                                  i19_restor_1:
  2407 0000078C E2EC                    		loop	i19_restore_loop
  2408                                  doint19:
  2409                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  2410 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  2411 00000792 7403                    		jz	short SkipVDisk
  2412 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  2413                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  2414                                  					; the memory above 1MB during a	warm boot.
  2415                                  SkipVDisk:
  2416 00000797 CD19                    		int	19h		; DISK BOOT
  2417                                  					; causes reboot	of disk	system
  2418                                  
  2419                                  ; =============== S U B	R O U T	I N E ========================================
  2420                                  
  2421                                  ;-----------------------------------------------------------------------------
  2422                                  ;
  2423                                  ; procedure : int15
  2424                                  ;
  2425                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  2426                                  ;		If it recognizes ctrl-alt-del and if DOS was
  2427                                  ;		is running high, it Erases the VDISK header
  2428                                  ;		present at 1MB boundary
  2429                                  ;
  2430                                  ;-----------------------------------------------------------------------------
  2431                                  
  2432                                  ; 16/10/2022
  2433                                  ;DELKEY		equ	53h
  2434                                  ;ROMDATASEG	equ	40h
  2435                                  KBFLAG		equ	17h
  2436                                  ;CTRLSTATE	equ	04h
  2437                                  ;ALTSTATE	equ	08h
  2438                                  
  2439                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  2440                                  Int15:
  2441                                  		;cmp	ax,4F00h+DELKEY
  2442 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  2443                                  		; 02/10/2023 - Retro DOS v5.0
  2444                                  		; 07/08/2023
  2445 0000079C 7405                    		jz	short int15_1
  2446                                  		;jnz	short Old15_j	; 07/08/2023 
  2447                                  Old15_j:
  2448 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2449                                  
  2450                                  ; ----------------------------------------------------------------------------
  2451                                  int15_1:
  2452 000007A3 1E                      		push	ds
  2453 000007A4 50                      		push	ax
  2454                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2455                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2456                                  		;mov	ax,40h		; ROMDATASEG
  2457                                  		;mov	ds,ax
  2458                                  		;;mov	al,ds:17h	; [KBFLAG]
  2459                                  		;; 16/10/2022
  2460                                  		;mov	al,[KBFLAG]
  2461 000007A5 31C0                    		xor	ax,ax
  2462 000007A7 8ED8                    		mov	ds,ax
  2463 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2464 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2465 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2466 000007B0 750A                    		jnz	short int15_2
  2467                                  		; 07/08/2023
  2468                                  		;push	cs
  2469                                  		;pop	ds
  2470                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  2471 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  2472 000007B7 7403                    		jz	short int15_2
  2473 000007B9 E80500                  		call	EraseVDiskHead
  2474                                  int15_2:
  2475 000007BC 58                      		pop	ax
  2476 000007BD 1F                      		pop	ds
  2477 000007BE F9                      		stc
  2478                                  		; 02/10/2023 - Retro DOS v5.0
  2479 000007BF EBDD                    		jmp	short Old15_j
  2480                                  
  2481                                  		; 02/10/2023
  2482                                  ;Old15_j:	; 07/08/2023
  2483                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  2484                                  ;		;jmp	cs:Old15
  2485                                  	
  2486                                  ; =============== S U B	R O U T	I N E ========================================
  2487                                  
  2488                                  ;-----------------------------------------------------------------------------
  2489                                  ;
  2490                                  ; procedure : EraseVDiskHead
  2491                                  ;
  2492                                  ;		Erases the VDisk Header present in the 1MB boundary
  2493                                  ;
  2494                                  ;-----------------------------------------------------------------------------
  2495                                  
  2496                                  EraseVDiskHead:	; proc near
  2497                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2498                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2499                                  		;push	ax
  2500 000007C1 51                      		push	cx
  2501 000007C2 57                      		push	di
  2502 000007C3 06                      		push	es
  2503 000007C4 E863FF                  		call	EnsureA20On
  2504                                  		;mov	ax,0FFFFh	; HMA seg
  2505                                  		;mov	es,ax
  2506                                  		; 03/10/2023 - Retro DOS v5.0
  2507 000007C7 6AFF                    		push	0FFFFh
  2508 000007C9 07                      		pop	es
  2509 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  2510                                  		; 07/08/2023
  2511                                  		;mov	cx,10h		; size of vdisk	header
  2512 000007CD 89F9                    		mov	cx,di ; 16
  2513                                  		; 03/10/2023
  2514 000007CF 31C0                    		xor	ax,ax
  2515                                  		;inc	ax ; ax = 0
  2516 000007D1 F3AB                    		rep stosw		; clear	it
  2517 000007D3 07                      		pop	es
  2518 000007D4 5F                      		pop	di
  2519 000007D5 59                      		pop	cx
  2520                                  		;pop	ax ; 07/08/2023
  2521 000007D6 C3                      		retn
  2522                                  
  2523                                  ; ----------------------------------------------------------------------------
  2524                                  
  2525                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2526                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2527                                  
  2528                                  ; 09/12/2022
  2529                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2530                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2531                                  ; (followings are in sysinit segment)
  2532                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2533                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2534                                  ;DEVICELIST	equ 273h
  2535                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2536                                  ;MEMORYSIZE	equ 292h	
  2537                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2538                                  ;DEFAULTDRIVE	equ 296h
  2539                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2540                                  ;;currentdoslocation equ 271h
  2541                                  ;CURRENTDOSLOCATION equ 271h
  2542                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2543                                  ;SYSINITSTART	equ 267h
  2544                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2545                                  ; 18/10/2022
  2546                                  ;toomanydrivesflag equ 3FFh 
  2547                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2548                                  
  2549                                  ; ----------------------------------------------------------------------------
  2550                                  
  2551                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2552                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  2553                                  
  2554                                  %if 1
  2555                                  
  2556 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2557                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2558                                  					; (procedure in	SYSINIT	segment)
  2559                                  ; 17/10/2022
  2560 000007D9 [C80A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2561 000007DB D904                    		dw SYSINITSEG		; 08/08/2023
  2562                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2563                                  					; 0473h for MSDOS 6.21 IO.SYS
  2564                                  ;SR;
  2565                                  ; A communication block has been setup between the DOS and the BIOS. All
  2566                                  ;the data starting from SysinitPresent will be part of the data block. 
  2567                                  ;Right now, this is the only data being communicated. It can be expanded 
  2568                                  ;later to add more stuff
  2569                                  
  2570 000007DD 00                      SysinitPresent:	db 0
  2571                                  
  2572                                  %endif
  2573                                  
  2574                                  ; ----------------------------------------------------------------------------
  2575                                  
  2576                                  ;************************************************************************
  2577                                  ;*									*
  2578                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2579                                  ;*	  it returns through one of the three functions that follow.	*
  2580                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2581                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2582                                  ;*									*
  2583                                  ;************************************************************************
  2584                                  
  2585                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2586                                  %if 0	; 20/09/2023
  2587                                  int_2f:		
  2588                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2589                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2590                                  
  2591                                  ; ----------------------------------------------------------------------------
  2592                                  
  2593                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2594                                  ; note:  is it really necessary to transiton out and then back in?
  2595                                  ;	 It's not as if this is a really speed critical function.
  2596                                  ;	 might as well do whatever's most compact.
  2597                                  
  2598                                  i2f_dskentry:
  2599                                  		jmp	dsk_entry
  2600                                  
  2601                                  ; ----------------------------------------------------------------------------
  2602                                  
  2603                                  ;************************************************************************
  2604                                  ;*									*
  2605                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2606                                  ;*		is done. presently does nothing. affects no		*
  2607                                  ;*		registers!						*
  2608                                  ;*									*
  2609                                  ;************************************************************************
  2610                                  
  2611                                  ; 09/12/2022
  2612                                  ; re_init_:
  2613                                  re_init:				; called back by sysinit after
  2614                                  		retf			; a bunch of stuff is done.
  2615                                  					; presently does nothing
  2616                                  %endif
  2617                                  
  2618                                  ; ----------------------------------------------------------------------------
  2619                                  
  2620                                  ;SR; WIN386 support
  2621                                  
  2622                                  ; WIN386 instance data structure
  2623                                  ;
  2624                                  ; Here is a Win386 startup info structure which we set up and to which
  2625                                  ; we return a pointer when Win386 initializes.
  2626                                  
  2627 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  2628                                  					; Startup Info for Win386
  2629 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  2630 000007E4 00000000                		dd 0			; a field we don't need
  2631 000007E8 00000000                		dd 0			; another field	we don't need
  2632 000007EC [F007]                  SI_Instance:	dw Instance_Table
  2633 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2634                                  
  2635                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2636                                  ; areas. Note that the address and size of the hardware stacks must
  2637                                  ; be calculated and inserted at boot time.
  2638                                  
  2639 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  2640 000007F4 0200                    		dw 2			; ... 2	bytes
  2641 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  2642 000007FA 1400                    		dw 14h			; ... 14H bytes
  2643 000007FC [0C00]                  		dw altah		; a con	device buffer...
  2644 000007FE 7000                    		dw 70h			; Bios_Data segment
  2645 00000800 0100                    		dw 1			; ... 1 byte
  2646                                  
  2647                                  NextStack:
  2648                                  
  2649                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2650                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2651                                  ;	That's just fine as long as these are the last items
  2652                                  ;	in the instance list since the first item is initialized
  2653                                  ;	to 0000 at load time.
  2654                                  
  2655 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  2656 00000806 0200                    		dw 2			; ... 2 bytes
  2657 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2658 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2659 0000080E 00000000                		dd 0			; terminate the	instance table
  2660                                  
  2661                                  					;SR;
  2662 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  2663                                  					; Win386 is running or not
  2664                                  ;-----------------------------------------------------------------------------
  2665                                  
  2666                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2667                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  2668                                  
  2669                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2670                                  ;when we call it including checking of A20. The code being only about 
  2671                                  ;30 bytes, we might as well put it in BIOS_DATA
  2672                                  
  2673                                  V86_Crit_SetFocus:			
  2674 00000813 57                      		push	di
  2675 00000814 06                      		push	es
  2676 00000815 53                      		push	bx
  2677 00000816 50                      		push	ax
  2678 00000817 31FF                    		xor	di,di
  2679 00000819 8EC7                    		mov	es,di
  2680 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  2681 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  2682 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2683                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2684                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2685 00000823 8CC0                    		mov	ax, es
  2686 00000825 09F8                    		or	ax, di
  2687 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2688                                  					; Set up stack frame to	simulate a call.
  2689 00000829 0E                      		push	cs
  2690                                  		;;mov	ax,offset Skip
  2691                                  		;mov	ax,Skip
  2692                                  		;push	ax
  2693                                  		; 03/10/2023 - Retro DOS v5.0
  2694 0000082A 68[3308]                		push	Skip
  2695 0000082D 06                      		push	es
  2696 0000082E 57                      		push	di		; API far call address
  2697 0000082F B80100                  		mov	ax,1		; SetFocus function number
  2698 00000832 CB                      		retf			; do the call
  2699                                  ;-----------------------------------------------------------------------------
  2700                                  
  2701                                  Skip:					
  2702 00000833 58                      		pop	ax
  2703 00000834 5B                      		pop	bx
  2704 00000835 07                      		pop	es
  2705 00000836 5F                      		pop	di
  2706 00000837 CB                      		retf
  2707                                  
  2708                                  ;End WIN386 support
  2709                                  
  2710                                  ; ----------------------------------------------------------------------------
  2711                                  
  2712                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2713                                  %if 0
  2714                                  
  2715                                  FreeHMAPtr:	dw 0FFFFh		
  2716                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2717                                  					; (procedure in	SYSINIT	segment)
  2718                                  ; 17/10/2022
  2719                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2720                                  		dw SYSINITSEG		; 08/08/2023
  2721                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2722                                  					; 0473h for MSDOS 6.21 IO.SYS
  2723                                  ;SR;
  2724                                  ; A communication block has been setup between the DOS and the BIOS. All
  2725                                  ;the data starting from SysinitPresent will be part of the data block. 
  2726                                  ;Right now, this is the only data being communicated. It can be expanded 
  2727                                  ;later to add more stuff
  2728                                  
  2729                                  SysinitPresent:	db 0
  2730                                  		
  2731                                  endfloppy:	db 0, 0
  2732                                  
  2733                                  %endif
  2734                                  	
  2735                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2736                                  
  2737                                  	endfloppy:
  2738 00000838 00                      		db 0
  2739                                  
  2740                                  	; 03/10/2023
  2741                                  
  2742                                  numxdiv	equ ($-BData_start)
  2743                                  numxmod	equ (numxdiv % 16)
  2744                                  
  2745                                  %if (numxmod>0) & (numxmod<16)
  2746 00000839 00<rep 7h>              		times (16-numxmod) db 0
  2747                                  %endif
  2748                                  
  2749                                  ; ----------------------------------------------------------------------------			
  2750                                  
  2751                                  ; Bios_Data ends
  2752                                  	
  2753                                  ; Possibly disposable BIOS data
  2754                                  ; This data follows the	regular	BIOS data,
  2755                                  ; and is part of the same group.
  2756                                  
  2757                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2758                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  2759                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  2760                                  
  2761                                  ; 03/10/2023
  2762 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  2762 00000849 2020               
  2763                                  
  2764 0000084B 80                      harddrv:	db 80h			
  2765                                  
  2766                                  end96tpi:
  2767                                  
  2768                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2769                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  2770                                  
  2771                                  ;;*********************************************************************
  2772                                  ;;memory allocation for bdss
  2773                                  ;;*********************************************************************
  2774                                  ;
  2775                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2776                                  ;
  2777                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2778                                  ;
  2779                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2780                                  
  2781                                  
  2782                                  ; 09/12/2023
  2783                                  %if 1
  2784                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  2785                                  
  2786 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  2787                                  					; max_mini_dsk_num equ 23
  2788                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  2789                                  					; currently max. 25
  2790                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  2791                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  2792                                  					; BDS.link
  2793 0000084E 0000                    		dw 0
  2794 00000850 50                      		db 80			; BDS.drivenum
  2795 00000851 03                      		db 3			; BDS.drivelet
  2796 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  2797                                  					; 53 bytes BPB for FAT32 fs
  2798                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  2799                                  					; .bytespersec
  2800 00000854 01                      		db 1			; .secperclus
  2801 00000855 0100                    		dw 1			; .resectors
  2802 00000857 02                      		db 2			; .fats
  2803 00000858 1000                    		dw 16			; .direntries
  2804 0000085A 0000                    		dw 0			; .totalsec16
  2805 0000085C F8                      		db 0F8h			; .media
  2806 0000085D 0100                    		dw 1			; .fatsecs16
  2807 0000085F 0000                    		dw 0			; .secpertrack
  2808 00000861 0000                    		dw 0			; .heads
  2809 00000863 00000000                		dd 0			; .hiddensectors
  2810 00000867 00000000                		dd 0			; .totalsecs32
  2811                                  					; (End of FAT12/FAT16 BPB)
  2812                                  					;
  2813                                  					; FAT32 extensions to BDS
  2814 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  2815 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  2816 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  2817 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  2818 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  2819 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  2820 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  2821 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  2822 00000888 0000                    		dw 0			; BDS.opcnt
  2823 0000088A 03                      		db 3
  2824 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  2825 0000088D 2800                    		dw 40
  2826 0000088F 00<rep 25h>             		times 37 db 0
  2827 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  2828 000008B8 00<rep Ch>              		times 12 db 0
  2829 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  2830 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  2831 000008C7 0000                    		dw 0			; BDS.tim_hi
  2832 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  2832 000008D2 202000             
  2833 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  2834 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  2835 000008E2 FFFF                    bds_1:		dw 0FFFFh
  2836 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2836 000008ED 0210000000F8       
  2837 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2837 000008FC 000000000000000000 
  2838 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2838 0000090E FFFFFF0000         
  2839 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2839 0000091C 0000000003200028   
  2840 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2840 0000092D 000000000000000000 
  2841 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2841 0000093F 000000000000000000 
  2842 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2842 00000951 0000000000         
  2843 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2843 0000095F 4E4F204E41         
  2844 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2844 0000096D 00004641           
  2845 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2846 00000978 FFFF                    bds_2:		dw 0FFFFh
  2847 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2847 00000983 0210000000F8       
  2848 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2848 00000992 000000000000000000 
  2849 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2849 000009A4 FFFFFF0000         
  2850 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2850 000009B2 0000000003200028   
  2851 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2851 000009C3 000000000000000000 
  2852 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2852 000009D5 000000000000000000 
  2853 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2853 000009E7 0000000000         
  2854 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2854 000009F5 4E4F204E41         
  2855 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2855 00000A03 00004641           
  2856 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2857 00000A0E FFFF                    bds_3:		dw 0FFFFh
  2858 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2858 00000A19 0210000000F8       
  2859 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2859 00000A28 000000000000000000 
  2860 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2860 00000A3A FFFFFF0000         
  2861 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2861 00000A48 0000000003200028   
  2862 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2862 00000A59 000000000000000000 
  2863 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2863 00000A6B 000000000000000000 
  2864 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2864 00000A7D 0000000000         
  2865 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2865 00000A8B 4E4F204E41         
  2866 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2866 00000A99 00004641           
  2867 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2868 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  2869 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2869 00000AAF 0210000000F8       
  2870 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2870 00000ABE 000000000000000000 
  2871 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2871 00000AD0 FFFFFF0000         
  2872 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2872 00000ADE 0000000003200028   
  2873 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2873 00000AEF 000000000000000000 
  2874 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2874 00000B01 000000000000000000 
  2875 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2875 00000B13 0000000000         
  2876 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2876 00000B21 4E4F204E41         
  2877 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2877 00000B2F 00004641           
  2878 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2879 00000B3A FFFF                    		dw 0FFFFh
  2880 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2880 00000B45 0210000000F8       
  2881 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2881 00000B54 000000000000000000 
  2882 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2882 00000B66 FFFFFF0000         
  2883 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2883 00000B74 0000000003200028   
  2884 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2884 00000B85 000000000000000000 
  2885 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2885 00000B97 000000000000000000 
  2886 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2886 00000BA9 0000000000         
  2887 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2887 00000BB7 4E4F204E41         
  2888 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2888 00000BC5 00004641           
  2889 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2890 00000BD0 FFFF                    		dw 0FFFFh
  2891 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2891 00000BDB 0210000000F8       
  2892 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2892 00000BEA 000000000000000000 
  2893 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2893 00000BFC FFFFFF0000         
  2894 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2894 00000C0A 0000000003200028   
  2895 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2895 00000C1B 000000000000000000 
  2896 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2896 00000C2D 000000000000000000 
  2897 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2897 00000C3F 0000000000         
  2898 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2898 00000C4D 4E4F204E41         
  2899 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2899 00000C5B 00004641           
  2900 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2901 00000C66 FFFF                    		dw 0FFFFh
  2902 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2902 00000C71 0210000000F8       
  2903 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2903 00000C80 000000000000000000 
  2904 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2904 00000C92 FFFFFF0000         
  2905 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2905 00000CA0 0000000003200028   
  2906 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2906 00000CB1 000000000000000000 
  2907 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2907 00000CC3 000000000000000000 
  2908 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2908 00000CD5 0000000000         
  2909 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2909 00000CE3 4E4F204E41         
  2910 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2910 00000CF1 00004641           
  2911 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2912 00000CFC FFFF                    		dw 0FFFFh
  2913 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2913 00000D07 0210000000F8       
  2914 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2914 00000D16 000000000000000000 
  2915 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2915 00000D28 FFFFFF0000         
  2916 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2916 00000D36 0000000003200028   
  2917 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2917 00000D47 000000000000000000 
  2918 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2918 00000D59 000000000000000000 
  2919 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2919 00000D6B 0000000000         
  2920 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2920 00000D79 4E4F204E41         
  2921 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2921 00000D87 00004641           
  2922 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2923 00000D92 FFFF                    		dw 0FFFFh
  2924 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2924 00000D9D 0210000000F8       
  2925 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2925 00000DAC 000000000000000000 
  2926 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2926 00000DBE FFFFFF0000         
  2927 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2927 00000DCC 0000000003200028   
  2928 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2928 00000DDD 000000000000000000 
  2929 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2929 00000DEF 000000000000000000 
  2930 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2930 00000E01 0000000000         
  2931 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2931 00000E0F 4E4F204E41         
  2932 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2932 00000E1D 00004641           
  2933 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2934 00000E28 FFFF                    		dw 0FFFFh
  2935 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2935 00000E33 0210000000F8       
  2936 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2936 00000E42 000000000000000000 
  2937 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2937 00000E54 FFFFFF0000         
  2938 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2938 00000E62 0000000003200028   
  2939 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2939 00000E73 000000000000000000 
  2940 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2940 00000E85 000000000000000000 
  2941 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2941 00000E97 0000000000         
  2942 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2942 00000EA5 4E4F204E41         
  2943 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2943 00000EB3 00004641           
  2944 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2945 00000EBE FFFF                    		dw 0FFFFh
  2946 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2946 00000EC9 0210000000F8       
  2947 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2947 00000ED8 000000000000000000 
  2948 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2948 00000EEA FFFFFF0000         
  2949 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2949 00000EF8 0000000003200028   
  2950 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2950 00000F09 000000000000000000 
  2951 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2951 00000F1B 000000000000000000 
  2952 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2952 00000F2D 0000000000         
  2953 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2953 00000F3B 4E4F204E41         
  2954 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2954 00000F49 00004641           
  2955 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2956 00000F54 FFFF                    		dw 0FFFFh
  2957 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2957 00000F5F 0210000000F8       
  2958 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2958 00000F6E 000000000000000000 
  2959 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2959 00000F80 FFFFFF0000         
  2960 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2960 00000F8E 0000000003200028   
  2961 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2961 00000F9F 000000000000000000 
  2962 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2962 00000FB1 000000000000000000 
  2963 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2963 00000FC3 0000000000         
  2964 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2964 00000FD1 4E4F204E41         
  2965 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2965 00000FDF 00004641           
  2966 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2967 00000FEA FFFF                    		dw 0FFFFh
  2968 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2968 00000FF5 0210000000F8       
  2969 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2969 00001004 000000000000000000 
  2970 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2970 00001016 FFFFFF0000         
  2971 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2971 00001024 0000000003200028   
  2972 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2972 00001035 000000000000000000 
  2973 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2973 00001047 000000000000000000 
  2974 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2974 00001059 0000000000         
  2975 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2975 00001067 4E4F204E41         
  2976 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2976 00001075 00004641           
  2977 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2978 00001080 FFFF                    		dw 0FFFFh
  2979 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2979 0000108B 0210000000F8       
  2980 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2980 0000109A 000000000000000000 
  2981 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2981 000010AC FFFFFF0000         
  2982 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2982 000010BA 0000000003200028   
  2983 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2983 000010CB 000000000000000000 
  2984 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2984 000010DD 000000000000000000 
  2985 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2985 000010EF 0000000000         
  2986 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2986 000010FD 4E4F204E41         
  2987 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2987 0000110B 00004641           
  2988 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2989 00001116 FFFF                    		dw 0FFFFh
  2990 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2990 00001121 0210000000F8       
  2991 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2991 00001130 000000000000000000 
  2992 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2992 00001142 FFFFFF0000         
  2993 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2993 00001150 0000000003200028   
  2994 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2994 00001161 000000000000000000 
  2995 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2995 00001173 000000000000000000 
  2996 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2996 00001185 0000000000         
  2997 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2997 00001193 4E4F204E41         
  2998 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2998 000011A1 00004641           
  2999 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3000 000011AC FFFF                    		dw 0FFFFh
  3001 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3001 000011B7 0210000000F8       
  3002 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3002 000011C6 000000000000000000 
  3003 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3003 000011D8 FFFFFF0000         
  3004 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3004 000011E6 0000000003200028   
  3005 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3005 000011F7 000000000000000000 
  3006 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3006 00001209 000000000000000000 
  3007 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3007 0000121B 0000000000         
  3008 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3008 00001229 4E4F204E41         
  3009 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3009 00001237 00004641           
  3010 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3011 00001242 FFFF                    		dw 0FFFFh
  3012 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3012 0000124D 0210000000F8       
  3013 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3013 0000125C 000000000000000000 
  3014 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3014 0000126E FFFFFF0000         
  3015 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3015 0000127C 0000000003200028   
  3016 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3016 0000128D 000000000000000000 
  3017 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3017 0000129F 000000000000000000 
  3018 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3018 000012B1 0000000000         
  3019 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3019 000012BF 4E4F204E41         
  3020 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3020 000012CD 00004641           
  3021 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3022 000012D8 FFFF                    		dw 0FFFFh
  3023 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3023 000012E3 0210000000F8       
  3024 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3024 000012F2 000000000000000000 
  3025 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3025 00001304 FFFFFF0000         
  3026 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3026 00001312 0000000003200028   
  3027 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3027 00001323 000000000000000000 
  3028 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3028 00001335 000000000000000000 
  3029 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3029 00001347 0000000000         
  3030 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3030 00001355 4E4F204E41         
  3031 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3031 00001363 00004641           
  3032 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3033 0000136E FFFF                    		dw 0FFFFh
  3034 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3034 00001379 0210000000F8       
  3035 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3035 00001388 000000000000000000 
  3036 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3036 0000139A FFFFFF0000         
  3037 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3037 000013A8 0000000003200028   
  3038 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3038 000013B9 000000000000000000 
  3039 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3039 000013CB 000000000000000000 
  3040 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3040 000013DD 0000000000         
  3041 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3041 000013EB 4E4F204E41         
  3042 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3042 000013F9 00004641           
  3043 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3044 00001404 FFFF                    		dw 0FFFFh
  3045 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3045 0000140F 0210000000F8       
  3046 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3046 0000141E 000000000000000000 
  3047 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3047 00001430 FFFFFF0000         
  3048 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3048 0000143E 0000000003200028   
  3049 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3049 0000144F 000000000000000000 
  3050 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3050 00001461 000000000000000000 
  3051 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3051 00001473 0000000000         
  3052 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3052 00001481 4E4F204E41         
  3053 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3053 0000148F 00004641           
  3054 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3055 0000149A FFFF                    		dw 0FFFFh
  3056 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3056 000014A5 0210000000F8       
  3057 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3057 000014B4 000000000000000000 
  3058 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3058 000014C6 FFFFFF0000         
  3059 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3059 000014D4 0000000003200028   
  3060 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3060 000014E5 000000000000000000 
  3061 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3061 000014F7 000000000000000000 
  3062 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3062 00001509 0000000000         
  3063 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3063 00001517 4E4F204E41         
  3064 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3064 00001525 00004641           
  3065 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3066 00001530 FFFF                    		dw 0FFFFh
  3067 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3067 0000153B 0210000000F8       
  3068 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3068 0000154A 000000000000000000 
  3069 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3069 0000155C FFFFFF0000         
  3070 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3070 0000156A 0000000003200028   
  3071 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3071 0000157B 000000000000000000 
  3072 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3072 0000158D 000000000000000000 
  3073 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3073 0000159F 0000000000         
  3074 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3074 000015AD 4E4F204E41         
  3075 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3075 000015BB 00004641           
  3076 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3077 000015C6 FFFF                    		dw 0FFFFh
  3078 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3078 000015D1 0210000000F8       
  3079 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3079 000015E0 000000000000000000 
  3080 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3080 000015F2 FFFFFF0000         
  3081 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3081 00001600 0000000003200028   
  3082 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3082 00001611 000000000000000000 
  3083 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3083 00001623 000000000000000000 
  3084 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3084 00001635 0000000000         
  3085 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3085 00001643 4E4F204E41         
  3086 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3086 00001651 00004641           
  3087 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3088 0000165C FFFF                    bds_24:		dw 0FFFFh
  3089 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3089 00001667 0210000000F8       
  3090 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3090 00001676 000000000000000000 
  3091 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3091 00001688 FFFFFF0000         
  3092 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3092 00001696 0000000003200028   
  3093 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3093 000016A7 000000000000000000 
  3094 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3094 000016B9 000000000000000000 
  3095 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3095 000016CB 0000000000         
  3096 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3096 000016D9 4E4F204E41         
  3097 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3097 000016E7 00004641           
  3098 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3099                                  
  3100                                  %endif
  3101                                  
  3102                                  ; 09/12/2023
  3103                                  %if 0
  3104                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  3105                                  
  3106                                  bdss:		dw 0FFFFh		
  3107                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3108                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3109                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3110                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3111                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3112                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3113                                  		db 32h,	20h, 20h, 20h, 0
  3114                                  		dw 0FFFFh
  3115                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3116                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3117                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3118                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3119                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3120                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3121                                  		db 32h,	20h, 20h, 20h, 0
  3122                                  		dw 0FFFFh
  3123                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3124                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3125                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3126                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3127                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3128                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3129                                  		db 32h,	20h, 20h, 20h, 0
  3130                                  		dw 0FFFFh
  3131                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3132                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3133                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3134                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3135                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3136                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3137                                  		db 32h,	20h, 20h, 20h, 0
  3138                                  		dw 0FFFFh
  3139                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3140                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3141                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3142                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3143                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3144                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3145                                  		db 32h,	20h, 20h, 20h, 0
  3146                                  		dw 0FFFFh
  3147                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3148                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3149                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3150                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3151                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3152                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3153                                  		db 32h,	20h, 20h, 20h, 0
  3154                                  		dw 0FFFFh
  3155                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3156                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3157                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3158                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3159                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3160                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3161                                  		db 32h,	20h, 20h, 20h, 0
  3162                                  		dw 0FFFFh
  3163                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3164                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3165                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3166                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3167                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3168                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3169                                  		db 32h,	20h, 20h, 20h, 0
  3170                                  		dw 0FFFFh
  3171                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3172                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3173                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3174                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3175                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3176                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3177                                  		db 32h,	20h, 20h, 20h, 0
  3178                                  		dw 0FFFFh
  3179                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3180                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3181                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3182                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3183                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3184                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3185                                  		db 32h,	20h, 20h, 20h, 0
  3186                                  		dw 0FFFFh
  3187                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3188                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3189                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3190                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3191                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3192                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3193                                  		db 32h,	20h, 20h, 20h, 0
  3194                                  		dw 0FFFFh
  3195                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3196                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3197                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3198                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3199                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3200                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3201                                  		db 32h,	20h, 20h, 20h, 0
  3202                                  		dw 0FFFFh
  3203                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3204                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3205                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3206                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3207                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3208                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3209                                  		db 32h,	20h, 20h, 20h, 0
  3210                                  		dw 0FFFFh
  3211                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3212                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3213                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3214                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3215                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3216                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3217                                  		db 32h,	20h, 20h, 20h, 0
  3218                                  		dw 0FFFFh
  3219                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3220                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3221                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3222                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3223                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3224                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3225                                  		db 32h,	20h, 20h, 20h, 0
  3226                                  		dw 0FFFFh
  3227                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3228                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3229                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3230                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3231                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3232                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3233                                  		db 32h,	20h, 20h, 20h, 0
  3234                                  		dw 0FFFFh
  3235                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3236                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3237                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3238                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3239                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3240                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3241                                  		db 32h,	20h, 20h, 20h, 0
  3242                                  		dw 0FFFFh
  3243                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3244                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3245                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3246                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3247                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3248                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3249                                  		db 32h,	20h, 20h, 20h, 0
  3250                                  		dw 0FFFFh
  3251                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3252                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3253                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3254                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3255                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3256                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3257                                  		db 32h,	20h, 20h, 20h, 0
  3258                                  		dw 0FFFFh
  3259                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3260                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3261                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3262                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3263                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3264                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3265                                  		db 32h,	20h, 20h, 20h, 0
  3266                                  		dw 0FFFFh
  3267                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3268                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3269                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3270                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3271                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3272                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3273                                  		db 32h,	20h, 20h, 20h, 0
  3274                                  		dw 0FFFFh
  3275                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3276                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3277                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3278                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3279                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3280                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3281                                  		db 32h,	20h, 20h, 20h, 0
  3282                                  		dw 0FFFFh
  3283                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3284                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3285                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3286                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3287                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3288                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3289                                  		db 32h,	20h, 20h, 20h, 0
  3290                                  		dw 0FFFFh
  3291                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3292                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3293                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3294                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3295                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3296                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3297                                  		db 32h,	20h, 20h, 20h, 0
  3298                                  		dw 0FFFFh
  3299                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3300                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3301                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3302                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3303                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3304                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3305                                  		db 32h,	20h, 20h, 20h, 0
  3306                                  		db 0
  3307                                  %endif
  3308                                  
  3309                                  ;---------------------------------------------------------------------------
  3310                                  ; Possibly disposable data, goes at end of data group
  3311                                  ;***************************************************************************
  3312                                  
  3313                                  ; Possibly disposable data, goes at end of data group
  3314                                  
  3315                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  3316                                  ;
  3317                                  ;	entry:	(ah) = function, 02 or 0a for read.
  3318                                  ;		(dl) = drive number (80h or 81h).
  3319                                  ;		(dh) = head number.
  3320                                  ;		(ch) = cylinder number.
  3321                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  3322                                  ;		(al) = number of sectors.
  3323                                  ;		(es:bx) = address of read buffer.
  3324                                  ;		for more on register contents see rom bios listing.
  3325                                  ;		stack set up for return by an iret.
  3326                                  ;
  3327                                  ;	exit:	(ah) = status of current operation.
  3328                                  ;		(cy) = 1 if failed, 0 if successful.
  3329                                  ;		for other register contents see rom bios listing.
  3330                                  ;
  3331                                  ;	uses:	
  3332                                  ;
  3333                                  ;
  3334                                  ;	warning: uses old13 vector for non-read calls.
  3335                                  ;		does direct calls to the at rom.
  3336                                  ;		does segment arithmatic.
  3337                                  ;
  3338                                  ;	effects: performs disk i/o operation.
  3339                                  
  3340                                  ; 16/10/2022
  3341                                  ; 28/05/2019
  3342                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  3343                                  
  3344                                  ;* offsets into cmd_block for registers
  3345                                  
  3346                                  pre_comp equ 0	;write pre-compensation
  3347                                  sec_cnt	 equ 1	;sector count
  3348                                  sec_num	 equ 2	;sector number
  3349                                  cyl_low	 equ 3	;cylinder number, low part
  3350                                  cyl_high equ 4	;cylinder number, high part
  3351                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  3352                                  		;            bit 4 = drive number, bits 3-0 have head number)
  3353                                  cmd_reg  equ 6	;command register
  3354                                  
  3355                                  ; 01/10/2022
  3356                                  disk_status1	equ 74h
  3357                                  hf_num		equ 75h
  3358                                  control_byte	equ 76h
  3359                                  
  3360                                  ibm_disk_io:				
  3361 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  3362 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  3363 000016F7 80FC02                  		cmp	ah, 2
  3364 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  3365 000016FC 80FC0A                  		cmp	ah, 0Ah
  3366 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  3367                                  atd1:
  3368 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  3369                                  		;jmp	cs:Old13	; use rom int 13h handler
  3370                                  ;-----------------------------------------------------------------------------
  3371                                  
  3372                                  atd2:					
  3373 00001706 53                      		push	bx
  3374 00001707 51                      		push	cx
  3375 00001708 52                      		push	dx
  3376 00001709 57                      		push	di
  3377 0000170A 1E                      		push	ds
  3378 0000170B 06                      		push	es
  3379 0000170C 50                      		push	ax
  3380 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  3381                                  					; establish bios segment addressing
  3382 00001710 8ED8                    		mov	ds, ax
  3383                                  		; 16/10/2022
  3384 00001712 C606740000              		mov	byte [disk_status1], 0
  3385                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  3386                                  					; initially no error code.
  3387 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  3388 0000171A 3A167500                		cmp	dl, [hf_num]
  3389                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  3390 0000171E 7207                    		jb	short atd3	; disk number in range
  3391                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  3392 00001720 C606740001              		mov	byte [disk_status1], 1
  3393 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  3394                                  					; return
  3395                                  ; ----------------------------------------------------------------------------
  3396                                  
  3397                                  atd3:					
  3398 00001727 53                      		push	bx
  3399 00001728 8CC0                    		mov	ax, es
  3400 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  3401 0000172D 01D8                    		add	ax, bx
  3402 0000172F 8EC0                    		mov	es, ax
  3403 00001731 5B                      		pop	bx
  3404 00001732 83E30F                  		and	bx, 0Fh
  3405 00001735 0E                      		push	cs
  3406 00001736 E8DF00                  		call	check_dma
  3407 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  3408 0000173B 58                      		pop	ax
  3409 0000173C 50                      		push	ax
  3410 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  3411 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  3412 00001743 EE                      		out	dx, al		; write out command modifier
  3413 00001744 E86B00                  		call	docmd		; carry out command
  3414                                  ; ----------------------------------------------------------------------------
  3415                                  
  3416                                  atd4:	
  3417                                  
  3418                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  3419                                  ;	      and save a couple bytes while were at it.
  3420                                  				
  3421 00001747 58                      		pop	ax
  3422                                  		;mov	ah, ds:74h	; [disk_status1]
  3423 00001748 8A267400                		mov	ah, [disk_status1]
  3424 0000174C 08E4                    		or	ah, ah
  3425 0000174E 7401                    		jz	short atd5
  3426 00001750 F9                      		stc
  3427                                  atd5:					
  3428 00001751 07                      		pop	es
  3429 00001752 1F                      		pop	ds
  3430 00001753 5F                      		pop	di
  3431 00001754 5A                      		pop	dx
  3432 00001755 59                      		pop	cx
  3433 00001756 5B                      		pop	bx
  3434 00001757 CA0200                  		retf	2		; far return, dropping flags
  3435                                  
  3436                                  ; =============== S U B	R O U T	I N E ========================================
  3437                                  
  3438                                  ;***	setcmd - set up cmd_block for the disk operation
  3439                                  ;
  3440                                  ;	entry:	(ds) = bios data segment.
  3441                                  ;		(es:bx) in seg:000x form.
  3442                                  ;		other registers as in int 13h call
  3443                                  ;	
  3444                                  ;	exit:	cmd_block set up for disk read call.
  3445                                  ;		control_byte set up for disk operation.
  3446                                  ;		(al) = control byte modifier
  3447                                  ;
  3448                                  ;	sets the fields of cmd_block using the register contents
  3449                                  ;	and the contents of the disk parameter block for the given drive.
  3450                                  ;
  3451                                  ;	warning: (ax) destroyed.
  3452                                  ;		does direct calls to the at rom.
  3453                                  
  3454                                  setcmd:		; proc near		
  3455                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  3456                                  		; 16/10/2022
  3457 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  3458                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  3459 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  3460 00001762 80FC02                  		cmp	ah, 2
  3461 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  3462 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  3463                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  3464                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  3465                                  setc1:					
  3466 0000176C 88C8                    		mov	al, cl
  3467 0000176E 243F                    		and	al, 3Fh		; mask sector number
  3468                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  3469                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  3470 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  3471 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  3472 00001777 88C8                    		mov	al, cl
  3473 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  3474                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  3475 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  3476 0000177F 89D0                    		mov	ax, dx
  3477 00001781 C0E004                  		shl	al, 4		; drive	number
  3478 00001784 80E40F                  		and	ah, 0Fh
  3479 00001787 08E0                    		or	al, ah		; head number
  3480 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  3481                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  3482 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  3483 0000178E 06                      		push	es
  3484 0000178F 53                      		push	bx
  3485 00001790 0E                      		push	cs
  3486 00001791 E85C00                  		call	get_vec
  3487 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  3488                                  			 		; write pre-comp from disk parameters
  3489 00001798 C1E802                  		shr	ax, 2
  3490                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  3491 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  3492                                  					; only use low part
  3493 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  3494                                  					; control byte modifier
  3495 000017A2 5B                      		pop	bx
  3496 000017A3 07                      		pop	es
  3497                                  		;mov	ah, ds:76h	; [control_byte]
  3498 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  3499 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  3500 000017AB 08C4                    		or	ah, al
  3501                                  		;mov	ds:76h,	ah
  3502 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  3503 000017B1 C3                      		retn
  3504                                  
  3505                                  ; =============== S U B	R O U T	I N E ========================================
  3506                                  
  3507                                  ;***	docmd - carry out read operation to at hard disk
  3508                                  ;
  3509                                  ;	entry:	(es:bx) = address for read in data.
  3510                                  ;		cmd_block set up for disk read.
  3511                                  ;
  3512                                  ;	exit:	buffer at (es:bx) contains data read.
  3513                                  ;		disk_status1 set to error code (0 if success).
  3514                                  ;
  3515                                  ;	
  3516                                  ;
  3517                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  3518                                  ;		no check is made for dma boundary overrun.
  3519                                  ;
  3520                                  ;	effects: programs disk controller.
  3521                                  ;		performs disk input.
  3522                                  
  3523                                  docmd:		; proc near		
  3524 000017B2 89DF                    		mov	di, bx
  3525 000017B4 0E                      		push	cs
  3526 000017B5 E84000                  		call	command
  3527 000017B8 7535                    		jnz	short doc3
  3528                                  doc1:					
  3529 000017BA 0E                      		push	cs
  3530 000017BB E84200                  		call	waitt		; wait for controller to complete read
  3531 000017BE 752F                    		jnz	short doc3
  3532 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  3533 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  3534 000017C6 FC                      		cld			; string op goes up
  3535 000017C7 FA                      		cli			; disable interrupts
  3536                                  					; (bug was forgetting this)
  3537                                  
  3538                                  ;	M062 -- some of these old machines have intermittent failures
  3539                                  ;		when the read is done at full speed. Instead of using
  3540                                  ;		a string rep instruction, we'll use a loop. There is
  3541                                  ;		a slight performance hit, but it only affects these
  3542                                  ;		very old machines with an exact date code match, and
  3543                                  ;		it makes said machines more reliable
  3544                                  ;
  3545                                  ;M062	repz	insw		;read in sector
  3546                                  
  3547                                  rsct_loop:				
  3548 000017C8 6D                      		insw
  3549 000017C9 E2FD                    		loop	rsct_loop
  3550 000017CB FB                      		sti
  3551                                  		; 16/10/2022
  3552 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  3553                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  3554                                  					; (ds =	40h)
  3555 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  3556 000017D3 0E                      		push	cs
  3557 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  3558 000017D7 7216                    		jb	short doc3
  3559 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  3560 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  3561 000017DF FA                      		cli
  3562 000017E0 F36C                    		rep insb		; read in ecc
  3563 000017E2 FB                      		sti
  3564                                  doc2:					
  3565 000017E3 0E                      		push	cs
  3566 000017E4 E82900                  		call	check_status
  3567 000017E7 7506                    		jnz	short doc3	; operation failed
  3568                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  3569 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  3570 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  3571                                  doc3:					
  3572 000017EF C3                      		retn
  3573                                  
  3574                                  ; =============== S U B	R O U T	I N E ========================================
  3575                                  
  3576                                  ;***	define where the rom routines are actually located
  3577                                  ;	   in the buggy old AT BIOS that we might need to
  3578                                  ;	   install a special level of int13 handler for
  3579                                  
  3580                                  ; 16/10/2022
  3581                                  
  3582                                  romsegment 	equ 0F000h  ; segment
  3583                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  3584                                  romwait		equ 2E7Fh   ; offset in romsegment
  3585                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  3586                                  romcheck_status equ 2EF8h   ; offset in romsegment
  3587                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  3588                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  3589                                  romfret		equ 0FF65h  ; far return in rom	
  3590                                  
  3591                                  ;***	get_vec - get pointer to hard disk parameters.
  3592                                  ;
  3593                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  3594                                  ;
  3595                                  ;	exit:	(es:bx) = address of disk parameters table.
  3596                                  ;
  3597                                  ;	uses:	ax for segment computation.
  3598                                  ;
  3599                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  3600                                  ;	or 70h (disk 1).
  3601                                  ;	
  3602                                  ;	warning: (ax) destroyed.
  3603                                  ;		this does a direct call to the at rom.
  3604                                  
  3605                                  get_vec:	; proc near		
  3606                                  		;push	0FF65h		; romfret ; far	return in rom
  3607                                  		;jmp	far ptr	0F000h:2F8Eh
  3608                                  		; 16/10/2022
  3609 000017F0 6865FF                  		push	romfret		; far return in rom
  3610 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  3611                                  
  3612                                  ; =============== S U B	R O U T	I N E ========================================
  3613                                  
  3614                                  ;***	command - send contents of cmd_block to disk controller.
  3615                                  ;
  3616                                  ;	entry:	control_byte 
  3617                                  ;		cmd_block - set up with values for hard disk controller.
  3618                                  ;
  3619                                  ;	exit:	disk_status1 = error code.
  3620                                  ;		nz if error, zr for no error.
  3621                                  ;
  3622                                  ;
  3623                                  ;	warning: (ax), (cx), (dx) destroyed.
  3624                                  ;		does a direct call to the at rom.
  3625                                  ;
  3626                                  ;	effects: programs disk controller.
  3627                                  
  3628                                  command:	; proc near		
  3629                                  		;push	0FF65h		; romfret ; far	return in rom
  3630                                  		;jmp	far ptr	0F000h:2E1Eh
  3631                                  		; 16/10/2022
  3632 000017F8 6865FF                  		push	romfret		; far return in rom
  3633 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  3634                                  
  3635                                  ; =============== S U B	R O U T	I N E ========================================
  3636                                  
  3637                                  ;***	waitt - wait for disk interrupt
  3638                                  ;
  3639                                  ;	entry:	nothing.
  3640                                  ;
  3641                                  ;	exit:	disk_status1 = error code.
  3642                                  ;		nz if error, zr if no error.
  3643                                  ;
  3644                                  ;
  3645                                  ;	warning: (ax), (bl), (cx) destroyed.
  3646                                  ;		does a direct call to the at rom.
  3647                                  ;		
  3648                                  ;	effects: calls int 15h, function 9000h.
  3649                                  
  3650                                  waitt:		; proc near		
  3651                                  		;push	0FF65h		; romfret ; far	return in rom
  3652                                  		;jmp	far ptr	0F000h:2E7Fh
  3653                                  		; 16/10/2022
  3654 00001800 6865FF                  		push	romfret		; far return in rom
  3655 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  3656                                  
  3657                                  ; =============== S U B	R O U T	I N E ========================================
  3658                                  
  3659                                  ;***	wait_drq - wait for data request.
  3660                                  ;
  3661                                  ;	entry:	nothing.
  3662                                  ;
  3663                                  ;	exit:	disk_status1 = error code.
  3664                                  ;		cy if error, nc if no error.
  3665                                  ;
  3666                                  ;	warning: (al), (cx), (dx) destroyed.
  3667                                  ;		does a direct call to the at rom.
  3668                                  
  3669                                  wait_drq:	; proc near		
  3670                                  		;push	0FF65h		; romfret ; far	return in rom
  3671                                  		;jmp	far ptr	0F000h:2EE2h
  3672                                  		; 16/10/2022
  3673 00001808 6865FF                  		push	romfret		; far return in rom
  3674 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  3675                                  
  3676                                  ; =============== S U B	R O U T	I N E ========================================
  3677                                  
  3678                                  ;***	check_status - check hard disk status.
  3679                                  ;
  3680                                  ;	entry:	nothing.
  3681                                  ;
  3682                                  ;	exit:	disk_status1 = error code.
  3683                                  ;		nz if error, zr if no error.
  3684                                  ;
  3685                                  ;	warning: (ax), (cx), (dx) destroyed.
  3686                                  ;		does a direct call to the at rom.
  3687                                  
  3688                                  check_status:	; proc near		
  3689                                  		;push	0FF65h		; romfret ; far	return in rom
  3690                                  		;jmp	far ptr	0F000h:2EF8h
  3691                                  		; 16/10/2022
  3692 00001810 6865FF                  		push	romfret		; far return in rom
  3693 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  3694                                  
  3695                                  ; =============== S U B	R O U T	I N E ========================================
  3696                                  
  3697                                  ;***	check_dma - check for dma overrun 64k segment.
  3698                                  ;
  3699                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  3700                                  ;		cmd_block set up for operation.
  3701                                  ;
  3702                                  ;	exit:	disk_status1 - error code.
  3703                                  ;		cy if error, nc if no error.
  3704                                  ;
  3705                                  ;	warning: does a direct call to the at rom.
  3706                                  
  3707                                  check_dma:	; proc near		
  3708                                  		;push	0FF65h		; romfret ; far	return in rom
  3709                                  		;jmp	far ptr	0F000h:2F69h
  3710                                  		; 16/10/2022
  3711 00001818 6865FF                  		push	romfret		; far return in rom
  3712 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  3713                                  
  3714                                  ;-----------------------------------------------------------------------------
  3715                                  
  3716                                  endatrom:
  3717                                  
  3718                                  ; ----------------------------------------------------------------------------
  3719                                  
  3720                                  ;; M015 -- begin changes
  3721                                  ;;
  3722                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  3723                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  3724                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  3725                                  ;; If our init code detects this error, it will install this
  3726                                  ;; special Int13 hook through the same mechanism that was set
  3727                                  ;; up for the IBM patch above. This code is also dynamically
  3728                                  ;; relocated by MSINIT.
  3729                                  
  3730                                  compaq_disk_io:
  3731 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  3732                                  					;
  3733                                  					; the following	label defines the end of the at	rom patch.
  3734                                  					; this is used at configuration	time.
  3735                                  					;
  3736                                  					; warning!!!
  3737                                  					; this code will be dynamically	relocated by msinit
  3738 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  3739                                  no_hookit:				
  3740                                  		;jmp	cs:Old13
  3741                                  		; 16/10/2022
  3742 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  3743                                  
  3744                                  ; ----------------------------------------------------------------------------
  3745                                  
  3746                                  mebbe_hookit:
  3747 0000182A 80FA80                  		cmp	dl, 80h
  3748 0000182D 72F6                    		jb	short no_hookit
  3749 0000182F 1E                      		push	ds
  3750                                  		
  3751                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3752                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  3753                                  		;push	ax
  3754                                  		;mov	ax, 40h
  3755                                  		;mov	ds, ax
  3756                                  		;pop	ax
  3757 00001830 6A40                    		push	40h
  3758 00001832 1F                      		pop	ds
  3759                                  
  3760 00001833 9C                      		pushf
  3761                                  		;call	cs:Old13
  3762                                  		; 16/10/2022
  3763 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  3764 00001839 1F                      		pop	ds
  3765 0000183A CA0200                  		retf	2
  3766                                  
  3767                                  ; ----------------------------------------------------------------------------
  3768                                  
  3769 0000183D 00                      end_compaq_i13hook: db 0			
  3770                                  
  3771                                  ; =============== S U B	R O U T	I N E ========================================
  3772                                  
  3773                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3774                                  %if 0  
  3775                                  
  3776                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  3777                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  3778                                  
  3779                                  daycnt_to_day:	; proc far
  3780                                  
  3781                                  ; entry: [daycnt] = number of days since 1-1-80
  3782                                  ;
  3783                                  ; return: ch - century in bcd
  3784                                  ;	  cl - year in bcd
  3785                                  ;	  dh - month in bcd
  3786                                  ;	  dl - day in bcd
  3787                                  
  3788                                  		; 16/10/2022		
  3789                                  		push	word [cs:daycnt] ; save daycnt
  3790                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  3791                                  					; # days from 1-1-1980 to 1-1-2000
  3792                                  		jnb	short century20
  3793                                  		mov	byte [cs:base_century], 19
  3794                                  		mov	byte [cs:base_year], 80
  3795                                  		jmp	short years
  3796                                  ; ----------------------------------------------------------------------------
  3797                                  		
  3798                                  century20:				
  3799                                  		mov	byte [cs:base_century], 20
  3800                                  		mov	byte [cs:base_year], 0
  3801                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  3802                                  					; adjust daycnt
  3803                                  years:					
  3804                                  		xor	dx, dx
  3805                                  		mov	ax, [cs:daycnt]
  3806                                  		mov	bx, 1461	; (366+365*3)
  3807                                  					; # of days in a Leap year block
  3808                                  		div	bx		; AX = # of leap block,	DX = daycnt
  3809                                  		mov	[cs:daycnt], dx	; save daycnt left
  3810                                  		mov	bl, 4
  3811                                  		mul	bl		; AX = # of years. Less	than 100
  3812                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  3813                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  3814                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  3815                                  		jbe	short leapyear	; within 366+355+355+355 days.
  3816                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  3817                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  3818                                  		mov	cx, 3		; And next three years are normal
  3819                                  regularyear:				
  3820                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  3821                                  		jbe	short yeardone	; {if (daycnt >	365)
  3822                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  3823                                  		sub	word [cs:daycnt], 365	;   }
  3824                                  		loop	regularyear	; }
  3825                                  					;
  3826                                  					; should never fall through loop
  3827                                  leapyear:				
  3828                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  3829                                  					; change month table.
  3830                                  yeardone:				
  3831                                  		xor	bx, bx
  3832                                  		xor	dx, dx
  3833                                  		mov	ax, [cs:daycnt]
  3834                                  		;mov	si, offset month_tab
  3835                                  		mov	si, month_tab	; 19/10/2022
  3836                                  		mov	cx, 12
  3837                                  months:					
  3838                                  		inc	bl
  3839                                  
  3840                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3841                                  		;mov	dl, [cs:si]
  3842                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3843                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3844                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3845                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3846                                  		
  3847                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3848                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3849                                  					; dh=0
  3850                                  		jbe	short month_done
  3851                                  		inc	si		; next month
  3852                                  		sub	ax, dx		; adjust daycnt
  3853                                  		loop	months		;
  3854                                  					; should never fall through loop
  3855                                  month_done:				
  3856                                  		mov	byte [cs:month_tab+1], 28
  3857                                  					; restore month table value
  3858                                  		mov	dl, bl
  3859                                  		mov	dh, [cs:base_year]
  3860                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3861                                  		call	far [cs:bintobcd]
  3862                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3863                                  					; dl = bcd day,	al = month
  3864                                  		xchg	dl, al
  3865                                  		call	far [cs:bintobcd]
  3866                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3867                                  		xchg	dh, al
  3868                                  		call	far [cs:bintobcd]
  3869                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3870                                  		xchg	cl, al
  3871                                  		call	far [cs:bintobcd]
  3872                                  		;call	cs:bintobcd	; ch = bcd century
  3873                                  		mov	ch, al
  3874                                  		pop	word [cs:daycnt] ; restore original value
  3875                                  		retf
  3876                                  
  3877                                  enddaycnttoday:	
  3878                                  
  3879                                  %endif
  3880                                  
  3881                                  ; =============== S U B	R O U T	I N E ========================================
  3882                                  
  3883                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3884                                  %if 0  
  3885                                  
  3886                                  bin_to_bcd:	; proc far		; real time clock support
  3887                                  
  3888                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3889                                  ;into a bcd value in al. ah destroyed.	
  3890                                  		
  3891                                  		push	cx		
  3892                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3893                                  		mov	cl, 4
  3894                                  		shl	ah, cl		; mov the high digit to	high nibble
  3895                                  		or	al, ah
  3896                                  		pop	cx
  3897                                  		retf
  3898                                  %endif
  3899                                  
  3900                                  ; ----------------------------------------------------------------------------
  3901                                  
  3902                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3903                                  ; resume facility. the system clock needs to be reset after resume.
  3904                                  
  3905                                  ; the following routine is executed at resume time when the system
  3906                                  ; powered on after suspension. it reads the real time clock and
  3907                                  ; resets the system time and date, and then irets.
  3908                                  
  3909                                  ; warning!!! this code will be dynamically relocated by msinit.
  3910                                  
  3911                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3912                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3913                                  int_6Ch:
  3914 0000183E 0E                      		push	cs
  3915 0000183F 1F                      		pop	ds
  3916                                  		;cmp	byte [cs:inHMA], 0  
  3917 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  3918 00001845 7405                    		jz      short int6c
  3919 00001847 BB[2A07]                		mov     bx, EnsureA20On
  3920 0000184A FFD3                    		call    bx
  3921                                  int6c:					
  3922                                  		;push	cs
  3923                                  		;pop	ds
  3924 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  3925 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  3926 00001854 9D                      		popf
  3927 00001855 E81300                  		call	read_real_date	; get the date from the clock
  3928 00001858 FA                      		cli
  3929 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  3930 0000185D FB                      		sti
  3931 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  3932 00001861 FA                      		cli
  3933 00001862 B401                    		mov	ah, 1
  3934 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3935                                  					; CX:DX	= clock	count
  3936                                  					; Return: time of day set
  3937 00001866 FB                      		sti
  3938                                  		;jmp	int6c_ret_addr	; long jump
  3939                                  		; 16/10/2022
  3940 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  3941                                  
  3942                                  ; =============== S U B	R O U T	I N E ========================================
  3943                                  
  3944                                  ;   read_real_date reads real-time clock for date and returns the number
  3945                                  ;   of days elapsed since 1-1-80 in si
  3946                                  
  3947                                  read_real_date:	; proc near		
  3948 0000186B 50                      		push	ax
  3949 0000186C 51                      		push	cx
  3950 0000186D 52                      		push	dx
  3951 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3952 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3953                                  					; Return: CX:DX	= clock	count
  3954                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3955                                  					; midnight
  3956                                  					; Otherwise, AL	> 0
  3957 00001872 5A                      		pop	dx
  3958 00001873 59                      		pop	cx
  3959 00001874 58                      		pop	ax
  3960 00001875 50                      		push	ax
  3961 00001876 53                      		push	bx
  3962 00001877 51                      		push	cx
  3963 00001878 52                      		push	dx
  3964                                  		;mov	word [cs:daycnt2], 1
  3965                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3966                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3967 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  3968                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3969 0000187F B404                    		mov	ah, 4
  3970 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3971                                  					; Return: DL = day in BCD
  3972                                  					; DH = month in	BCD
  3973                                  					; CL = year in BCD
  3974                                  					; CH = century (19h or 20h)
  3975 00001883 7303                    		jnb	short read_ok
  3976 00001885 E98300                  		jmp	r_d_ret
  3977                                  ;-----------------------------------------------------------------------------
  3978                                  
  3979                                  read_ok:
  3980 00001888 882E[FC05]              		mov	[bin_date_time], ch
  3981 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  3982 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  3983 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  3984                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3985                                  		; 08/08/2023
  3986                                  		;mov	byte [daycnt2], 2
  3987 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  3988 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  3989 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  3990                                  		;mov	word [cs:daycnt2], 3
  3991                                  		; 08/08/2023
  3992                                  		;mov	byte [daycnt2], 3
  3993 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  3994 000018A5 E8DB00                  		call	date_verify
  3995 000018A8 7261                    		jb	short r_d_ret
  3996                                  		;mov	word [cs:daycnt2], 0
  3997                                  		; 08/08/2023
  3998 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  3999 000018AF E8A100                  		call	in_bin
  4000 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  4001 000018B5 98                      		cbw
  4002 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  4003 000018BB 7503                    		jnz	short century_19 ; no
  4004 000018BD 83C064                  		add	ax, 100		; add in a century
  4005                                  century_19:				
  4006 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  4007 000018C3 B104                    		mov	cl, 4		; leap year every 4
  4008 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  4009 000018C7 88E3                    		mov	bl, ah		; save odd years
  4010 000018C9 98                      		cbw			; zero ah
  4011 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  4012                                  					; # of days in leap year blocks
  4013 000018CD F7E1                    		mul	cx
  4014                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  4015                                  		; 08/08/2023
  4016 000018CF A3[0006]                		mov	[daycnt2], ax
  4017 000018D2 88D8                    		mov	al, bl		; get odd years	count
  4018 000018D4 98                      		cbw
  4019 000018D5 09C0                    		or	ax, ax
  4020 000018D7 740B                    		jz	short leap_year
  4021 000018D9 B96D01                  		mov	cx, 365		; days in year
  4022 000018DC F7E1                    		mul	cx
  4023                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  4024                                  		; 08/08/2023
  4025 000018DE 0106[0006]              		add	[daycnt2], ax
  4026 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  4027                                  					; possibly account for a leap day
  4028                                  ;-----------------------------------------------------------------------------
  4029                                  
  4030                                  leap_year:
  4031 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  4032 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  4033                                  leap_adjustment:
  4034                                  		;inc	word [cs:daycnt2] ; account for leap day
  4035                                  		; 08/08/2023
  4036 000018EB FF06[0006]              		inc	word [daycnt2]
  4037                                  no_leap_adjustment:			
  4038 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  4039 000018F3 30ED                    		xor	ch, ch
  4040 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  4041                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  4042                                  		; 08/08/2023
  4043 000018F6 010E[0006]              		add	[daycnt2], cx
  4044 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  4045                                  		; 08/08/2023
  4046                                  		;xor	ch, ch
  4047 000018FE 49                      		dec	cx		; january starts at offset 0
  4048                                  		
  4049                                  		; 08/08/2023
  4050                                  		;shl	cx, 1		; word offset
  4051                                  		;;mov	si, month_table
  4052                                  		;add	si, cx
  4053                                  		;; 16/10/2022
  4054                                  		;; ds must be same with cs here, if so..
  4055                                  		;; what for cs: prefixes are used !?)
  4056                                  		;; mov	ax, [cs:si]
  4057                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  4058                                  		;mov	ax, [si]	; mov ax, [cs:si]
  4059                                  		;			; get #	days in	previous months
  4060                                  		;add	[cs:daycnt2], ax
  4061                                  
  4062                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  4063                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  4064 000018FF B400                    		mov	ah, 0
  4065 00001901 BE[8F04]                		mov	si, month_tab
  4066                                  r_d_sum_loop:
  4067 00001904 AC                      		lodsb
  4068 00001905 0106[0006]              		add	[daycnt2], ax
  4069 00001909 E2F9                    		loop	r_d_sum_loop
  4070                                  r_d_ret:
  4071                                  		;mov	si, [cs:daycnt2]
  4072                                  		; 08/08/2023
  4073 0000190B 8B36[0006]              		mov	si, [daycnt2]
  4074 0000190F 5A                      		pop	dx
  4075 00001910 59                      		pop	cx
  4076 00001911 5B                      		pop	bx
  4077 00001912 58                      		pop	ax
  4078 00001913 C3                      		retn
  4079                                  
  4080                                  ;-----------------------------------------------------------------------------
  4081                                  
  4082                                  r_t_retj:				
  4083 00001914 31C9                    		xor	cx, cx
  4084 00001916 31D2                    		xor	dx, dx
  4085 00001918 EB38                    		jmp	short r_t_ret
  4086                                  
  4087                                  ; =============== S U B	R O U T	I N E ========================================
  4088                                  
  4089                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  4090                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  4091                                  
  4092                                  read_real_time:	; proc near		
  4093 0000191A B402                    		mov	ah, 2
  4094 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  4095                                  					; Return: CH = hours in	BCD
  4096                                  					; CL = minutes in BCD
  4097                                  					; DH = seconds in BCD
  4098 0000191E 72F4                    		jb	short r_t_retj
  4099 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  4100 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  4101 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  4102 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  4103 00001931 E89F00                  		call	bcd_verify
  4104 00001934 72DE                    		jb	short r_t_retj
  4105 00001936 E88500                  		call	time_verify
  4106 00001939 72D9                    		jb	short r_t_retj
  4107 0000193B E81500                  		call	in_bin		; from bcd to bin
  4108 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  4109 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  4110 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  4111 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  4112                                  		; 16/10/2022
  4113                                  		; 17/09/2022
  4114                                  		; 31/05/2019
  4115 0000194E FF1E[0606]              		call	far [ttticks] 
  4116                                  		;call	dword ptr ttticks ; note: indirect far call
  4117                                  					; cx:dx	= number of ticks
  4118                                  					; (at 18.2 ticks per sec.)
  4119                                  r_t_ret:				
  4120 00001952 C3                      		retn
  4121                                  
  4122                                  ; =============== S U B	R O U T	I N E =======================================
  4123                                  
  4124                                  ;   in_bin converts bin_date_time values from bcd to bin
  4125                                  
  4126                                  in_bin:		; proc near
  4127 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  4128 00001956 E81F00                  		call	bcd_to_bin
  4129 00001959 A2[FC05]                		mov	[bin_date_time], al
  4130 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  4131 0000195F E81600                  		call	bcd_to_bin
  4132 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  4133 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  4134 00001968 E80D00                  		call	bcd_to_bin
  4135 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  4136 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  4137 00001971 E80400                  		call	bcd_to_bin
  4138 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  4139 00001977 C3                      		retn
  4140                                  
  4141                                  ; =============== S U B	R O U T	I N E =======================================
  4142                                  
  4143                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  4144                                  ;   a binary representation in al
  4145                                  ;   ah is destroyed
  4146                                  
  4147                                  bcd_to_bin:	; proc near
  4148 00001978 88C4                    		mov	ah, al
  4149 0000197A 240F                    		and	al, 0Fh
  4150 0000197C B104                    		mov	cl, 4
  4151 0000197E D2EC                    		shr	ah, cl
  4152 00001980 D50A                    		aad
  4153 00001982 C3                      		retn
  4154                                  
  4155                                  ; =============== S U B	R O U T	I N E ========================================
  4156                                  
  4157                                  ;   date_verify loosely checks bcd date values to be in range
  4158                                  ;   in bin_date_time
  4159                                  
  4160                                  date_verify:	; proc near
  4161 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  4162 00001988 7732                    		ja	short date_error
  4163 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  4164 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  4165                                  		;jb	short date_error
  4166                                  		; 12/12/2022
  4167 00001991 722A                    		jb	short date_err2
  4168 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  4169                                  		;jb	short date_error
  4170                                  		; 12/12/2022
  4171 00001998 7223                    		jb	short date_err2
  4172                                  century_20:
  4173 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  4174 0000199F 771B                    		ja	short date_error
  4175 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  4176 000019A6 7714                    		ja	short date_error
  4177 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  4178                                  		;jbe	short date_error
  4179 000019AD 760D                    		jna	short date_error
  4180 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  4181 000019B4 7706                    		ja	short date_error
  4182                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  4183                                  		;;jbe	short date_error
  4184                                  		;jna	short date_error
  4185                                  		; 12/12/2022
  4186                                  		; cf=0
  4187                                  		;clc
  4188                                  		; 12/12/2022
  4189 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  4190 000019BB C3                      		retn
  4191                                  ;-----------------------------------------------------------------------------
  4192                                  
  4193                                  date_error:
  4194 000019BC F9                      		stc
  4195                                  date_err2:
  4196 000019BD C3                      		retn
  4197                                  
  4198                                  ; =============== S U B	R O U T	I N E ========================================
  4199                                  
  4200                                  ; time_verify very loosely checks bcd date values to be in range
  4201                                  ; in bin_date_time
  4202                                  
  4203                                  time_verify:	; proc near
  4204 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  4205 000019C3 770C                    		ja	short time_error
  4206 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  4207 000019CA 7705                    		ja	short time_error
  4208                                  		; 12/12/2022h
  4209                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  4210                                  		;ja	short time_error
  4211                                  		;clc
  4212                                  		;retn
  4213                                  		; 12/12/2022
  4214 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  4215                                  time_error:
  4216                                  bv_error:
  4217 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  4218 000019D2 C3                      		retn
  4219                                  
  4220                                  ; ----------------------------------------------------------------------------
  4221                                  
  4222                                  ;time_error:				
  4223                                  		;stc
  4224                                  		;retn
  4225                                  
  4226                                  ; =============== S U B	R O U T	I N E ========================================
  4227                                  
  4228                                  ;   bcd_verify checks values in bin_date_time to be valid
  4229                                  ;   bcd numerals.  carry set if any nibble out of range
  4230                                  
  4231                                  bcd_verify:	; proc near
  4232 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  4233 000019D6 BB[FC05]                		mov	bx, bin_date_time
  4234                                  bv_loop:
  4235 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  4236 000019DB 88C4                    		mov	ah, al
  4237 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  4238                                  					; is 1's place in range?
  4239 000019E0 3C0A                    		cmp	al, 10
  4240 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  4241 000019E4 D0EC                    		shr	ah, 1
  4242 000019E6 D0EC                    		shr	ah, 1
  4243 000019E8 D0EC                    		shr	ah, 1
  4244 000019EA D0EC                    		shr	ah, 1
  4245 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  4246 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  4247 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  4248 000019F4 43                      		inc	bx		; next byte
  4249 000019F5 49                      		dec	cx
  4250 000019F6 75E1                    		jnz	short bv_loop
  4251 000019F8 F8                      		clc			; set success flag
  4252 000019F9 C3                      		retn
  4253                                  ; ----------------------------------------------------------------------------
  4254                                  
  4255                                  		; 12/12/2022
  4256                                  ;bv_error:
  4257                                  		;stc			; set error flag
  4258                                  		;retn
  4259                                  
  4260                                  ; ----------------------------------------------------------------------------
  4261                                  
  4262                                  endk09:
  4263                                  
  4264                                  ; ----------------------------------------------------------------------------
  4265                                  
  4266                                  ;------------------------------------------------------------------------
  4267                                  ;									:
  4268                                  ;	System initialization						:
  4269                                  ;									:
  4270                                  ;	The entry conditions are established by the bootstrap		:
  4271                                  ;	loader and are considered unknown. The following jobs		:
  4272                                  ;	will be performed by this module:				:
  4273                                  ;									:
  4274                                  ;	1.	All device initialization is performed			:
  4275                                  ;	2.	A local stack is set up and DS:SI are set		:
  4276                                  ;		to point to an initialization table. Then		:
  4277                                  ;		an inter-segment call is made to the first		:
  4278                                  ;		byte of the dos 					:
  4279                                  ;	3.	Once the dos returns from this call the ds		:
  4280                                  ;		register has been set up to point to the start		:
  4281                                  ;		of free memory. The initialization will then		:
  4282                                  ;		load the command program into this area 		:
  4283                                  ;		beginning at 100 hex and transfer control to		:
  4284                                  ;		this program.						:
  4285                                  ;									:
  4286                                  ;------------------------------------------------------------------------
  4287                                  
  4288                                  ; 01/10/2022
  4289                                  ; 08/01/2018 - Retro DOS v4.0
  4290                                  
  4291                                  ; drvfat must be the first location of freeable space!
  4292                                  
  4293                                  align 2
  4294                                  		;db 90h
  4295                                  
  4296                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4297                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  4298                                  
  4299                                  ; 30/12/2022
  4300                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  4301                                  	
  4302 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  4303                                  ; 09/12/2023
  4304                                  ;bios_l:	dw 0			; first	sector of data (low word)
  4305                                  ;bios_h:	dw 0			; first	sector of data (high word)
  4306                                  First_Data_Sector:
  4307 000019FC 0000                    		dw 0
  4308 000019FE 0000                    		dw 0
  4309 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  4310                                  ;fbigfat:	db 0			; flags	for drive
  4311 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  4312 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  4313                                  ; 09/12/2023
  4314 00001A06 00                      fbigfat:	db 0			; flags	for drive
  4315 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  4316 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  4317                                  ; 12/12/2023
  4318                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  4319 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  4320                                  
  4321                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  4322                                  ; call to determine drive parameters.
  4323                                  
  4324 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  4325 00001A0D 00                      		db 0	; 09/12/2023
  4326                                  ;sec_trk:	db 9			; sec/trk returned by rom
  4327 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  4328 00001A0F 00                      		db 0	; 09/12/2023
  4329                                  ; 09/12/2023
  4330 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  4331 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  4332                                  
  4333                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4334                                  Orig_Int1Eh_Table:
  4335 00001A12 0000                    		dw 0
  4336 00001A14 0000                    		dw 0
  4337                                  
  4338                                  ; ----------------------------------------------------------------------------
  4339                                  
  4340                                  ; 09/12/2023
  4341                                  %if 0
  4342                                  
  4343                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  4344                                  		dw 2048, 0201h, 112, 0
  4345                                  		dw 8192, 0402h, 256, 0
  4346                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  4347                                  		dw 65535, 1004h, 1024, 0
  4348                                  					; default disktable under
  4349                                  					; the assumption of total fat size <= 128 kb,
  4350                                  					; and the maximum size of fat entry = 16 bit.
  4351                                  %endif
  4352                                  
  4353                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4354                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  4355                                  
  4356                                  		; 09/12/2023
  4357                                  		; 08/08/2023
  4358                                  		; disktable.totalsectors: resw 1 ; high word
  4359                                  		;			  resw 1 ; low word
  4360                                  		; disktable.shiftcount:   resb 1
  4361                                  		; disktable.secperclus:   resb 1
  4362                                  		; disktable.rdirentries:  resw 1
  4363                                  		; disktable.bigflag:      resw 1
  4364 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  4364 00001A1F 00                 
  4365                                  					   ; (32680 sectors, 16340 KB)
  4366 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  4366 00001A29 00                 
  4367                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  4368 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  4368 00001A33 00                 
  4369 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  4369 00001A3D 00                 
  4370 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  4370 00001A47 00                 
  4371 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  4371 00001A51 00                 
  4372                                  		; 09/12/2023
  4373                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  4374 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  4374 00001A5B 00                 
  4375                                  					   ; (fbig and fbigbig flags are set)			
  4376                                  			
  4377                                  ; ----------------------------------------------------------------------------
  4378                                  
  4379                                  ;******************************************************
  4380                                  ;variables for mini disk initialization
  4381                                  ;******************************************************
  4382                                  
  4383                                  ; 01/10/2022
  4384                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  4385                                  
  4386 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  4387 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  4388 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  4389 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  4390                                  					; of bds table. needed to figure out
  4391                                  					; the dosdatasg address.
  4392 00001A62 0000                    mini_hdlim:	dw 0			
  4393 00001A64 0000                    mini_seclim:	dw 0
  4394                                  
  4395                                  ; 19/12/2023
  4396                                  ; 09/12/2023
  4397                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  4398                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  4399                                  
  4400                                  ;end of mini disk init variables **********************
  4401                                  
  4402                                  ; ----------------------------------------------------------------------------
  4403                                  			
  4404 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  4405                                  
  4406                                  ; 13/12/2022
  4407                                  %if 0
  4408                                  
  4409                                  ;align 2
  4410                                  		db  90h	
  4411                                  
  4412                                  ; the following are the recommended bpbs for the media that we know of so far.
  4413                                  
  4414                                  ;struc bpbx
  4415                                  ;   resw 1 ; 512
  4416                                  ;   resb 1
  4417                                  ;   resw 1 ; 1
  4418                                  ;   resb 1 ; 2
  4419                                  ;   resw 1
  4420                                  ;   resw 1
  4421                                  ;   resb 1
  4422                                  ;   resw 1
  4423                                  ;   resw 1
  4424                                  ;   resw 1 ; 2
  4425                                  ;   resw 1
  4426                                  ;   resw 1 ; hidden sector high
  4427                                  ;   resd 1 ; extended total sectors
  4428                                  ;.size:
  4429                                  ;endstruc
  4430                                  
  4431                                  ; 08/01/2019 - Retro DOS v4.0
  4432                                  
  4433                                  ; 20/04/2019
  4434                                  
  4435                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  4436                                  
  4437                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4438                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  4439                                  
  4440                                  ; 09/12/2022
  4441                                  BPB48T:
  4442                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  4443                                  		; 48 tpi diskettes	;
  4444                                  		dw	512		; physical sector size in bytes
  4445                                  		db	2		; sectors/allocation unit
  4446                                  		dw	1		; reserved sectors for dos
  4447                                  		db	2		; number of allocation tables
  4448                                  		dw	112		; number of directory entries
  4449                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  4450                                  		db	0FDh		; media descriptor
  4451                                  		dw	2		; number of fat sectors
  4452                                  		dw	9		; sectors per track
  4453                                  		dw	2		; heads
  4454                                  		dw	0		; hidden sector count (low word)
  4455                                  		dw	0		; hidden sector (high)
  4456                                  		dw	0		; number of sectors (low)
  4457                                  		dw	0		; number of sectors (high)
  4458                                  		; 09/12/2023
  4459                                  		; FAT32 extensions (to BDS)
  4460                                  		times	28 db 0
  4461                                  		;
  4462                                  		db 90h
  4463                                  ;align 2
  4464                                  BPB96T:
  4465                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  4466                                  		; 96 tpi diskettes	;
  4467                                  		dw	512		; physical sector size in bytes
  4468                                  		db	1		; sectors/allocation unit
  4469                                  		dw	1		; reserved sectors for dos
  4470                                  		db	2		; number of allocation tables
  4471                                  		dw	224		; number of directory entries
  4472                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  4473                                  		db	0F9h		; media descriptor
  4474                                  		dw	7		; number of fat sectors
  4475                                  		dw	15		; sectors per track
  4476                                  		dw	2		; heads
  4477                                  		dw	0		; hidden sector count (low word)
  4478                                  		dw	0		; hidden sector (high)
  4479                                  		dw	0		; number of sectors (low)
  4480                                  		dw	0		; number of sectors (high)
  4481                                  		; 09/12/2023
  4482                                  		; FAT32 extensions (to BDS)
  4483                                  		times	28 db 0
  4484                                  		;
  4485                                  		db 90h
  4486                                  ;align 2
  4487                                  BPB35:
  4488                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  4489                                  		; 3.5" diskettes - 720 KB ;		
  4490                                  		dw	512		; physical sector size in bytes
  4491                                  		db	2		; sectors/allocation unit
  4492                                  		dw	1		; reserved sectors for dos
  4493                                  		db	2		; number of allocation tables
  4494                                  		dw	112		; number of directory entries
  4495                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  4496                                  		db	0F9h		; media descriptor
  4497                                  		dw	3		; number of fat sectors
  4498                                  		dw	9		; sectors per track
  4499                                  		dw	2		; heads
  4500                                  		dw	0		; hidden sector count (low word)
  4501                                  		dw	0		; hidden sector (high)
  4502                                  		dw	0		; number of sectors (low)
  4503                                  		dw	0		; number of sectors (high)
  4504                                  		; 09/12/2023
  4505                                  		; FAT32 extensions (to BDS)
  4506                                  		times	28 db 0
  4507                                  		;
  4508                                  		db 90h
  4509                                  ;align 2
  4510                                  
  4511                                  ;align 2
  4512                                  ;BPB144:
  4513                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  4514                                  ;
  4515                                  ;		dw	512		; physical sector size in bytes
  4516                                  ;		db	1		; sectors/allocation unit
  4517                                  ;		dw	1		; reserved sectors for dos
  4518                                  ;		db	2		; number of allocation tables
  4519                                  ;		dw	224		; number of directory entries
  4520                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  4521                                  ;		db	0F0h		; media descriptor
  4522                                  ;		dw	9		; number of fat sectors
  4523                                  ;		dw	18		; sectors per track
  4524                                  ;		dw	2		; heads
  4525                                  ;		dw	0		; hidden sector count (low word)
  4526                                  ;		dw	0		; hidden sector (high)
  4527                                  ;		dw	0		; number of sectors (low)
  4528                                  ;		dw	0		; number of sectors (high)
  4529                                  ;
  4530                                  ;		db 90h
  4531                                  ;align 2
  4532                                  
  4533                                  BPB288:
  4534                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  4535                                  		; 3.5" diskettes - 2.88 MB ;	 
  4536                                  		dw	512		; physical sector size in bytes
  4537                                  		db	2		; sectors/allocation unit
  4538                                  		dw	1		; reserved sectors for dos
  4539                                  		db	2		; number of allocation tables
  4540                                  		dw	240		; number of directory entries
  4541                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  4542                                  		db	0F0h		; media descriptor
  4543                                  		dw	3		; number of fat sectors
  4544                                  		dw	9		; sectors per track
  4545                                  		dw	2		; heads
  4546                                  		dw	0		; hidden sector count (low word)
  4547                                  		dw	0		; hidden sector (high)
  4548                                  		dw	0		; number of sectors (low)
  4549                                  		dw	0		; number of sectors (high)
  4550                                  		; 09/12/2023
  4551                                  		; FAT32 extensions (to BDS)
  4552                                  		times	28 db 0
  4553                                  		;
  4554                                  		db 90h
  4555                                  ;align 2
  4556                                  
  4557                                  %endif
  4558                                  
  4559                                  ; ----------------------------------------------------------------------------
  4560                                  					; align	2
  4561                                  ; 09/12/2022
  4562                                  %if 0
  4563                                  bpbtable:	dw bpb48t		; 48tpi	drives
  4564                                  		dw bpb96t		; 96tpi	drives
  4565                                  		dw bpb35		; 3.5" drives
  4566                                  		dw bpb35		; unused 8" diskette
  4567                                  		dw bpb35		; unused 8" diskette
  4568                                  		dw bpb35		; used for hard	disk
  4569                                  		dw bpb35		; used for tape	drive
  4570                                  		dw bpb35		; FFOTHER
  4571                                  		dw bpb35		; ERIMO
  4572                                  		dw bpb288		; 2.88MB drive
  4573                                  		;
  4574                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  4575                                  %endif
  4576                                  
  4577                                  ; 13/12/2022
  4578                                  %if 0
  4579                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  4580                                  		dw BPB96T		; 96tpi	drives
  4581                                  		dw BPB35		; 3.5" drives
  4582                                  		dw BPB35		; unused 8" diskette
  4583                                  		dw BPB35		; unused 8" diskette
  4584                                  		dw BPB35		; used for hard	disk
  4585                                  		dw BPB35		; used for tape	drive
  4586                                  		dw BPB35		; FFOTHER
  4587                                  		dw BPB35		; ERIMO
  4588                                  		dw BPB288		; 2.88MB drive
  4589                                  		;
  4590                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  4591                                  
  4592                                  %endif
  4593                                  
  4594                                  ; ----------------------------------------------------------------------------
  4595                                  
  4596                                  ;	entry point to call utility functions in Bios_Code. At this time,
  4597                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  4598                                  ;	  will not yet be moved to its final resting place, so we know
  4599                                  ;	  it'll be low.
  4600                                  ;
  4601                                  ;	to use this function, do a "push cs" and load bp with the offset of
  4602                                  ;	  the function you want to call in Bios_Code. This routine will
  4603                                  ;	  push the address of a retf in Bios_Code onto the stack which
  4604                                  ;	  will get executed when the utility function finishes. It will
  4605                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  4606                                  ;	  and a retf
  4607                                  
  4608                                  ; 16/10/2022
  4609                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  4610                                  ; 09/12/2022
  4611                                  BC_RETF equ bc_retf
  4612                                  
  4613                                  ; 09/12/2023
  4614                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  4615                                  
  4616                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  4617                                  					; 2C7h:0C8h = 70h:2638h
  4618                                  					; 09/12/2023
  4619                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  4620 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  4621                                  
  4622                                  ; ----------------------------------------------------------------------------
  4623                                  
  4624                                  call_bios_code:	; proc far			
  4625 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  4626                                  					; set up near return to far return
  4627 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  4628 00001A7B 55                      		push	bp		; save offset of utility function
  4629 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  4630                                  
  4631                                  ; ----------------------------------------------------------------------------
  4632                                  
  4633                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  4634                                  		; 20/12/2022
  4635 00001A7D 00                      flp_drvs:	db 0
  4636                                  		; 11/12/2023
  4637                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  4638                                  firstcluster_hw: 
  4639 00001A7E 0000                    		dw 0	; 06/04/2024
  4640 00001A80 00                      Boot_Drv:	db 0
  4641                                  
  4642                                  ; ----------------------------------------------------------------------------
  4643                                  
  4644                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4645                                  ;-----------------------------------------------------------------------------
  4646                                  ; PCDOS 7.1 CD BOOT option code 
  4647                                  ;-----------------------------------------------------------------------------
  4648                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  4649                                  
  4650                                  cd_boot_option:
  4651 00001A81 50                      		push	ax
  4652 00001A82 1E                      		push	ds
  4653 00001A83 06                      		push	es
  4654 00001A84 52                      		push	dx
  4655                                  cdbo_1:
  4656 00001A85 B401                    		mov	ah, 1
  4657 00001A87 CD16                    		int	16h			; KEYBOARD - status
  4658 00001A89 7406                    		jz	short cdbo_2
  4659 00001A8B 30E4                    		xor	ah, ah
  4660 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4661                                  						; Return: AH = scan code, AL = character
  4662 00001A8F EBF4                    		jmp	short cdbo_1
  4663                                  cdbo_2:
  4664 00001A91 0E                      		push	cs
  4665 00001A92 1F                      		pop	ds
  4666 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  4667 00001A96 AC                      		lodsb
  4668                                  cdbo_3:
  4669 00001A97 BB0700                  		mov	bx, 7
  4670 00001A9A B40E                    		mov	ah, 0Eh
  4671 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4672                                  						; AL = character, BH = display page (alpha modes)
  4673                                  						; BL = foreground color (graphics modes)
  4674 00001A9E AC                      		lodsb
  4675 00001A9F 08C0                    		or	al, al
  4676 00001AA1 75F4                    		jnz	short cdbo_3
  4677 00001AA3 B84000                  		mov	ax, 40h
  4678 00001AA6 8ED8                    		mov	ds, ax
  4679                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  4680                                  		; 09/12/2023
  4681 00001AA8 8B166C00                		mov	dx, [6Ch]
  4682 00001AAC 8B366E00                		mov	si, [6Eh]
  4683                                  wait_for_key:
  4684                                  		;push	bx
  4685                                  		;mov	bx, 7
  4686                                  		; bx = 7
  4687 00001AB0 B8080E                  		mov	ax, 0E08h
  4688 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4689                                  						; AL = character, BH = display page (alpha modes)
  4690                                  						; BL = foreground color (graphics modes)
  4691 00001AB5 B8200E                  		mov	ax, 0E20h
  4692 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4693                                  						; AL = character, BH = display page (alpha modes)
  4694                                  						; BL = foreground color (graphics modes)
  4695 00001ABA B8080E                  		mov	ax, 0E08h
  4696 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4697                                  						; AL = character, BH = display page (alpha modes)
  4698                                  						; BL = foreground color (graphics modes)
  4699                                  		;pop	bx
  4700                                  		;add	bx, 18			; 18.2 ticks per second
  4701                                  		; 09/12/2023
  4702 00001ABF 83C212                  		add	dx, 18
  4703 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  4704                                  continue_to_wait:
  4705 00001AC5 B401                    		mov	ah, 1
  4706 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  4707 00001AC9 741B                    		jz	short cdbo_5
  4708 00001ACB B400                    		mov	ah, 0
  4709 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4710                                  						; Return: AH = scan code, AL = character
  4711                                  
  4712                                  		; 09/12/2023
  4713                                  		;cmp	ax, 11Bh ; ESC key
  4714                                  		;jz	short cdb0_7
  4715                                  ;cdbo_4:
  4716                                  		;push	ax ; *
  4717 00001ACF 89C2                    		mov	dx, ax ; *
  4718                                  
  4719                                  		; CRLF (next line)
  4720                                  		;mov	bx, 7
  4721                                  		; bx = 7
  4722 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  4723 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4724                                  						; AL = character, BH = display page (alpha modes)
  4725                                  						; BL = foreground color (graphics modes)
  4726 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  4727 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4728                                  						; AL = character, BH = display page (alpha modes)
  4729                                  						; BL = foreground color (graphics modes)
  4730                                  		; 09/12/2023
  4731                                  		;pop	ax ; *
  4732                                  			
  4733 00001ADB 81FA1B01                		cmp	dx, 11Bh
  4734                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  4735 00001ADF 7418                    		je	short cdbo_7
  4736                                  
  4737                                  cdbo_4:		; 10/12/2023
  4738 00001AE1 5A                      		pop	dx
  4739 00001AE2 07                      		pop	es
  4740 00001AE3 1F                      		pop	ds
  4741 00001AE4 58                      		pop	ax
  4742 00001AE5 C3                      		retn
  4743                                  cdbo_5:
  4744 00001AE6 3B366E00                		cmp	si, [6Eh]
  4745 00001AEA 7504                    		jnz	short cdbo_6
  4746                                  		; 09/12/2023
  4747 00001AEC 3B166C00                		cmp	dx, [6Ch]
  4748                                  		;cmp	bx, [6Ch]
  4749                                  cdbo_6:
  4750 00001AF0 73D3                    		jnb	short continue_to_wait
  4751 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  4752 00001AF7 75B7                    		jnz	short wait_for_key
  4753                                  cdbo_7:
  4754                                  		; 09/12/2023
  4755                                  		; CRLF (next line)
  4756                                  		;
  4757                                  		;mov	bx, 7
  4758                                  		;mov	ax, 0E0Dh
  4759                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4760                                  		;				; AL = character, BH = display page (alpha modes)
  4761                                  		;				; BL = foreground color (graphics modes)
  4762                                  		;mov	ax, 0E0Ah
  4763                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4764                                  		;				; AL = character, BH = display page (alpha modes)
  4765                                  		;				; BL = foreground color (graphics modes)
  4766                                  		
  4767 00001AF9 0E                      		push	cs
  4768 00001AFA 1F                      		pop	ds
  4769                                  		; 09/12/2023
  4770 00001AFB 1E                      		push	ds
  4771 00001AFC 07                      		pop	es
  4772                                  		; es = ds = cs
  4773                                  
  4774 00001AFD B8004B                  		mov	ax, 4B00h
  4775                                  		;xor	dl, dl
  4776                                  		; 09/12/2023
  4777 00001B00 31D2                    		xor	dx, dx
  4778                                  		; dl = disk drive = 0  ; fd
  4779                                  		;mov	si, 1C93h
  4780 00001B02 BE[571B]                		mov	si, empty_dap_buff
  4781 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4782                                  		; DS:SI = Specification packet filled		
  4783                                  
  4784                                  		;mov	dx, 80h
  4785                                  		;xor	ax, ax
  4786                                  		; 09/12/2023
  4787 00001B07 B81300                  		mov	ax, 19
  4788 00001B0A 89F7                    		mov	di, si	
  4789                                  		;mov	byte [si], 13h
  4790                                  		;mov	[si+1], al
  4791 00001B0C AB                      		stosw	
  4792                                  		;mov	[si+2], dx
  4793 00001B0D B080                    		mov	al, 80h
  4794 00001B0F AB                      		stosw
  4795 00001B10 89C2                    		mov	dx, ax
  4796                                  		;mov	[si+4], ax
  4797                                  		;mov	[si+6], ax
  4798                                  		;mov	[si+8], ax
  4799                                  		;mov	[si+0Ah], ax
  4800                                  		;mov	[si+0Ch], ax
  4801                                  		;mov	[si+0Eh], ax
  4802                                  		;mov	[si+10h], al
  4803                                  		;mov	[si+11h], al
  4804                                  		;mov	[si+12h], al
  4805 00001B12 B90F00                  		mov	cx, 15
  4806 00001B15 F3AA                    		rep	stosb
  4807                                  		; dl = disk drive = 80h ; hd
  4808 00001B17 B8004B                  		mov	ax, 4B00h
  4809 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4810 00001B1C 31C0                    		xor	ax, ax
  4811                                  		; 09/12/2023
  4812                                  		;mov	dx, 80h
  4813                                  		; dx = 80h
  4814 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  4815                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  4816                                  		; 09/12/2023
  4817                                  		;push	cs
  4818                                  		;pop	es
  4819                                  		; es = ds = cs		
  4820                                  
  4821 00001B20 B80102                  		mov	ax, 201h
  4822                                  		;mov	bx, 152h
  4823 00001B23 BB[5201]                		mov	bx, disksector
  4824                                  		;mov	cx, 1
  4825                                  		; 09/12/2023
  4826 00001B26 41                      		inc	cx ; cx = 1
  4827                                  		;mov	dx, 80h
  4828                                  		; dx = 80h
  4829 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  4830                                  						; AL = number of sectors to read, CH = track, CL = sector
  4831                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  4832                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  4833                                  		;jc	short cdbo_8
  4834                                  		; 10/12/2023
  4835 00001B29 72B6                    		jc	short cdbo_4
  4836                                  
  4837 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  4838                                  		;jz 	short cdbo_9
  4839                                  		; 10/12/2023
  4840 00001B32 75AD                    		jnz	short cdbo_4
  4841                                  ;cdbo_8:
  4842                                  		;jmp	short cdbo_4
  4843                                  ;cdbo_9:
  4844                                  		; 10/12/2023
  4845                                  		; (stack clearing -pop- is not necessary here, 
  4846                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  4847                                  		;pop	ax ; near call return address
  4848                                  		;pop	cx ; +++ ; ch = [MediaByte]
  4849                                  
  4850                                  		; 09/12/2023
  4851                                  		;push	cs
  4852                                  		;pop	ds
  4853                                  		; ds = cs
  4854 00001B34 31C0                    		xor	ax, ax	; 0
  4855 00001B36 BF007C                  		mov	di, 7C00h
  4856 00001B39 8EC0                    		mov	es, ax
  4857 00001B3B 89DE                    		mov	si, bx
  4858 00001B3D 06                      		push	es
  4859 00001B3E 57                      		push	di
  4860 00001B3F B90001                  		mov	cx, 100h ; 256
  4861                                  		; 10/12/2023
  4862                                  		;cld	; not necessary (direction flag is already cleared) 
  4863 00001B42 F3A5                    		rep movsw
  4864 00001B44 8ED8                    		mov	ds, ax
  4865 00001B46 BE7800                  		mov	si, 78h
  4866 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  4867 00001B4D 8904                    		mov	[si], ax
  4868 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  4869 00001B53 894402                  		mov	[si+2], ax
  4870 00001B56 CB                      		retf
  4871                                  
  4872                                  ; ----------------------------------------------------------------------------
  4873                                  dap_buffer: ; 16/12/2023
  4874                                  
  4875 00001B57 13                      empty_dap_buff:	db 19
  4876                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  4877 00001B58 00<rep 12h>             		times 18 db 0
  4878 00001B6A 05                      time_counter:	db 5	; 5 seconds
  4879 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  4880                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  4881                                  		; 09/12/2023
  4882 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  4882 00001B76 206B657920746F2062-
  4882 00001B7F 6F6F742066726F6D20-
  4882 00001B88 4344206F7220445644-
  4882 00001B91 202E2E2E00         
  4883                                  
  4884                                  ; ----------------------------------------------------------------------------
  4885                                  
  4886                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  4887                                  
  4888                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  4889                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  4890                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  4891                                  
  4892                                  ;-----------------------------------------------------------------------------
  4893                                  ; entry point from boot sector
  4894                                  ;-----------------------------------------------------------------------------
  4895                                  
  4896                                  init:		; 27/12/2018
  4897                                  		; MSDOS 6.0 (MSINIT.ASM)
  4898                                  		;=============================================================
  4899                                  		;
  4900                                  		; entry from boot sector. the register contents are:
  4901                                  		;
  4902                                  		;   dl = int 13 drive number we booted from
  4903                                  		;   ch = media byte
  4904                                  		;   bx = first data sector on disk.
  4905                                  		;   ax = first data sector (high)
  4906                                  		;   di = sectors/fat for the boot media.
  4907                                  
  4908                                  		; 10/12/2023
  4909                                  		; Retro DOS v5.0 (IBMBIO.COM)
  4910                                  		;=============================================================
  4911                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  4912                                                  ; DL = [BootDrive]
  4913                                  		; CH = [MediaByte]
  4914                                  		; AX:BX = First data Sector
  4915                                  		; DS:SI = Original INT 1Eh table address
  4916                                  		;
  4917                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  4918                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  4919                                  		; DI = 78h !not used!
  4920                                  
  4921                                  		; 07/04/2018
  4922                                  		;=============================================================
  4923                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  4924                                                  ; DL = [bsDriveNumber]
  4925                                  		; DH = [bsMedia]
  4926                                  		; AX = [bsSectors] ; Total sectors
  4927                                  		; DS = 0, SS = 0
  4928                                  		; BP = 7C00h
  4929                                  
  4930                                  		; 29/09/2023
  4931                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  4932                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  4933                                  
  4934                                  		; 10/12/2023 - Retro DOS v5.0
  4935                                  		; ------------------------------------------------------------
  4936                                  		; INPUT (registers from Retro DOS v4-v5 boot sector):
  4937                                  		;  DL = [bsDriveNumber]
  4938                                  		;  DH = [bsMedia]
  4939                                  		;  SS = 0
  4940                                  		;  BP = 7C00h (boot sector address)
  4941                                  		;
  4942                                  		; If the boot drive is a CD (CDROM) or DVD
  4943                                  		;    and CD boot option is enabled/requested:
  4944                                  		;    AX = 'CD'
  4945                                  		; If the boot drive is a FD or HD 
  4946                                  		;    or CD boot option is not enabled/requested:
  4947                                  		;    AX <> 'CD'
  4948                                  
  4949                                  ; 20/12/2022
  4950                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  4951                                  %if 0	
  4952                                  		cli
  4953                                  
  4954                                  		push	ax
  4955                                  		xor	ax, ax
  4956                                  		mov	ds, ax
  4957                                  		pop	ax
  4958                                  %endif
  4959                                  
  4960                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  4961                                  ; 10/12/2023 - Retro DOS v5.0 (combined kernel)
  4962                                  
  4963                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  4964                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  4965                                  
  4966                                  ;-----------------------------------------------------------------------------
  4967                                  ; initialization - stage 1
  4968                                  ;-----------------------------------------------------------------------------
  4969                                  ; 02/06/2018 - Retro DOS v3.0
  4970                                  
  4971                                  		; 10/12/2023
  4972 00001B96 FC                      		cld	; may not be necessary
  4973                                  		
  4974                                  		; 21/12/2022
  4975                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  4976                                  		;mov	bx, 60h
  4977                                  		;mov	es, bx
  4978                                  		;mov	si, bp
  4979                                  		;sub	di, di
  4980                                  		;mov	cx, 35 ; 70 bytes, 35 words
  4981                                  		;;mov	cl, 35
  4982                                  		;rep	movsw
  4983                                  
  4984                                  		; 10/12/2023 - Retro DOS v5.0
  4985 00001B97 3D4344                  		cmp	ax, 'CD' ; is CD boot option enabled or not ?
  4986 00001B9A 7503                    		jne	short init0
  4987                                  
  4988 00001B9C E8E2FE                  		call	cd_boot_option
  4989                                  init0:
  4990 00001B9F 0E                      		push	cs
  4991 00001BA0 1F                      		pop	ds
  4992                                  
  4993                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4994                                  		;mov	[Boot_Drv], dl
  4995                                  
  4996                                  		; 20/03/2019 - Retro DOS v4.0
  4997                                  		;cli		; turn interrupts off while manupulating stack
  4998                                  		;mov	ss, cx	; set stack segment register
  4999                                  
  5000 00001BA1 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  5001                                  
  5002                                  		;sti		; turn interrupts on
  5003                                  
  5004                                  		; 27/03/2018
  5005                                  		;mov	cx, KERNEL_SIZE	; words !
  5006                                  
  5007                                  		; 20/03/2019
  5008 00001BA4 B90080                  		mov	cx, 32768 ; 65536 bytes
  5009                                  
  5010                                  		; 21/12/2022
  5011                                  		; 07/04/2018
  5012 00001BA7 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  5013                                  		;mov	bl, KERNEL_SEGMENT
  5014 00001BAA 8EC3                    		mov	es, bx
  5015 00001BAC 31FF                    		xor	di, di
  5016 00001BAE 89FE                    		mov	si, di
  5017                                  		
  5018                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  5019                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  5020 00001BB0 F3A5                    		rep	movsw
  5021                                  
  5022                                  		; 20/03/2019 - Retro DOS v4.0
  5023 00001BB2 53                      		push	bx
  5024                                  		;push	init0
  5025 00001BB3 68[B71B]                		push	init1	; 10/12/2023
  5026 00001BB6 CB                      		retf
  5027                                  ;init0:
  5028                                  		; 10/12/2023 - Retro DOS 5.0	
  5029                                  init1:
  5030                                  		; 20/12/2022
  5031                                  		; (combined kernel file > 64KB)
  5032                                  
  5033                                  		; 20/03/2019
  5034 00001BB7 B520                    		mov	ch, 20h
  5035 00001BB9 8ED9                    		mov	ds, cx ; 2000h
  5036                                  		;mov	cx, 1070h
  5037 00001BBB B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  5038 00001BBE 8EC1                    		mov	es, cx
  5039                                  		
  5040                                  		; 21/12/2022
  5041                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  5042                                  		; 28/09/2023
  5043                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  5044                                  
  5045                                  		;mov	cx, KERNEL_SIZE - 32768
  5046                                  		; 28/09/2023 (BugFix)
  5047 00001BC0 B9FE16                  		mov	cx, NXWORDCOUNT
  5048                                  		;mov	cx, NXBYTECOUNT
  5049                                  		;shr	cx, 1 ; 28/09/2023
  5050                                  		;xor	si, si
  5051                                  		;xor	di, di
  5052 00001BC3 F3A5                    		rep	movsw
  5053                                  
  5054                                  		; 28/09/2023
  5055                                  		;; 17/06/2018 
  5056                                  		;mov	ds, bx
  5057                                  		;; 21/03/2019
  5058                                  		;mov	es, bx
  5059                                  ;init0:
  5060                                  ;		;push	es
  5061                                  ;		push	bx ; 20/03/2019
  5062                                  ;		push	init1 ; 07/04/2018
  5063                                  ;		retf	; jump to 0070h:init1
  5064                                  ;init:
  5065                                  ;init1:
  5066                                  		; 10/12/2023
  5067                                  init2:
  5068                                  		; 20/12/2022
  5069                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  5070                                  		; for full MSDOS compatibility.
  5071                                  
  5072                                  		; 10/12/2023
  5073                                  		;cli	; not necessary for INT 1Eh
  5074                                  
  5075 00001BC5 8EC1                    		mov	es, cx ; 0
  5076 00001BC7 8ED9                    		mov	ds, cx ; 0
  5077                                  
  5078 00001BC9 B82205                  		mov	ax, SEC9
  5079                                  
  5080                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  5081 00001BCC B378                    		mov	bl, 1Eh*4
  5082                                  				; INT 1Eh points to diskette parms table
  5083                                  
  5084                                  		; check if the table is already at 0:SEC9 (0:0522h)
  5085                                   		; (do not move the DPT if is not original ROMBIOS table)
  5086                                  
  5087                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  5088                                  		;;jnz	short mov_dpt
  5089                                  
  5090                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  5091                                  		;je	short dont_mov_dpt
  5092                                  
  5093                                  		;mov	si, [bx] ; [1Eh*4]		
  5094                                  ;mov_dpt:
  5095                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  5096 00001BCE C537                    		lds	si, [bx]
  5097                                  		
  5098                                  		; 10/12/2023 - Retro DOS v5.0
  5099                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  5100                                  		;mov	[cs:Orig_Int1Eh_Table], si
  5101                                  
  5102 00001BD0 89C7                    		mov	di, ax  ; SEC9
  5103 00001BD2 B10B                    		mov	cl, 11
  5104                                  		;cld
  5105 00001BD4 F3A4                    		rep	movsb
  5106                                  
  5107                                  		; Set INT 1Eh vector/pointer to the new DPT address
  5108 00001BD6 8ED9                    		mov	ds, cx ; 0
  5109 00001BD8 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  5110 00001BDA 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  5111                                  ;dont_mov_dpt:
  5112                                  
  5113                                  ; 20/12/2022 - Retro DOS v4.0
  5114                                  %if 0
  5115                                  		; 27/12/2018 - Retro DOS v4.0
  5116                                  		; 'Starting MS-DOS...' message
  5117                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  5118                                  		; (0070h:96A3h)
  5119                                  
  5120                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  5121                                  		mov     ah, 0Eh
  5122                                  		;bh = 0
  5123                                          	mov     bl, 7		; "normal" attribute and page
  5124                                  startmsg_nxt_chr:  
  5125                                  		lodsb
  5126                                  		or	al, al
  5127                                          	jz	short startmsg_ok
  5128                                         
  5129                                  		int	10h		; video write
  5130                                          	jmp	short startmsg_nxt_chr
  5131                                  
  5132                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  5133                                  
  5134                                  startmsg_ok:
  5135                                  
  5136                                  %endif
  5137                                  
  5138                                  ;-----------------------------------------------------------------------------
  5139                                  ; initialization - stage 2
  5140                                  ;-----------------------------------------------------------------------------
  5141                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  5142                                  
  5143                                  
  5144                                  ; 19/03/2018
  5145                                  ; Retro DOS v2.0 (24/02/2018)
  5146                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  5147                                  
  5148                                  ;------------------------------------------------------------------------
  5149                                  ;									:
  5150                                  ;	System initialization						:
  5151                                  ;									:
  5152                                  ;	The entry conditions are established by the bootstrap		:
  5153                                  ;	loader and are considered unknown. The following jobs		:
  5154                                  ;	will be performed by this module:				:
  5155                                  ;									:
  5156                                  ;	1.	All device initialization is performed			:
  5157                                  ;	2.	A local stack is set up and DS:SI are set		:
  5158                                  ;		to point to an initialization table. Then		:
  5159                                  ;		an inter-segment call is made to the first		:
  5160                                  ;		byte of the dos 					:
  5161                                  ;	3.	Once the dos returns from this call the ds		:
  5162                                  ;		register has been set up to point to the start		:
  5163                                  ;		of free memory. The initialization will then		:
  5164                                  ;		load the command program into this area 		:
  5165                                  ;		beginning at 100 hex and transfer control to		:
  5166                                  ;		this program.						:
  5167                                  ;									:
  5168                                  ;------------------------------------------------------------------------
  5169                                  		
  5170                                  		; 20/12/2022
  5171                                  		; ----------------------
  5172                                  		; Registers
  5173                                  		; ----------------------
  5174                                  		; DL = [bsDriveNumber]
  5175                                  		; DH = [bsMedia]
  5176                                  		; DS = 0, ES = 0, SS = 0
  5177                                  		; BP = 7C00h
  5178                                  		; SP = 700h
  5179                                  		; ----------------------
  5180                                  		; CX = 0				
  5181                                  
  5182                                  ; 02/10/2022 - 20/12/2022
  5183                                  ; ------------------------------------------------------------------------------
  5184                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  5185                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  5186                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  5187                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  5188                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  5189                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  5190                                  ; ------------------------------------------------------------------------------
  5191                                  
  5192                                  ; msload will check the extended boot record and set ax, bx accordingly.
  5193                                  ;
  5194                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  5195                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  5196                                  ;;	data sector of the bios.
  5197                                  ;
  5198                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  5199                                  ;		mov	[cs:bios_l], bx
  5200                                  
  5201                                  ; with the following information from msload, we don't need the
  5202                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  5203                                  ;     limitation of msbio.com file.
  5204                                  
  5205                                  		; 10/12/2023
  5206                                  		; 21/12/2022
  5207                                  		;cli
  5208                                  
  5209 00001BDD 0E                      		push	cs		; Save a peck of interrupt vectors...
  5210 00001BDE 07                      		pop	es
  5211                                  		;push	cx
  5212                                  		;push	di
  5213                                  
  5214                                  		; 20/12/2022
  5215 00001BDF B105                    		mov	cl, 5
  5216                                  		;mov	cx, 5		; NUMROMVECTORS
  5217                                  					; no. of rom vectors to	be saved
  5218                                  		;mov	si, offset RomVectors ; point to list of int vectors
  5219 00001BE1 BE[0001]                		mov	si, RomVectors
  5220                                  
  5221                                  		; 10/12/2023
  5222 00001BE4 FA                      		cli
  5223                                  next_int_:		
  5224 00001BE5 2E                      		cs	; 16/10/2022
  5225 00001BE6 AC                      		lodsb		
  5226                                  		;lods	byte ptr cs:[si] ; cs lodsb
  5227 00001BE7 98                      		cbw			; ax = interrupt number
  5228 00001BE8 D1E0                    		shl	ax, 1
  5229 00001BEA D1E0                    		shl	ax, 1		; int no * 4
  5230 00001BEC 89C7                    		mov	di, ax		; interrupt vector address
  5231 00001BEE 87FE                    		xchg	si, di		; rombios interrupt vector address in si
  5232                                  					; saving address in di
  5233                                  		;lodsw			; movsw
  5234                                  		;stosw
  5235                                  		;lodsw			; movsw
  5236                                  		;stosw			; save the vector
  5237                                  		; 20/12/2022
  5238 00001BF0 A5                      		movsw
  5239 00001BF1 A5                      		movsw		
  5240                                  
  5241 00001BF2 87FE                    		xchg	si, di
  5242 00001BF4 E2EF                    		loop	next_int_
  5243                                  		
  5244                                  		;pop	di
  5245                                  		;pop	cx
  5246                                  
  5247                                  ; we need to save int13 in two places in case we are running on an at.
  5248                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  5249                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  5250                                  ; rom int13 routine, we must have that rom address also stored away.
  5251                                  
  5252                                  		; 20/12/2022
  5253                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  5254                                  		;mov	[cs:Orig13], ax
  5255                                  		;mov	ax, [cs:Old13+2]
  5256                                  		;mov	[cs:Orig13+2], ax
  5257                                  
  5258                                  		; 10/12/2023
  5259                                  		;cli
  5260                                  
  5261                                  		; 16/10/2022
  5262 00001BF6 C7064C00[ED06]          		mov	word [13h*4], block13
  5263                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  5264                                  					; set up int 13	for new	action
  5265 00001BFC 8C0E4E00                		mov	[13h*4+2], cs
  5266                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  5267 00001C00 C7065400[9907]          		mov	word [15h*4], Int15
  5268                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  5269                                  					; set up int 15	for new	action
  5270 00001C06 8C0E5600                		mov	[15h*4+2], cs
  5271                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  5272 00001C0A C7066400[5907]          		mov	word [19h*4], int19
  5273                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  5274                                  					; set up int 19	for new	action
  5275 00001C10 8C0E6600                		mov	[19h*4+2], cs
  5276                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  5277                                  
  5278                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5279 00001C14 A16800                  		mov	ax, [68h]	 ; 1Ah*4
  5280 00001C17 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  5281 00001C1B C7066800[AF06]          		mov	word [68h], Int1A
  5282 00001C21 8C0E6A00                		mov	[6Ah], cs
  5283                                  
  5284                                  		; 20/12/2022
  5285 00001C25 0E                      		push	cs
  5286 00001C26 1F                      		pop	ds
  5287                                  		
  5288                                  		; 10/12/2023
  5289 00001C27 A3[AB06]                		mov	[Orig1A], ax
  5290 00001C2A 893E[AD06]              		mov	[Orig1A+2], di
  5291                                  
  5292 00001C2E A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  5293 00001C31 A3[B400]                		mov	[Orig13], ax
  5294 00001C34 A1[0801]                		mov	ax, [Old13+2]
  5295 00001C37 A3[B600]                		mov	[Orig13+2], ax
  5296                                  					; ;
  5297 00001C3A FB                      		sti
  5298 00001C3B CD11                    		int	11h		; EQUIPMENT DETERMINATION
  5299                                  					; Return: AX = equipment flag bits
  5300                                  		; 10/12/2023
  5301                                  		;jmp	short chk_fd_count
  5302                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  5303                                  		; ((signature))
  5304                                  		;push	dx		; 52h ; 'R'
  5305                                  		;push	ax		; 50h ; 'P'
  5306                                  		;push	bx		; 53h ; 'S'
  5307                                  
  5308                                  ; we have to support a system that does not have any diskette
  5309                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  5310                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  5311                                  ; otherwise, the system has only hardfiles.
  5312                                  ;
  5313                                  ; important thing is that still, for compatibility reason, the drive letter
  5314                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  5315                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  5316                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  5317                                  ; drives will get "invalid drive letter ..." message. we are going to
  5318                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  5319                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  5320                                  
  5321                                  ; check the register returned by the equipment determination interrupt
  5322                                  ; we have to handle the case of no diskettes in the system by faking
  5323                                  ; two dummy drives.
  5324                                  ;
  5325                                  ; if the register indicates that we do have floppy drives we don't need
  5326                                  ; to do anything special.
  5327                                  ;
  5328                                  ; if the register indicates that we don't have any floppy drives then
  5329                                  ; what we need to do is set the fakefloppydrv variable, change the
  5330                                  ; register to say that we do have floppy drives and then go to execute
  5331                                  ; the code which starts at notsingle. this is because we can skip the
  5332                                  ; code given below which tries to find if there are one or two drives
  5333                                  ; since we already know about this.
  5334                                  
  5335                                  chk_fd_count:	; 10/12/2023
  5336                                  		;or	ax, 1	; *!!*
  5337                                  
  5338                                  		; 06/05/2019 - Retro DOS v4.0
  5339 00001C3D 88C1                    		mov	cl, al
  5340                                  
  5341                                  		; 12/12/2022
  5342 00001C3F A801                    		test	al, 1
  5343                                  		;test	ax, 1		; floppy drives	present	?
  5344 00001C41 751E                    		jnz	short normalfloppydrv ;	yes.
  5345                                  
  5346                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  5347                                  ; whether it is an old ROM BIOS or a new one
  5348                                  ;
  5349                                  ; WARNING !!!
  5350                                  ;
  5351                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  5352                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  5353                                  
  5354                                  		; 20/12/2022
  5355                                  		;push	ax
  5356                                  		;push	bx
  5357                                  		;push	cx
  5358 00001C43 52                      		push	dx
  5359                                  		;push	di
  5360 00001C44 06                      		push	es
  5361                                  
  5362 00001C45 B408                    		mov	ah, 8
  5363 00001C47 B200                    		mov	dl, 0
  5364 00001C49 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5365                                  					; DL = drive number
  5366                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5367                                  					; DL = number of consecutive drives
  5368                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5369 00001C4B 7202                    		jc	short _gdskp_error
  5370                                  		;;mov	[cs:flp_drvs], dl
  5371                                  		; 20/12/2022
  5372                                  		; ds = cs
  5373                                  		;mov	[flp_drvs], dl
  5374 00001C4D 88D1                    		mov	cl, dl
  5375                                  _gdskp_error:	
  5376                                  		; 20/12/2022			
  5377 00001C4F 07                      		pop	es
  5378                                  		;pop	di
  5379 00001C50 5A                      		pop	dx
  5380                                  		;pop	cx
  5381                                  		;pop	bx
  5382                                  		;pop	ax
  5383                                  		
  5384 00001C51 720E                    		jc	short normalfloppydrv
  5385                                  					; if error it is an old ROM BIOS
  5386                                  					; so, lets assume that ROM BIOS lied
  5387                                  		; 20/12/2022
  5388                                  		; ds = cs
  5389                                  		;cmp	byte [flp_drvs], 0
  5390                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  5391                                  		;jz	short _set_fake_flpdrv
  5392                                  		;;mov	al, [cs:flp_drvs]
  5393                                  		;mov	al, [flp_drvs]
  5394                                  		;;dec	al		; make it zero based
  5395                                  		;; 18/12/2022
  5396                                  		;dec	ax
  5397                                  		;jmp	short got_num_flp_drvs
  5398                                  		
  5399                                  		; 20/12/2022
  5400 00001C53 08C9                    		or	cl, cl ; [flp_drvs]
  5401 00001C55 7403                    		jz	short _set_fake_flpdrv		
  5402 00001C57 49                      		dec	cx	
  5403 00001C58 EB0B                    		jmp	short got_num_flp_drvs
  5404                                  ; ----------------------------------------------------------------------------
  5405                                  
  5406                                  _set_fake_flpdrv:
  5407                                  		; 20/12/2022
  5408                                  		; ds = cs
  5409                                  		;inc	cl	; cl = 1
  5410                                  		; 10/12/2023
  5411 00001C5A 41                      		inc	cx	; cl = 1
  5412 00001C5B 880E[111A]              		mov	[fakefloppydrv], cl ; 1
  5413                                  		;mov	byte [fakefloppydrv], 1		
  5414                                  		;;mov	byte [cs:fakefloppydrv], 1
  5415                                  					; we don't have any floppy drives.
  5416                                  		; 20/12/2022
  5417                                  		;mov	ax, 1
  5418 00001C5F EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  5419                                  ; ----------------------------------------------------------------------------
  5420                                  
  5421                                  normalfloppydrv:			; yes, bit 0 is 1.			
  5422                                  		; 20/12/2022
  5423                                  		;rol	al, 1		; there	exist floppy drives.
  5424                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  5425 00001C61 D0C1                    		rol	cl, 1
  5426 00001C63 D0C1                    		rol	cl, 1
  5427                                  got_num_flp_drvs:			
  5428                                  		;;and	ax, 3		; only look at bits 0 &	1
  5429                                  		; 18/12/2022
  5430                                  		;and	al, 3
  5431                                  		; 20/12/2022
  5432 00001C65 80E103                  		and	cl, 3
  5433 00001C68 7505                    		jnz	short notsingle	; zero means single drive system
  5434                                  		; 20/12/2022
  5435 00001C6A 41                      		inc	cx
  5436                                  		;inc	ax		; pretend it's a two drive system
  5437                                  settwodrive:				; set this to two fakedrives
  5438                                  		; 20/12/2022
  5439                                  		; ds = cs
  5440 00001C6B FE06[7800]              		inc	byte [single]
  5441                                  		;inc	byte [cs:single] ; remember this
  5442                                  notsingle:	
  5443                                  		; 20/12/2022			
  5444                                  		;inc	ax		; ax has number	of drives, 2-4
  5445                                  		;			; is also 0 indexed boot drive if we
  5446                                  		;			; booted off hard file
  5447                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  5448                                  		
  5449                                  		; 20/12/2022
  5450                                  		;inc	cl	; cl >= 2
  5451                                  		; 10/12/2023
  5452 00001C6F 41                      		inc	cx	; cl >= 2
  5453                                  
  5454                                  ; 16/10/2022
  5455                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  5456                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  5457                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  5458                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  5459                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  5460                                  SEC9	EQU	522h	; address of disk parameters
  5461                                  CHROUT	EQU	29h
  5462                                  LSTDRV	EQU     504h
  5463                                  
  5464                                  ; determine whether we booted from floppy or hard disk...
  5465                                  
  5466                                  		; 20/12/2022
  5467 00001C70 88C8                    		mov	al, cl	; 26/05/2019
  5468                                  
  5469 00001C72 F6C280                  		test	dl, 80h		; boot from floppy ?
  5470 00001C75 7502                    		jnz	short gothrd	; no.
  5471 00001C77 31C0                    		xor	ax, ax		; indicate boot	from drive a
  5472                                  		; 10/12/2023
  5473                                  		;mov	[Boot_Drv], al
  5474                                  gothrd:
  5475                                  
  5476                                  ; MSDOS 6.0
  5477                                  ;   ax = 0-based drive we booted from
  5478                                  ;   bios_l, bios_h set.
  5479                                  ;   cl = number of floppies including fake one
  5480                                  ;   ch = media byte
  5481                                  
  5482                                  ; Retro DOS 4.0 - 27/12/2018 
  5483                                  ;  (from Retro DOS v2.0 boot sector)
  5484                                  ;   dl = int 13 drive number we booted from
  5485                                  ;   dh = media byte
  5486                                  
  5487                                  		; 20/12/2022
  5488 00001C79 88F5                    		mov	ch, dh		; 01/07/2018
  5489                                  
  5490                                  		; cl = number of floppies
  5491                                  		; ch = media byte
  5492                                  
  5493                                  		; set up local stack
  5494                                  
  5495                                  		; 20/12/2022
  5496                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  5497                                  					; bios_l, bios_h set.
  5498                                  					; cl = number of floppies including fake one
  5499                                  					; ch = media byte
  5500                                  		; 20/12/2022
  5501                                  		; es = ds = cs
  5502                                  		; ss = 0
  5503                                  		; sp = 700h
  5504                                  
  5505                                  		; 20/12/2022
  5506                                  		;cli
  5507                                  		;mov	ss, dx		; set stack segment and stack pointer
  5508                                  		;mov	sp, 700h
  5509                                  		;sti
  5510                                  
  5511 00001C7B 51                      		push	cx ; (***) 	; save number of floppies and media byte
  5512                                  		
  5513 00001C7C 88EC                    		mov	ah, ch		; FAT ID to AH
  5514 00001C7E 50                      		push	ax ; (**)	; save boot drive number and media byte
  5515                                  		
  5516                                  ; let model_byte, secondary_model_byte be set here!!!
  5517                                  
  5518 00001C7F B4C0                    		mov	ah, 0C0h
  5519 00001C81 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  5520 00001C83 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  5521 00001C85 80FC00                  		cmp	ah, 0
  5522 00001C88 7510                    		jnz	short no_rom_system_conf
  5523                                  
  5524                                  ;		; 20/12/2022
  5525                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  5526                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  5527                                  ;
  5528                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  5529                                  ;
  5530                                  ;		on return:
  5531                                  ;		CF = 0 if successful
  5532                                  ;		   = 1 if error
  5533                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  5534                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  5535                                  ;
  5536                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  5537                                  ;
  5538                                  ;		Offset Size	     Description
  5539                                  ;
  5540                                  ;		  00   word   length of descriptor (8 minimum)
  5541                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  5542                                  ;		  03   byte   secondary model byte
  5543                                  ;		  04   byte   BIOS revision level (zero based)
  5544                                  ;		  05   byte   feature information, see below
  5545                                  ;		  06   dword  reserved
  5546                                  
  5547                                  		; 20/12/2022
  5548                                  		; ds = cs
  5549 00001C8A 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  5550 00001C8E A2[AF05]                		mov	[model_byte], al
  5551                                  		;mov	[cs:model_byte], al
  5552                                  					; get/save model byte
  5553 00001C91 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  5554 00001C95 A2[B005]                		mov	[secondary_model_byte], al
  5555                                  		;mov	[cs:secondary_model_byte], al
  5556                                  					; get/save secondary model byte
  5557 00001C98 EB0C                    		jmp	short turn_timer_on
  5558                                  ;-----------------------------------------------------------------------------
  5559                                  
  5560                                  no_rom_system_conf:			
  5561 00001C9A BEFFFF                  		mov	si, 0FFFFh
  5562 00001C9D 8EC6                    		mov	es, si
  5563                                  		; 20/12/2022
  5564 00001C9F 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  5565 00001CA3 A2[AF05]                		mov	[model_byte], al
  5566                                  		;mov	[cs:model_byte], al ; save model byte
  5567                                  turn_timer_on:				
  5568 00001CA6 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  5569 00001CA8 E620                    		out	20h, al		; Interrupt controller,	8259A.
  5570                                  					; AKPORT
  5571                                  
  5572                                  ; some olivetti m24 machines have an 8530 serial communications
  5573                                  ; chip installed at io address 50h and 52h. if we're running
  5574                                  ; on one of those, we must inhibit the normal aux port initialization
  5575                                  
  5576                                  		; 20/12/2022
  5577                                  		; ds = cs
  5578 00001CAA 803E[AF05]00            		cmp	byte [model_byte], 0
  5579                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  5580 00001CAF 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  5581                                  					; (except olivetti m24)
  5582 00001CB1 E466                    		in	al, 66h		; is 8530 installed?
  5583 00001CB3 A820                    		test	al, 20h
  5584 00001CB5 740A                    		jz	short not_olivetti_m24 ; we're done if not
  5585 00001CB7 B00F                    		mov	al, 0Fh		; double check
  5586 00001CB9 E650                    		out	50h, al
  5587 00001CBB E450                    		in	al, 50h
  5588 00001CBD A801                    		test	al, 1		; this test was	copied from olivetti
  5589 00001CBF 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  5590                                  
  5591                                  not_olivetti_m24:
  5592 00001CC1 B003                    		mov	al, 3		; init com4
  5593 00001CC3 E8DB09                  		call	aux_init
  5594 00001CC6 B002                    		mov	al, 2		; init com3
  5595 00001CC8 E8D609                  		call	aux_init
  5596 00001CCB B001                    		mov	al, 1		; init com2
  5597 00001CCD E8D109                  		call	aux_init
  5598 00001CD0 30C0                    		xor	al, al		; init com1
  5599 00001CD2 E8CC09                  		call	aux_init
  5600                                  
  5601                                  skip_aux_port_init:
  5602 00001CD5 B002                    		mov	al, 2		; init lpt3
  5603 00001CD7 E8BF09                  		call	print_init
  5604 00001CDA B001                    		mov	al, 1		; init lpt2
  5605 00001CDC E8BA09                  		call	print_init
  5606 00001CDF 30C0                    		xor	al, al		; init lpt1
  5607 00001CE1 E8B509                  		call	print_init
  5608                                  
  5609                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5610                                  		;mov	di, 534h	; offset INITSPOT
  5611                                  		;;mov	di, INITSPOT	; 0534h
  5612                                  		;			; IBMDOS.COM's first cluster - high word
  5613                                  		;			; 520h (the 2nd entry of root dir) + 14h
  5614                                  		;mov	ax, [di]
  5615                                  		;mov	[firstcluster_hw], ax
  5616                                  
  5617 00001CE4 31D2                    		xor	dx, dx	; 0
  5618 00001CE6 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  5619 00001CE8 8EC2                    		mov	es, dx
  5620 00001CEA 31C0                    		xor	ax, ax
  5621                                  		; 16/10/2022
  5622 00001CEC BF3405                  		mov	di, INITSPOT	; 0534h
  5623                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  5624                                  					; IBM wants 4 zeros here
  5625 00001CEF AB                      		stosw
  5626 00001CF0 AB                      		stosw
  5627 00001CF1 8CC8                    		mov	ax, cs		; fetch	segment
  5628 00001CF3 C7066C00[0E06]          		mov	word [BRKADR], cbreak
  5629                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  5630                                  					; break	entry point
  5631 00001CF9 A36E00                  		mov	[BRKADR+2], ax		
  5632                                  		;mov	ds:6Eh,	ax	; vector for break
  5633 00001CFC C706A400[8206]          		mov	word [CHROUT*4], outchr
  5634                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  5635 00001D02 A3A600                  		mov	[CHROUT*4+2], ax
  5636                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  5637                                  
  5638 00001D05 BF0400                  		mov	di, 4
  5639 00001D08 BB[1406]                		mov	bx, intret ; 19/10/2022
  5640                                  		;mov	bx, offset intret ; intret (cs:intret)
  5641                                  					; will initialize rest of interrupts
  5642 00001D0B 93                      		xchg	ax, bx
  5643 00001D0C AB                      		stosw			; location 4
  5644 00001D0D 93                      		xchg	ax, bx		; cs:
  5645 00001D0E AB                      		stosw			; int 1	; location 6
  5646 00001D0F 83C704                  		add	di, 4
  5647 00001D12 93                      		xchg	ax, bx
  5648 00001D13 AB                      		stosw			; location 12
  5649 00001D14 93                      		xchg	ax, bx		; cs:
  5650 00001D15 AB                      		stosw			; int 3	; location 14
  5651 00001D16 93                      		xchg	ax, bx
  5652 00001D17 AB                      		stosw			; location 16
  5653 00001D18 93                      		xchg	ax, bx		; cs:
  5654 00001D19 AB                      		stosw			; int 4	; location 18
  5655                                  
  5656                                  ;		; 20/12/2022
  5657                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  5658                                  ;		Address Size	Description	(BIOS/DOS Data Area)
  5659                                  ;	
  5660                                  ;		50:00	byte	Print screen status byte
  5661                                  ;				 00 = PrtSc not active,
  5662                                  ;				 01 = PrtSc in progress
  5663                                  ;				 FF = error
  5664                                  ;		50:01  3 bytes	Used by BASIC
  5665                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  5666                                  ;		50:05  10bytes	POST work area
  5667                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  5668                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  5669                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  5670                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  5671                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  5672                                  ;		50:20	word	DOS dynamic storage
  5673                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  5674                                  ;		50:30	4bytes	MODE command
  5675                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  5676                                  
  5677 00001D1A 89160005                		mov	[0500h], dx ; 0
  5678                                  		;mov	ds:500h, dx	; set print screen & break = 0
  5679 00001D1E 89160405                		mov	[LSTDRV], dx	; [0504h]
  5680                                  		;mov	ds:504h, dx	; clean	out last drive spec
  5681                                  
  5682                                  ; we need to initialize the cs:motorstartup variable from the disk
  5683                                  ; parameter table at sec9. the offsets in this table are defined in
  5684                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  5685                                  
  5686 00001D22 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  5687                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  5688                                  					; [522h+0Ah]
  5689                                  		; 20/12/2022
  5690                                  		; ds = 0
  5691                                  
  5692 00001D25 2EA2[2601]              		mov	[cs:motorstartup], al
  5693 00001D29 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  5694 00001D2F 720B                    		jb	short no_diddle	; no
  5695 00001D31 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  5696                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  5697                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  5698 00001D37 C6062205DF              		mov	byte [SEC9+0], 0DFh
  5699                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  5700                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  5701                                  no_diddle:
  5702 00001D3C CD12                    		int	12h		; MEMORY SIZE -
  5703                                  					; Return: AX = number of contiguous 1K blocks of memory
  5704 00001D3E B106                    		mov	cl, 6
  5705 00001D40 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  5706                                  		
  5707                                  		; 20/12/2022
  5708                                  		; 03/07/2018 - 27/12/2018
  5709                                  		;pop	cx ; (**)
  5710                                  		;mov	[cs:drvfat], cx
  5711                                  		
  5712 00001D42 50                      		push	ax ; (*)	; save real top	of memory
  5713                                  
  5714                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  5715                                  
  5716                                  ;M068 - BEGIN
  5717                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  5718                                  
  5719                                  		; 20/12/2022
  5720                                  		; ds = 0
  5721                                  
  5722                                  		;push	ds
  5723                                  		;push	bx		; pushes not required but since this
  5724                                  					; happens to be a last minute change
  5725                                  					; & since it is only init code.
  5726                                  		;xor	bx, bx
  5727                                  		;mov	ds, bx
  5728                                  		
  5729                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  5730                                  		;mov	bx, [2Fh*4]
  5731                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  5732                                  		;mov	ds, [2Fh*4+2]
  5733                                  		; 29/09/2023
  5734 00001D43 C51EBC00                		lds	bx, [2Fh*4]
  5735                                  
  5736 00001D47 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  5737                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  5738 00001D4C 750F                    		jnz	short SkipRPL
  5739 00001D4E 807F054C                		cmp	byte [bx+5], 'L'
  5740                                  		;cmp	byte ptr [bx+5], 'L'
  5741 00001D52 7509                    		jnz	short SkipRPL
  5742 00001D54 89C2                    		mov	dx, ax		; get TOM into DX
  5743 00001D56 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  5744 00001D59 CD2F                    		int	2Fh		; Get new TOM from any RPL
  5745 00001D5B 89D0                    		mov	ax, dx
  5746                                  SkipRPL:	
  5747                                  		; 20/12/2022		
  5748                                  		;pop	bx
  5749                                  		;pop	ds
  5750                                  
  5751                                  ;M068 - END
  5752                                  		; 20/12/2022
  5753                                  		; 27/12/2018
  5754 00001D5D 0E                      		push	cs
  5755 00001D5E 1F                      		pop	ds
  5756                                  
  5757                                  		; 18/03/2019 - Retro DOS v4.0
  5758                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  5759                                  		;mov	[cs:fatloc], ax	; location to read fat
  5760                                  
  5761                                  		; 01/07/2018
  5762                                  		; 08/04/2018
  5763                                  		; 28/03/2018
  5764                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  5765 00001D5F 83E840                  		sub	ax, 64
  5766 00001D62 A3[041A]                		mov	[init_bootseg], ax ; 20/12/2022
  5767                                  		;mov	[cs:init_bootseg], ax
  5768                                  
  5769                                  		; 27/12/2018 - Retro DOS v4.0
  5770                                  		;;pop	ax ; (*)	; get back real top of memory
  5771                                  		;pop	dx ; (*)
  5772                                  		; 29/09/2023 - Retro DOS v4.2 (BugFix)
  5773 00001D65 58                      		pop	ax ; (*)	; get back real top of memory		
  5774                                  
  5775                                  
  5776                                  		; 20/12/2022
  5777                                  		; 27/12/2018
  5778 00001D66 59                      		pop	cx ; (**)
  5779 00001D67 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  5780                                  
  5781                                  		; 20/12/2022
  5782                                  
  5783                                  		;mov	dx, 46Dh	; SYSINIT segment
  5784                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)
  5785 00001D6B BAD904                  		mov	dx, SYSINITSEG	; 17/10/2022
  5786 00001D6E 8EDA                    		mov	ds, dx
  5787                                  
  5788                                  ; set pointer to resident device driver chain
  5789                                  
  5790                                  		; 17/10/2022
  5791 00001D70 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  5792                                  		;mov	word [273h], res_dev_list
  5793                                  		;;mov	word ptr ds:273h, offset res_dev_list
  5794                                  					; [SYSINIT+DEVICE_LIST]
  5795 00001D76 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  5796                                  		;mov	[275h], cs
  5797                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  5798                                  
  5799 00001D7A A3[9202]                		mov	[MEMORYSIZE], ax
  5800                                  		;mov	[292h], ax
  5801                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  5802                                  
  5803 00001D7D FEC1                    		inc	cl
  5804 00001D7F 880E[9602]              		mov	[DEFAULTDRIVE], cl
  5805                                  		;mov	[296h], cl
  5806                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  5807                                  
  5808                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  5809 00001D83 C706[7302]C609          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  5810                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  5811                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  5812                                  					; dos_load_seg
  5813                                  
  5814                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  5815                                  ; printer cards. we initialize this value to point to an iret only if
  5816                                  ;
  5817                                  ; 1) the original segment points to storage inside valid ram.
  5818                                  ;
  5819                                  ; 2) the original segment is 0F000:xxxx
  5820                                  
  5821                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  5822                                  		;;mov	ax, 544h	; 10/12/2023
  5823                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  5824                                  		;mov	es, ax
  5825                                  		; 20/12/2022
  5826                                  		;push	ds ; SYSINITSEG
  5827                                  		;pop	es
  5828 00001D89 8EC2                    		mov	es, dx ; SYSINITSEG
  5829 00001D8B 31C0                    		xor	ax, ax ; 0
  5830 00001D8D 8ED8                    		mov	ds, ax		; segment 0
  5831                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  5832 00001D8F A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  5833                                  		; 18/10/2022
  5834 00001D92 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  5835                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  5836 00001D97 7605                    		jbe	short resetintf
  5837 00001D99 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  5838 00001D9C 750A                    		jnz	short keepintf
  5839                                  resetintf:	
  5840 00001D9E C7063C00[1406]          		mov	word [0Fh*4], intret			
  5841                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  5842 00001DA4 8C0E3E00                		mov	word [0Fh*4+2], cs
  5843                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  5844                                  keepintf:				
  5845                                  ; end important
  5846                                  
  5847                                  ; 17/10/2022
  5848                                  ; 28/12/2018 - Retro DOS v4.0
  5849                                  
  5850                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  5851                                  ;
  5852                                  ; we will check if the system has ibm extended keyboard by
  5853                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  5854                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  5855                                  ; for the extended keyboard function. use cx as the temporary register.
  5856                                  
  5857                                  		; 20/12/2022
  5858                                  		; ds = 0
  5859                                  		;xor	cx, cx
  5860                                  		;mov	ds, cx
  5861                                  
  5862 00001DA8 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  5863                                  
  5864                                  		; 20/12/2022
  5865                                  		; 20/03/2019
  5866 00001DAC 0E                      		push	cs
  5867 00001DAD 1F                      		pop	ds
  5868                                  
  5869                                  		;test	cl, 00010000b ; 10h
  5870 00001DAE F6C110                  		test	cl, 10h		; extended keyboard ?
  5871 00001DB1 740A                    		jz	short org_key	; no, original keyboard
  5872                                  
  5873                                  		; 20/12/2022
  5874                                  		;  ds = cs
  5875 00001DB3 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  5876 00001DB8 C606[7F04]11            		mov	byte [keysts_func], 11h
  5877                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  5878                                  		;mov	byte [cs:keysts_func], 11h
  5879                                  					; change for extended keyboard functions
  5880                                  org_key:
  5881                                  
  5882                                  ; 02/06/2018 - Retro DOS v3.0
  5883                                  
  5884                                  ;**************************************************************
  5885                                  ;	will initialize the number of drives
  5886                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  5887                                  ;	the indications are as follows:
  5888                                  ;
  5889                                  ;	bits	7	6	drives
  5890                                  ;		0	0	1
  5891                                  ;		0	1	2
  5892                                  ;		1	0	3
  5893                                  ;		1	1	4
  5894                                  ;**************************************************************
  5895                                  		
  5896                                  		; 20/12/2022
  5897                                  		; ds = cs
  5898                                  		;push	cs
  5899                                  		;pop	ds
  5900                                  		; 21/12/2022
  5901                                  		;push	cs
  5902                                  		;pop	es
  5903                                  
  5904 00001DBD E8C20A                  		call	cmos_clock_read	; If cmos clock	exists,
  5905                                  					; then set the system time according to	that.
  5906                                  					; also,	reset the cmos clock rate.
  5907                                  		; 18/10/2022
  5908                                  		;mov	word ptr BData_start, offset harddrv ;
  5909                                  					; set up pointer to hdrive
  5910                                  		; 02/10/2022
  5911 00001DC0 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  5912                                  
  5913                                  		; 20/12/2022
  5914                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  5915 00001DC6 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  5916                                  
  5917 00001DC7 30E4                    		xor	ah, ah		; chuck	fat id byte
  5918 00001DC9 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  5919 00001DCC A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  5920 00001DCF D1E0                    		shl	ax, 1
  5921 00001DD1 0106[5E1A]              		add	[last_dskdrv_table], ax
  5922                                  
  5923                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  5924                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  5925                                  		; ........
  5926 00001DD5 1E                      		push    ds
  5927 00001DD6 B800F0                  		mov     ax, 0F000h
  5928 00001DD9 8ED8                    		mov     ds, ax
  5929                                  
  5930 00001DDB 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  5931 00001DE1 751F                    		jne	short skip_mode2
  5932 00001DE3 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  5933 00001DE9 7517                    		jne	short skip_mode2
  5934 00001DEB 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  5935 00001DF1 750F                    		jne	short skip_mode2
  5936                                  
  5937 00001DF3 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  5938 00001DF6 CD15                    		int	15h
  5939 00001DF8 7208                    		jc	short skip_mode2
  5940                                  		; 10/12/2023
  5941                                  		; PCDOS 7.1 IBMBIO.COM
  5942                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  5943                                  					; (MSDOS 6.0)
  5944                                  		; MSDOS 6.22 IO.SYS
  5945 00001DFA 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  5946 00001DFD B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  5947 00001E00 CD15                    		int	15h
  5948                                  skip_mode2:
  5949 00001E02 1F                      		pop	ds
  5950                                  		; ........
  5951                                  
  5952 00001E03 B280                    		mov	dl, 80h
  5953 00001E05 B408                    		mov	ah, 8
  5954 00001E07 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5955                                  					; DL = drive number
  5956                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5957                                  					; DL = number of consecutive drives
  5958                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5959 00001E09 7204                    		jc	short enddrv
  5960 00001E0B 8816[5D1A]              		mov	[hnum], dl	; save number of hard disk drives
  5961                                  enddrv:
  5962                                  		; 21/12/2022
  5963 00001E0F 0E                      		push	cs
  5964 00001E10 07                      		pop	es
  5965                                  
  5966                                  ; scan the list of drives to determine their type. we have three flavors of
  5967                                  ; diskette drives:
  5968                                  ;
  5969                                  ;   48tpi drives    we do nothing special for them
  5970                                  ;   96tpi drives    mark the fact that they have changeline support.
  5971                                  ;   3.5"  drives    mark changeline support and small.
  5972                                  ;
  5973                                  ; the following code uses registers for certain values:
  5974                                  ;
  5975                                  ;   dl - physical drive
  5976                                  ;   ds:di - points to current bds
  5977                                  ;   cx - flag bits for bds
  5978                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  5979                                  					
  5980 00001E11 30D2                    		xor	dl, dl
  5981                                  
  5982                                  		; 20/12/2022
  5983                                  		; ds = cs
  5984                                  		; 17/06/2018		 
  5985                                  		;push	cs
  5986                                  		;pop	ds
  5987                                  
  5988 00001E13 C606[2C01]09            		mov	byte [eot], 9
  5989 00001E18 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  5990                                  					; to set aside two bdss	for the	two fake floppy	drives
  5991                                  
  5992                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  5993                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  5994                                  
  5995                                  ; check to see if we are faking floppy drives. if not we don't
  5996                                  ; do anything special. if we are faking floppy drives we need
  5997                                  ; to set aside two bdss for the two fake floppy drives. we
  5998                                  ; don't need to initalise any fields though. so starting at start_bds
  5999                                  ; use the link field in the bds structure to go to the second bds
  6000                                  ; in the list and initalise it's link field to -1 to set the end of
  6001                                  ; the list. then jump to the routine at dohard to allocate/initialise
  6002                                  ; the bds for harddrives.
  6003                                  
  6004 00001E1B 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  6005 00001E20 750B                    		jnz	short loop_drive
  6006 00001E22 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6007                                  					; di <-	first bds link
  6008 00001E24 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6009                                  					; di <-	second bds link
  6010 00001E26 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  6011 00001E2A E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  6012                                  ;-----------------------------------------------------------------------------
  6013                                  
  6014                                  loop_drive:				
  6015 00001E2D 3A16[7500]              		cmp	dl, [drvmax]
  6016 00001E31 7203                    		jb	short got_more
  6017 00001E33 E97B01                  		jmp	done_drives
  6018                                  ;-----------------------------------------------------------------------------
  6019                                  
  6020                                  got_more:	
  6021                                  		; 12/12/2023
  6022                                  		;xor	cx, cx		; zero all flags
  6023 00001E36 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6024                                  					; get next bds
  6025                                  		; ........
  6026                                  		; 10/12/2023 - Retro DOS v5.0
  6027                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  6028 00001E38 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  6029 00001E3B 7516                    		jne	short not_last_bds
  6030 00001E3D 88D0                    		mov	al, dl          ; drive number (0 based)
  6031 00001E3F 98                      		cbw
  6032 00001E40 01C0                    		add	ax, ax
  6033 00001E42 05[3C05]                		add	ax, dskdrvs
  6034 00001E45 A3[5E1A]                		mov	[last_dskdrv_table], ax
  6035 00001E48 8B3E[601A]              		mov	di, [end_of_bdss]
  6036 00001E4C E8FD09                  		call	xinstall_bds
  6037 00001E4F FE0E[7500]              		dec	byte [drvmax]
  6038                                  not_last_bds:
  6039                                  		; ........
  6040                                  
  6041 00001E53 B600                    		mov	dh, 0		; ff48tpi
  6042                                  					; set form factor to 48	tpi
  6043 00001E55 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  6044                                  		
  6045                                  		; 20/12/2022
  6046                                  		;push	ds ; 11/05/2019	
  6047 00001E5A 57                      		push	di
  6048 00001E5B 52                      		push	dx
  6049                                  		;push	cx ; not necessary (10/12/2023)
  6050 00001E5C 06                      		push	es ; ((*)) ; 20/12/2022
  6051                                  
  6052                                  		; ...........
  6053                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6054                                  		;xor	bx, bx
  6055                                  		;xor	cx, cx
  6056 00001E5D 52                      		push	dx  ; dl = drive number	
  6057                                  		
  6058 00001E5E B408                    		mov	ah, 8
  6059 00001E60 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6060                                  					; DL = drive number
  6061                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6062                                  					; DL = number of consecutive drives
  6063                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6064                                  		;jc	short noparmsfromrom
  6065                                  		; 10/12/2023
  6066 00001E62 58                      		pop	ax  ; al = drive number
  6067 00001E63 7303                    		jnc	short chk_drv_type
  6068 00001E65 E9E600                  		jmp	noparmsfromrom
  6069                                  
  6070                                  chk_drv_type:
  6071                                  		; 10/12/2023
  6072                                  		; ch = low eight bits of maximum cylinder number
  6073                                  		; cl = maximum sector number (bits 5-0)
  6074                                  		;      high two bits of maximum cylinder number (bits 7-6)
  6075                                  		;
  6076 00001E68 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  6077 00001E6B 7554                    		jne	short not_atapi_removable
  6078                                  		
  6079                                  		; save ds:si
  6080 00001E6D 1E                      		push	ds
  6081                                  		;push	si	; not necessary (10/12/2023)
  6082                                  		
  6083 00001E6E 88C2                    		mov	dl, al
  6084 00001E70 83EC1A                  		sub	sp, 26
  6085 00001E73 31C0                    		xor	ax, ax ; 0
  6086 00001E75 50                      		push	ax
  6087 00001E76 B81E00                  		mov	ax, 30
  6088 00001E79 50                      		push	ax
  6089 00001E7A 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  6090 00001E7C 16                      		push	ss
  6091 00001E7D 1F                      		pop	ds
  6092 00001E7E B448                    		mov	ah, 48h
  6093 00001E80 CD13                    		int	13h		; DISK - IBM/MS Extension
  6094                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  6095 00001E82 7239                    		jb	short ext_gdp_err
  6096 00001E84 8B4408                  		mov	ax, [si+8]	; physical number of heads
  6097 00001E87 A3[0C1A]                		mov	[num_heads], ax
  6098 00001E8A 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  6099 00001E8D A3[0E1A]                		mov	[num_cyln], ax
  6100 00001E90 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  6101 00001E93 A2[101A]                		mov	[sec_trk], al
  6102 00001E96 3A06[2C01]              		cmp	al, [eot]
  6103 00001E9A 7603                    		jbe	short _eotok
  6104 00001E9C A2[2C01]                		mov	[eot], al
  6105                                  
  6106                                  _eotok:		; 10/12/2023
  6107                                  		;xor	al, al
  6108 00001E9F 31C9                    		xor	cx, cx ; 0
  6109 00001EA1 F6440210                		test	byte [si+2], 10h ; information flags
  6110                                  					; bit 4 = Device has change line support
  6111 00001EA5 7403                    		jz	short not_chgline_sup
  6112                                  		;or	al, 2		; change line support
  6113 00001EA7 80C902                  		or	cl, 2
  6114                                  not_chgline_sup:
  6115 00001EAA 83C41E                  		add	sp, 30
  6116                                  		;pop	si	; (10/12/2023)
  6117 00001EAD 1F                      		pop	ds
  6118                                  		;
  6119 00001EAE 07                      		pop	es	; es=cs=ds (21/12/2022)
  6120                                  		;pop	cx	; (10/12/2023)
  6121 00001EAF 5A                      		pop	dx
  6122 00001EB0 5F                      		pop	di
  6123                                  		;pop	ds	; (21/12/2022)
  6124                                  
  6125                                  		; 10/12/2023
  6126 00001EB1 F6C102                  		test	cl, 2
  6127                                  		;test	al, 2
  6128                                  		;jz	short gotother_j
  6129 00001EB4 7450                    		jz	short gotother
  6130                                  		;or	cl, al
  6131 00001EB6 C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  6132                                  gotother_j:
  6133 00001EBB EB49                    		jmp	short gotother
  6134                                  ext_gdp_err:
  6135 00001EBD 83C41E                  		add	sp, 30
  6136                                  		;pop	si	; (10/12/2023)
  6137 00001EC0 1F                      		pop	ds
  6138                                  
  6139                                  		; 10/12/2023
  6140                                  not_atapi_removable:
  6141                                  		; ...........
  6142                                  
  6143                                  
  6144                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  6145                                  ; in this case, we are going to put bogus informations to bds table.
  6146                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  6147                                  ; they are calculated at the later time. this is just for the diagnostic
  6148                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  6149                                  ; this should only happen with drive b.
  6150                                  
  6151 00001EC1 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  6152 00001EC4 7505                    		jnz	short pfr_ok
  6153                                  
  6154                                  		;mov	ch, 39		; rom gave wrong info.
  6155                                  		;mov	cl, 9		; let's default to 360k.
  6156                                  		; 20/12/2022
  6157 00001EC6 B90927                  		mov	cx, 2709h
  6158                                  
  6159 00001EC9 B601                    		mov	dh, 1
  6160                                  pfr_ok:					
  6161                                  		;inc	dh		; make number of heads 1-based
  6162                                  		;mov	[num_heads], dh	; save parms returned by rom
  6163                                  		; 10/12/2023
  6164 00001ECB 86F2                    		xchg	dl, dh
  6165 00001ECD 30F6                    		xor	dh, dh
  6166 00001ECF 42                      		inc	dx		; make number of heads 1-based
  6167 00001ED0 8916[0C1A]              		mov	[num_heads], dx
  6168                                  
  6169                                  		;inc	ch		; make number of cylinders 1-based
  6170                                  		;and	cl, 3Fh
  6171                                  		;mov	[sec_trk], cl
  6172                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  6173                                  		; 10/12/2023
  6174 00001ED4 88CA                    		mov	dl, cl
  6175 00001ED6 80E23F                  		and	dl, 3Fh
  6176 00001ED9 8816[101A]              		mov	[sec_trk], dl
  6177 00001EDD 86E9                    		xchg	cl, ch
  6178 00001EDF D0C5                    		rol	ch, 1
  6179 00001EE1 D0C5                    		rol	ch, 1
  6180 00001EE3 80E503                  		and	ch, 3
  6181 00001EE6 41                      		inc	cx		; make number of cylinders 1-based
  6182 00001EE7 890E[0E1A]              		mov	[num_cyln], cx
  6183                                  
  6184                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  6185                                  
  6186                                  		;mov	cl, [sec_trk] ; 10/12/2023
  6187                                  		;cmp	cl, [eot]	; may set carry
  6188                                  		;;jbe	short eot_ok
  6189                                  		;; 09/12/2022
  6190                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  6191                                  		;; 14/08/2023
  6192                                  		;jbe	short eotok
  6193                                  		;mov	[eot], cl
  6194                                  		; 10/12/2023
  6195 00001EEB 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  6196 00001EEF 7604                    		jbe	short eotok
  6197 00001EF1 8816[2C01]              		mov	[eot], dl
  6198                                  ;eot_ok:
  6199                                  eotok:
  6200                                  		; 10/12/2023
  6201                                  		; !!!
  6202                                  		; (following pops are moved to 'chk_changeline' procedure)
  6203                                  		;
  6204                                  		; 20/12/2022
  6205                                  		;pop	es ; ((*)) es = cs = ds
  6206                                  		;;pop	cx	; 10/12/2023
  6207                                  		;pop	dx
  6208                                  		;pop	di
  6209                                  
  6210                                  		; 20/12/2022
  6211                                  		;pop	ds
  6212                                  
  6213                                  ; Check	for presence of	changeline
  6214                                  
  6215                                  ; 10/12/2023
  6216                                  %if 0
  6217                                  		; 10/12/2023
  6218                                  		;xor	cx, cx	; 0
  6219                                  		;push	cx
  6220                                  		push	dx
  6221                                  
  6222                                  		mov	ah, 15h
  6223                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6224                                  					; DL = drive ID
  6225                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6226                                  					; CX:DX	= number of sectors on the media
  6227                                  		; 10/12/2023
  6228                                  		pop	dx
  6229                                  		;pop	cx
  6230                                  		mov	cx, 0 ; 12/12/2023
  6231                                  		jc	short changeline_done
  6232                                  		cmp	ah, 2		; check	for presence of	changeline
  6233                                  		jnz	short changeline_done
  6234                                  
  6235                                  ; we have a drive with change line support.
  6236                                  
  6237                                  		or	cl, 2		; fchangeline
  6238                                  					; signal type
  6239                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  6240                                  %endif
  6241                                  		; 10/12/2023
  6242 00001EF5 E83800                  		call	chk_changeline
  6243                                  		;jc	short changeline_done
  6244                                  
  6245                                  ; we now try to set up the form factor for the types of media that we know
  6246                                  ; and can recognise. for the rest, we set the form factor as "other".
  6247                                  
  6248                                  changeline_done:
  6249                                  
  6250                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  6251                                  			
  6252 00001EF8 803E[0E1A]28            		cmp	byte [num_cyln], 40
  6253 00001EFD 750B                    		jnz	short try_80
  6254 00001EFF 803E[101A]09            		cmp	byte [sec_trk], 9
  6255 00001F04 765F                    		jbe	short nextdrive
  6256                                  gotother:
  6257                                  		; 10/12/2023
  6258                                  		; ch = 0, cl = 2 or 0
  6259                                  				
  6260 00001F06 B607                    		mov	dh, 7 		; ffOther
  6261                                  					; we have a "strange" medium 
  6262 00001F08 EB5B                    		jmp	short nextdrive
  6263                                  ;-----------------------------------------------------------------------------
  6264                                  
  6265                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  6266                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  6267                                  
  6268                                  try_80:					
  6269 00001F0A 803E[0E1A]50            		cmp	byte [num_cyln], 80
  6270 00001F0F 75F5                    		jnz	short gotother
  6271 00001F11 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  6272 00001F13 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it ?
  6273 00001F18 744B                    		jz	short nextdrive	; yeah,	go update
  6274                                  
  6275                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  6276                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  6277                                  		;mov	dh, ff144
  6278                                  		;cmp	byte [sec_trk], 18
  6279                                  		;je	short nextdrive
  6280                                  
  6281 00001F1A 803E[101A]0F            		cmp	byte [sec_trk], 15
  6282 00001F1F 740B                    		jz	short got96
  6283                                  		
  6284 00001F21 803E[101A]09            		cmp	byte [sec_trk], 9
  6285 00001F26 75DE                    		jnz	short gotother
  6286                                  		
  6287 00001F28 B602                    		mov	dh, 2 		; ffSmall
  6288 00001F2A EB39                    		jmp	short nextdrive
  6289                                  ; ----------------------------------------------------------------------------
  6290                                  
  6291                                  got96:					
  6292 00001F2C B601                    		mov	dh, 1		; ff96tpi
  6293 00001F2E EB35                    		jmp	short nextdrive
  6294                                  
  6295                                  ; ----------------------------------------------------------------------------
  6296                                  		
  6297                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6298                                  		; check change line feature (and set fhave96 if there is)
  6299                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  6300                                  chk_changeline:
  6301 00001F30 59                      		pop	cx ; near call return address
  6302                                  
  6303                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  6304 00001F31 07                      		pop	es ; es=cs=ds ; 21/12/2022
  6305                                  		;pop	cx	; (10/12/2023)
  6306 00001F32 5A                      		pop	dx
  6307 00001F33 5F                      		pop	di ; BDS address/offset
  6308                                  		
  6309 00001F34 51                      		push	cx ; near call return address
  6310                                  
  6311                                  		;xor	cx, cx ; 0
  6312                                  		;push	cx
  6313 00001F35 52                      		push	dx
  6314                                  
  6315 00001F36 B415                    		mov	ah, 15h
  6316 00001F38 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6317                                  					; DL = drive ID
  6318                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6319                                  					; CX:DX	= number of sectors on the media
  6320 00001F3A 5A                      		pop	dx
  6321                                  		;pop	cx
  6322 00001F3B B90000                  		mov	cx, 0
  6323 00001F3E 720D                    		jc	short chk_chgl_1
  6324                                  
  6325 00001F40 80FC02                  		cmp	ah, 2		; is there changeline?
  6326 00001F43 7508                    		jne	short chk_chgl_2 ; *
  6327                                  
  6328 00001F45 80C902                  		or	cl, 2
  6329                                  		;or	cl, ah ; 2
  6330 00001F48 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  6331                                  		; cf = 0
  6332                                  chk_chgl_1:
  6333                                  chk_chgl_2:
  6334 00001F4D C3                      		retn
  6335                                  
  6336                                  ;chk_chgl_2:	; *
  6337                                  ;		; 10/12/2023
  6338                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  6339                                  ;		;stc
  6340                                  ;		; cf = 1
  6341                                  ;		retn
  6342                                  
  6343                                  ; ----------------------------------------------------------------------------
  6344                                  
  6345                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  6346                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  6347                                  
  6348                                  noparmsfromrom:
  6349                                  		; 10/12/2023
  6350                                  		; !!!
  6351                                  		; (following pops are moved to 'chk_changeline' procedure)
  6352                                  		;
  6353                                  		; 20/12/2022
  6354                                  		;pop	es ; ((*))
  6355                                  		;;pop	cx	; (10/12/2023)
  6356                                  		;pop	dx
  6357                                  		;pop	di
  6358                                  		
  6359                                  		; 20/12/2022
  6360                                  		;pop	ds
  6361                                  ; 10/12/2023
  6362                                  %if 0
  6363                                  		; 10/12/2023
  6364                                  		;xor	cx, cx ; 0
  6365                                  		;push	cx
  6366                                  		push	dx
  6367                                  
  6368                                  
  6369                                  		mov	ah, 15h
  6370                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6371                                  					; DL = drive ID
  6372                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6373                                  					; CX:DX	= number of sectors on the media
  6374                                  		; 10/12/2023
  6375                                  		pop	dx
  6376                                  		;pop	cx
  6377                                  		mov	cx, 0 ; 12/12/2023
  6378                                  		jc	short nextdrive
  6379                                  
  6380                                  		cmp	ah, 2		; is there changeline?
  6381                                  		jnz	short nextdrive
  6382                                  
  6383                                  		or	cl, 2
  6384                                  		mov	byte [fhave96], 1 ; fchangeline
  6385                                  %endif
  6386                                  		; 10/12/2023
  6387 00001F4E E8DFFF                  		call	chk_changeline
  6388 00001F51 7212                    		jc	short nextdrive
  6389                                  		
  6390                                  		; change line support, [fhave96] = 1
  6391                                  		
  6392 00001F53 C606[0E1A]50            		mov	byte [num_cyln], 80
  6393 00001F58 B601                    		mov	dh, 1		; ff96tpi
  6394 00001F5A B00F                    		mov	al, 15
  6395 00001F5C 3A06[2C01]              		cmp	al, [eot]
  6396 00001F60 7603                    		jbe	short nextdrive
  6397 00001F62 A2[2C01]                		mov	[eot], al
  6398                                  ; ----------------------------------------------------------------------------
  6399                                  
  6400                                  ;eot_ok2:
  6401                                  nextdrive:
  6402                                  		; 10/12/2023
  6403                                  		; ch = 0, cl = 2 or 0	
  6404                                  				
  6405 00001F65 80C920                  		or	cl, 20h	; fi_own_physical
  6406                                  					; set this true	for all	drives
  6407 00001F68 88D7                    		mov	bh, dl		; save int13 drive number
  6408                                  
  6409                                  ; we need to do special things if we have a single drive system and are setting
  6410                                  ; up a logical drive. it needs to have the same int13 drive number as its
  6411                                  ; counterpart, but the next drive letter. also reset ownership flag.
  6412                                  ; we detect the presence of this situation by examining the flag single for the
  6413                                  ; value 2.
  6414 00001F6A 803E[7800]02            		cmp	byte [single], 2
  6415 00001F6F 7505                    		jnz	short not_special
  6416 00001F71 FECF                    		dec	bh		; int13	drive number same for logical drive
  6417 00001F73 80F120                  		xor	cl, 20h	; fi_own_physical
  6418                                  					; reset	ownership flag for logical drive
  6419                                  not_special:
  6420                                  
  6421                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  6422                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  6423                                  ; form factor is of type "ffother".
  6424                                  				
  6425                                  		;xor	ax, ax		; fill BDS for drive
  6426                                  		;mov	al, [num_heads]
  6427                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  6428 00001F76 A1[0C1A]                		mov	ax, [num_heads]
  6429                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  6430 00001F79 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  6431 00001F7C 31C0                    		xor	ax, ax		; *
  6432 00001F7E A0[101A]                		mov	al, [sec_trk]
  6433                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  6434 00001F81 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  6435                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  6436 00001F84 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  6437                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  6438 00001F87 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  6439 00001F8A 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  6440 00001F8D 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  6441                                  		;mov	bl, [num_cyln]
  6442                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  6443                                  		; 10/12/2023
  6444 00001F90 A1[0E1A]                		mov	ax, [num_cyln]
  6445 00001F93 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  6446                                  
  6447 00001F96 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  6448 00001F9B 7510                    		jnz	short no_single
  6449                                  		;mov	byte [single], 2 ; Don't forget we have
  6450                                  					; single drive system
  6451                                  		; 10/12/2023
  6452 00001F9D FE06[7800]              		inc	byte [single]	; [single] = 2
  6453                                  		; 18/12/2022
  6454 00001FA1 80C910                  		or	cl, 10h
  6455                                  		;or	cx, 10h		; fi_am_mult
  6456                                  					; set that this	is one of several drives
  6457                                  		;or	[di+23h], cx	; [di+BDS.flags]
  6458 00001FA4 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  6459                                  					; save flags
  6460 00001FA7 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6461                                  					; move to next BDS in list
  6462 00001FA9 FEC2                    		inc	dl		; add a	number
  6463 00001FAB EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  6464                                  ; ----------------------------------------------------------------------------
  6465                                  
  6466                                  no_single:				
  6467                                  		;inc	dl
  6468                                  		; 18/12/2022
  6469 00001FAD 42                      		inc	dx
  6470 00001FAE E97CFE                  		jmp	loop_drive
  6471                                  ; ----------------------------------------------------------------------------
  6472                                  
  6473                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6474                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  6475                                  done_drives:	
  6476                                  		;mov	word [di+BDS.link], -1
  6477 00001FB1 C705FFFF                		mov	word [di], -1	; set link to null
  6478                                  
  6479                                  ; set up all the hard drives in	the system
  6480                                  
  6481                                  		; 20/12/2022
  6482                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6483                                  dohard:					
  6484 00001FB5 8A36[5D1A]              		mov	dh, [hnum]
  6485 00001FB9 08F6                    		or	dh, dh		; done if no hardfiles
  6486 00001FBB 7459                    		jz	short static_configure
  6487 00001FBD B280                    		mov	dl, 80h
  6488                                  dohard1:				
  6489 00001FBF 52                      		push	dx
  6490 00001FC0 8B3E[601A]              		mov	di, [end_of_bdss]
  6491 00001FC4 8A1E[7500]              		mov	bl, [drvmax]
  6492 00001FC8 B700                    		mov	bh, 0		; first	primary	partition (or active)
  6493 00001FCA E89A01                  		call	sethard
  6494 00001FCD 7208                    		jb	short hardfile_err
  6495 00001FCF E86508                  		call	dmax_check	; error	if already 26 drives
  6496 00001FD2 7303                    		jnb	short hardfile_err
  6497 00001FD4 E87508                  		call	xinstall_bds	; insert new bds into linked list
  6498                                  hardfile_err:				
  6499 00001FD7 5A                      		pop	dx
  6500                                  		;inc	dl		; next hard drive
  6501                                  		; 12/12/2023
  6502 00001FD8 42                      		inc	dx
  6503 00001FD9 FECE                    		dec	dh
  6504 00001FDB 75E2                    		jnz	short dohard1
  6505                                  
  6506                                  ; end of physical drive	initialization
  6507                                  
  6508                                  ; *** do not change the position of the following statement.
  6509                                  ; *** domini routine will use [drvmax] value for the start of the logical
  6510                                  ; *** drive number of mini disk(s).
  6511                                  					
  6512 00001FDD E8CA06                  		call	domini		; for setting up mini disks, if found
  6513                                  
  6514                                  ; -- begin added section
  6515                                  
  6516 00001FE0 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  6517 00001FE4 B280                    		mov	dl, 80h
  6518                                  dohardx1:				
  6519 00001FE6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  6520                                  dohardx2:				
  6521 00001FE8 52                      		push	dx
  6522 00001FE9 53                      		push	bx
  6523 00001FEA 8B3E[601A]              		mov	di, [end_of_bdss]
  6524 00001FEE 8A1E[7500]              		mov	bl, [drvmax]
  6525 00001FF2 E87201                  		call	sethard
  6526 00001FF5 720E                    		jb	short dohardx4	; move to next hardfile if error
  6527 00001FF7 E83D08                  		call	dmax_check	; make sure <=26 drives
  6528 00001FFA 7309                    		jnb	short dohardx4	; skip if error
  6529 00001FFC E84D08                  		call	xinstall_bds	; insert new bds into linked list
  6530 00001FFF 5B                      		pop	bx		; get partition number
  6531 00002000 5A                      		pop	dx		; restore physical drive counts
  6532 00002001 FEC7                    		inc	bh
  6533 00002003 EBE3                    		jmp	short dohardx2	; keep looping until we fail
  6534                                  ; ----------------------------------------------------------------------------
  6535                                  
  6536                                  dohardx4:				
  6537 00002005 5B                      		pop	bx		; unjunk partition number from stack
  6538 00002006 5A                      		pop	dx		; restore physical drive counts
  6539                                  		;inc	dl		; next hard drive
  6540                                  		; 12/12/2023
  6541 00002007 42                      		inc	dx
  6542 00002008 FECE                    		dec	dh
  6543 0000200A 75DA                    		jnz	short dohardx1
  6544                                  
  6545                                  ; -- end changed section
  6546                                  
  6547                                  ;******************************************************************************
  6548                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  6549                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  6550                                  ; than two diskette drives
  6551                                  ;
  6552                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  6553                                  ;		as usual and then rescan the bds chain to adjust the  drive
  6554                                  ;		letters. to do this, scan for disk drives and assign logical
  6555                                  ;		drive number starting from 2 and then rescan diskette drives
  6556                                  ;		and assign next to the last logical drive number of last disk
  6557                                  ;		drive to the 3rd and 4th diskette drives.
  6558                                  ;******************************************************************************
  6559                                  
  6560 0000200C 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  6561                                  		;jbe	short static_configure ; no - no need for remapping
  6562 00002011 7603                    		jbe	short no_remap
  6563 00002013 E8D500                  		call	remap		; remap	bds chain to adjust driver letters
  6564                                  no_remap:
  6565                                  
  6566                                  ; End of drive initialization.
  6567                                  
  6568                                  ; ----------------------------------------------------------------------------
  6569                                  
  6570                                  ;we now decide, based on the configurations available so far, what
  6571                                  ;code or data we need to keep as a stay resident code. the following table
  6572                                  ;shows the configurations under consideration. they are listed in the order
  6573                                  ;of their current position memory.
  6574                                  ;
  6575                                  ;configuration will be done in two ways:
  6576                                  ;
  6577                                  ;first, we are going to set "static configuration". static configuration will
  6578                                  ;consider from basic configuration to endof96tpi configuration. the result
  6579                                  ;of static configuration will be the address the dynamic configuration will
  6580                                  ;use to start with.
  6581                                  ;
  6582                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  6583                                  ;involves possible relocation of code or data. dynamic configuration routine
  6584                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  6585                                  ;code individually. after these operation, [dosdatasg] will be set.
  6586                                  ;this will be the place sysinit routine will relocate msdos module for good.
  6587                                  
  6588                                  ; -- begin changed section
  6589                                  ;
  6590                                  ;   1.	 basic configuration for msbio (endfloppy)
  6591                                  ;   2.   end96tpi	; a system that supports "change line error"
  6592                                  ;   3.	 end of bdss	; end of bdss for hard disks
  6593                                  ;   4.	 endatrom	;some of at rom fix module.
  6594                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  6595                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  6596                                  ;
  6597                                  
  6598                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  6599                                  
  6600                                  static_configure:			
  6601 00002016 8B3E[601A]              		mov	di, [end_of_bdss]
  6602 0000201A 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  6603                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  6604 0000201E 750D                    		jnz	short dynamic_configure	; that's the end, then
  6605                                  		; 18/10/2022
  6606 00002020 BF[4C08]                		mov	di, end96tpi
  6607                                  		;mov	di, offset harddrv ; end96tpi
  6608                                  					; keep everything up to end96tpi
  6609 00002023 803E[7700]00            		cmp	byte [fhave96], 0
  6610 00002028 7503                    		jnz	short dynamic_configure
  6611                                  		
  6612 0000202A BF[3808]                		mov	di, endfloppy
  6613                                  dynamic_configure:
  6614                                  		; 20/12/2022
  6615                                  		;push	cs
  6616                                  		;pop	es
  6617                                  		
  6618                                  		; 10/12/2023
  6619 0000202D FC                      		cld	; clear direction flag is not necessary here !?
  6620                                  			; because there will not be a running program
  6621                                  			; which will set direction flag as backward (std)
  6622                                  
  6623                                  ; -- end changed section
  6624                                  
  6625                                  		; 20/12/2022
  6626                                  		; ds = cs <> es
  6627                                  		; ss = 0
  6628                                  		; sp = 700h
  6629                                  
  6630                                  		; 13/12/2023
  6631 0000202E BE00F0                  		mov	si, 0F000h
  6632 00002031 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  6633                                  
  6634 00002033 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  6635                                  		;jnz	short checkcmosclock
  6636                                  		; 10/12/2023
  6637 00002038 751E                    		jnz	short checkcompaqbug ; no
  6638 0000203A 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  6639                                  		;jz	short checkcmosclock
  6640 0000203F 7417                    		jz	short checkcompaqbug
  6641 00002041 97                      		xchg	ax, di		; save allocation pointer in ax
  6642                                  		; 13/12/2023
  6643                                  		;mov	si, 0F000h
  6644                                  		;mov	es, si		; ES ->	ROM BIOS segment
  6645 00002042 BE[661A]                		mov	si, bios_date	; "01/10/84"
  6646 00002045 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  6647 00002048 B90900                  		mov	cx, 9		; bdate_l
  6648                                  					; Only patch ROM for bios 01/10/84
  6649 0000204B F3A6                    		repe cmpsb		; check	for date + zero	on end
  6650 0000204D 97                      		xchg	ax, di		; restore allocation pointer
  6651                                  
  6652                                  ; M015 -- begin changes
  6653                                  
  6654                                  		;jnz	short checkcmosclock
  6655                                  		; 02/10/2022
  6656 0000204E 7508                    		jnz	short checkcompaqbug
  6657                                  
  6658                                  ; install at rom fix
  6659                                  
  6660                                  		; 19/10/2022
  6661                                  		;mov	cx, offset endatrom
  6662 00002050 B9[2018]                		mov	cx, endatrom
  6663                                  		;mov	si, offset ibm_disk_io
  6664 00002053 BE[F216]                		mov	si, ibm_disk_io
  6665 00002056 EB46                    		jmp	short install_int13_patch
  6666                                  ; ----------------------------------------------------------------------------
  6667                                  
  6668                                  ; M065 -- begin changes
  6669                                  ;
  6670                                  ; On certain systems with Western Digital disk controllers, the
  6671                                  ; following detection scheme caused an unpredictable and serious
  6672                                  ; failure. In particular, they've implemented a nonstandard
  6673                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  6674                                  ; what happens to be at es:[bx] and other memory locations indexed
  6675                                  ; off of it.
  6676                                  ;
  6677                                  ; Compaq was unable to tell us exactly which kind of systems have
  6678                                  ; the bug, except that they guarantee that the bug was fixed in
  6679                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  6680                                  ; string, and then look for date codes before 08/04/86 to decide
  6681                                  ; when to install the hook.
  6682                                  
  6683                                  ;checkcmosclock:
  6684                                  ; 02/10/2022				
  6685                                  checkcompaqbug:
  6686                                  		; 20/12/2022
  6687                                  		; es = 0F000h
  6688                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  6689                                  		;mov	es, ax
  6690                                  
  6691                                  		; 19/10/2022
  6692 00002058 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  6693                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  6694 0000205F 754B                    		jnz	short not_compaq_patch
  6695 00002061 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  6696                                  		;cmp	word ptr es:0FFECh, 'PM'
  6697 00002068 7542                    		jnz	short not_compaq_patch
  6698 0000206A 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  6699                                  		;cmp	word ptr es:0FFEEh, 'QA'
  6700 00002071 7539                    		jnz	short not_compaq_patch
  6701                                  
  6702                                  ; We're running on a COMPAQ. Now look at the date code.
  6703                                  
  6704 00002073 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  6705 00002077 86C4                    		xchg	ah, al
  6706                                  
  6707                                  ; 11/12/2023
  6708                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  6709                                  %if 0
  6710                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  6711                                  		ja	short not_compaq_patch
  6712                                  		jz	short chkcompaqbug1
  6713                                  		cmp	ax, 3739h       ; '97'
  6714                                  		jbe	short not_compaq_patch
  6715                                  		stc
  6716                                  chkcompaqbug1:
  6717                                  		jb	short do_compaq_patch
  6718                                  		mov	ax, [es:0FFF5h]
  6719                                  		xchg	ah, al
  6720                                  		cmp	ax, 3038h       ; '80'
  6721                                  		ja	short not_compaq_patch
  6722                                  		jb	short do_compaq_patch
  6723                                  		mov	ax, [es:0FFF8h]
  6724                                  		xchg	ah, al
  6725                                  		cmp	ax, 3034h       ; '40'
  6726                                  		jnb	short not_compaq_patch
  6727                                  do_compaq_patch:
  6728                                  %endif
  6729                                  		; 11/12/2023
  6730                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  6731                                  
  6732 00002079 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  6733                                  		;cmp	ax, '86'        ; 3836h
  6734                                  					; is it	86?
  6735 0000207C 772E                    		ja	short not_compaq_patch
  6736 0000207E 7218                    		jb	short do_compaq_patch
  6737 00002080 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  6738 00002084 86C4                    		xchg	ah, al
  6739 00002086 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  6740                                  		;cmp	ax, '08'        ; 3038h
  6741                                  					; is it	08?
  6742 00002089 7721                    		ja	short not_compaq_patch
  6743 0000208B 720B                    		jb	short do_compaq_patch
  6744 0000208D 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  6745 00002091 86C4                    		xchg	ah, al
  6746 00002093 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  6747                                  		;cmp	ax, '04'        ; 3034h
  6748                                  					; is it	04?
  6749 00002096 7314                    		jnb	short not_compaq_patch
  6750                                  
  6751                                  do_compaq_patch:			
  6752 00002098 B9[3D18]                		mov	cx, end_compaq_i13hook
  6753                                  		;mov	si, endatrom
  6754                                  		; 11/12/2023
  6755 0000209B BE[2018]                		mov	si, compaq_disk_io ; endatrom
  6756                                  
  6757                                  install_int13_patch:			
  6758 0000209E 0E                      		push	cs
  6759 0000209F 07                      		pop	es
  6760                                  		; 18/10/2022
  6761 000020A0 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  6762 000020A4 8C0E[B600]              		mov	[Orig13+2], cs
  6763 000020A8 29F1                    		sub	cx, si		; size of rom fix module
  6764 000020AA F3A4                    		rep movsb		; relocate it
  6765                                  
  6766                                  ; M065 -- end changes
  6767                                  
  6768                                  ; ----------------------------------------------------------------------------
  6769                                  not_compaq_patch:			; M065
  6770                                  		; 17/10/2022
  6771                                  checkcmosclock:	
  6772                                  		; 18/10/2022		
  6773 000020AC 0E                      		push	cs
  6774 000020AD 07                      		pop	es
  6775                                  
  6776                                  		; 20/12/2022
  6777                                  		; ds = cs = es
  6778                                  		; ss = 0
  6779                                  		; sp = 700h
  6780                                  
  6781                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6782                                  %if 0
  6783                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  6784                                  		jnz	short checkk09	; no
  6785                                  
  6786                                  		mov	word [daycnttoday], di
  6787                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  6788                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  6789                                  		mov	si, daycnt_to_day
  6790                                  		rep movsb
  6791                                  		mov	word [bintobcd], di
  6792                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  6793                                  					; let original segment stay
  6794                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  6795                                  		; 08/08/2023
  6796                                  		mov	cl, 11
  6797                                  		mov	si, bin_to_bcd
  6798                                  		rep movsb
  6799                                  %endif
  6800                                  
  6801                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6802                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  6803                                  		;push	cs
  6804                                  		;pop	es
  6805                                  checkk09:				
  6806 000020AE 57                      		push	di ; ? ; save ? ; 21/12/2022
  6807                                  
  6808                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  6809                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  6810                                  %if 0		
  6811                                  
  6812                                  		mov	ax, 4101h	; wait for bh=es:[di]
  6813                                  		mov	bl, 1		; wait for 1 clock tick
  6814                                  		mov	bh, [es:di]
  6815                                  		stc			; Assume we will fail
  6816                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  6817                                  					; AL = condition type, BH = condition compare or mask value
  6818                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  6819                                  					; DX = I/O port	address	if AL bit 4 set
  6820                                  					; 11/12/2023
  6821                                  					; ES:DI = user byte if AL bit 4 clear
  6822                                  %endif
  6823                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  6824                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  6825                                  	
  6826                                  		; ........
  6827                                  
  6828 000020AF B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  6829 000020B2 B304                    		mov	bl, 4		; wait for 4 clock ticks
  6830 000020B4 F9                      		stc			; Assume we will fail
  6831 000020B5 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  6832                                  					; AL = condition type, BH = condition compare or mask value
  6833                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  6834                                  					; DX = I/O port address if AL bit 4 set
  6835                                  		; ........
  6836                                  
  6837 000020B7 5F                      		pop	di ; ?
  6838 000020B8 721B                    		jc	short configdone ; 21/12/2022
  6839                                  
  6840 000020BA C606[7900]01            		mov	byte [fhavek09], 1
  6841                                  					; remember we have a k09 type
  6842 000020BF 1E                      		push	ds
  6843 000020C0 31C0                    		xor	ax, ax
  6844 000020C2 8ED8                    		mov	ds, ax
  6845                                  		
  6846 000020C4 893EB001                		mov	[6Ch*4], di
  6847                                  		;mov	ds:1B0h, di	; [6Ch*4]
  6848                                  					; new int 6Ch handler
  6849                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  6850 000020C8 8C0EB201                		mov	word [6Ch*4+2], cs
  6851 000020CC 1F                      		pop	ds
  6852                                  		; 20/12/2022
  6853                                  		; ds = cs = es
  6854                                  		;mov	si, int6c
  6855                                  		;mov	cx, endk09-int6c ; 459
  6856                                  		;;mov	cx, 459		; endk09 - int6c
  6857                                  					; size of k09 routine
  6858                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6859                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  6860 000020CD BE[3E18]                		mov	si, int_6Ch
  6861 000020D0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  6862 000020D3 F3A4                    		rep movsb		;
  6863                                  					; set up config	stuff for sysinit
  6864                                  ; ----------------------------------------------------------------------------
  6865                                  ; Set up config stuff for SYSINIT
  6866                                  
  6867                                  ; 17/10/2022
  6868                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  6869                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  6870                                  ; 09/12/2022
  6871                                  SETDRIVE equ SetDrive
  6872                                  GETBP equ GetBp
  6873                                  		
  6874                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6875                                  configdone:	
  6876                                  		; 21/12/2022			
  6877                                  		; 20/03/2019
  6878                                  		;push	cs		; di is	final ending address of	msbio.
  6879                                  		;pop	ds
  6880                                  		
  6881 000020D5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  6882                                  		; 10/12/2022
  6883                                  		;shr	di, 1
  6884                                  		;shr	di, 1
  6885                                  		;shr	di, 1
  6886                                  		;shr	di, 1
  6887 000020D8 B104                    		mov	cl, 4
  6888 000020DA D3EF                    		shr	di, cl		
  6889                                  		; 10/12/2022
  6890 000020DC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  6891                                  		; 19/10/2022 - Temporary !
  6892                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  6893 000020DF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  6894                                  
  6895                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  6896                                  
  6897                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  6898                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  6899                                  	     
  6900                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  6901                                  
  6902                                  ; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 combined/single kernel file)
  6903                                  
  6904                                  	     ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  6905                                  
  6906                                  	     ; (("IBMDOS.COM" kernel file reading code here, below...))	
  6907                                  
  6908                                  ; ----------------------------------------------------------------------------
  6909                                  ; ----------------------------------------------------------------------------
  6910                                  %if 0
  6911                                  		mov	ax, [drvfat]	; get drive and	fat id
  6912                                  		; 22/12/2022
  6913                                  		; Note: SETDRIVES uses AL (drive number) only
  6914                                  		mov	bp, SETDRIVE
  6915                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6916                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  6917                                  					; at 2C7h:4D7h = 70h:2A47h
  6918                                  		push	cs		; simulate far call
  6919                                  		call	call_bios_code	; get bds for drive
  6920                                  		mov	bp, GETBP	; ensure valid bpb is present
  6921                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6922                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  6923                                  		push	cs
  6924                                  		call	call_bios_code
  6925                                  
  6926                                  	; resort to funky old segment definitions for now
  6927                                  
  6928                                  		; 22/12/2022
  6929                                  		;push	es		; copy bds to ds:di
  6930                                  		;pop	ds
  6931                                  
  6932                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  6933                                  	;
  6934                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  6935                                  	;	  back. Apparently it was what actually setup es: for the following
  6936                                  	; cas----
  6937                                  
  6938                                  		; 22/12/2022
  6939                                  		;xor	di, di
  6940                                  		;mov	al, [es:di]	; get fat id byte
  6941                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  6942                                  		;mov	[es:drvfat+1], al
  6943                                  		;mov	ax, [es:drvfat]
  6944                                  		
  6945                                  		; 22/12/2022
  6946                                  		; ds = cs
  6947                                  	;;;	mov	al, [drvfat]
  6948                                  
  6949                                  	; cas -- why do a SECOND setdrive here???
  6950                                  
  6951                                  		; 22/12/2022
  6952                                  		;push	es		; save whatever's in es
  6953                                  		;push	ds		; copy bds to es:di
  6954                                  		;pop	es
  6955                                  		;push	cs		; copy Bios_Data to ds
  6956                                  		;pop	ds
  6957                                  	
  6958                                  	; 22/12/2022
  6959                                  	;;;	mov	bp, SETDRIVE
  6960                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  6961                                  	;;;	push	cs		; simulate far call
  6962                                  	;;;	call	call_bios_code	; get correct bds for this drive
  6963                                  	
  6964                                  		; 22/12/2022
  6965                                  		;push	es		; copy bds back to ds:di
  6966                                  		;pop	ds
  6967                                  		;pop	es		; pop whatever was in es
  6968                                  
  6969                                  	; Now we load in the MSDOS.SYS file
  6970                                  
  6971                                  	; 22/12/2022
  6972                                  	; -----
  6973                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6974                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  6975                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  6976                                  	;				; get size of fat on media
  6977                                  	;	;mov	es:16DEh, bl
  6978                                  	;	mov	[es:fbigfat], bl
  6979                                  	;	mov	cl, [di+8]
  6980                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6981                                  	;	;sub	es:16D8h, ax
  6982                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  6983                                  	;				; need a logical sector number that will
  6984                                  	;				; be used by getclus(diskrd procedure)
  6985                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  6986                                  	;	;sbb	es:16DAh, ax
  6987                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  6988                                  	; -----
  6989                                  		
  6990                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6991                                  	; -----	; 22/12/2022
  6992                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6993                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  6994                                  		; 11/12/2023 ; *
  6995                                  		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  6996                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  6997                                  					; get size of fat on media
  6998                                  		mov	[fbigfat], bl
  6999                                  		mov	cl, [es:di+8]
  7000                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  7001                                  		sub	[First_Data_Sector], ax ; *
  7002                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  7003                                  					; need a logical sector number that will
  7004                                  					; be used by getclus(diskrd procedure)
  7005                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7006                                  		sbb	[First_Data_Sector+2], ax ; *
  7007                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  7008                                  	; ------
  7009                                  
  7010                                  		xor	ch, ch	 ; cx = sectors/cluster
  7011                                  
  7012                                  	; the boot program has left the directory at 0:500h
  7013                                  
  7014                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7015                                  		;push	di
  7016                                  		push	ds
  7017                                  		;xor	di, di
  7018                                  		;mov	ds, di
  7019                                  		xor	bx, bx ; 0
  7020                                  		mov	ds, bx
  7021                                  		mov	bx, [53Ah]
  7022                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  7023                                  				   	; of root directory in the buffer at 500h)
  7024                                  		pop	ds
  7025                                  		mov     si, [firstcluster_hw] ; 11/12/2023 
  7026                                  				   	; (32 bit cluster number for FAT32 fs)
  7027                                  		;pop	ds
  7028                                  		;pop	di
  7029                                  
  7030                                  		; 12/12/2023
  7031                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  7032                                  		; ...........
  7033                                  		; ds = cs
  7034                                  		mov	al, [fbigfat]
  7035                                  		push	ax              ; (*) save fbigfat flags
  7036                                  		mov	al, [drvfat]
  7037                                  		or	al, [Boot_Drv]
  7038                                  		jnz	short boot_drv_fixed ; hard disk
  7039                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  7040                                  		push	bx              ; for removable drives
  7041                                  		push	cx
  7042                                  		; 28/12/2023
  7043                                  		;push	dx ; (not necessary)
  7044                                  	
  7045                                  		; 12/12/2023
  7046                                  		push	es
  7047                                  		pop	ds
  7048                                  
  7049                                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  7050                                  		xor	dx, dx
  7051                                  		or	ax, ax
  7052                                  		jnz	short prep_totalsecs_ok
  7053                                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  7054                                  		mov	dx, [di+1Dh]
  7055                                  prep_totalsecs_ok:
  7056                                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  7057                                  		sbb	dx, 0
  7058                                  		push	ax
  7059                                  		push	dx
  7060                                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  7061                                  		xor	ax, ax
  7062                                  		or	bx, bx
  7063                                  		jnz	short prep_fatsecs_ok
  7064                                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  7065                                  		mov	ax, [di+21h]
  7066                                  prep_fatsecs_ok:
  7067                                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  7068                                  				        ; [di+BDS.fats]
  7069                                  		xor	ch, ch
  7070                                  		mul	cx
  7071                                  		xchg	ax, cx
  7072                                  		mul	bx
  7073                                  		add	cx, dx
  7074                                  		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  7075                                  		pop	dx
  7076                                  		pop	ax              ; dx:ax = totals sectors - reserved sectors
  7077                                  		sub	ax, bx
  7078                                  		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  7079                                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  7080                                  		add	bx, 15          ; 16 directory entries per sector
  7081                                  				        ; (round up sector count by adding 15)
  7082                                  		mov	cl, 4           ; (rounded) dir entries / 16
  7083                                  		shr	bx, cl
  7084                                  		xor	cx, cx
  7085                                  		sub	ax, bx
  7086                                  		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  7087                                  					; (will be used for cluster count calculation)
  7088                                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  7089                                  
  7090                                  		; 12/12/2023
  7091                                  		push	cs
  7092                                  		pop	ds
  7093                                  
  7094                                  		push	ax              ; 32 bit division (data sectors / sector per cluster)
  7095                                  		mov	ax, dx
  7096                                  		xor	dx, dx
  7097                                  		div	cx
  7098                                  		mov	bx, ax
  7099                                  		pop	ax
  7100                                  		div	cx
  7101                                  		or	bx, bx          ; 32 bit cluster count if bx > 0
  7102                                  		jnz	short set_fbigbig_flag ; too big cluster number
  7103                                  		cmp	ax, 0FFF6h
  7104                                  		jb	short set_fbig_flag
  7105                                  set_fbigbig_flag:
  7106                                  		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  7107                                  		jmp	short set_fbig_flag_ok
  7108                                  ; ---------------------------------------------------------------------------
  7109                                  
  7110                                  set_fbig_flag:
  7111                                  		cmp	ax, 0FF6h       ; 4096-10
  7112                                  				        ; is this 16-bit fat?
  7113                                  		jb	short set_fbig_flag_ok ; no, small fat
  7114                                  		or	byte [fbigfat], 40h ; FAT16 ; fbig
  7115                                  set_fbig_flag_ok:
  7116                                  		; 28/12/2023
  7117                                  		;pop	dx
  7118                                  		pop	cx
  7119                                  		pop	bx
  7120                                  boot_drv_fixed:
  7121                                  		xor	di, di
  7122                                  
  7123                                  		; cx = sectors/cluster
  7124                                  		; si:bx = first cluster
  7125                                  		; di = 0
  7126                                  
  7127                                  		; ...........
  7128                                  loadit:
  7129                                  		mov	ax, SYSINITSEG	; 46Dh
  7130                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  7131                                  		;;mov	ax, 46Dh	; sysinit segment
  7132                                  		mov	es, ax
  7133                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  7134                                  		;mov	es, [es:271h]
  7135                                  
  7136                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  7137                                  
  7138                                  ; ----------------------------------------------------------------------------
  7139                                  
  7140                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7141                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  7142                                  
  7143                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7144                                  		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7145                                  		jz	short iseof
  7146                                  
  7147                                  eofbigbig:	; si:bx = 32 bit cluster number
  7148                                  		cmp	si, 0FFFh
  7149                                  		jnz	short iseofx
  7150                                  		cmp	bx, 0FFF7h
  7151                                  		jmp	short iseofx
  7152                                  
  7153                                  ; ----------------------------------------------------------------------------
  7154                                  		; 13/12/2023
  7155                                  iseof:
  7156                                  		;;test	byte [cs:fbigfat], fbig
  7157                                  		;test	byte [cs:fbigfat], 40h ; fbig
  7158                                  		; 12/12/2023
  7159                                  		; ds = cs
  7160                                  		test	byte [fbigfat], 40h ; fbig
  7161                                  		jnz	short eofbig
  7162                                  		cmp	bx, 0FF7h
  7163                                  		jmp	short iseofx
  7164                                  ; ----------------------------------------------------------------------------
  7165                                  
  7166                                  eofbig:
  7167                                  		cmp	bx, 0FFF7h
  7168                                  iseofx:
  7169                                  		jb	short loadit	; keep loading until cluster = eof
  7170                                  
  7171                                  ; ----------------------------------------------------------------------------
  7172                                  
  7173                                  		; 19/04/2024
  7174                                  		; 28/12/2023
  7175                                  		pop	ax		; (*) restore fbigfat flags
  7176                                  					; (after loading DOS kernel)
  7177                                  		; 06/04/2024
  7178                                  		;mov	[cs:fbigfat], al
  7179                                  		mov	[fbigfat], al
  7180                                  %endif
  7181                                  ; ----------------------------------------------------------------------------
  7182                                  ; ----------------------------------------------------------------------------
  7183                                  	
  7184                                  		; 19/04/2024
  7185                                  
  7186 000020E3 E8FE04                  		call	setdrvparms
  7187                                  
  7188                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  7189                                  		;;jmp	far 46Dh:267h
  7190                                  		; 12/12/2023
  7191                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  7192                                  
  7193 000020E6 EA[6902]D904            		jmp	SYSINITSEG:SYSINITSTART
  7194                                  
  7195                                  ; =============== S U B	R O U T	I N E ========================================
  7196                                  
  7197                                  ; Following are subroutines to support resident device driver initialization
  7198                                  ;
  7199                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  7200                                  
  7201                                  ;	M035 -- begin changed section
  7202                                  
  7203                                  ;******************************************************************************
  7204                                  ; module name: remap
  7205                                  ;
  7206                                  ; descriptive name: all the code for himem that could be separated from msbio
  7207                                  ;
  7208                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  7209                                  ;	     letters) if more than two diskette drives on the system.
  7210                                  ;
  7211                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  7212                                  ;	       as usual and then rescan the bds chain to adjust the drive
  7213                                  ;	       letters. to do this, scan for disk drives and assign logical
  7214                                  ;	       drive number starting from 2 and then rescan diskette drives
  7215                                  ;	       and assign next to the last logical drive number of last disk
  7216                                  ;	       drive to the 3rd and 4th diskette drives.
  7217                                  
  7218                                  ; input:       none
  7219                                  ; exit:	drive letters have been remapped in bds chain
  7220                                  ; exit error:  none
  7221                                  ; called from: msinit
  7222                                  ;
  7223                                  ; notes:  this function  will be called only if more than 2 diskettes are
  7224                                  ;	  found in the system
  7225                                  ;	  this function assumes that there are no more than 26 drives assigned
  7226                                  ;	    this is guaranteed by the code that creates bdss for partitions
  7227                                  ;	  this function assumes that the first entries in the chain are
  7228                                  ;	   floppy drives, and all the rest are hard drives
  7229                                  ;	  will alter the boot drive if necessary to reflect remapping
  7230                                  ;
  7231                                  ;******************************************************************************
  7232                                  
  7233                                  ; 17/10/2022
  7234                                  ; 02/10/2022
  7235                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7236                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  7237                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  7238                                  
  7239                                  remap:		; proc near
  7240                                  
  7241                                  		; 15/12/2023
  7242                                  		; ds = cs
  7243                                  		;mov	di, [cs:start_bds] ; get first bds
  7244 000020EB 8B3E[1901]              		mov	di, [start_bds]
  7245                                  
  7246                                  ; search for 1st fixed disk physical drive num
  7247                                  
  7248                                  drive_loop:
  7249 000020EF 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  7250                                  					; first	hard disk??
  7251 000020F3 7409                    		jz	short fdrv_found ; yes,	continue
  7252 000020F5 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7253                                  					; get next bds,	assume segment
  7254 000020F7 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  7255 000020FA 75F3                    		jnz	short drive_loop ; loop	if not
  7256 000020FC EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  7257                                  
  7258                                  ;------------------------------------------------------------------------------
  7259                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  7260                                  ;logical drive nums to 3, 4, 5 etc.
  7261                                  ;------------------------------------------------------------------------------
  7262                                  
  7263                                  fdrv_found:
  7264 000020FE B002                    		mov	al, 2		; start	with logical drv num=2
  7265                                  fdrv_loop:
  7266 00002100 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7267 00002103 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7268                                  					; ds:di--> next	bds
  7269                                  		;inc	al		; set num for next drive
  7270                                  		; 18/12/2022
  7271 00002105 40                      		inc	ax
  7272 00002106 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  7273 00002109 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  7274                                  
  7275                                  ;------------------------------------------------------------------------------
  7276                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  7277                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  7278                                  ; any more.
  7279                                  ;------------------------------------------------------------------------------
  7280                                  
  7281                                  		;mov	di, [cs:start_bds] ; [start_bds]
  7282                                  		; 15/12/2023
  7283 0000210B 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  7284 0000210F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7285                                  					; ds:di-->bds2
  7286                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  7287 00002111 8A26[2501]              		mov	ah, [dsktnum]
  7288 00002115 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  7289                                  remap_loop1:
  7290 00002118 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7291                                  					; set new num to next floppy
  7292 0000211A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7293 0000211D FEC0                    		inc	al		; new number for next floppy
  7294 0000211F FECC                    		dec	ah		; count down extra floppies
  7295 00002121 75F5                    		jnz	short remap_loop1
  7296                                  
  7297                                  ; now we've got to adjust the boot drive if we reassigned it
  7298                                  
  7299                                  		; 15/12/2023
  7300                                  		;mov	al, [cs:drvfat]
  7301 00002123 A0[FA19]                		mov	al, [drvfat]
  7302 00002126 3C02                    		cmp	al, 2		; is it	a: or b: ?
  7303 00002128 721D                    		jb	short rmap_exit
  7304                                  		;sub	al, [cs:dsktnum]
  7305 0000212A 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  7306 0000212E 7204                    		jb	short remap_boot_flop ;	brif so
  7307                                  
  7308                                  ; we've got to remap the boot hard drive
  7309                                  ; subtract the number of EXTRA floppies from it
  7310                                  
  7311 00002130 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  7312 00002132 EB04                    		jmp	short remap_change_boot_drv
  7313                                  ; ---------------------------------------------------------------------------
  7314                                  
  7315                                  ; we've got to remap the boot floppy.
  7316                                  ; add the number of hard drive partitions to it
  7317                                  
  7318                                  remap_boot_flop:
  7319                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  7320                                  		; 15/12/2023
  7321 00002134 0206[7500]              		add	al, [drvmax]
  7322                                  remap_change_boot_drv:			
  7323                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  7324 00002138 A2[FA19]                		mov	[drvfat], al
  7325 0000213B FEC0                    		inc	al
  7326 0000213D 1E                      		push	ds
  7327 0000213E BFD904                  		mov	di, SYSINITSEG	; 46Dh
  7328                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  7329                                  		;;mov	di, 46Dh	; SYSINIT segment
  7330 00002141 8EDF                    		mov	ds, di
  7331 00002143 A2[9602]                		mov	[DEFAULTDRIVE], al
  7332                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  7333                                  					; pass it to sysinit as	well
  7334 00002146 1F                      		pop	ds ; ds = cs
  7335                                  rmap_exit:
  7336 00002147 C3                      		retn
  7337                                  
  7338                                  ; =============== S U B	R O U T	I N E =======================================
  7339                                  
  7340                                  ; 17/10/2022
  7341                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  7342                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  7343                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  7344                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  7345                                  ;**************************************************
  7346                                  ; getboot - get the boot sector for a hard disk
  7347                                  ;
  7348                                  ; Reads the boot sector from a specified drive into
  7349                                  ; a buffer at the top of memory.
  7350                                  ;
  7351                                  ; dl = int13 drive number to read boot sector for
  7352                                  ;**************************************************
  7353                                  
  7354                                  ; 17/10/2022
  7355                                  bootbias equ 200h
  7356                                  
  7357                                  getboot:	; proc near
  7358                                  
  7359                                  		; 15/12/2023 - Retro DOS v5.0 
  7360                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  7361                                  		; ds = cs
  7362                                  		
  7363                                  		; 08/04/2018
  7364                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  7365                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  7366                                  		; 02/10/2022 - Retro DOS v4.0
  7367                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  7368                                  
  7369                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  7370                                  		; 15/12/2023
  7371 00002148 A1[041A]                		mov	ax, [init_bootseg]
  7372 0000214B 8EC0                    		mov	es, ax
  7373                                  
  7374                                  		; 17/10/2022
  7375 0000214D BB0002                  		mov	bx, bootbias ; 200h
  7376                                  		;mov	bx, 200h	; bootbias
  7377                                  					; load BX, ES:BX is where sector goes
  7378 00002150 B80102                  		mov	ax, 201h
  7379 00002153 30F6                    		xor	dh, dh
  7380 00002155 B90100                  		mov	cx, 1
  7381 00002158 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7382                                  					; AL = number of sectors to read, CH = track, CL = sector
  7383                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7384                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7385 0000215A 7209                    		jc	short erret
  7386                                  		; 17/10/2022
  7387 0000215C 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  7388                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  7389                                  					; Dave Litton magic word?
  7390 00002163 7401                    		jz	short norm_ret	; yes
  7391                                  erret:
  7392 00002165 F9                      		stc
  7393                                  norm_ret:
  7394 00002166 C3                      		retn
  7395                                  
  7396                                  ; =============== S U B	R O U T	I N E =======================================
  7397                                  
  7398                                  ; 28/12/2018 - Retro DOS v4.0 
  7399                                  
  7400                                  ;***************************************************************************
  7401                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  7402                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  7403                                  ;   our own logical sectors start. we also read in our boot sector to
  7404                                  ;   determine version number
  7405                                  ;
  7406                                  ;   inputs:	dl is rom drive number (80...)
  7407                                  ;		bh is partition number (0....) 
  7408                                  ;		ds:di points to bds
  7409                                  ;   outputs:	carry clear -> bpb is filled in
  7410                                  ;		carry set   -> bpb is left uninitialized due to error
  7411                                  ;	trashes (at least) si, cx
  7412                                  ;	MUST PRESERVE ES:!!!!
  7413                                  ;***************************************************************************
  7414                                  
  7415                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7416                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  7417                                  
  7418                                  sethard:	; proc near
  7419                                  		; 12/08/2023
  7420                                  		; ds = cs = BIOSDATA
  7421 00002167 57                      		push	di
  7422 00002168 53                      		push	bx
  7423                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  7424 00002169 06                      		push	es
  7425 0000216A 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  7426 0000216D 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  7427                                  		; 16/12/2023
  7428 00002170 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  7429                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  7430                                  					; fnon_removable
  7431 00002174 C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  7432                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7433                                  					; ffHardFile
  7434 00002178 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  7435 0000217D 88FE                    		mov	dh, bh		; partition number
  7436 0000217F 52                      		push	dx
  7437 00002180 B408                    		mov	ah, 8
  7438 00002182 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7439                                  					; DL = drive number
  7440                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7441                                  					; DL = number of consecutive drives
  7442                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7443                                  		;inc	dh
  7444                                  		; 16/12/2023 - Retro DOS v5.0
  7445 00002184 88F2                    		mov	dl, dh
  7446 00002186 B600                    		mov	dh, 0
  7447 00002188 42                      		inc	dx
  7448                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  7449 00002189 895515                  		mov	[di+15h], dx
  7450 0000218C 5A                      		pop	dx
  7451 0000218D 7253                    		jc	short setret	; error	if no hard disk
  7452                                  		; 16/12/2023
  7453                                  		;jc	short setret_j
  7454                                  		
  7455 0000218F 80E13F                  		and	cl, 3Fh
  7456 00002192 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  7457 00002195 52                      		push	dx		; save partition number
  7458 00002196 E8AFFF                  		call	getboot
  7459 00002199 5A                      		pop	dx		; restore partition number
  7460 0000219A 7246                    		jc	short setret
  7461                                  		; 16/12/2023
  7462                                  		;jnc	short chk_act_part
  7463                                  ;setret_j:
  7464                                  		;jmp	setret
  7465                                  
  7466                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7467                                  chk_act_part:
  7468 0000219C 31DB                    		xor	bx, bx ; 0
  7469                                  		;;mov	[cs:ep_start_sector], bx
  7470                                  		;;mov	[cs:ep_start_sector+2], bx
  7471                                  		;mov	[cs:ep_hidden_secs], bx
  7472                                  		;mov	[cs:ep_hidden_secs+2], bx
  7473                                  		; 16/12/2023
  7474                                  		; ds = cs
  7475                                  		; 20/12/2023
  7476                                  		;mov	[ep_start_sector], bx
  7477                                  		;mov	[ep_start_sector+2], bx
  7478 0000219E 891E[0422]              		mov	[ep_hidden_secs], bx
  7479 000021A2 891E[0622]              		mov	[ep_hidden_secs+2], bx
  7480                                  		
  7481 000021A6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7482                                  
  7483                                  ; The first 'active' partition is 00, the second is 01....
  7484                                  ;   then the remainder of the 'primary' but non-active partitions
  7485                                  
  7486                                  act_part:
  7487 000021A9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  7488 000021AE 740B                    		jz	short no_act	; no
  7489                                  ; 16/12/2023
  7490                                  %if 0		
  7491                                  		; 16/12/2023
  7492                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7493                                  		cmp	byte [es:bx], 1 ; FAT12
  7494                                  		jz	short got_good_act
  7495                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7496                                  		jz	short got_good_act
  7497                                  		
  7498                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7499                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7500                                  		jz	short got_good_act
  7501                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7502                                  		jz	short got_good_act
  7503                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7504                                  		jz	short got_good_act
  7505                                  
  7506                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7507                                  		jnz	short no_act
  7508                                  ;%else
  7509                                  		; 16/12/2023
  7510                                  		mov	al, [es:bx]	 ; partition type
  7511                                  
  7512                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7513                                  		cmp	al, 1		; FAT12
  7514                                  		je	short got_good_act
  7515                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7516                                  		je	short got_good_act
  7517                                  		
  7518                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7519                                  		cmp	al, 0Bh		; FAT32 CHS
  7520                                  		je	short got_good_act
  7521                                  		cmp	al, 0Ch		; FAT32 LBA
  7522                                  		je	short got_good_act
  7523                                  		cmp	al, 0Eh		; FAT16 LBA
  7524                                  		je	short got_good_act
  7525                                  
  7526                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7527                                  		jne	short no_act
  7528                                  %endif		
  7529                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7530                                  		; check if it is a primary dos partition
  7531                                  
  7532 000021B0 E83300                  		call	chk_partition_type
  7533 000021B3 7506                    		jne	short no_act
  7534                                  
  7535                                  got_good_act:				; 11/08/2023
  7536 000021B5 08F6                    		or	dh, dh		; is this our target partition #?
  7537                                  					; (0 = first primary dos or active partition)
  7538 000021B7 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  7539 000021B9 FECE                    		dec	dh		; count	down
  7540                                  no_act:					
  7541 000021BB 83C310                  		add	bx, 16
  7542 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7543                                  					; last entry done?
  7544 000021C2 75E5                    		jnz	short act_part	; no, process next entry
  7545                                  
  7546 000021C4 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7547                                  					; restore original value of bx
  7548                                  
  7549                                  ; Now scan the non-active partitions
  7550                                  
  7551                                  get_primary:
  7552 000021C7 26F647FC80              		test	byte [es:bx-4], 80h
  7553 000021CC 750B                    		jnz	short not_prim	; we've already scanned
  7554                                  					; the ACTIVE ones
  7555                                  ; 16/12/2023
  7556                                  %if 0
  7557                                  		; 16/12/2023
  7558                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7559                                  		cmp	byte [es:bx], 1	; FAT12
  7560                                  		jz	short got_prim
  7561                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7562                                  		jz	short got_prim
  7563                                  
  7564                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7565                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7566                                  		jz	short got_prim
  7567                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7568                                  		jz	short got_prim
  7569                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7570                                  		jz	short got_prim
  7571                                  
  7572                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7573                                  		jnz	short not_prim
  7574                                  ;%else
  7575                                  		; 16/12/2023
  7576                                  		mov	al, [es:bx]	 ; partition type
  7577                                  
  7578                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7579                                  		cmp	al, 1		; FAT12
  7580                                  		je	short got_prim
  7581                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7582                                  		je	short got_prim
  7583                                  		
  7584                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7585                                  		cmp	al, 0Bh		; FAT32 CHS
  7586                                  		je	short got_prim
  7587                                  		cmp	al, 0Ch		; FAT32 LBA
  7588                                  		je	short got_prim
  7589                                  		cmp	al, 0Eh		; FAT16 LBA
  7590                                  		je	short got_prim
  7591                                  
  7592                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7593                                  		jne	short not_prim
  7594                                  %endif
  7595                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7596                                  		; check if it is a primary dos partition
  7597                                  
  7598 000021CE E81500                  		call	chk_partition_type
  7599 000021D1 7506                    		jne	short not_prim
  7600                                  
  7601                                  got_prim:
  7602 000021D3 08F6                    		or	dh, dh		; is this our target partition?
  7603 000021D5 7431                    		jz	short set2
  7604 000021D7 FECE                    		dec	dh
  7605                                  not_prim:
  7606 000021D9 83C310                  		add	bx, 16
  7607 000021DC 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7608 000021E0 75E5                    		jnz	short get_primary ; loop till we've gone through table
  7609                                  setret:					
  7610 000021E2 F9                      		stc			; error	return
  7611 000021E3 E9C703                  		jmp	ret_hard_err
  7612                                  
  7613                                  ; ---------------------------------------------------------------------------
  7614                                  		
  7615                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7616                                  
  7617                                  chk_partition_type:
  7618                                  		; 16/12/2023
  7619 000021E6 268A07                  		mov	al, [es:bx]	 ; partition type
  7620                                  
  7621                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7622 000021E9 3C01                    		cmp	al, 1		; FAT12
  7623 000021EB 7412                    		je	short chk_ptype_retn
  7624 000021ED 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7625 000021EF 740E                    		je	short chk_ptype_retn
  7626                                  		
  7627                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7628 000021F1 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  7629 000021F3 740A                    		je	short chk_ptype_retn
  7630 000021F5 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  7631 000021F7 7406                    		je	short chk_ptype_retn
  7632 000021F9 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  7633 000021FB 7402                    		je	short chk_ptype_retn
  7634                                  
  7635 000021FD 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7636                                  chk_ptype_retn:
  7637                                  		; zf = 1 -> primary DOS partition
  7638                                  		; zf = 0 -> not a primary DOS partition
  7639 000021FF C3                      		retn
  7640                                  
  7641                                  ; ---------------------------------------------------------------------------
  7642                                  
  7643                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7644                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  7645                                  ep_start_sector:
  7646 00002200 00000000                		dd 0
  7647 00002204 00000000                ep_hidden_secs:	dd 0
  7648                                  
  7649                                  ; ---------------------------------------------------------------------------
  7650                                  
  7651                                  ;  until we get the real logical boot record and get the bpb,
  7652                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  7653                                  ;  for the convenience of the computation.
  7654                                  ;
  7655                                  ;  at the end of this procedure, if a bpb information is gotten from
  7656                                  ;  the valid boot record, then we are going to use those bpb information
  7657                                  ;  without change.
  7658                                  ;
  7659                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  7660                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  7661                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  7662                                  
  7663                                  set2:		
  7664                                  		; 12/08/2023
  7665                                  		; ds = cs = BIOSDATA segment (0070h)
  7666 00002208 8816[071A]              		mov	[rom_drv_num], dl
  7667                                  		;mov	[cs:rom_drv_num], dl
  7668                                  			; save the rom bios drive number we are handling now.
  7669 0000220C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  7670 00002210 268B5706                		mov	dx, [es:bx+6]
  7671                                  
  7672                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  7673                                  ; sectors should be allowed	
  7674                                  
  7675 00002214 83E801                  		sub	ax, 1
  7676 00002217 83DA00                  		sbb	dx, 0
  7677 0000221A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  7678 0000221E 2613570A                		adc	dx, [es:bx+10]
  7679 00002222 7305                    		jnc	short okdrive
  7680 00002224 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7681                                  
  7682                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7683                                  		;;;
  7684                                  okdrive:
  7685                                  		;add	ax, [cs:ep_hidden_secs]
  7686                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7687                                  		; ds = cs
  7688 00002229 0306[0422]              		add	ax, [ep_hidden_secs]
  7689 0000222D 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7690 00002231 7305                    		jnc	short okdrive_1
  7691 00002233 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7692                                  okdrive_1:
  7693 00002238 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  7694 0000223C 7418                    		je	short set_lba_flag
  7695 0000223E 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  7696 00002242 7412                    		je	short set_lba_flag
  7697 00002244 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  7698 00002247 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  7699 00002249 F77513                  		div	word [di+13h]
  7700 0000224C 31D2                    		xor	dx, dx
  7701 0000224E F77515                  		div	word [di+15h]
  7702 00002251 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  7703                                  					;  set LBA r/w flag
  7704 00002254 7204                     		jb	short set3
  7705                                  set_lba_flag:
  7706 00002256 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  7707                                  		;;;
  7708                                  ;okdrive:
  7709                                  		; 16/12/2023
  7710                                  set3:		
  7711                                  		;mov	ax, [es:bx+4]
  7712                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7713                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  7714                                  		;mov	ax, [es:bx+6]
  7715                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  7716                                  
  7717                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7718                                  		;;;
  7719 0000225A 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  7720 0000225E 268B5706                		mov	dx, [es:bx+6]
  7721                                  		;add	ax, [cs:ep_hidden_secs]
  7722                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7723                                  		; ds = cs
  7724 00002262 0306[0422]              		add	ax, [ep_hidden_secs]
  7725                                  					; + hidden secs of the extd dos partion
  7726 00002266 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7727 0000226A 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7728 0000226D 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  7729 00002270 31C0                    		xor	ax, ax ; 0
  7730 00002272 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  7731 00002275 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  7732                                  		;;;
  7733                                  
  7734 00002278 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  7735 0000227C 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  7736 00002280 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  7737 00002283 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  7738                                  					; bpb->maxsec =	p->partitionlength
  7739                                  		;cmp	dx, 0
  7740                                  		;ja	short okdrive_1
  7741                                  		; 16/12/2023
  7742 00002286 09D2                    		or	dx, dx
  7743 00002288 7505                    		jnz	short set3_read
  7744 0000228A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  7745                                  		;jb	short setret	; return -1;
  7746 0000228D 7264                    		jb	short set3_err
  7747                                  ;okdrive_1:
  7748                                  		; 16/12/2023
  7749                                  set3_read:
  7750 0000228F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  7751 00002292 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  7752 00002295 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  7753                                  					; usually equal	to the # of sec/trk.
  7754 00002297 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  7755 0000229A 50                      		push	ax
  7756 0000229B 89D0                    		mov	ax, dx
  7757 0000229D 31D2                    		xor	dx, dx
  7758 0000229F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  7759                                  					; (track)temp_h:ax + (sector)dx
  7760                                  ; 16/12/2023
  7761                                  %if 0
  7762                                  		; 17/10/2022
  7763                                  		;mov	[cs:temp_h], ax
  7764                                  		; 12/08/2023 (ds=cs)
  7765                                  		mov	[temp_h], ax
  7766                                  		pop	ax
  7767                                  		div	bx
  7768                                  		mov	cl, dl
  7769                                  		inc	cl
  7770                                  		xor	bx, bx
  7771                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  7772                                  		push	ax
  7773                                  		xor	dx, dx
  7774                                  		;mov	ax, [cs:temp_h]
  7775                                  		mov	ax, [temp_h] ; 12/08/2023
  7776                                  		div	bx
  7777                                  		;mov	[cs:temp_h], ax
  7778                                  		mov	[temp_h], ax ; 12/08/2023
  7779                                  		pop	ax
  7780                                  		div	bx		; dl is head, ax is cylinder
  7781                                  		; 12/08/2023 (ds=cs)
  7782                                  		cmp	word [temp_h], 0
  7783                                  		;cmp	word [cs:temp_h], 0
  7784                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7785                                  		cmp	ax, 1024
  7786                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7787                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  7788                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  7789                                  			; ('ja' must be 'jnb')
  7790                                  okdrive_2:
  7791                                   		; 28/07/2019
  7792                                  ; dl is head.
  7793                                  ; ax is cylinder
  7794                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  7795                                  
  7796                                  ;*** for mini disks ***
  7797                                  
  7798                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7799                                  					; check for mini disk
  7800                                  		jnz	short oknotmini	; not mini disk.
  7801                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  7802                                  					; set the physical track number
  7803                                  oknotmini:
  7804                                  %endif
  7805                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7806                                  		;;;
  7807                                  		;mov	[cs:saved_word], ax
  7808 000022A1 A3[9E04]                		mov	[saved_word], ax
  7809 000022A4 58                      		pop	ax
  7810 000022A5 F7F3                    		div	bx
  7811 000022A7 88D1                    		mov	cl, dl
  7812 000022A9 FEC1                    		inc	cl
  7813 000022AB 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  7814 000022AE 50                      		push	ax
  7815 000022AF 31D2                    		xor	dx, dx
  7816                                  		;mov	ax, [cs:saved_word]
  7817 000022B1 A1[9E04]                		mov	ax, [saved_word]
  7818 000022B4 F7F3                    		div	bx
  7819                                  		;mov	[cs:saved_word], ax
  7820 000022B6 A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  7821 000022B9 58                      		pop	ax
  7822 000022BA F7F3                    		div	bx		; dl is head, ax is cylinder
  7823                                  		; 16/12/2023
  7824 000022BC 0E                      		push	cs
  7825 000022BD 07                      		pop	es ; (*)
  7826 000022BE BB[5201]                		mov	bx, disksector ; (**)
  7827                                  		;
  7828 000022C1 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  7829 000022C5 742F                    		jz	short set3_chs_read
  7830                                  set3_lba_read:
  7831                                  
  7832                                  ; 16/12/2023
  7833                                  %if 0
  7834                                  		;push	cs
  7835                                  		;pop	es ; (*)
  7836                                  		;mov	bx, disksector ; (**)
  7837                                  
  7838                                  		;push	ds
  7839                                  		;push	si
  7840                                  		xor	ax, ax	; 0
  7841                                  		push	ax
  7842                                  		push	ax
  7843                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  7844                                  		push	ax
  7845                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  7846                                  		push	ax
  7847                                  		push	es		; buffer address
  7848                                  		push	bx
  7849                                  		mov	ax, 1		; sector (read) count
  7850                                  		push	ax
  7851                                  		;mov	ax, 16		; DAP size
  7852                                  		mov	al, 16
  7853                                  		push	ax
  7854                                  		mov	dl, [rom_drv_num] ; ds = cs
  7855                                  		mov	ax, ss
  7856                                  		mov	ds, ax ; ds = ss
  7857                                  		mov	si, sp
  7858                                  		;mov	dl, [cs:rom_drv_num]
  7859                                  		mov	ah, 42h
  7860                                  		int	13h		; DISK - IBM/MS Extension
  7861                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7862                                  		;pop	si
  7863                                  		;pop	ds
  7864                                  		jnc	short set3_lba_read_ok
  7865                                  		add	sp, 16
  7866                                  		;pop	si
  7867                                  		;pop	ds
  7868                                  set3_err:
  7869                                  		;jmp	setret
  7870                                  		jmp	ret_hard_err
  7871                                  
  7872                                  set3_lba_read_ok
  7873                                  		add	sp, 16
  7874                                  		;pop	si
  7875                                  		;pop	ds
  7876                                  		jmp	short set3_read_ok
  7877                                  %else
  7878                                  		; 16/12/2023
  7879                                  		;push	si ; * ; (not necessary)
  7880                                  		;mov	si, empty_dap_buff ; dap_buffer
  7881 000022C7 BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  7882 000022CA 56                      		push	si
  7883 000022CB 87FE                    		xchg	si, di
  7884                                  		; si = BDS
  7885                                  		; di = DAP buffer
  7886 000022CD B81000                  		mov	ax, 16
  7887 000022D0 AB                      		stosw		; DAP size
  7888 000022D1 B001                    		mov	al, 1
  7889 000022D3 AB                      		stosw		; sector (read) count
  7890                                  		; buffer address
  7891 000022D4 89D8                    		mov	ax, bx	; offset disksector
  7892 000022D6 AB                      		stosw
  7893 000022D7 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  7894 000022D9 AB                      		stosw
  7895                                  		; sector address (bits 0 to 31)	
  7896 000022DA 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  7897 000022DD AB                      		stosw
  7898 000022DE 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  7899 000022E1 AB                      		stosw
  7900                                  		; sector address bits 32 to 63 (0)
  7901 000022E2 31C0                    		xor	ax, ax ; 0
  7902 000022E4 AB                      		stosw
  7903 000022E5 AB                      		stosw
  7904                                  		;xchg	di, si
  7905 000022E6 89F7                    		mov	di, si
  7906                                  		; di = BDS
  7907 000022E8 5E                      		pop	si ; DAP buffer address	
  7908                                  		
  7909 000022E9 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  7910 000022ED B442                    		mov	ah, 42h
  7911 000022EF CD13                    		int	13h		; DISK - IBM/MS Extension
  7912                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7913                                  		;pop	si ; *
  7914 000022F1 7324                    		jnc	short set3_read_ok
  7915                                  set3_err:
  7916                                  		;jmp	setret
  7917 000022F3 E9B702                  		jmp	ret_hard_err
  7918                                  %endif
  7919                                  
  7920                                  set3_chs_read:
  7921 000022F6 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  7922 000022FA 7503                    		jnz	short oknotmini
  7923 000022FC 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  7924                                  		;;;
  7925                                  
  7926                                  oknotmini:
  7927                                  ;*** end of added logic for mini disk
  7928                                  				
  7929 000022FF D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  7930 00002301 D0CC                    		ror	ah, 1		; two bits of upper byte
  7931 00002303 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  7932 00002306 08E1                    		or	cl, ah		; move two bits to correct spot
  7933 00002308 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  7934                                  					; cl is sector + 2 high bits of cylinder
  7935 0000230A 88D6                    		mov	dh, dl		; dh is	head
  7936                                  		
  7937                                  		; 12/08/2023 (ds=cs)
  7938 0000230C 8A16[071A]              		mov	dl, [rom_drv_num]
  7939                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  7940                                  
  7941                                  ; cl is sector + 2 high bits of cylinder
  7942                                  ; ch is low 8 bits of cylinder
  7943                                  ; dh is head
  7944                                  ; dl is drive
  7945                                  
  7946                                  ; for convenience, we are going to read the logical boot sector
  7947                                  ; into cs:disksector area.
  7948                                  
  7949                                  ; read in boot sector using bios disk interrupt. the buffer where it
  7950                                  ; is to be read in is cs:disksector.
  7951                                  
  7952                                  		; 16/12/2023
  7953                                  		; es=ds=cs = BIOSDATA segment
  7954                                  		; bx = disksector ; (**)
  7955                                  
  7956                                  		;push	cs
  7957                                  		;pop	es ; (*)
  7958                                  		
  7959                                  		;mov	bx, disksector	; for convenience,
  7960                                  					; we are going to read the logical boot sector
  7961                                  					; into cs:disksector area.
  7962 00002310 B80102                  		mov	ax, 201h
  7963 00002313 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7964                                  					; AL = number of sectors to read, CH = track, CL = sector
  7965                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7966                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7967                                  		; 16/12/2023
  7968 00002315 72DC                    		jc	short set3_err
  7969                                  
  7970                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  7971                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  7972                                  ; media if we recognize the version number.
  7973                                  
  7974                                  set3_read_ok:
  7975                                  		; 11/08/2023
  7976                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  7977                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  7978                                  		; 18/12/2023
  7979                                  		;push	bx ; +
  7980                                  		;push	ax ; (not necessary)
  7981                                  
  7982                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7983                                  		;;;
  7984 00002317 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  7985 0000231D 7541                    		jne	short invalid_boot_record
  7986                                  		; 16/12/2023
  7987                                  		; 12/08/2023
  7988                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  7989 0000231F 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  7990 00002322 740B                    		je	short check_1_ok ; yes
  7991 00002324 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  7992 00002327 7537                    		jne	short invalid_boot_record ; no
  7993 00002329 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  7994 0000232D 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  7995                                  check_1_ok:
  7996 0000232F 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  7997                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  7998                                  		; 16/12/2023
  7999 00002333 740E                    		jz	short check_2	; FAT32 bs
  8000                                  
  8001                                  		; FAT16 or FAT12 bs
  8002                                  
  8003                                  		;push	ds
  8004                                  		;push	si  ; (not necessary)
  8005 00002335 57                      		push	di
  8006                                  		; es=ds=cs = BIOSDATA segment
  8007                                  		;push	es
  8008                                  		;pop	ds
  8009                                  
  8010                                  		;mov	cx, 28
  8011 00002336 B90E00                  		mov	cx, 14 ; *
  8012 00002339 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  8013                                  					;      to offset 64 (28 bytes)
  8014 0000233C 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  8015 0000233F FC                      		cld	; (not necessary, 'std' is not used before here)
  8016                                  		;rep movsb
  8017 00002340 F3A5                    		rep movsw ; *
  8018 00002342 5F                      		pop	di
  8019                                  		;pop	si
  8020                                  		;pop	ds
  8021                                  		;;;
  8022                                  ; 16/12/2023
  8023                                  %if 0
  8024                                  ;check_1:
  8025                                  		; 12/08/2023
  8026                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  8027                                  		cmp	byte [bx], 0E9h
  8028                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  8029                                  		je	short check_1_ok ; yes
  8030                                  		cmp	byte [bx], 0EBh
  8031                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  8032                                  		jne	short invalid_boot_record ; no
  8033                                  		cmp	byte [bx+2], 90h
  8034                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  8035                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8036                                  check_1_ok:
  8037                                  %endif
  8038                                  
  8039                                  ; 18/12/2023
  8040                                  %if 0
  8041                                  		; 14/08/2023
  8042                                  check_2:
  8043                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  8044                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  8045                                  					; point to the bpb in the boot record
  8046                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  8047                                  		mov	al, [bx+10] ; 12/08/2023 
  8048                                  					; get the mediadescriptor byte
  8049                                  		and	al, 0F0h	; mask off low nibble
  8050                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  8051                                  		jne	short invalid_boot_record ; no, invalid boot record
  8052                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  8053                                  		cmp	word [bx], 512 ; 12/08/2023
  8054                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8055                                  
  8056                                  check2_ok:				; yes, mediadescriptor ok.
  8057                                  		mov	al, [bx+2] ; 12/08/2023
  8058                                  		;mov	al, [cs:bx+2]	; now make sure that
  8059                                  					; the sectorspercluster is
  8060                                  					; a power of 2
  8061                                  					;
  8062                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  8063                                  					; get the sectorspercluster
  8064                                  %endif
  8065                                  		;;;
  8066                                  check_2:
  8067                                  		; 18/12/2023
  8068                                  		; bx = disksector
  8069 00002343 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  8070                                  					; get the mediadescriptor byte
  8071 00002346 24F0                    		and	al, 0F0h	; mask off low nibble
  8072 00002348 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  8073 0000234A 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  8074 0000234C 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  8075 00002351 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8076                                  
  8077                                  check2_ok:	; yes, mediadescriptor ok.
  8078 00002353 8A470D                  		mov	al, [bx+13]	; now make sure that
  8079                                  					; the sectorspercluster is
  8080                                  					; a power of 2
  8081                                  					;
  8082                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  8083                                  					; get the sectorspercluster
  8084                                  		;;;
  8085                                  
  8086 00002356 08C0                    		or	al, al		; is it zero?
  8087 00002358 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  8088                                  
  8089                                  ck_power_of_two:
  8090 0000235A D0E8                    		shr	al, 1		; shift until first bit emerges
  8091 0000235C 73FC                    		jnc	short ck_power_of_two
  8092 0000235E 7406                    		jz	short valid_boot_record
  8093                                  
  8094                                  invalid_boot_record:
  8095                                  		; 18/12/2023
  8096                                  		;pop	ax
  8097                                  		;pop	bx ; +
  8098 00002360 E96001                  		jmp	unknown		; jump to invalid boot record
  8099                                  					; unformatted or illegal media.
  8100                                  ; 16/12/2023
  8101                                  ; ---------------------------------------------------------------------------
  8102                                  ;	; 12/08/2023
  8103                                  ;setret_brdg:
  8104                                  ;		jmp	setret
  8105                                  ; ---------------------------------------------------------------------------
  8106                                  
  8107                                  unknown3_0_j:
  8108 00002363 E96101                  		jmp	unknown3_0	; legally formatted media,
  8109                                  					; although, content might be bad.
  8110                                  ; ---------------------------------------------------------------------------
  8111                                  
  8112                                  valid_boot_record:
  8113                                  		; 18/12/2023
  8114                                  		;pop	ax
  8115                                  		;pop	bx ; +
  8116                                  		
  8117                                  		; 18/12/2023
  8118                                  		; bx = offset disksector ; +
  8119                                  
  8120                                  ; Signature found. Now check version.
  8121                                  
  8122                                  		; 14/08/2023
  8123 00002366 817F08322E              		cmp	word [bx+8], '2.'
  8124                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  8125                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  8126 0000236B 7506                    		jne	short try5
  8127 0000236D 807F0A30                		cmp	byte [bx+10], '0'
  8128                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  8129                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  8130                                  		; 12/08/2023
  8131                                  		;jnz	short try5
  8132                                  		;jmp	short copybpb
  8133 00002371 7425                    		je	short copybpb
  8134                                  
  8135                                  ;; --------------------------------------------------------------------------
  8136                                  ;;	; 12/08/2023
  8137                                  ;;setret_brdg:
  8138                                  ;;		jmp	setret
  8139                                  ;; --------------------------------------------------------------------------
  8140                                  ;
  8141                                  ;unknown3_0_j:
  8142                                  ;		jmp	unknown3_0	; legally formatted media,
  8143                                  ;					; although, content might be bad.
  8144                                  ; ---------------------------------------------------------------------------
  8145                                  
  8146                                  try5:
  8147 00002373 E83B02                  		call	cover_fdisk_bug
  8148                                  
  8149                                  ; see if it is an os2 signature
  8150                                  
  8151                                  		; 12/08/2023
  8152                                  		; ds = cs = BIOSDATA segment
  8153 00002376 817F08302E              		cmp	word [bx+8], '0.'
  8154                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  8155                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  8156 0000237B 750C                    		jne	short no_os2
  8157 0000237D 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  8158                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  8159 00002380 2C31                    		sub	al, '1'
  8160                                  		;sub	al, 31h		; '1'
  8161 00002382 24FE                    		and	al, 0FEh
  8162 00002384 7412                    		jz	short copybpb	; accept either	'1' or '2'
  8163 00002386 E93A01                  		jmp	unknown
  8164                                  ; ---------------------------------------------------------------------------
  8165                                  
  8166                                  ; no os2 signature, this is to check for real dos versions
  8167                                  
  8168                                  no_os2:
  8169                                  		; 12/08/2023
  8170                                  		; ds = cs = BIOSDATA
  8171 00002389 817F08332E              		cmp	word [bx+8], '3.'			
  8172                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  8173                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  8174 0000238E 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  8175                                  					; do not trust it, but still legal.
  8176 00002390 7506                    		jnz	short copybpb	; honor	os2 boot record
  8177                                  					; or dos 4.0 version
  8178 00002392 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  8179                                  		;cmp	byte [cs:bx+10], '1'
  8180                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  8181 00002396 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  8182                                  copybpb:
  8183                                  
  8184                                  ; 03/10/2022
  8185                                  
  8186                                  ; we have a valid boot sector. use the bpb in it to build the
  8187                                  ; bpb in bios. it is assumed that only
  8188                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  8189                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  8190                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  8191                                  ; need to be set (all other values in already). fbigfat is also set.
  8192                                  
  8193                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  8194                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  8195                                  ; and system id according to the boot record.
  8196                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  8197                                  
  8198                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8199                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  8200                                  		;;;
  8201                                  		; 17/12/2023
  8202 00002398 BE[5D01]                		mov	si, disksector+11
  8203                                  		;sub	ch, ch ; ; (ch may be > 0)
  8204 0000239B 29C9                    		sub	cx, cx ; 0 
  8205                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  8206 0000239D 8A4C05                  		mov	cl, [si+5] ; number of FATs
  8207                                  
  8208                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  8209                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  8210                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  8211                                  
  8212                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  8213                                  		;cmp	word [disksector+4Dh], 0
  8214                                  		;jnz	short check_3
  8215                                  
  8216                                  		; 17/12/2023
  8217                                  		; check extended boot signature (0x29)
  8218                                  		;
  8219                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  8220                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  8221                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  8222                                  		
  8223                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  8224 000023A0 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  8225                                  		;jmp	short check_4
  8226                                  check_3:
  8227                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  8228                                  		;cmp	byte [disksector+26h], 29h ; (***)
  8229                                  check_4:
  8230 000023A5 7538                    		jnz	short copybpb_fat	; conventional fat system
  8231                                  
  8232                                  ; 17/12/2023
  8233                                  %if 0
  8234                                  		; 10/12/2022
  8235                                  		; (number of FATs optimization)
  8236                                  		mov	si, disksector+11 ; disksector+0Bh
  8237                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  8238                                  		;mov	cl, [cs:si+05h]
  8239                                  		; 12/08/2023
  8240                                  		; ds = cs = BIOSDATA segment (0070h)
  8241                                  		mov	cl, [si+05h] ; number of FATs
  8242                                  
  8243                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  8244                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  8245                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  8246                                  					; [disksector+EXT_BOOT.SIG]
  8247                                  					; EXT_BOOT_SIGNATURE
  8248                                  		jnz	short copybpb_fat ; conventional fat system
  8249                                  
  8250                                  		; 03/10/2022
  8251                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  8252                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  8253                                  		;	     number of FATs must be 2 ; =*?=
  8254                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  8255                                  		;
  8256                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  8257                                  
  8258                                  		; 10/12/2022
  8259                                  		;cmp	byte [cs:disksector+10h], 0
  8260                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  8261                                  		;jnz	short copybpb_fat ; a fat system.
  8262                                  		or	cl, cl	 ; [cs:disksector+10h]
  8263                                  		jnz	short copybpb_fat ; a fat system.
  8264                                  %endif
  8265                                  
  8266                                  		; 17/12/2023 - Retro DOS v5.0
  8267                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  8268                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  8269                                  		;jnz	short copybpb_fat ; a fat system
  8270                                  		; 17/12/2023
  8271                                  		; cl = [disksector+10h]
  8272 000023A7 20C9                    		and	cl, cl ; 0 ?
  8273 000023A9 7534                    		jnz	short copybpb_fat ; a fat system
  8274                                  
  8275                                  ; non fat based	media.
  8276                                  
  8277 000023AB 57                      		push	di  ; BDS
  8278                                  		; 12/08/2023
  8279                                  		;push	ds  ; ds = cs = BIOSDATA segment
  8280                                  		
  8281                                  		; 17/12/2023
  8282                                  		; es = ds = cs
  8283                                  		;push	ds
  8284                                  		;pop	es
  8285                                  
  8286                                  		; 12/08/2023
  8287                                  		; ds = cs
  8288                                  		;push	cs
  8289                                  		;pop	ds
  8290                                  
  8291                                  		; 10/12/2022
  8292                                  		; (number of FATs optimization)
  8293                                  		; SI = disksector+11
  8294                                  		; 17/10/2022
  8295                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8296                                  		;mov	si, disksector+11
  8297 000023AC 83C706                  		add	di, 6		; add di,BDS.BPB
  8298                                  
  8299                                  ; just for completeness, we'll make sure that total_sectors and
  8300                                  ; big_total_sectors aren't both zero. I've seen examples of
  8301                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  8302                                  ; got that way. If it occurs, then use the values from the
  8303                                  ; partition table.
  8304                                  
  8305                                  		; 17/12/2023
  8306                                  		; cx = 0
  8307                                  		; 18/12/2022
  8308                                  		;sub	cx, cx
  8309                                  
  8310                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  8311                                  		;jnz	short already_nonz 
  8312                                  		;			; how about big_total?
  8313                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  8314                                  		;jnz	short already_nonz ; we're okay if any are != 0
  8315                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8316                                  		;jnz	short already_nonz
  8317                                  
  8318                                  		; 12/08/2023
  8319                                  		; ds = cs = BIOSDATA segment (0070h)
  8320                                  
  8321                                  		; 17/12/2023
  8322                                  		; 12/08/2023
  8323 000023AF 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  8324 000023B2 751C                    		jnz	short already_nonz
  8325                                  				    	; how about big_total?
  8326 000023B4 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  8327 000023B7 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  8328 000023B9 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  8329 000023BC 7512                    		jnz	short already_nonz
  8330                                  
  8331                                  ; now let's copy the values from the partition table (now in the BDS)
  8332                                  ; into the BPB in the boot sector buffer, before they get copied back.
  8333                                  
  8334 000023BE 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  8335                                  		; 12/08/2023
  8336                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  8337 000023C1 894408                  		mov	[si+8], ax
  8338 000023C4 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  8339                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  8340 000023C7 894415                  		mov	[si+15h], ax
  8341 000023CA 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  8342                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8343 000023CD 894417                  		mov	[si+17h], ax
  8344                                  
  8345                                  already_nonz:
  8346                                  		; 18/12/2022
  8347                                  		; cx = 0
  8348                                  		;mov	cl, 25
  8349                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  8350                                  		; 17/12/2023 - Retro DOS v5.0
  8351 000023D0 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  8352                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  8353 000023D2 F3A4                    		rep movsb
  8354                                  		;pop	ds
  8355                                  		; 12/08/2023
  8356                                  		; ds = cs
  8357                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  8358 000023D4 5F                      		pop	di  ; BDS
  8359                                  		;push	es
  8360                                  		;push	ds
  8361                                  		;pop	es
  8362                                  		;push	cs
  8363                                  		;pop	ds
  8364                                  		; 12/08/2023
  8365                                  		;mov	es, bp
  8366                                  		; ds = cs = es
  8367                                  		
  8368                                  		; 14/08/2023
  8369 000023D5 BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  8370                                  		; 18/12/2022
  8371                                  		;mov	bp, mov_media_ids
  8372                                  		;;mov	bp, 751h	; mov_media_ids
  8373                                  					; at 2C7h:751h = 70h:2CC1h
  8374                                  					; set volume id, systemid, serial.
  8375 000023D8 0E                      		push	cs		; simulate far call
  8376 000023D9 E895F6                  		call	call_bios_code
  8377                                  		; 12/08/2023
  8378                                  		; ds = cs = es
  8379                                  		;push	es
  8380                                  		;pop	ds
  8381                                  		;pop	es
  8382 000023DC E9C701                  		jmp	goodret
  8383                                  
  8384                                  ; ---------------------------------------------------------------------------
  8385                                  
  8386                                  ; ****** cas ---
  8387                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  8388                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  8389                                  ; happens with some frequency -- perhaps through some OS/2 setup
  8390                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  8391                                  ; from the boot sector into the DPB anyway, we've just been using
  8392                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  8393                                  ; we'll go ahead and copy it into the DPB, except in the case
  8394                                  ; that it equals zero, in which case we just use the values in
  8395                                  ; the DPB from the partition table.
  8396                                  
  8397                                  ; 17/10/2022
  8398                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  8399                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  8400                                  ; 09/12/2022
  8401                                  MOVMEDIAIDS equ mov_media_ids
  8402                                  CLEARIDS equ clear_ids
  8403                                  ; 11/09/2023
  8404                                  CLEARIDS_X equ clear_ids_x
  8405                                  
  8406                                  copybpb_fat:
  8407                                  		; 17/12/2023
  8408                                  		; ch = 0, cl = number of FATs
  8409                                  		; 10/12/2022
  8410                                  		; (number of FATs optimization)
  8411                                  		; SI = disksector+11
  8412                                  		; 17/10/2022
  8413                                  		;mov	si, disksector+11
  8414                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8415                                  					; cs:si	-> bpb in boot
  8416                                  		; 17/12/2023
  8417                                  		; dx = 0
  8418                                  		; 08/05/2024
  8419                                  		; 18/04/2024 (BugFix)
  8420 000023DF 31D2                    		xor	dx, dx
  8421                                  
  8422                                  		; 12/08/2023
  8423                                  		; ds = cs = BIOSDATA segment (0070h)
  8424 000023E1 8B4408                  		mov	ax, [si+8]
  8425                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  8426                                  					; get totsec from boot sec
  8427 000023E4 09C0                    		or	ax, ax
  8428 000023E6 7514                    		jnz	short copy_totsec ; if non zero, use that
  8429 000023E8 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  8430                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  8431                                  					; get the big version
  8432                                  					; (32 bit total	sectors)
  8433 000023EB 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  8434                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8435                                  		; 10/12/2022
  8436                                  		; (number of FATs optimization)
  8437                                  		; CL = number of FATs (2 or 1) 
  8438 000023EE 89D3                    		mov	bx, dx		; see if it is a big zero
  8439 000023F0 09C3                    		or	bx, ax
  8440 000023F2 7508                    		jnz	short copy_totsec
  8441                                  			; screw it. it was bogus.
  8442 000023F4 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8443 000023F7 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8444 000023FA EB06                    		jmp	short fat_big_small
  8445                                  
  8446                                  		;mov	cx, dx
  8447                                  		;or	cx, ax		; see if it is a big zero
  8448                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  8449                                  copy_totsec:				
  8450 000023FC 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8451                                  					; make DPB match boot sec
  8452 000023FF 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8453                                  
  8454                                  		; 10/12/2022
  8455                                  ;totsec_already_set:			
  8456                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8457                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8458                                  
  8459                                  ; determine fat entry size.
  8460                                  
  8461                                  fat_big_small:
  8462                                  
  8463                                  ;at this moment dx;ax = total sector number
  8464                                  
  8465                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  8466                                  ;from the BPB on the disk
  8467                                  		
  8468                                  		; 12/08/2023
  8469                                  		; ds = cs = BIOSDATA segment (0070h)
  8470                                  				
  8471 00002402 8B5C03                  		mov	bx, [si+3]
  8472                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  8473                                  					; get #reserved_sectors	from BPB
  8474 00002405 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  8475                                  					; update BDS field
  8476 00002408 29D8                    		sub	ax, bx
  8477 0000240A 83DA00                  		sbb	dx, 0		; update the count
  8478                                  		; 12/08/2023
  8479 0000240D 8B5C0B                  		mov	bx, [si+0Bh]
  8480                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  8481                                  					; bx = sectors/fat
  8482 00002410 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  8483                                  					; set in bds bpb
  8484                                  		; 17/12/2023 - Retro DOS v5.0
  8485                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8486 00002413 53                      		push	bx ; FAT sectors
  8487 00002414 09DB                    		or	bx, bx
  8488 00002416 753A                    		jnz	short fat_16bit	
  8489                                  
  8490                                  ; 17/12/2023
  8491                                  %if 0		
  8492                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  8493                                  					; BPB.FATSz32
  8494                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  8495                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  8496                                  		mov	bx, [si+19h]	; BPB.FATSz32
  8497                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8498                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8499                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8500                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8501                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8502                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8503                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8504                                  		mov	bx, [si+21h]	; BPB.RootClus
  8505                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8506                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8507                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8508                                  		mov	bx, [si+25h]	; BPB.FSInfo
  8509                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8510                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8511                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8512                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  8513                                  					; correct code (would be):
  8514                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  8515                                  					; sub_fat32_size:
  8516                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  8517                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  8518                                  					;   dec cl
  8519                                  					;   jg short sub_fat32_size
  8520                                  					;   jmp short fat_32bit
  8521                                  %endif
  8522                                  		; 17/12/2023
  8523                                  		; cl = BPB_NumFATs (2 or 1)
  8524                                  		; ch = 0
  8525 00002418 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  8526                                  sub_fat32_size:
  8527 0000241B 29D8                    		sub	ax, bx
  8528 0000241D 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  8529                                  		;dec	cl
  8530 00002420 49                      		dec	cx
  8531 00002421 7FF8                    		jg	short sub_fat32_size
  8532                                  
  8533 00002423 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8534 00002426 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8535 00002429 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8536                                  
  8537 0000242C 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8538 0000242F 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8539 00002432 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8540 00002435 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8541 00002438 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  8542 0000243B 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8543 0000243E 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8544 00002441 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8545 00002444 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  8546 00002447 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8547 0000244A 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8548 0000244D 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8549 00002450 EB08                    		jmp	short fat_32bit
  8550                                  		
  8551                                  fat_16bit:
  8552                                  		; 17/12/2023 - Retro DOS v5.0
  8553                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8554                                  		; 10/12/2022
  8555                                  		; (number of FATs optimization)
  8556                                  		; CL = number of FATs (2 or 1)
  8557                                  		; CH = 0 ; 17/12/2023 
  8558                                  		;dec	cl ; *
  8559                                  		; 18/12/2022
  8560 00002452 49                      		dec	cx ; *
  8561 00002453 D3E3                    		shl	bx, cl
  8562                                  		;shl	bx, 1	; =*?=	; always 2 fats
  8563                                  		
  8564 00002455 29D8                    		sub	ax, bx		; sub #	fat sectors
  8565 00002457 83DA00                  		sbb	dx, 0
  8566                                  fat_32bit:	
  8567                                  		; 17/12/2023
  8568 0000245A 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  8569                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  8570                                  					; # root entries
  8571 0000245D 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  8572                                  					; set in bds bpb
  8573 00002460 B104                    		mov	cl, 4
  8574 00002462 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  8575 00002464 29D8                    		sub	ax, bx		; sub #	dir sectors
  8576 00002466 83DA00                  		sbb	dx, 0		;
  8577                                  					; dx:ax	now contains the
  8578                                  					; # of data sectors
  8579                                  		; 17/12/2023
  8580                                  		; ch = 0
  8581                                  		;xor	cx, cx ; *
  8582 00002469 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  8583                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  8584                                  					; sectors per cluster
  8585 0000246C 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  8586                                  					; set in bios bpb
  8587 0000246F 50                      		push	ax
  8588 00002470 89D0                    		mov	ax, dx
  8589 00002472 31D2                    		xor	dx, dx
  8590 00002474 F7F1                    		div	cx		; cx = sectors per cluster
  8591                                  		; 12/08/2023 (ds=cs)
  8592                                  		;mov	[temp_h], ax
  8593                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  8594                                  					; # clusters.
  8595                                  		; 17/12/2023
  8596 00002476 A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  8597 00002479 58                      		pop	ax
  8598 0000247A F7F1                    		div	cx
  8599                                  		; 17/12/2023
  8600                                  		;;cmp	word [cs:temp_h], 0
  8601                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  8602                                  		;cmp	word [saved_word], 0 ; (*)
  8603                                  		;ja	short toobig_ret ; too big cluster number
  8604                                  
  8605                                  		; 17/12/2023
  8606                                  		;;;
  8607 0000247C 5B                      		pop	bx ; FAT sectors (16 bit)
  8608                                  		;and	bx, bx ; 0 ?
  8609 0000247D 09DB                    		or	bx, bx ; 0 ?
  8610 0000247F 751F                    		jnz	short chk_clnum_hw
  8611                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  8612                                  
  8613 00002481 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  8614 00002487 7503                    		jne	short fat32_clust_limit
  8615 00002489 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  8616                                  fat32_clust_limit:
  8617 0000248C 772D                    		ja	short short toobig_ret ; too big cluster number
  8618 0000248E 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  8619                                  	 	;jnz	short fat16_clust_limit
  8620 00002492 7505                    		jnz	short set_fbigbig_flag ; 17/12/2023
  8621                                  fat16_clust_limit:	; 17/12/2023
  8622 00002494 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  8623                                  ;fat16_clust_limit:
  8624 00002497 760E                    		jna     short fat12_clust_limit ; jbe
  8625                                  set_fbigbig_flag:	; 17/12/2023
  8626 00002499 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  8627 0000249E EB11                    		jmp	short copymediaid
  8628                                  chk_clnum_hw:
  8629 000024A0 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  8630 000024A5 7714                    		ja	short toobig_ret ; too big cluster number
  8631                                  		;;;
  8632                                  fat12_clust_limit:
  8633 000024A7 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  8634                                  					; is this 16-bit fat?
  8635 000024AA 7205                    		jb	short copymediaid ; no,	small fat
  8636                                  		; 17/10/2022
  8637 000024AC 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  8638                                  		;or	ds:fbigfat, 40h	; fbig
  8639                                  					; 16 bit fat
  8640                                  copymediaid:
  8641                                  		; 17/12/2023
  8642                                  		; es = ds = cs
  8643                                  		
  8644                                  		;push	es
  8645                                  		;push	ds
  8646                                  		;pop	es
  8647                                  		
  8648                                  		; 12/08/2023
  8649                                  		; ds = cs = BIOSDATA
  8650                                  		;push	cs
  8651                                  		;pop	ds
  8652                                  		; 17/10/2022
  8653 000024B1 BD[4F08]                		mov	bp, MOVMEDIAIDS
  8654                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  8655                                  		;;mov	bp, 751h	; mov_media_ids
  8656                                  					; at 2C7h:751h = 70h:2CC1h
  8657                                  					; copy filesys_id, volume label
  8658 000024B4 0E                      		push	cs		; simulate far call
  8659 000024B5 E8B9F5                  		call	call_bios_code
  8660                                  
  8661                                  		; 12/08/2023
  8662                                  		;push	es
  8663                                  		;pop	ds
  8664                                  		; 17/12/2023	
  8665                                  		;pop	es
  8666                                  
  8667 000024B8 E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  8668                                  					; and return.
  8669                                  ; ---------------------------------------------------------------------------
  8670                                  
  8671                                  toobig_ret:
  8672                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  8673 000024BB 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8674                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  8675                                  					; too big (32 bit clust #) for FAT16
  8676 000024C0 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  8677                                  					; but useless. to big for
  8678                                  					; current pc dos fat file system
  8679                                  ; ---------------------------------------------------------------------------
  8680                                  
  8681                                  unknown:
  8682                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8683 000024C3 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  8684                                  					 ; unformatted_media
  8685                                  		; 12/12/2022
  8686                                  		;or	byte [di+24h], 02h
  8687                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  8688                                  					; unformatted_media
  8689                                  					; Set unformatted media	flag.
  8690                                  
  8691                                  ; the boot signature may not be	recognizable,
  8692                                  ; but we should	try and	read it	anyway.
  8693                                  
  8694                                  unknown3_0:
  8695 000024C7 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  8696                                  					; [di+BDS.totalsecs32+2]
  8697 000024CA 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8698 000024CD BE[161A]                		mov	si, disktable2
  8699                                  scan:					; 08/08/2023
  8700                                  		;cmp	dx, [cs:si]	; total sectors hw
  8701                                  		; 12/08/2023 (ds=cs)
  8702 000024D0 3B14                    		cmp	dx, [si] 
  8703 000024D2 720C                     		jb	short gotparm
  8704 000024D4 7705                    		ja	short scan_next
  8705                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  8706 000024D6 3B4402                  		cmp	ax, [si+2]
  8707 000024D9 7605                    		jbe	short gotparm
  8708                                  scan_next:				
  8709 000024DB 83C60A                  		add	si, 10		; 5*2
  8710 000024DE EBF0                    		jmp	short scan	; covers upto 512 mb media
  8711                                  ; ---------------------------------------------------------------------------
  8712                                  
  8713                                  gotparm:
  8714 000024E0 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  8715                                  		;or	ds:fbigfat, cl
  8716                                  		; 17/10/2022
  8717 000024E3 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  8718                                  		; 12/08/2023
  8719                                  		; ds = cs = BIOSDATA
  8720 000024E7 8B4C04                  		mov	cx, [si+4]
  8721                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  8722                                  					; cl = log base 2 of ch
  8723 000024EA 8B5406                  		mov	dx, [si+6]
  8724                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  8725                                  
  8726                                  ; now calculate size of fat table
  8727                                  
  8728 000024ED 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  8729                                  					; save number of (root)	dir entries
  8730 000024F0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8731 000024F3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8732 000024F6 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  8733                                  					; save sectors per cluster
  8734                                  		
  8735                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8736 000024F9 F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  8737                                  		; 11/09/2023
  8738                                  		; 17/10/2022
  8739                                  		;test	byte [fbigfat], 40h
  8740                                  		;;test	ds:fbigfat, 40h	; fbig
  8741                                  					; if (fbigfat)
  8742 000024FE 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  8743                                  
  8744                                  ; we don't need to change "small fat" logic since it is guaranteed
  8745                                  ; that double word total sector will not use 12 bit fat (unless
  8746                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  8747                                  ; so in this case we assume dx = 0 !!
  8748                                  
  8749 00002500 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  8750 00002502 88EB                    		mov	bl, ch
  8751 00002504 4B                      		dec	bx
  8752 00002505 01C3                    		add	bx, ax		; dx=0
  8753 00002507 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  8754 00002509 43                      		inc	bx		; BDS.secperclus
  8755 0000250A 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  8756 0000250D 89DE                    		mov	si, bx
  8757 0000250F D1EB                    		shr	bx, 1
  8758 00002511 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  8759 00002513 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  8760 00002517 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  8761 00002519 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  8762                                  					; save number of fat sectors
  8763 0000251C EB6A                    		jmp	short massage_bpb
  8764                                  ; ---------------------------------------------------------------------------
  8765                                  
  8766                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  8767                                  
  8768                                  dobig:					
  8769 0000251E B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  8770 00002520 52                      		push	dx		; save total sectors (high)
  8771 00002521 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  8772 00002524 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  8773 00002526 29D0                    		sub	ax, dx
  8774 00002528 5A                      		pop	dx
  8775 00002529 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  8776 0000252C 83E801                  		sub	ax, 1
  8777 0000252F 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  8778                                  					; total	secs - reserved	secs - root dir	secs
  8779 00002532 B302                    		mov	bl, 2
  8780 00002534 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  8781                                  					; bx = 256 * BDS.secperclus + 2
  8782                                  
  8783                                  ; I don't understand why to add bx here!!!
  8784                                  
  8785                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  8786                                  		; 27/09/2022
  8787                                  		; (Microsoft FAT32 File	System Specification,
  8788                                  		; December 2000, Page 21)
  8789                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  8790                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  8791                                  		; 8/8/2023 (Retro DOS v5.0)
  8792                                  		; If(FATType == FAT32)
  8793                                  		;   TmpVal2 = TmpVal2 / 2;
  8794                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  8795                                  		; 8/8/2023 (Retro DOS v5.0)
  8796                                  		; If(FATType == FAT32) {
  8797                                  		;   BPB_FATSz16 = 0;
  8798                                  		;   BPB_FATSz32 = FATSz;
  8799                                  		;} else {
  8800                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  8801                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  8802                                  		;}
  8803                                  					; dx:ax = TmpVal1, bx = TmpVal2
  8804 00002537 01D8                    		add	ax, bx		; 
  8805 00002539 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  8806 0000253C 83E801                  		sub	ax, 1		
  8807 0000253F 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  8808                                  
  8809                                  		;;;
  8810                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8811 00002542 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  8812 00002547 740D                    		jz      short dobig1
  8813                                  
  8814 00002549 D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  8815                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  8816 0000254B 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  8817 0000254E 83DA00                  		sbb	dx, 0
  8818 00002551 29D8                    		sub	ax, bx
  8819 00002553 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  8820                                  					;       = TmpVal1+(TmpVal2-1)
  8821                                  dobig1:
  8822 00002556 50                      		push	ax		; save lw of dividend
  8823 00002557 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  8824 00002559 31D2                    		xor	dx, dx
  8825 0000255B F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  8826                                  					; remainder in dx is hw of 2nd stage dividend
  8827 0000255D 89C5                    		mov	bp, ax		; hw of quotient
  8828 0000255F 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  8829                                  		;;;
  8830                                  
  8831                                  ; assuming dx in the table will never be bigger than bx.
  8832                                  
  8833 00002560 F7F3                    		div	bx		; BDS.fatsecs =
  8834                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  8835 00002562 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  8836                                  					; number of fat	sectors
  8837                                  		;;;
  8838                                  		
  8839                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8840 00002565 8A1E[061A]              		mov	bl, [fbigfat]
  8841 00002569 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  8842                                  		
  8843 0000256C F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  8844 0000256F 7410                    		jz	short dobig2	; not FAT32
  8845                                  
  8846 00002571 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  8847 00002574 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  8848 00002577 C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  8849                                  					; clear 16 bit FAT size field
  8850 0000257C C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  8851                                  					; set reserved sectors to 32 (FAT32 de facto)
  8852                                  dobig2:
  8853                                  		;;;
  8854                                  
  8855                                  ; now, set the default filesys_id, volume label, serial number
  8856                                  
  8857                                  		; 05/08/2023
  8858                                  		; [di+1Fh] = [fbigfat]
  8859                                  		;
  8860                                  		;;mov	bl, ds:fbigfat
  8861                                  		;; 17/10/2022
  8862                                  		;mov	bl, [fbigfat]
  8863                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  8864                                  
  8865                                  		; 12/08/2023
  8866                                  		;push	ds ; ds = cs = BIOSDATA
  8867                                  		
  8868                                  		; 17/12/2023
  8869                                  		; es = ds = cs
  8870                                  		;push	ds
  8871                                  		;pop	es
  8872                                  
  8873                                  		; 12/08/2023 
  8874                                  		; ds = cs = BIOSDATA
  8875                                  		;push	cs
  8876                                  		;pop	ds
  8877                                  
  8878                                  		; 18/12/2023 - Retro DOS v5.0
  8879                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  8880                                  		; 11/09/2023
  8881                                  		;mov	al, [fbigfat]
  8882 00002581 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  8883                                  		; 17/10/2022
  8884                                  		;mov	bp, CLEARIDS
  8885                                  		;;mov	bp, 5D9h	; clear_ids
  8886                                  					; at 2C7h:5D9h = 70h:2B49h
  8887                                  					; at BIOSCODE:06ABh
  8888                                  					;	in PCDOS 7.1 IBMBIO.COM
  8889 00002584 0E                      		push	cs
  8890 00002585 E8E9F4                  		call	call_bios_code
  8891                                  
  8892                                  		; 12/08/2023
  8893                                  		;pop	ds ; ds = cs = BIOSDATA
  8894                                  
  8895                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  8896                                  ; set according to the partition information. we are going to
  8897                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  8898                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  8899                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  8900                                  ; we don't do this for the bpb information from the boot record. we
  8901                                  ; are not going to change the bpb information from the boot record.
  8902                                  
  8903                                  massage_bpb:
  8904                                  		; 05/08/2023
  8905                                  		; [di+1Fh] = [fbigfat]
  8906                                  		;
  8907                                  		;; 12/12/2022
  8908                                  		;mov	bl, [fbigfat]
  8909                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8910                                  		;			; set size of fat on media
  8911                                  		;
  8912 00002588 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8913 0000258B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8914                                  		; 11/09/2023
  8915 0000258E 09D2                    		or	dx, dx
  8916 00002590 7514                    		jnz	short goodret	
  8917                                  		;cmp	dx, 0		; double word total sectors?
  8918                                  		;;ja	short goodret	; don't have to change it.
  8919                                  		;; 12/12/2022
  8920                                  		;ja	short short goodret2
  8921                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  8922                                  		;ja	short goodret	; don't have to change it.
  8923                                  		; 12/12/2022
  8924 00002592 395519                  		cmp	[di+19h], dx ; 0
  8925                                  		;ja	short goodret2
  8926 00002595 770F                    		ja	short goodret	; 11/09/2023
  8927 00002597 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  8928                                  		;jb	short goodret
  8929                                  		; 12/12/2022
  8930                                  		;jc	short goodret
  8931 0000259A 7209                    		jc	short goodret_clc ; 11/09/2023
  8932 0000259C 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8933 0000259F 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  8934                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  8935                                  		; 12/12/2022
  8936 000025A2 89551B                  		mov	[di+1Bh], dx ; 0
  8937                                  goodret_clc:
  8938                                  		; 11/09/2023
  8939 000025A5 F8                      		clc 
  8940                                  goodret:
  8941                                  		;mov	bl, ds:fbigfat
  8942                                  		; 11/09/2023
  8943                                  		; 12/12/2022
  8944                                  		; 17/10/2022
  8945 000025A6 8A1E[061A]              		mov	bl, [fbigfat]
  8946                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8947 000025AA 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  8948                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8949                                  					; set size of fat on media
  8950                                  		; 11/09/2023
  8951                                  		;clc
  8952                                  ret_hard_err:
  8953                                  		; 12/12/2022
  8954                                  goodret2:
  8955 000025AD 07                      		pop	es
  8956                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  8957 000025AE 5B                      		pop	bx
  8958 000025AF 5F                      		pop	di
  8959 000025B0 C3                      		retn
  8960                                  
  8961                                  ; =============== S U B	R O U T	I N E =======================================
  8962                                  
  8963                                  ; 15/10/2022
  8964                                  
  8965                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  8966                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  8967                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  8968                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  8969                                  ;then subtract 1 from BPB_TOTALSECTORS.
  8970                                  
  8971                                  		; 17/10/2022
  8972                                  cover_fdisk_bug:
  8973                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8974                                  		; ds = cs
  8975                                  
  8976                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8977                                  		; (optimization)
  8978                                  		;push	ax
  8979                                  		;push	dx
  8980                                  		;push	si
  8981                                  
  8982                                  		; 18/12/2023
  8983                                  		; bx = offset disksector
  8984                                  
  8985                                  		; 18/12/2023
  8986 000025B1 807F2629                		cmp	byte [bx+26h], 29h
  8987                                  		; 12/08/2023
  8988                                  		;cmp	byte [disksector+26h], 29h
  8989                                  		;;cmp	byte [cs:disksector+26h], 29h
  8990                                  					; [disksector+EXT_BOOT.SIG],
  8991                                  					; EXT_BOOT_SIGNATURE
  8992 000025B5 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  8993                                  		
  8994 000025B7 817F073130              		cmp	word [bx+7], 3031h
  8995                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  8996 000025BC 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
  8997 000025BE 807F0A30                		cmp	byte [bx+10], '0'
  8998                                  		;cmp	byte [cs:bx+10], '0'
  8999 000025C2 7519                    		jne	short cfb_retit
  9000                                  
  9001                                  cfb_chk_totalsecs:
  9002                                  		; 11/08/2023
  9003                                  ; 18/12/2023
  9004                                  %if 0
  9005                                  		; 17/10/2022		
  9006                                  		mov	si, disksector+11 ; 14Eh+0Bh
  9007                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9008                                  		; 12/08/2023
  9009                                  		cmp	word [si+8], 0
  9010                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  9011                                  					; just to make sure.
  9012                                  		jz	short cfb_retit
  9013                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9014                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  9015                                  		; 12/08/2023
  9016                                  		mov	ax, [si+8]
  9017                                  		add	ax, [si+11h]
  9018                                  
  9019                                  		jnb	short cfb_retit
  9020                                  		jnz	short cfb_retit
  9021                                  					; if carry set and ax=0
  9022                                  		dec	word [si+8]
  9023                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  9024                                  					; then decrease	BPB_TOTALSECTORS by 1
  9025                                  %endif
  9026                                  		; 18/12/2023
  9027                                  		;cmp	word [bx+19], 0
  9028 000025C4 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  9029 000025C7 21C0                    		and	ax, ax ; 0 ?
  9030 000025C9 7412                    		jz	short cfb_retit
  9031                                  
  9032                                  		;mov	ax, [bx+19]
  9033 000025CB 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  9034 000025CE 730D                    		jnc	short cfb_retit
  9035 000025D0 750B                    		jnz	short cfb_retit
  9036                                  		; ax = 0		; 0 -> 0FFFFh
  9037 000025D2 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  9038                                  
  9039 000025D5 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  9040 000025D9 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  9041                                  cfb_retit:	
  9042                                  		; 18/12/2023
  9043                                  		;pop	si
  9044                                  		;pop	dx
  9045                                  		;pop	ax
  9046                                  		
  9047 000025DD C3                      		retn
  9048                                  
  9049                                  ; ---------------------------------------------------------------------------
  9050                                  
  9051 000025DE 0200                    word2:		dw 2
  9052 000025E0 0300                    word3:		dw 3
  9053 000025E2 0002                    word512:	dw 512
  9054                                  
  9055                                  ; =============== S U B	R O U T	I N E =======================================
  9056                                  
  9057                                  ; 15/10/2022
  9058                                  
  9059                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  9060                                  ; the form factor. it is assumed that the bpbs for the various form factors
  9061                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  9062                                  ; as the bpb on the drive.
  9063                                  ;
  9064                                  ; no attempt is made to preserve registers since we are going to jump to
  9065                                  ; sysinit straight after this routine.
  9066                                  
  9067                                  		; 18/12/2023 - Retro DOS v5.0 
  9068                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
  9069                                  setdrvparms:
  9070                                  		; 12/12/2023
  9071                                  		; ds = cs
  9072 000025E4 31DB                    		xor	bx, bx
  9073                                  		; 18/10/2022
  9074 000025E6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  9075                                  _next_bds:
  9076 000025EA 06                      		push	es
  9077 000025EB 57                      		push	di
  9078                                  
  9079                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9080 000025EC 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
  9081                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  9082                                  
  9083 000025F0 80FB05                  		cmp	bl, 5		; ffHardFile
  9084 000025F3 753A                    		jnz	short nothardff
  9085 000025F5 31D2                    		xor	dx, dx
  9086 000025F7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9087 000025FB 09C0                    		or	ax, ax
  9088 000025FD 7508                    		jnz	short get_ccyl
  9089 000025FF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9090 00002603 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9091                                  get_ccyl:
  9092 00002607 52                      		push	dx
  9093 00002608 50                      		push	ax
  9094 00002609 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  9095 0000260D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9096                                  					; assume sectors per cyl. < 64k.
  9097 00002611 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  9098 00002613 58                      		pop	ax
  9099 00002614 5A                      		pop	dx		; dx:ax	= total	sectors
  9100 00002615 50                      		push	ax
  9101 00002616 89D0                    		mov	ax, dx
  9102 00002618 31D2                    		xor	dx, dx
  9103 0000261A F7F1                    		div	cx
  9104                                  		; 12/12/2023  ; !*!
  9105                                  		; (data segment may not be same with code segment here)
  9106                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
  9107                                  		; 18/12/2023 - Retro DOS v5.0
  9108                                  		;mov	[cs:saved_word], ax
  9109 0000261C 58                      		pop	ax
  9110 0000261D F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  9111 0000261F 09D2                    		or	dx, dx
  9112 00002621 7401                    		jz	short no_cyl_rnd ; came out even
  9113 00002623 40                      		inc	ax		; round	up
  9114                                  no_cyl_rnd:
  9115                                  		; 18/12/2023 - Retro DOS v5.0
  9116 00002624 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
  9117                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  9118                                  		
  9119 00002628 06                      		push	es
  9120 00002629 1F                      		pop	ds  ; !*! ; 12/12/2023
  9121                                  
  9122 0000262A 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  9123                                  					; ds:si	-> bpb for hard	file
  9124 0000262D EB55                    		jmp	short set_recbpb
  9125                                  ; ---------------------------------------------------------------------------
  9126                                  
  9127                                  nothardff:				
  9128 0000262F 0E                      		push	cs
  9129 00002630 1F                      		pop	ds
  9130                                  
  9131                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  9132                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  9133                                  
  9134                                  		; 10/12/2022
  9135                                  		; ds = cs
  9136                                  		; 17/10/2022 (ds=cs)
  9137 00002631 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  9138                                  		;cmp	byte [cs:fakefloppydrv], 1
  9139 00002636 7454                    		jz	short go_to_next_bds
  9140 00002638 80FB07                  		cmp	bl, 7		; ffother
  9141                                  					; special case "other" type of medium
  9142 0000263B 753D                    		jnz	short not_process_other
  9143                                  process_other:
  9144 0000263D 31D2                    		xor	dx, dx
  9145                                  
  9146                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
  9147                                  		;mul	word [di+36h]	; [di+BDS.rheads]
  9148                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
  9149                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  9150                                  		;			; have the total number of sectors
  9151                                  		; 18/12/2023 - Retro DOS v5.0
  9152 0000263F 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
  9153 00002642 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
  9154 00002645 F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
  9155 00002648 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
  9156                                  					; have the total number of sectors
  9157 0000264B 48                      		dec	ax
  9158 0000264C B201                    		mov	dl, 1
  9159                                  _again:					
  9160 0000264E 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9161 00002651 7206                    		jb	short _@@
  9162 00002653 D1E8                    		shr	ax, 1
  9163 00002655 D0E2                    		shl	dl, 1
  9164 00002657 EBF5                    		jmp	short _again
  9165                                  ; ---------------------------------------------------------------------------
  9166                                  
  9167                                  _@@:
  9168 00002659 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  9169 0000265C 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  9170                                  
  9171                                  		; 18/12/2023 - Retro DOS v5.0
  9172 0000265E C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
  9173                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  9174                                  __@@:
  9175                                  		; 18/12/2023 - Retro DOS v5.0
  9176 00002663 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
  9177                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
  9178                                  
  9179                                  ; logic to get the sectors/fat area.
  9180                                  ; fat entry is assumed to be 1.5 bytes!!!
  9181                                  
  9182                                  		; 10/12/2022
  9183                                  		; ds = cs
  9184                                  		; 17/10/2022 (ds=cs)
  9185 00002666 F726[E025]              		mul	word [word3]	; * 3
  9186 0000266A F736[DE25]              		div	word [word2]	; / 2
  9187 0000266E 31D2                    		xor	dx, dx
  9188 00002670 F736[E225]              		div	word [word512]	; / 512
  9189                                  		;
  9190                                  		; 10/12/2022
  9191                                  		;mul	word [cs:word3]	; * 3
  9192                                  		;div	word [cs:word2]	; / 2
  9193                                  		;xor	dx, dx
  9194                                  		;div	word [cs:word512] ; / 512
  9195                                  		;
  9196 00002674 40                      		inc	ax		; + 1
  9197                                  no_round_up:
  9198                                  		; 18/12/2023 - Retro DOS v5.0
  9199 00002675 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
  9200                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
  9201                                  
  9202 00002678 EB12                    		jmp	short go_to_next_bds
  9203                                  ; ---------------------------------------------------------------------------
  9204                                  
  9205                                  not_process_other:
  9206 0000267A D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  9207                                  		
  9208                                  		;mov	si, bpbtable
  9209                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  9210                                  		; 09/12/2022
  9211                                  		;mov	si, BPBTABLE
  9212                                  		;mov	si, [bx+si]	; get address of bpb
  9213                                  		; 10/12/2022
  9214                                  		;mov	si, [BPBTABLE+bx]
  9215                                  		; 13/12/2022
  9216                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  9217                                  		
  9218                                  		; 14/08/2023
  9219                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  9220                                  							; correct offset
  9221 0000267C 8BB7[8491]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  9222                                  		
  9223                                  		; 18/12/2023 
  9224                                  		; si = address of the requested disk(ette) parameter block
  9225                                  		;	! as offset from SYSINIT segment !
  9226                                  
  9227                                  		; 28/08/2023
  9228 00002680 81C69046                		add	si, SYSINIT_OFFSET
  9229                                  			; + displacement from BIOSDATA segment ; 18/12/2023
  9230                                  set_recbpb:
  9231                                  		; 18/12/2023
  9232                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
  9233                                  		;			; es:di	-> recbpb
  9234                                  		;mov	cx, 25		; bpbx.size
  9235                                  		;rep movsb		; move (size bpbx) bytes
  9236                                  		
  9237                                  		; 18/12/2023 - Retro DOS v5.0
  9238 00002684 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
  9239                                  					; es:di	-> recbpb
  9240 00002687 B93500                  		mov	cx, 53		; bpbx.size
  9241 0000268A F3A4                    		rep movsb		; move (size bpbx) byte
  9242                                  go_to_next_bds:
  9243 0000268C 5F                      		pop	di
  9244 0000268D 07                      		pop	es		; restore pointer to bds
  9245 0000268E 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  9246 00002691 83FFFF                  		cmp	di, 0FFFFh	; -1
  9247 00002694 740A                    		jz	short got_end_of_bds_chain
  9248 00002696 E951FF                  		jmp	_next_bds
  9249                                  
  9250                                  ; ---------------------------------------------------------------------------
  9251                                  
  9252                                  		; 18/12/2022
  9253                                  ;got_end_of_bds_chain:
  9254                                  		;retn
  9255                                  
  9256                                  ; =============== S U B	R O U T	I N E =======================================
  9257                                  
  9258                                  ; 15/10/2022
  9259                                  ; 30/12/2018 - Retro DOS v4.0
  9260                                  
  9261                                  ; al = device number
  9262                                  
  9263                                  print_init:	
  9264 00002699 98                      		cbw
  9265 0000269A 89C2                    		mov	dx, ax
  9266 0000269C B401                    		mov	ah, 1
  9267 0000269E CD17                    		int	17h		; PRINTER - INITIALIZE
  9268                                  					; DX = printer port (0-3)
  9269                                  					; Return: AH = status
  9270                                  got_end_of_bds_chain:	; 18/12/2022
  9271 000026A0 C3                      		retn
  9272                                  
  9273                                  ; =============== S U B	R O U T	I N E =======================================
  9274                                  
  9275                                  ; al = device number
  9276                                  
  9277                                  aux_init:
  9278 000026A1 98                      		cbw
  9279 000026A2 89C2                    		mov	dx, ax
  9280                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  9281                                  					; 2400,n,1,8 (msequ.inc)
  9282                                  		;mov	ah, 0
  9283                                  		; 10/12/2022
  9284 000026A4 B8A300                  		mov	ax, 00A3h
  9285 000026A7 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  9286                                  					; 	AL = initializing parameters,
  9287                                  					;	DX = port number (0-3)
  9288                                  					; Return: AH = RS-232 status code bits,
  9289                                  					;	  AL = modem status bits
  9290 000026A9 C3                      		retn
  9291                                  
  9292                                  ; =============== S U B	R O U T	I N E =======================================
  9293                                  
  9294                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9295                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
  9296                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
  9297                                  ; 30/12/2018 - Retro DOS v4.0
  9298                                  ; 03/06/2018 - Retro DOS v3.0
  9299                                  ; (19/03/2018 - Retro DOS v2.0)
  9300                                  
  9301                                  ; domini **********************************************************************
  9302                                  ;
  9303                                  ;mini disk initialization routine. called right after dohard
  9304                                  ;modified for >2 hardfile support
  9305                                  ;
  9306                                  ; **cs=ds=es=datagrp
  9307                                  ;
  9308                                  ; **domini will search for every extended partition in the system, and
  9309                                  ;   initialize it.
  9310                                  ;
  9311                                  ; **bdsm stands for bds table for mini disk and located right after the label
  9312                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  9313                                  ;   address of bdsm table.
  9314                                  ;
  9315                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  9316                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  9317                                  ;   right now, they are called as ismini, hidden_trks respectively.
  9318                                  ;
  9319                                  ; **domini will use the same routine in sethard routine after label set2 to
  9320                                  ;   save coding.
  9321                                  ;
  9322                                  ; **drvmax determined in dohard routine will be used for the next
  9323                                  ;   available logical mini disk drive number.
  9324                                  ;
  9325                                  ; input: drvmax, dskdrvs
  9326                                  ;
  9327                                  ; output: minidisk installed. bdsm table established and installed to bds.
  9328                                  ;	  end_of_bdsm - ending offset address of bdsm.
  9329                                  ;
  9330                                  ; called modules:
  9331                                  ;		  getboot
  9332                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  9333                                  ;
  9334                                  ;		  setmini (new, it will use set2 routine)
  9335                                  ;
  9336                                  ; variables used: end_of_bdsm
  9337                                  ;		  rom_minidisk_num
  9338                                  ;		  mini_hdlim, mini_seclim
  9339                                  ;		  BDS_STRUC, start_bds
  9340                                  ;
  9341                                  ;******************************************************************************
  9342                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  9343                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
  9344                                  
  9345                                  		; 19/10/2022
  9346                                  domini:
  9347 000026AA 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
  9348                                  		; 10/12/2022
  9349 000026AE 20F6                    		and	dh, dh
  9350                                  		;cmp	dh, 0
  9351 000026B0 743C                    		jz	short dominiret	; no hard file?	then exit.
  9352 000026B2 B280                    		mov	dl, 80h		; start	with hardfile 80h
  9353                                  domini_loop:
  9354                                  		; 18/12/2023 - Retro DOS v5.0
  9355 000026B4 31C0                    		xor	ax, ax ; 0
  9356                                  		; ds = cs
  9357                                  		;mov	[cs:ep_start_sector], ax
  9358                                  		;mov	[cs:ep_start_sector+2], ax
  9359                                  		;mov	[cs:ep_hidden_secs], ax
  9360                                  		;mov	[cs:ep_hidden_secs+2], ax
  9361 000026B6 A3[0022]                		mov	[ep_start_sector], ax
  9362 000026B9 A3[0222]                		mov	[ep_start_sector+2], ax
  9363 000026BC A3[0422]                		mov	[ep_hidden_secs], ax
  9364 000026BF A3[0622]                		mov	[ep_hidden_secs+2], ax
  9365                                  		;
  9366 000026C2 52                      		push	dx
  9367 000026C3 8816[5C1A]              		mov	[rom_minidisk_num], dl
  9368 000026C7 B408                    		mov	ah, 8
  9369 000026C9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  9370                                  					; DL = drive number
  9371                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  9372                                  					; DL = number of consecutive drives
  9373                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  9374                                  		
  9375                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9376                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  9377                                  		;inc	dh
  9378                                  		;xor	ax, ax
  9379                                  		;mov	al, dh
  9380 000026CB 31C0                    		xor	ax, ax
  9381 000026CD 88F0                    		mov	al, dh	; <= 255
  9382 000026CF 40                      		inc	ax	; (0FFh -> 100h)
  9383 000026D0 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
  9384                                  		;and	cl, 3Fh
  9385                                  		;mov	al, cl
  9386                                  		; 08/08/2023
  9387 000026D3 88C8                    		mov	al, cl
  9388 000026D5 83E03F                  		and	ax, 3Fh
  9389 000026D8 A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
  9390                                  		
  9391                                  		; 18/12/2023
  9392                                  		;push	es ; * ; not necessary
  9393 000026DB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9394 000026DF E866FA                  		call	getboot		; read master boot record into
  9395                                  					; initbootsegment:bootbias
  9396 000026E2 7203                    		jc	short domininext
  9397 000026E4 E80800                  		call	find_mini_partition
  9398                                  domininext:
  9399                                  		;pop	es ; *
  9400 000026E7 5A                      		pop	dx
  9401 000026E8 FEC2                    		inc	dl		; next hard file
  9402 000026EA FECE                    		dec	dh
  9403 000026EC 75C6                    		jnz	short domini_loop
  9404                                  dominiret:
  9405 000026EE C3                      		retn
  9406                                  
  9407                                  ; =============== S U B	R O U T	I N E =======================================
  9408                                  
  9409                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  9410                                  ; 30/12/2018 - Retro DOS v4.0
  9411                                  
  9412                                  ;find_mini_partition tries to find every extended partition on a disk.
  9413                                  ;at entry:	di -> bdsm entry
  9414                                  ;		es:bx -> 07c0:bootbias - master boot record
  9415                                  ;		rom_minidisk_num - rom drive number
  9416                                  ;		drvmax - logical drive number
  9417                                  ;		mini_hdlim, mini_seclim
  9418                                  ;
  9419                                  ;called routine: setmini which uses set2 (in sethard routine)
  9420                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  9421                                  
  9422                                  
  9423                                  		; 19/12/2023 - Retro DOS v5.0 
  9424                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
  9425                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
  9426                                  
  9427                                  find_mini_partition:	
  9428 000026EF 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  9429                                  
  9430                                  		; 19/12/2023
  9431                                  		; PCDOS 7.1 IBMBIO.COM
  9432                                  		;mov	word [ld_p_number], 26
  9433                                  fmpnext:
  9434                                  		;add	word [ld_p_number], 16
  9435                                  		;cmp	word [ld_p_number], 4122
  9436                                  		;		; 64 logical disk partitions (64 EBRs)
  9437                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
  9438                                  		;jg	short fmpnextfound
  9439                                  				
  9440 000026F3 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
  9441 000026F7 7410                    		je	short fmpgot ; Extended DOS CHS
  9442                                  		
  9443                                  		; 19/12/2023 - Retro DOS v5.0
  9444 000026F9 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
  9445 000026FD 740A                    		je	short fmpgot
  9446                                  
  9447 000026FF 83C310                  		add	bx, 16
  9448 00002702 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9449 00002706 75EB                    		jnz	short fmpnext
  9450                                  		;jmp	short fmpnextfound ; extended partition	not found
  9451                                  		; 18/12/2022
  9452                                  fmpnextfound:
  9453 00002708 C3                      		retn
  9454                                  
  9455                                  ;		; 30/07/2019 - Retro DOS v3.2
  9456                                  ;		jb	short fmpnext
  9457                                  ;fmpret:
  9458                                  ;		retn	; 29/05/2019
  9459                                  
  9460                                  ; ---------------------------------------------------------------------------
  9461                                  
  9462                                  		; 19/10/2022
  9463                                  fmpgot:					; found my partition.
  9464 00002709 E82B01                  		call	dmax_check	; check	for drvmax already 26
  9465 0000270C 73FA                    		jnb	short fmpnextfound ; done if too many
  9466                                  
  9467 0000270E 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
  9468                                  
  9469                                  		; 19/12/2023
  9470                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  9471                                  		;; 10/12/2022
  9472                                  		;or	byte [di+23h], 1
  9473                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
  9474                                  		;			; fNon_Removable
  9475                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  9476                                  		;			; ffHardFile
  9477                                  		; 19/12/2023 - Retro DOS v5.0
  9478 00002712 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
  9479 00002717 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
  9480 0000271B C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
  9481                                  
  9482 0000271F C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  9483 00002724 A1[621A]                		mov	ax, [mini_hdlim]
  9484 00002727 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  9485 0000272A A1[641A]                		mov	ax, [mini_seclim]
  9486 0000272D 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  9487 00002730 A0[5C1A]                		mov	al, [rom_minidisk_num]
  9488 00002733 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  9489                                  					; set physical number
  9490 00002736 A0[7500]                		mov	al, [drvmax]
  9491 00002739 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  9492                                  					; set logical number
  9493 0000273C 26837F0A00              		cmp	word [es:bx+10], 0
  9494                                  		;ja	short fmpgot_cont
  9495 00002741 7707                    		ja	short fmpgot1	; 19/12/2023
  9496 00002743 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  9497                                  					; only lower word is meaningful.
  9498 00002748 72BE                    		jb	short fmpnextfound
  9499                                  					; should be bigger than 64 sectors at least
  9500                                  fmpgot1:	; 19/12/2023
  9501                                  ;fmpgot_cont:				
  9502 0000274A 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  9503 0000274D 268A7702                		mov	dh, [es:bx+2]	; cylinder
  9504 00002751 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  9505 00002754 D0C6                    		rol	dh, 1
  9506 00002756 D0C6                    		rol	dh, 1
  9507 00002758 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  9508                                  		; 19/12/2023 - Retro DOS v5.0
  9509 0000275C 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
  9510                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  9511                                  					; set hidden trks
  9512                                  		; 19/12/2023
  9513                                  		;push	bx ; * ; PCDOS 7.1	
  9514                                  		;;;
  9515 0000275F 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
  9516 00002763 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
  9517 00002767 030E[0022]              		add	cx, [ep_start_sector]
  9518 0000276B 1306[0222]              		adc	ax, [ep_start_sector+2]
  9519 0000276F 31D2                    		xor	dx, dx ; 19/12/2023
  9520 00002771 3916[0022]              		cmp	[ep_start_sector], dx ; 0
  9521                                  		;cmp	word [ep_start_sector], 0
  9522 00002775 750D                    		jnz	short fmpgot2
  9523 00002777 3916[0222]              		cmp	[ep_start_sector+2], dx ; 0
  9524                                  		;cmp	word [ep_start_sector+2], 0
  9525 0000277B 7507                    		jnz	short fmpgot2
  9526 0000277D 890E[0022]              		mov	[ep_start_sector], cx
  9527 00002781 A3[0222]                		mov	[ep_start_sector+2], ax
  9528                                  fmpgot2:
  9529 00002784 890E[0422]              		mov	[ep_hidden_secs], cx
  9530 00002788 A3[0622]                		mov	[ep_hidden_secs+2], ax
  9531                                  		
  9532                                  		; convert start sector address to CHS
  9533                                  	
  9534                                  		; 19/12/2023
  9535                                  		; dx = 0
  9536                                  		;push	bx ; * ; not necessary
  9537                                  
  9538                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
  9539 0000278B 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
  9540                                  		;xor	dx, dx  ; dx = 0
  9541                                  		;div	bx
  9542 0000278E F7F6                    		div	si
  9543 00002790 91                      		xchg	ax, cx
  9544                                  		;div	bx
  9545 00002791 F7F6                    		div	si
  9546                                  		;mov	bx, [di+15h]	; [di+BDS.heads]
  9547                                  		; 07/05/2024
  9548                                  		; 17/04/2024 (BugFix)
  9549 00002793 8B7515                  		mov	si, [di+15h]	; [di+BDS.heads]
  9550 00002796 91                      		xchg	ax, cx
  9551 00002797 31D2                    		xor	dx, dx
  9552                                  		;div	bx
  9553 00002799 F7F6                    		div	si
  9554 0000279B 91                      		xchg	ax, cx
  9555                                  		;div	bx
  9556 0000279C F7F6                    		div	si
  9557                                  
  9558                                  		;pop	bx ; *
  9559                                  
  9560 0000279E 09C9                    		or	cx, cx
  9561 000027A0 7505                    		jnz	short fmpgot_lba_rd
  9562 000027A2 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
  9563 000027A5 7235                    		jb	short fmpgot_chs_rd
  9564                                  fmpgot_lba_rd:
  9565 000027A7 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
  9566 000027AB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9567 000027AF 1E                      		push	ds
  9568                                  		; 19/12/2023
  9569                                  		;push	si ; ** ; not necessary 
  9570 000027B0 31C0                    		xor	ax, ax		; push bp
  9571                                  				        ; mov bp, sp ; (*)
  9572 000027B2 50                      		push	ax ; 0
  9573 000027B3 50                      		push	ax ; 0
  9574 000027B4 FF36[0622]              		push	word [ep_hidden_secs+2]
  9575 000027B8 FF36[0422]              		push	word [ep_hidden_secs]
  9576 000027BC B80002                  		mov	ax, bootbias ; 200h	
  9577                                  		;mov	ax, 200h	; bootbias (buffer offset)
  9578 000027BF 06                      		push	es		; buffer segment
  9579 000027C0 50                      		push	ax
  9580 000027C1 B80100                  		mov	ax, 1
  9581 000027C4 50                      		push	ax		; read count
  9582 000027C5 B81000                  		mov	ax, 10h		; DAP size = 16
  9583 000027C8 50                      		push	ax
  9584 000027C9 8CD0                    		mov	ax, ss
  9585 000027CB 8ED8                    		mov	ds, ax
  9586 000027CD 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
  9587                                  		
  9588 000027CF B442                    		mov	ah, 42h		; LBA read
  9589 000027D1 CD13                    		int	13h		; DISK - IBM/MS Extension
  9590                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  9591                                  		; 19/12/2023	
  9592                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
  9593                                  		;add	sp, 16
  9594                                  		;popf		; BUG!
  9595                                  					; mov sp, bp ; (*)
  9596                                  					; pop bp
  9597                                  		; 19/12/2023
  9598 000027D3 9F                      		lahf		; load status flags into AH
  9599 000027D4 83C410                  		add	sp, 16
  9600 000027D7 9E                      		sahf		; store AH into flags
  9601                                  		
  9602                                  		;pop	si ; ** ; 19/12/2023
  9603 000027D8 1F                      		pop	ds
  9604 000027D9 7317                    		jnc	short fmpgot3
  9605                                  fmpnotfound:	; 19/12/2023
  9606 000027DB C3                      		retn
  9607                                  		;jmp	short fmpgot3 
  9608                                  		;;;
  9609                                  
  9610                                  		; 19/12/2023
  9611                                  fmpgot_chs_rd:
  9612 000027DC 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  9613 000027E0 268A7701                		mov	dh, [es:bx+1]	; head
  9614 000027E4 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9615 000027E8 BB0002                  		mov	bx, 200h	; bootbias
  9616 000027EB B80102                  		mov	ax, 201h
  9617 000027EE CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9618                                  					; AL = number of sectors to read, CH = track, CL = sector
  9619                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9620                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9621                                  ;fmpgot3:	; 19/12/2023
  9622                                  		;jc	short fmpnextfound
  9623 000027F0 72E9                    		jc	short fmpnotfound
  9624                                  fmpgot3:	
  9625 000027F2 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  9626                                  
  9627                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9628                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  9629 000027F5 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  9630                                  		;jne	short fmpnextfound ; not a valid boot sector !
  9631                                  		; 19/12/2023
  9632 000027FB 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
  9633                                  
  9634                                  		; 13/08/2023
  9635                                  		;push	es
  9636 000027FD E80800                  		call	setmini		; install a mini disk.
  9637                                  					; bx value saved.
  9638                                  		;pop	es  ; 13/08/2023
  9639 00002800 7203                    		jc	short fmpnextchain
  9640 00002802 E84700                  		call	xinstall_bds	; -- install the bdsm into table
  9641                                  fmpnextchain:
  9642 00002805 E9EBFE                  		jmp	fmpnext		; let's find out
  9643                                  					; if we	have any chained partition
  9644                                  ; ---------------------------------------------------------------------------
  9645                                  
  9646                                  		; 18/12/2022
  9647                                  ;fmpnextfound:
  9648                                  		;retn
  9649                                  
  9650                                  ; =============== S U B	R O U T	I N E =======================================
  9651                                  
  9652                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9653                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  9654                                  
  9655                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9656                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
  9657                                  
  9658                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  9659                                  	
  9660 00002808 57                      		push	di
  9661 00002809 53                      		push	bx
  9662                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9663                                  		; ds = cs = BIOSDATA segment
  9664                                  		;push	ds
  9665 0000280A 06                      		push	es
  9666                                  setmini_1:
  9667                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
  9668                                  		;je	short setmini_2
  9669                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
  9670                                  		;je	short setmini_2
  9671                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
  9672                                  		;je	short setmini_2
  9673                                  		;
  9674                                  		; 19/12/2023 - Retro DOS v5.0
  9675                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
  9676                                  		;je	short setmini_2
  9677                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
  9678                                  		;je	short setmini_2
  9679                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
  9680                                  		;je	short setmini_2
  9681                                  
  9682                                  		; 19/12/2023
  9683 0000280B 268A07                  		mov 	al, [es:bx]
  9684 0000280E 3C01                    		cmp	al, 1 		; FAT12 partition
  9685 00002810 7422                    		je	short setmini_2
  9686 00002812 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
  9687 00002814 741E                    		je	short setmini_2
  9688 00002816 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
  9689 00002818 741A                    		je	short setmini_2
  9690 0000281A 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
  9691 0000281C 7416                    		je	short setmini_2
  9692 0000281E 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
  9693 00002820 7412                    		je	short setmini_2
  9694 00002822 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
  9695 00002824 740E                    		je	short setmini_2
  9696                                  
  9697 00002826 83C310                  		add	bx, 16
  9698 00002829 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9699                                  		;jne	short setmini_1
  9700 0000282D 72DC                    		jb	short setmini_1 ; 19/12/2023
  9701 0000282F F9                      		stc
  9702 00002830 07                      		pop	es
  9703                                  		; 12/08/2023
  9704                                  		;pop	ds
  9705 00002831 5B                      		pop	bx
  9706 00002832 5F                      		pop	di
  9707 00002833 C3                      		retn
  9708                                  
  9709                                  ; ---------------------------------------------------------------------------
  9710                                  setmini_2:
  9711 00002834 E9D1F9                  		jmp	set2		; branch into middle of sethard
  9712                                  
  9713                                  ; =============== S U B	R O U T	I N E =======================================
  9714                                  
  9715                                  ; 30/12/2022 - Retro DOS v4.2
  9716                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
  9717                                  
  9718                                  ; 15/10/2022
  9719                                  ; 28/12/2018 - Retro DOS v4.0
  9720                                  ;
  9721                                  ; dmax_check -- call this when we want to install a new drive.
  9722                                  ;		it checks for drvmax < 26 to see if there is
  9723                                  ;		a drive letter left.
  9724                                  ;
  9725                                  ;	drvmax < 26 : carry SET!
  9726                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  9727                                  ;			trash ax
  9728                                  
  9729                                  		; 19/12/2023 - Retro DOS v5.0
  9730                                  dmax_check:
  9731 00002837 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  9732 0000283C 720D                    		jb	short dmax_ok	; return with carry if okay
  9733 0000283E 06                      		push	es
  9734                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  9735                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
  9736 0000283F B8D904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  9737 00002842 8EC0                    		mov	es, ax
  9738                                  		; 18/10/2022
  9739 00002844 26C606[8103]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  9740                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  9741                                  					; set message flag
  9742                                  					; [SYSINIT+toomanydrivesflag]
  9743 0000284A 07                      		pop	es
  9744                                  
  9745                                  		;;push	es
  9746                                  		;;mov	ax,SYSINIT_SEG
  9747                                  		;;mov	es,ax
  9748                                  		;;mov	byte [es:toomanydrivesflag],1
  9749                                  					; set message flag
  9750                                  		;;pop	es
  9751                                  		;
  9752                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  9753                                  dmax_ok:
  9754 0000284B C3                      		retn
  9755                                  
  9756                                  ; =============== S U B	R O U T	I N E =======================================
  9757                                  
  9758                                  ; 18/10/2022
  9759                                  ; 15/10/2022
  9760                                  ; 28/12/2018 - Retro DOS v4.0
  9761                                  ;
  9762                                  ;	link next bds (at ds:di) into the chain. assume that the
  9763                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  9764                                  ;	  dskdrv_table, and end_of_bdss.	
  9765                                  
  9766                                  		; 19/12/2023 - Retro DOS v5.0
  9767                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
  9768                                  xinstall_bds:
  9769 0000284C 56                      		push	si
  9770 0000284D 53                      		push	bx
  9771 0000284E 8B36[1901]              		mov	si, [start_bds]	; get first bds
  9772                                  xinstall_bds_1:
  9773 00002852 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  9774 00002855 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  9775                                  		;mov	si, [si+BDS.link]
  9776 00002857 8B34                    		mov	si, [si]	; chain	through	list
  9777 00002859 EBF7                    		jmp	short xinstall_bds_1
  9778                                  
  9779                                  xinstall_bds_2:
  9780                                  		;mov	[si+BDS.link], di
  9781 0000285B 893C                    		mov	[si], di
  9782                                  		;mov	[si+BDS.link+2], ds
  9783 0000285D 8C5C02                  		mov	[si+2], ds
  9784                                  		;mov	word [di+BDS.link], -1
  9785 00002860 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  9786                                  		;mov	[di+BDS.link+2], ds
  9787 00002864 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  9788                                  		; 20/03/2019 - Retro DOS v4.0
  9789                                  		;lea	bx, [di+BDS.BPB]
  9790 00002867 8D5D06                  		lea	bx, [di+6]
  9791 0000286A 8B36[5E1A]              		mov	si, [last_dskdrv_table]
  9792 0000286E 891C                    		mov	[si], bx
  9793 00002870 8306[5E1A]02            		add	word [last_dskdrv_table], 2
  9794 00002875 FE06[7500]              		inc	byte [drvmax]
  9795                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
  9796                                  		; 19/12/2023 - Retro DOS v5.0
  9797 00002879 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
  9798 0000287F 5B                      		pop	bx
  9799 00002880 5E                      		pop	si
  9800 00002881 C3                      		retn
  9801                                  
  9802                                  ; =============== S U B	R O U T	I N E =======================================
  9803                                  
  9804                                  ; 17/10/2022
  9805                                  ; 15/10/2022
  9806                                  ; 28/12/2018 - Retro DOS v4.0
  9807                                  ; 03/06/2018 - Retro DOS v3.0
  9808                                  
  9809                                  		; 19/12/2023 - Retro DOS v5.0
  9810                                  cmos_clock_read:
  9811 00002882 50                      		push	ax
  9812 00002883 51                      		push	cx
  9813 00002884 52                      		push	dx
  9814 00002885 55                      		push	bp
  9815 00002886 31ED                    		xor	bp, bp
  9816                                  loop_clock:
  9817 00002888 31C9                    		xor	cx, cx
  9818 0000288A 31D2                    		xor	dx, dx
  9819 0000288C B402                    		mov	ah, 2
  9820 0000288E CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  9821                                  					; Return: CH = hours in	BCD
  9822                                  					; CL = minutes in BCD
  9823                                  					; DH = seconds in BCD
  9824                                  		; 19/12/2023
  9825                                  		;cmp	cx, 0
  9826 00002890 21C9                    		and	cx, cx
  9827 00002892 750F                    		jnz	short clock_present
  9828                                  		;cmp	dx, 0
  9829 00002894 09D2                    		or	dx, dx
  9830 00002896 750B                    		jnz	short clock_present
  9831                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
  9832                                  		;je	short no_readdate ; was	at zero	setting.
  9833 00002898 21ED                    		and	bp, bp
  9834 0000289A 751A                    		jnz	short no_readdate
  9835 0000289C 45                      		inc	bp		; only perform delay once.
  9836                                  		;mov	cx, 4000h	; 16384
  9837                                  		; 19/12/2023
  9838 0000289D B540                    		mov	ch, 40h ; cx = 4000h ; 16384
  9839                                  delay:					
  9840 0000289F E2FE                    		loop	delay
  9841 000028A1 EBE5                    		jmp	short loop_clock
  9842                                  ; ---------------------------------------------------------------------------
  9843                                  
  9844                                  clock_present:
  9845                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  9846                                  		; 19/12/2023
  9847                                  		; ds = cs
  9848 000028A3 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  9849                                  		
  9850 000028A8 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  9851                                  					; possibly destroyed by	cp dos and
  9852                                  					; post routine did not restore that.
  9853 000028AB 56                      		push	si
  9854 000028AC E8BCEF                  		call	read_real_date	; read real-time clock for date
  9855 000028AF FA                      		cli
  9856                                  		;mov	ds:daycnt, si	; set system date
  9857 000028B0 8936[8904]              		mov	[daycnt], si
  9858 000028B4 FB                      		sti
  9859 000028B5 5E                      		pop	si
  9860                                  no_readdate:
  9861 000028B6 5D                      		pop	bp
  9862 000028B7 5A                      		pop	dx
  9863 000028B8 59                      		pop	cx
  9864 000028B9 58                      		pop	ax
  9865                                  
  9866                                  cmosck9:	; 19/12/2023
  9867 000028BA C3                      		retn
  9868                                  
  9869                                  ; ---------------------------------------------------------------------------
  9870                                  
  9871                                  ; the following code is written by jack gulley in engineering group.
  9872                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  9873                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  9874                                  ; the cmos clock rate are still slow which slow down disk operations
  9875                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  9876                                  ; to fix this problem at the request of cp dos.
  9877                                  ;
  9878                                  ; the program is modified to be run on msinit. equates are defined
  9879                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  9880                                  ;
  9881                                  ;  the following code cmosck is used to insure that the cmos has not
  9882                                  ;	had its rate controls left in an invalid state on older at's.
  9883                                  ;
  9884                                  ;	it checks for an at model byte "fc" with a submodel type of
  9885                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  9886                                  ;	bits in case post has not done it. this initilization routine
  9887                                  ;	is only needed once when dos loads. it should be run as soon
  9888                                  ;	as possible to prevent slow diskette access.
  9889                                  ;
  9890                                  ;	this code exposes one to dos clearing cmos setup done by a
  9891                                  ;	resident program that hides and re-boots the system.
  9892                                  
  9893                                  cmosck:					; check and reset rtc rate bits
  9894                                  
  9895                                  ;model byte and submodel byte were already determined in msinit.
  9896                                  
  9897                                  	; 16/06/2018 - Retro DOS v3.0
  9898                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  9899                                  
  9900                                  	; 19/12/2023 - Retro DOS v5.0
  9901                                  	
  9902                                  		; 19/12/2023
  9903                                  		; ds = cs
  9904                                  		;push	ax ; not necessary ; 19/12/2023
  9905                                  		;
  9906 000028BB 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
  9907                                  		;cmp	byte [cs:model_byte], 0FCh
  9908 000028C0 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  9909 000028C2 803E[B005]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  9910                                  		;cmp	byte [cs:secondary_model_byte], 6
  9911                                  					; Is it 06 for the industral AT ?
  9912 000028C7 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  9913 000028C9 803E[B005]04            		cmp	byte [secondary_model_byte], 4
  9914                                  		;cmp	byte [cs:secondary_model_byte], 4
  9915                                  					; Is it 00, 01, 02, or 03 ?
  9916 000028CE 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  9917                                  					; Also,Secondary_model_byte = 0
  9918                                  					;   when AH=0C0h, int 15h failed.
  9919                                  					;	RESET THE CMOS PERIODIC RATE
  9920                                  					;  Model=FC submodel=00,01,02,03 or 06
  9921                                  cmosck4:
  9922 000028D0 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  9923                                  					; NMI disabled on return
  9924 000028D2 B426                    		mov	ah, 26h		; 00100110b
  9925                                  					; Set divider & rate selection
  9926 000028D4 E80B00                  		call	cmos_write
  9927 000028D7 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  9928                                  					; NMI disabled on return
  9929 000028D9 E82000                  		call	cmos_read
  9930 000028DC 2407                    		and	al, 7		; 00000111b
  9931                                  					; clear SET,PIE,AIE,UIE,SQWE
  9932 000028DE 88C4                    		mov	ah, al
  9933 000028E0 B00B                    		mov	al, 0Bh		; cmos_reg_b
  9934                                  					; NMI enabled on return
  9935                                  		; 19/12/2023
  9936                                  		;call	cmos_write
  9937                                  ;cmosck9:
  9938                                  		;pop	ax ; 19/12/2023
  9939                                  		;retn
  9940                                  
  9941                                  		; 19/12/2023
  9942                                  		;jmp	short cmos_write
  9943                                  
  9944                                  ; =============== S U B	R O U T	I N E =======================================
  9945                                  
  9946                                  ;--- cmos_write ----------------------------------------------------------------
  9947                                  ;		write byte to cmos system clock configuration table	       :
  9948                                  ;									       :
  9949                                  ; input: (al)=	cmos table address to be written to			       :
  9950                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9951                                  ;		bits 6-0 = address of table location to write		       :
  9952                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  9953                                  ;									       :
  9954                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  9955                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  9956                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9957                                  ;		the cmos address register is pointed to a default value and    :
  9958                                  ;		the interrupt flag restored to the entry state on return.      :
  9959                                  ;		only the cmos location and the nmi state is changed.	       :
  9960                                  ;-------------------------------------------------------------------------------
  9961                                  
  9962                                  cmos_write:				; write (ah) to location (al)
  9963 000028E2 9C                      		pushf			;
  9964 000028E3 50                      		push	ax		; save work register values
  9965 000028E4 FA                      		cli
  9966 000028E5 50                      		push	ax		; save user nmi	state
  9967 000028E6 0C80                    		or	al, 80h		; disable nmi for us
  9968 000028E8 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9969                                  					; RTC Seconds
  9970 000028EA 90                      		nop
  9971 000028EB 88E0                    		mov	al, ah
  9972 000028ED E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  9973 000028EF 58                      		pop	ax		; get user nmi
  9974 000028F0 2480                    		and	al, 80h
  9975 000028F2 0C0F                    		or	al, 0Fh
  9976 000028F4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9977                                  					; RTC Seconds
  9978 000028F6 90                      		nop
  9979 000028F7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  9980 000028F9 58                      		pop	ax		; restore work registers
  9981                                  
  9982                                  		; 19/12/2023
  9983                                  		;push	cs		; *place code segment in stack and
  9984                                  		;call	cmos_popf	; *handle popf for b- level 80286
  9985                                  		;retn
  9986 000028FA EB18                    		jmp	short cmos_rw_popf
  9987                                  
  9988                                  ; =============== S U B	R O U T	I N E =======================================
  9989                                  
  9990                                  ;--- CMOS_READ -----------------------------------------------------------------
  9991                                  ;		read byte from cmos system clock configuration table	       :
  9992                                  ;									       :
  9993                                  ; input: (al)=	cmos table address to be read				       :
  9994                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9995                                  ;		bits 6-0 = address of table location to read		       :
  9996                                  ;									       :
  9997                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  9998                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
  9999                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 10000                                  ;		the cmos address register is pointed to a default value and    :
 10001                                  ;		the interrupt flag restored to the entry state on return.      :
 10002                                  ;		only the (al) register and the nmi state is changed.	       :
 10003                                  ;-------------------------------------------------------------------------------
 10004                                  
 10005                                  cmos_read:				; read location (al) into (al)
 10006 000028FC 9C                      		pushf
 10007 000028FD FA                      		cli
 10008 000028FE 53                      		push	bx
 10009                                  		;push	ax ; *		; AL = cmos table address to be read
 10010                                  		; 19/12/2023
 10011 000028FF 89C3                    		mov	bx, ax ; * ; input
 10012 00002901 0C80                    		or	al, 80h
 10013 00002903 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10014                                  					; RTC Seconds
 10015 00002905 90                      		nop			; (undocumented delay needed)
 10016 00002906 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10017                                  		
 10018                                  		;mov	bx, ax ; output
 10019                                  		;pop	ax ; * ; input
 10020                                  
 10021                                  		; 19/12/2023
 10022                                  		; al = output, bl = input
 10023 00002908 93                      		xchg	ax, bx ; *
 10024                                  		; bl = output, al = input
 10025                                  	
 10026 00002909 2480                    		and	al, 80h
 10027 0000290B 0C0F                    		or	al, 0Fh
 10028 0000290D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10029                                  					; RTC Seconds
 10030 0000290F 90                      		nop
 10031 00002910 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10032                                  		;mov	ax, bx ; * ; output
 10033                                  		; 19/12/2023
 10034 00002912 93                      		xchg	ax, bx
 10035 00002913 5B                      		pop	bx
 10036                                  
 10037                                  		; 19/12/2023
 10038                                  cmos_rw_popf:
 10039 00002914 0E                      		push	cs		; *place code segment in stack and
 10040 00002915 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 10041 00002918 C3                      		retn			; return with flags restored
 10042                                  
 10043                                  ; ---------------------------------------------------------------------------
 10044                                  
 10045                                  cmos_popf:				
 10046 00002919 CF                      		iret			; popf for level b- parts
 10047                                  					; return far and restore flags
 10048                                  
 10049                                  ; 21/12/2022
 10050                                  ; ---------------------------------------------------------------------------
 10051                                  ; ---------------------------------------------------------------------------
 10052                                  %if 0
 10053                                  
 10054                                  ; ---------------------------------------------------------------------------
 10055                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 10056                                  ; ---------------------------------------------------------------------------
 10057                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 10058                                  ; ---------------------------------------------------------------------------
 10059                                  
 10060                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10061                                  ;
 10062                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 10063                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 10064                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 10065                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
 10066                                  
 10067                                  ; =============== S U B	R O U T	I N E =======================================
 10068                                  
 10069                                  ; GetClus, read in a cluster at a specified address
 10070                                  ;
 10071                                  ;  bx = cluster to read
 10072                                  ;  cx = sectors per cluster
 10073                                  ;  es:di = load location
 10074                                  
 10075                                  ; 17/10/2022
 10076                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 10077                                  ; 09/12/2022
 10078                                  DISKRD equ diskrd
 10079                                  
 10080                                  		; 29/12/2023
 10081                                  		; 20/12/2023 - Retro DOS v5.0
 10082                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 10083                                  
 10084                                  		; si:bx = (32 bit) cluster to read
 10085                                  		; cx = sectors per cluster
 10086                                  		; es:di = load location
 10087                                  
 10088                                  		; 17/10/2022
 10089                                  getclus:
 10090                                  		; 12/12/2023
 10091                                  		; ds = cs
 10092                                  		
 10093                                  		push	cx ; 1*
 10094                                  		push	di ; 2*
 10095                                  		;mov	[cs:doscnt], cx
 10096                                  		mov	[doscnt], cx ; 12/12/2023
 10097                                  
 10098                                  		; 20/12/2023
 10099                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 10100                                  		;mov	[ClusterH], si ; high word of cluster number
 10101                                  		mov	bp, si
 10102                                  
 10103                                  		mov	ax, bx
 10104                                  
 10105                                  		;dec	ax
 10106                                  		;dec	ax
 10107                                  		; 20/12/2023
 10108                                  		sub	ax, 2
 10109                                  
 10110                                  		;;sbb	[cs:ClusterH], 0
 10111                                  		;sbb	[ClusterH], 0
 10112                                  		sbb	bp, 0		
 10113                                  
 10114                                  		; 20/12/2023
 10115                                  		;;xchg	ax, [cs:ClusterH]
 10116                                  		;xchg	ax, [ClusterH]
 10117                                  		xchg	ax, bp
 10118                                  
 10119                                  		mul	cx
 10120                                  
 10121                                  		;;xchg	ax, [cs:ClusterH]
 10122                                  		;xchg	ax, [ClusterH]
 10123                                  		xchg	ax, bp ; (+)
 10124                                  		;
 10125                                  		mul	cx		;; convert to logical sector
 10126                                  					;; dx:ax = matching logical sector number
 10127                                  					;;	  starting from the data sector
 10128                                  		;;add	ax, [cs:bios_l]
 10129                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 10130                                  		; 12/12/2023
 10131                                  		;add	ax, [bios_l]
 10132                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 10133                                  
 10134                                  		; 20/12/2023
 10135                                  		;;add	dx, [cs:ClusterH]
 10136                                  		;add	ax, [cs:First_Data_Sector]
 10137                                  		;adc	dx, [cs:First_Data_Sector+2]
 10138                                  		add	dx, bp ; (+)
 10139                                  		;add	dx, [ClusterH]	; convert to logical sector
 10140                                  					; dx:ax	= matching logical sector number
 10141                                  					;	  starting from the data sector
 10142                                  		add	ax, [First_Data_Sector]
 10143                                  		adc	dx, [First_Data_Sector+2]
 10144                                  					; dx:ax = first logical sector to read
 10145                                  unpack:
 10146                                  		; 20/12/2023
 10147                                  		push	ds ; 3* ; ds = cs ; 12/12/2023
 10148                                  		push	dx ; 4* ; * ; 12/12/2023
 10149                                  		push	ax ; 5*
 10150                                  		; 29/12/2023
 10151                                  		push	si ; 6* 
 10152                                  		push	bx ; 7*
 10153                                  
 10154                                  		;;mov	si, [cs:fatloc]
 10155                                  		;mov	si, [fatloc] ; 12/12/2023
 10156                                  		;mov	ds, si
 10157                                  		; 20/12/2023
 10158                                  		;mov	ax, [fatloc]
 10159                                  		;mov	ds, ax
 10160                                  		push	bx ; 8*
 10161                                  		push	word [fatloc] ; 9*
 10162                                  
 10163                                  		;test	byte [cs:fbigfat], 20h
 10164                                  		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 10165                                  		pop	ds ; 9* ; ds = [fatloc]
 10166                                  		jz      short not_32bit_cluster ; no
 10167                                  unpack32:
 10168                                  		;push	dx
 10169                                  		mov	dx, si
 10170                                  		;mov	si, bx
 10171                                  		pop	si ; 8* ; si = bx
 10172                                  		add	si, si
 10173                                  		adc	dx, dx
 10174                                  		add	si, si
 10175                                  		adc	dx, dx 
 10176                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 10177                                  		call	get_fat_sector
 10178                                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 10179                                  		mov	bx, [bx]	; low word of the FAT32 cluster number
 10180                                  		;pop	dx
 10181                                  		jmp	short getcl1
 10182                                  
 10183                                  not_32bit_cluster:
 10184                                  		;mov	si, bx		; next cluster
 10185                                  		pop	si ; 8* ; si = bx
 10186                                  		test	byte [cs:fbigfat], 40h	; fbig
 10187                                  					; 16 bit fat?
 10188                                  		jnz	short unpack16	; yes
 10189                                  unpack12:
 10190                                  		shr	si, 1		; 12 bit fat. si = si/2
 10191                                  					; si = clus + clus/2
 10192                                  		add	si, bx		;
 10193                                  					; (si =	byte offset of the cluster in the FAT)
 10194                                  		;push	dx ; 12/12/2023
 10195                                  		xor	dx, dx
 10196                                  		; 12/12/2023
 10197                                  		; ds = FAT buffer segment
 10198                                  		call	get_fat_sector
 10199                                  		;pop	dx ; 12/12/2023
 10200                                  
 10201                                  		mov	ax, [bx]	; save it into ax
 10202                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
 10203                                  		; 25/06/2023
 10204                                  		;mov	al, [bx]	; splitted fat
 10205                                  		
 10206                                  		; 12/12/2023
 10207                                  		;mov	[cs:temp_cluster], al
 10208                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 10209                                  
 10210                                   		inc	si		; (next	byte)
 10211                                  
 10212                                  		;push	dx ; 12/12/2023
 10213                                  		xor	dx, dx
 10214                                  		call	get_fat_sector
 10215                                  		;pop	dx ; 12/12/2023
 10216                                  
 10217                                  		;mov	al, ds:0
 10218                                  		; 12/12/2023
 10219                                  		; ds = FAT buffer segment
 10220                                  		;mov	al, [0] ; 19/10/2022
 10221                                  		;mov	[cs:temp_cluster+1], al
 10222                                  		;mov	ax, [cs:temp_cluster]
 10223                                  		; 12/12/2023
 10224                                  		;mov	al, [cs:temp_cluster]
 10225                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 10226                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 10227                                  even_odd:
 10228                                  		; 29/12/2023
 10229                                  		pop	bx ; 7*		; restore old fat entry	value
 10230                                  		push	bx		; save it right	away.
 10231                                  		shr	bx, 1		; was it even or odd?
 10232                                  		jnc	short havclus	; it was even.
 10233                                  		shr	ax, 1		; odd. massage fat value and keep
 10234                                  					; the highest 12 bits.
 10235                                  		shr	ax, 1
 10236                                  		shr	ax, 1
 10237                                  		shr	ax, 1
 10238                                  havclus:
 10239                                  		mov	bx, ax		; now bx = new fat entry.
 10240                                  		and	bx, 0FFFh	; keep low 12 bits.
 10241                                  		jmp	short unpackx
 10242                                  ; ---------------------------------------------------------------------------
 10243                                  
 10244                                  unpack16:
 10245                                  		;push	dx	; 12/12/2023
 10246                                  		xor	dx, dx ; 0
 10247                                  		shl	si, 1		; extend to 32 bit offset
 10248                                  		;adc	dx, 0
 10249                                  		; 12/12/2023
 10250                                  		rcl	dx, 1
 10251                                  
 10252                                  		; 12/12/2023
 10253                                  		; ds = FAT buffer segment
 10254                                  		call	get_fat_sector
 10255                                  		;pop	dx	; 12/12/2023
 10256                                  		mov	bx, [bx]	;
 10257                                  					; bx = new fat entry.
 10258                                  unpackx:
 10259                                  		; 20/12/2023
 10260                                  		xor	si, si		; high word of cluster number = 0
 10261                                  					; (FAT12 or FAT16)
 10262                                  getcl1:
 10263                                  		; 29/12/2023
 10264                                  		pop	ax	; 7* - cluster number lw
 10265                                  		;pop	word [cs:ClusterH]
 10266                                  		pop	dx	; 6* - cluster number hw
 10267                                  
 10268                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10269                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 10270                                  		; ((consequtive clusters --> consequtive sectors))
 10271                                  
 10272                                  		sub	ax, bx	; previous - current (or current - new)	
 10273                                  		;sbb	[cs:ClusterH], si
 10274                                  		sbb	dx, si
 10275                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 10276                                  		;cmp	dx, -1
 10277                                  		; 29/12/2023
 10278                                  		inc	dx ; -1 -> 0
 10279                                  		jnz	short not_consequental
 10280                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 10281                                  		inc	ax ; -1 -> 0
 10282                                  not_consequental:
 10283                                  		pop	ax ; 5* 	; restore logical sector (low)
 10284                                  		pop	dx ; 4* ; * ; 12/12/2023
 10285                                  		pop	ds ; 3*
 10286                                  
 10287                                  		;; 12/12/2023
 10288                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 10289                                  		;; ((consequtive clusters --> consequtive sectors))
 10290                                  		;; ds = cs
 10291                                  		;sub	si, bx
 10292                                  		;cmp	si, -1		; one apart? (consequtive?)
 10293                                  		;			; (current = previous+1)
 10294                                  
 10295                                  		jnz	short getcl2	; no, read [doscnt] sectors 
 10296                                  
 10297                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 10298                                  		add	[doscnt], cx ; 12/12/2023 ; add to read count
 10299                                  		jmp	unpack
 10300                                  ; ---------------------------------------------------------------------------
 10301                                  
 10302                                  getcl2:
 10303                                  		push	si ; 20/12/2023
 10304                                  		push	bx	
 10305                                  		; bx = low word of the new cluster number
 10306                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 10307                                  		; si = high word of the new cluster number
 10308                                  		push	dx		; sector to read (high word)
 10309                                  		push	ax		; sector to read (low word)
 10310                                  		
 10311                                  		; 12/12/2023
 10312                                  		; ds = cs
 10313                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 10314                                  		;mov	cx, [cs:doscnt]
 10315                                  		mov	ax, [drvfat]	; get drive and	fat spec
 10316                                  
 10317                                  		;;;
 10318                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10319                                  		;
 10320                                  		; dma and segment (64K boundary) overrun precaution
 10321                                  		; (sector count will be decreased if it is required)
 10322                                   		mov	cx, di
 10323                                  		not	cx		; cx = 65535 - cx
 10324                                  		shr	cx, 1		; cx = cx/2
 10325                                  		xor	cl, cl
 10326                                  		xchg	cl, ch		; cx = cx/256
 10327                                  		
 10328                                  		;cmp	cx, [cs:doscnt]	
 10329                                  				; if sector read count > cx, decrease it to cx
 10330                                  		cmp	cx, [doscnt]
 10331                                  		jbe	short getcl3
 10332                                  		;;;
 10333                                  		;mov	cx, [cs:doscnt]
 10334                                  		mov	cx, [doscnt]
 10335                                  getcl3:
 10336                                  		pop	dx		; sector to read for diskrd (low)
 10337                                  		;pop	word [cs:start_sec_h]
 10338                                  		; 12/12/2023
 10339                                  		pop	word [start_sec_h]
 10340                                  					; sector to read for diskrd (high)
 10341                                  		; 12/12/2023
 10342                                  		; ds = cs
 10343                                  		;push	ds
 10344                                  		;push	cs
 10345                                  		;pop	ds
 10346                                  		
 10347                                  		push	cs		; simulate far call
 10348                                  
 10349                                  		; 20/12/2023
 10350                                  		; 17/10/2022
 10351                                  		mov	bp, DISKRD	; offset diskrd
 10352                                  		;mov	bp, 0A2Bh	; 20/12/2023
 10353                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 10354                                  		;mov	bp, 8E5h	; 17/10/2022
 10355                                  					; 2C7h:8E5h = 70h:2E55h
 10356                                  
 10357                                  		call	call_bios_code	; read the clusters
 10358                                  		
 10359                                  		;pop	ds
 10360                                  		; 12/12/2023
 10361                                  		; ds = cs
 10362                                  		pop	bx		; lw of the new cluster number
 10363                                  		pop	si ; 20/12/2023 ; hw of the new cluster number
 10364                                  
 10365                                  		pop	di ; 2* - (kernel) load location (es:di)
 10366                                  
 10367                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
 10368                                  		; 12/12/2023
 10369                                  		mov	ax, [doscnt]
 10370                                  		xchg	ah, al		; multiply by 256
 10371                                  		shl	ax, 1		; times	2 equal	512
 10372                                  		add	di, ax		; update load location
 10373                                  
 10374                                  		pop	cx ; 1*		; restore sectors/cluster
 10375                                  
 10376                                  		retn
 10377                                  
 10378                                  ; =============== S U B	R O U T	I N E =======================================
 10379                                  
 10380                                  ;function: find and read the corresponding fat sector into ds:0
 10381                                  ;
 10382                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 10383                                  ;     ds - fatloc segment
 10384                                  ;     cs:drvfat - logical drive number, fat id
 10385                                  ;     cs:md_sectorsize
 10386                                  ;     cs:last_fat_secnum - last fat sector number read in.
 10387                                  ;
 10388                                  ;out). corresponding fat sector read in.
 10389                                  ;      bx = offset value from fatlog segment.
 10390                                  ;      other registers are saved.
 10391                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 10392                                  ;      starts at the last byte of the fat sector. in this case, the caller
 10393                                  ;      should save this byte, and read the next fat sector to get the rest
 10394                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 10395                                  
 10396                                  		; 17/10/2022
 10397                                  get_fat_sector:	
 10398                                  		; 12/12/2023
 10399                                  		; ds = fat buffer segment
 10400                                  
 10401                                  		; 12/12/2023
 10402                                  		;push	ax ; (not necessary)
 10403                                  		push	cx ; read count (sectors per cluster)
 10404                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 10405                                  		push	si ; FAT offset value (from fat entry 0)
 10406                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 10407                                  		push	ds ; FAT buffer segment
 10408                                  
 10409                                  		; 12/12/2023
 10410                                  		push	cs
 10411                                  		pop	ds
 10412                                  	
 10413                                  		mov	ax, si
 10414                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 10415                                  		; 12/12/2023
 10416                                  		;mov	cx, [md_sectorsize] ; 512
 10417                                  		;div	cx		; ax = sector number, dx = offset
 10418                                  		; 12/12/2023
 10419                                  		;nop
 10420                                  
 10421                                  		; 12/12/2023
 10422                                  		div	word [md_sectorsize] ; 512
 10423                                  
 10424                                  		; ax = FAT sector (sequence/index) number
 10425                                  		; dx = cluster number offset
 10426                                  
 10427                                  		; Get rid of the assumption that
 10428                                  		; there	is only	one reserved sector
 10429                                  
 10430                                  		; 12/12/2023 ; *
 10431                                  		;push	es ; *
 10432                                  		;push	ds ; *
 10433                                  		;push	di ; *
 10434                                  		push	ax
 10435                                  		;push	cs ; *
 10436                                  		;pop	ds ; *
 10437                                  
 10438                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 10439                                  		; 12/12/2023
 10440                                  		mov	ax, [drvfat]	; get drive # and FAT id 
 10441                                  		mov	bp, SETDRIVE
 10442                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 10443                                  		;;mov	bp, 4D7h	; setdrive
 10444                                  					; at 2C7h:4D7h = 70h:2A47h
 10445                                  		push	cs		; simulate far call
 10446                                  		call	call_bios_code	; get bds for drive
 10447                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
 10448                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 10449                                  					; add #reserved_sectors
 10450                                  		; 12/12/2023
 10451                                  		;pop	di ; *
 10452                                  		;pop	ds ; *
 10453                                  		;pop	es ; *
 10454                                  
 10455                                  		; 12/12/2023
 10456                                  		; ds = cs
 10457                                  		cmp	ax, [last_fat_sec_num]
 10458                                  		;cmp	ax, [cs:last_fat_sec_num]
 10459                                  		jz	short gfs_split_chk ; don't need to read it again.
 10460                                  		mov	[last_fat_sec_num], ax
 10461                                  		;mov	[cs:last_fat_sec_num], ax
 10462                                  					; sector number
 10463                                  					; (in the partition, without hidden sectors)
 10464                                  		; 13/12/2023
 10465                                  		pop	es ; FAT buffer segment (DS on top of the stack)
 10466                                  		push	es ; (put it on top of the stack again)
 10467                                  
 10468                                  		push	dx ; cluster number offset
 10469                                  
 10470                                  		; 12/12/2023
 10471                                  		xor	cx, cx
 10472                                  		mov	[start_sec_h], cx ;0 
 10473                                  		;mov	word [cs:start_sec_h], 0 
 10474                                  					; prepare to read the fat sector
 10475                                  					; start_sec_h is always	0 for fat sector.
 10476                                  		mov	dx, ax
 10477                                  		; 12/12/2023
 10478                                  		inc	cx ; cx = 1
 10479                                  		;mov	cx, 1		; 1 sector read
 10480                                  		;mov	ax, [cs:drvfat]
 10481                                  		mov	ax, [drvfat]
 10482                                  		;push	ds
 10483                                  		;pop	es
 10484                                  
 10485                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
 10486                                  		
 10487                                  		; 12/12/2023
 10488                                  		;push	ds
 10489                                  		;push	cs
 10490                                  		;pop	ds
 10491                                  		
 10492                                  		push	cs		; simulate far call
 10493                                  		mov	bp, DISKRD	; 8E5h
 10494                                  		;mov	bp, 8E5h	; offset diskrd
 10495                                  					; 2C7h:8E5h = 70h:2E55h
 10496                                  		call	call_bios_code
 10497                                  
 10498                                  		; 12/12/2023
 10499                                  		;pop	ds
 10500                                  		; ds = cs = biosdata segment
 10501                                  
 10502                                  		pop	dx ; cluster number offset 
 10503                                  
 10504                                  gfs_split_chk:
 10505                                  		; 13/12/2023
 10506                                  		;mov	cx, [cs:md_sectorsize] ; 512
 10507                                  		mov	cx, [md_sectorsize]
 10508                                  ;gfs_split_chk:					
 10509                                  		dec	cx		; 511
 10510                                  		cmp	dx, cx		; if offset points to the
 10511                                  					; last byte of this sector,
 10512                                  					; then splitted	entry.
 10513                                  		mov	bx, dx		; set bx to dx
 10514                                  		
 10515                                  		; 12/12/2023
 10516                                  		; bx = dx = cluster number offset in the FAT buffer
 10517                                  		pop	ds ; FAT buffer segment
 10518                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 10519                                  		pop	si ; FAT offset value (from fat entry 0)
 10520                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 10521                                  		pop	cx ; read count (sectors per cluster)
 10522                                  		;pop	ax
 10523                                  
 10524                                  		retn
 10525                                  ; 15/10/2022
 10526                                  ;Bios_Data_Init	ends
 10527                                  
 10528                                  %endif
 10529                                  ; ---------------------------------------------------------------------------
 10530                                  ; ---------------------------------------------------------------------------
 10531                                  
 10532                                  		; 09/12/2022
 10533                                  		;db 0
 10534                                  
 10535                                  numbertodiv	equ ($-BData_start)
 10536                                  numbertomod	equ (numbertodiv % 16)
 10537                                  
 10538                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
 10539 0000291A 00<rep 6h>              		times (16-numbertomod) db 0
 10540                                  %endif
 10541                                  
 10542                                  ;align 16
 10543                                  
 10544                                  ; 09/12/2022
 10545                                  IOSYSCODESEGOFF equ $ - BData_start
 10546                                  ; 29/09/2023
 10547                                  ;IOSYSCODESEGOFF equ $-$$
 10548                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 10549                                  
 10550                                  ; 28/09/2023
 10551                                  S1SIZE equ $-$$
 10552                                  
 10553                                  ;--- End of DOSBIOS data segment --------------------------------------------
 10554                                  ; ---------------------------------------------------------------------------
 10555                                  		;db 4 dup(0)
 10556                                  ; 09/12/2022		
 10557                                  ;		times 4 db 0	; 19/10/2022
 10558                                  ; ---------------------------------------------------------------------------
 10559                                  
 10560                                  ;============================================================================
 10561                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 10562                                  ;============================================================================
 10563                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10564                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 10565                                  
 10566                                  section .BIOSCODE vstart=0 
 10567                                  
 10568                                  ; 30/12/2022
 10569                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 10570                                  
 10571                                  BCode_start:	 ; 09/12/2022
 10572                                   
 10573                                  ; 02/10/2022
 10574                                  
 10575                                  ;--- DOSBIOS code segment ---------------------------------------------------
 10576                                  ;----------------------------------------------------------------------------
 10577                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 10578                                  ;----------------------------------------------------------------------------
 10579                                  
 10580                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 10581 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 10582 00000030 7000                    BiosDataWord:	dw 70h
 10583                                  
 10584                                  ; 15/10/2022
 10585                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 10586                                  ; 09/12/2022
 10587                                  BIOSDATAWORD	equ BiosDataWord
 10588                                  
 10589                                  ; ---------------------------------------------------------------------------
 10590                                  
 10591                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10592                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10593                                  
 10594                                  ;************************************************************************
 10595                                  ;*									*
 10596                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 10597                                  ;*	  trashes di, cx, es						*
 10598                                  ;*									*
 10599                                  ;*	cas -- should be made disposable!				*
 10600                                  ;*									*
 10601                                  ;************************************************************************
 10602                                  
 10603                                  	; 20/09/2023	
 10604                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10605                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 10606                                  
 10607                                  _seg_reinit:
 10608 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10609                                  					; at 2C7h:30h or 70h:25A0h
 10610                                  		;mov	di, (offset cdev+2)
 10611 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 10612                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 10613                                  		; 10/08/2023
 10614 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 10615                                  _seg_reinit_1:
 10616 0000003D AB                      		stosw			; modify Bios_Code entry points
 10617 0000003E 47                      		inc	di
 10618 0000003F 47                      		inc	di
 10619 00000040 E2FB                    		loop	_seg_reinit_1
 10620                                  		; 10/08/2023 (PCDOS 7.1)
 10621                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 10622                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 10623 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 10624                                  
 10625 00000046 CB                      		retf
 10626                                  
 10627                                  ; ---------------------------------------------------------------------------
 10628                                  
 10629                                  ; 15/10/2022
 10630                                  
 10631                                  ;************************************************************************
 10632                                  ;*									*
 10633                                  ;*	chardev_entry - main device driver dispatch routine		*
 10634                                  ;*	   called with a dummy parameter block on the stack		*
 10635                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 10636                                  ;*									*
 10637                                  ;*	will eventually take care of doing the transitions in		*
 10638                                  ;*	   out of Bios_Code						*
 10639                                  ;*									*
 10640                                  ;************************************************************************
 10641                                  
 10642                                  		; 20/09/2023
 10643                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 10644 00000047 56                      		push	si
 10645 00000048 50                      		push	ax
 10646 00000049 51                      		push	cx
 10647 0000004A 52                      		push	dx
 10648 0000004B 57                      		push	di
 10649 0000004C 55                      		push	bp
 10650 0000004D 1E                      		push	ds
 10651 0000004E 06                      		push	es
 10652 0000004F 53                      		push	bx
 10653 00000050 89E5                    		mov	bp, sp
 10654 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 10655                                  		;;mov	ds, word [cs:0030h]
 10656                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10657 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10658                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 10659 0000005A C434                    		les	si, [si]
 10660                                  		;mov	ax, [si+2]	; get the device number	if present
 10661 0000005C 8CC0                    		mov	ax, es
 10662 0000005E A2[2100]                		mov	[auxnum], al
 10663 00000061 8826[8004]              		mov	[printdev], ah
 10664                                  		;mov	si, [si]	; point	to the device dispatch table
 10665 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 10666 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 10667 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 10668 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 10669 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 10670                                  		; 17/10/2022
 10671 00000079 81FE[6F05]              		cmp	si, DSKTBL
 10672                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 10673                                  		;cmp	si, 4A2h	; dsktbl
 10674                                  					; at 2C7h:4A2h = 70h:2A12h
 10675 0000007D 7517                    		jnz	short no_sector32_mapping
 10676                                  
 10677                                  ; Special case for 32-bit start sector number:
 10678                                  ;   if (si==dsktbl) /* if this is a disk device call */
 10679                                  ;      set high 16 bits of secnum to 0
 10680                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 10681                                  ;
 10682                                  ; pass high word of sector number in start_sec_h, low word in dx
 10683                                  ;
 10684                                  ; note: start_l and start_h are the offsets within the io_request packet
 10685                                  ;	  which contain the low and hi words of the 32 bit start sector if
 10686                                  ;	  it has been used.
 10687                                  ;
 10688                                  ; note: remember not to destroy the registers which have been set up before
 10689                                  
 10690                                  		; 20/09/2023
 10691                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 10692 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 10693 00000085 83FAFF                  		cmp	dx, 0FFFFh
 10694 00000088 750C                    		jnz	short no_sector32_mapping
 10695 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 10696                                  					; 32 bits dsk req
 10697                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 10698 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 10699 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 10700                                  					; dx = packet.start_l
 10701                                  no_sector32_mapping:
 10702 00000096 97                      		xchg	ax, di
 10703 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 10704 0000009B 2E3A04                  		cmp	al, [cs:si]
 10705 0000009E 732B                    		jnb	short command_error
 10706 000000A0 98                      		cbw			; note that al <= 15 means ok
 10707 000000A1 D1E0                    		shl	ax, 1
 10708 000000A3 01C6                    		add	si, ax
 10709 000000A5 97                      		xchg	ax, di
 10710 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 10711 000000AA FC                      		cld
 10712                                  		; 17/10/2022
 10713 000000AB 2EFF5401                		call	near [cs:si+1]
 10714                                  		;call	word ptr cs:si+1
 10715 000000AF 7202                    		jb	short already_got_ah_status
 10716 000000B1 B401                    		mov	ah, 1
 10717                                  already_got_ah_status:
 10718                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 10719                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10720                                  					; cas note: shouldn't be needed!
 10721 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10722                                  		;lds	bx, ds:ptrsav
 10723 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 10724 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 10725                                  					; mark operation complete
 10726 000000BF 5B                      		pop	bx
 10727 000000C0 07                      		pop	es
 10728 000000C1 1F                      		pop	ds
 10729 000000C2 5D                      		pop	bp
 10730 000000C3 5F                      		pop	di
 10731 000000C4 5A                      		pop	dx
 10732 000000C5 59                      		pop	cx
 10733 000000C6 58                      		pop	ax
 10734 000000C7 5E                      		pop	si
 10735                                  		;add	sp, 2		; get rid of fake return address
 10736                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 10737 000000C8 44                      		inc	sp
 10738 000000C9 44                      		inc	sp	
 10739                                  
 10740                                  		; fall through into bc_retf
 10741                                  ; ---------------------------------------------------------------------------	
 10742                                  bc_retf:
 10743 000000CA CB                      		retf
 10744                                  ; ---------------------------------------------------------------------------
 10745                                  
 10746                                  command_error:				
 10747 000000CB E80700                  		call	bc_cmderr
 10748 000000CE EBE3                    		jmp	short already_got_ah_status
 10749                                  ; 15/10/2022
 10750                                  ; 01/05/2019
 10751                                  
 10752                                  ;----------------------------------------------------------------------------
 10753                                  ; The following piece of hack is for supporting CP/M compatibility
 10754                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 10755                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 10756                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 10757                                  ; high.
 10758                                  ;----------------------------------------------------------------------------
 10759                                  
 10760                                  		;db 7 dup(0)
 10761                                  
 10762                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 10763                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 10764                                  		; 15/10/2022
 10765                                  		;dw 0		; pad to bring offset to 0D0h
 10766                                  
 10767 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 10768                                  				;  which is the CP/M call 5 entry point
 10769                                  		
 10770                                  
 10771                                  ; ---------------------------------------------------------------------------
 10772                                  
 10773                                  ;	exit - all routines return through this path
 10774                                  
 10775                                  bc_cmderr:				
 10776 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 10777                                  					; unknown command error
 10778                                  
 10779                                  ; =============== S U B	R O U T	I N E =======================================
 10780                                  
 10781                                  ;	now zero the count field by subtracting its current value,
 10782                                  ;	  which is still in cx, from itself.
 10783                                  
 10784                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 10785                                  ;	  in order to return the number actually complete
 10786                                  
 10787                                  bc_err_cnt:	
 10788                                  		;les	bx, ds:ptrsav
 10789                                  		; 19/10/2022
 10790 000000D7 C41E[1200]              		les	bx, [ptrsav]
 10791 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 10792                                  					; # of successful i/o's
 10793 000000DF B481                    		mov	ah, 81h		; mark error return
 10794 000000E1 F9                      		stc			; indicate abnormal end
 10795 000000E2 C3                      		retn
 10796                                  
 10797                                  ; 15/10/2022
 10798                                  
 10799                                  ;Bios_Code ends
 10800                                  
 10801                                  ;----------------------------------------------------------------------------
 10802                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 10803                                  ;----------------------------------------------------------------------------
 10804                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10805                                  ; 10/01/2019 - Retro DOS v4.0
 10806                                  
 10807                                  ; 30/04/2019
 10808                                  
 10809                                  ;title	mschar - character and clock devices
 10810                                  
 10811                                  ;MODE_CTRLBRK	equ	0FFh
 10812                                  
 10813                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 10814                                  
 10815                                  ;************************************************************************
 10816                                  ;*									*
 10817                                  ;*	device driver dispatch tables					*
 10818                                  ;*									*
 10819                                  ;*	each table starts with a byte which lists the number of		*
 10820                                  ;*	legal functions, followed by that number of words. Each		*
 10821                                  ;*	word represents an offset of a routine in Bios_Code which	*
 10822                                  ;*	handles the function. The functions are terminated with		*
 10823                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 10824                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 10825                                  ;*	returned as abnormal completion status. Notice that ds		*
 10826                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 10827                                  ;*									*
 10828                                  ;************************************************************************
 10829                                  
 10830                                  		; 20/09/2023
 10831                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 10832                                  		; 13/12/2022
 10833 000000E3 00                      		db 0
 10834                                  
 10835                                  		; 13/12/2022
 10836 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 10837                                  					; 2C7h:0E4h = 70h:2654h
 10838 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 10839                                  					; 00 init
 10840 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 10841 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 10842 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 10843                                  					; 03
 10844 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 10845                                  					; 04
 10846 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 10847                                  					; 05
 10848 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 10849 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 10850                                  					; 07
 10851 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 10852                                  					; 08
 10853 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 10854 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 10855                                  con_table_end:
 10856 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 10857                                  					; 2C7h:0FBh = 70h:266Bh
 10858 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 10859 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10860 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10861 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 10862 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 10863                                  					; 04 indicate zero chars read
 10864 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10865                                  					; 05 read non-destructive
 10866 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10867 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10868 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 10869 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 10870 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 10871 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 10872 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 10873 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 10874 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 10875 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 10876 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 10877 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 10878 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 10879 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 10880 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 10881 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 10882 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 10883 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 10884 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 10885 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 10886                                  prn_table_end:
 10887 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 10888                                  					; 2C7h:130h = 70h:26A0h
 10889 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 10890 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10891 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10892 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10893 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 10894 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 10895 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10896 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 10897 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 10898 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 10899 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 10900                                  aux_table_end:
 10901 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 10902                                  					; 2C7h:147h = 70h:26B7h
 10903 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 10904 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10905 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10906 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10907 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 10908 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10909 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10910 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10911 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 10912 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 10913                                  tim_table_end:
 10914                                  
 10915                                  ; ---------------------------------------------------------------------------
 10916                                  
 10917                                  ;************************************************************************
 10918                                  ;*									*
 10919                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 10920                                  ;*									*
 10921                                  ;************************************************************************
 10922                                  
 10923                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 10924                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 10925 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 10926                                  con_loop:				
 10927 0000015E E80500                  		call	chrin		; get char in al
 10928 00000161 AA                      		stosb			; store	char at	es:di
 10929 00000162 E2FA                    		loop	con_loop
 10930                                  con_exit:				
 10931 00000164 F8                      		clc
 10932 00000165 C3                      		retn
 10933                                  
 10934                                  ; =============== S U B	R O U T	I N E =======================================
 10935                                  
 10936                                  ;************************************************************************
 10937                                  ;*									*
 10938                                  ;*	chrin - input single char from keyboard into al			*
 10939                                  ;*									*
 10940                                  ;*	  we are going to issue extended keyboard function, if		*
 10941                                  ;*	  supported. the returning value of the extended keystroke	*
 10942                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 10943                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 10944                                  ;*	  this creates a conflict when the user entered real		*
 10945                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 10946                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 10947                                  ;*	  in the following manner:					*
 10948                                  ;*									*
 10949                                  ;*	      ah = 16h							*
 10950                                  ;*	      int 16h							*
 10951                                  ;*	      if al == 0, then extended code (in ah)			*
 10952                                  ;*	      else if al == 0E0h, then					*
 10953                                  ;*	      if ah <> 0, then extended code (in ah)			*
 10954                                  ;*		else greek_alpha character.				*
 10955                                  ;*									*
 10956                                  ;*	also, for compatibility reason, if an extended code is		*
 10957                                  ;*	  detected, then we are going to change the value in al		*
 10958                                  ;*	  from 0E0h to 00h.						*
 10959                                  ;*									*
 10960                                  ;************************************************************************
 10961                                  
 10962                                  		; 19/10/2022
 10963                                  chrin:		
 10964 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 10965 0000016A 30C0                    		xor	al, al
 10966 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 10967 00000170 08C0                    		or	al, al
 10968 00000172 752A                    		jnz	short keyret
 10969 00000174 CD16                    		int	16h		; KEYBOARD -
 10970 00000176 09C0                    		or	ax, ax
 10971 00000178 74EC                    		jz	short chrin
 10972 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 10973 0000017D 7504                    		jnz	short alt_ext_chk
 10974 0000017F B010                    		mov	al, 10h
 10975 00000181 EB1B                    		jmp	short keyret
 10976                                  ; ---------------------------------------------------------------------------
 10977                                  
 10978                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 10979                                  ;    if character read was 0E0h then
 10980                                  ;      if extended byte was zero (i.e. ah == 0) then
 10981                                  ;	 goto keyret
 10982                                  ;      else
 10983                                  ;	 set al to zero
 10984                                  ;	 goto alt_save
 10985                                  ;      endif
 10986                                  ;    endif
 10987                                  ;  endif
 10988                                  
 10989                                  alt_ext_chk:
 10990 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 10991 00000188 740C                    		jz	short not_ext
 10992 0000018A 3CE0                    		cmp	al, 0E0h
 10993 0000018C 7508                    		jnz	short not_ext
 10994 0000018E 08E4                    		or	ah, ah
 10995 00000190 740C                    		jz	short keyret
 10996 00000192 30C0                    		xor	al, al
 10997 00000194 EB04                    		jmp	short alt_save
 10998                                  ; ---------------------------------------------------------------------------
 10999                                  
 11000                                  not_ext:				
 11001 00000196 08C0                    		or	al, al		; special case?
 11002 00000198 7504                    		jnz	short keyret
 11003                                  alt_save:				
 11004 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 11005                                  keyret:					
 11006 0000019E C3                      		retn
 11007                                  
 11008                                  ; ---------------------------------------------------------------------------
 11009                                  
 11010                                  ;************************************************************************
 11011                                  ;*									*
 11012                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 11013                                  ;*									*
 11014                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 11015                                  ;*	in the status word of the request packet, and there is no	*
 11016                                  ;*	character in the input buffer, the driver issues a system	*
 11017                                  ;*	wait request to the rom. on return from the rom, it returns	*
 11018                                  ;*	a 'char-not-found' to the dos.					*
 11019                                  ;*									*
 11020                                  ;************************************************************************
 11021                                  
 11022                                  		; 19/10/2022
 11023                                  con_rdnd:				
 11024 0000019F A0[0C00]                		mov	al, [altah]
 11025 000001A2 08C0                    		or	al, al
 11026 000001A4 754C                    		jnz	short rdexit
 11027 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 11028 000001AA CD16                    		int	16h		; KEYBOARD -
 11029 000001AC 751D                    		jnz	short gotchr
 11030 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 11031 000001B3 7412                    		jz	short z_bus_exit
 11032 000001B5 C41E[1200]              		les	bx, [ptrsav]
 11033                                  		; 12/12/2022
 11034 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 11035                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 11036 000001BE 7407                    		jz	short z_bus_exit
 11037 000001C0 B80041                  		mov	ax, 4100h
 11038 000001C3 30DB                    		xor	bl, bl
 11039 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 11040                                  					; AL = condition type, BH = condition compare or mask value
 11041                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 11042                                  					; DX = I/O port	address	if AL bit 4 set
 11043                                  z_bus_exit:				
 11044 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 11045 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 11046 000001CA C3                      		retn
 11047                                  ; ---------------------------------------------------------------------------
 11048                                  
 11049                                  gotchr:					
 11050 000001CB 09C0                    		or	ax, ax
 11051 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 11052 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 11053 000001D3 CD16                    		int	16h		; KEYBOARD -
 11054 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 11055                                  ; ---------------------------------------------------------------------------
 11056                                  
 11057                                  notbrk:					
 11058 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 11059 000001DA 7504                    		jnz	short rd_ext_chk
 11060 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 11061 000001DE EB12                    		jmp	short rdexit
 11062                                  ; ---------------------------------------------------------------------------
 11063                                  
 11064                                  rd_ext_chk:				
 11065 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 11066 000001E5 740B                    		jz	short rdexit
 11067 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 11068 000001E9 7507                    		jnz	short rdexit
 11069 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 11070 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 11071 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 11072                                  					; change it for	compatibility
 11073                                  rdexit:					
 11074 000001F2 C41E[1200]              		les	bx, [ptrsav]
 11075 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 11076                                  					; return keyboard character here
 11077                                  bc_exvec:				
 11078 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 11079                                  					; indicate normal termination
 11080 000001FB C3                      		retn
 11081                                  ; ---------------------------------------------------------------------------
 11082                                  
 11083                                  ;************************************************************************
 11084                                  ;*									*
 11085                                  ;*	con_write - console write routine				*
 11086                                  ;*									*
 11087                                  ;*	entry:	es:di -> buffer						*
 11088                                  ;*		cx    =  count						*
 11089                                  ;*									*
 11090                                  ;************************************************************************
 11091                                  
 11092                                  con_writ:
 11093                                  		;jcxz	short bc_exvec
 11094 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 11095                                  		; 12/12/2022
 11096                                  		;jcxz	cc_ret
 11097                                  con_lp:					
 11098 000001FE 268A05                  		mov	al, [es:di]
 11099 00000201 47                      		inc	di
 11100 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 11101                                  					; AL = character to display
 11102 00000204 E2F8                    		loop	con_lp
 11103                                  cc_ret:					
 11104 00000206 F8                      		clc
 11105 00000207 C3                      		retn
 11106                                  
 11107                                  ; =============== S U B	R O U T	I N E =======================================
 11108                                  
 11109                                  ;************************************************************************
 11110                                  ;*									*
 11111                                  ;*	con_flush - flush out keyboard queue				*
 11112                                  ;*									*
 11113                                  ;************************************************************************
 11114                                  
 11115                                  con_flush:
 11116 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 11117                                  flloop:					; while	(charavail()) charread();	
 11118 0000020D B401                    		mov	ah, 1
 11119 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 11120                                  					; Return: ZF clear if character	in buffer
 11121                                  					; AH = scan code, AL = character
 11122                                  					; ZF set if no character in buffer
 11123 00000211 74F3                    		jz	short cc_ret
 11124 00000213 30E4                    		xor	ah, ah
 11125 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 11126                                  					; Return: AH = scan code, AL = character
 11127 00000217 EBF4                    		jmp	short flloop
 11128                                  
 11129                                  ; ---------------------------------------------------------------------------
 11130                                  
 11131                                  ; 15/10/2022
 11132                                  
 11133                                  ;************************************************************************
 11134                                  ;*									*
 11135                                  ;*	some equates for rom bios printer i/o				*
 11136                                  ;*									*
 11137                                  ;************************************************************************
 11138                                  
 11139                                  ; ibm rom status bits (i don't trust them, neither should you)
 11140                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 11141                                  ; whole slew of bits, only one of which is correct.
 11142                                  
 11143                                  ;notbusystatus	equ 10000000b		; not busy
 11144                                  ;nopaperstatus	equ 00100000b		; no more paper
 11145                                  ;prnselected	equ 00010000b		; printer selected
 11146                                  ;ioerrstatus	equ 00001000b		; some kinda error
 11147                                  ;timeoutstatus	equ 00000001b		; time out.
 11148                                  ;
 11149                                  ;noprinter	equ 00110000b		; no printer attached
 11150                                  
 11151                                  ; 18/03/2019 - Retro DOS v4.0
 11152                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 11153                                  
 11154                                  ; ---------------------------------------------------------------------------
 11155                                  
 11156                                  ;************************************************************************
 11157                                  ;*									*
 11158                                  ;*	prn_input - return with no error but zero chars read		*
 11159                                  ;*									*
 11160                                  ;*	enter with cx = number of characters requested			*
 11161                                  ;*									*
 11162                                  ;************************************************************************
 11163                                  
 11164                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 11165 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 11166                                  					; (sub reqpkt.count,cx)
 11167                                  		; 12/12/2022
 11168                                  prn_done:
 11169 0000021C F8                      		clc			; but return with carry	reset for no error
 11170 0000021D C3                      		retn
 11171                                  ; ---------------------------------------------------------------------------
 11172                                  
 11173                                  ;************************************************************************
 11174                                  ;*									*
 11175                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 11176                                  ;*									*
 11177                                  ;*	auxnum has printer number					*
 11178                                  ;*									*
 11179                                  ;************************************************************************
 11180                                  
 11181                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 11182                                  		;jcxz	short prn_done	; no chars to output
 11183 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 11184                                  prn_loop:				
 11185 00000220 BB0200                  		mov	bx, 2		; retry	count
 11186                                  prn_out:				
 11187 00000223 E83600                  		call	prnstat		; get status
 11188 00000226 751D                    		jnz	short TestPrnError
 11189 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 11190 0000022B 30E4                    		xor	ah, ah
 11191 0000022D E82E00                  		call	prnop		; print	to printer
 11192 00000230 7419                    		jz	short prn_con	; no error - continue
 11193 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 11194 00000235 7509                    		jnz	short _prnwf
 11195 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 11196 00000239 C606[0C00]00            		mov	byte [altah], 0
 11197 0000023E EB08                    		jmp	short pmessg
 11198                                  ; ---------------------------------------------------------------------------
 11199                                  
 11200                                  _prnwf:					
 11201 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 11202 00000243 7406                    		jz	short prn_con
 11203                                  TestPrnError:				
 11204 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 11205 00000246 75DB                    		jnz	short prn_out
 11206                                  pmessg:					
 11207 00000248 E98CFE                  		jmp	bc_err_cnt
 11208                                  ; ---------------------------------------------------------------------------
 11209                                  
 11210                                  prn_con:				
 11211 0000024B 47                      		inc	di		; point	to next	char and continue
 11212 0000024C E2D2                    		loop	prn_loop
 11213                                  ;prn_done:				
 11214                                  		; 12/12/2022
 11215                                  prn_done2:
 11216                                  		;clc
 11217                                  		; cf=0
 11218 0000024E C3                      		retn
 11219                                  ; ---------------------------------------------------------------------------
 11220                                  
 11221                                  ;************************************************************************
 11222                                  ;*									*
 11223                                  ;*	prn_stat - device driver entry to return printer status		*
 11224                                  ;*									*
 11225                                  ;************************************************************************
 11226                                  
 11227                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 11228 0000024F E80A00                  		call	prnstat		; device in dx
 11229 00000252 75F4                    		jnz	short pmessg
 11230 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 11231                                  		;jnz	short prn_done
 11232                                  		; 12/12/2022
 11233 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 11234 00000259 E96BFF                  		jmp	z_bus_exit
 11235                                  ; ---------------------------------------------------------------------------
 11236                                  
 11237                                  ;************************************************************************
 11238                                  ;*									*
 11239                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 11240                                  ;*		 printer status. Return meaningful error code		*
 11241                                  ;*									*
 11242                                  ;************************************************************************
 11243                                  
 11244                                  prnstat:				
 11245 0000025C B402                    		mov	ah, 2		; set command for get status
 11246                                  					; PRINTER - GET	STATUS
 11247                                  					; DX = printer port (0-3)
 11248                                  					; Return: AH = status
 11249                                  
 11250                                  ; =============== S U B	R O U T	I N E =======================================
 11251                                  
 11252                                  ;************************************************************************
 11253                                  ;*									*
 11254                                  ;*	prnop - call ROM BIOS printer function in ah			*
 11255                                  ;*		return zero true if no error				*
 11256                                  ;*		return zero false if error, al = error code		*
 11257                                  ;*									*
 11258                                  ;************************************************************************
 11259                                  
 11260                                  prnop:
 11261                                  		; 20/12/2023 - Retro DOS v5.0
 11262                                  		; PCDOS 7.1 IBMBIO.COM
 11263                                  		
 11264                                  		;mov	dx, [auxnum]	; get printer number
 11265                                  		;int	17h
 11266                                  
 11267 0000025E 1E                      		push	ds
 11268 0000025F FF36[2100]              		push	word [auxnum]
 11269 00000263 31D2                    		xor	dx, dx ; 0
 11270 00000265 8EDA                    		mov	ds, dx
 11271 00000267 5A                      		pop	dx
 11272 00000268 9C                      		pushf			; simulate int 17h
 11273 00000269 FA                      		cli
 11274                                  		;call	dword ptr ds:5ghghCh
 11275 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 11276 0000026E 1F                      		pop	ds
 11277                                  
 11278                                  	; This check was added to see if this is a case of no
 11279                                  	; printer being installed. This tests checks to be sure
 11280                                  	; the error is noprinter (30h)
 11281                                  
 11282 0000026F 50                      		push	ax
 11283 00000270 80E430                  		and	ah, 30h
 11284 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 11285 00000276 58                      		pop	ax
 11286 00000277 7506                    		jnz	short NextTest
 11287 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 11288 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 11289                                  
 11290                                  ; examine the status bits to see if an error occurred. unfortunately, several
 11291                                  ; of the bits are set so we have to pick and choose. we must be extremely
 11292                                  ; careful about breaking basic.
 11293                                  
 11294                                  NextTest:				
 11295 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 11296                                  					; i/o error?
 11297 00000282 740A                    		jz	short checknotready ; no, try not ready
 11298                                  
 11299                                  ; at this point, we know we have an error. the converse is not true
 11300                                  
 11301 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 11302                                  					; first, assume	out of paper
 11303 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 11304 00000289 7502                    		jnz	short ret1	; yes, error is	set
 11305 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 11306                                  ret1:					
 11307 0000028D C3                      		retn
 11308                                  ; ---------------------------------------------------------------------------
 11309                                  
 11310                                  checknotready:				
 11311 0000028E B002                    		mov	al, 2		; assume not-ready
 11312 00000290 F6C401                  		test	ah, 1
 11313 00000293 C3                      		retn
 11314                                  
 11315                                  ; ---------------------------------------------------------------------------
 11316                                  
 11317                                  ;************************************************************************
 11318                                  ;*									*
 11319                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 11320                                  ;*		     this entry point should never block waiting for	*
 11321                                  ;*		     device to come ready.				*
 11322                                  ;*									*
 11323                                  ;*	inputs:	cx = count, es:di -> buffer				*
 11324                                  ;*	outputs: set the number of bytes transferred in the		*
 11325                                  ;*		 device driver request packet				*
 11326                                  ;*									*
 11327                                  ;************************************************************************
 11328                                  
 11329                                  		; 19/10/2022
 11330                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 11331 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 11332                                  prn_tilbloop:				
 11333 00000296 51                      		push	cx
 11334 00000297 53                      		push	bx
 11335 00000298 30FF                    		xor	bh, bh
 11336 0000029A 8A1E[8004]              		mov	bl, [printdev]
 11337 0000029E D1E3                    		shl	bx, 1
 11338                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 11339 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11340 000002A4 5B                      		pop	bx
 11341                                  prn_getstat:				
 11342 000002A5 E8B4FF                  		call	prnstat		; get status
 11343 000002A8 7514                    		jnz	short prn_bperr	; error
 11344 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 11345 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 11346 000002AF 59                      		pop	cx		; get original count
 11347 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 11348 000002B2 26                      		es
 11349 000002B3 AC                      		lodsb
 11350                                  		;lods	byte ptr es:[si] ; es
 11351                                  					; lodsb
 11352 000002B4 30E4                    		xor	ah, ah
 11353 000002B6 E8A5FF                  		call	prnop
 11354 000002B9 7504                    		jnz	short prn_berr	; error
 11355 000002BB E2D9                    		loop	prn_tilbloop
 11356                                  		; 12/12/2022
 11357                                  		; cf=0 (prnop)
 11358                                  		;clc			; normal no-error return
 11359 000002BD C3                      		retn			;   from device driver
 11360                                  
 11361                                  ; ---------------------------------------------------------------------------
 11362                                  
 11363                                  prn_bperr:				
 11364 000002BE 59                      		pop	cx		; restore transfer count from stack
 11365                                  prn_berr:				
 11366 000002BF E915FE                  		jmp	bc_err_cnt
 11367                                  ; ---------------------------------------------------------------------------
 11368                                  
 11369                                  ; 15/10/2022
 11370                                  
 11371                                  ;************************************************************************
 11372                                  ;*									*
 11373                                  ;*	prn_genioctl - get/set printer retry count			*
 11374                                  ;*									*
 11375                                  ;************************************************************************
 11376                                  
 11377                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 11378                                  ; 11/01/2019
 11379                                  
 11380                                  ;********************************;*
 11381                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 11382                                  ;********************************;*
 11383                                  
 11384                                  ;;RAWIO SUB-FUNCTIONS
 11385                                  ;;get_retry_count equ 65h
 11386                                  ;;set_retry_count equ 45h
 11387                                  
 11388                                  ;;struc A_RETRYCOUNT
 11389                                  ;;.rc_count: resw 1
 11390                                  ;;endstruc
 11391                                  
 11392                                  ;ioc_pc equ 5
 11393                                  
 11394                                  ; ---------------------------------------------------------------------------
 11395                                  
 11396                                  		; 19/10/2022
 11397                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 11398 000002C2 C43E[1200]              		les	di, [ptrsav]
 11399 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11400                                  					; ioc_pc
 11401 000002CB 7403                    		jz	short prnfunc_ok
 11402                                  
 11403                                  prnfuncerr:				
 11404 000002CD E905FE                  		jmp	bc_cmderr
 11405                                  ; ---------------------------------------------------------------------------
 11406                                  
 11407                                  prnfunc_ok:				
 11408 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11409 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 11410 000002D8 30FF                    		xor	bh, bh
 11411                                  		;mov	bl, ds:printdev	; get index into retry counts
 11412 000002DA 8A1E[8004]              		mov	bl, [printdev]
 11413 000002DE D1E3                    		shl	bx, 1
 11414                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 11415 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11416 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 11417 000002E6 7407                    		jz	short prngetcount
 11418 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 11419 000002EA 75E1                    		jnz	short prnfuncerr
 11420 000002EC 268B0D                  		mov	cx, [es:di]
 11421                                  prngetcount:				
 11422                                  		;mov	ds:wait_count[bx], cx
 11423 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 11424 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 11425                                  					; return current retry count
 11426                                  		; 12/12/2022
 11427                                  		; cf=0
 11428                                  		;clc
 11429 000002F6 C3                      		retn
 11430                                  ; ---------------------------------------------------------------------------
 11431                                  
 11432                                  ;************************************************************************
 11433                                  ;*									*
 11434                                  ;*  prn_ioctl_query							*
 11435                                  ;*									*
 11436                                  ;*  Added for 5.00							*
 11437                                  ;************************************************************************
 11438                                  
 11439                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 11440 000002F7 C43E[1200]              		les	di, [ptrsav]
 11441 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11442                                  					; ioc_pc
 11443 00000300 750D                    		jnz	short prn_query_err
 11444 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11445 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 11446 00000308 7404                    		jz	short IOCtlSupported
 11447 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 11448 0000030C 7501                    		jnz	short prn_query_err
 11449                                  IOCtlSupported:	
 11450                                  		; 12/12/2022
 11451                                  		; cf=0		
 11452                                  		;clc
 11453 0000030E C3                      		retn
 11454                                  ; ---------------------------------------------------------------------------
 11455                                  
 11456                                  prn_query_err:
 11457                                  		; 12/12/2022				
 11458                                  		;stc
 11459 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 11460                                  ; ---------------------------------------------------------------------------
 11461                                  
 11462                                  ;************************************************************************
 11463                                  ;*									*
 11464                                  ;*	aux port driver code -- "aux" == "com1"				*
 11465                                  ;*									*
 11466                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 11467                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 11468                                  ;*									*
 11469                                  ;************************************************************************
 11470                                  
 11471                                  ;	values in ah, requesting function of int 14h in rom bios
 11472                                  
 11473                                  ;auxfunc_send	 equ	1	;transmit
 11474                                  ;auxfunc_receive equ	2	;read
 11475                                  ;auxfunc_status	 equ	3	;request status
 11476                                  
 11477                                  ;	error flags, reported by int 14h, reported in ah:
 11478                                  
 11479                                  ;flag_data_ready equ	01h	;data ready
 11480                                  ;flag_overrun	 equ	02h	;overrun error
 11481                                  ;flag_parity	 equ	04h	;parity error
 11482                                  ;flag_frame	 equ	08h	;framing error
 11483                                  ;flag_break	 equ	10h	;break detect
 11484                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 11485                                  ;flag_timeout	 equ	80h	;timeout
 11486                                  
 11487                                  ;	these flags reported in al:
 11488                                  
 11489                                  ;flag_cts	 equ	10h	;clear to send
 11490                                  ;flag_dsr	 equ	20h	;data set ready
 11491                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 11492                                  
 11493                                  ; ---------------------------------------------------------------------------
 11494                                  
 11495                                  ;************************************************************************
 11496                                  ;*									*
 11497                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 11498                                  ;*		   at es:di						*
 11499                                  ;*									*
 11500                                  ;************************************************************************
 11501                                  
 11502                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 11503                                  		;jcxz	short exvec2
 11504 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 11505 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 11506 00000317 30C0                    		xor	al, al
 11507 00000319 8607                    		xchg	al, [bx]
 11508 0000031B 08C0                    		or	al, al
 11509 0000031D 7503                    		jnz	short aux2
 11510                                  aux1:					
 11511 0000031F E80500                  		call	auxin		; get character	from port
 11512                                  					; won't return if error
 11513                                  aux2:					
 11514 00000322 AA                      		stosb
 11515 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 11516                                  exvec2:					
 11517 00000325 F8                      		clc			; all done, successful exit
 11518                                  auxin_retn:	; 18/12/2022
 11519 00000326 C3                      		retn
 11520                                  ; ---------------------------------------------------------------------------
 11521                                  
 11522                                  ;************************************************************************
 11523                                  ;*									*
 11524                                  ;*	auxin - call rom bios to read character from aux port		*
 11525                                  ;*		if error occurs, map the error and return one		*
 11526                                  ;*		level up to device driver exit code, setting		*
 11527                                  ;*		the number of bytes transferred appropriately		*
 11528                                  ;*									*
 11529                                  ;************************************************************************
 11530                                  
 11531                                  auxin:					
 11532 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 11533 00000329 E83A00                  		call	auxop
 11534 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 11535                                  		;jnz	short arbad	; skip if any error bits set
 11536                                  		;retn
 11537                                  		; 25/06/2023 (BugFix)
 11538 0000032F 74F5                    		jz	short auxin_retn
 11539                                  ; ---------------------------------------------------------------------------
 11540                                  
 11541                                  arbad:					
 11542 00000331 58                      		pop	ax		; remove return	address	(near call)
 11543                                  		;xor	al, al
 11544                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 11545                                  		; 11/08/2023
 11546 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 11547 00000334 E9A0FD                  		jmp	bc_err_cnt
 11548                                  
 11549                                  ; ---------------------------------------------------------------------------
 11550                                  
 11551                                  ;************************************************************************
 11552                                  ;*									*
 11553                                  ;*	aux_rdnd - non-destructive aux port read			*
 11554                                  ;*									*
 11555                                  ;************************************************************************
 11556                                  
 11557                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 11558 00000337 E85D00                  		call	getbx
 11559 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 11560 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 11561 0000033E 7511                    		jnz	short auxdrx	; then return character
 11562 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 11563 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 11564 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 11565 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 11566 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 11567 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 11568 0000034F 8807                    		mov	[bx], al
 11569                                  auxdrx:					
 11570 00000351 E99EFE                  		jmp	rdexit		; return busy status
 11571                                  ; ---------------------------------------------------------------------------
 11572                                  
 11573                                  auxbus:					
 11574 00000354 E970FE                  		jmp	z_bus_exit
 11575                                  ; ---------------------------------------------------------------------------
 11576                                  
 11577                                  ;************************************************************************
 11578                                  ;*									*
 11579                                  ;*	aux_wrst - return aux port write status				*
 11580                                  ;*									*
 11581                                  ;************************************************************************
 11582                                  
 11583                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 11584 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 11585 0000035A A820                    		test	al, 20h		; test data set	ready
 11586 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 11587 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 11588 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 11589                                  		; 12/12/2022
 11590                                  		; cf=0	; (test instruction resets cf)
 11591                                  		;clc
 11592 00000363 C3                      		retn
 11593                                  ; ---------------------------------------------------------------------------
 11594                                  
 11595                                  ;************************************************************************
 11596                                  ;*									*
 11597                                  ;*	auxstat - call rom bios to determine aux port status		*
 11598                                  ;*									*
 11599                                  ;*	exit:	ax = status						*
 11600                                  ;*		dx = [auxnum]						*
 11601                                  ;*									*
 11602                                  ;************************************************************************
 11603                                  
 11604                                  auxstat:				
 11605 00000364 B403                    		mov	ah, 3		; auxfunc_status
 11606                                  
 11607                                  		; fall into auxop
 11608                                  
 11609                                  ; =============== S U B	R O U T	I N E =======================================
 11610                                  
 11611                                  ;************************************************************************
 11612                                  ;*									*
 11613                                  ;*	auxop - perform rom-biox aux port interrupt			*
 11614                                  ;*									*
 11615                                  ;*	entry:	ah = int 14h function number				*
 11616                                  ;*	exit:	ax = results						*
 11617                                  ;*		dx = [auxnum]						*
 11618                                  ;*									*
 11619                                  ;************************************************************************
 11620                                  
 11621                                  auxop:		; proc near
 11622                                  		; 20/12/2023 - Retro DOS v5.0
 11623                                  		;mov	dx, [auxnum]	; ah=function code
 11624                                  		;			; 0=init, 1=send, 2=receive, 3=status
 11625                                  		;			; get port number
 11626                                  		;
 11627                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 11628                                  		;			; DX = port number (0-3)
 11629                                  		;			; Return: AX = port status code
 11630                                  		; (PCDOS 7.1 IBMBIO.COM)
 11631 00000366 1E                      		push	ds
 11632 00000367 FF36[2100]              		push	word [auxnum]
 11633 0000036B 31D2                    		xor	dx, dx ; 0
 11634 0000036D 8EDA                    		mov	ds, dx
 11635 0000036F 5A                      		pop	dx
 11636 00000370 9C                      		pushf			; simulate INT 14h
 11637 00000371 FA                      		cli
 11638                                  		;call	dword ptr ds:50h
 11639 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 11640 00000376 1F                      		pop	ds
 11641 00000377 C3                      		retn
 11642                                  
 11643                                  ; ---------------------------------------------------------------------------
 11644                                  
 11645                                  ;************************************************************************
 11646                                  ;*									*
 11647                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 11648                                  ;*		   auxbuf [auxnum] to zero				*
 11649                                  ;*									*
 11650                                  ;*	cas - shouldn't this code call the rom bios input function	*
 11651                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 11652                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 11653                                  ;*	      which is providing interrupt-buffering of aux port?	*
 11654                                  ;*									*
 11655                                  ;************************************************************************
 11656                                  
 11657                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 11658 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 11659 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 11660                                  					; zero out buffer
 11661                                  		;clc			; all done, successful return
 11662                                  		; 12/12/2022
 11663                                  		; cf=0 ('add' instruction in 'getbx')
 11664 0000037E C3                      		retn
 11665                                  ; ---------------------------------------------------------------------------
 11666                                  
 11667                                  ;************************************************************************
 11668                                  ;*									*
 11669                                  ;*	aux_writ - write to aux device					*
 11670                                  ;*									*
 11671                                  ;************************************************************************
 11672                                  
 11673                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 11674                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 11675 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 11676                                  aux_loop:				
 11677 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 11678                                  					; move di pointer to next character
 11679 00000384 47                      		inc	di
 11680 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 11681 00000387 E8DCFF                  		call	auxop		; send character over aux port
 11682 0000038A F6C480                  		test	ah, 80h		; check	for error
 11683 0000038D 7405                    		jz	short awok	; then no error
 11684 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 11685 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 11686                                  ; ---------------------------------------------------------------------------
 11687                                  
 11688                                  awok:					
 11689 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 11690                                  					; still	more character to print
 11691                                  		;clc			; all done, successful return
 11692                                  		; 12/12/2022
 11693                                  		; cf=0 (test instruction above)	
 11694 00000396 C3                      		retn
 11695                                  
 11696                                  ; =============== S U B	R O U T	I N E =======================================
 11697                                  
 11698                                  ;************************************************************************
 11699                                  ;*									*
 11700                                  ;*	getbx - return bx -> single byte input buffer for		*
 11701                                  ;*		selected aux port ([auxnum])				*
 11702                                  ;*									*
 11703                                  ;************************************************************************
 11704                                  
 11705                                  getbx:	
 11706 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 11707                                  					; for selected aux port	([auxnum])
 11708                                  		;add	bx, offset auxbuf
 11709 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 11710                                  		; 12/12/2022
 11711                                  		; cf=0 (if [auxnum] is valid number) 
 11712 0000039F C3                      		retn
 11713                                  
 11714                                  ; ---------------------------------------------------------------------------
 11715                                  
 11716                                  ; 15/10/2022
 11717                                  
 11718                                  ;----------------------------------------------------------------
 11719                                  ;								:
 11720                                  ;		    clock device driver 			:
 11721                                  ;								:
 11722                                  ;								:
 11723                                  ;   this file contains the clock device driver. 		:
 11724                                  ;								:
 11725                                  ;   the routines in this files are:				:
 11726                                  ;								:
 11727                                  ;	routine 		function			:
 11728                                  ;	------- 		--------			:
 11729                                  ;	tim_writ		set the current time		:
 11730                                  ;	tim_read		read the current time		:
 11731                                  ;	time_to_ticks		convert time to corresponding	:
 11732                                  ;				  number of clock ticks 	:
 11733                                  ;								:
 11734                                  ; the clock ticks at the rate of:				:
 11735                                  ;								:
 11736                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 11737                                  ; see each routine for information on the use.			:
 11738                                  ;								:
 11739                                  ;----------------------------------------------------------------
 11740                                  
 11741                                  ; convert time to ticks
 11742                                  ; input : time in cx and dx
 11743                                  ; ticks returned in cx:dx
 11744                                  
 11745                                  ;19/07/2019
 11746                                  ;09/03/2019
 11747                                  
 11748                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 11749                                  
 11750                                  ; first convert from hour,min,sec,hund. to
 11751                                  ; total number of 100th of seconds
 11752                                  
 11753 000003A0 B03C                    		mov	al, 60
 11754 000003A2 F6E5                    		mul	ch		; hours	to minutes
 11755 000003A4 B500                    		mov	ch, 0
 11756 000003A6 01C8                    		add	ax, cx		; total	minutes
 11757 000003A8 B97017                  		mov	cx, 6000	; 60*100
 11758 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 11759 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 11760 000003AF 89C1                    		mov	cx, ax
 11761 000003B1 B064                    		mov	al, 100
 11762 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 11763 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 11764 000003B7 83D200                  		adc	dx, 0		; ripple carry
 11765 000003BA B700                    		mov	bh, 0
 11766 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 11767 000003BE 83D200                  		adc	dx, 0
 11768                                  
 11769                                  	; dx:cx is time in 1/100 sec
 11770                                  
 11771 000003C1 92                      		xchg	ax, dx
 11772 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 11773 000003C3 BB0BE9                  		mov	bx, 59659
 11774 000003C6 F7E3                    		mul	bx		; multiply low half
 11775 000003C8 87CA                    		xchg	dx, cx
 11776 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 11777 000003CB F7E3                    		mul	bx		; multiply high	half
 11778 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 11779 000003CF 83D200                  		adc	dx, 0
 11780 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 11781 000003D3 BB0500                  		mov	bx, 5
 11782 000003D6 F6F3                    		div	bl		; divide high half by 5
 11783 000003D8 88C1                    		mov	cl, al
 11784 000003DA B500                    		mov	ch, 0
 11785 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 11786 000003DE 98                      		cbw
 11787 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 11788 000003E0 F7F3                    		div	bx		; divide low half by 5
 11789 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 11790 000003E4 CB                      		retf			; far return
 11791                                  
 11792                                  ; ---------------------------------------------------------------------------
 11793                                  
 11794                                  ; 17/10/2022
 11795                                  ; 15/10/2022
 11796                                  
 11797                                  ;--------------------------------------------------------------------
 11798                                  ;
 11799                                  ; tim_writ sets the current time
 11800                                  ;
 11801                                  ; on entry es:[di] has the current time:
 11802                                  ;
 11803                                  ;	number of days since 1-1-80	(word)
 11804                                  ;	minutes (0-59)			(byte)
 11805                                  ;	hours (0-23)			(byte)
 11806                                  ;	hundredths of seconds (0-99)	(byte)
 11807                                  ;	seconds (0-59)			(byte)
 11808                                  ;
 11809                                  ; each number has been checked for the correct range.
 11810                                  ;
 11811                                  ;	NOTE: Any changes in this routine probably require corresponding
 11812                                  ;	changes in the version that is built with the power manager driver.
 11813                                  ;	See ptime.asm.
 11814                                  ;
 11815                                  ;--------------------------------------------------------------------
 11816                                  
 11817                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11818                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 11819                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 11820 000003E5 268B05                  		mov	ax, [es:di]
 11821 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 11822                                  					; end to avoid tick windows.
 11823 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11824                                  		;cmp	ds:havecmosclock, 0
 11825 000003EE 7423                    		jz	short no_cmos_1
 11826 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 11827                                  					; get binary hours
 11828                                  					; convert to bcd
 11829                                  		;call	far [bintobcd]
 11830                                  		;;call	ds:bintobcd	; call far [bintobcd]
 11831                                  		; 08/08/2023
 11832 000003F4 E8E800                  		call	bintobcd
 11833 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 11834 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 11835                                  		;call	far [bintobcd]
 11836                                  		;;call	ds:bintobcd	; convert to bcd
 11837 000003FD E8DF00                  		call	bintobcd
 11838 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 11839 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 11840                                  		;call	far [bintobcd]
 11841                                  		;;call	ds:bintobcd
 11842 00000406 E8D600                  		call	bintobcd
 11843                                  
 11844 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 11845 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 11846 0000040D FA                      		cli
 11847 0000040E B403                    		mov	ah, 3
 11848 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11849                                  					; CH = hours in	BCD, CL	= minutes in BCD
 11850                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 11851                                  					; Return: CMOS clock set
 11852 00000412 FB                      		sti
 11853                                  no_cmos_1:				
 11854 00000413 268B4D02                		mov	cx, [es:di+2]
 11855 00000417 268B5504                		mov	dx, [es:di+4]
 11856                                  		; 17/10/2022
 11857 0000041B FF1E[0606]              		call	far [ttticks]
 11858                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 11859                                  					; convert time to ticks
 11860                                  					; cx:dx	now has	time in	ticks
 11861 0000041F FA                      		cli			; turn off timer
 11862 00000420 B401                    		mov	ah, 1
 11863 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 11864                                  					; CX:DX	= clock	count
 11865                                  					; Return: time of day set
 11866                                  		;pop	ds:daycnt
 11867 00000424 8F06[8904]              		pop	word [daycnt]
 11868 00000428 FB                      		sti
 11869                                  		;cmp	ds:havecmosclock, 0
 11870 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11871 0000042E 7409                    		jz	short no_cmos_2
 11872                                  
 11873                                  		; 08/08/2023
 11874                                  		;call	far [daycnttoday]
 11875                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 11876                                  					; convert to bcd format
 11877 00000430 E80700                  		call	daycnttoday
 11878                                  
 11879 00000433 FA                      		cli
 11880 00000434 B405                    		mov	ah, 5
 11881 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11882                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 11883                                  					; CH = century (19h or 20h)
 11884                                  					; Return: CMOS clock set
 11885 00000438 FB                      		sti
 11886                                  no_cmos_2:
 11887                                  		; 12/12/2022
 11888                                  		; cf=0
 11889                                  		;clc
 11890 00000439 C3                      		retn
 11891                                  
 11892                                  ; ---------------------------------------------------------------------------
 11893                                  
 11894                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11895                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 11896                                  %if 1 
 11897                                  
 11898                                  ; CMOS Clock setting support routines used by MSCLOCK.
 11899                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 11900                                  
 11901                                  daycnttoday:	; proc near
 11902                                  
 11903                                  ; entry: [daycnt] = number of days since 1-1-80
 11904                                  ;
 11905                                  ; return: ch - century in bcd
 11906                                  ;	  cl - year in bcd
 11907                                  ;	  dh - month in bcd
 11908                                  ;	  dl - day in bcd
 11909                                  
 11910                                  		; 20/12/2023 - Retro DOS v5.0
 11911                                  
 11912                                  		; 08/08/2023 (ds:) (near proc)
 11913                                  		; 16/10/2022 (cs:) (far proc)		
 11914 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 11915 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 11916                                  					; # days from 1-1-1980 to 1-1-2000
 11917 00000444 7308                    		jnb	short century20
 11918                                  		;mov	byte [base_century], 19
 11919                                  		;mov	byte [base_year], 80
 11920                                  		; 08/08/2023
 11921 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 11922 0000044C EB0C                    		jmp	short years
 11923                                  ; ----------------------------------------------------------------------------
 11924                                  		
 11925                                  century20:				
 11926                                  		;mov	byte [base_century], 20
 11927                                  		;mov	byte [base_year], 0
 11928                                  		; 08/08/2023
 11929 0000044E C706[8D04]1400          		mov	word [base_century], 20
 11930 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 11931                                  					; adjust daycnt
 11932                                  years:					
 11933 0000045A 31D2                    		xor	dx, dx
 11934 0000045C A1[8904]                		mov	ax, [daycnt]
 11935 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 11936                                  					; # of days in a Leap year block
 11937 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 11938 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 11939 00000468 B304                    		mov	bl, 4
 11940 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 11941 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 11942 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 11943                                  		; 08/08/2023
 11944 00000474 BB6E01                  		mov	bx, 366
 11945 00000477 B90300                  		mov	cx, 3
 11946                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 11947 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 11948 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 11949 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 11950                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 11951 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 11952                                  		;mov	cx, 3		; And next three years are normal
 11953                                  		; 08/08/2023
 11954 00000488 4B                      		dec	bx ; 365
 11955                                  regularyear:	; 20/12/2023
 11956                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 11957 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 11958 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 11959 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 11960                                  		;sub	word [daycnt], 365 ; }
 11961 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 11962 00000497 E2F0                    		loop	regularyear	; }
 11963                                  					;
 11964                                  					; should never fall through loop
 11965                                  leapyear:	
 11966 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 11967                                  		;mov	byte [month_tab+1], 29 ; leap year.
 11968                                  					; change month table.
 11969                                  yeardone:				
 11970 0000049E 31DB                    		xor	bx, bx
 11971 000004A0 31D2                    		xor	dx, dx
 11972 000004A2 A1[8904]                		mov	ax, [daycnt]
 11973                                  		;mov	si, offset month_tab
 11974 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 11975                                  		;mov	cx, 12
 11976                                  		; 08/08/2023
 11977 000004A8 B10C                    		mov	cl, 12
 11978                                  months:					
 11979 000004AA FEC3                    		inc	bl
 11980                                  		; 08/08/2023
 11981 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 11982 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 11983                                  					; dh=0
 11984 000004B0 7605                    		jbe	short month_done
 11985 000004B2 46                      		inc	si		; next month
 11986 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 11987 000004B5 E2F3                    		loop	months		;
 11988                                  					; should never fall through loop
 11989                                  month_done:	
 11990 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 11991                                  		;mov	byte [month_tab+1], 28
 11992                                  					; restore month table value
 11993 000004BC 88DA                    		mov	dl, bl
 11994 000004BE 8A36[8E04]              		mov	dh, [base_year]
 11995 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 11996 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 11997                                  					; dl = bcd day,	al = month
 11998 000004C9 86C2                    		xchg	dl, al
 11999 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 12000 000004CE 86C6                    		xchg	dh, al
 12001 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 12002 000004D3 86C1                    		xchg	cl, al
 12003 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 12004 000004D8 88C5                    		mov	ch, al
 12005 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 12006 000004DE C3                      		retn
 12007                                  
 12008                                  ;----------------------------------------------------------------------------
 12009                                  
 12010                                  bintobcd:	; proc near		; real time clock support
 12011                                  
 12012                                  ;convert a binary input in al (less than 63h or 99 decimal)
 12013                                  ;into a bcd value in al. ah destroyed.	
 12014                                  		
 12015 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 12016 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 12017                                  					; AL = (AH*10H)+AL, AH = 0
 12018 000004E3 C3                      		retn
 12019                                  %endif
 12020                                  
 12021                                  ;----------------------------------------------------------------------------
 12022                                  
 12023                                  ; 15/10/2022
 12024                                  
 12025                                  ;----------------------------------------------------------------------------
 12026                                  ; gettime reads date and time
 12027                                  ; and returns the following information:
 12028                                  ;
 12029                                  ;	es:[di]  =count of days since 1-1-80
 12030                                  ;	es:[di+2]=hours
 12031                                  ;	es:[di+3]=minutes
 12032                                  ;	es:[di+4]=seconds
 12033                                  ;	es:[di+5]=hundredths of seconds
 12034                                  ;
 12035                                  ;	NOTE: Any changes in this routine probably require corresponding
 12036                                  ;	changes in the version that is built with the power manager driver.
 12037                                  ;	See ptime.asm.
 12038                                  ;----------------------------------------------------------------------------
 12039                                  
 12040                                  tim_read:				; 2C7h:435h = 70h:29A5h
 12041 000004E4 E84A00                  		call	GetTickCnt
 12042 000004E7 8B36[8904]              		mov	si, [daycnt]
 12043                                  
 12044                                  ; we now need to convert the time in tick to the time in 100th of
 12045                                  ; seconds. the relation between tick and seconds is:
 12046                                  ;
 12047                                  ;		 65,536 seconds
 12048                                  ;	       ----------------
 12049                                  ;		1,193,180 tick
 12050                                  ;
 12051                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 12052                                  ;
 12053                                  ;	ticks from clock  * 65,536 * 100
 12054                                  ;      --------------------------------- = time in 100th of seconds
 12055                                  ;		1,193,180
 12056                                  ;
 12057                                  ; fortunately this formula simplifies to:
 12058                                  ;
 12059                                  ;	ticks from clock * 5 * 65,536
 12060                                  ;      --------------------------------- = time in 100th of seconds
 12061                                  ;		59,659
 12062                                  ;
 12063                                  ; the calculation is done by first multipling tick by 5. next we divide by
 12064                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 12065                                  ; my 16 bits to the left.
 12066                                  ;
 12067                                  ; start with ticks in cx:dx
 12068                                  ; multiply by 5
 12069                                  
 12070 000004EB 89C8                    		mov	ax, cx
 12071 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 12072                                  					; multiply by 5
 12073 000004EF D1E2                    		shl	dx, 1
 12074 000004F1 D1D1                    		rcl	cx, 1		; times	2
 12075 000004F3 D1E2                    		shl	dx, 1
 12076 000004F5 D1D1                    		rcl	cx, 1		; times	4
 12077 000004F7 01DA                    		add	dx, bx
 12078 000004F9 11C8                    		adc	ax, cx		; times	5
 12079 000004FB 92                      		xchg	ax, dx
 12080                                  
 12081                                  ; now have ticks * 5 in	dx:ax
 12082                                  ; we now need to multiply by 65536 and divide by 59659 d.
 12083                                  
 12084 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 12085 000004FF F7F1                    		div	cx		; dx now has remainder
 12086                                  					; ax has high word of final quotient
 12087                                  
 12088                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12089                                  		;mov	bx, ax		; put high word	in safe	place
 12090 00000501 93                      		xchg	bx, ax
 12091 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 12092 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 12093                                  
 12094                                  ; rounding based on the	remainder may be added here
 12095                                  ; the result in	bx:ax is time in 1/100 second.
 12096                                  
 12097 00000506 89DA                    		mov	dx, bx		
 12098 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 12099                                  
 12100                                  ; division by 200 is necessary to ensure no overflow--max result
 12101                                  ; is number of seconds in a day/2 = 43200.
 12102                                  
 12103 0000050B F7F1                    		div	cx
 12104 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 12105 00000510 7203                    		jb	short noadj
 12106 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 12107                                  noadj:					
 12108 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 12109 00000516 88D3                    		mov	bl, dl		; save 1/100's
 12110                                  
 12111                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 12112                                  ; by two, shifting a one in if the remainder had exceeded 100.
 12113                                  
 12114 00000518 D1D0                    		rcl	ax, 1		
 12115 0000051A B200                    		mov	dl, 0
 12116 0000051C D1D2                    		rcl	dx, 1
 12117                                  		;mov	cx, 60		; divide out seconds
 12118                                  		; 20/12/2023
 12119 0000051E B13C                    		mov	cl, 60
 12120 00000520 F7F1                    		div	cx
 12121 00000522 88D7                    		mov	bh, dl		; save the seconds
 12122 00000524 F6F1                    		div	cl		; break	into hours and minutes
 12123 00000526 86E0                    		xchg	al, ah
 12124                                  
 12125                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 12126                                  
 12127                                  		; 08/08/2023
 12128                                  		;push	ax
 12129                                  		;mov	ax, si		; daycnt
 12130 00000528 96                      		xchg	ax, si
 12131 00000529 AB                      		stosw
 12132                                  		;pop	ax
 12133 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 12134 0000052B AB                      		stosw
 12135 0000052C 89D8                    		mov	ax, bx
 12136 0000052E AB                      		stosw
 12137 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 12138                                  					;   [es:di+2] = hours
 12139                                  					;   [es:di+3] = minutes
 12140                                  					;   [es:di+4] = seconds
 12141                                  					;   [es:di+5] = hundredths of seconds
 12142 00000530 C3                      		retn
 12143                                  
 12144                                  ; =============== S U B	R O U T	I N E =======================================
 12145                                  
 12146                                  ; 15/10/2022
 12147                                  
 12148                                  ;----------------------------------------------------------------------------
 12149                                  ;
 12150                                  ; procedure : GetTickCnt
 12151                                  ;
 12152                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 12153                                  ;		of rollover [except when power management driver is in use]. 
 12154                                  ;		Uses the following logic for updating Daycnt
 12155                                  ;
 12156                                  ;		if ( rollover ) {
 12157                                  ;			if ( t_switch )
 12158                                  ;				daycnt++ ;
 12159                                  ;			else
 12160                                  ;				daycnt += rollover ;
 12161                                  ;		}
 12162                                  ;
 12163                                  ; USES : AX
 12164                                  ;
 12165                                  ; RETURNS : CX:DX - tick count
 12166                                  ; MODIFIES : daycnt
 12167                                  ;
 12168                                  ;----------------------------------------------------------------------------
 12169                                  
 12170                                  		; 17/10/2022
 12171                                  GetTickCnt:
 12172 00000531 30E4                    		xor	ah, ah
 12173 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 12174                                  					; Return: CX:DX	= clock	count
 12175                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 12176                                  					; midnight
 12177                                  					; Otherwise, AL	> 0
 12178                                  		; 20/12/2023
 12179 00000535 30E4                    		xor	ah, ah
 12180 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 12181                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 12182 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 12183                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 12184                                  					; and not flag
 12185 0000053D 0106[8904]              		add	[daycnt], ax
 12186 00000541 C3                      		retn
 12187                                  ; ---------------------------------------------------------------------------
 12188                                  
 12189                                  inc_case:
 12190 00000542 08C0                    		or	al, al
 12191 00000544 7404                    		jz	short no_rollover
 12192 00000546 FF06[8904]              		inc	word [daycnt]
 12193                                  no_rollover:
 12194 0000054A C3                      		retn
 12195                                  
 12196                                  ; ---------------------------------------------------------------------------
 12197                                  ; ---------------------------------------------------------------------------
 12198                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12199                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 12200                                  
 12201                                  %if 1
 12202                                  
 12203 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 12204 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 12205 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 12206 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 12206 0000056C 2020               
 12207                                  
 12208                                  %endif
 12209                                  
 12210                                  ;----------------------------------------------------------------------------
 12211                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 12212                                  ;----------------------------------------------------------------------------
 12213                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12214                                  ; 09/03/2019 - Retro DOS v4.0
 12215                                  
 12216                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 12217                                  ; 26/05/2018 - Retro DOS v3.0
 12218                                  ; 23/03/2018 - Retro DOS v2.0
 12219                                  
 12220                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 12221                                  
 12222                                  ;struc BPB_TYPE
 12223                                  ;.SECSIZE:	resw 1
 12224                                  ;.SECALL:	resb 1
 12225                                  ;.RESNUM:	resw 1
 12226                                  ;.FATNUM:	resb 1
 12227                                  ;.DIRNUM:	resw 1
 12228                                  ;.SECNUM:	resw 1
 12229                                  ;.FATID:	resb 1
 12230                                  ;.FATSIZE:	resw 1
 12231                                  ;.SLIM:		resw 1
 12232                                  ;.HLIM:		resw 1
 12233                                  ;.HIDDEN:	resw 1
 12234                                  ;.size:
 12235                                  ;endstruc
 12236                                  
 12237                                  ;-----------------------------------------------------------------
 12238                                  ;	disk interface routines
 12239                                  ;-----------------------------------------------------------------
 12240                                  
 12241                                  ; device attribute bits:
 12242                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 12243                                  
 12244                                  ;MAXERR		equ	5
 12245                                  ;MAX_HD_FMT_ERR	equ	2
 12246                                  
 12247                                  ;LSTDRV	equ 504h
 12248                                  
 12249                                  ; some floppies do not have changeline. as a result, media-check would
 12250                                  ; normally return i-don't-know, the dos would continually reread the fat and
 12251                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 12252                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 12253                                  ; the time of the last successful disk operation and compare it with the current
 12254                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 12255                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 12256                                  ; since we cannot trust the timer to be always available, we record the number 
 12257                                  ; of media checks that have occurred when no apparent time has elapsed. while
 12258                                  ; this number is < a given threshold, we say no change. when it exceeds that
 12259                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 12260                                  ; the time of last successful access, if we see that time has passed too,
 12261                                  ; we reset the counter.
 12262                                  
 12263                                  accessmax	equ	5
 12264                                  
 12265                                  ; due to various bogosities, we need to continually adjust what the head
 12266                                  ; settle time is.  the following algorithm is used:
 12267                                  ;
 12268                                  ;   get the current head settle value.
 12269                                  ;   if it is 0, then
 12270                                  ;	set slow = 15
 12271                                  ;   else
 12272                                  ;	set slow = value
 12273                                  ;   ...
 12274                                  ;*********************************************
 12275                                  ;************ old algorithm ******************
 12276                                  ;*   if we are seeking and writing then
 12277                                  ;*	 use slow
 12278                                  ;*   else
 12279                                  ;*	 use fast
 12280                                  ;*********************************************
 12281                                  ;*********** ibm's requested logic ***********
 12282                                  ;   if we are seeking and writing and not on an at then
 12283                                  ;	use slow
 12284                                  ;   else
 12285                                  ;	use fast
 12286                                  ;   ...
 12287                                  ;   restore current head settle value
 12288                                  ;
 12289                                  ;
 12290                                  ;---------------------------------------
 12291                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 12292                                  					; it on after handling config.sys file as a
 12293                                  					; default value, if multrk_flag = multrk_off1.
 12294                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 12295                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 12296                                  
 12297                                  ; close data segment, open Bios_Code segment
 12298                                  
 12299                                  ; 15/10/2022
 12300                                  
 12301                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 12302                                  
 12303                                  ;-----------------------------------------------------------------
 12304                                  ;	command jump table
 12305                                  ;-----------------------------------------------------------------
 12306                                  
 12307 0000056E 00                      		db 0
 12308                                  
 12309                                  ; 11/12/2022
 12310                                  %if 0
 12311                                  
 12312                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 12313                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 12314                                  		dw 1742h		; dsk_init
 12315                                  		dw 4EBh			; media_chk
 12316                                  		dw 592h			; get_bpb
 12317                                  		dw 0D5h			; bc_cmderr
 12318                                  		dw 857h			; dsk_read
 12319                                  		dw 83Dh			; x_bus_exit
 12320                                  		dw 558h			; ret_carry_clear
 12321                                  		dw 558h			; ret_carry_clear
 12322                                  		dw 849h			; dsk_writ
 12323                                  		dw 841h			; dsk_writv
 12324                                  		dw 558h			; ret_carry_clear
 12325                                  		dw 558h			; ret_carry_clear
 12326                                  		dw 0D5h			; bc_cmderr
 12327                                  		dw 80Ah			; dsk_open
 12328                                  		dw 81Ah			; dsk_close
 12329                                  		dw 831h			; dsk_rem
 12330                                  		dw 558h			; ret_carry_clear
 12331                                  		dw 558h			; ret_carry_clear
 12332                                  		dw 558h			; ret_carry_clear
 12333                                  		dw 0C6Bh		; do_generic_ioctl
 12334                                  		dw 558h			; ret_carry_clear
 12335                                  		dw 558h			; ret_carry_clear
 12336                                  		dw 558h			; ret_carry_clear
 12337                                  		dw 1124h		; ioctl_getown
 12338                                  		dw 1142h		; ioctl_setown
 12339                                  		dw 129Ah		; ioctl_support_query
 12340                                  
 12341                                  ;dtbl_siz equ $-dsktbl
 12342                                  
 12343                                  %endif
 12344                                  
 12345                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12346                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 12347                                  
 12348                                  		; 21/12/2023 - Retro DOS v5.0
 12349                                  		; 11/12/2022
 12350 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 12351 00000570 [4A1A]                  		dw dsk_init
 12352 00000572 [B805]                  		dw media_chk
 12353 00000574 [5706]                  		dw get_bpb
 12354                                  		;dw bc_cmderr
 12355 00000576 [4A0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 12356 00000578 [7209]                  		dw dsk_read
 12357 0000057A [5809]                  		dw x_bus_exit
 12358 0000057C [2206]                  		dw ret_carry_clear
 12359 0000057E [2206]                  		dw ret_carry_clear
 12360 00000580 [6409]                  		dw dsk_writ
 12361 00000582 [5C09]                  		dw dsk_writv
 12362 00000584 [2206]                  		dw ret_carry_clear
 12363 00000586 [2206]                  		dw ret_carry_clear
 12364                                  		;dw bc_cmderr
 12365 00000588 [F70D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 12366 0000058A [2909]                  		dw dsk_open
 12367 0000058C [3809]                  		dw dsk_close
 12368 0000058E [4E09]                  		dw dsk_rem
 12369 00000590 [2206]                  		dw ret_carry_clear
 12370 00000592 [2206]                  		dw ret_carry_clear
 12371 00000594 [2206]                  		dw ret_carry_clear
 12372 00000596 [CC0E]                  		dw do_generic_ioctl
 12373 00000598 [2206]                  		dw ret_carry_clear
 12374 0000059A [2206]                  		dw ret_carry_clear
 12375 0000059C [2206]                  		dw ret_carry_clear
 12376 0000059E [A713]                  		dw ioctl_getown
 12377 000005A0 [C413]                  		dw ioctl_setown
 12378 000005A2 [1C15]                  		dw ioctl_support_query
 12379                                  
 12380                                  dtbl_siz equ $-dsktbl
 12381                                  
 12382                                  ; =============== S U B	R O U T	I N E =======================================
 12383                                  
 12384                                  ; ---------------------------------------------------------------------------
 12385                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 12386                                  ; the one that belongs to the drive specified. carry is set if none exists
 12387                                  ; for the drive. Pointer is returned in es:[di]
 12388                                  ;
 12389                                  ;  AL contains the logical drive number.
 12390                                  ; ---------------------------------------------------------------------------
 12391                                  
 12392                                  SetDrive:
 12393                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 12394 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 12395                                  X_Scan_Loop:
 12396 000005A8 26384505                		cmp	[es:di+5], al	
 12397 000005AC 7409                    		jz	short X_SetDrv
 12398 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 12399 000005B1 83FFFF                  		cmp	di, 0FFFFh
 12400 000005B4 75F2                    		jnz	short X_Scan_Loop
 12401 000005B6 F9                      		stc
 12402                                  X_SetDrv:
 12403 000005B7 C3                      		retn
 12404                                  
 12405                                  ; ---------------------------------------------------------------------------
 12406                                  
 12407                                  ; 15/10/2022
 12408                                  
 12409                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12410                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 12411                                  
 12412                                  ; ---------------------------------------------------------------------
 12413                                  ; if id is f9, have a 96tpi disk else
 12414                                  ; if bit 2 is 0 then media is not removable and could not have changed
 12415                                  ;  otherwise if within 2 secs of last disk operation media could not
 12416                                  ;    have changed, otherwise dont know if media has changed
 12417                                  ; ---------------------------------------------------------------------
 12418                                  
 12419                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 12420 000005B8 E8E9FF                  		call	SetDrive
 12421 000005BB BE0100                  		mov	si, 1
 12422                                  		; 21/12/2023
 12423 000005BE 26F6454001              		test	byte [es:di+40h], 1
 12424                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 12425                                  					; fchanged_by_format
 12426 000005C3 7415                    		jz	short WeAreNotFakingIt
 12427                                  		; 21/12/2023
 12428 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 12429                                  		; 12/12/2022
 12430                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 12431                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 12432                                  					; ~fchanged_by_format ;	reset flag
 12433 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12434                                  					; Ensure that we ask the rom if media has changed
 12435                                  		; 21/12/2023
 12436 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 12437                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12438                                  					; fnon_removable
 12439 000005D4 740B                    		jz	short wehaveafloppy
 12440                                  		;mov	si, 0FFFFh	; Indicate media changed
 12441                                  		; 11/08/2023
 12442 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 12443 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 12444                                  ; ---------------------------------------------------------------------------
 12445                                  
 12446                                  WeAreNotFakingIt:
 12447                                  		; 21/12/2023
 12448 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 12449                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 12450                                  		;test	byte [es:di+23h], 1
 12451 000005DF 7524                    		jnz	short Media_Done
 12452                                  wehaveafloppy:
 12453                                  		;xor	si, si ; 0	; Presume "I don't know"
 12454                                  		; 11/08/2023
 12455 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 12456                                  
 12457                                  		; If we have a floppy with changeline support, we ask the ROM
 12458                                  		; to determine if media has changed. We do not perform the
 12459                                  		; 2 second check for these drives.
 12460                                  
 12461 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 12462 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 12463 000005E9 E83615                  		call	mediacheck	;  Call	into removable routine
 12464 000005EC 7236                    		jb	short err_exitj
 12465 000005EE E89A16                  		call	haschange
 12466 000005F1 7512                    		jnz	short Media_Done
 12467                                  mChk_NoChangeLine:
 12468                                  		; If we come here, we have a floppy with no changeline support
 12469                                  			
 12470 000005F3 BE0100                  		mov	si, 1		; Presume no change
 12471 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 12472 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 12473                                  					; Is drive of last access the same?
 12474 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 12475 000005FF E82800                  		call	Check_Time_Of_Access
 12476 00000602 EB01                    		jmp	short Media_Done
 12477                                  ; ---------------------------------------------------------------------------
 12478                                  
 12479                                  Media_Unk:
 12480 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 12481                                  
 12482                                  		; SI now contains the correct value for media change.
 12483                                  		; Clean up the left overs
 12484                                  Media_Done:
 12485                                  		; 19/10/2022
 12486 00000605 06                      		push	es
 12487 00000606 C41E[1200]              		les	bx, [ptrsav]
 12488 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 12489 0000060E 07                      		pop	es
 12490 0000060F 09F6                    		or	si, si
 12491 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 12492 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 12493 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 12494 0000061A E80016                  		call	media_set_vid
 12495                                  mChk1_NoChangeLine:
 12496 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12497                                  					; Make sure we ask rom for media check
 12498                                  ret_carry_clear:			
 12499 00000622 F8                      		clc			; volidok
 12500 00000623 C3                      		retn
 12501                                  ; ---------------------------------------------------------------------------
 12502                                  
 12503                                  err_exitj:
 12504 00000624 E88207                  		call	maperror	; guaranteed to	set carry
 12505                                  ret81:					
 12506 00000627 B481                    		mov	ah, 81h		; return error status
 12507 00000629 C3                      		retn			; return with carry set
 12508                                  
 12509                                  ; =============== S U B	R O U T	I N E =======================================
 12510                                  
 12511                                  ; ---------------------------------------------------------------------------
 12512                                  ; perform a check on the time passed since the last access for this physical
 12513                                  ; drive.
 12514                                  ; we are accessing the same drive. if the time of last successful access was
 12515                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 12516                                  ; returns in si:
 12517                                  ;	0 - if time of last access was >= 2 seconds
 12518                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 12519                                  ; registers affected ax,cx,dx, flags.
 12520                                  ;
 12521                                  ;	assume es:di -> bds, ds->Bios_Data
 12522                                  ; ---------------------------------------------------------------------------
 12523                                  
 12524                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12525                                  		; 19/10/2022
 12526                                  Check_Time_Of_Access:
 12527 0000062A BE0100                  		mov	si, 1		; presume no change.
 12528 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 12529                                  		; 21/12/2023
 12530 00000630 268B4579                		mov	ax, [es:di+79h]
 12531                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 12532                                  					; get stored time
 12533 00000634 29C2                    		sub	dx, ax
 12534                                  		; 21/12/2023
 12535 00000636 268B457B                		mov	ax, [es:di+7Bh]
 12536                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 12537 0000063A 19C1                    		sbb	cx, ax
 12538                                  		; 11/08/2023
 12539                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 12540                                  		;mov	al, [accesscount]
 12541 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 12542 0000063E 09D2                    		or	dx, dx		; time must pass
 12543 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 12544                                  		; 11/08/2023
 12545                                  		;inc	al
 12546                                  		;cmp	al, 5
 12547                                  		;;inc	byte [accesscount]
 12548                                  		;;cmp	byte [accesscount], 5
 12549                                  		;			; if count is less than threshold, ok
 12550                                  		;jb	short timecheck_ret
 12551                                  		;;dec	byte [accesscount] ; don't let the count wrap
 12552                                  		; 11/08/2023
 12553                                  		;dec	al
 12554                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 12555                                  		; 11/08/2023
 12556 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 12557 00000647 730A                    		jnb	short timecheck_unk
 12558 00000649 FE06[1D01]              		inc	byte [accesscount]
 12559 0000064D C3                      		retn
 12560                                  
 12561                                  ; ---------------------------------------------------------------------------
 12562                                  
 12563                                  timepassed:
 12564 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 12565                                  					; min elapsed time? (2 seconds)
 12566 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 12567                                  
 12568                                  		; everything indicates that we do not know what has happened.
 12569                                  timecheck_unk:
 12570 00000653 4E                      		dec	si		; presume i don't know
 12571                                  timecheck_ret:
 12572                                  		; 11/08/2023
 12573                                  		;mov	[accesscount], al
 12574 00000654 C3                      		retn
 12575                                  
 12576                                  ; ---------------------------------------------------------------------------
 12577                                  ; 15/10/2022
 12578                                  Err_Exitj2:
 12579 00000655 EBCD                    		jmp	short err_exitj
 12580                                  
 12581                                  ; ---------------------------------------------------------------------------
 12582                                  
 12583                                  ; 15/10/2022
 12584                                  
 12585                                  ; ==========================================================================
 12586                                  ; Build a valid bpb for the disk in the drive.
 12587                                  ; ==========================================================================
 12588                                  
 12589                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12590                                  		; 19/10/2022
 12591                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 12592 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 12593 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 12594                                  		; 21/12/2023
 12595 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 12596                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12597                                  					; fnon_removable
 12598 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 12599                                  
 12600                                  		; let's set the default value for volid,vol_serial,
 12601                                  		; filesys_id in bds table
 12602                                  
 12603 00000664 E83600                  		call	clear_ids
 12604                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 12605 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 12606 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 12607 0000066F 72B6                    		jb	short ret81
 12608                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 12609 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 12610                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 12611 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 12612 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 12613                                  					; otherwise, conventional boot record
 12614                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 12615 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 12616 00000682 7403                    		jz	short already_gotbpb ; brif not
 12617 00000684 E80A16                  		call	set_volume_id
 12618                                  already_gotbpb:
 12619 00000687 83C706                  		add	di, 6		; BDS.BPB
 12620                                  					; return the bpb from the current bds
 12621                                  
 12622                                  ;		fall into setptrsav, es:di -> result
 12623                                  
 12624                                  ; ---------------------------------------------------------------------------
 12625                                  
 12626                                  ; 15/10/2022
 12627                                  
 12628                                  ; ==========================================================================
 12629                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 12630                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 12631                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 12632                                  ;It fails, for instance, when we install an external drive using driver.sys
 12633                                  ;because then the BDS segment is no longer Bios_Data. 
 12634                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 12635                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 12636                                  ;restored before returning to the caller.
 12637                                  ; ==========================================================================
 12638                                  
 12639                                  ; 21/12/2023
 12640                                  %if 0
 12641                                  		; 19/10/2022
 12642                                  SetPtrSav:	; return point for dsk_init
 12643                                  		mov	cx, es		; save es
 12644                                  		;les	bx, ds:ptrsav
 12645                                  		les	bx, [ptrsav]
 12646                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 12647                                  		mov	[es:bx+12h], di	; [es:bx+count]
 12648                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 12649                                  		clc
 12650                                  		retn
 12651                                  %endif
 12652                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12653                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 12654                                  SetPtrSav:	
 12655                                  		; return point for dsk_init
 12656 0000068A 1E                      		push	ds
 12657                                  		;lds	bx, ds:ptrsav
 12658 0000068B C51E[1200]              		lds	bx, [ptrsav]
 12659 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 12660 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 12661 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 12662 00000698 1E                      		push	ds
 12663 00000699 07                      		pop	es
 12664 0000069A 1F                      		pop	ds
 12665 0000069B F8                      		clc
 12666 0000069C C3                      		retn
 12667                                  
 12668                                  ; =============== S U B	R O U T	I N E =======================================
 12669                                  
 12670                                  ; 15/10/2022
 12671                                  
 12672                                  ; -----------------------------------------------------
 12673                                  ; clear ids in bds table. only applied for floppies.
 12674                                  ;input:  es:di -> bds table
 12675                                  ;	assumes ds: -> Bios_Data
 12676                                  ;output: volid set to "NO NAME    "
 12677                                  ;	 vol_serial set to 0.
 12678                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 12679                                  ;	   depending on the flag fatsize in bds.
 12680                                  ;
 12681                                  ;	trashes si, cx
 12682                                  ; -----------------------------------------------------
 12683                                  
 12684                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 12685                                  ;size_of_EXT_SYSTEM_ID equ 8
 12686                                  
 12687                                  ; 11/09/2023
 12688                                  ; 14/08/2023
 12689                                  ;BDS.fatsiz equ 1Fh
 12690                                  ; 21/12/2023
 12691                                  ;BDS.fatsiz equ 59
 12692                                  
 12693                                  		; 22/12/2023
 12694                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12695                                  clear_ids:
 12696                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 12697                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 12698 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 12699                                  clear_ids_x:
 12700                                  		; 21/12/2023 
 12701                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 12702                                  		; 11/09/2023		
 12703                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 12704 000006A1 57                      		push	di
 12705 000006A2 31C9                    		xor	cx, cx		; no serial number
 12706                                  		; 21/12/2023
 12707 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 12708 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 12709                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 12710                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 12711                                  
 12712                                  		; BUGBUG - there's a lot in common here and with
 12713                                  		; mov_media_ids.. see if we can save some space by
 12714                                  		; merging them... jgl
 12715                                  
 12716                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 12717                                  		; 10/12/2022
 12718 000006AE B10B                    		mov	cl, 11 ; cx = 11
 12719                                  
 12720                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 12721                                  		;mov	si, vol_no_name	; 19/10/2022
 12722                                  		; 22/12/2023
 12723                                  		;mov	si, offset nul_vid ; "NO NAME    "
 12724 000006B0 BE[6305]                		mov	si, nul_vid
 12725                                  
 12726                                  		; 21/12/2023
 12727 000006B3 83C77D                  		add	di, 125
 12728                                  		;add	di, 75		; BDS.volid
 12729                                  		
 12730                                  		;rep movsb
 12731                                  		; 21/12/2023
 12732                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 12733                                  		; 26/12/2023
 12734                                  		;cs	; vol_no_name is in BIOSCODE segment
 12735                                  		;rep movsb
 12736 000006B6 F3                      		rep
 12737 000006B7 2E                      		cs
 12738 000006B8 A4                      		movsb
 12739                                  
 12740                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 12741                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 12742                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 12743                                  		;test	byte [es:di+1Fh], 40h
 12744                                  		; 21/12/2023 - Retro DOS v5.0
 12745                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 12746                                  		;test	byte [es:di+59], 20h 
 12747                                  			; (here, es:di points to the BDS offset +136)
 12748                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 12749                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 12750                                  
 12751                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 12752                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 12753                                  			; Microsoft/IBM code has a bug here because the BDS's
 12754                                  			; .volid and .filesys_id fields will be reset
 12755                                  			; (to their default text) according to 'BDS.fatsiz' flags
 12756                                  			; at the BDS offset 59 but current (this) code checks flags
 12757                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 12758                                  			;; at the BDS offset 31 but current (this) code checks flags
 12759                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 12760                                  			;
 12761                                  			; Correct Code:
 12762                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 12763                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 12764                                  			; 11/09/2023
 12765                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 12766                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 12767                                  			;
 12768                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 12769                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 12770                                  
 12771                                  			;
 12772                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 12773                                  			; 'clear_ids' is used for floppy disks only and the default
 12774                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 12775                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 12776                                  
 12777                                  		; 21/12/2023 - Retro DOS v5.0
 12778                                  		;mov	si, offset fat_32_id ; "FAT32   "
 12779 000006B9 BE[5B05]                		mov	si, fat_32_id	
 12780                                  
 12781                                  		; 21/12/2023
 12782                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 12783                                  		;test	bl, fbigbig ; FAT32 flag
 12784 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 12785 000006BF 750B                    		jnz	short ci_bigfat
 12786                                  
 12787                                  		;mov	si, offset fat_16_id ; "FAT16	"
 12788 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 12789                                  		
 12790                                  		; 21/12/2023
 12791                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 12792                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 12793                                  		; BugFix ; *+
 12794                                  		;test	bl, fbig ; FAT16 flag
 12795 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 12796                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 12797 000006C7 7503                    		jnz	short ci_bigfat
 12798                                  
 12799                                  		;mov	si, offset fat_12_id ; "FAT12	"
 12800 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 12801                                  ci_bigfat:
 12802                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 12803                                  		; 10/12/2022
 12804 000006CC B108                    		mov	cl, 8 ; cx = 8 
 12805 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 12806                                  					; filesys_id field
 12807                                  		;rep movsb
 12808                                  		; 21/12/2023 - Retro DOS v5.0
 12809                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 12810                                  		; 26/12/2023
 12811                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 12812                                  		;rep movsb
 12813 000006D1 F3                      		rep
 12814 000006D2 2E                      		cs
 12815 000006D3 A4                      		movsb
 12816                                  
 12817 000006D4 5F                      		pop	di		; restore bds pointer
 12818                                  getret_exit:		; 21/12/2023
 12819 000006D5 C3                      		retn
 12820                                  
 12821                                  ; =============== S U B	R O U T	I N E =======================================
 12822                                  
 12823                                  ; 15/10/2022
 12824                                  
 12825                                  ; ---------------------------------------------------------------------------
 12826                                  ;	getbp - return bpb from the drive specified by the bds.
 12827                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 12828                                  ;	    note that we never come here for fixed disks.
 12829                                  ;	    for all other cases,
 12830                                  ;	      - it reads boot sector to pull out the bpb
 12831                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 12832                                  ;		to get the fat id byte to build the bpb from there.
 12833                                  ;
 12834                                  ;   inputs:	es:di point to correct bds.
 12835                                  ;
 12836                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 12837                                  ;		carry set, and al=7 if invalid disk.
 12838                                  ;		carry set and error code in al if other error.
 12839                                  ;		if failed to recognize the boot record, then will set the
 12840                                  ;		set_id_flag to 0.
 12841                                  ;		this routine will only work for a floppy diskette.
 12842                                  ;		     for a fixed disk, it will just return.
 12843                                  ;
 12844                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 12845                                  ;	  segment definitions. It should be migrated towards.
 12846                                  ;	   now es:di has the bds, ds: has Bios_Data
 12847                                  ; ---------------------------------------------------------------------------
 12848                                  
 12849                                  		; 29/12/2023
 12850                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12851                                  GetBp:
 12852                                  		; if returning fake bpb then return bpb as is.
 12853                                  		; 21/12/2023
 12854 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 12855                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 12856                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 12857                                  		;jz	short getbp1	; getbp1
 12858                                  		;jmp	getret_exit
 12859                                  		; 21/12/2023
 12860 000006DB 75F8                    		jnz	short getret_exit
 12861                                  ; ---------------------------------------------------------------------------
 12862                                  getbp1:	
 12863 000006DD 51                      		push	cx
 12864 000006DE 52                      		push	dx
 12865 000006DF 53                      		push	bx
 12866                                  
 12867                                  		; attempt to read in boot sector and determine bpb.
 12868                                  		; we assume that the 2.x and greater dos disks all
 12869                                  		; have a valid boot sector.
 12870                                  
 12871 000006E0 E8CF00                  		call	readbootsec
 12872 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 12873 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 12874 000006E7 7509                    		jnz	short dofatbpb
 12875 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 12876                                  		;jmp	short Has1
 12877                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 12878 000006EC E9B500                  		jmp	getret
 12879                                  ; ---------------------------------------------------------------------------
 12880                                  
 12881                                  getbp_err_ret_brdg:
 12882 000006EF E9B600                  		jmp	getbp_err_ret
 12883                                  ; ---------------------------------------------------------------------------
 12884                                  
 12885                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 12886                                  		; and fill in bpb from there.
 12887                                  dofatbpb:				
 12888 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 12889 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 12890                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 12891 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 12892 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 12893 000006FE E83115                  		call	hidensity	; may not return! May add sp, 2	and
 12894                                  					; jump to has1!!!!!! or	has720K
 12895                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 12896                                  		; 21/12/2023 - Retro DOS v5.0
 12897 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 12898                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12899                                  					; ffSmall
 12900 00000706 7512                    		jnz	short is_floppy
 12901 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 12902 0000070B 7512                    		jnz	short got_unknown_medium
 12903                                  Has720K:
 12904                                  		; 21/12/2023
 12905                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 12906                                  		;mov	bx, sm92	; 19/10/2022
 12907                                  
 12908                                  		; es points to segment of bds. the following should be modified
 12909                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 12910                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 12911                                  
 12912                                  		; 21/12/2023
 12913                                  		;; 10/12/2022
 12914                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 12915                                  		;; 21/12/2022
 12916                                  		;mov	al, [bx]
 12917                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 12918                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 12919                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 12920                                  		;; 19/10/2022 - Temporary !
 12921                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 12922                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 12923                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 12924                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 12925                                  
 12926                                  		; 21/12/2023 - Retro DOS v5.0
 12927 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 12928 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 12929 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 12930                                  					; dh = bpbtype.chead = 2
 12931 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 12932                                  					; bh = bpbtype.dire = 112
 12933 00000718 EB30                    		jmp	short Has1
 12934                                  ; ---------------------------------------------------------------------------
 12935                                  
 12936                                  is_floppy:			; must be a 5.25" floppy if we come here
 12937 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 12938                                  		;jb	short got_unknown_medium
 12939                                  		; 21/12/2023
 12940 0000071D 730A                    		jnb	short chk_160K
 12941                                  ; ---------------------------------------------------------------------------
 12942                                  		; 21/12/2023
 12943                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 12944                                  		; we do	not assume any type of bpb for this medium.
 12945                                  got_unknown_medium:
 12946                                  		;mov	ds:set_id_flag,	0
 12947 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 12948 00000724 B007                    		mov	al, 7
 12949 00000726 F9                      		stc
 12950 00000727 EB7B                    		jmp	short getret
 12951                                  ; ---------------------------------------------------------------------------
 12952                                  chk_160K:
 12953 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 12954 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 12955                                  					; set dir entries and sector max
 12956 0000072E B94001                  		mov	cx, 320		; 40*8
 12957                                  					; set size of drive
 12958 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 12959                                  					; set head limit and sec/all unit
 12960                                  		; 21/12/2023
 12961                                  		;mov	al, 1		; bpbtype.sbf = 1
 12962                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 12963                                  		;			; bh = bpbtype.dire = 64
 12964                                  		;mov	cx, 140h	; bpbtype.csec = 320
 12965                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 12966                                  		;			; dh = bpbtype.chead = 1
 12967                                  
 12968 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 12969 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 12970                                  		
 12971                                  		; 29/12/2023
 12972                                  		;inc	al	; 2 	; inc number of	fat sectors
 12973                                  		;inc	bl	; 9	; inc sector max
 12974 00000739 40                      		inc	ax
 12975 0000073A 43                      		inc	bx
 12976                                  
 12977                                  		;add	cx, 40		; increase size	(to 360)
 12978                                  		; 18/12/2022
 12979 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 12980                                  has8:
 12981 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 12982 00000741 7407                    		jz	short Has1	; jz = 1 head
 12983 00000743 01C9                    		add	cx, cx		; double size of disk
 12984 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 12985 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 12986                                  		; 29/12/2023
 12987                                  		;inc	dl	; 2	; inc head limit
 12988 00000749 42                      		inc	dx
 12989                                  Has1:
 12990                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 12991 0000074A 1E                      		push	ds
 12992 0000074B 06                      		push	es
 12993 0000074C 1F                      		pop	ds
 12994                                  
 12995                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 12996                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 12997                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 12998                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 12999                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 13000                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 13001                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 13002                                  
 13003 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 13004 00000750 30F6                    		xor	dh, dh
 13005 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 13006 00000755 88FA                    		mov	dl, bh
 13007 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 13008 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 13009 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 13010 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 13011 00000763 88C2                    		mov	dl, al
 13012 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 13013 00000768 88DA                    		mov	dl, bl
 13014 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 13015                                  
 13016                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 13017                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 13018                                  		; to 0 since this code is for floppies
 13019                                  
 13020                                  		; 18/12/2022
 13021                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 13022                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 13023                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 13024                                  		; 18/12/2022
 13025 0000076D 29C9                    		sub	cx, cx ; 0
 13026                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 13027                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 13028                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 13029                                  		
 13030                                  		; 02/09/2023
 13031 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 13032 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 13033 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 13034                                  
 13035                                  		; 21/12/2023 - Retro DOS v5.0
 13036 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 13037 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 13038 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 13039 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 13040 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 13041                                  					;     BPB_Reserved (12 zero bytes)
 13042 00000787 894D31                  		mov     [di+31h], cx
 13043 0000078A 894D33                  		mov     [di+33h], cx
 13044 0000078D 894D35                  		mov     [di+35h], cx
 13045 00000790 894D37                  		mov     [di+37h], cx
 13046 00000793 894D39                  		mov     [di+39h], cx
 13047 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 13048 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 13049                                  
 13050 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 13051 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 13052 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 13053                                  		
 13054 000007A3 1F                      		pop	ds ; 02/09/2023
 13055                                  getret:
 13056 000007A4 5B                      		pop	bx
 13057 000007A5 5A                      		pop	dx
 13058 000007A6 59                      		pop	cx
 13059                                  ;getret_exit:		; 21/12/2023
 13060 000007A7 C3                      		retn
 13061                                  ; ---------------------------------------------------------------------------
 13062                                  
 13063                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 13064                                  		;mov	ds:set_id_flag,	0
 13065                                  		; 19/10/2022
 13066 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 13067 000007AD E8F905                  		call	maperror
 13068 000007B0 EBF2                    		jmp	short getret
 13069                                  ; ---------------------------------------------------------------------------
 13070                                  ; 21/12/2023
 13071                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 13072                                  ;		; we do	not assume any type of bpb for this medium.
 13073                                  ;
 13074                                  ;got_unknown_medium:
 13075                                  ;		;mov	ds:set_id_flag,	0
 13076                                  ;		mov	byte [set_id_flag], 0
 13077                                  ;		mov	al, 7
 13078                                  ;		stc
 13079                                  ;		jmp	short getret
 13080                                  
 13081                                  ; =============== S U B	R O U T	I N E =======================================
 13082                                  
 13083                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 13084                                  
 13085                                  ; ----------------------------------------------------------------
 13086                                  ; read in the boot sector. set carry if error in reading sector.
 13087                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 13088                                  ;
 13089                                  ;	assumes es:di -> bds, ds-> Bios_Data
 13090                                  ; ----------------------------------------------------------------
 13091                                  
 13092                                  ; 10/03/2019 - Retro DOS v4.0
 13093                                  
 13094                                  ; 30/12/2022 - Retro DOS v4.2
 13095                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 13096                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 13097                                  
 13098                                  ; 22/12/2023 - Retro DOS v5.0
 13099                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 13100                                  
 13101                                  readbootsec:	
 13102 000007B2 B600                    		mov	dh, 0		; head 0
 13103 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 13104 000007B7 E8FC00                  		call	read_sector
 13105 000007BA 7243                    		jb	short err_ret
 13106 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 13107                                  
 13108                                  		; put a sanity check for the boot sector in here to detect
 13109                                  		; boot sectors that do not have valid bpbs. we examine the
 13110                                  		; first two bytes - they must contain a long jump (69h) or a
 13111                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 13112                                  		; (E9h). if this test is passed, we further check by examining
 13113                                  		; the signature at the end of the boot sector for the word
 13114                                  		; AA55h. if the signature is not present, we examine the media
 13115                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 13116                                  		; logic is modified a little bit. we are not going to check
 13117                                  		; signature. instead we are going to sanity check the media
 13118                                  		; byte in bpb regardless of the validity of signature. this is
 13119                                  		; to save the already developed commercial products that have
 13120                                  		; good jump instruction and signature but with the false bpb
 13121                                  		; informations
 13122                                  
 13123                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 13124                                  
 13125                                  		; 02/09/2023
 13126                                  		; 19/10/2022
 13127                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 13128                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 13129                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 13130                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 13131                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 13132                                  		;jnz	short invalidbootsec
 13133                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 13134                                  		;jnz	short invalidbootsec
 13135                                  
 13136                                  		; 02/09/2023 (PCDOS 7.1)
 13137 000007BE A0[5201]                		mov	al, [disksector]
 13138 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 13139 000007C3 740F                    		je	short check_bpb_mediabyte
 13140                                  					; don't need to find a nop
 13141 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 13142 000007C7 740B                    		je	short check_bpb_mediabyte
 13143                                  					; no need for nop
 13144 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 13145 000007CB 7530                    		jne	short invalidbootsec
 13146 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 13147 000007D2 7529                    		jne	short invalidbootsec
 13148                                  
 13149                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13150                                  ;
 13151                                  ;; 10/03/2019
 13152                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 13153                                  ;;
 13154                                  ;; Don't have to perform the following signature check since
 13155                                  ;; we need to check the media byte even with the good signatured diskette.
 13156                                  ;;
 13157                                  ;;check_signature:
 13158                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 13159                                  ;;							 ; disk or 1.x media.
 13160                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 13161                                  ;;					       ; may need some special handling
 13162                                  
 13163                                  ; check for non-ibm disks which do not have the signature AA55h at the
 13164                                  ; end of the boot sector, but still have a valid boot sector. this is done
 13165                                  ; by examining the media descriptor in the boot sector.
 13166                                  
 13167                                  		; 19/10/2022
 13168                                  check_bpb_mediabyte:
 13169 000007D4 A0[6701]                		mov	al, [disksector+15h]
 13170                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13171 000007D7 50                      		push	ax ; 02/09/2023
 13172 000007D8 24F0                    		and	al, 0F0h
 13173 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 13174 000007DC 58                      		pop	ax ; 02/09/2023
 13175 000007DD 751E                    		jnz	short invalidbootsec
 13176                                  
 13177                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 13178                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 13179                                  ; sectors. these are specifically diskettes that were formatted in drives
 13180                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 13181                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 13182                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 13183                                  ; help our build bpb routine to recognise these specific cases, and to
 13184                                  ; set up out copy of the bpb accordingly.
 13185                                  ; we do this by checking to see if the boot sector is off a diskette that
 13186                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 13187                                  ; sec/clus field to 1. if not, we carry on as normal.
 13188                                  
 13189                                  checksinglesided:
 13190                                  		;mov	al, [disksector+15h]
 13191                                  		; 02/09/2023
 13192                                  		; al = [disksector+15h]
 13193 000007DF 3CF0                    		cmp	al, 0F0h
 13194 000007E1 741B                    		jz	short gooddsk
 13195 000007E3 A801                    		test	al, 1
 13196 000007E5 7517                    		jnz	short gooddsk
 13197 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 13198 000007ED 7507                    		jnz	short mustbeearlier
 13199 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 13200 000007F4 7308                    		jnb	short gooddsk
 13201                                  
 13202                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 13203                                  
 13204                                  mustbeearlier:				
 13205 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 13206                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13207 000007FB EB01                    		jmp	short gooddsk
 13208                                  ; ---------------------------------------------------------------------------
 13209                                  
 13210                                  invalidbootsec:				
 13211 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 13212                                  		; 10/12/2022
 13213                                  movbpb_ret:
 13214                                  gooddsk:				
 13215 000007FE F8                      		clc
 13216                                  err_ret:
 13217 000007FF C3                      		retn
 13218                                  ; ---------------------------------------------------------------------------
 13219                                  
 13220                                  		; 10/12/2022
 13221                                  ;err_ret:				
 13222                                  		;retn
 13223                                  
 13224                                  ; =============== S U B	R O U T	I N E =======================================
 13225                                  
 13226                                  ; 15/10/2022
 13227                                  ; ---------------------------------------------------------------------------
 13228                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 13229                                  ; getbp routine at has1
 13230                                  ;
 13231                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 13232                                  ; serial number, volume label, file system id in bds according to
 13233                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 13234                                  ; to signal that volume label is set already from the extended boot record
 13235                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 13236                                  ; the volume label in the root directory.)
 13237                                  ; ---------------------------------------------------------------------------
 13238                                  
 13239                                  ; 10/03/2019 - Retro DOS v4.0
 13240                                  
 13241                                  ; 22/12/2023
 13242                                  %if 0
 13243                                  		; 19/10/2022
 13244                                  movbpb:
 13245                                  		mov	dh, [disksector+0Dh]
 13246                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13247                                  					; sectors per unit
 13248                                  		mov	bh, [disksector+11h]
 13249                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 13250                                  					; number of directory entries
 13251                                  		mov	cx, [disksector+13h]
 13252                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 13253                                  					; size of drive
 13254                                  		mov	ah, [disksector+15h]
 13255                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13256                                  					; media	descriptor
 13257                                  		mov	al, [disksector+16h];
 13258                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 13259                                  					; number of fat	sectors
 13260                                  		mov	bl, [disksector+18h]
 13261                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 13262                                  					; sectors per track
 13263                                  		mov	dl, [disksector+1Ah]
 13264                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 13265                                  					; number of heads
 13266                                  %else
 13267                                  		; 29/12/2023
 13268                                  		; 22/12/2023 - Retro DOS v5.0
 13269                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 13270                                  		;;;
 13271                                  movbpb:
 13272 00000800 57                      		push	di
 13273 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 13274 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 13275 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 13276                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 13277 0000080B FC                      		cld
 13278 0000080C F3A4                    		rep movsb
 13279 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 13280                                  					; disksektor+19 = BPB_TotSec16
 13281 00000811 31C0                    		xor	ax, ax
 13282 00000813 E308                    		jcxz	movbpb_bigdisk
 13283 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 13284                                  					; to 32 bit total sectors field
 13285 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 13286                                  movbpb_bigdisk:
 13287 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 13288 00000820 7410                    		jz	short movbpb_fat32
 13289                                  movbpb_fat:
 13290 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 13291                                  		; 29/12/2023
 13292 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 13293                                  					; (which are used only for FAT32 disks)
 13294 00000828 F3AA                    		rep stosb
 13295 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 13296 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 13297                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 13298 0000082C AB                      		stosw
 13299 0000082D 40                      		inc	ax		; ax = 0
 13300 0000082E B10C                    		mov	cl, 12		
 13301                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 13302                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 13303 00000830 F3AA                    		rep stosb
 13304                                  movbpb_fat32:
 13305 00000832 5F                      		pop	di
 13306                                  %endif
 13307                                  		;;;
 13308                                  
 13309 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 13310 00000838 75C4                    		jnz	short movbpb_ret
 13311 0000083A E81200                  		call	mov_media_ids
 13312 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 13313 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 13314                                  movbpb_conv:
 13315 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 13316 00000849 75B3                    		jnz	short movbpb_ret
 13317 0000084B E83714                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 13318                                  		; 10/12/2022
 13319                                  		; cf = 0
 13320                                  ;movbpb_ret:
 13321                                  		;clc
 13322 0000084E C3                      		retn
 13323                                  		
 13324                                  ; =============== S U B	R O U T	I N E =======================================
 13325                                  
 13326                                  ;copy the boot_serial number, volume id, and filesystem id from the
 13327                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 13328                                  ;by es:di.
 13329                                  
 13330                                  ;in.) es:di -> bds
 13331                                  ;     ds:disksector = valid extended boot record.
 13332                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 13333                                  ;      the boot record information.
 13334                                  ;     carry flag set if not an extended bpb.
 13335                                  ;     all registers saved except the flag.
 13336                                  
 13337                                  ; 22/12/2023
 13338                                  %if 0
 13339                                  		; 19/10/2022
 13340                                  mov_media_ids:		
 13341                                  		cmp	byte [disksector+26h], 29h
 13342                                  					; [disksector+EXT_BOOT.SIG],
 13343                                  					; EXT_BOOT_SIGNATURE
 13344                                  		jnz	short mmi_not_ext
 13345                                  		push	cx
 13346                                  		mov	cx, [disksector+27h]
 13347                                  					; [disksector+EXT_BOOT.SERIAL]
 13348                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13349                                  		mov	cx, [disksector+29h]
 13350                                  					; [disksector+EXT_BOOT.SERIAL+2]
 13351                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13352                                  		push	di
 13353                                  		push	si
 13354                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13355                                  		mov	si, disksector+2Bh
 13356                                  		;mov	si, (offset disksector+2Bh) ;
 13357                                  					; disksector+EXT_BOOT.VOL_LABEL
 13358                                  		add	di, 75		; BDS.volid
 13359                                  		rep movsb
 13360                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 13361                                  		; 10/12/2022
 13362                                  		mov	cl, 8 ; cx = 8
 13363                                  		mov	si, disksector+36h
 13364                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 13365                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 13366                                  		rep movsb
 13367                                  		pop	si
 13368                                  		pop	di
 13369                                  		pop	cx
 13370                                  		; 10/12/2022
 13371                                  		; cf = 0
 13372                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 13373                                  				; (20/09/2022)
 13374                                  		retn
 13375                                  %else
 13376                                  		; 22/12/2023 - Retro DOS v5.0
 13377                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 13378                                  		;;;		
 13379                                  mov_media_ids:
 13380 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13381 00000854 7507                    		jnz	short mmi_chk_fat
 13382 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 13383                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 13384                                  					; EXT_BOOT_SIGNATURE
 13385 0000085B EB05                    		jmp	short mmi_chk_fat32
 13386                                  mmi_chk_fat:
 13387 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 13388                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 13389                                  mmi_chk_fat32:
 13390 00000862 7543                    		jnz	short mmi_not_ext
 13391 00000864 51                      		push	cx
 13392 00000865 50                      		push	ax
 13393 00000866 57                      		push	di
 13394 00000867 56                      		push	si
 13395 00000868 1E                      		push	ds
 13396 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13397 0000086E 750C                    		jnz	short mmi_fat
 13398                                  
 13399                                  mmi_fat32:				; FAT32 file system
 13400                                  		;lds	cx, dword ptr ds:disksector+43h
 13401 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 13402 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 13403 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 13404 0000087A EB0A                    		jmp	short mmi_do
 13405                                  
 13406                                  mmi_fat:
 13407                                  		;lds	cx, dword ptr ds:disksector+27h
 13408 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 13409 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 13410 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 13411                                  mmi_do:
 13412 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13413                                  					; (BDS offset 137)
 13414 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 13415 00000890 1F                      		pop	ds
 13416 00000891 B90B00                  		mov	cx, 11
 13417 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 13418 00000897 F3A4                    		rep movsb
 13419 00000899 B108                    		mov	cl, 8		; di = di+136
 13420 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 13421 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 13422 000008A0 F3A4                    		rep movsb
 13423 000008A2 5E                      		pop	si
 13424 000008A3 5F                      		pop	di
 13425 000008A4 58                      		pop	ax
 13426 000008A5 59                      		pop	cx
 13427                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 13428                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 13429 000008A6 C3                      		retn
 13430                                  %endif
 13431                                  		;;;
 13432                                  	
 13433                                  ; ---------------------------------------------------------------------------
 13434                                  
 13435                                  mmi_not_ext:				
 13436 000008A7 F9                      		stc
 13437 000008A8 C3                      		retn
 13438                                  
 13439                                  ; =============== S U B	R O U T	I N E =======================================
 13440                                  
 13441                                  ; 15/10/2022
 13442                                  ; --------------------------------------------------------------
 13443                                  ; read in the fat sector and get the media byte from it.
 13444                                  ; input : es:di -> bds
 13445                                  ; output:
 13446                                  ;	  carry set if an error occurs, ax contains error code.
 13447                                  ;	  otherwise, ah contains media byte on exit
 13448                                  ; --------------------------------------------------------------
 13449                                  
 13450                                  readfat:	
 13451                                  		;mov	dh, 0
 13452                                  		; 10/12/2022
 13453 000008A9 30F6                    		xor	dh, dh
 13454 000008AB B90200                  		mov	cx, 2		; head 0
 13455                                  					; cylinder 0, sector 2
 13456 000008AE E80500                  		call	read_sector
 13457 000008B1 7202                    		jb	short bad_fat_ret
 13458 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 13459                                  bad_fat_ret:				
 13460 000008B5 C3                      		retn
 13461                                  
 13462                                  ; =============== S U B	R O U T	I N E =======================================
 13463                                  
 13464                                  ; 15/10/2022
 13465                                  
 13466                                  ; ---------------------------------------------------------------------------
 13467                                  ; read a single sector into the temp buffer.
 13468                                  ; perform three retries in case of error.
 13469                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 13470                                  ;		cx has sector and cylinder
 13471                                  ;		dh has head
 13472                                  ;		es:di has bds
 13473                                  ;		ds has Bios_Data
 13474                                  ;
 13475                                  ;   outputs:	carry clear
 13476                                  ;		    Bios_Data:bx point to sector
 13477                                  ;		       (note: some callers assume location of buffer)
 13478                                  ;
 13479                                  ;		carry set
 13480                                  ;		    ax has rom error code
 13481                                  ;
 13482                                  ; register bp is preserved.
 13483                                  ; ---------------------------------------------------------------------------
 13484                                  
 13485                                  ; 10/03/2019 - Retro DOS v4.0
 13486                                  ; 22/12/2023 - Retro DOS v5.0
 13487                                  
 13488                                  		; 19/10/2022
 13489                                  read_sector:
 13490 000008B6 55                      		push	bp
 13491 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 13492 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13493 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 13494                                  rd_ret:
 13495 000008C1 06                      		push	es
 13496 000008C2 1E                      		push	ds
 13497 000008C3 07                      		pop	es
 13498 000008C4 B80102                  		mov	ax, 201h
 13499 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13500                                  					; AL = number of sectors to read, CH = track, CL = sector
 13501                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13502                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13503 000008C9 07                      		pop	es
 13504 000008CA 734A                    		jnb	short okret2
 13505                                  rd_rty:
 13506 000008CC E81205                  		call	again		; reset	disk, decrement	bp, preserve ax
 13507 000008CF 7442                    		jz	short err_rd_ret
 13508                                  
 13509                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13510 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 13511                                  		;test	byte [es:di+23h], 1
 13512                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 13513                                  					; fnon_removable
 13514 000008D6 75E9                    		jnz	short rd_ret
 13515 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13516 000008DD 7510                    		jnz	short rd_skip1_dpt
 13517 000008DF 50                      		push	ax
 13518 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 13519 000008E1 C536[2D01]              		lds	si, [dpt]
 13520                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13521                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 13522                                  		;			; NORMSETTLE
 13523                                  		; 12/12/2022
 13524 000008E5 B00F                    		mov	al, 15
 13525 000008E7 864409                  		xchg	al, [si+9]
 13526                                  		; 
 13527 000008EA 1F                      		pop	ds
 13528 000008EB A2[2A01]                		mov	[save_head_sttl], al
 13529 000008EE 58                      		pop	ax
 13530                                  rd_skip1_dpt:
 13531 000008EF 06                      		push	es
 13532 000008F0 1E                      		push	ds
 13533 000008F1 07                      		pop	es
 13534 000008F2 B80102                  		mov	ax, 201h
 13535 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13536                                  					; AL = number of sectors to read, CH = track, CL = sector
 13537                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13538                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13539 000008F7 07                      		pop	es
 13540 000008F8 9C                      		pushf
 13541 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13542 000008FE 750E                    		jnz	short rd_skip2_dpt
 13543 00000900 50                      		push	ax
 13544 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 13545 00000904 1E                      		push	ds
 13546 00000905 C536[2D01]              		lds	si, [dpt]
 13547 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13548 0000090C 1F                      		pop	ds
 13549 0000090D 58                      		pop	ax
 13550                                  rd_skip2_dpt:
 13551 0000090E 9D                      		popf
 13552 0000090F 7305                    		jnb	short okret2
 13553 00000911 EBB9                    		jmp	short rd_rty
 13554                                  ; ---------------------------------------------------------------------------
 13555                                  
 13556                                  err_rd_ret:
 13557 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 13558                                  					; return error
 13559 00000915 F9                      		stc
 13560                                  
 13561                                  ; update information pertaining to last drive accessed, time of access, last
 13562                                  ; track accessed in that drive.
 13563                                  
 13564                                  okret2:
 13565 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 13566 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 13567                                  		
 13568                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13569 0000091E 26886D78                		mov	[es:di+78h], ch
 13570                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 13571                                  					; save last track accessed on this drive
 13572                                  					; preserve flags in case error occurred
 13573 00000922 9C                      		pushf
 13574 00000923 E89B04                  		call	set_tim
 13575 00000926 9D                      		popf			; restore flags
 13576 00000927 5D                      		pop	bp
 13577 00000928 C3                      		retn
 13578                                  
 13579                                  ;----------------------------------------------------------------------------
 13580                                  ;	disk open/close routines
 13581                                  ;----------------------------------------------------------------------------
 13582                                  
 13583                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 13584 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 13585 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 13586 00000930 E871FC                  		call	SetDrive	; get bds for drive
 13587                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13588 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 13589                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 13590                                  dsk_open_exit:
 13591                                  		; 10/12/2022
 13592                                  		; cf = 0			
 13593                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13594                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13595 00000937 C3                      		retn
 13596                                  ; ---------------------------------------------------------------------------
 13597                                  
 13598                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 13599 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 13600 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 13601 0000093F E862FC                  		call	SetDrive	; get bds for drive
 13602                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13603 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 13604                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13605 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 13606                                  		; 22/12/2023
 13607 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 13608                                  		;dec	word [es:di+20h]
 13609                                  exitjx:
 13610                                  		; 10/12/2022
 13611                                  		; cf = 0
 13612                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13613                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13614 0000094D C3                      		retn
 13615                                  
 13616                                  ;----------------------------------------------------------------------------
 13617                                  ;		disk removable routine
 13618                                  ;----------------------------------------------------------------------------
 13619                                  
 13620                                  		; al is	unit #
 13621                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 13622 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 13623                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13624                                  		;test	byte [es:di+BDS.flags], fnon_removable
 13625 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 13626 00000956 74F5                    		jz	short exitjx
 13627                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 13628                                  		;;jnz	short x_bus_exit ; non_rem
 13629                                  		;jnz	short non_rem	; 15/10/2022
 13630                                  		;; 10/12/2022
 13631                                  		;; cf = 0
 13632                                  		;;clc			; CF is already ZERO here
 13633                                  		;			; 15/10/2022
 13634                                  		;retn
 13635                                  ; ---------------------------------------------------------------------------
 13636                                  
 13637                                  non_rem:
 13638                                  x_bus_exit:
 13639 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 13640                                  					; return busy status
 13641 0000095A F9                      		stc
 13642                                  dsk_ret:
 13643 0000095B C3                      		retn
 13644                                  
 13645                                  ;----------------------------------------------------------------------------
 13646                                  ;		disk i/o routines
 13647                                  ;----------------------------------------------------------------------------
 13648                                  
 13649                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 13650                                  		;mov	word [wrtverify], 103h
 13651                                  		; 19/10/2022
 13652 0000095C C706[2001]0301          		mov	word [rflag], 103h
 13653                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 13654 00000962 EB06                    		jmp	short dsk_cl
 13655                                  ; ---------------------------------------------------------------------------
 13656                                  
 13657                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 13658                                  		;mov	word [wrtverify], 3
 13659                                  		; 19/10/2022
 13660 00000964 C706[2001]0300          		mov	word [rflag], 3
 13661                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 13662                                  dsk_cl:
 13663 0000096A E8A400                  		call	diskio		; romwrite
 13664                                  ; ---------------------------------------------------------------------------
 13665                                  
 13666                                  dsk_io:
 13667 0000096D 73EC                    		jnb	short dsk_ret
 13668 0000096F E965F7                  		jmp	bc_err_cnt
 13669                                  ; ---------------------------------------------------------------------------
 13670                                  
 13671                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 13672 00000972 E89700                  		call	diskrd
 13673 00000975 EBF6                    		jmp	short dsk_io
 13674                                  
 13675                                  ; =============== S U B	R O U T	I N E =======================================
 13676                                  
 13677                                  ; 15/10/2022
 13678                                  ; 10/03/2019 - Retro DOS v4.0
 13679                                  ; 22/12/2023 - Retro DOS v5.0
 13680                                  
 13681                                  ;-----------------------------------------------------------
 13682                                  ; miscellaneous odd jump routines. 
 13683                                  ; moved out of mainline for speed.
 13684                                  
 13685                                  ; if we have a system where we have virtual drives, we need 
 13686                                  ; to prompt the user to place the correct disk in the drive.
 13687                                  ;
 13688                                  ;	assume es:di -> bds, ds:->Bios_Data
 13689                                  ;-----------------------------------------------------------
 13690                                  
 13691                                  		; 19/10/2022
 13692                                  checksingle:
 13693 00000977 50                      		push	ax
 13694 00000978 53                      		push	bx
 13695                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13696 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 13697                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 13698                                  
 13699                                  ; if hard drive, cannot change disk.
 13700                                  ; if current owner of physical drive, no need to change diskette.
 13701                                  
 13702 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 13703 00000980 7573                    		jnz	short singleret
 13704 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 13705                                  					; is there a drive sharing this	physical drive?
 13706 00000985 746E                    		jz	short singleret
 13707                                  
 13708                                  ; look for the previous owner of this physical drive
 13709                                  ; and reset its ownership flag.
 13710                                  
 13711 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13712                                  					; get physical drive number
 13713 0000098B 06                      		push	es		; preserve pointer to current bds
 13714 0000098C 57                      		push	di
 13715 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 13716                                  scan_list:
 13717 00000991 26384504                		cmp	[es:di+4], al
 13718 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 13719 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 13720                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13721 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 13722                                  		;test	[es:di+23h], bl
 13723 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 13724 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 13725                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 13726 000009A3 5F                      		pop	di		; restore pointer to current bds
 13727 000009A4 07                      		pop	es
 13728 000009A5 26085D3F                		or	[es:di+3Fh], bl
 13729                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 13730                                  
 13731                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 13732                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 13733                                  ; in this case.
 13734 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 13735 000009AE 7517                    		jnz	short not_fsetowner
 13736                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 13737 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 13738 000009B5 753E                    		jnz	short singleret
 13739 000009B7 268A4505                		mov	al, [es:di+5]
 13740                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 13741                                  					; get the DOS drive letter
 13742 000009BB 06                      		push	es
 13743 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 13744 000009C0 26A20405                		mov	[es:LSTDRV], al
 13745                                  		;mov	es:504h, al	; [es:LSTDRV]
 13746                                  					; set up sdsb
 13747 000009C4 07                      		pop	es		; restore bds pointer
 13748 000009C5 EB2E                    		jmp	short singleret
 13749                                  ; ---------------------------------------------------------------------------
 13750                                  
 13751                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 13752                                  ; we now check to see if we are in a single drive system and the application
 13753                                  ; has "cleverly" diddled the sdsb
 13754                                  
 13755                                  not_fsetowner:
 13756 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 13757 000009CC 7517                    		jnz	short ignore_sdsb
 13758 000009CE 50                      		push	ax
 13759 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 13760 000009D3 88C4                    		mov	ah, al
 13761 000009D5 06                      		push	es
 13762 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 13763 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 13764                                  		;xchg	al, es:504h	; [es:LSTDRV]
 13765                                  					; then swap(curr_drv,req_drv)
 13766 000009DF 07                      		pop	es
 13767 000009E0 38C4                    		cmp	ah, al		; else
 13768 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 13769 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 13770                                  ignore_sdsb:
 13771 000009E5 E8B310                  		call	swpdsk
 13772 000009E8 EB0B                    		jmp	short singleret
 13773                                  ; ---------------------------------------------------------------------------
 13774                                  
 13775                                  scan_skip:
 13776 000009EA 26C43D                  		les	di, [es:di]
 13777                                  		;les	di, es:[di]	; [es:di+BDS.link]
 13778                                  					; go to	next bds
 13779 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 13780 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 13781 000009F2 F9                      		stc
 13782 000009F3 5F                      		pop	di		; restore current bds
 13783 000009F4 07                      		pop	es
 13784                                  singleret:
 13785 000009F5 5B                      		pop	bx
 13786 000009F6 58                      		pop	ax
 13787 000009F7 C3                      		retn
 13788                                  
 13789                                  ; 22/12/2023
 13790                                  %if 0
 13791                                  ; ---------------------------------------------------------------------------
 13792                                  
 13793                                  baddrive:
 13794                                  		mov	al, 8		; sector not found
 13795                                  		jmp	short baddrive_ret
 13796                                  %endif
 13797                                  
 13798                                  ; ---------------------------------------------------------------------------
 13799                                  
 13800                                  unformatteddrive:
 13801 000009F8 B007                    		mov	al, 7		; unknown media
 13802                                  ;baddrive_ret:
 13803 000009FA F9                      		stc
 13804                                  ; ---------------------------------------------------------------------------
 13805                                  
 13806                                  ioret:
 13807 000009FB C3                      		retn
 13808                                  
 13809                                  ; ---------------------------------------------------------------------------
 13810                                  		
 13811                                  		; 22/12/2023 - Retro DOS v5.0
 13812                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 13813                                  
 13814 000009FC 10                      LBA_Packet:	db 16			; ...
 13815                                  					; DAP buffer
 13816 000009FD 00                                      db 0
 13817 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 13818 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 13819 00000A04 00000000                dap_lba_value:	dd 0			; ...
 13820 00000A08 00000000                		dd 0
 13821                                  
 13822                                  ; ---------------------------------------------------------------------------
 13823                                  
 13824                                  ; 15/10/2022
 13825                                  
 13826                                  ; ---------------------------------------------------------------------------
 13827                                  ;	disk i/o handler
 13828                                  ;
 13829                                  ;	al = drive number (0-6)
 13830                                  ;	ah = media descriptor
 13831                                  ;	cx = sector count
 13832                                  ;	dx = first sector (low)
 13833                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 13834                                  ;	ds = cs
 13835                                  ;	es:di = transfer address
 13836                                  ;	[rflag]=operation (2=read, 3=write)
 13837                                  ;	[verify]=1 for verify after write
 13838                                  ;
 13839                                  ;	if successful carry flag = 0
 13840                                  ;	  else cf=1 and al contains error code
 13841                                  ; ---------------------------------------------------------------------------
 13842                                  
 13843                                  		; 12/12/2023
 13844                                  		; ds = biosdata segment (cs = bioscode segment)
 13845                                  diskrd:	
 13846                                  		;mov	ds:rflag, 2	; romread
 13847                                  		; 19/10/2022
 13848 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 13849                                  
 13850                                  ; =============== S U B	R O U T	I N E =======================================
 13851                                  
 13852                                  		; 22/12/2023 - Retro DOS v5.0
 13853                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 13854                                  ; 22/12/2023
 13855                                  %if 0
 13856                                  		; 19/10/2022
 13857                                  diskio:
 13858                                  		mov	bx, di		; es:bx	= transfer address
 13859                                  		mov	[xfer_seg], es	; save transfer	segment
 13860                                  		call	SetDrive
 13861                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 13862                                  		mov	[medbyt], al
 13863                                  		;jcxz	short ioret
 13864                                  		jcxz	ioret
 13865                                  
 13866                                  ; see if the media is formatted or not by checking the flags field in
 13867                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 13868                                  ; go to the error exit at label unformatteddrive.
 13869                                  
 13870                                  		test	byte [es:di+24h], 2
 13871                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 13872                                  					; unformatted_media
 13873                                  		jnz	short unformatteddrive
 13874                                  		mov	[seccnt], cx	; save sector count
 13875                                  		mov	[spsav], sp	; save sp
 13876                                  
 13877                                  ; ensure that we are trying to access valid sectors on the drive
 13878                                  
 13879                                  		mov	ax, dx
 13880                                  		xor	si, si ; 0
 13881                                  		add	dx, cx
 13882                                  		;adc	si, 0
 13883                                  		; 02/09/2023 (PCDOS 7.1)
 13884                                  		rcl	si, 1
 13885                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 13886                                  					; 32 bit sector ?
 13887                                  		jz	short sanity32
 13888                                  		;cmp	si, 0
 13889                                  		; 02/09/2023
 13890                                  		or	si, si
 13891                                  		jnz	short baddrive
 13892                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 13893                                  		ja	short baddrive
 13894                                  		jmp	short sanityok
 13895                                  ; ---------------------------------------------------------------------------
 13896                                  
 13897                                  sanity32:
 13898                                  		add	si, [start_sec_h]
 13899                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 13900                                  		jb	short sanityok
 13901                                  		ja	short baddrive
 13902                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 13903                                  		ja	short baddrive
 13904                                  sanityok:
 13905                                  		mov	dx, [start_sec_h]
 13906                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 13907                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 13908                                  
 13909                                  ; now dx;ax have the physical first sector.
 13910                                  ; since the following procedures is going to destroy ax, let's
 13911                                  ; save it temporarily to saved_word.
 13912                                  
 13913                                  		mov	[saved_word], ax ; save the sector number (low)
 13914                                  
 13915                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 13916                                  ; will do it because we will skip the set up stuff with hard disks.
 13917                                  
 13918                                  		push	es
 13919                                  		;mov	es, [zeroseg]
 13920                                  		; 02/09/2023
 13921                                  		xor	si, si ; 0
 13922                                  		mov	es, si
 13923                                  		les	si, [es:DSKADR]
 13924                                  		;les	si, es:78h	; [es:DSKADR]
 13925                                  					; current disk parm table
 13926                                  		mov	[dpt], si
 13927                                  		mov	[dpt+2], es
 13928                                  		pop	es
 13929                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13930                                  					; fnon_removable
 13931                                  		jnz	short skip_setup
 13932                                  		call	checksingle
 13933                                  
 13934                                  ; check to see if we have previously noted a change line. the routine
 13935                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 13936                                  ; the proper error code.
 13937                                  
 13938                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 13939                                  		jz	short diskio_nochangeline ; brif not
 13940                                  		call	checklatchio	; will do a sneaky pop stack return
 13941                                  					; if a disk error occurs
 13942                                  diskio_nochangeline:			
 13943                                  		call	iosetup		; set up tables	and variables for i/o
 13944                                  
 13945                                  ; now the settle values are correct for the following code
 13946                                  
 13947                                  skip_setup:
 13948                                  
 13949                                  ; 32 bit sector calculation.
 13950                                  ; dx:[saved_word] = starting sector number.
 13951                                  				
 13952                                  		mov	ax, dx
 13953                                  		xor	dx, dx
 13954                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13955                                  					 ; divide by sec per track
 13956                                  		; 02/09/2023
 13957                                  		mov	cx, [es:di+13h]
 13958                                  		div	cx
 13959                                  		mov	[temp_h], ax
 13960                                  		mov	ax, [saved_word]
 13961                                  		div	cx ; 02/09/2023
 13962                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13963                                  					; now, [temp_h]:ax = track #, dx = sector
 13964                                  		;inc	dl		; sector number	is 1 based.
 13965                                  		; 18/12/2022
 13966                                  		inc	dx
 13967                                  		mov	[cursec], dl	; save current sector
 13968                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 13969                                  					; get number of	heads
 13970                                  		push	ax
 13971                                  		xor	dx, dx
 13972                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 13973                                  		div	cx
 13974                                  		mov	[temp_h], ax
 13975                                  		pop	ax
 13976                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 13977                                  		cmp	word [temp_h], 0
 13978                                  		ja	short baddrive_brdg
 13979                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 13980                                  		ja	short baddrive_brdg
 13981                                  		mov	[curhd], dl	; save current head
 13982                                  		mov	[curtrk], ax	; save current track
 13983                                  
 13984                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 13985                                  ; violations here. not true. we perform the operation as if everything is
 13986                                  ; symmetric; let the int 13 handler worry about the dma violations.
 13987                                  
 13988                                  		mov	ax, [seccnt]
 13989                                  		call	block		; (cas - call/ret)
 13990                                  		;call	done
 13991                                  		;retn
 13992                                  		; 18/12/2022
 13993                                  		jmp	done
 13994                                  %else
 13995                                  		;;;	; 22/12/2023
 13996                                  diskio:
 13997 00000A11 89FB                    		mov	bx, di		; al = drive number
 13998                                  					; cx = sector count
 13999                                  					; dx = first sector (low)
 14000                                  					; [start_sec_h] = first sector (high)
 14001                                  					;
 14002                                  					; es:bx = transfer address
 14003 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 14004 00000A17 E88AFB                  		call	SetDrive
 14005 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 14006 00000A1E A2[1F01]                		mov	[medbyt], al
 14007 00000A21 E3D8                    		jcxz	ioret
 14008                                  
 14009                                  ; see if the media is formatted or not by checking the flags field in
 14010                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 14011                                  ; go to the error exit at label unformatteddrive.
 14012                                  
 14013 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 14014                                  					; unformatted_media
 14015 00000A28 75CE                    		jnz	short unformatteddrive
 14016 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 14017 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 14018                                  
 14019                                  ; ensure that we are trying to access valid sectors on the drive
 14020                                  
 14021 00000A32 89D0                    		mov	ax, dx
 14022 00000A34 31F6                    		xor	si, si ; 0
 14023 00000A36 01CA                    		add	dx, cx
 14024 00000A38 D1D6                    		rcl	si, 1
 14025 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14026                                  					; > 32 bit sector ?
 14027 00000A3F 740E                    		jz	short sanity32
 14028 00000A41 09F6                    		or	si, si
 14029 00000A43 7506                    		jnz	short baddrive
 14030 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14031                                  		;ja	short baddrive
 14032                                  		;jmp	short sanityok
 14033                                  		; 22/12/2023
 14034 00000A49 7616                    		jna	short sanityok
 14035                                  ; 29/12/2023
 14036                                  ; 22/12/2023
 14037                                  ;%if 1
 14038                                  ; ---------------------------------------------------------------------------
 14039                                  
 14040                                  baddrive:
 14041 00000A4B B008                    		mov	al, 8		; sector not found
 14042                                  		;jmp	short baddrive_ret
 14043                                  ; ---------------------------------------------------------------------------
 14044                                  ;unformatteddrive:
 14045                                  		;mov	al, 7		; unknown media
 14046                                  baddrive_ret:
 14047 00000A4D F9                      		stc
 14048                                  ;ioret:
 14049 00000A4E C3                      		retn
 14050                                  ;%endif
 14051                                  
 14052                                  ; ---------------------------------------------------------------------------
 14053                                  
 14054                                  sanity32:
 14055 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 14056 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 14057 00000A57 7208                    		jb	short sanityok
 14058 00000A59 77F0                    		ja	short baddrive
 14059 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 14060 00000A5F 77EA                    		ja	short baddrive
 14061                                  sanityok:
 14062 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 14063 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14064 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14065                                  
 14066                                  ; now dx;ax have the physical first sector.
 14067                                  ; since the following procedures is going to destroy ax, let's
 14068                                  ; save it temporarily to saved_word.
 14069                                  
 14070 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 14071                                  
 14072                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 14073                                  ; will do it because we will skip the set up stuff with hard disks.
 14074                                  
 14075 00000A70 06                      		push	es
 14076 00000A71 31F6                    		xor	si, si ; 0
 14077 00000A73 8EC6                    		mov	es, si
 14078                                  		;les	si, dword ptr es:78h
 14079 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 14080                                  					; [es:DSKADR] - current disk parm table
 14081 00000A7A 8936[2D01]              		mov	[dpt], si
 14082 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 14083 00000A82 07                      		pop	es
 14084 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14085 00000A88 7510                    		jnz	short chk_13h_ext_flag
 14086 00000A8A E8EAFE                  		call	checksingle
 14087                                  
 14088                                  ; check to see if we have previously noted a change line. the routine
 14089                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 14090                                  ; the proper error code.
 14091                                  
 14092 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 14093 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 14094 00000A94 E8D210                  		call	checklatchio	; will do a sneaky pop stack return
 14095                                  					; if a disk error occurs
 14096                                  diskio_nochangeline:
 14097 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 14098                                  
 14099                                  chk_13h_ext_flag:
 14100 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 14101                                  					; LBA read/write flag
 14102 00000A9F 7539                    		jnz	short set_lbarw_1
 14103                                  		;jmp	skip_setup
 14104                                  		; 22/12/2023
 14105                                  ; ---------------------------------------------------------------------------
 14106                                  
 14107                                  ; now the settle values are correct for the following code
 14108                                  
 14109                                  skip_setup:
 14110                                  
 14111                                  ; 32 bit sector calculation.
 14112                                  ; dx:[saved_word] = starting sector number.
 14113                                  
 14114                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 14115 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 14116 00000AA2 31D2                    		xor	dx, dx
 14117 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14118                                  					; divide by sec per track
 14119 00000AA8 F7F1                    		div	cx
 14120 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 14121 00000AAB A1[9E04]                		mov	ax, [saved_word]
 14122 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 14123                                  					; now, bp:ax = track #, dx = sector
 14124                                  					; sector number is 1 based.
 14125 00000AB0 42                      		inc	dx
 14126 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 14127 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 14128                                  					; get number of heads
 14129                                  		; 22/12/2023
 14130                                  		;push	ax ; *
 14131 00000AB9 31D2                    		xor	dx, dx
 14132 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 14133 00000ABC F7F1                    		div	cx
 14134 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 14135                                  		;pop	ax ; *
 14136 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 14137 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 14138                                  		;pop	bp ; ! ; 22/12/2023
 14139                                  		;jnz	short baddrive_brdg
 14140                                  		; 22/12/2023
 14141 00000AC3 7586                    		jnz	short baddrive
 14142                                  
 14143                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 14144                                  		;jnb	short baddrive_brdg
 14145                                  		; 22/12/2023
 14146 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 14147 00000AC8 7381                    		jnb	short baddrive 
 14148                                  
 14149 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 14150 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 14151                                  
 14152                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 14153                                  ; violations here. not true. we perform the operation as if everything is
 14154                                  ; symmetric; let the int 13 handler worry about the dma violations.
 14155                                  
 14156 00000AD1 A1[2201]                		mov	ax, [seccnt]
 14157 00000AD4 E81F01                  		call	block
 14158                                  		;call	done
 14159                                  		;retn
 14160                                  		; 22/12/2023
 14161 00000AD7 E9E500                  		jmp	done
 14162                                  		
 14163                                  ; ---------------------------------------------------------------------------
 14164                                  
 14165                                  set_lbarw_1:
 14166 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 14167                                  					 ; (logical dos drive/partition)
 14168 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 14169                                  					    ; logical dos partition
 14170 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 14171 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 14172 00000AE9 7408                    		jz	short set_lbarw_2
 14173 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14174 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14175                                  
 14176                                  set_lbarw_2:
 14177 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 14178 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 14179 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 14180 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 14181 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 14182 00000B08 A1[2201]                		mov	ax, [seccnt]
 14183 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 14184 00000B0F BD0500                  		mov	bp, 5
 14185 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14186 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 14187                                  
 14188                                  set_lbarw_3:
 14189 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14190 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14191 00000B22 80C440                  		add	ah, 40h
 14192 00000B25 30C0                    		xor	al, al
 14193 00000B27 1E                      		push	ds
 14194 00000B28 0E                      		push	cs
 14195 00000B29 1F                      		pop	ds
 14196 00000B2A BE[FC09]                		mov	si, LBA_Packet
 14197 00000B2D CD13                    		int	13h		; LBA read/write
 14198 00000B2F 1F                      		pop	ds
 14199 00000B30 731A                    		jnc	short set_lbarw_7
 14200 00000B32 E8AC02                  		call	again
 14201                                  set_lbarw_9:
 14202 00000B35 7503                    		jnz	short set_lbarw_4
 14203 00000B37 E92B02                  		jmp	harderr
 14204                                  ; ---------------------------------------------------------------------------
 14205                                  
 14206                                  set_lbarw_4:
 14207                                  ;set_lbarw_9:	; 22/12/2023
 14208 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 14209 00000B3D 7505                    		jnz	short set_lbarw_5
 14210 00000B3F BD0100                  		mov	bp, 1
 14211                                  		;jmp	short set_lbarw_6
 14212                                  		; 17/04/2024
 14213 00000B42 EBD6                    		jmp	short set_lbarw_3
 14214                                  ; ---------------------------------------------------------------------------
 14215                                  
 14216                                  set_lbarw_5:
 14217                                  set_lbarw_10:	; 22/12/2023
 14218 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14219                                  set_lbarw_6:
 14220                                  set_lbarw_11:
 14221 00000B4A EBCE                    		jmp	short set_lbarw_3
 14222                                  ; ---------------------------------------------------------------------------
 14223                                  
 14224                                  set_lbarw_7:
 14225 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 14226 00000B52 7523                    		jnz	short set_lbarw_12
 14227 00000B54 B444                    		mov	ah, 44h
 14228 00000B56 1E                      		push	ds
 14229 00000B57 0E                      		push	cs
 14230 00000B58 1F                      		pop	ds
 14231 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 14232                                  					;  (DL - drive, [SI - disk address packet)
 14233 00000B5B 1F                      		pop	ds
 14234 00000B5C 7319                    		jnc	short set_lbarw_12
 14235 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 14236 00000B61 7506                    		jnz	short set_lbarw_8
 14237 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14238                                  ;set_lbarw_8:
 14239 00000B67 740E                    		jz	short set_lbarw_12
 14240                                  set_lbarw_8:
 14241 00000B69 E8CF07                  		call	ResetDisk
 14242 00000B6C 80FC11                  		cmp	ah, 11h
 14243 00000B6F 74D9                    		jz	short set_lbarw_11
 14244 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 14245                                  		;jnz	short set_lbarw_9
 14246                                  		;jmp	harderr
 14247                                  		; 22/12/2023
 14248 00000B75 EBBE                    		jmp	short set_lbarw_9
 14249                                  
 14250                                  ; ---------------------------------------------------------------------------
 14251                                  ;		; 22/12/2023
 14252                                  ;set_lbarw_9:
 14253                                  ;		cmp	ah, 0CCh
 14254                                  ;		jnz	short set_lbarw_10
 14255                                  ;		mov	bp, 1
 14256                                  ;		jmp	short set_lbarw_11
 14257                                  ; ---------------------------------------------------------------------------
 14258                                  ;		; 22/12/2023
 14259                                  ;set_lbarw_10:
 14260                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14261                                  ;set_lbarw_11:
 14262                                  ;		jmp	short set_lbarw_3
 14263                                  ; ---------------------------------------------------------------------------
 14264                                  
 14265                                  set_lbarw_12:
 14266 00000B77 31C0                    		xor	ax, ax
 14267                                  skip_dpt_setting:	; 23/12/2023
 14268 00000B79 C3                      		retn
 14269                                  		;;;	; 22/12/2023
 14270                                  %endif
 14271                                  
 14272                                  ; ---------------------------------------------------------------------------
 14273                                  
 14274                                  		; 22/12/2023
 14275                                  ;baddrive_brdg:
 14276                                  		;jmp	baddrive
 14277                                  
 14278                                  ; =============== S U B	R O U T	I N E =======================================
 14279                                  
 14280                                  ;--------------------------------------------------------------
 14281                                  ; set the drive-last-accessed flag for diskette only.
 14282                                  ; we know that the hard disk will not be removed.
 14283                                  ; es:di -> current bds.
 14284                                  ; ds -> Bios_Data
 14285                                  ; ax,cx,si are destroyed.
 14286                                  ;--------------------------------------------------------------
 14287                                  
 14288                                  		; 23/12/2023 - Retro DOS v5.0
 14289                                  
 14290                                  		; 19/10/2022
 14291                                  iosetup:
 14292 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14293 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 14294                                  
 14295                                  ; determine proper head settle values
 14296                                  
 14297 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14298 00000B86 75F1                    		jnz	short skip_dpt_setting
 14299 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 14300 00000B8B 1E                      		push	ds
 14301 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14302 00000B90 884404                  		mov	[si+4],	al
 14303                                  		
 14304                                  		;; 23/12/2023
 14305                                  		;mov	ah, al
 14306                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14307                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 14308                                  		;pop	ds
 14309                                  		;mov	[motorstartup], al
 14310                                  		;mov	[save_eot], ah
 14311                                  		; 06/04/2024
 14312 00000B93 8A640A                  		mov	ah,[si+10]
 14313 00000B96 1F                      		pop	ds
 14314 00000B97 8826[2601]              		mov	[motorstartup], ah
 14315 00000B9B A2[2B01]                		mov	[save_eot], al
 14316                                  
 14317                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 14318                                  ; motor start time to 4. this checking for every i/o is going to affect
 14319                                  ; performance across the board, but is necessary!!
 14320                                  
 14321 00000B9E 1E                      		push	ds
 14322 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14323                                  		; 23/12/2023  - Retro DOS v5.0
 14324 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 14325                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14326                                  					; ffSmall
 14327 00000BA8 7505                    		jnz	short motor_start_ok
 14328 00000BAA B004                    		mov	al, 4
 14329 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14330                                  motor_start_ok:
 14331                                  
 14332                                  ; ds:si now points to disk parameter table.
 14333                                  ; get current settle and set fast settle
 14334                                  
 14335                                  		;xor	al, al
 14336                                  		;inc	al		; ibm wants fast settle	to be 1
 14337                                  		; 18/12/2022
 14338 00000BAF 31C0                    		xor	ax, ax
 14339 00000BB1 40                      		inc	ax
 14340 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14341                                  					; get settle and set up	for fast
 14342 00000BB5 1F                      		pop	ds
 14343 00000BB6 A2[2701]                		mov	[settlecurrent], al
 14344 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 14345                                  					; someone has diddled the settle
 14346 00000BBB A2[2801]                		mov	[settleslow], al
 14347                                  		; 23/12/2023
 14348                                  ;skip_dpt_setting:
 14349 00000BBE C3                      		retn
 14350                                  
 14351                                  ; =============== S U B	R O U T	I N E =======================================
 14352                                  
 14353                                  ;--------------------------------------------------------------
 14354                                  ; set time of last access, and reset default values in the dpt.
 14355                                  ;
 14356                                  ;	  note: trashes (at least) si
 14357                                  ;--------------------------------------------------------------
 14358                                  
 14359                                  		; 23/12/2023 - Retro DOS v5.0
 14360                                  
 14361                                  		; 19/10/2022
 14362                                  done:		
 14363                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14364                                  					; fnon_removable
 14365                                  		; 23/12/2023
 14366 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14367 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 14368 00000BC6 E8F801                  		call	set_tim
 14369                                  ;diddleback:
 14370                                  ; 09/12/2022
 14371                                  diddle_back:
 14372 00000BC9 9C                      		pushf
 14373 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14374 00000BCF 7523                    		jnz	short nodiddleback
 14375 00000BD1 50                      		push	ax
 14376 00000BD2 06                      		push	es
 14377 00000BD3 C436[2D01]              		les	si, [dpt]
 14378 00000BD7 A0[2B01]                		mov	al, [save_eot]
 14379 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 14380 00000BDE A0[2701]                		mov	al, [settlecurrent]
 14381 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 14382 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14383 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 14384 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 14385 00000BF2 07                      		pop	es
 14386 00000BF3 58                      		pop	ax
 14387                                  nodiddleback:
 14388 00000BF4 9D                      		popf
 14389                                  ddbx:
 14390 00000BF5 C3                      		retn
 14391                                  
 14392                                  ; =============== S U B	R O U T	I N E =======================================
 14393                                  
 14394                                  ;--------------------------------------------------------------
 14395                                  ;read the number of sectors specified in ax,
 14396                                  ;handling track boundaries
 14397                                  ;es:di -> bds for this drive
 14398                                  ;--------------------------------------------------------------
 14399                                  
 14400                                  		; 23/12/2023 - Retro DOS v5.0
 14401                                  
 14402                                  		; 19/10/2022
 14403                                  block:	
 14404 00000BF6 09C0                    		or	ax, ax
 14405 00000BF8 74FB                    		jz	short ddbx
 14406                                  		; 23/12/2023
 14407 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14408                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14409                                  					    ; fnon_removable
 14410 00000BFF 740D                    		jz	short block_floppy
 14411                                  
 14412                                  ; check	to see if multi	track operation	is allowed. if not
 14413                                  ; we have to go	to the block_floppy below to break up the operation.
 14414                                  
 14415 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 14416                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 14417 00000C06 7406                    		jz	short block_floppy
 14418 00000C08 E82800                  		call	Disk
 14419 00000C0B 31C0                    		xor	ax, ax
 14420 00000C0D C3                      		retn
 14421                                  ; ---------------------------------------------------------------------------
 14422                                  
 14423                                  block_floppy:
 14424                                  
 14425                                  ; read at most 1 track worth. perform minimization at sector / track
 14426                                  
 14427 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 14428                                  		;inc	cl
 14429                                  		; 23/12/2023
 14430 00000C12 41                      		inc	cx
 14431 00000C13 2A0E[3101]              		sub	cl, [cursec]
 14432 00000C17 30ED                    		xor	ch, ch
 14433 00000C19 39C8                    		cmp	ax, cx
 14434 00000C1B 7302                    		jnb	short gotmin
 14435 00000C1D 89C1                    		mov	cx, ax
 14436                                  gotmin:
 14437                                  
 14438                                  ; ax is the requested number of sectors to read
 14439                                  ; cx is the number that we can do on this track
 14440                                  
 14441 00000C1F 50                      		push	ax
 14442 00000C20 51                      		push	cx
 14443 00000C21 89C8                    		mov	ax, cx
 14444 00000C23 E80D00                  		call	Disk
 14445 00000C26 59                      		pop	cx
 14446 00000C27 58                      		pop	ax
 14447                                  
 14448                                  ; cx is the number of sectors just transferred
 14449                                  
 14450 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 14451 00000C2A D0E1                    		shl	cl, 1
 14452 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 14453 00000C2E EBC6                    		jmp	short block
 14454                                  dskerr_brdg:
 14455 00000C30 E9F400                  		jmp	dskerr
 14456                                  
 14457                                  ; =============== S U B	R O U T	I N E =======================================
 14458                                  
 14459                                  ; 15/10/2022
 14460                                  
 14461                                  ;--------------------------------------------------------------
 14462                                  ;perform disk i/o with retries
 14463                                  ; al = number of sectors (1-8, all on one track)
 14464                                  ; es:di point to drive parameters
 14465                                  ; xfer_seg:bx = transfer address 
 14466                                  ;		(must not cross a 64k physical boundary)
 14467                                  ; [rflag] = 2 if read, 3 if write
 14468                                  ; [verify] = 0 for normal, 1 for verify after write
 14469                                  ;--------------------------------------------------------------
 14470                                  
 14471                                  		; 18/04/2024
 14472                                  		; 23/12/2023 - Retro DOS v5.0
 14473                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 14474                                  
 14475                                  		; 19/10/2022
 14476                                  Disk:
 14477                                  
 14478                                  ; Check for hard disk format and
 14479                                  ; if TRUE then set max error count to 2
 14480                                  
 14481 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 14482                                  					; set up retry count
 14483                                  		; 18/04/2024
 14484                                  		;; 23/12/2023
 14485                                  		;mov	cl, [es:di+3Fh]
 14486                                  		;and	cx, 1
 14487 00000C36 26F6453F01              		test	byte [es:di+3Fh], 1
 14488                                  		;test	byte [es:di+23h], 1 
 14489                                  					; [es:di+BDS.flags], fnon_removable
 14490 00000C3B 7408                    		jz	short GetRdWrInd
 14491 00000C3D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 14492 00000C40 7403                    		jz	short GetRdWrInd
 14493 00000C42 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 14494                                  GetRdWrInd:				
 14495 00000C45 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14496 00000C49 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 14497 00000C4D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14498                                  ;retry:
 14499                                  ; 09/12/2022
 14500                                  _retry:
 14501 00000C51 50                      		push	ax
 14502 00000C52 8B16[3301]              		mov	dx, [curtrk]
 14503                                  		;; 23/12/2023
 14504                                  		;jcxz	disk_not_mini
 14505                                  		; 18/04/2024
 14506 00000C56 26F6453F01              		test	byte [es:di+3Fh], 1
 14507                                  		;test	byte [es:di+23h], 1
 14508 00000C5B 740B                    		jz	short disk_not_mini
 14509                                  
 14510                                  		; 23/12/2023
 14511 00000C5D 26837D7901              		cmp	word [es:di+79h], 1
 14512                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 14513                                  					; is this a mini disk? ((logical dos partition))
 14514 00000C62 7504                    		jnz	short disk_not_mini ; no. continue to next.
 14515                                  		; 23/12/2023
 14516 00000C64 2603557B                		add     dx, [es:di+7Bh]
 14517                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 14518                                  					; add hidden trks.
 14519                                  disk_not_mini:
 14520 00000C68 D0CE                    		ror	dh, 1
 14521 00000C6A D0CE                    		ror	dh, 1
 14522 00000C6C 0A36[3101]              		or	dh, [cursec]
 14523 00000C70 89D1                    		mov	cx, dx
 14524 00000C72 86CD                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 14525 00000C74 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 14526 00000C78 268A5504                		mov	dl, [es:di+4]	; physical drive number
 14527                                  					; [es:di+BDS.drivenum]
 14528                                  		; 23/12/2023
 14529 00000C7C 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 14530                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 14531 00000C81 7411                    		jz	short do_fast	; hard files use fast speed
 14532                                  
 14533                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 14534                                  ; this helps when we have just done a reset disk operation and the head has
 14535                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 14536                                  
 14537 00000C83 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 14538                                  		;jz	short do_writej
 14539                                  		; 23/12/2023
 14540 00000C88 746A                    		jz	short do_write
 14541 00000C8A 80FC02                  		cmp	ah, 2		; romread
 14542 00000C8D 7405                    		jz	short do_fast
 14543 00000C8F 80FC04                  		cmp	ah, 4		; romverify
 14544                                  		;jz	short do_fast
 14545                                  		; 23/12/2023
 14546 00000C92 7560                    		jnz	short do_write
 14547                                  ;do_writej:
 14548                                  
 14549                                  ; reads always fast, unless we have just done a disk reset operation
 14550                                  			
 14551                                  		;jmp	short do_write	; reads	always fast
 14552                                  ; ---------------------------------------------------------------------------
 14553                                  
 14554                                  do_fast:
 14555 00000C94 E80501                  		call	fastspeed	; change settle	mode
 14556                                  testerr:
 14557 00000C97 7297                    		jb	short dskerr_brdg
 14558                                  
 14559                                  		; 23/12/2023 Retro DOS v5.0
 14560                                  		; (PCDOS 7.1 IBMBIO.COM)
 14561 00000C99 83FD05                  		cmp	bp, 5		; is there retry ?
 14562 00000C9C 7505                    		jnz	short testerror	; yes
 14563 00000C9E 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 14564 00000CA1 748D                    		jz	short dskerr_brdg
 14565                                  testerror:
 14566                                  
 14567                                  ; set drive and track of last access
 14568                                  
 14569 00000CA3 8816[7600]              		mov	[step_drv], dl
 14570                                  		; 23/12/2023
 14571 00000CA7 26886D78                		mov	[es:di+78h], ch
 14572                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14573                                  no_set:
 14574                                  		;cmp	word [wrtverify], 103h
 14575 00000CAB 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 14576 00000CB1 7452                    		jz	short doverify
 14577                                  noverify:
 14578 00000CB3 58                      		pop	ax
 14579                                  
 14580                                  ; check the flags word in the bds to see if the drive is non removable
 14581                                  ; if not we needn't do anything special
 14582                                  ; if it is a hard disk then check to see if multi-track operation
 14583                                  ; is specified. if specified we don't have to calculate for the next
 14584                                  ; track since we are already done. so we can go to the exit of this routine.
 14585                                  
 14586                                  		; 23/12/2023
 14587 00000CB4 26F6453F01              		test	byte [es:di+3Fh], 1
 14588                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14589                                  					; fnon_removable
 14590 00000CB9 7407                    		jz	short its_removable
 14591 00000CBB F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 14592 00000CC0 7530                    		jnz	short disk_ret
 14593                                  its_removable:
 14594 00000CC2 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 14595 00000CC5 30E4                    		xor	ah, ah
 14596 00000CC7 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 14597 00000CCB 00C1                    		add	cl, al
 14598 00000CCD 880E[3101]              		mov	[cursec], cl
 14599 00000CD1 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 14600                                  					; see if sector/track limit reached
 14601 00000CD5 761B                    		jbe	short disk_ret
 14602 00000CD7 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 14603 00000CDC 8A36[3201]              		mov	dh, [curhd]
 14604 00000CE0 FEC6                    		inc	dh
 14605 00000CE2 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 14606 00000CE6 7206                    		jb	short noxor
 14607 00000CE8 30F6                    		xor	dh, dh
 14608 00000CEA FF06[3301]              		inc	word [curtrk]
 14609                                  noxor:
 14610 00000CEE 8836[3201]              		mov	[curhd], dh
 14611                                  disk_ret:
 14612 00000CF2 F8                      		clc
 14613 00000CF3 C3                      		retn
 14614                                  ; ---------------------------------------------------------------------------
 14615                                  
 14616                                  ; 15/10/2022
 14617                                  
 14618                                  ; 24/12/2023 - Retro DOS v5.0
 14619                                  
 14620                                  ;--------------------------------------------------------------
 14621                                  ; the request is for write. determine if we are talking about
 14622                                  ; the same track and drive. if so, use the fast speed.
 14623                                  ;--------------------------------------------------------------
 14624                                  
 14625                                  do_write:
 14626 00000CF4 3A16[7600]              		cmp	dl, [step_drv]
 14627 00000CF8 7506                    		jnz	short do_norm	; we have changed drives
 14628                                  		; 24/12/2023
 14629 00000CFA 263A6D78                		cmp	ch, [es:di+78h]
 14630                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 14631 00000CFE 7494                    		jz	short do_fast	; we are still on the same track
 14632                                  do_norm:
 14633 00000D00 E87500                  		call	normspeed
 14634 00000D03 EB92                    		jmp	short testerr
 14635                                  ; ---------------------------------------------------------------------------
 14636                                  
 14637                                  ;--------------------------------------------------------------
 14638                                  ; we have a verify request also. get state info and go verify
 14639                                  ;--------------------------------------------------------------
 14640                                  
 14641                                  doverify:
 14642 00000D05 58                      		pop	ax
 14643 00000D06 50                      		push	ax
 14644 00000D07 B404                    		mov	ah, 4
 14645 00000D09 E89000                  		call	fastspeed
 14646 00000D0C 73A5                    		jnb	short noverify
 14647                                  
 14648                                  ; check the error returned in ah to see if it is a soft ecc error.
 14649                                  ; if it is not we needn't do anything special. if it is a soft
 14650                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 14651                                  ; this retry count becomes 0 then we just ignore the error and go to
 14652                                  ; no_verify but if we can still try then we call the routine to reset
 14653                                  ; the disk and go to dskerr1 to retry the operation.
 14654                                  
 14655 00000D0E 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 14656 00000D11 750B                    		jnz	short not_softecc_err
 14657 00000D13 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14658 00000D17 749A                    		jz	short noverify	; no more retry
 14659 00000D19 E81F06                  		call	ResetDisk	; reset	disk
 14660 00000D1C EB3E                    		jmp	short dskerr1	; retry
 14661                                  ; ---------------------------------------------------------------------------
 14662                                  
 14663                                  not_softecc_err:			; other error.
 14664 00000D1E E81A06                  		call	ResetDisk
 14665 00000D21 FF0E[A304]              		dec	word [vretry_cnt]
 14666 00000D25 EB1C                    		jmp	short dskerr0
 14667                                  ; ---------------------------------------------------------------------------
 14668                                  
 14669                                  ;--------------------------------------------------------------
 14670                                  ; need to special case the change-line error ah=06h.
 14671                                  ; if we get this, we need to return it.
 14672                                  ;--------------------------------------------------------------
 14673                                  
 14674                                  dskerr:
 14675 00000D27 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 14676 00000D2C 7403                    		jz	short dskerr_nochangeline ; brif not
 14677 00000D2E E8BE0E                  		call	checkio
 14678                                  dskerr_nochangeline:
 14679 00000D31 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 14680 00000D36 7508                    		jnz	short dochkagain ; no more retry.
 14681 00000D38 BD0100                  		mov	bp, 1
 14682 00000D3B C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 14683                                  dochkagain:
 14684 00000D40 E89E00                  		call	again
 14685                                  dskerr0:
 14686 00000D43 7420                    		jz	short harderr
 14687                                  		; 24/12/2023
 14688 00000D45 26F6453F01              		test	byte [es:di+3Fh], 1
 14689                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14690                                  					; fnon_removable
 14691 00000D4A 7505                    		jnz	short skip_timeout_chk
 14692 00000D4C 80FC80                  		cmp	ah, 80h		; timeout?
 14693 00000D4F 7414                    		jz	short harderr
 14694                                  skip_timeout_chk:
 14695 00000D51 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 14696 00000D54 740A                    		jz	short write_fault_err ;	then, don't retry.
 14697 00000D56 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 14698                                  					; set soft_ecc_cnt back	to maxerr
 14699                                  dskerr1:
 14700 00000D5C 58                      		pop	ax		; restore sector count
 14701                                  		;jmp	retry
 14702                                  		; 09/12/2022
 14703 00000D5D E9F1FE                  		jmp	_retry
 14704                                  ; ---------------------------------------------------------------------------
 14705                                  
 14706                                  write_fault_err:
 14707 00000D60 BD0100                  		mov	bp, 1		; just retry only once
 14708                                  					; for write fault error.
 14709 00000D63 EBF7                    		jmp	short dskerr1
 14710                                  
 14711                                  		; fall into harderr
 14712                                  ; ---------------------------------------------------------------------------
 14713                                  
 14714                                  ; entry point for routines that call maperror themselves
 14715                                  
 14716                                  harderr:
 14717 00000D65 E84100                  		call	maperror
 14718                                  harderr2:
 14719 00000D68 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 14720                                  					; force a media check through rom
 14721 00000D6D 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 14722 00000D71 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 14723                                  
 14724                                  ; since we are performing a non-local goto, restore the disk parameters
 14725                                  
 14726                                  		;jmp	diddleback
 14727                                  		; 09/12/2022
 14728 00000D75 E951FE                  		jmp	diddle_back
 14729                                  
 14730                                  ; =============== S U B	R O U T	I N E =======================================
 14731                                  
 14732                                  ; change settle value from settlecurrent to whatever is appropriate
 14733                                  ; note that this routine is never called for a fixed disk.
 14734                                  
 14735                                  		; 19/10/2022
 14736                                  normspeed:
 14737 00000D78 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14738 00000D7D 751D                    		jnz	short fastspeed
 14739 00000D7F 06                      		push	es
 14740 00000D80 50                      		push	ax
 14741 00000D81 A0[2801]                		mov	al, [settleslow]
 14742 00000D84 C436[2D01]              		les	si, [dpt]	; current disk parm table
 14743 00000D88 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14744 00000D8C 58                      		pop	ax
 14745 00000D8D 07                      		pop	es
 14746 00000D8E E80B00                  		call	fastspeed
 14747                                  		; 24/12/2023
 14748                                  		;push	es
 14749                                  		;les	si, [dpt]
 14750                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14751                                  		;			; 1 is fast settle value
 14752                                  		;pop	es
 14753 00000D91 1E                      		push	ds
 14754 00000D92 C536[2D01]              		lds	si, [dpt]
 14755 00000D96 C6440901                		mov	byte [si+9], 1
 14756 00000D9A 1F                      		pop	ds
 14757                                  
 14758 00000D9B C3                      		retn
 14759                                  
 14760                                  ; =============== S U B	R O U T	I N E =======================================
 14761                                  
 14762                                  ; if the drive has been marked as too big (i.e. starting sector of the
 14763                                  ; partition is > 16 bits, then always return drive not ready.
 14764                                  
 14765                                  		; 24/12/2023 - Retro DOS v5.0
 14766                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 14767                                  fastspeed:
 14768                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 14769                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 14770                                  		;			; ftoobig
 14771                                  		;jnz	short notready
 14772 00000D9C 06                      		push	es
 14773 00000D9D 8E06[A804]              		mov	es, [xfer_seg]
 14774 00000DA1 CD13                    		int	13h		; DISK -
 14775 00000DA3 8C06[A804]              		mov	[xfer_seg], es
 14776 00000DA7 07                      		pop	es
 14777 00000DA8 C3                      		retn
 14778                                  ; ---------------------------------------------------------------------------
 14779                                  ;		; 24/12/2023
 14780                                  ;notready:
 14781                                  		;stc
 14782                                  		;mov	ah, 80h
 14783                                  		;retn
 14784                                  
 14785                                  ; =============== S U B	R O U T	I N E =======================================
 14786                                  
 14787                                  ; map error returned by rom in ah into corresponding code to be returned to
 14788                                  ; dos in al. trashes di. guaranteed to set carry.
 14789                                  
 14790                                  maperror:
 14791 00000DA9 51                      		push	cx
 14792 00000DAA 06                      		push	es
 14793 00000DAB 1E                      		push	ds		; set es=Bios_Data
 14794 00000DAC 07                      		pop	es
 14795 00000DAD 88E0                    		mov	al, ah		; put error code in al
 14796 00000DAF A2[4601]                		mov	[lsterr], al	; terminate list with error code
 14797                                  		; 24/12/2023
 14798 00000DB2 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 14799                                  		;mov	cx, 9		; numerr (= errout-errin)
 14800                                  					; number of possible error conditions
 14801 00000DB5 BF[3C01]                		mov	di, errin	; point to error conditions
 14802 00000DB8 F2AE                    		repne scasb
 14803                                  
 14804                                  		; 24/12/2023
 14805                                  		; 02/09/2023
 14806 00000DBA 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 14807                                  		; 10/12/2022
 14808                                  		;mov	al, [di+8]	; [di+numerr-1]
 14809                                  					; get translation
 14810                                  		; 19/10/2022 - Temporary ! 
 14811                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 14812 00000DBD 07                      		pop	es
 14813 00000DBE 59                      		pop	cx
 14814 00000DBF F9                      		stc			; flag error condition
 14815 00000DC0 C3                      		retn
 14816                                  
 14817                                  ; =============== S U B	R O U T	I N E =======================================
 14818                                  
 14819                                  ; set the time of last access for this drive.
 14820                                  ; this is done only for removable media. es:di -> bds
 14821                                  
 14822                                  set_tim:
 14823 00000DC1 50                      		push	ax
 14824 00000DC2 E86CF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 14825                                  
 14826                                  ; we have the new time. if we see that the time has passed,
 14827                                  ; then we reset the threshold counter...
 14828                                  
 14829                                  		; 24/12/2023 - Retro DOS v5.0
 14830 00000DC5 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 14831                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 14832 00000DC9 7506                    		jne	short setaccess
 14833                                  		; 24/12/2023
 14834 00000DCB 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 14835                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 14836                                  		;jz	short done_set
 14837                                  		; 12/12/2022
 14838 00000DCF 740E                    		je	short done_set2
 14839                                  setaccess:
 14840 00000DD1 C606[1D01]00            		mov	byte [accesscount], 0
 14841                                  		
 14842                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14843 00000DD6 26895579                		mov	[es:di+79h], dx
 14844 00000DDA 26894D7B                		mov	[es:di+7Bh], cx
 14845                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 14846                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 14847                                  done_set:
 14848 00000DDE F8                      		clc
 14849                                  done_set2:		; 12/12/2022
 14850 00000DDF 58                      		pop	ax
 14851 00000DE0 C3                      		retn
 14852                                  
 14853                                  ; =============== S U B	R O U T	I N E =======================================
 14854                                  
 14855                                  ; this routine is called if an error occurs while formatting or verifying.
 14856                                  ; it resets the drive,and decrements the retry count.
 14857                                  ; on entry - ds:di - points to bds for the drive
 14858                                  ;	     bp    - contains retry count
 14859                                  ; on exit    flags indicate result of decrementing retry count
 14860                                  
 14861                                  again:
 14862 00000DE1 E85705                  		call	ResetDisk
 14863 00000DE4 80FC06                  		cmp	ah, 6
 14864 00000DE7 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 14865                                  					; do not decrement retry count.
 14866 00000DE9 4D                      		dec	bp		; decrement retry count
 14867 00000DEA C3                      		retn
 14868                                  ; ---------------------------------------------------------------------------
 14869                                  
 14870                                  dont_dec_retry_count:
 14871 00000DEB 08E4                    		or	ah, ah
 14872 00000DED C3                      		retn
 14873                                  
 14874                                  ;----------------------------------------------------------------------------
 14875                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 14876                                  ;----------------------------------------------------------------------------
 14877                                  ; 24/12/2023 - Retro DOS v5.0
 14878                                  ;;;;
 14879                                  
 14880 00000DEE 00                      ioctl_drvnum:	db 0
 14881                                  
 14882                                  		; 24/12/2023
 14883                                  
 14884                                  ; =============== S U B R O U T I N E =======================================
 14885                                  
 14886                                  get_phy_drv_num:
 14887 00000DEF E8B2F7                  		call	SetDrive	; get physical drive number
 14888                                  					; INPUT: al = logical drive number (BDS.drivelet)
 14889                                  					; OUTPUT: physical drive number (BDS.drivenum)
 14890 00000DF2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14891 00000DF6 C3                      		retn
 14892                                  
 14893                                  ; =============== S U B R O U T I N E =======================================
 14894                                  
 14895                                  		; 24/12/2023
 14896                                  ioctl_output:
 14897 00000DF7 E8F5FF                  		call	get_phy_drv_num
 14898 00000DFA 2E8816[EE0D]            		mov	[cs:ioctl_drvnum], dl
 14899 00000DFF B441                    		mov	ah, 41h
 14900 00000E01 BBAA55                  		mov	bx, 55AAh
 14901 00000E04 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 14902                                  					; BX = 55AAh, DL = drive number
 14903                                  					; Return: CF set if not supported
 14904                                  					; AH = extensions version
 14905                                  					; BX = AA55h
 14906                                  					; CX = Interface support bit map
 14907 00000E06 7235                    		jc	short int13h_exts_err
 14908                                  ioctl_input_1:
 14909 00000E08 C43E[1200]              		les	di, [ptrsav]
 14910 00000E0C 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 14911 00000E10 723E                    		jc	short ioctl_input_2
 14912 00000E12 B80046                  		mov	ax, 4600h	; Eject removable media
 14913 00000E15 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 14914 00000E18 7417                    		je	short ioctl_output_1
 14915 00000E1A 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 14916 00000E1E 751B                    		jne	short ioctl_output_2
 14917 00000E20 B80145                  		mov	ax, 4501h	; Lock/unlock media
 14918                                  					; (al, 0 = lock, 1 = unlock)
 14919 00000E23 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 14920 00000E28 7407                    		jz	short ioctl_output_1
 14921 00000E2A 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 14922 00000E2E 750B                    		jne	short ioctl_output_2
 14923 00000E30 48                      		dec	ax
 14924                                  ioctl_output_1:
 14925 00000E31 2E8A16[EE0D]            		mov	dl, [cs:ioctl_drvnum]
 14926 00000E36 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14927 00000E38 7203                    		jc	short int13h_exts_err
 14928                                  ioctl_lock_err:
 14929                                  		; cf=0
 14930                                  ioctl_output_ret:
 14931                                  		;clc
 14932 00000E3A C3                      		retn
 14933                                  ; ---------------------------------------------------------------------------
 14934                                  
 14935                                  ioctl_output_2:
 14936 00000E3B B401                    		mov	ah, 1
 14937                                  int13h_exts_err:
 14938 00000E3D 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 14939 00000E40 74F8                    		je	short ioctl_lock_err
 14940 00000E42 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 14941 00000E45 74F3                    		je	short ioctl_lock_err
 14942 00000E47 E9DAF7                  		jmp	err_exitj
 14943                                  
 14944                                  ; =============== S U B R O U T I N E =======================================
 14945                                  
 14946                                  		; 24/12/2023
 14947                                  ioctl_input:
 14948 00000E4A E8A2FF                  		call	get_phy_drv_num
 14949 00000E4D F9                      		stc
 14950 00000E4E EBB8                    		jmp	short ioctl_input_1
 14951                                  ioctl_input_2:
 14952 00000E50 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 14953 00000E54 75E5                    		jne	short ioctl_output_2
 14954 00000E56 B80245                  		mov	ax, 4502h	; get lock status
 14955 00000E59 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14956 00000E5B 72E0                    		jc	short int13h_exts_err
 14957 00000E5D BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 14958 00000E60 3C00                    		cmp	al, 0		; not locked
 14959 00000E62 7402                    		jz	short ioctl_input_3
 14960 00000E64 B30E                    		mov	bl, 0Eh
 14961                                  ioctl_input_3:
 14962 00000E66 53                      		push	bx
 14963 00000E67 B404                    		mov	ah, 4
 14964 00000E69 B90101                  		mov	cx, 101h
 14965 00000E6C B601                    		mov	dh, 1
 14966 00000E6E CD13                    		int	13h		; DISK - VERIFY SECTORS
 14967                                  					; AL = number of sectors to verify, CH = track, CL = sector
 14968                                  					; DH = head, DL = drive
 14969                                  					; Return: CF set on error, AH = status
 14970                                  					; AL = number of sectors verified
 14971 00000E70 5B                      		pop	bx
 14972 00000E71 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 14973 00000E74 740B                    		je	short ioctl_input_5
 14974 00000E76 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 14975 00000E79 7406                    		je	short ioctl_input_5
 14976                                  ioctl_input_4:
 14977 00000E7B 26895D01                		mov	[es:di+1], bx
 14978 00000E7F EBB9                    		jmp	short ioctl_lock_err
 14979                                  ioctl_input_5:
 14980 00000E81 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 14981                                  					; bit 11 (not ready -removable media error- bit)
 14982                                  					; if bit 11 = 0, another error (except 31h and 80h)
 14983 00000E85 EBF4                    		jmp	short ioctl_input_4
 14984                                  
 14985                                  ; ---------------------------------------------------------------------------
 14986                                  ;;;;
 14987                                  
 14988                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14989                                  
 14990                                  ;----------------------------------------------------------------------------
 14991                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 14992                                  ;----------------------------------------------------------------------------
 14993                                  ; 11/03/2019 - Retro DOS v4.0
 14994                                  
 14995                                  ; 18/03/2019
 14996                                  
 14997                                  ; ==========================================================================
 14998                                  ;
 14999                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 15000                                  ;
 15001                                  ;      This function is intended to give the user to control the
 15002                                  ;      bds table flags of unformatted_media bit.
 15003                                  ;      GetAccessFlag will show the status -
 15004                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 15005                                  ;						1 disk i/o allowed
 15006                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 15007                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 15008                                  ;						1 disallow disk i/o
 15009                                  ; ==========================================================================
 15010                                  
 15011                                  		; generic ioctl dispatch tables
 15012                                  
 15013                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 15014                                  
 15015                                  ; 24/12/2023
 15016                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 15017                                  
 15018                                  ; ---------------------------------------------------------------------------
 15019                                  		; 24/12/2023
 15020                                  		;db 0
 15021                                  ; 09/12/2022 
 15022                                  %if 0
 15023                                  
 15024                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 15025                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 15026                                  		dw 0EE8h	; 61h	; ReadTrack
 15027                                  		dw 0E86h	; 62h	; VerifyTrack
 15028                                  		dw 0CA3h	 	; Cmd_Error_Proc
 15029                                  		dw 0CA3h		; Cmd_Error_Proc
 15030                                  		dw 0CA3h		; Cmd_Error_Proc
 15031                                  		dw 119Ah	; 66h	; GetMediaId
 15032                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 15033                                  		dw 12C1h	; 68h	; SenseMediaType
 15034                                  
 15035                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 15036                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 15037                                  		dw 0EEFh	; 41h	; WriteTrack
 15038                                  		dw 0DC1h	; 42h	; FormatTrack
 15039                                  		dw 0CA3h		; Cmd_Error_Proc
 15040                                  		dw 0CA3h		; Cmd_Error_Proc
 15041                                  		dw 0CA3h		; Cmd_Error_Proc
 15042                                  		dw 11D2h	; 46h	; SetMediaId
 15043                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 15044                                  
 15045                                  %endif
 15046                                  		; 24/12/2023 - Retro DOS v5.0
 15047                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 15048                                  
 15049                                  		; 09/12/2022
 15050                                  IoReadJumpTable:
 15051 00000E87 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 15052 00000E88 [1A0F]                  		dw GetDeviceParameters	; 60h
 15053 00000E8A [9311]                  		dw ReadTrack		; 61h
 15054 00000E8C [3311]                  		dw VerifyTrack		; 62h
 15055 00000E8E [160F]                  		dw Cmd_Error_Proc
 15056 00000E90 [160F]                  		dw Cmd_Error_Proc
 15057 00000E92 [160F]                  		dw Cmd_Error_Proc
 15058 00000E94 [1214]                  		dw GetMediaId		; 66h
 15059 00000E96 [EF14]                  		dw GetAccessFlag	; 67h ; unpublished function
 15060 00000E98 [4415]                  		dw SenseMediaType	; 68h
 15061                                  		; 24/12/2023
 15062                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15063 00000E9A [160F]                  		dw Cmd_Error_Proc	; 69h
 15064 00000E9C [160F]                  		dw Cmd_Error_Proc	; 6Ah
 15065 00000E9E [160F]                  		dw Cmd_Error_Proc
 15066 00000EA0 [160F]                  		dw Cmd_Error_Proc
 15067 00000EA2 [160F]                  		dw Cmd_Error_Proc
 15068 00000EA4 [160F]                  		dw Cmd_Error_Proc	; 6Eh
 15069 00000EA6 [C815]                  		dw GetDrvMapInfo	; 6Fh
 15070                                  
 15071                                  IoWriteJumpTable:
 15072 00000EA8 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 15073 00000EA9 [7A0F]                  		dw SetDeviceParameters	; 40h
 15074 00000EAB [9A11]                  		dw WriteTrack		; 41h
 15075 00000EAD [6D10]                  		dw FormatTrack		; 42h
 15076 00000EAF [160F]                  		dw Cmd_Error_Proc
 15077 00000EB1 [160F]                  		dw Cmd_Error_Proc
 15078 00000EB3 [160F]                  		dw Cmd_Error_Proc
 15079 00000EB5 [5214]                  		dw SetMediaId		; 46h
 15080 00000EB7 [0415]                  		dw SetAccessFlag	; 47h ; unpublished function
 15081                                  		; 24/12/2023
 15082                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15083 00000EB9 [8115]                  		dw SetLockState		; 48h
 15084 00000EBB [9815]                  		dw EjectMedia		; 49h	
 15085                                  		
 15086                                  ; ==========================================================================
 15087                                  ; IOC_DC_Table
 15088                                  ;
 15089                                  ; This table contains all of the valid generic IOCtl Minor codes for
 15090                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 15091                                  ; Added for 5.00
 15092                                  ; ==========================================================================
 15093                                  
 15094                                  		; 24/12/2023 - Retro DOS v5.0
 15095                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 15096                                  
 15097 00000EBD 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 15098 00000EBE 40                      		db 40h			; SET_DEVICE_PARAMETERS
 15099 00000EBF 61                      		db 61h			; READ_TRACK
 15100 00000EC0 41                      		db 41h			; WRITE_TRACK
 15101 00000EC1 62                      		db 62h			; VERIFY_TRACK
 15102 00000EC2 42                      		db 42h			; FORMAT_TRACK
 15103 00000EC3 66                      		db 66h			; GET_MEDIA_ID
 15104 00000EC4 46                      		db 46h			; SET_MEDIA_ID
 15105 00000EC5 67                      		db 67h			; GET_ACCESS_FLAG
 15106 00000EC6 47                      		db 47h			; SET_ACCESS_FLAG
 15107 00000EC7 68                      		db 68h			; SENSE_MEDIA_TYPE
 15108                                  		; 24/12/2023
 15109                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15110 00000EC8 48                      		db 48h			; SET_LOCK_STATE
 15111 00000EC9 49                      		db 49h			; EJECT_MEDIA
 15112 00000ECA 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 15113                                  
 15114                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 15115                                  
 15116                                  		; 24/12/2023 - Retro DOS v5.0
 15117                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 15118                                  
 15119 00000ECB 00                      new_genioctl:	db 0
 15120                                  
 15121                                  ; ---------------------------------------------------------------------------
 15122                                  
 15123                                  ; 16/10/2022
 15124                                  
 15125                                  ; ==========================================================================
 15126                                  ; Do_Generic_IOCtl: perform generic ioctl request
 15127                                  ;
 15128                                  ;    input: AL contains logical drive
 15129                                  ;
 15130                                  ;	functions are dispatched through a call. On return, carry indicates
 15131                                  ;	error code in al. Note::bES:b& ds undefined on return from
 15132                                  ;	subfunctions.
 15133                                  ;
 15134                                  ; ==========================================================================
 15135                                  
 15136                                  ; 11/03/2019
 15137                                  		; 24/12/2023 - Retro DOS v5.0
 15138                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 15139                                  
 15140                                  		; 19/10/2022
 15141                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 15142 00000ECC E8D5F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 15143                                  		
 15144                                  		; 24/12/2023
 15145                                  		;;;
 15146 00000ECF 2EC606[CB0E]00          		mov	byte [cs:new_genioctl], 0
 15147                                  					; 0, old generic ioctl function
 15148 00000ED5 06                      		push	es
 15149 00000ED6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 15150 00000EDA 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 15151                                  					; RAWIO
 15152                                  		; 24/12/2023
 15153                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15154                                  		;pop	es
 15155                                  		;jnz	short IoctlFuncErr
 15156 00000EDF 740A                    		jz	short chk_genioctl_minor
 15157 00000EE1 2EFE06[CB0E]            		inc	byte [cs:new_genioctl]
 15158                                  					; 1, new generic ioctl function (FAT32)
 15159 00000EE6 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 15160                                  				; (called only if bit 6 of attribute is set to 1)
 15161                                  chk_genioctl_minor:
 15162 00000EEB 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15163 00000EEF 07                      		pop	es
 15164 00000EF0 7525                    		jnz	short IoctlFuncErr
 15165                                  		;;;
 15166                                  
 15167                                  		; cas note: Could do the above two blocks in reverse order.
 15168                                  		; Would have to preserve al for SetDrive
 15169                                  
 15170                                  		; 10/12/2022
 15171 00000EF2 BE[870E]                		mov	si, IoReadJumpTable
 15172                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 15173                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 15174 00000EF5 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 15175 00000EF7 7503                    		jnz	short NotGenericWrite ; function is a read.
 15176                                  		; 10/12/2022
 15177 00000EF9 BE[A80E]                		mov	si, IoWriteJumpTable
 15178                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 15179                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 15180                                  NotGenericWrite:
 15181 00000EFC 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 15182 00000EFE 2C40                    		sub	al, 40h		; offset for base function
 15183 00000F00 2E3A04                  		cmp	al, [cs:si]
 15184 00000F03 7712                    		ja	short IoctlFuncErr
 15185 00000F05 98                      		cbw
 15186                                  		; 24/12/2023
 15187                                  		;shl	ax, 1
 15188 00000F06 01C0                    		add	ax, ax
 15189 00000F08 46                      		inc	si
 15190 00000F09 01C6                    		add	si, ax
 15191 00000F0B 2EFF14                  		call	near [cs:si]
 15192                                  		;call	word ptr cs:[si]
 15193 00000F0E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15194                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15195                                  					; 2C7h:30h = 70h:25A0h
 15196 00000F13 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 15197 00000F15 C3                      		retn			; Pass carry flag through to exit code
 15198                                  ; ---------------------------------------------------------------------------
 15199                                  
 15200                                  		; Cmd_Error_Proc is called as a procedure and also use
 15201                                  		; as a fall through from above
 15202                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 15203 00000F16 5A                      		pop	dx
 15204                                  IoctlFuncErr:
 15205 00000F17 E9BBF1                  		jmp	bc_cmderr
 15206                                  ; ---------------------------------------------------------------------------
 15207                                  
 15208                                  ; 16/10/2022
 15209                                  
 15210                                  ; ==========================================================================
 15211                                  ;**	GetDeviceParameters:
 15212                                  ;
 15213                                  ;	GetDeviceParameters implements the generic ioctl function:
 15214                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 15215                                  ;
 15216                                  ;	ENTRY	(ES:di) = BDS for drive
 15217                                  ;		PtrSav = long pointer to request header
 15218                                  ;	EXIT	??? BUGBUG
 15219                                  ;	USES	??? BUGBUG
 15220                                  ; ==========================================================================
 15221                                  
 15222                                  		; 24/12/2023 - Retro DOS v5.0
 15223                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 15224                                  
 15225                                  		; 19/10/2022
 15226                                  GetDeviceParameters:
 15227                                  		; Copy info from bds to the device parameters packet
 15228                                  
 15229 00000F1A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15230 00000F1E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15231                                  					; (DS:BX) = return buffer
 15232                                  		; 24/12/2023
 15233 00000F21 268A453E                		mov	al, [es:di+3Eh]
 15234                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 15235 00000F25 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15236                                  		; 24/12/2023
 15237 00000F28 268B453F                		mov	ax, [es:di+3Fh]
 15238                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 15239 00000F2C 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 15240                                  					; Mask off other bits
 15241 00000F2F 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15242                                  		; 24/12/2023
 15243 00000F32 268B4541                		mov     ax, [es:di+41h]
 15244                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 15245 00000F36 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15246 00000F39 30C0                    		xor	al, al		; Set media type to default
 15247 00000F3B 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15248                                  					
 15249                                  		; copy recommended bpb
 15250                                  
 15251                                  		; 24/12/2023
 15252 00000F3E 8D7543                  		lea     si, [di+43h]
 15253                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 15254 00000F41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15255                                  					; BUILD_DEVICE_BPB
 15256 00000F44 7412                    		jz	short UseBpbPresent
 15257 00000F46 1E                      		push	ds		; Save request packet segment
 15258 00000F47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15259                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15260                                  					; 2C7h:30h = 70h:25A0h
 15261                                  					; Point back to Bios_Data
 15262 00000F4C E828FA                  		call	checksingle
 15263 00000F4F E884F7                  		call	GetBp		; Build	the bpb	from scratch
 15264 00000F52 1F                      		pop	ds		; Restore request packet segment
 15265 00000F53 7224                    		jb	short GetParmRet
 15266 00000F55 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 15267                                  					; Use this subfield of bds instead
 15268                                  UseBpbPresent:				
 15269 00000F58 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15270                                  					; This is where	the result goes
 15271                                  		; 24/12/2023
 15272 00000F5B 31D2                    		xor	dx, dx ; 0
 15273                                  		
 15274                                  		; 24/12/2023
 15275 00000F5D B91F00                  		mov	cx, 31		; A_BPB.size = 31
 15276                                  		;mov	cx, 25		; A_BPB.size - 6
 15277                                  					; For now use 'small' bpb
 15278                                  		; 24/12/2023
 15279                                  		;;;
 15280 00000F60 2E3816[CB0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 15281 00000F65 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 15282                                  		;mov	cx, 53		; FAT32 BPB size
 15283                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 15284 00000F67 B135                    		mov	cl, 53
 15285 00000F69 B220                    		mov	dl, 32
 15286                                  gdp_1:
 15287                                  		;;;
 15288 00000F6B 1E                      		push	ds		; reverse segments for copy
 15289 00000F6C 06                      		push	es
 15290 00000F6D 1F                      		pop	ds
 15291 00000F6E 07                      		pop	es
 15292 00000F6F F3A4                    		rep movsb
 15293                                  
 15294                                  		; 24/12/2023
 15295                                  		;;;
 15296 00000F71 89D1                    		mov	cx, dx		; 0 or 32
 15297 00000F73 E304                    		jcxz	gdp_2
 15298 00000F75 30C0                    		xor	al, al		; 32 zeros
 15299 00000F77 F3AA                    		rep stosb
 15300                                  gdp_2:
 15301                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 15302                                  		;;;		
 15303                                  		
 15304                                  		; 12/12/2022
 15305                                  		; cf=0 (cmp instruction -above- resets cf) 	
 15306                                  		;clc
 15307                                  GetParmRet:				
 15308 00000F79 C3                      		retn
 15309                                  ; ---------------------------------------------------------------------------
 15310                                  
 15311                                  ; 17/10/2022
 15312                                  ; 16/10/2022
 15313                                  
 15314                                  ; ==========================================================================
 15315                                  ; SetDeviceParameters:
 15316                                  ;
 15317                                  ; input: ES:di points to bds for drive
 15318                                  ; ==========================================================================
 15319                                  
 15320                                  		; 24/12/2023 - Retro DOS v5.0
 15321                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 15322                                  
 15323                                  		; 19/10/2022
 15324                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 15325 00000F7A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15326 00000F7E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15327                                  		; 24/12/2023
 15328 00000F81 26814D3F4001            		or	word [es:di+3Fh], 140h
 15329                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 15330                                  					; fchanged_by_format|fchanged
 15331 00000F87 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15332                                  					; ONLY_SET_TRACKLAYOUT
 15333                                  		;jnz	short setTrackTable
 15334                                  		; 24/12/2023
 15335 00000F8A 7403                    		jz	short sdp_1
 15336 00000F8C E98000                  		jmp	setTrackTable
 15337                                  sdp_1:	
 15338 00000F8F 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15339                                  		; 24/12/2023
 15340 00000F92 2688453E                		mov	[es:di+3Eh], al
 15341                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 15342 00000F96 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15343                                  		; 24/12/2023
 15344 00000F99 26894541                		mov	[es:di+41h], ax
 15345                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 15346 00000F9D 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15347 00000FA0 1E                      		push	ds
 15348                                  		; 17/10/2022
 15349 00000FA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15350                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15351                                  					; 2C7h:30h = 70h:25A0h
 15352                                  		;cmp	byte [fhave96], 0
 15353 00000FA6 803E[7700]00            		cmp	byte [fhave96], 0
 15354 00000FAB 1F                      		pop	ds
 15355 00000FAC 7502                    		jnz	short HaveChange ; we have changeline support
 15356                                  		; 10/12/2022
 15357 00000FAE 24FD                    		and	al, 0FDh
 15358                                  		;and	ax, 0FFFDh	; ~fchangeline
 15359                                  
 15360                                  		; Ignore all bits except non_removable and changeline
 15361                                  HaveChange:
 15362 00000FB0 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 15363                                  		; 24/12/2023
 15364 00000FB3 268B4D3F                		mov	cx, [es:di+3Fh]
 15365                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 15366 00000FB7 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 15367 00000FBB 09C8                    		or	ax, cx
 15368                                  		; 24/12/2023
 15369 00000FBD 2689453F                		mov	[es:di+3Fh], ax
 15370                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 15371 00000FC1 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15372                                  					; Set media type
 15373 00000FC4 1E                      		push	ds
 15374 00000FC5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15375                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15376 00000FCA A2[A805]                		mov	[mediatype], al
 15377                                  		;mov	ds:mediatype, al
 15378                                  
 15379                                  		; 24/12/2023
 15380                                  		;;;
 15381 00000FCD B93500                  		mov	cx, 53		; FAT32 BPB size
 15382 00000FD0 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15383 00000FD6 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 15384                                  		;mov	cx, 31		; A_BPB.size = 31
 15385 00000FD8 B11F                    		mov	cl, 31
 15386                                  sdp_2:
 15387                                  		;;;	
 15388 00000FDA 1F                      		pop	ds
 15389                                  
 15390                                  		; The media changed (maybe) so we will have to do a set dasd
 15391                                  		; the next time we format a track
 15392                                  
 15393                                  		; 24/12/2023
 15394 00000FDB 26804D3F80              		or	byte [es:di+3Fh], 80h
 15395                                  		; 10/12/2022
 15396                                  		;or	byte [es:di+35], 80h
 15397                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 15398                                  					; set_dasd_true
 15399 00000FE0 57                      		push	di		; Save bds pointer
 15400                                  
 15401                                  		; Figure out what we are supposed to do with the bpb
 15402                                  		; were we asked to install a fake bpb?
 15403                                  
 15404 00000FE1 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15405                                  					; INSTALL_FAKE_BPB
 15406 00000FE4 7511                    		jnz	short InstallFakeBpb
 15407                                  
 15408                                  		; were we returning a fake bpb when asked to build a bpb?
 15409                                  
 15410                                  		; 24/12/2023
 15411 00000FE6 26F6453F04              		test	byte [es:di+3Fh], 4
 15412                                  		; 10/12/2022
 15413                                  		;test	byte [es:di+35], 4
 15414                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 15415                                  					; return_fake_bpb
 15416 00000FEB 7405                    		jz	short InstallRecommendedBpb
 15417                                  
 15418                                  		; we were returning a fake bpb but we can stop now
 15419                                  
 15420                                  		; 24/12/2023
 15421 00000FED 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 15422                                  		; 10/12/2022
 15423                                  		;and	byte [es:di+35], 0FBh
 15424                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 15425                                  					; ~return_fake_bpb
 15426                                  InstallRecommendedBpb:
 15427                                  		; 24/12/2023
 15428                                  		;mov	cx, 31		; A_BPB.size
 15429                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 15430                                  		; cx = 53 or 31
 15431 00000FF2 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 15432 00000FF5 EB08                    		jmp	short CopyTheBpb
 15433                                  ; ---------------------------------------------------------------------------
 15434                                  
 15435                                  InstallFakeBpb:
 15436                                  		; 24/12/2023
 15437 00000FF7 26804D3F04              		or	byte [es:di+3Fh], 4
 15438                                  		; 10/12/2022
 15439                                  		;or	byte [es:di+35], 4
 15440                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 15441                                  					; return_fake_bpb
 15442                                  		; 24/12/2023
 15443                                  		; cx = 53 or 31
 15444                                  		;mov	cx, 25		; A_BPB.size - 6
 15445                                  					; move 'smaller' bpb
 15446 00000FFC 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 15447                                  CopyTheBpb:				
 15448 00000FFF 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15449 00001002 F3A4                    		rep movsb
 15450 00001004 1E                      		push	ds		; Save packet segment
 15451                                  		; 17/10/2022
 15452 00001005 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15453                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15454                                  					; Setup	for ds -> Bios_Data
 15455 0000100A E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 15456 0000100D 1F                      		pop	ds		; Restore packet segment
 15457 0000100E 5F                      		pop	di		; Restore bds pointer
 15458                                  setTrackTable:	
 15459                                  		; 24/12/2023
 15460                                  		;mov	cx, [bx+38]	; [bx+26h]
 15461                                  		;;;
 15462 0000100F 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15463                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 15464 00001012 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15465 00001018 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 15466 0000101A 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15467                                  					; offset 31+7 (A_BPB.size+7)
 15468                                  sdp_3:
 15469                                  		;;;
 15470                                  
 15471 0000101D 1E                      		push	ds
 15472 0000101E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15473 00001023 890E[AA04]              		mov	[sectorspertrack], cx
 15474 00001027 1F                      		pop	ds
 15475                                  		
 15476                                  		; 24/12/2023
 15477 00001028 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 15478                                  		; 10/12/2022
 15479                                  		;and	byte [es:di+35], 0F7h
 15480                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 15481                                  					; ~good_tracklayout
 15482 0000102D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15483                                  					; TRACKLAYOUT_IS_GOOD
 15484 00001030 7405                    		jz	short UglyTrackLayOut
 15485                                  		; 24/12/2023
 15486 00001032 26804D3F08              		or	byte [es:di+3Fh], 8
 15487                                  		; 10/12/2022
 15488                                  		;or	byte [es:di+35], 8
 15489                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 15490                                  					; good_tracklayout
 15491                                  UglyTrackLayOut:
 15492 00001037 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 15493 0000103A 772D                    		ja	short TooManyPerTrack
 15494                                  		;jcxz	short SectorInfoSaved
 15495 0000103C E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 15496                                  		
 15497 0000103E BF[AC04]                		mov	di, tracktable
 15498                                  
 15499                                  		; 24/12/2023
 15500                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15501                                  		;;;
 15502 00001041 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15503                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 15504 00001044 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15505 0000104A 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 15506 0000104C 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15507                                  					; offset 31+9 (A_BPB.size+9)
 15508                                  sdp_4:
 15509                                  		;;;
 15510                                  
 15511                                  		; 17/10/2022
 15512 0000104F 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 15513                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15514                                  					; Trash	our bds	pointer
 15515                                  StoreSectorInfo:
 15516 00001054 47                      		inc	di
 15517 00001055 47                      		inc	di		; Skip over cylinder and head
 15518 00001056 AD                      		lodsw			; Get sector id
 15519 00001057 AA                      		stosb			; Copy it
 15520 00001058 AD                      		lodsw			; Get sector size
 15521                                  		
 15522                                  		; 24/12/2023
 15523                                  		; 02/09/2023 (PCDOS 7.1)
 15524                                  		;call	SectSizeToSectIndex
 15525                                  		; 18/04/2024
 15526                                  		;cmp	ah, 3 ; 02/09/2023
 15527 00001059 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 15528                                  					; examine upper	byte only
 15529 0000105C 7704                    		ja	short OneK
 15530 0000105E 88E0                    		mov	al, ah		; value	in AH is the index!
 15531 00001060 EB02                    		jmp	short sdp_s
 15532                                  OneK:
 15533 00001062 B003                    		mov	al, 3		; 1024 bytes per sector
 15534                                  sdp_s:
 15535 00001064 AA                      		stosb			; Store	sector SIZE index
 15536 00001065 E2ED                    		loop	StoreSectorInfo
 15537                                  SectorInfoSaved:
 15538 00001067 F8                      		clc
 15539 00001068 C3                      		retn
 15540                                  ; ---------------------------------------------------------------------------
 15541                                  
 15542                                  TooManyPerTrack:
 15543 00001069 B00C                    		mov	al, 0Ch
 15544 0000106B F9                      		stc
 15545 0000106C C3                      		retn
 15546                                  ; ---------------------------------------------------------------------------
 15547                                  
 15548                                  ; 16/10/2022
 15549                                  
 15550                                  ; ==========================================================================
 15551                                  ; FormatTrack:
 15552                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 15553                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 15554                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 15555                                  ;
 15556                                  ; input: ES:di points to bds for drive
 15557                                  ;
 15558                                  ; output:
 15559                                  ;	for status call:
 15560                                  ;	specialfunction byte set to:
 15561                                  ;		0 - rom support + legal combination
 15562                                  ;		1 - no rom support
 15563                                  ;		2 - illegal combination
 15564                                  ;		3 - no media present
 15565                                  ;	carry cleared.
 15566                                  ;
 15567                                  ;	for format track:
 15568                                  ;		carry set if error
 15569                                  ;
 15570                                  ; ==========================================================================
 15571                                  
 15572                                  ; 16/03/2019
 15573                                  		; 24/12/2023 - Retro DOS 5.0
 15574                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 15575                                  
 15576                                  		; 19/10/2022
 15577                                  FormatTrack:
 15578 0000106D C51E[1200]              		lds	bx, [ptrsav]
 15579 00001071 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 15580 00001074 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15581                                  					; STATUS_FOR_FORMAT
 15582 00001077 740E                    		jz	short DoFormatTrack
 15583 00001079 1E                      		push	ds
 15584                                  		; 17/10/2022
 15585 0000107A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15586                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15587 0000107F E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15588 00001082 1F                      		pop	ds
 15589 00001083 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15590 00001085 F8                      		clc
 15591 00001086 C3                      		retn
 15592                                  ; ---------------------------------------------------------------------------
 15593                                  
 15594                                  DoFormatTrack:
 15595                                  		; 24/12/2023 - Retro DOS 5.0
 15596 00001087 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 15597                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 15598                                  					; DEV_HARDDISK
 15599 0000108C 7508                    		jnz	short DoFormatDiskette
 15600                                  		; 17/10/2022
 15601 0000108E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15602                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15603                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 15604 00001093 E99D00                  		jmp	VerifyTrack
 15605                                  ; ---------------------------------------------------------------------------
 15606                                  
 15607                                  DoFormatDiskette:
 15608 00001096 8B4F01                  		mov	cx, [bx+1]
 15609 00001099 8B5703                  		mov	dx, [bx+3]
 15610 0000109C F60702                  		test	byte [bx], 2
 15611                                  		; 17/10/2022
 15612 0000109F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15613                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15614                                  					; Setup	ds-> Bios_Data for verify
 15615 000010A4 7403                    		jz	short DoFormatDiskette_1
 15616 000010A6 E9E500                  		jmp	VerifyTrack_Err
 15617                                  ; ---------------------------------------------------------------------------
 15618                                  
 15619                                  DoFormatDiskette_1:
 15620 000010A9 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15621 000010AC 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 15622 000010AE 7406                    		jz	short NeedToSetDasd ; Old rom
 15623 000010B0 3C03                    		cmp	al, 3		; Time out error?
 15624 000010B2 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 15625                                  					; about	the illegal combination)
 15626 000010B4 EB68                    		jmp	short FormatFailed
 15627                                  ; ---------------------------------------------------------------------------
 15628                                  
 15629                                  NeedToSetDasd:
 15630 000010B6 52                      		push	dx
 15631 000010B7 E89001                  		call	SetDasd		; INT 13h, AH=17h
 15632 000010BA 5A                      		pop	dx
 15633                                  NoSetDasd:
 15634 000010BB E8B9F8                  		call	checksingle	; Do any needed	diskette swapping
 15635 000010BE 89D0                    		mov	ax, dx		; Get track from packet
 15636 000010C0 A3[3901]                		mov	[trknum], ax
 15637 000010C3 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 15638 000010C7 88CC                    		mov	ah, cl
 15639 000010C9 BB[AC04]                		mov	bx, tracktable
 15640 000010CC 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15641                                  		; 24/12/2023 - Retro DOS 5.0
 15642 000010D0 E307                    		jcxz	set_fmt_retry_count
 15643                                  StoreCylinderHead:
 15644 000010D2 8907                    		mov	[bx], ax	; Store	into TrackTable
 15645 000010D4 83C304                  		add	bx, 4		; Skip to next sector field
 15646 000010D7 E2F9                    		loop	StoreCylinderHead
 15647                                  set_fmt_retry_count:	; 24/12/2023
 15648                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 15649                                  		; 02/09/2023
 15650 000010D9 B105                    		mov	cl, 5
 15651                                  FormatRetry:
 15652 000010DB 51                      		push	cx
 15653 000010DC BB[AC04]                		mov	bx, tracktable
 15654 000010DF A0[AA04]                		mov	al, [sectorspertrack]
 15655 000010E2 B405                    		mov	ah, 5		; romformat
 15656 000010E4 8C1E[A804]              		mov	[xfer_seg], ds
 15657 000010E8 E86602                  		call	ToRom
 15658 000010EB 59                      		pop	cx
 15659 000010EC 7216                    		jb	short FormatError
 15660 000010EE 51                      		push	cx		; Now verify the sectors just formatted.
 15661                                  					; NOTE:	because	of bug in some BIOSes we have to
 15662                                  					;	set ES:BX to 00:00
 15663 000010EF 53                      		push	bx
 15664 000010F0 31DB                    		xor	bx, bx
 15665 000010F2 891E[A804]              		mov	[xfer_seg], bx
 15666 000010F6 A0[AA04]                		mov	al, [sectorspertrack]
 15667 000010F9 B404                    		mov	ah, 4		; romverify
 15668 000010FB B101                    		mov	cl, 1
 15669 000010FD E85102                  		call	ToRom
 15670 00001100 5B                      		pop	bx
 15671 00001101 59                      		pop	cx
 15672 00001102 7329                    		jnb	short FormatOk
 15673                                  FormatError:
 15674 00001104 E83402                  		call	ResetDisk
 15675 00001107 C606[AA05]01            		mov	byte [had_format_error], 1
 15676 0000110C 50                      		push	ax
 15677 0000110D 51                      		push	cx
 15678 0000110E 52                      		push	dx
 15679 0000110F E89501                  		call	SetMediaForFormat
 15680 00001112 3C01                    		cmp	al, 1
 15681 00001114 7503                    		jnz	short WhileErr
 15682 00001116 E83101                  		call	SetDasd
 15683                                  WhileErr:
 15684 00001119 5A                      		pop	dx
 15685 0000111A 59                      		pop	cx
 15686 0000111B 58                      		pop	ax
 15687 0000111C E2BD                    		loop	FormatRetry
 15688                                  FormatFailed:
 15689 0000111E C606[AA05]01            		mov	byte [had_format_error], 1
 15690                                  					; Set the format error flag
 15691 00001123 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 15692 00001126 7502                    		jnz	short DoMapIt	; Error	to time	out error
 15693 00001128 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 15694                                  DoMapIt:
 15695 0000112A E97CFC                  		jmp	maperror
 15696                                  ; ---------------------------------------------------------------------------
 15697                                  
 15698                                  FormatOk:
 15699 0000112D C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 15700 00001132 C3                      		retn
 15701                                  ; ---------------------------------------------------------------------------
 15702                                  
 15703                                  ; 16/10/2022
 15704                                  
 15705                                  ; ==========================================================================
 15706                                  ;
 15707                                  ; VerifyTrack:
 15708                                  ;
 15709                                  ; input: ES:di points to bds for drive
 15710                                  ; ==========================================================================
 15711                                  
 15712                                  		; 24/12/2023 - Retro DOS 5.0
 15713                                  VerifyTrack:
 15714 00001133 1E                      		push	ds
 15715 00001134 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 15716 00001138 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15717                                  
 15718                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 15719                                  
 15720 0000113B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 15721 0000113E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 15722 00001141 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 15723 00001144 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 15724                                  					; Get option flag word
 15725 00001146 1F                      		pop	ds
 15726 00001147 C606[2001]04            		mov	byte [rflag], 4	; romverify
 15727 0000114C 890E[3301]              		mov	[curtrk], cx
 15728 00001150 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 15729 00001153 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15730                                  
 15731                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 15732                                  		; specified if not we should go to the normal track verification
 15733                                  		; routine. If fast format has been specified we should get the
 15734                                  		; number of tracks to be verified and check it to see if it is
 15735                                  		; > 255. If it is then it is an error and we should go to
 15736                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 15737                                  		; sectors per track to get the total number of sectors to be
 15738                                  		; verified. This should also be less than equal to 255
 15739                                  		; otherwise we go to same error exit. If everything is okay
 15740                                  		; we initialise cx to the total sectors. use ax as a temporary
 15741                                  		; register.
 15742                                  
 15743                                  					; Special function requested?	
 15744 00001157 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 15745 0000115A 7421                    		jz	short NormVerifyTrack
 15746 0000115C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 15747 0000115E 08E4                    		or	ah, ah
 15748 00001160 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 15749 00001162 F6E1                    		mul	cl
 15750 00001164 08E4                    		or	ah, ah
 15751 00001166 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 15752 00001168 89C1                    		mov	cx, ax
 15753                                  		; 24/12/2023
 15754 0000116A 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15755                                  		; 10/12/2022
 15756                                  		;test	byte [es:di+35], 1
 15757                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15758                                  					; fnon_removable
 15759 0000116F 740C                    		jz	short NormVerifyTrack
 15760                                  					; Multitrack operation = on?
 15761                                  		; 10/12/2022
 15762                                  		; 19/10/2022
 15763 00001171 F606[A004]80            		test	byte [multrk_flag], 80h
 15764                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15765                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 15766 00001176 7405                    		jz	short NormVerifyTrack
 15767 00001178 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 15768                                  NormVerifyTrack:
 15769 0000117D 31C0                    		xor	ax, ax		; 1st sector
 15770 0000117F 31DB                    		xor	bx, bx
 15771 00001181 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 15772 00001185 E83F00                  		call	TrackIo
 15773 00001188 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 15774 0000118D C3                      		retn
 15775                                  ; ---------------------------------------------------------------------------
 15776                                  
 15777                                  VerifyTrack_Err:
 15778 0000118E B401                    		mov	ah, 1
 15779 00001190 E916FC                  		jmp	maperror
 15780                                  ; ---------------------------------------------------------------------------
 15781                                  
 15782                                  ; 16/10/2022
 15783                                  
 15784                                  ; ==========================================================================
 15785                                  ;
 15786                                  ; ReadTrack:
 15787                                  ;
 15788                                  ; input: ES:di points to bds for drive
 15789                                  ;
 15790                                  ; ==========================================================================
 15791                                  
 15792                                  ReadTrack:
 15793 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 15794 00001198 EB05                    		jmp	short ReadWriteTrack
 15795                                  ; ---------------------------------------------------------------------------
 15796                                  
 15797                                  WriteTrack:
 15798                                  
 15799                                  ; ==========================================================================
 15800                                  ;
 15801                                  ; WriteTrack:
 15802                                  ;
 15803                                  ; input: ES:di points to bds for drive
 15804                                  ;
 15805                                  ; ==========================================================================
 15806                                  				
 15807 0000119A C606[2001]03            		mov	byte [rflag], 3	; romwrite
 15808                                  
 15809                                  		; Fall into ReadWriteTrack
 15810                                  
 15811                                  ; ==========================================================================
 15812                                  ;
 15813                                  ; readWriteTrack:
 15814                                  ;
 15815                                  ; input:
 15816                                  ;    ES:di points to bds for drive
 15817                                  ;    rFlag - 2 for read,3 for write
 15818                                  ;
 15819                                  ; ==========================================================================
 15820                                  
 15821                                  ReadWriteTrack:	
 15822                                  		; save bds pointer segment so we can use it to access
 15823                                  		; our packet. Notice that this is not the standard register
 15824                                  		; assignment for accessing packets
 15825                                  		
 15826                                  		; 19/10/2022
 15827 0000119F 06                      		push	es
 15828 000011A0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 15829 000011A4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15830 000011A8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 15831 000011AC A3[3301]                		mov	[curtrk], ax
 15832 000011AF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 15833 000011B3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 15834 000011B6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 15835 000011BA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 15836 000011BE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 15837                                  					; Get transfer address
 15838                                  
 15839                                  		; we just trashed our packet address, but we no longer care
 15840                                  
 15841 000011C2 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 15842 000011C6 07                      		pop	es
 15843                                  
 15844                                  		; Fall into TrackIo
 15845                                  
 15846                                  ; =============== S U B	R O U T	I N E =======================================
 15847                                  
 15848                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15849                                  
 15850                                  ; ==========================================================================
 15851                                  ;
 15852                                  ; TrackIo:
 15853                                  ;    performs track read/write/verify
 15854                                  ;
 15855                                  ;   input:
 15856                                  ;      rFlag	- 2 = read
 15857                                  ;		  3 = write
 15858                                  ;		  4 = verify
 15859                                  ;      AX	- Index into track table of first sector to io
 15860                                  ;      CX	- Number of sectors to io
 15861                                  ;      Xfer_Seg:BX - Transfer address
 15862                                  ;      ES:DI	- Pointer to bds
 15863                                  ;      CurTrk	- Current cylinder
 15864                                  ;      CurHd	- Current head
 15865                                  ;
 15866                                  ; ==========================================================================
 15867                                  
 15868                                  ; 16/03/2019 - Retro DOS v4.0
 15869                                  
 15870                                  		; 24/12/2023 - Retro DOS 5.0		
 15871                                  
 15872                                  		; 19/10/2022
 15873                                  TrackIo:
 15874                                  					; Procedure `disk' will pop stack to
 15875 000011C7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 15876 000011CB E8A9F7                  		call	checksingle	; Ensure correct disk is in drv
 15877 000011CE 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15878                                  					; See if we have already set	disk
 15879 000011D3 7407                    		jz	short Dptalreadyset ; base table
 15880 000011D5 50                      		push	ax		; set up tables	and variables for i/o
 15881 000011D6 51                      		push	cx
 15882 000011D7 E8A0F9                  		call	iosetup
 15883 000011DA 59                      		pop	cx
 15884 000011DB 58                      		pop	ax
 15885                                  Dptalreadyset:				; Point si at the table entry of the			
 15886 000011DC BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 15887                                  		; 24/12/2023
 15888                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 15889                                  		;add	ax, ax
 15890 000011DF D1E0                    		shl	ax, 1
 15891 000011E1 D1E0                    		shl	ax, 1
 15892 000011E3 01C6                    		add	si, ax
 15893                                  
 15894                                  		; WE WANT:
 15895                                  		; CX to	be the number of times we have to loop
 15896                                  		; DX to	be the number of sectors we read on each iteration
 15897                                  		
 15898 000011E5 BA0100                  		mov	dx, 1
 15899                                  
 15900                                  		; 24/12/2023
 15901 000011E8 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 15902                                  		; 12/12/2022
 15903                                  		;test	byte [es:di+23h], 8
 15904                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 15905                                  					; good_tracklayout
 15906 000011ED 7402                    		jz	short ionextsector
 15907                                  		
 15908 000011EF 87CA                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 15909                                  ionextsector:
 15910 000011F1 51                      		push	cx
 15911 000011F2 52                      		push	dx
 15912 000011F3 46                      		inc	si
 15913 000011F4 46                      		inc	si		; Skip over the	cylinder and head in
 15914                                  					; the track table
 15915 000011F5 AC                      		lodsb			; Get sector ID	from track table
 15916 000011F6 A2[3101]                		mov	[cursec], al
 15917                                  
 15918                                  		; assumptions for a fixed disk multi-track disk	i/o
 15919                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 15920                                  		;     only CL is valid.
 15921                                  		; 2). Sector size should be set	to 512 bytes.
 15922                                  		; 3). Good track layout
 15923                                  		
 15924                                  		; 24/12/2023
 15925 000011F9 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15926                                  		; 12/12/2022
 15927                                  		;test	byte [es:di+23h], 1
 15928                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15929                                  					; fnon_removable ; Fixed disk?
 15930 000011FE 7414                    		jz	short IoRemovable ; No
 15931                                  
 15932                                  		; 12/12/2022
 15933 00001200 F606[A004]80            		test	byte [multrk_flag], 80h
 15934                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15935                                  						; Allow multi-track operation?
 15936 00001205 740D                    		jz	short IoRemovable ; No,don't do that.
 15937 00001207 8916[2201]              		mov	[seccnt], dx
 15938 0000120B 89D0                    		mov	ax, dx
 15939 0000120D E823FA                  		call	Disk
 15940 00001210 5A                      		pop	dx
 15941 00001211 59                      		pop	cx
 15942 00001212 F8                      		clc
 15943 00001213 C3                      		retn
 15944                                  ; ---------------------------------------------------------------------------
 15945                                  
 15946                                  IoRemovable:
 15947 00001214 AC                      		lodsb			; Get sector size index	from track
 15948                                  					; table	and save it
 15949 00001215 50                      		push	ax
 15950 00001216 56                      		push	si
 15951 00001217 1E                      		push	ds		; Save Bios_Data
 15952 00001218 50                      		push	ax
 15953 00001219 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 15954                                  					; Fetch	EOT while ds-> Bios_Data
 15955 0000121D C536[2D01]              		lds	si, [dpt]
 15956 00001221 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 15957 00001224 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 15958 00001227 58                      		pop	ax
 15959 00001228 1F                      		pop	ds
 15960 00001229 88D0                    		mov	al, dl
 15961 0000122B A3[2201]                		mov	[seccnt], ax
 15962 0000122E E802FA                  		call	Disk
 15963 00001231 5E                      		pop	si		; Advance buffer pointer by adding
 15964                                  					; sector size
 15965                                  		;pop	ax
 15966                                  		; 24/12/2023
 15967 00001232 59                      		pop	cx
 15968                                  
 15969                                  		; 02/09/2023 (PCDOS 7.1)
 15970                                  		;call	SectorSizeIndexToSectorSize
 15971                                  		;mov	cl, al	; 24/12/2023
 15972 00001233 B88000                  		mov	ax, 128
 15973 00001236 D3E0                    		shl	ax, cl
 15974                                  
 15975 00001238 01C3                    		add	bx, ax
 15976 0000123A 5A                      		pop	dx
 15977 0000123B 59                      		pop	cx
 15978 0000123C E2B3                    		loop	ionextsector
 15979 0000123E 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15980                                  		;jz	short NoNeedDone
 15981                                  		; 12/12/2022
 15982 00001243 7404                    		je	short NoNeedDone2
 15983 00001245 E877F9                  		call	done		; set time of last access, and reset
 15984                                  					; entries in Dpt.
 15985                                  NoNeedDone:
 15986 00001248 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 15987                                  NoNeedDone2:
 15988 00001249 C3                      		retn
 15989                                  
 15990                                  ; =============== S U B	R O U T	I N E =======================================
 15991                                  
 15992                                  ; ---------------------------------------------------------------------------
 15993                                  ;
 15994                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 15995                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 15996                                  ; are permissible.
 15997                                  ;
 15998                                  ; On Input   AX contains sector size in bytes
 15999                                  ; On Output  AL Contains index
 16000                                  ; All other registers preserved
 16001                                  ;
 16002                                  ; ---------------------------------------------------------------------------
 16003                                  
 16004                                  ; 02/09/2023
 16005                                  ;SectSizeToSectIndex:
 16006                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16007                                  ;					; examine upper	byte only
 16008                                  ;		ja	short OneK
 16009                                  ;		mov	al, ah		; value	in AH is the index!
 16010                                  ;		retn
 16011                                  
 16012                                  ; ---------------------------------------------------------------------------
 16013                                  ;
 16014                                  ;OneK:
 16015                                  ;		mov	al, 3
 16016                                  ;		retn
 16017                                  
 16018                                  ; =============== S U B	R O U T	I N E =======================================
 16019                                  
 16020                                  ; 02/09/2023
 16021                                  ;SectorSizeIndexToSectorSize:
 16022                                  ;		mov	cl, al
 16023                                  ;		mov	ax, 128
 16024                                  ;		shl	ax, cl
 16025                                  ;		retn
 16026                                  
 16027                                  ; =============== S U B	R O U T	I N E =======================================
 16028                                  
 16029                                  ; 16/10/2022
 16030                                  
 16031                                  ; ---------------------------------------------------------------------------
 16032                                  ;
 16033                                  ; SetDASD
 16034                                  ;
 16035                                  ; Set up the rom for formatting.
 16036                                  ; we have to tell the rom bios what type of disk is in the drive.
 16037                                  ;
 16038                                  ; On Input   - ES:di - Points to bds
 16039                                  ;
 16040                                  ; ---------------------------------------------------------------------------
 16041                                  
 16042                                  		; 24/12/2023 - Retro DOS 5.0
 16043                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 16044                                  
 16045                                  		; 19/10/2022
 16046                                  SetDasd:
 16047 0000124A 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 16048                                  					; See if we've previously set dasd type
 16049 0000124F 740C                    		jz	short DoSetDasd
 16050                                  		; 24/12/2023
 16051 00001251 26F6453F80              		test	byte [es:di+3Fh], 80h
 16052                                  		; 10/12/2022
 16053                                  		;test	byte [es:di+23h], 80h
 16054                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 16055                                  					; set_dasd_true
 16056 00001256 7446                    		jz	short DasdHasBeenSet
 16057                                  		; 24/12/2023
 16058 00001258 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 16059                                  		; 10/12/2022
 16060                                  		;and	byte [es:di+23h], 7Fh
 16061                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 16062                                  					; ~set_dasd_true
 16063                                  DoSetDasd:
 16064 0000125D C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 16065 00001262 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 16066 00001267 B004                    		mov	al, 4
 16067                                  		; 24/12/2023
 16068 00001269 268A653E                		mov	ah, [es:di+3Eh]
 16069                                  		; 02/09/2023
 16070                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 16071 0000126D 80FC02                  		cmp	ah, 2
 16072                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16073                                  					; DEV_3INCH720KB
 16074 00001270 7414                    		jz	short DoSet
 16075                                  		; 24/12/2023
 16076 00001272 B001                    		mov	al, 1
 16077                                  		;cmp	ah, 1
 16078 00001274 38C4                    		cmp	ah, al	; 1
 16079                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 16080                                  					; DEV_5INCH96TPI
 16081                                  		;jz	short GotBig
 16082                                  		; 24/12/2023
 16083                                  		;mov	al, 1
 16084                                  		;jmp	short DoSet
 16085                                  		; 02/09/2023
 16086 00001276 750E                    		jnz	short DoSet
 16087                                  GotBig:
 16088                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 16089                                  		; 02/09/2023
 16090 00001278 40                      		inc	ax  ; mov al, 2
 16091 00001279 803E[A805]00            		cmp	byte [mediatype], 0
 16092 0000127E 7506                    		jnz	short DoSet
 16093                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 16094                                  		; 10/12/2022
 16095                                  		;inc	al  ; al = 3
 16096                                  		; 18/12/2022
 16097 00001280 40                      		inc	ax  ; al = 3
 16098 00001281 C606[3B01]54            		mov	byte [gap_patch], 54h
 16099                                  DoSet:
 16100 00001286 1E                      		push	ds
 16101 00001287 56                      		push	si
 16102                                  
 16103                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 16104                                  		; 02/09/2023
 16105 00001288 31F6                    		xor	si, si
 16106 0000128A 8EDE                    		mov	ds, si	; 0
 16107                                  
 16108 0000128C C5367800                		lds	si, [DSKADR]
 16109                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 16110                                  		;;lds	si, ds:78h
 16111                                  
 16112 00001290 C644090F                		mov	byte [si+9], 0Fh ;
 16113                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 16114 00001294 5E                      		pop	si
 16115 00001295 1F                      		pop	ds
 16116 00001296 B417                    		mov	ah, 17h
 16117 00001298 268A5504                		mov	dl, [es:di+4]
 16118 0000129C CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 16119                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 16120                                  DasdHasBeenSet:
 16121 0000129E 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 16122 000012A2 8826[3701]              		mov	[formt_eot], ah
 16123 000012A6 C3                      		retn
 16124                                  
 16125                                  ; =============== S U B	R O U T	I N E =======================================
 16126                                  
 16127                                  ; 16/10/2022
 16128                                  
 16129                                  ; ---------------------------------------------------------------------------
 16130                                  ;
 16131                                  ; Set Media Type for Format
 16132                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 16133                                  ; BPB area in the BDS can be handled by the rom.
 16134                                  ; On Input, ES:DI -> current BDS.
 16135                                  ; The status of the operation is returned in AL
 16136                                  ;
 16137                                  ;	- 0 - if the support is available,and the combination is valid.
 16138                                  ;	- 1 - no rom support
 16139                                  ;	- 2 - illegal combination
 16140                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 16141                                  ;
 16142                                  ; Flags also may be altered. All other registers preserved.
 16143                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 16144                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 16145                                  ; to the one returned. the original pointer to the disk base table is stored
 16146                                  ; in TempDpt, until it is restored.
 16147                                  ;
 16148                                  ; ---------------------------------------------------------------------------
 16149                                  
 16150                                  		; 24/12/2023 - Retro DOS 5.0
 16151                                  
 16152                                  		; 19/10/2022
 16153                                  SetMediaForFormat:	
 16154 000012A7 51                      		push	cx
 16155 000012A8 52                      		push	dx
 16156                                  
 16157                                  		; If we have a format error, then do not change Dpt, TempDpt.
 16158                                  		; but we need to call int 13h, ah=18h again.
 16159                                  
 16160 000012A9 803E[AA05]01            		cmp	byte [had_format_error], 1
 16161 000012AE 7425                    		jz	short SkipSaveDskAdr
 16162 000012B0 30C0                    		xor	al, al		; If already done return 0
 16163 000012B2 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16164 000012B7 7502                    		jnz	short DoSetMediaForFormat
 16165 000012B9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 16166                                  ; ---------------------------------------------------------------------------
 16167                                  
 16168                                  DoSetMediaForFormat:
 16169 000012BB 06                      		push	es
 16170 000012BC 56                      		push	si
 16171                                  
 16172                                  		; 02/09/2023
 16173                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 16174 000012BD 31F6                    		xor	si, si ; 0
 16175 000012BF 8EC6                    		mov	es, si
 16176                                  
 16177 000012C1 26C4367800              		les	si, [es:DSKADR]
 16178                                  		;les	si, es:78h	; [es:DSKADR]
 16179                                  					; Get pointer to disk base table
 16180 000012C6 8936[2D01]              		mov	[dpt], si
 16181 000012CA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16182                                  
 16183                                  		; Initialize the head settle time to 0Fh. See the offsets
 16184                                  		; given in dskprm.inc.
 16185                                  
 16186 000012CE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16187 000012D3 5E                      		pop	si
 16188 000012D4 07                      		pop	es
 16189                                  SkipSaveDskAdr:
 16190                                  		; 24/12/2023
 16191 000012D5 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 16192                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 16193 000012D9 49                      		dec	cx
 16194 000012DA 80E503                  		and	ch, 3
 16195 000012DD D0CD                    		ror	ch, 1
 16196 000012DF D0CD                    		ror	ch, 1
 16197 000012E1 86CD                    		xchg	ch, cl
 16198 000012E3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 16199 000012E7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16200 000012EB 06                      		push	es
 16201 000012EC 1E                      		push	ds
 16202 000012ED 56                      		push	si
 16203 000012EE 57                      		push	di
 16204 000012EF B418                    		mov	ah, 18h
 16205 000012F1 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 16206                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 16207 000012F3 7231                    		jc	short FormaStatErr
 16208 000012F5 803E[AA05]01            		cmp	byte [had_format_error], 1
 16209 000012FA 7423                    		jz	short skip_disk_base_setting
 16210 000012FC 06                      		push	es		; Save segment returned	by the rom
 16211                                  
 16212                                  		; 02/09/2023
 16213                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 16214 000012FD 31F6                    		xor	si, si
 16215 000012FF 8EC6                    		mov	es, si ; 0
 16216 00001301 06                      		push	es ; * ; 02/09/2023
 16217                                  
 16218 00001302 26C4367800              		les	si, [es:DSKADR]
 16219                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 16220                                  					; Get current disk base	table
 16221 00001307 8936[AB05]              		mov	[tempdpt], si
 16222 0000130B 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 16223                                  
 16224                                  		; 02/09/2023
 16225                                  		;;mov	es, [zeroseg]
 16226                                  		;xor	si, si ; 0
 16227                                  		;mov	es, si
 16228 0000130F 07                      		pop	es ; * ; 02/09/2023
 16229                                  
 16230                                  		;mov	es:78h,	di
 16231 00001310 26893E7800              		mov	[es:DSKADR], di
 16232                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 16233 00001315 268F067A00              		pop	word [es:DSKADR+2]
 16234 0000131A C606[A905]01            		mov	byte [media_set_for_format], 1
 16235                                  skip_disk_base_setting:
 16236 0000131F 30C0                    		xor	al, al		; Legal	combination + rom support code
 16237                                  		;mov	ds:had_format_error, al	; Reset	the flag
 16238 00001321 A2[AA05]                		mov	[had_format_error], al
 16239 00001324 EB0E                    		jmp	short PopStatRet
 16240                                  ; ---------------------------------------------------------------------------
 16241                                  
 16242                                  FormaStatErr:
 16243                                  		; 10/12/2022
 16244 00001326 B003                    		mov	al, 3
 16245                                  
 16246 00001328 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 16247                                  					; Illegal combination =	0Ch
 16248 0000132B 7406                    		jz	short FormatStatIllegalComb
 16249 0000132D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 16250 00001330 7402                    		jz	short FormatStatTimeOut
 16251                                  		; 10/12/2022
 16252                                  		;dec	al
 16253                                  		; 18/12/2022
 16254 00001332 48                      		dec	ax
 16255                                  		; al = 2
 16256                                  		;mov	al, 1		; Function not supported.
 16257                                  		;jmp	short PopStatRet
 16258                                  ; ---------------------------------------------------------------------------
 16259                                  
 16260                                  FormatStatIllegalComb:
 16261                                  		; 10/12/2022
 16262                                  		;dec	al	; 3 -> 2 or 2 -> 1
 16263                                  		; 18/12/2022
 16264 00001333 48                      		dec	ax
 16265                                  		; al = 2
 16266                                  		;mov	al, 2		; Function supported, but
 16267                                  					; Illegal sect/trk,trk combination.
 16268                                  		; 10/12/2022
 16269                                  		;jmp	short PopStatRet
 16270                                  ; ---------------------------------------------------------------------------
 16271                                  
 16272                                  FormatStatTimeOut:
 16273                                  		; 10/12/2022
 16274                                  		; al = 3
 16275                                  		;mov	al, 3		; Function supported, but
 16276                                  					; Media	not present.
 16277                                  PopStatRet:
 16278 00001334 5F                      		pop	di
 16279 00001335 5E                      		pop	si
 16280 00001336 1F                      		pop	ds
 16281 00001337 07                      		pop	es
 16282                                  SetMediaRet:
 16283 00001338 5A                      		pop	dx
 16284 00001339 59                      		pop	cx
 16285 0000133A C3                      		retn
 16286                                  
 16287                                  ; =============== S U B	R O U T	I N E =======================================
 16288                                  
 16289                                  ; 16/10/2022
 16290                                  
 16291                                  ; ---------------------------------------------------------------------------
 16292                                  ;
 16293                                  ; RESET THE DRIVE
 16294                                  ;
 16295                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 16296                                  ; slow head settle time for the next operation. this is because the reset
 16297                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 16298                                  ; time around - there is a problem with 3.5" drives in that the head does
 16299                                  ; not settle down in time,even for read operations!!
 16300                                  ;
 16301                                  ; ---------------------------------------------------------------------------
 16302                                  
 16303                                  ResetDisk:
 16304 0000133B 50                      		push	ax
 16305                                  
 16306                                  		; 02/09/2023
 16307 0000133C B80100                  		mov	ax, 1 ; PCDOS 7.1
 16308 0000133F 3806[A905]              		cmp	[media_set_for_format], al ; 1
 16309                                  		;cmp	byte [media_set_for_format], 1
 16310                                  					; Reset while formatting?
 16311 00001343 7503                    		jnz	short ResetDisk_cont
 16312                                  					; Then verify operation in "fmt & vrfy"
 16313                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 16314 00001345 A2[AA05]                		mov	[had_format_error], al ; 1
 16315                                  ResetDisk_cont:
 16316                                  		; 02/09/2023 (ah=0)
 16317                                  		;xor	ah, ah		; So signals that we had a format error
 16318 00001348 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 16319                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 16320 0000134A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 16321                                  					; Zap up the speed
 16322 0000134F 58                      		pop	ax
 16323 00001350 C3                      		retn
 16324                                  
 16325                                  ; =============== S U B	R O U T	I N E =======================================
 16326                                  
 16327                                  ; 16/10/2022
 16328                                  
 16329                                  ; ---------------------------------------------------------------------------
 16330                                  ;
 16331                                  ; This routine sets up the drive parameter table with the values needed for
 16332                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 16333                                  ;
 16334                                  ; on entry  -	ES:DI - points to bds for the drive
 16335                                  ;		Xfer_Seg:BX - points to trkbuf
 16336                                  ;		AL    - number of sectors
 16337                                  ;		AH    - int 13 function code
 16338                                  ;		CL    - sector number for verify
 16339                                  ;		DS    - Bios_Data
 16340                                  ;
 16341                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 16342                                  ;		AX and flags are the results of the int 13
 16343                                  ;
 16344                                  ; ---------------------------------------------------------------------------
 16345                                  
 16346                                  		; 24/12/2023 - Retro DOS 5.0
 16347                                  
 16348                                  		; 19/10/2022
 16349                                  ToRom:
 16350 00001351 53                      		push	bx
 16351 00001352 56                      		push	si
 16352                                  
 16353                                  		; Compaq bug fix - check whether we are using new ROM
 16354                                  		; functionality to set up format, not merely if it exists.
 16355                                  		; This was formerly a check against [new_rom]
 16356                                  
 16357 00001353 F606[A905]01            		test	byte [media_set_for_format], 1
 16358 00001358 7534                    		jnz	short GotValidDpt
 16359 0000135A 50                      		push	ax
 16360 0000135B 06                      		push	es		; Save bds segment
 16361                                  		; 24/12/2023
 16362 0000135C 26807D3E02              		cmp	byte [es:di+3Eh], 2
 16363                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16364                                  					; ffSmall ; is it a 3.5" drive?
 16365                                  		; 24/12/2023
 16366                                  		;pushf	; not necessary	; (Save	the cmp	result)
 16367 00001361 8E06[1A00]              		mov	es, [zeroseg]
 16368                                  		;les	si, es:78h	; Get pointer to disk base table
 16369 00001365 26C4367800              		les	si, [es:DSKADR]
 16370                                  		;mov	word ptr ds:dpt, si
 16371                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 16372 0000136A 8936[2D01]              		mov	[dpt], si
 16373 0000136E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16374                                  		
 16375 00001372 A0[3701]                		mov	al, [formt_eot]
 16376 00001375 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 16377 00001379 A0[3B01]                		mov	al, [gap_patch]
 16378 0000137C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 16379                                  					; Important for	format
 16380 00001380 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16381                                  					; Assume we are	doing a	seek operation
 16382                                  					; Setup	motor start correctly for 3.5" drives
 16383                                  		; 24/12/2023
 16384                                  		;popf			; Get result of	earlier	cmp
 16385 00001385 7505                    		jnz	short MotorStrtOK
 16386 00001387 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 16387                                  MotorStrtOK:
 16388 0000138C 07                      		pop	es		; Restore bds segment
 16389 0000138D 58                      		pop	ax
 16390                                  GotValidDpt:
 16391 0000138E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 16392 00001392 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 16393 00001394 268A5504                		mov	dl, [es:di+4]	; Set drive number
 16394 00001398 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 16395 0000139C 06                      		push	es		; Save bds segment
 16396 0000139D 8E06[A804]              		mov	es, [xfer_seg]
 16397 000013A1 CD13                    		int	13h		; DISK -
 16398 000013A3 07                      		pop	es		; Restore bds segment
 16399 000013A4 5E                      		pop	si
 16400 000013A5 5B                      		pop	bx
 16401 000013A6 C3                      		retn
 16402                                  
 16403                                  ; ---------------------------------------------------------------------------
 16404                                  
 16405                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16406                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 16407                                  
 16408                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 16409                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 16410                                  
 16411                                  ; ==========================================================================
 16412                                  ;
 16413                                  ; get the owner of the physical drive represented by the logical drive in al.
 16414                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 16415                                  ; if this is not the case, the system may hang, just following the linked list.
 16416                                  ;
 16417                                  ; ==========================================================================
 16418                                  
 16419                                  		; 24/12/2023 - Retro DOS 5.0
 16420                                  
 16421                                  		; 19/10/2022
 16422                                  ioctl_getown:
 16423 000013A7 E8FAF1                  		call	SetDrive
 16424 000013AA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 16425                                  					; Get physical drive number
 16426 000013AE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 16427                                  ownloop:
 16428 000013B2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 16429 000013B6 7507                    		jnz	short getnextBDS
 16430                                  		; 24/12/2023
 16431 000013B8 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 16432                                  		; 10/12/2022
 16433                                  		;test	byte [es:di+23h], 20h
 16434                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 16435                                  					; fi_own_physical
 16436 000013BD 7514                    		jnz	short exitown
 16437                                  getnextBDS:
 16438 000013BF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 16439 000013C2 EBEE                    		jmp	short ownloop
 16440                                  ; ---------------------------------------------------------------------------
 16441                                  
 16442                                  ; ==========================================================================
 16443                                  ;
 16444                                  ; set the ownership of the physical drive represented by the logical drive
 16445                                  ; in al to al.
 16446                                  ;
 16447                                  ; ==========================================================================
 16448                                  
 16449                                  		; 24/12/2023 - Retro DOS 5.0
 16450                                  
 16451                                  		; 19/10/2022
 16452                                  ioctl_setown:
 16453 000013C4 E8DDF1                  		call	SetDrive
 16454 000013C7 C606[7A00]01            		mov	byte [fsetowner], 1
 16455                                  					; set flag for CheckSingle to look at.
 16456 000013CC E8A8F5                  		call	checksingle
 16457                                  		; 02/09/2023
 16458 000013CF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 16459                                  		;mov	byte [fsetowner], 0
 16460                                  					; set ownership	of drive reset flag
 16461                                  		; Fall into ExitOwn
 16462                                  
 16463                                  ; ==========================================================================
 16464                                  ;
 16465                                  ; if there is only one logical drive assigned to this physical drive, return
 16466                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 16467                                  ;
 16468                                  ; ==========================================================================
 16469                                  
 16470                                  		; 24/12/2023 - Retro DOS 5.0
 16471                                  exitown:
 16472 000013D3 30C9                    		xor	cl, cl
 16473                                  		; 24/12/2023
 16474 000013D5 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 16475                                  		; 12/12/2022
 16476                                  		;test	byte [es:di+23h], 10h
 16477                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 16478                                  					; fi_am_mult
 16479 000013DA 7406                    		jz	short exitnomult
 16480 000013DC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 16481                                  					; Get logical drive number
 16482                                  					; Get it 1-based
 16483 000013E0 FEC1                    		inc	cl
 16484                                  exitnomult:
 16485 000013E2 C51E[1200]              		lds	bx, [ptrsav]
 16486 000013E6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 16487                                  					; Exit normal termination
 16488                                  		; 12/12/2022
 16489                                  		; cf=0
 16490                                  		;clc
 16491 000013E9 C3                      		retn
 16492                                  
 16493                                  ; =============== S U B	R O U T	I N E =======================================
 16494                                  
 16495                                  ; 16/10/2022
 16496                                  
 16497                                  ; ---------------------------------------------------------------------------
 16498                                  ;
 16499                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 16500                                  ; only if the first byte of TempDpt is not -1.
 16501                                  ; all registers (including flags) are preserved.
 16502                                  ;
 16503                                  ; ---------------------------------------------------------------------------
 16504                                  
 16505                                  		; 24/12/2023
 16506                                  		; 19/10/2022
 16507                                  RestoreOldDpt:
 16508                                  		; if we have already restored the disk base table earlier,
 16509                                  		; do not do it again.
 16510                                  
 16511 000013EA 50                      		push	ax
 16512 000013EB 30C0                    		xor	al, al
 16513 000013ED A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 16514 000013F0 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 16515 000013F4 08C0                    		or	al, al
 16516 000013F6 7418                    		jz	short DontRestore
 16517 000013F8 56                      		push	si
 16518 000013F9 1E                      		push	ds
 16519 000013FA 06                      		push	es
 16520 000013FB C536[AB05]              		lds	si, [tempdpt]
 16521                                  
 16522                                  		; 17/10/2022
 16523                                  		;mov	es, [cs:BIOSDATAWORD]
 16524                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16525                                  		;mov	es, [es:zeroseg]
 16526                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 16527                                  
 16528                                  		; 24/12/2023
 16529 000013FF 31C0                    		xor	ax, ax
 16530 00001401 8EC0                    		mov	es, ax ; 0
 16531                                  
 16532                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 16533 00001403 2689367800              		mov	[es:DSKADR], si
 16534                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 16535 00001408 268C1E7A00              		mov	[es:DSKADR+2], ds
 16536 0000140D 07                      		pop	es
 16537 0000140E 1F                      		pop	ds
 16538 0000140F 5E                      		pop	si
 16539                                  DontRestore:
 16540 00001410 58                      		pop	ax
 16541                                  		; 12/12/2022
 16542                                  		; cf=0
 16543                                  		;clc			;  Clear carry
 16544 00001411 C3                      		retn
 16545                                  
 16546                                  ; ---------------------------------------------------------------------------
 16547                                  
 16548                                  ; 16/10/2022
 16549                                  
 16550                                  ; ==========================================================================
 16551                                  ;	get media id
 16552                                  ; ==========================================================================
 16553                                  ;
 16554                                  ; FUNCTION: get the volume label,the system id and the serial number from
 16555                                  ;	    the media that has the extended boot record.
 16556                                  ;	    for the conventional media,this routine will return "unknown
 16557                                  ;	    media type" error to dos.
 16558                                  ;
 16559                                  ; INPUT :   ES:di -> bds table for this drive.
 16560                                  ;
 16561                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 16562                                  ;	    if carry set,then al contains the device driver error number
 16563                                  ;	    that will be returned to dos.
 16564                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 16565                                  ;
 16566                                  ; SUBROUTINES TO BE CALLED:
 16567                                  ;	BootIo:NEAR
 16568                                  ;
 16569                                  ; LOGIC:
 16570                                  ;	to recognize the extended boot record,this logic will actually
 16571                                  ;	access the boot sector even if it is a hard disk.
 16572                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 16573                                  ;	field of bpb and the extended boot signature.
 16574                                  ;
 16575                                  ; {
 16576                                  ;	get logical drive number from bds table;
 16577                                  ;	rFlag = read operation;
 16578                                  ;	BootIo;		 /*get the media boot record into the buffer
 16579                                  ;	if (no error) then
 16580                                  ;	     if (extended boot record) then
 16581                                  ;		{ set volume label,volume serial number and system id
 16582                                  ;		  of the request packet to those of the boot record;
 16583                                  ;		};
 16584                                  ;	     else		  /*not an extended bpb */
 16585                                  ;		{ set register al to "unknown media.." error code;
 16586                                  ;		  set carry bit;
 16587                                  ;		};
 16588                                  ;	else
 16589                                  ;	     ret;	/*already error code is set in the register al
 16590                                  ;
 16591                                  ; ==========================================================================
 16592                                  
 16593                                  ;size_of_EXT_BOOT_SERIAL equ 4
 16594                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 16595                                  ;;size_of_EXT_SYSTEM_ID equ 8
 16596                                  
 16597                                  		; 24/12/2023 - Retro DOS 5.0
 16598                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 16599                                  
 16600                                  		; 19/10/2022
 16601                                  GetMediaId:
 16602 00001412 E8B000                  		call	ChangeLineChk
 16603 00001415 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 16604 00001419 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 16605 0000141E E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 16606 00001421 722E                    		jb	short IOCtl_If1
 16607                                  					; Valid? (0F0h-0FFh?)
 16608 00001423 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16609                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16610                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 16611                                  		; 24/12/2023
 16612 00001428 7225                    		jb	short IOCtl_If7		
 16613                                  
 16614                                  		; 24/12/2023
 16615                                  		; 10/12/2022
 16616                                  		;mov	si, disksector+26h
 16617                                  		;;;
 16618                                  		; 24/12/2023
 16619                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 16620 0000142A BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 16621 0000142D 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16622 00001432 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 16623 00001434 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 16624                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 16625                                  IOCtl_If3:
 16626                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16627                                  		;;;
 16628 00001437 803C29                  		cmp	byte [si], 29h
 16629                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16630                                  					; EXT_BOOT_SIGNATURE
 16631 0000143A 7512                    		jne	short IOCtl_If2	; not extended boot record
 16632 0000143C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 16633 00001440 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16634                                  		; 10/12/2022
 16635                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16636 00001444 46                      		inc	si
 16637                                  		; 24/12/2023
 16638                                  		; si = disksector+27h (BS_VolID)
 16639                                  		;      or disksector+43h (BS_FAT32_VolID)
 16640                                  
 16641 00001445 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16642                                  IOCtl_If4:		; 24/12/2023
 16643 00001448 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16644                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 16645                                  					; +size_of_EXT_SYSTEM_ID
 16646 0000144B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 16647                                  	
 16648                                  		; 10/12/2022
 16649                                  		; cf = 0
 16650                                  		;clc
 16651                                  
 16652 0000144D C3                      		retn
 16653                                  ; ---------------------------------------------------------------------------
 16654                                  
 16655                                  		; 24/12/2023
 16656                                  IOCtl_If2:
 16657 0000144E F9                      		stc	
 16658                                  IOCtl_If7:
 16659 0000144F B007                    		mov	al, 7		; error_unknown_media
 16660                                  		;stc
 16661                                  IOCtl_If6:
 16662                                  IOCtl_If1:
 16663 00001451 C3                      		retn
 16664                                  ; ---------------------------------------------------------------------------
 16665                                  
 16666                                  ; 16/10/2022
 16667                                  
 16668                                  ; ==========================================================================
 16669                                  ;  set media id
 16670                                  ; ==========================================================================
 16671                                  
 16672                                  ; function: set the volume label, the system id and the serial number of
 16673                                  ;	    the media that has the extended boot record.
 16674                                  ;	    for the conventional media, this routine will return "unknown
 16675                                  ;	    media.." error to dos.
 16676                                  ;	    this routine will also set the corresponding informations in
 16677                                  ;	    the bds table.
 16678                                  ;
 16679                                  ; input :   ES:di -> bds table for this drive.
 16680                                  ;
 16681                                  ; output:   the extended boot record in the media will be set according to
 16682                                  ;	    the request packet.
 16683                                  ;	    if carry set, then al contains the device driver error number
 16684                                  ;	    that will be returned to dos.
 16685                                  ;
 16686                                  ; subroutines to be called:
 16687                                  ;	BootIo:NEAR
 16688                                  ;
 16689                                  ; logic:
 16690                                  ;
 16691                                  ; {
 16692                                  ;	get drive_number from bds;
 16693                                  ;	rFlag = "read operation";
 16694                                  ;	BootIo;
 16695                                  ;	if (no error) then
 16696                                  ;	     if (extended boot record) then
 16697                                  ;		{ set volume label,volume serial number and system id
 16698                                  ;		  of the boot record to those of the request packet;
 16699                                  ;		  rFlag = "write operation";
 16700                                  ;		  get drive number from bds;
 16701                                  ;		  BootIo;	  /*write it back*/
 16702                                  ;		};
 16703                                  ;	     else		  /*not an extended bpb */
 16704                                  ;		{ set register al to "unknown media.." error code;
 16705                                  ;		  set carry bit;
 16706                                  ;		  ret;	 /*return back to caller */
 16707                                  ;		};
 16708                                  ;	else
 16709                                  ;	     ret;		 /*already error code is set */
 16710                                  ;
 16711                                  ; ==========================================================================
 16712                                  
 16713                                  		; 24/12/2023 - Retro DOS 5.0
 16714                                  
 16715                                  		; 19/10/2022
 16716                                  SetMediaId:
 16717 00001452 E87000                  		call	ChangeLineChk
 16718 00001455 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 16719                                  					; Logical drive	number
 16720 00001459 88C2                    		mov	dl, al
 16721 0000145B C606[2001]02            		mov	byte [rflag], 2	; romread
 16722 00001460 52                      		push	dx
 16723 00001461 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 16724 00001464 5A                      		pop	dx
 16725 00001465 72EA                    		jb	short IOCtl_If6
 16726                                  					; Valid? (0F0h-0FFh?)
 16727 00001467 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16728                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16729 0000146C 72E1                    		jb	short IOCtl_If7	; Brif not
 16730                                  
 16731                                  		; 24/12/2023
 16732                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16733                                  		;			; EXT_BOOT_SIGNATURE
 16734                                  		;jnz	short IOCtl_If7	; not extended boot record
 16735                                  		
 16736 0000146E 06                      		push	es		; Save BDS pointer
 16737 0000146F 57                      		push	di
 16738 00001470 1E                      		push	ds		; Point	ES To boot record
 16739 00001471 07                      		pop	es
 16740                                  
 16741                                  		; 24/12/2023
 16742                                  		;;;
 16743                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 16744 00001472 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 16745 00001475 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16746 0000147A 7403                    		jz      short IOCtl_If5	; FAT32 fs
 16747 0000147C 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 16748                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 16749                                  IOCtl_If5:
 16750                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16751 0000147F 803D29                  		cmp	byte [di], 29h
 16752 00001482 7404                    		je	short IOCtl_If8
 16753 00001484 5F                      		pop	di		; not extended boot record
 16754 00001485 07                      		pop	es
 16755                                  		;jmp	short IOCtl_If7
 16756                                  		; 24/12/2023
 16757 00001486 EBC6                    		jmp	short IOCtl_If2
 16758                                  IOCtl_If8:
 16759                                  		;;;
 16760                                  		; 24/12/2023
 16761                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16762 00001488 47                      		inc	di
 16763                                  		; di = disksector+27h (BS_VolID)
 16764                                  		;      or disksector+43h (BS_FAT32_VolID)
 16765                                  
 16766 00001489 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 16767 0000148D C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 16768 00001490 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16769                                  		
 16770                                  		; 24/12/2023
 16771                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16772                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 16773                                  		;			; +size_of_EXT_SYSTEM_ID
 16774                                  		;rep movsb
 16775 00001493 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 16776                                  
 16777 00001496 06                      		push	es		; point	ds back	to Bios_Data
 16778 00001497 1F                      		pop	ds
 16779 00001498 5F                      		pop	di		; restore bds pointer
 16780 00001499 07                      		pop	es
 16781 0000149A E8B2F3                  		call	mov_media_ids	; update the bds media id info.
 16782 0000149D 88D0                    		mov	al, dl
 16783 0000149F C606[2001]03            		mov	byte [rflag], 3	; romwrite
 16784 000014A4 E80600                  		call	BootIo		; write	it back.
 16785 000014A7 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 16786                                  					; make sure chk_media check the driver
 16787                                  					; return with error code from BootIo
 16788 000014AC C3                      		retn
 16789                                  ; ---------------------------------------------------------------------------
 16790                                  
 16791                                  		; 24/12/2023
 16792                                  ;IOCtl_If7:
 16793                                  ;		mov	al, 7		; error_unknown_media
 16794                                  ;		stc
 16795                                  ;IOCtl_If6:
 16796                                  ;		retn
 16797                                  
 16798                                  ; =============== S U B	R O U T	I N E =======================================
 16799                                  
 16800                                  ; 16/10/2022
 16801                                  
 16802                                  ; ---------------------------------------------------------------------------
 16803                                  ;	BootIo
 16804                                  ; ---------------------------------------------------------------------------
 16805                                  ;
 16806                                  ; function: read/write the boot record into boot sector.
 16807                                  ;
 16808                                  ; input :
 16809                                  ;	    al=logical drive number
 16810                                  ;	    rFlag = operation (read/write)
 16811                                  ;
 16812                                  ; output:   for read operation,the boot record of the drive specified in bds
 16813                                  ;	    be read into the DiskSector buffer.
 16814                                  ;	    for write operation,the DiskSector buffer image will be written
 16815                                  ;	    to the drive specified in bds.
 16816                                  ;	    if carry set,then al contains the device driver error number
 16817                                  ;	    that will be returned to dos.
 16818                                  ;	    AX,CX,DX register destroyed.
 16819                                  ;	    if carry set,then al will contain the error code from DiskIO.
 16820                                  ;
 16821                                  ; subroutines to be called:
 16822                                  ;	DiskIO:NEAR
 16823                                  ;
 16824                                  ; logic:
 16825                                  ;
 16826                                  ; {
 16827                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 16828                                  ;	sectorcount = 1;	 /*read 1 sector only */
 16829                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 16830                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 16831                                  ; }
 16832                                  ; ==========================================================================
 16833                                  
 16834                                  		; 19/10/2022
 16835                                  BootIo:	
 16836 000014AD 06                      		push	es
 16837 000014AE 57                      		push	di
 16838 000014AF 53                      		push	bx
 16839 000014B0 1E                      		push	ds
 16840 000014B1 07                      		pop	es		; Point ES: to Bios_Data
 16841                                  
 16842                                  		; Call DiskIO to read/write the boot sec. The parameters which
 16843                                  		; need to be initialized for this subroutine out here are
 16844                                  		; - Transfer address to Bios_Data:DiskSector
 16845                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 16846                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 16847                                  		; - Number of sectors <-- 1
 16848                                  
 16849 000014B2 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 16850 000014B5 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 16851 000014B7 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 16852 000014BB B90100                  		mov	cx, 1
 16853 000014BE E850F5                  		call	diskio
 16854 000014C1 5B                      		pop	bx
 16855 000014C2 5F                      		pop	di
 16856 000014C3 07                      		pop	es
 16857 000014C4 C3                      		retn
 16858                                  
 16859                                  ; =============== S U B	R O U T	I N E =======================================
 16860                                  
 16861                                  ; 16/10/2022
 16862                                  
 16863                                  ; ---------------------------------------------------------------------------
 16864                                  ;	ChangeLineChk
 16865                                  ; ---------------------------------------------------------------------------
 16866                                  ;
 16867                                  ; when the user calls get/set media id call before dos establishes the media
 16868                                  ; by calling "media_chk",the change line activity of the drive is going to be
 16869                                  ; lost.	this routine will check the change line activity and will save the
 16870                                  ; history in the flags.
 16871                                  ;
 16872                                  ; FUNCTION: check the change line error activity
 16873                                  ;
 16874                                  ; INPUT :  ES:di -> bds table.
 16875                                  ;
 16876                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 16877                                  ;
 16878                                  ; SUBROUTINES TO BE CALLED:
 16879                                  ;	Set_Changed_DL
 16880                                  ;
 16881                                  ; ---------------------------------------------------------------------------
 16882                                  
 16883                                  		; 24/12/2023 - Retro DOS 5.0
 16884                                  ChangeLineChk:	
 16885 000014C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16886 000014C9 08D2                    		or	dl, dl		; Fixed	disk?
 16887 000014CB 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 16888                                  		; 24/12/2023
 16889 000014CD 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 16890                                  		; 12/12/2022
 16891                                  		;test	byte [es:di+23h], 4
 16892                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 16893                                  					; return_fake_bpb
 16894 000014D2 751A                    		jnz	short ChangeLnChkRet
 16895 000014D4 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 16896 000014D9 7513                    		jnz	short ChangeLnChkRet
 16897 000014DB E8AD07                  		call	haschange	; This drive support change line?
 16898 000014DE 740E                    		jz	short ChangeLnChkRet ; Do nothing
 16899                                  
 16900                                  		; Execute the rom disk interrupt to check changeline activity.
 16901                                  
 16902 000014E0 B416                    		mov	ah, 16h
 16903 000014E2 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 16904                                  				; DL = drive to	check
 16905                                  				; Return: AH = disk change status
 16906 000014E4 7308                    		jnb	short ChangeLnChkRet
 16907 000014E6 53                      		push	bx
 16908 000014E7 BB4000                  		mov	bx, 40h		; fchanged
 16909                                  					; Update flag in BDS for this
 16910                                  					; physical drive
 16911 000014EA E87707                  		call	set_changed_dl
 16912 000014ED 5B                      		pop	bx
 16913                                  ChangeLnChkRet:				
 16914 000014EE C3                      		retn
 16915                                  
 16916                                  ; ---------------------------------------------------------------------------
 16917                                  
 16918                                  ; 16/10/2022
 16919                                  
 16920                                  ; ==========================================================================
 16921                                  ;	GetAccessFlag
 16922                                  ; ==========================================================================
 16923                                  ;
 16924                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 16925                                  ;
 16926                                  ; INPUT :
 16927                                  ;	    ES:di -> bds table
 16928                                  ;
 16929                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 16930                                  ;						 = 1 if disk i/o allowed.
 16931                                  ; ==========================================================================
 16932                                  
 16933                                  		; 24/12/2023 - Retro DOS 5.0
 16934                                  
 16935                                  		; 19/10/2022
 16936                                  GetAccessFlag:				
 16937 000014EF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16938 000014F3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16939                                  		;mov	al, 0		; Assume result	is unformatted
 16940                                  		; 10/12/2022
 16941 000014F6 28C0                    		sub	al, al
 16942                                  		; 24/12/2023
 16943 000014F8 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16944                                  		;test	word ptr es:[di+3Fh], 200h
 16945                                  		; 10/12/2022
 16946                                  		;test	byte [es:di+36], 02h
 16947                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 16948                                  					; unformatted_media
 16949 000014FD 7501                    		jnz	short GafDone	; Done if unformatted
 16950                                  		;inc	al		; Return true for formatted
 16951                                  		; 24/12/2023
 16952 000014FF 40                      		inc	ax
 16953                                  GafDone:				
 16954 00001500 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16955 00001503 C3                      		retn
 16956                                  ; ---------------------------------------------------------------------------
 16957                                  
 16958                                  ; 16/10/2022
 16959                                  
 16960                                  ; ==========================================================================
 16961                                  ;	SetAccessFlag
 16962                                  ; ==========================================================================
 16963                                  ;
 16964                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 16965                                  ;
 16966                                  ; input :
 16967                                  ;	    ES:di -> bds table
 16968                                  ;
 16969                                  ; output:   unformtted_media bit modified according to the user request
 16970                                  ; ==========================================================================
 16971                                  
 16972                                  		; 24/12/2023 - Retro DOS 5.0
 16973                                  
 16974                                  		; 19/10/2022
 16975                                  SetAccessFlag:				
 16976 00001504 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 16977 00001508 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16978                                  		; 24/12/2023
 16979 0000150B 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 16980                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 16981                                  		; 10/12/2022
 16982                                  		;and	byte [es:di+36], 0FDh
 16983                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 16984                                  					; ~unformatted_media
 16985 00001510 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16986 00001514 7505                    		jnz	short saf_Done
 16987                                  		; 24/12/2023
 16988 00001516 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16989                                  		;or	word ptr es:[di+3Fh], 200h
 16990                                  		; 15/04/2024
 16991                                  		; 10/12/2022
 16992                                  		;or	byte [es:di+36], 02h
 16993                                  		;;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 16994                                  					; unformatted_media
 16995                                  saf_Done:				
 16996 0000151B C3                      		retn
 16997                                  ; ---------------------------------------------------------------------------
 16998                                  
 16999                                  ; 16/10/2022
 17000                                  
 17001                                  ; ==========================================================================
 17002                                  ; Ioctl_Support_Query
 17003                                  ; ==========================================================================
 17004                                  ;
 17005                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 17006                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 17007                                  ; device attributes specifies if this function is supported.
 17008                                  ;
 17009                                  ; ==========================================================================
 17010                                  
 17011                                  		; 24/12/2023 - Retro DOS 5.0
 17012                                  
 17013                                  		; 19/10/2022
 17014                                  ioctl_support_query:
 17015 0000151C 06                      		push	es
 17016 0000151D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 17017 00001521 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 17018                                  					; AL ==	Major, AH == Minor
 17019                                  		; 24/12/2023
 17020                                  		; 02/09/2023 (PCDOS 7.1)
 17021 00001525 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 17022                                  					; new generic ioctl function (FAT32)
 17023 00001527 7404                    		je	short ioctl_support
 17024                                  
 17025 00001529 3C08                    		cmp	al, 8		; IOC_DC
 17026                                  					; See if major code is 8
 17027 0000152B 7513                    		jne	short nosupport
 17028                                  ioctl_support:
 17029 0000152D 0E                      		push	cs
 17030 0000152E 07                      		pop	es
 17031                                  		; 24/12/2023
 17032                                  		; 02/09/2023
 17033 0000152F B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 17034                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 17035                                  		; 10/12/2022
 17036 00001532 BF[BD0E]                		mov	di, IOC_DC_Table
 17037                                  		;mov	di, 0C60h	; IOC_DC_Table
 17038                                  					; at 2C7h:0C60h	= 70h:31D0h
 17039 00001535 86E0                    		xchg	al, ah		; Put minor code in AL
 17040 00001537 F2AE                    		repne scasb		; Scan for minor code in AL
 17041 00001539 7505                    		jnz	short nosupport	; it was not found
 17042 0000153B B80001                  		mov	ax, 100h
 17043                                  		; 10/12/2022
 17044                                  		; (jump to ioctlsupexit is not required)
 17045                                  		;jmp	short $+2	; ioctlsupexit
 17046                                  					; Signal ioctl is supported
 17047                                  		;;jmp	short ioctlsupexit
 17048                                  ; ---------------------------------------------------------------------------
 17049                                  ioctlsupexit:
 17050 0000153E 07                      		pop	es
 17051                                  		; 10/12/2022
 17052                                  		; cf = 0
 17053                                  		;clc
 17054 0000153F C3                      		retn
 17055                                  ; ---------------------------------------------------------------------------
 17056                                  nosupport:
 17057 00001540 07                      		pop	es
 17058 00001541 E991EB                  		jmp	bc_cmderr
 17059                                  ; ---------------------------------------------------------------------------
 17060                                  
 17061                                  ; 16/10/2022
 17062                                  
 17063                                  ; ==========================================================================
 17064                                  ;	GetMediaSenseStatus
 17065                                  ; ==========================================================================
 17066                                  ;
 17067                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 17068                                  ;	    diskette drive and whether the media is the default type
 17069                                  ;	    for that drive. (default type means the max size for that
 17070                                  ;	    drive)
 17071                                  ;
 17072                                  ; INPUT :   ES:DI -> BDS table
 17073                                  ; OUTPUT:   If carry clear
 17074                                  ;	    DS:BX -> Updated IOCtlPacket
 17075                                  ;
 17076                                  ;			 Special Function at offset 0:
 17077                                  ;				0	- Media detected is not default type
 17078                                  ;				1	- Media detected is default type
 17079                                  ;
 17080                                  ;			 Device Type at offset 1:
 17081                                  ;				2       - 720K 3.5" 80 tracks
 17082                                  ;				7	- 1.44M 3.5" 80 tracks
 17083                                  ;				9	- 2.88M 3.5" 80 tracks
 17084                                  ;
 17085                                  ; Error Codes returned in AX if carry set:
 17086                                  ;
 17087                                  ; 8102 - Drive not ready	- No disk is in the drive.
 17088                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 17089                                  ;				  the media is really unkown, any error
 17090                                  ;				  other than "media not present"
 17091                                  ; 
 17092                                  ; ==========================================================================
 17093                                  
 17094                                  		; 19/10/2022
 17095                                  SenseMediaType:
 17096 00001544 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 17097 00001548 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17098                                  		; 10/10/2022
 17099                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 17100 0000154B 31D2                    		xor	dx, dx
 17101 0000154D 8917                    		mov	[bx], dx ; 0
 17102                                  		;
 17103 0000154F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17104                                  					; Get int 13h drive number from	BDS
 17105                                  		; 10/12/2022
 17106                                  		;xor	dh, dh		; DX = physical	drive number
 17107 00001553 B420                    		mov	ah, 20h		; Get Media Type function
 17108                                  					; If no	carry media type in AL
 17109 00001555 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 17110 00001557 7216                    		jc	short MediaSenseEr ; error code	in AH
 17111 00001559 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 17112                                  DetermineMediaType:
 17113 0000155B FEC8                    		dec	al
 17114 0000155D 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 17115 0000155F 740A                    		jz	short GotMediaType
 17116 00001561 0404                    		add	al, 4
 17117 00001563 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 17118 00001565 7404                    		jz	short GotMediaType
 17119 00001567 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 17120 00001569 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 17121                                  GotMediaType:
 17122 0000156B 884701                  		mov	[bx+1],	al	; Save the return value
 17123                                  		; 10/12/2022
 17124                                  		; cf = 0
 17125                                  		;clc			; Signal success
 17126 0000156E C3                      		retn
 17127                                  ; ---------------------------------------------------------------------------
 17128                                  
 17129                                  MediaSenseEr:
 17130 0000156F 80FC32                  		cmp	ah, 32h		; See if not default media error
 17131 00001572 74E7                    		jz	short DetermineMediaType ; Not really an error
 17132 00001574 B002                    		mov	al, 2		; Now assume drive not ready
 17133 00001576 80FC31                  		cmp	ah, 31h		; See if media was present
 17134 00001579 7402                    		jz	short SenseErrExit ; Return drive not ready
 17135                                  UnknownMediaType:
 17136 0000157B B007                    		mov	al, 7		; Just don't know the media type
 17137                                  SenseErrExit:
 17138 0000157D B481                    		mov	ah, 81h		; Signal error return
 17139 0000157F F9                      		stc
 17140 00001580 C3                      		retn
 17141                                  
 17142                                  ; ----------------------------------------------------------------------------
 17143                                  		; 10/12/2022
 17144                                  		;db    0
 17145                                  ; ----------------------------------------------------------------------------
 17146                                  
 17147                                  ;-----------------------------------------------------------------------------
 17148                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 17149                                  ;-----------------------------------------------------------------------------
 17150                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 17151                                  
 17152                                  ; =============== S U B R O U T I N E =======================================
 17153                                  
 17154                                  SetLockState:
 17155 00001581 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 17156 00001585 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17157                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17158                                  		;call	check_int13h_exts_present
 17159                                  		; 26/12/2023
 17160 00001588 E82100                  		call	check_int13h_exts_p
 17161                                  		;mov	al, 3		; unknown command error
 17162 0000158B 721C                    		jc	short setlockst_ret
 17163 0000158D 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 17164 0000158F B445                    		mov	ah, 45h
 17165 00001591 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 17166                                  		; (DL - drive, [SI - disk address packet)
 17167 00001593 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 17168                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 17169                                  		
 17170                                  		; 26/12/2023
 17171 00001596 EB0A                    		jmp	short sls_em
 17172                                  
 17173                                  ;		jnc	short setlockst_ret
 17174                                  ;		mov	al, ah
 17175                                  ;		call	maperror
 17176                                  ;setlockst_ret:
 17177                                  ;		mov	ah, 81h		; Return this status in case of carry
 17178                                  ;		retn
 17179                                  
 17180                                  ; =============== S U B R O U T I N E =======================================
 17181                                  
 17182                                  EjectMedia:
 17183                                  		;mov	dl, [es:di+4]	; eject media in drive
 17184                                  		;			; [es:di+BDS.drivenum]
 17185                                  		;call	check_int13h_exts_present
 17186                                  		; 26/12/2023
 17187 00001598 E81100                  		call	check_int13h_exts_p
 17188                                  		;mov	al, 3		; unknown command error
 17189 0000159B 720C                    		jc	short ejectm_ret
 17190 0000159D B80046                  		mov	ax, 4600h
 17191 000015A0 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 17192                                  		; (DL - drive)
 17193                                  sls_em:			; 26/12/2023
 17194 000015A2 7305                    		jnc	short ejectm_ret
 17195 000015A4 88E0                    		mov	al, ah
 17196 000015A6 E800F8                  		call	maperror
 17197                                  setlockst_ret:		; 26/12/2023
 17198                                  ejectm_ret:
 17199 000015A9 B481                    		mov	ah, 81h		; Return this status in case of carry
 17200 000015AB C3                      		retn
 17201                                  
 17202                                  ; =============== S U B R O U T I N E =======================================
 17203                                  
 17204                                  		; 26/12/2023
 17205                                  check_int13h_exts_p:
 17206 000015AC 268A5504                		mov	dl, [es:di+4]
 17207                                  
 17208                                  check_int13h_exts_present:
 17209 000015B0 B441                    		mov	ah, 41h
 17210 000015B2 53                      		push	bx
 17211 000015B3 BBAA55                  		mov	bx, 55AAh
 17212 000015B6 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 17213                                  					; BX = 55AAh, DL = drive number
 17214                                  					; Return: CF set if not supported
 17215                                  					; AH = extensions version
 17216                                  					; BX = AA55h
 17217                                  					; CX = Interface support bit map
 17218 000015B8 81FB55AA                		cmp	bx, 0AA55h
 17219 000015BC 5B                      		pop	bx
 17220 000015BD 7505                    		jnz	short exts_notsupported
 17221 000015BF F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 17222 000015C2 7503                    		jnz	short exts_supported
 17223                                  exts_notsupported:
 17224                                  		; 26/12/2023
 17225 000015C4 B003                    		mov	al, 3
 17226                                  		;
 17227 000015C6 F9                      		stc
 17228                                  exts_supported:
 17229 000015C7 C3                      		retn
 17230                                  
 17231                                  ; =============== S U B R O U T I N E =======================================
 17232                                  
 17233                                  GetDrvMapInfo:
 17234 000015C8 8CD9                    		mov	cx, ds		; get drive map information
 17235                                  					;
 17236                                  					; es:di points to BDS which belongs to
 17237                                  					;	  the requested logical/dos drive number
 17238                                  					;
 17239                                  					; Format of parameter block:
 17240                                  					; Offset  Description (Table 01570)
 17241                                  					;  00h    (call) length of this buffer (in bytes)
 17242                                  					;  01h    (ret) number of bytes in parameter block
 17243                                  					;	    actually used
 17244                                  					;  02h    (ret) drive flags
 17245                                  					;  03h    (ret) physical drive number
 17246                                  					;	    00h-7Fh floppy
 17247                                  					;	    80h-FEh hard
 17248                                  					;	    FFh no physical drive
 17249                                  					;  04h    (ret) bitmap of logical drives associated with
 17250                                  					;	    physical drive
 17251                                  					;	    bit 0 = drive A:, etc.
 17252                                  					;  08h    (ret) relative block address of partition start
 17253                                  					;	    qword
 17254                                  					;
 17255                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 17256 000015CA C51E[1200]              		lds	bx, [ptrsav]
 17257 000015CE C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17258 000015D1 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 17259                                  					; al = unknown command error (03h)
 17260 000015D4 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 17261 000015D7 7251                    		jb	short gdmi_4
 17262 000015D9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17263 000015DD 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 17264 000015E0 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 17265 000015E4 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 17266 000015E8 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 17267 000015EB 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 17268 000015EF 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 17269 000015F2 31C0                    		xor	ax, ax ; 0
 17270 000015F4 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 17271 000015F7 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 17272 000015FA 89470E                  		mov	[bx+0Eh], ax
 17273 000015FD 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 17274                                  					; initialized as 0
 17275 00001600 894706                  		mov	[bx+6], ax ; 0
 17276 00001603 8EC1                    		mov	es, cx
 17277                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 17278 00001605 26C43E[1901]            		les	di, [es:start_bds]
 17279 0000160A B90100                  		mov	cx, 1		; bit 0 (drive A:)
 17280                                  gdmi_1:
 17281 0000160D 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 17282 00001610 7415                    		jz	short gdmi_3	; yes
 17283 00001612 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 17284                                  					; is it same physical drive ?
 17285 00001616 7506                    		jnz	short gdmi_2	; no
 17286 00001618 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 17287                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 17288 0000161B 094706                  		or	[bx+6], ax
 17289                                  gdmi_2:
 17290 0000161E D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 17291 00001620 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 17292 00001622 26C43D                  		les	di, [es:di]	; next BDS
 17293 00001625 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 17294                                  gdmi_3:
 17295 00001627 B80001                  		mov	ax, 100h	; success
 17296                                  gdmi_4:
 17297 0000162A C3                      		retn
 17298                                  
 17299                                  ;-----------------------------------------------------------------------------
 17300                                  
 17301                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17302                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17303                                  
 17304                                  ;-----------------------------------------------------------------------------
 17305                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 17306                                  ;-----------------------------------------------------------------------------
 17307                                  ; 16/03/2019 - Retro DOS v4.0
 17308                                  
 17309                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 17310                                  ;	after booting. this allows testing and implementation of custom int_13
 17311                                  ;	handlers, without giving up ms-dos error recovery
 17312                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 17313                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 17314                                  ;	exit:	orig13	== address of new int_13 handler
 17315                                  ;		ds:dx	== old orig13 value
 17316                                  ;		es:bx	== old old13  value
 17317                                  ;
 17318                                  ; int 2f handler for external block drivers to communicate with the internal
 17319                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 17320                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 17321                                  ; dsk_entry, the entry point for all disk requests.
 17322                                  ;
 17323                                  ; on exit from this driver, we will return to the external driver
 17324                                  ; that issued this int 2f, and can then remove the flags from the stack.
 17325                                  ; this scheme allows us to have a small external device driver, and makes
 17326                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 17327                                  ; since we only need to make changes in one place (most of the time).
 17328                                  ;
 17329                                  ;   ax=800h - check for installed handler - reserved
 17330                                  ;   ax=801h - install the bds into the linked list
 17331                                  ;   ax=802h - dos request
 17332                                  ;   ax=803h - return bds table starting pointer in ds:di
 17333                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 17334                                  ;	    problem. bds table is going to be used to get head/sector
 17335                                  ;	    informations without calling generic ioctl get device parm call.)
 17336                                  
 17337                                  ;BIOSSEGMENT equ 70h
 17338                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 17339                                  
 17340                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 17341                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 17342                                  
 17343                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 17344 0000162B 80FC13                  		cmp	ah, 13h
 17345 0000162E 7413                    		jz	short int2f_replace_int13
 17346 00001630 80FC08                  		cmp	ah, 8
 17347 00001633 7432                    		jz	short mine
 17348                                  
 17349                                  ; Check for WIN386 startup and return the BIOS instance data
 17350                                  
 17351 00001635 80FC16                  		cmp	ah, 16h		; MultWin386
 17352 00001638 746D                    		jz	short win386call
 17353 0000163A 80FC4A                  		cmp	ah, 4Ah		; multMULT
 17354 0000163D 7503                    		jnz	short i2f_handler_iret
 17355 0000163F E99800                  		jmp	handle_multmult
 17356                                  ; ---------------------------------------------------------------------------
 17357                                  
 17358                                  i2f_handler_iret:			
 17359 00001642 CF                      		iret
 17360                                  ; ---------------------------------------------------------------------------
 17361                                  
 17362                                  int2f_replace_int13:
 17363 00001643 FA                      		cli	; 26/12/2023
 17364 00001644 50                      		push	ax	; free up a register for caller's ds
 17365 00001645 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 17366                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 17367                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 17368                                  					; = [02C7h:0030h] = [0070h:25A0h]
 17369 00001647 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17370                                  		; 19/10/2022
 17371                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 17372                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 17373                                  		;push	word ptr ds:Old13	; return them to caller
 17374                                  		;push	word ptr ds:Old13+2
 17375                                  		
 17376                                  		; 02/09/2023 (PCDOS 7.1)
 17377                                  		;push	word [Orig13]
 17378 0000164C FF36[B600]              		push	word [Orig13+2]
 17379                                  		;push	word [Old13]
 17380 00001650 FF36[0801]              		push	word [Old13+2]
 17381                                  
 17382                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 17383                                  		;mov	word ptr ds:Orig13+2, ax
 17384                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 17385                                  		;mov	word ptr ds:Old13+2, es
 17386                                  		
 17387                                  		;mov	[Orig13], dx
 17388                                  		; 02/09/2023
 17389 00001654 8716[B400]              		xchg	dx, [Orig13]
 17390 00001658 A3[B600]                		mov	[Orig13+2], ax
 17391                                  		;mov	[Old13], bx
 17392                                  		; 02/09/2023
 17393 0000165B 871E[0601]              		xchg	bx, [Old13]
 17394 0000165F 8C06[0801]              		mov	[Old13+2], es
 17395                                  
 17396 00001663 07                      		pop	es			; es:bx := old old13 vector
 17397                                  		; 02/09/2023
 17398                                  		;pop	bx
 17399 00001664 1F                      		pop	ds			; ds:dx := old orig13 vector
 17400                                  		;pop	dx ; 02/09/2023
 17401 00001665 58                      		pop	ax
 17402                                  i2f_iret:
 17403 00001666 CF                      		iret
 17404                                  ; ---------------------------------------------------------------------------
 17405                                  
 17406                                  mine:
 17407 00001667 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 17408 00001669 73FB                    		jnb	short i2f_iret
 17409 0000166B 08C0                    		or	al, al			; a get installed state request?
 17410 0000166D 7503                    		jnz	short disp_func
 17411 0000166F B0FF                    		mov	al, 0FFh
 17412                                  		;jmp	short i2f_iret
 17413                                  		; 02/09/2023
 17414 00001671 CF                      		iret
 17415                                  ; ---------------------------------------------------------------------------
 17416                                  
 17417                                  disp_func:
 17418 00001672 3C01                    		cmp	al, 1			; request for installing bds?
 17419 00001674 7418                    		jz	short do_subfun_01
 17420 00001676 3C03                    		cmp	al, 3			; get bds vector?
 17421 00001678 7423                    		jz	short do_get_bds_vector
 17422                                  
 17423                                  ; set up pointer to request packet
 17424                                  
 17425 0000167A 1E                      		push	ds
 17426 0000167B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17427                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17428                                  					; = [0070h:25A0h] = [02C7h:0030h]
 17429                                  		; 19/10/2022
 17430                                  		;mov	word ptr ds:ptrsav, bx
 17431                                  		;mov	word ptr ds:ptrsav+2, es
 17432 00001680 891E[1200]              		mov	[ptrsav], bx
 17433 00001684 8C06[1400]              		mov	[ptrsav+2], es
 17434 00001688 1F                      		pop	ds
 17435                                  		;jmp	far ptr	i2f_dskentry
 17436                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 17437                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 17438 00001689 EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 17439                                  		;; 17/10/2022
 17440                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 17441                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 17442                                  					; NOTE: jump to a FAR function, not an
 17443                                  					;  IRET type function. Callers of
 17444                                  					;  this int2f subfunction will have
 17445                                  					;  to be careful to do a popf
 17446                                  
 17447                                  ; ---------------------------------------------------------------------------
 17448                                  
 17449                                  do_subfun_01:
 17450 0000168E 06                      		push	es
 17451 0000168F 1E                      		push	ds
 17452 00001690 1E                      		push	ds
 17453 00001691 07                      		pop	es
 17454                                  		; 17/10/2022
 17455 00001692 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17456                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17457                                  					; point	ds: -> Bios_Data
 17458 00001697 E8BC03                  		call	install_bds
 17459 0000169A 1F                      		pop	ds
 17460 0000169B 07                      		pop	es
 17461                                  		;jmp	short i2f_iret
 17462                                  		; 02/09/2023
 17463 0000169C CF                      		iret
 17464                                  ; ---------------------------------------------------------------------------
 17465                                  
 17466                                  do_get_bds_vector:
 17467                                  		; 17/10/2022
 17468 0000169D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17469                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17470 000016A2 C53E[1901]              		lds	di, [start_bds]
 17471                                  		;lds	di, ds:start_bds
 17472                                  ;ii2f_iret:	; 10/12/2022
 17473                                  		;jmp	short i2f_iret
 17474                                  		; 02/09/2023
 17475 000016A6 CF                      		iret
 17476                                  ; ---------------------------------------------------------------------------
 17477                                  
 17478                                  ; 17/10/2022
 17479                                  ; 16/10/2022
 17480                                  
 17481                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 17482                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 17483                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 17484                                  
 17485                                  win386call:
 17486 000016A7 1E                      		push	ds
 17487 000016A8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17488                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17489                                  					; at 2C7h:30h =	70h:25A0h
 17490 000016AD 3C05                    		cmp	al, 5		; Win386_Init
 17491                                  					; is it	win386 initializing?
 17492 000016AF 7410                    		jz	short Win386Init
 17493 000016B1 3C06                    		cmp	al, 6		; Win386_Exit
 17494                                  					; is it	win386 exiting?
 17495 000016B3 7523                    		jnz	short win_iret	; if not, continue int2f chain
 17496                                  		; 12/12/2022
 17497 000016B5 F6C201                  		test	dl, 1
 17498                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 17499 000016B8 751E                    		jnz	short win_iret	; if not win386, then continue
 17500                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 17501 000016BA 8026[1208]00            		and	byte [IsWin386], 0 
 17502 000016BF EB17                    		jmp	short win_iret
 17503                                  ; ---------------------------------------------------------------------------
 17504                                  
 17505                                  Win386Init:
 17506                                  		; 12/12/2022
 17507 000016C1 F6C201                  		test	dl, 1
 17508                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 17509 000016C4 7512                    		jnz	short win_iret	; if not win386, then continue
 17510                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 17511 000016C6 800E[1208]01            		or	byte [IsWin386], 1
 17512                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 17513                                  		;mov	word ptr ds:SI_Next+2, es
 17514 000016CB 891E[E007]              		mov	[SI_Next], bx
 17515 000016CF 8C06[E207]              		mov	[SI_Next+2], es
 17516                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 17517 000016D3 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 17518 000016D6 1E                      		push	ds
 17519 000016D7 07                      		pop	es
 17520                                  win_iret:
 17521 000016D8 1F                      		pop	ds
 17522                                  ii2f_iret:	; 10/12/2022
 17523                                  		;jmp	short i2f_iret	; return back up the chain
 17524                                  		; 02/09/2023
 17525 000016D9 CF                      		iret
 17526                                  ; ---------------------------------------------------------------------------
 17527                                  
 17528                                  handle_multmult:
 17529 000016DA 3C01                    		cmp	al, 1
 17530 000016DC 7514                    		jnz	short try_2
 17531 000016DE 1E                      		push	ds
 17532 000016DF E84500                  		call	HMAPtr		; get offset of free HMA
 17533                                  		; 10/12/2022
 17534                                  		;xor	bx, bx
 17535                                  		;dec	bx
 17536 000016E2 BBFFFF                  		mov	bx, 0FFFFh
 17537 000016E5 8EC3                    		mov	es, bx		; seg of HMA
 17538 000016E7 89FB                    		mov	bx, di
 17539 000016E9 F7D3                    		not	bx
 17540 000016EB 09DB                    		or	bx, bx
 17541 000016ED 7401                    		jz	short try_1
 17542 000016EF 43                      		inc	bx
 17543                                  try_1:
 17544 000016F0 1F                      		pop	ds
 17545                                  		;jmp	short ii2f_iret
 17546                                  		; 02/09/2023
 17547 000016F1 CF                      		iret
 17548                                  ; ---------------------------------------------------------------------------
 17549                                  
 17550                                  try_2:
 17551 000016F2 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 17552 000016F4 7530                    		jnz	short try_3
 17553 000016F6 1E                      		push	ds
 17554                                  		; 10/12/2022
 17555                                  		;xor	di, di
 17556                                  		;dec	di
 17557 000016F7 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 17558 000016FA 8EC7                    		mov	es, di
 17559 000016FC E82800                  		call	HMAPtr		; get offset of free HMA
 17560 000016FF 83FFFF                  		cmp	di, 0FFFFh
 17561 00001702 7421                    		jz	short InsuffHMA
 17562 00001704 F7DF                    		neg	di		; free space in HMA
 17563 00001706 39FB                    		cmp	bx, di
 17564 00001708 7605                    		jbe	short try_4
 17565                                  		; 10/12/2022
 17566                                  		;sub	di, di
 17567                                  		;dec	di
 17568 0000170A BFFFFF                  		mov	di, 0FFFFh
 17569                                  		;jmp	short InsuffHMA
 17570                                  		; 02/09/2023
 17571 0000170D 1F                      		pop	ds
 17572 0000170E CF                      		iret
 17573                                  ; ---------------------------------------------------------------------------
 17574                                  
 17575                                  try_4:
 17576                                  		;mov	di, ds:FreeHMAPtr
 17577 0000170F 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17578 00001713 83C30F                  		add	bx, 15
 17579                                  		;and	bx, 0FFF0h
 17580                                  		; 10/12/2022
 17581 00001716 80E3F0                  		and	bl, 0F0h
 17582                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 17583 00001719 011E[D707]              		add	[FreeHMAPtr], bx
 17584 0000171D 7506                    		jnz	short InsuffHMA
 17585 0000171F C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 17586                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 17587                                  					; no more HMA if we have wrapped
 17588                                  InsuffHMA:
 17589 00001725 1F                      		pop	ds
 17590                                  		; 10/12/2022
 17591                                  try_3:
 17592                                  		;jmp	short ii2f_iret
 17593                                  		; 02/09/2023
 17594 00001726 CF                      		iret
 17595                                  ; ---------------------------------------------------------------------------
 17596                                  
 17597                                  		; 10/12/2022
 17598                                  ;try_3:
 17599                                  		;jmp	ii2f_iret
 17600                                  
 17601                                  ; =============== S U B	R O U T	I N E =======================================
 17602                                  
 17603                                  ; 16/10/2022
 17604                                  
 17605                                  ;--------------------------------------------------------------------------
 17606                                  ;
 17607                                  ; procedure : HMAPtr
 17608                                  ;
 17609                                  ;		Gets the offset of the free HMA area ( with respect to
 17610                                  ;							seg ffff )
 17611                                  ;		If DOS has not moved high, tries to move DOS high.
 17612                                  ;		In the course of doing this, it will allocate all the HMA
 17613                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 17614                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 17615                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 17616                                  ;
 17617                                  ;	RETURNS : offset of free HMA in DI
 17618                                  ;		  BIOS_DATA, seg in DS
 17619                                  ;
 17620                                  ;--------------------------------------------------------------------------
 17621                                  
 17622                                  		; 17/10/2022
 17623                                  HMAPtr:
 17624 00001727 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17625                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17626 0000172C 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17627                                  		;mov	di, ds:FreeHMAPtr
 17628 00001730 83FFFF                  		cmp	di, 0FFFFh
 17629 00001733 750F                    		jnz	short HMAPtr_retn
 17630 00001735 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 17631                                  		;cmp	ds:SysinitPresent, 0
 17632 0000173A 7408                    		jz	short HMAPtr_retn
 17633 0000173C FF1E[D907]              		call	far [MoveDOSIntoHMA]
 17634                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 17635 00001740 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17636                                  		;mov	di, ds:FreeHMAPtr
 17637                                  HMAPtr_retn:
 17638 00001744 C3                      		retn
 17639                                  
 17640                                  ; =============== S U B	R O U T	I N E =======================================
 17641                                  
 17642                                  ; 16/10/2022
 17643                                  
 17644                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 17645                                  ; but go ahead and update direction flag, si, & di
 17646                                  
 17647                                  move_sector:
 17648                                  
 17649                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 17650                                  ; any segment to be a fault. Theoretically, this could be handled
 17651                                  ; by the fault handler and the behavior of an 8086 could be emulated
 17652                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 17653                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 17654                                  ; also handles the fault incorrectly in their ROM BIOS for real
 17655                                  ; mode. Their fault handler was only designed to deal with one
 17656                                  ; special case which occurred in a magazine benchmark, but didn't
 17657                                  ; handle the general case worth beans.
 17658                                  ;
 17659                                  ; Simply changing this code to do a byte loop would work okay but
 17660                                  ; would involve a general case performance hit. Therefore, we'll
 17661                                  ; check for either source or destination offsets being within one
 17662                                  ; sector of the end of their segments and only in that case fall
 17663                                  ; back to a byte move.
 17664                                  
 17665 00001745 FC                      		cld
 17666 00001746 51                      		push	cx
 17667 00001747 B90001                  		mov	cx, 256
 17668 0000174A 81FE00FE                		cmp	si, 0FE00h
 17669 0000174E 770A                    		ja	short movsec_bytes
 17670 00001750 81FF00FE                		cmp	di, 0FE00h
 17671 00001754 7704                    		ja	short movsec_bytes
 17672 00001756 F3A5                    		rep movsw
 17673 00001758 59                      		pop	cx
 17674 00001759 C3                      		retn
 17675                                  ; ---------------------------------------------------------------------------
 17676                                  
 17677                                  movsec_bytes:
 17678 0000175A D1E1                    		shl	cx, 1
 17679 0000175C F3A4                    		rep movsb
 17680 0000175E 59                      		pop	cx
 17681 0000175F C3                      		retn
 17682                                  
 17683                                  ; =============== S U B	R O U T	I N E =======================================
 17684                                  
 17685                                  ; 16/10/2022
 17686                                  
 17687                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 17688                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 17689                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 17690                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 17691                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 17692                                  ; but we break down a request when we get an ecc or dma error into several
 17693                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 17694                                  ; number of sectors on a track on the medium, and the request would fail.
 17695                                  ;
 17696                                  ; input conditions:
 17697                                  ;	all registers set up for an int 13 request.
 17698                                  ;
 17699                                  ; output:
 17700                                  ;	dh - contains starting head number for request
 17701                                  ;	cx - contains starting sector and cylinder numbers
 17702                                  ;	(the above may or may not have been changed, and are 0-based)
 17703                                  ;	all other registers preserved.
 17704                                  
 17705                                  		; 26/12/2023 - Retro DOS 5.0
 17706                                  check_wrap:	
 17707 00001760 50                      		push	ax
 17708 00001761 53                      		push	bx
 17709 00001762 06                      		push	es
 17710 00001763 57                      		push	di
 17711 00001764 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 17712 00001767 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 17713                                  		; 26/12/2023
 17714 00001769 26F6453F01              		test	byte [es:di+3Fh], 1
 17715                                  		; 12/12/2022
 17716                                  		;test	byte [es:di+23h], 1
 17717                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 17718 0000176E 7457                    		jz	short no_wrap	; no wrapping for removable media
 17719 00001770 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 17720 00001774 89C8                    		mov	ax, cx
 17721 00001776 83E03F                  		and	ax, 3Fh		; extract sector number
 17722 00001779 39D8                    		cmp	ax, bx		; are we going to wrap?
 17723 0000177B 764A                    		jbe	short no_wrap
 17724 0000177D F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 17725                                  
 17726                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 17727                                  ; last sector on that track.
 17728                                  
 17729 0000177F 08E4                    		or	ah, ah
 17730 00001781 7503                    		jnz	short not_on_bound
 17731                                  		; 18/12/2022
 17732 00001783 48                      		dec	ax ; *
 17733 00001784 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 17734                                  					; if on	boundary
 17735                                  		;dec	al ; *		; also decrement # of head wraps
 17736                                  not_on_bound:
 17737 00001786 80E1C0                  		and	cl, 0C0h	; zero out sector #
 17738 00001789 08E1                    		or	cl, ah		; or in	new sector #
 17739 0000178B 30E4                    		xor	ah, ah		; ax = # of head wraps
 17740 0000178D 40                      		inc	ax
 17741 0000178E 00F0                    		add	al, dh		; add in starting head #
 17742 00001790 80D400                  		adc	ah, 0		; catch	any carry
 17743                                  		; 02/09/2023
 17744 00001793 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17745 00001797 39D8                    		cmp	ax, bx
 17746                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 17747                                  					; are we going to wrap around a	head?
 17748 00001799 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 17749 0000179B 52                      		push	dx		; preserve drive number and head number
 17750 0000179C 31D2                    		xor	dx, dx
 17751                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17752 0000179E F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 17753                                  
 17754                                  ; careful here! if new head # is 0, then we are on the last head.
 17755                                  
 17756 000017A0 09D2                    		or	dx, dx
 17757 000017A2 7507                    		jnz	short no_head_bound
 17758 000017A4 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 17759                                  
 17760                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 17761                                  
 17762 000017A6 09C0                    		or	ax, ax
 17763 000017A8 7401                    		jz	short no_head_bound
 17764 000017AA 48                      		dec	ax		; reduce number	of cylinder wraps
 17765                                  no_head_bound:				
 17766 000017AB 88D7                    		mov	bh, dl		; bh has new head number
 17767 000017AD 5A                      		pop	dx		; restore drive number and head number
 17768 000017AE FECF                    		dec	bh		; get it 0-based
 17769 000017B0 88FE                    		mov	dh, bh		; set up new head number in dh
 17770 000017B2 88CF                    		mov	bh, cl
 17771 000017B4 80E73F                  		and	bh, 3Fh		; preserve sector number
 17772 000017B7 B306                    		mov	bl, 6
 17773 000017B9 86D9                    		xchg	cl, bl
 17774 000017BB D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 17775 000017BD 00C5                    		add	ch, al		; add in cylinder wrap
 17776 000017BF 10E3                    		adc	bl, ah		; add in high byte
 17777 000017C1 D2E3                    		shl	bl, cl		; move up to ms	end
 17778 000017C3 86CB                    		xchg	bl, cl		; restore cylinder bits	into cl
 17779 000017C5 08F9                    		or	cl, bh		; or in	sector number
 17780                                  no_wrap:				
 17781 000017C7 F8                      		clc
 17782 000017C8 5F                      		pop	di
 17783 000017C9 07                      		pop	es
 17784 000017CA 5B                      		pop	bx
 17785 000017CB 58                      		pop	ax
 17786 000017CC C3                      		retn
 17787                                  ; ---------------------------------------------------------------------------
 17788                                  
 17789                                  no_wrap_head:				
 17790 000017CD 88C6                    		mov	dh, al		; do not lose new head number
 17791 000017CF FECE                    		dec	dh		; get it 0-based
 17792 000017D1 EBF4                    		jmp	short no_wrap
 17793                                  
 17794                                  ; =============== S U B	R O U T	I N E =======================================
 17795                                  
 17796                                  ; 16/10/2022
 17797                                  
 17798                                  ; this is a special version of the bds lookup code which is
 17799                                  ; based on physical drives rather than the usual logical drives
 17800                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 17801                                  ; otherwise carry is clear
 17802                                  ;
 17803                                  ; guaranteed to trash no registers except es:di
 17804                                  
 17805                                  		; 19/10/2022
 17806                                  find_bds:	
 17807 000017D3 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 17808                                  fbds_1:					
 17809 000017D7 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 17810 000017DB 7409                    		jz	short fdbs_2
 17811 000017DD 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17812                                  					; go to next bds
 17813 000017E0 83FFFF                  		cmp	di, 0FFFFh
 17814 000017E3 75F2                    		jnz	short fbds_1
 17815 000017E5 F9                      		stc
 17816                                  fdbs_2:					
 17817 000017E6 C3                      		retn
 17818                                  
 17819                                  ; =============== S U B	R O U T	I N E =======================================
 17820                                  
 17821                                  ; 16/10/2022
 17822                                  		; 17/10/2022
 17823                                  doint:
 17824                                  		; 10/12/2022
 17825 000017E7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 17826                                  					; get physical drive number
 17827                                  		; 19/10/2022 - Temporary !
 17828                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 17829                                  		
 17830 000017EA 30E4                    		xor	ah, ah
 17831 000017EC 08C0                    		or	al, al
 17832 000017EE 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 17833                                  		; 10/12/2022
 17834 000017F0 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 17835                                  					; get request code
 17836                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 17837 000017F3 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17838                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 17839 000017F6 9D                      		popf
 17840                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 17841                                  		; 17/10/2022
 17842 000017F7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17843                                  		;;call	call_orig13	; call far 70h:797h
 17844                                  					; call far KERNEL_SEGMENT:call_orig13
 17845 000017FC 9C                      		pushf
 17846                                  		; 10/12/2022
 17847 000017FD 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17848                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 17849                                  dointdone:				
 17850 00001800 C3                      		retn
 17851                                  
 17852                                  ;----------------------------------------------------------------------------
 17853                                  
 17854                                  ; 16/10/2022
 17855                                  
 17856                                  ; this is the true int 13 handler. we parse the request to see if there is
 17857                                  ; a dma violation. if so, depending on the function, we:
 17858                                  ;   read/write break the request into three pieces and move the middle one
 17859                                  ;	       into our internal buffer.
 17860                                  ;
 17861                                  ;   format     copy the format table into the buffer
 17862                                  ;   verify     point the transfer address into the buffer
 17863                                  ;
 17864                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 17865                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 17866                                  ; the offending sector into the buffer below and do the i/o from there.
 17867                                  
 17868                                  ;struc INT13FRAME
 17869                                  ;.oldbp: resw
 17870                                  ;.oldax: resw 
 17871                                  ;.oldbx: resw
 17872                                  ;.oldcx: resw
 17873                                  ;.olddx: resw
 17874                                  ;.oldds: resw	; now we save caller's ds, too
 17875                                  ;.olddd: resd
 17876                                  ;.oldf:	resw
 17877                                  ;end struc
 17878                                  
 17879                                  ;----------------------------------------------------------------------------
 17880                                  
 17881                                  ;   entry conditions:
 17882                                  ;	ah = function
 17883                                  ;	al = number of sectors
 17884                                  ;	es:bx = dma address
 17885                                  ;	cx = packed track and sector
 17886                                  ;	dx = head and drive
 17887                                  ;   output conditions:
 17888                                  ;	no dma violation.
 17889                                  
 17890                                  ;	use extreme caution when working with this code. In general,
 17891                                  ;	  all registers are hot at all times.
 17892                                  ;
 17893                                  ;	question:  does this code handle cases where dma errors
 17894                                  ;	  occur during ecc retries, and where ecc errors occur during
 17895                                  ;	  dma breakdowns???? Hmmmmm.
 17896                                  
 17897                                  ;----------------------------------------------------------------------------
 17898                                  
 17899                                  ; ---------------------------------------------------------------------------
 17900                                  
 17901                                  		; 26/12/2023 - Retro DOS v5.0
 17902                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 17903                                  dtype_array:
 17904 00001801 90004000                		dd 400090h		; 40h:90h is drive type array addr
 17905                                  
 17906                                  ; 17/10/2022
 17907                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 17908                                  ; 09/12/2022
 17909                                  DTYPEARRAY equ dtype_array
 17910                                  
 17911                                  ; ---------------------------------------------------------------------------
 17912                                  
 17913                                  ; stick some special stuff out of mainline
 17914                                  
 17915                                  ; we know we're doing a format command. if we have changeline
 17916                                  ; support, then flag some special changed stuff and set changed
 17917                                  ; by format bit for all logical drives using this physical drive
 17918                                  
 17919                                  format_special_stuff:
 17920 00001805 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 17921 0000180A 7459                    		jz	short format_special_stuff_done ; brif not
 17922 0000180C 53                      		push	bx
 17923 0000180D BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 17924 00001810 E85104                  		call	set_changed_dl	; indicate that media changed by format
 17925 00001813 5B                      		pop	bx
 17926 00001814 EB4F                    		jmp	short format_special_stuff_done
 17927                                  ; ---------------------------------------------------------------------------
 17928                                  
 17929                                  ; 16/10/2022
 17930                                  
 17931                                  ; we know we've got ec35's on the system. Now see if we're doing
 17932                                  ; a floppy. If so, create a mask and see if this particular
 17933                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 17934                                  
 17935                                  		; 19/10/2022
 17936                                  ec35_special_stuff:
 17937 00001816 84D2                    		test	dl, dl		; floppy or hard disk?
 17938 00001818 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 17939 0000181A 50                      		push	ax		; see if this PARTICULAR drive is ec35
 17940 0000181B 51                      		push	cx
 17941 0000181C 88D1                    		mov	cl, dl		; turn drive number into bit map
 17942 0000181E B001                    		mov	al, 1		; assume drive 0
 17943 00001820 D2E0                    		shl	al, cl		; shift	over correct number of times
 17944 00001822 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 17945 00001826 59                      		pop	cx
 17946 00001827 58                      		pop	ax
 17947 00001828 7442                    		jz	short ec35_special_stuff_done
 17948                                  					; done if this floppy is not an	ec35
 17949 0000182A 53                      		push	bx		; free up a far	pointer	(es:bx)
 17950 0000182B 06                      		push	es
 17951                                  		; 17/10/2022
 17952 0000182C 2EC41E[0118]            		les	bx, [cs:DTYPEARRAY]
 17953                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 17954                                  					; 0070h:3A65h =	2C7h:14F5h
 17955 00001831 00D3                    		add	bl, dl
 17956 00001833 80D700                  		adc	bh, 0		; find entry for this drive
 17957 00001836 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 17958                                  					; (360k	disk in	360k drive,
 17959                                  					; no double-stepping, 250 kbs transfer rate)
 17960 0000183A 07                      		pop	es
 17961 0000183B 5B                      		pop	bx
 17962 0000183C EB2E                    		jmp	short ec35_special_stuff_done
 17963                                  ; ---------------------------------------------------------------------------
 17964                                  
 17965                                  ; 16/10/2022
 17966                                  
 17967                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 17968                                  ; this function does not reset the common buses after the execution.
 17969                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 17970                                  ; will issue ah=1 (read status) call to reset the buses.
 17971                                  
 17972                                  ps2_special_stuff:
 17973 0000183E 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 17974                                  					; read driver parm ?
 17975 00001843 7407                    		jz	short ps2_30_problem
 17976 00001845 803E[1E00]15            		cmp	byte [prevoper], 15h
 17977                                  					; apparently function 15h fails, too
 17978 0000184A 752D                    		jnz	short ps2_special_stuff_done
 17979                                  ps2_30_problem:
 17980 0000184C 50                      		push	ax
 17981 0000184D B401                    		mov	ah, 1
 17982                                  		; 26/12/2023
 17983                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 17984                                  		;		 ; call BIOSDATA:call_orig13	
 17985                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 17986                                  		; 17/10/2022
 17987 0000184F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17988                                  		;call	call_orig13	; call far 70:797h
 17989                                  					; call far KERNEL_SEGMENT:call_orig13
 17990 00001854 58                      		pop	ax
 17991 00001855 EB22                    		jmp	short ps2_special_stuff_done
 17992                                  ; ---------------------------------------------------------------------------
 17993                                  
 17994                                  ; 17/10/2022
 17995                                  ; 16/10/2022
 17996                                  
 17997                                  ; here is the actual int13 handler
 17998                                  
 17999                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 18000                                  
 18001                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 18002                                  ; vectoring up here from Bios_Data
 18003                                  
 18004                                  		; 19/10/2022
 18005 00001857 1E                      		push	ds		; save caller's ds register first thing
 18006                                  		;;mov	ds, word [cs:0030h]
 18007                                  					; and set up our own ds -> Bios_Data
 18008 00001858 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18009                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18010                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18011                                  
 18012                                  ; let the operation proceed. if there is a dma violation, then we do things
 18013                                  
 18014 0000185D A3[1E00]                		mov	[prevoper], ax	; save request
 18015 00001860 80FC05                  		cmp	ah, 5		; romformat
 18016 00001863 74A0                    		jz	short format_special_stuff
 18017                                  					; go do special stuff for format
 18018                                  format_special_stuff_done:
 18019 00001865 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 18020 0000186A 75AA                    		jnz	short ec35_special_stuff
 18021                                  					; go handle it out of line if so
 18022                                  ec35_special_stuff_done:
 18023                                  		; 26/12/2023
 18024                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 18025                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 18026 0000186C 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18027                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18028                                  		
 18029 00001871 9C                      		pushf			; save result flags
 18030                                  		
 18031 00001872 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 18032                                  					; mdl_ps2_30
 18033 00001877 74C5                    		jz	short ps2_special_stuff
 18034                                  					; exit mainline to address special
 18035                                  ps2_special_stuff_done:			; ps2/30 problem if so
 18036 00001879 9D                      		popf
 18037 0000187A 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 18038                                  ret_from_i13:
 18039 0000187C 1F                      		pop	ds
 18040 0000187D CA0200                  		retf	2		; restore ds &	iret w/flags
 18041                                  ; ---------------------------------------------------------------------------
 18042                                  
 18043                                  ; most of our code exits through here. If carry isn't set, then
 18044                                  ; just do a simple exit. Else doublecheck that we aren't getting
 18045                                  ; a changeline error.
 18046                                  
 18047                                  i13ret_ck_chglinerr:			
 18048 00001880 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 18049                                  i13_ret_error:				
 18050 00001882 80FC06                  		cmp	ah, 6		; did i	see a change event?
 18051 00001885 7513                    		jnz	short int13b	; skip if wrong	error
 18052 00001887 08D2                    		or	dl, dl		; is this for the hard disk?
 18053 00001889 780F                    		js	short int13b	; yes, ignore
 18054 0000188B 803E[7700]00            		cmp	byte [fhave96], 0
 18055 00001890 7408                    		jz	short int13b	; just in case ROM returned this
 18056                                  					; error	even though it told us it
 18057                                  					; never	would
 18058 00001892 53                      		push	bx
 18059 00001893 BB4000                  		mov	bx, 40h		; fchanged
 18060 00001896 E8CB03                  		call	set_changed_dl
 18061 00001899 5B                      		pop	bx
 18062                                  int13b:
 18063 0000189A F9                      		stc			; now return the error
 18064 0000189B EBDF                    		jmp	short ret_from_i13
 18065                                  ; ---------------------------------------------------------------------------
 18066                                  
 18067                                  ; some kind of error occurred. see if it is dma violation
 18068                                  
 18069                                  goterr13:
 18070 0000189D 80FC09                  		cmp	ah, 9		; dma error?
 18071 000018A0 747C                    		jz	short gotdmaerr
 18072                                  goterr13_xxxx:
 18073 000018A2 80FC11                  		cmp	ah, 11h		; ecc error?
 18074 000018A5 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 18075 000018A7 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 18076 000018AC 74D4                    		jz	short i13_ret_error
 18077                                  
 18078 000018AE 803E[1F00]02            		cmp	byte [prevoper+1], 2
 18079                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 18080                                  					; (2 = romread)
 18081                                  					; ECC correction only applies to reads
 18082 000018B3 75CD                    		jnz	short i13_ret_error
 18083                                  
 18084 000018B5 30E4                    		xor	ah, ah
 18085                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 18086                                  		; 17/10/2022
 18087 000018B7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18088                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18089                                  					; call far 70:797h
 18090 000018BC A1[1E00]                		mov	ax, [prevoper]
 18091 000018BF 30E4                    		xor	ah, ah		; return code =	no error
 18092 000018C1 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 18093 000018C3 74B7                    		jz	short ret_from_i13 ; return with carry clear
 18094 000018C5 53                      		push	bx
 18095 000018C6 51                      		push	cx
 18096 000018C7 52                      		push	dx
 18097 000018C8 A2[2000]                		mov	[number_of_sec], al
 18098                                  loop_ecc:
 18099 000018CB B80102                  		mov	ax, 201h	; read one sector
 18100                                  
 18101                                  ; we do reads one sector at a time. this ensures that we will eventually
 18102                                  ; finish the request since ecc errors on one sector do read in that sector.
 18103                                  ;
 18104                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 18105                                  ; that attempt to read more sectors than are available on a particular
 18106                                  ; track.
 18107                                  ;
 18108                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 18109                                  ; this request.
 18110                                  ;
 18111                                  ; at this point, all registers are set up for the call to orig13, except
 18112                                  ; that there may be a starting sector number that is bigger than the number
 18113                                  ; of sectors on a track.
 18114                                  ;
 18115 000018CE E88FFE                  		call	check_wrap	; get correct parameters for int 13
 18116                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 18117                                  		; 17/10/2022
 18118 000018D1 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18119                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18120 000018D6 730C                    		jnb	short ok11_op
 18121 000018D8 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 18122 000018DB 741B                    		jz	short handle_dma_during_ecc
 18123 000018DD 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 18124 000018E0 7510                    		jnz	short ok11_exit_err
 18125                                  		; 10/12/2022
 18126                                  		; xor ax ax -> ah = 0
 18127                                  		;mov	ah, 0		; ecc error. reset the system again.
 18128 000018E2 31C0                    		xor	ax, ax		; clear	the error code so that if this
 18129                                  					; was the last sector, no error	code
 18130                                  					; will be returned for the corrected
 18131                                  					; read.	(clear carry too.)
 18132                                  ok11_op:
 18133 000018E4 FE0E[2000]              		dec	byte [number_of_sec]
 18134 000018E8 7409                    		jz	short ok11_exit	; all done?
 18135 000018EA FEC1                    		inc	cl		; advance sector number
 18136                                  					; add 200h to address
 18137 000018EC FEC7                    		inc	bh
 18138 000018EE FEC7                    		inc	bh
 18139 000018F0 EBD9                    		jmp	short loop_ecc
 18140                                  ; ---------------------------------------------------------------------------
 18141                                  
 18142                                  ; locate error returns centrally
 18143                                  
 18144                                  ok11_exit_err:
 18145 000018F2 F9                      		stc			; set carry bit again.
 18146                                  ok11_exit:
 18147 000018F3 5A                      		pop	dx
 18148 000018F4 59                      		pop	cx
 18149 000018F5 5B                      		pop	bx
 18150 000018F6 EB88                    		jmp	short i13ret_ck_chglinerr
 18151                                  ; ---------------------------------------------------------------------------
 18152                                  
 18153                                  ; do the single sector read again, this time into our temporary
 18154                                  ; buffer, which is guaranteed not to have a DMA error, then
 18155                                  ; move the data to its proper location and proceed
 18156                                  
 18157                                  handle_dma_during_ecc:
 18158 000018F8 06                      		push	es
 18159 000018F9 53                      		push	bx
 18160 000018FA BB[5201]                		mov	bx, disksector
 18161 000018FD 1E                      		push	ds
 18162 000018FE 07                      		pop	es		; point es:bx to buffer
 18163 000018FF B80102                  		mov	ax, 201h	; read one sector
 18164                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 18165                                  		; 17/10/2022
 18166 00001902 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18167                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18168 00001907 5B                      		pop	bx
 18169 00001908 07                      		pop	es
 18170 00001909 7305                    		jnb	short handle_dma_during_ecc_noerr
 18171 0000190B 80FC11                  		cmp	ah, 11h
 18172 0000190E 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 18173                                  
 18174                                  ; now we're kosher. Copy the data to where it belongs and resume
 18175                                  ; the ECC looping code.
 18176                                  
 18177                                  handle_dma_during_ecc_noerr:
 18178 00001910 56                      		push	si
 18179 00001911 57                      		push	di
 18180 00001912 89DF                    		mov	di, bx
 18181 00001914 BE[5201]                		mov	si, disksector
 18182 00001917 E82BFE                  		call	move_sector
 18183 0000191A 5F                      		pop	di
 18184 0000191B 5E                      		pop	si
 18185 0000191C EBC6                    		jmp	short ok11_op
 18186                                  ; ---------------------------------------------------------------------------
 18187                                  
 18188                                  ; we truly have a dma violation. restore register ax and retry the
 18189                                  ; operation as best we can.
 18190                                  
 18191                                  gotdmaerr:
 18192 0000191E A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 18193 00001921 FB                      		sti
 18194 00001922 80FC02                  		cmp	ah, 2		; romread
 18195 00001925 723B                    		jb	short i13_done_dmaerr
 18196                                  					; just pass dma error thru for
 18197                                  					; functions we don't handle
 18198 00001927 80FC04                  		cmp	ah, 4		; romverify
 18199 0000192A 743C                    		jz	short intverify
 18200 0000192C 80FC05                  		cmp	ah, 5		; romformat
 18201 0000192F 7448                    		jz	short intformat
 18202 00001931 772F                    		ja	short i13_done_dmaerr
 18203                                  
 18204                                  ; we are doing a read/write call. check for dma problems
 18205                                  
 18206                                  ;	******** set up stack frame here!!! ********
 18207                                  
 18208 00001933 52                      		push	dx
 18209 00001934 51                      		push	cx
 18210 00001935 53                      		push	bx
 18211 00001936 50                      		push	ax
 18212 00001937 55                      		push	bp
 18213 00001938 89E5                    		mov	bp, sp
 18214 0000193A 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 18215                                  		; 26/12/2023
 18216                                  		;add	dx, dx
 18217                                  		;add	dx, dx
 18218                                  		;add	dx, dx
 18219                                  		;add	dx, dx		; dx = dx*16
 18220 0000193C D1E2                    		shl	dx, 1
 18221 0000193E D1E2                    		shl	dx, 1
 18222 00001940 D1E2                    		shl	dx, 1
 18223 00001942 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 18224 00001944 01DA                    		add	dx, bx		; combine with offset
 18225 00001946 81C2FF01                		add	dx, 511		; simulate a transfer
 18226                                  
 18227                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 18228                                  ; we skip the first transfer and perform the remaining buffering and transfer
 18229                                  
 18230 0000194A 7303                    		jnb	short no_skip_first
 18231 0000194C E98300                  		jmp	bufferx		; restore dh=head & do buffer
 18232                                  ; ---------------------------------------------------------------------------
 18233                                  
 18234                                  no_skip_first:
 18235 0000194F D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 18236 00001951 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 18237 00001953 28F4                    		sub	ah, dh
 18238                                  
 18239                                  ; ah is now the number of sectors that we can successfully write in this
 18240                                  ; segment. if this number is above or equal to the requested number, then we
 18241                                  ; continue the operation as normal. otherwise, we break it into pieces.
 18242                                  ;
 18243                                  ; wait a sec. this is goofy. the whole reason we got here in the
 18244                                  ; first place is because we got a dma error. so it's impossible
 18245                                  ; for the whole block to fit, unless the dma error was returned
 18246                                  ; in error.
 18247                                  
 18248 00001955 38C4                    		cmp	ah, al		; can we fit it	in?
 18249 00001957 7236                    		jb	short doblock	; no, perform blocking.
 18250                                  
 18251                                  ; yes, the request fits. let it happen.
 18252                                  
 18253 00001959 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18254                                  					; set up head number
 18255 0000195C E888FE                  		call	doint
 18256 0000195F E9D900                  		jmp	bad13		; and return from this place
 18257                                  ; ---------------------------------------------------------------------------
 18258                                  
 18259                                  i13_done_dmaerr:
 18260 00001962 B409                    		mov	ah, 9		; pass dma error thru to caller
 18261 00001964 F9                      		stc
 18262 00001965 E914FF                  		jmp	ret_from_i13	; return with error,
 18263                                  					; we know it's not a changeline error
 18264                                  ; ---------------------------------------------------------------------------
 18265                                  
 18266                                  ; verify the given sectors. place the buffer pointer into our space.
 18267                                  
 18268                                  intverify:
 18269 00001968 06                      		push	es		; save caller's dma address
 18270 00001969 53                      		push	bx
 18271 0000196A 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 18272 0000196B 07                      		pop	es
 18273                                  dosimple:
 18274 0000196C BB[5201]                		mov	bx, disksector
 18275                                  					; do the i/o from Bios_Data:disksector
 18276                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 18277                                  		; 17/10/2022
 18278 0000196F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18279                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18280 00001974 5B                      		pop	bx
 18281 00001975 07                      		pop	es
 18282 00001976 E907FF                  		jmp	i13ret_ck_chglinerr
 18283                                  ; ---------------------------------------------------------------------------
 18284                                  
 18285                                  ; format operation. copy the parameter table into Bios_Data:disksector
 18286                                  
 18287                                  intformat:
 18288 00001979 06                      		push	es
 18289 0000197A 53                      		push	bx
 18290 0000197B 56                      		push	si
 18291 0000197C 57                      		push	di
 18292 0000197D 1E                      		push	ds
 18293                                  
 18294                                  ; point ds to the caller's dma buffer, es to Bios_Data
 18295                                  ; in other words, swap (ds, es)
 18296                                  
 18297 0000197E 06                      		push	es
 18298 0000197F 1E                      		push	ds
 18299 00001980 07                      		pop	es
 18300 00001981 1F                      		pop	ds
 18301 00001982 89DE                    		mov	si, bx
 18302 00001984 BF[5201]                		mov	di, disksector
 18303 00001987 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 18304 0000198A 1F                      		pop	ds
 18305 0000198B 5F                      		pop	di
 18306 0000198C 5E                      		pop	si		; do the i/o from
 18307 0000198D EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 18308                                  ; ---------------------------------------------------------------------------
 18309                                  
 18310                                  ; we can't fit the request into the entire block. perform the operation on
 18311                                  ; the first block.
 18312                                  ;
 18313                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 18314                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 18315                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 18316                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 18317                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 18318                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 18319                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 18320                                  ; doblock will handle the first block of requested sectors within the
 18321                                  ; boundary of this safe value.
 18322                                  
 18323                                  		; 26/12/2023 - Retro DOS v5.0
 18324                                  doblock:
 18325                                  
 18326                                  ; try to get the # of sectors/track from bds via rom drive number.
 18327                                  ; for any mini disks installed, here we have to pray that they have the
 18328                                  ; same # of sector/track as the main dos partition disk drive.
 18329                                  				
 18330 0000198F 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 18331                                  					; get head #, drive #
 18332 00001992 51                      		push	cx
 18333 00001993 06                      		push	es
 18334 00001994 57                      		push	di		; ah - # of sectors before dma boundary
 18335                                  					; al - requested # of sectors for i/o.
 18336 00001995 E83BFE                  		call	find_bds
 18337 00001998 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18338                                  		; 26/12/2023
 18339 0000199C 26F6453F01              		test	byte [es:di+3Fh], 1
 18340                                  		; 12/12/2022
 18341                                  		;test	byte [es:di+23h], 1
 18342                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18343 000019A1 5F                      		pop	di
 18344 000019A2 07                      		pop	es
 18345 000019A3 88E0                    		mov	al, ah		; set al=ah for	floppies
 18346 000019A5 7404                    		jz	short doblockflop ; they are track by track operation
 18347 000019A7 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 18348 000019A9 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 18349                                  doblockflop:
 18350 000019AB 59                      		pop	cx
 18351                                  doblockcontinue:
 18352 000019AC 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 18353 000019AE 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 18354 000019B0 50                      		push	ax
 18355 000019B1 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 18356 000019B3 EB03                    		jmp	short doblockdoint
 18357                                  ; ---------------------------------------------------------------------------
 18358                                  
 18359                                  doblocklast:
 18360 000019B5 88C4                    		mov	ah, al
 18361 000019B7 50                      		push	ax
 18362                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 18363 000019B8 E82CFE                  		call	doint
 18364 000019BB 727E                    		jb	short bad13	; something happened, bye!
 18365 000019BD 58                      		pop	ax
 18366 000019BE 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 18367                                  					; decrement by the successful operation
 18368 000019C1 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 18369 000019C3 00E7                    		add	bh, ah		; advance dma addres
 18370 000019C5 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 18371 000019C7 38C4                    		cmp	ah, al		; check	the previous value
 18372 000019C9 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 18373                                  					; then we are done already.
 18374 000019CB 28E0                    		sub	al, ah		; otherwise,
 18375                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 18376 000019CD E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 18377 000019D0 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 18378                                  ; ---------------------------------------------------------------------------
 18379                                  
 18380                                  bufferx:
 18381 000019D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18382                                  					; set up head number
 18383                                  buffer:
 18384 000019D5 53                      		push	bx
 18385 000019D6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 18386 000019D9 80FC03                  		cmp	ah, 3		; romwrite
 18387 000019DC 7525                    		jnz	short doread	;
 18388                                  					
 18389                                  ; copy the offending sector into local buffer
 18390                                  
 18391 000019DE 06                      		push	es
 18392 000019DF 1E                      		push	ds
 18393 000019E0 56                      		push	si
 18394 000019E1 57                      		push	di
 18395 000019E2 1E                      		push	ds		; exchange segment registers
 18396 000019E3 06                      		push	es
 18397 000019E4 1F                      		pop	ds
 18398 000019E5 07                      		pop	es
 18399 000019E6 BF[5201]                		mov	di, disksector	; where to move
 18400 000019E9 57                      		push	di		; save it
 18401 000019EA 89DE                    		mov	si, bx		; source
 18402 000019EC E856FD                  		call	move_sector	; move sector into local buffer
 18403 000019EF 5B                      		pop	bx		; new transfer address
 18404                                  					; (es:bx = Bios_Data:diskbuffer)
 18405 000019F0 5F                      		pop	di		; restore caller's di & si
 18406 000019F1 5E                      		pop	si
 18407 000019F2 1F                      		pop	ds		; restore Bios_Data
 18408                                  
 18409                                  ; see if we are wrapping around a track or head
 18410                                  
 18411 000019F3 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 18412                                  					; get drive number
 18413 000019F5 8A5608                  		mov	dl, [bp+8]
 18414 000019F8 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 18415                                  					;
 18416                                  					; ah is	function
 18417                                  					; al is	1 for single sector transfer
 18418                                  					; es:bx	is local transfer addres
 18419                                  					; cx is	track/sector number
 18420                                  					; dx is	head/drive number
 18421                                  					; si,di	unchanged
 18422 000019FB E8E9FD                  		call	doint
 18423 000019FE 07                      		pop	es		; restore caller's dma segment
 18424 000019FF 723A                    		jb	short bad13	; go clean up
 18425 00001A01 EB22                    		jmp	short dotail
 18426                                  ; ---------------------------------------------------------------------------
 18427                                  
 18428                                  ; reading a sector. do int first, then move things around
 18429                                  
 18430                                  doread:
 18431 00001A03 06                      		push	es
 18432 00001A04 53                      		push	bx
 18433 00001A05 1E                      		push	ds		; es = Bios_Code
 18434 00001A06 07                      		pop	es
 18435 00001A07 BB[5201]                		mov	bx, disksector
 18436 00001A0A B001                    		mov	al, 1
 18437 00001A0C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18438                                  					; get drive number
 18439 00001A0F E84EFD                  		call	check_wrap	;
 18440                                  					; ah = function
 18441                                  					; al = 1 for single sector
 18442                                  					; es:bx	points to local	buffer
 18443                                  					; cx, dx are track/sector, head/drive
 18444 00001A12 E8D2FD                  		call	doint
 18445 00001A15 5B                      		pop	bx
 18446 00001A16 07                      		pop	es
 18447 00001A17 7222                    		jb	short bad13
 18448 00001A19 56                      		push	si
 18449 00001A1A 57                      		push	di
 18450 00001A1B 89DF                    		mov	di, bx
 18451 00001A1D BE[5201]                		mov	si, disksector
 18452 00001A20 E822FD                  		call	move_sector
 18453 00001A23 5F                      		pop	di
 18454 00001A24 5E                      		pop	si
 18455                                  
 18456                                  ; note the fact that we've done 1 more sector
 18457                                  
 18458                                  dotail:
 18459 00001A25 5B                      		pop	bx		; retrieve new dma area
 18460 00001A26 80C702                  		add	bh, 2		; advance over sector
 18461 00001A29 41                      		inc	cx
 18462 00001A2A 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 18463 00001A2D F8                      		clc
 18464 00001A2E FEC8                    		dec	al
 18465 00001A30 7409                    		jz	short bad13	; no more i/o
 18466                                  
 18467                                  ; see if we wrap around a track or head boundary with starting sector
 18468                                  ; we already have the correct head number to pass to check_wrap
 18469                                  
 18470 00001A32 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18471 00001A35 E828FD                  		call	check_wrap
 18472 00001A38 E8ACFD                  		call	doint
 18473                                  
 18474                                  ; we are done. ax has the final code; we throw away what we got before
 18475                                  
 18476                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 18477                                  ;	   or we've finished. If carry is set now, our only
 18478                                  ;	   hope for salvation is that it was a read operation
 18479                                  ;	   and the error code is ECC error. In that case, we'll
 18480                                  ;	   just pop the registers and go do the old ECC thing.
 18481                                  ;	   When the DMA error that got us here in the first
 18482                                  ;	   place occurs, it'll handle it.
 18483                                  
 18484                                  bad13:
 18485 00001A3B 89EC                    		mov	sp, bp
 18486 00001A3D 5D                      		pop	bp
 18487 00001A3E 5B                      		pop	bx
 18488 00001A3F 5B                      		pop	bx
 18489 00001A40 59                      		pop	cx
 18490 00001A41 5A                      		pop	dx
 18491 00001A42 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 18492 00001A44 E935FE                  		jmp	ret_from_i13	; non-error exit
 18493                                  ; ---------------------------------------------------------------------------
 18494                                  
 18495                                  xgoterr13_xxxx:	
 18496 00001A47 E958FE                  		jmp	goterr13_xxxx
 18497                                  
 18498                                  ; ---------------------------------------------------------------------------
 18499                                  		; 10/12/2022
 18500                                  		;db 	0
 18501                                  ; ---------------------------------------------------------------------------
 18502                                  
 18503                                  ;Bios_Code ends
 18504                                  
 18505                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18506                                  
 18507                                  ;-----------------------------------------------------------------------------
 18508                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 18509                                  ;-----------------------------------------------------------------------------
 18510                                  ; 17/03/2019 - Retro DOS v4.0
 18511                                  
 18512                                  		; 19/10/2022
 18513                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 18514 00001A4A 8A26[7500]              		mov	ah, [drvmax]
 18515 00001A4E BF[3C05]                		mov	di, dskdrvs
 18516 00001A51 1E                      		push	ds		; pass result in es:di
 18517 00001A52 07                      		pop	es
 18518 00001A53 E934EC                  		jmp	SetPtrSav
 18519                                  
 18520                                  ; =============== S U B	R O U T	I N E =======================================
 18521                                  
 18522                                  ;---------------------------------------------------------------------------
 18523                                  ; install_bds installs a bds at location es:di into the current linked list of
 18524                                  ; bds maintained by this device driver. it places the bds at the end of the
 18525                                  ; list. Trashes (at least) ax, bx, di, si
 18526                                  ;---------------------------------------------------------------------------
 18527                                  
 18528                                  		; 26/12/2023 - Retro DOS v5.0
 18529                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 18530                                  install_bds:
 18531 00001A56 1E                      		push	ds		; save Bios_Data segment
 18532 00001A57 BE[1901]                		mov	si, start_bds	; beginning of chain
 18533                                  
 18534                                  		; ds:si now points to link to first bds
 18535                                  		; assume bds list is non-empty
 18536                                  loop_next_bds:
 18537 00001A5A C534                    		lds	si, [si]	; [si+BDS.link]
 18538                                  					; fetch	next bds
 18539 00001A5C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 18540 00001A60 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 18541                                  					; drive	with new one?
 18542 00001A63 7518                    		jnz	short next_bds
 18543 00001A65 B310                    		mov	bl, 10h		; fi_am_mult
 18544                                  		; 26/12/2023
 18545 00001A67 26085D3F                		or	[es:di+3Fh], bl
 18546                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18547                                  					; set both of them to i_am_mult	if so
 18548 00001A6B 085C3F                  		or	[si+3Fh], bl
 18549                                  		;or	[si+23h], bl	; [si+BDS.flags]
 18550 00001A6E 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 18551                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 18552                                  					; we don't own it
 18553 00001A73 8A5C3F                  		mov	bl, [si+3Fh]
 18554                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 18555                                  					; determine if changeline available
 18556 00001A76 80E302                  		and	bl, 2		; fchangeline
 18557 00001A79 26085D3F                		or	[es:di+3Fh], bl
 18558                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18559                                  next_bds:
 18560                                  		; 02/09/2023 (PCDOS 7.1)
 18561 00001A7D B8FFFF                  		mov	ax, 0FFFFh	; -1
 18562 00001A80 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 18563                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 18564                                  					; are we at end	of list?
 18565 00001A82 75D6                    		jnz	short loop_next_bds
 18566 00001A84 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 18567                                  					; install bds
 18568 00001A87 893C                    		mov	[si], di
 18569 00001A89 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 18570                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 18571                                  					; set next pointer to null
 18572 00001A8C 1F                      		pop	ds
 18573                                  
 18574                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 18575                                  ; 16/10/2022 (MSDOS 6.0 Code)
 18576                                  
 18577                                  ; **** If the new drive has a higher EOT value, we must alter the
 18578                                  ;      'eot' variable appropriately.
 18579                                  
 18580                                  		; 26/12/2023
 18581 00001A8D 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 18582                                  		; 01/06/2019
 18583                                  		;mov	al,[es:di+52]
 18584                                  		; 22/07/2023
 18585                                  		;mov	al,[es:di+BDS.rsecpertrack]
 18586 00001A91 3A06[2C01]              		cmp	al,[eot]
 18587 00001A95 7603                    		jbe	short _eot_ok
 18588 00001A97 A2[2C01]                		mov	[eot],al
 18589                                  _eot_ok:
 18590 00001A9A C3                      		retn
 18591                                  
 18592                                  ; ---------------------------------------------------------------------------
 18593                                  
 18594                                  ; 17/10/2022
 18595                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 18596                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 18597                                  ; 09/12/2022
 18598                                  DRVLET equ drvlet
 18599                                  SNGMSG equ sngmsg
 18600                                  
 18601                                  ; 16/10/2022
 18602                                  
 18603                                  ;---------------------------------------------------------------------------
 18604                                  ;  ask to swap the disk in drive a:
 18605                                  ;	es:di -> bds
 18606                                  ;	ds -> Bios_Data
 18607                                  ;---------------------------------------------------------------------------
 18608                                  
 18609                                  		; 26/12/2023 - Retro DOS v5.0
 18610                                  
 18611                                  		; 19/10/2022
 18612 00001A9B F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 18613                                  		;test	ds:IsWin386, 1	; Is win386 present?
 18614 00001AA0 7405                    		jz	short no_win386	; no, skip SetFocus
 18615                                  		
 18616                                  		; set focus to the correct VM
 18617                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 18618                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 18619                                  		; 17/10/2022
 18620 00001AA2 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 18621                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 18622                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 18623                                  no_win386:
 18624 00001AA7 51                      		push	cx
 18625 00001AA8 52                      		push	dx
 18626 00001AA9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 18627                                  					; get the drive	letter
 18628                                  
 18629                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 18630                                  ;           then existing dsk is drive A & vice versa
 18631                                  
 18632 00001AAD 88D6                    		mov	dh, dl
 18633 00001AAF 80F601                  		xor	dh, 1
 18634 00001AB2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 18635 00001AB4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 18636                                  					; broad	cast code for swap disk
 18637                                  					; Broadcast it
 18638 00001AB7 CD2F                    		int	2Fh
 18639 00001AB9 41                      		inc	cx		; cx == -1 ?
 18640 00001ABA 741E                    		jz	short swpdsk9	; somebody has handled it
 18641                                  
 18642                                  ; using a different drive in a one drive system so request the user change disks
 18643                                  
 18644 00001ABC 80C241                  		add	dl, 'A'
 18645                                  		; 17/10/2022
 18646 00001ABF 2E8816[F91A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 18647                                  		; 16/10/2022
 18648                                  		;;mov	byte [cs:drvlet], dl
 18649                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 18650                                  					; 0070h:3D54h =	2C7h:17E4h
 18651 00001AC4 BE[DD1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 18652                                  		;mov	si, 17C8h	; sngmsg
 18653                                  					; 0070h:3D38h =	2C7h:17C8h
 18654 00001AC7 53                      		push	bx
 18655 00001AC8 2E                      		cs
 18656 00001AC9 AC                      		lodsb			; get the next character of the message
 18657                                  		;lods	byte ptr cs:[si]
 18658                                  wrmsg_loop:
 18659 00001ACA CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 18660                                  					; AL = character to display
 18661 00001ACC 2E                      		cs
 18662 00001ACD AC                      		lodsb
 18663                                  		;lods	byte ptr cs:[si] ; cs lodsb
 18664                                  					; get the next character of the	message
 18665 00001ACE 08C0                    		or	al, al
 18666 00001AD0 75F8                    		jnz	short wrmsg_loop
 18667 00001AD2 E833E7                  		call	con_flush	; flush out keyboard queue
 18668                                  					; call rom-bios
 18669 00001AD5 30E4                    		xor	ah, ah
 18670 00001AD7 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 18671                                  					; Return: AH = scan code, AL = character
 18672 00001AD9 5B                      		pop	bx
 18673                                  swpdsk9:
 18674 00001ADA 5A                      		pop	dx
 18675 00001ADB 59                      		pop	cx
 18676 00001ADC C3                      		retn
 18677                                  
 18678                                  ; ---------------------------------------------------------------------------
 18679                                  
 18680                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18681                                  
 18682                                  ;--------------------------------------------------------
 18683                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 18684                                  ;--------------------------------------------------------
 18685                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 18686                                  ;--------------------------------------------------------
 18687                                  ; 17/03/2019 - Retro DOS v4.0
 18688                                  ; 26/12/2023 - Retro DOS v5.0
 18689                                  
 18690                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 18691                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 18692 00001ADD 0D0A                    sngmsg:		db 0Dh,0Ah
 18693 00001ADF 496E73657274206469-     		db 'Insert diskette for drive '
 18693 00001AE8 736B6574746520666F-
 18693 00001AF1 7220647269766520   
 18694                                  
 18695                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 18696                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 18697 00001AF9 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 18697 00001B02 65737320616E79206B-
 18697 00001B0B 6579207768656E2072-
 18697 00001B14 656164790D0A       
 18698 00001B1A 0A00                    		db 0Ah,0
 18699                                  
 18700                                  ; =============== S U B	R O U T	I N E =======================================
 18701                                  
 18702                                  ;---------------------------------------------------------------------------
 18703                                  ; input : es:di points to current bds for drive.
 18704                                  ; return : zero set if no open files
 18705                                  ;	   zero reset if open files
 18706                                  ;---------------------------------------------------------------------------
 18707                                  
 18708                                  		; 26/12/2023 - Retro DOS v5.0
 18709                                  chkopcnt:	
 18710 00001B1C 26837D3C00              		cmp     word [es:di+3Ch], 0
 18711                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 18712 00001B21 C3                      		retn
 18713                                  
 18714                                  ; =============== S U B	R O U T	I N E =======================================
 18715                                  
 18716                                  ;---------------------------------------------------------------------------
 18717                                  ; at media check time, we need to really get down and check what the change is.
 18718                                  ; this is guaranteed to be expensive.
 18719                                  ;
 18720                                  ;	es:di -> bds, ds -> Bios_Data
 18721                                  ;---------------------------------------------------------------------------
 18722                                  
 18723                                  		; 26/12/2023 - Retro DOS v5.0
 18724                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 18725                                  mediacheck:
 18726 00001B22 E852EE                  		call	checksingle	; make sure correct disk is in place
 18727 00001B25 31F6                    		xor	si, si
 18728 00001B27 E86101                  		call	haschange
 18729 00001B2A 742F                    		jz	short mediaret
 18730                                  		; 26/12/2023
 18731                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 18732 00001B2C E85001                  		call	checkromchange
 18733 00001B2F 752B                    		jnz	short mediadovolid
 18734 00001B31 50                      		push	ax
 18735 00001B32 52                      		push	dx
 18736 00001B33 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18737                                  					; set logical drive number
 18738 00001B37 B416                    		mov	ah, 16h
 18739 00001B39 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18740                                  					; DL = drive to	check
 18741                                  					; Return: AH = disk change status
 18742 00001B3B 5A                      		pop	dx
 18743 00001B3C 58                      		pop	ax
 18744 00001B3D 721D                    		jb	short mediadovolid
 18745 00001B3F BE0100                  		mov	si, 1		; signal no change
 18746                                  
 18747                                  ; there are some drives with changeline that "lose" the changeline indication
 18748                                  ; if a different drive is accessed after the current one. in order to avoid
 18749                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 18750                                  ; is not active and we are accessing a different drive from the last one.
 18751                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 18752                                  ; status.
 18753                                  		; 19/10/2022
 18754 00001B42 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 18755 00001B46 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 18756                                  					; (If the last drive accessed is not current drive
 18757                                  					; media	change status may be incorrect.	So,
 18758                                  					; "I don't now" will be returned even if it is indicated
 18759                                  					; as media is not changed.)
 18760 00001B4A 740F                    		jz	short mediaret	; (same	drive,
 18761                                  					; media	changeline indication is reliable)
 18762                                  
 18763                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 18764                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 18765                                  ; "not changed" here since the 2 second test said no change.)
 18766                                  
 18767 00001B4C 50                      		push	ax
 18768 00001B4D 51                      		push	cx
 18769 00001B4E 52                      		push	dx
 18770 00001B4F E8D8EA                  		call	Check_Time_Of_Access
 18771 00001B52 5A                      		pop	dx
 18772 00001B53 59                      		pop	cx
 18773 00001B54 58                      		pop	ax
 18774 00001B55 09F6                    		or	si, si
 18775 00001B57 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 18776                                  					; (volume id will be checked)
 18777 00001B59 31F6                    		xor	si, si		; return "i don't know"
 18778                                  mediaret:
 18779 00001B5B C3                      		retn
 18780                                  ; ---------------------------------------------------------------------------
 18781                                  
 18782                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 18783                                  ; because this may be different since we only set medbyt when doing a read
 18784                                  ; or write.
 18785                                  
 18786                                  mediadovolid:
 18787 00001B5C E877EB                  		call	GetBp		; build	a new bpb in current bds
 18788 00001B5F 72FA                    		jb	short mediaret
 18789 00001B61 E82D00                  		call	check_vid
 18790 00001B64 73F5                    		jnb	short mediaret
 18791 00001B66 E940F2                  		jmp	maperror	; fix up al for	return to dos
 18792                                  ; ---------------------------------------------------------------------------
 18793                                  
 18794                                  ; simple, quick check of latched change. if no indication, then return
 18795                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 18796                                  ; return and set al = 15 (for invalid media change) which will be returned to
 18797                                  ; dos.
 18798                                  ;
 18799                                  ; for dos 3.3, this will work only for the drive that has changeline.
 18800                                  
 18801                                  ;	call with es:di -> bds, ds -> Bios_Data
 18802                                  ;	***** warning:  this routine will return one level up on the stack
 18803                                  ;			if an error occurs!
 18804                                  
 18805                                  checklatchio:
 18806                                  
 18807                                  ; if returning fake bpb then assume the disk has not changed
 18808                                  
 18809                                  		; 26/12/2023
 18810                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 18811 00001B69 E8B0FF                  		call	chkopcnt
 18812 00001B6C 741B                    		jz	short checkret	; done if zero
 18813                                  
 18814                                  ; check for past rom indications. if no rom change indicated, then return ok.
 18815                                  
 18816                                  		; 26/12/2023
 18817                                  		;test	word [es:di+3Fh], 40h
 18818                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 18819 00001B6E E80E01                  		call	checkromchange
 18820 00001B71 7416                    		jz	short checkret
 18821                                  
 18822                                  ; we now see that a change line has been seen in the past. let's do the
 18823                                  ; expensive verification.
 18824                                  
 18825 00001B73 E860EB                  		call	GetBp		; build	bpb in current bds
 18826 00001B76 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 18827 00001B78 E81600                  		call	check_vid
 18828 00001B7B 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 18829 00001B7D 09F6                    		or	si, si		; is changed for sure?
 18830 00001B7F 7908                    		jns	short checkret
 18831 00001B81 E88F00                  		call	returnvid
 18832                                  checklatchret:
 18833 00001B84 E822F2                  		call	maperror	; fix up al for	return to dos
 18834                                  ret_no_error_map:
 18835 00001B87 F9                      		stc
 18836 00001B88 5E                      		pop	si		; pop off return address
 18837                                  checkret:
 18838 00001B89 C3                      		retn
 18839                                  ; ---------------------------------------------------------------------------
 18840                                  
 18841                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 18842                                  ; only if there was a disk error. return that error code in ax.
 18843                                  ;
 18844                                  ;	called with es:di -> bds, ds -> Bios_Data
 18845                                  
 18846                                  checkfatvid:
 18847 00001B8A E8D101                  		call	fat_check	; check	the fat	and the	vid
 18848 00001B8D 09F6                    		or	si, si
 18849 00001B8F 7835                    		js	short changed_drv
 18850                                  
 18851                                  ; the fat was the same. fall into check_vid and check volume id.
 18852                                  
 18853                                  		; fall into check_vid
 18854                                  
 18855                                  ; =============== S U B	R O U T	I N E =======================================
 18856                                  
 18857                                  ; now with the extended boot record, the logic should be enhanced.
 18858                                  ;
 18859                                  ; if it is the extended boot record, then we check the volume serial
 18860                                  ; number instead of volume id. if it is different, then set si to -1.
 18861                                  ;
 18862                                  ; if it is same, then si= 1 (no change).
 18863                                  ;
 18864                                  ; if it is not the extended boot record, then just follows the old
 18865                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 18866                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 18867                                  ; should have already covered by extended boot structure checking.
 18868                                  ; so, we will return "i don't know" by setting si to 0.
 18869                                  ;
 18870                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 18871                                  ; (this will be gauranteed by a successful getbp call right before this
 18872                                  ; routine.)
 18873                                  ;
 18874                                  ;	called with es:di -> bds, ds -> bds
 18875                                  
 18876                                  		; 26/12/2023 - Retro DOS v5.0
 18877                                  		; 19/10/2022
 18878                                  check_vid:
 18879                                  
 18880                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 18881                                  ; boot signature. if it is set then go to do the extended
 18882                                  ; id check otherwise continue with code below
 18883                                  
 18884                                  		; 26/12/2023
 18885                                  		;;;
 18886 00001B91 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18887 00001B96 7507                    		jnz     short chk_vid_1
 18888 00001B98 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 18889                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 18890 00001B9D EB05                    		jmp     short chk_vid_2
 18891                                  chk_vid_1:
 18892                                  		;;;
 18893 00001B9F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 18894                                  					; [disksector+EXT_BOOT.SIG],
 18895                                  					; EXT_BOOT_SIGNATURE
 18896                                  chk_vid_2:		; 26/12/2023
 18897 00001BA4 7427                    		jz	short do_ext_check_id
 18898 00001BA6 E8E200                  		call	haschange
 18899 00001BA9 74DE                    		jz	short checkret
 18900 00001BAB 31F6                    		xor	si, si
 18901 00001BAD 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 18902                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 18903 00001BB2 7411                    		jz	short checkfatret ; don't read vol id
 18904                                  					; if not fat system
 18905 00001BB4 E8F400                  		call	read_volume_id
 18906 00001BB7 720C                    		jb	short checkfatret
 18907 00001BB9 E89901                  		call	check_volume_id
 18908 00001BBC BEFFFF                  		mov	si, 0FFFFh	; -1
 18909                                  					; definitely changed
 18910 00001BBF 7505                    		jnz	short changed_drv
 18911                                  
 18912 00001BC1 46                      		inc	si		; not changed
 18913                                  vid_no_changed:
 18914 00001BC2 E8C000                  		call	resetchanged
 18915                                  		; 12/12/2022
 18916                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 18917                                  		;clc
 18918                                  checkfatret:
 18919 00001BC5 C3                      		retn
 18920                                  ; ---------------------------------------------------------------------------
 18921                                  
 18922                                  		; 12/12/2022
 18923                                  changed_drv:
 18924 00001BC6 F8                      		clc			; cas -- return	no error
 18925 00001BC7 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 18926                                  					; ensure that we ask rom for media
 18927 00001BCC C3                      		retn			; check	next time round
 18928                                  ; ---------------------------------------------------------------------------
 18929                                  
 18930                                  ; extended id check
 18931                                  
 18932                                  ; 16/10/2022
 18933                                  
 18934                                  ; the code to check extended id is basically a check to see if the
 18935                                  ; volume serial number is still the same. the volume serial number
 18936                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 18937                                  ; ds:di points to the bds of the drive under consideration.
 18938                                  ; the bds has fields containing the high and low words 
 18939                                  ; of the volume serial number of the media in the drive.
 18940                                  ; compare these fields to the fields mentioned above. if these fields
 18941                                  ; do not match the media has changed and so we should jump to the code
 18942                                  ; starting at ext_changed else return "i don't know" status
 18943                                  ; in the register used for the changeline status and continue executing
 18944                                  ; the code given below. for temporary storage use the register which
 18945                                  ; has been saved and restored around this block.
 18946                                  ;
 18947                                  ; bds fields in inc\msbds.inc
 18948                                  
 18949                                  		; 26/12/2023 - Retro DOS v5.0
 18950                                  		; 19/10/2022
 18951                                  do_ext_check_id:
 18952                                  		; 26/12/2023
 18953                                  		;push	ax
 18954                                  		;;mov	ax, word ptr ds:disksector+27h
 18955                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 18956                                  		;mov	ax, [disksector+27h]
 18957                                  ; 26/12/2023
 18958                                  %if 1
 18959                                  		;;;
 18960 00001BCD 57                      		push	di
 18961 00001BCE BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 18962                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 18963 00001BD1 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18964 00001BD6 7403                    		jz	short chk_vid_3
 18965 00001BD8 83EE1C                  		sub	si, 28		; BS_VolID
 18966                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 18967                                  chk_vid_3:
 18968                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 18969 00001BDB 81C78900                		add	di, 137		; BDS.vol_serial
 18970 00001BDF A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 18971                                  			;		= [di+BDS.vol_serial] ?
 18972 00001BE0 7501                    		jnz	short chk_vid_4
 18973 00001BE2 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 18974                                  			;		= [di+BDS.vol_serial+2] ?
 18975                                  chk_vid_4:
 18976 00001BE3 5F                      		pop	di
 18977                                  		;pop	ax
 18978 00001BE4 7504                    		jnz	short ext_changed ; not equal/same
 18979 00001BE6 31F6                    		xor	si, si 		 ; 0 ; don't know
 18980 00001BE8 EBD8                    		jmp	short vid_no_changed ; reset the flag
 18981                                  		;;;
 18982                                  %else
 18983                                  		; 02/09/2023
 18984                                  		xor	si, si ; 0
 18985                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 18986                                  		jnz	short ext_changed
 18987                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 18988                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 18989                                  		jnz	short ext_changed
 18990                                  		;xor	si, si		; 0
 18991                                  					; don't know
 18992                                  		pop	ax
 18993                                  		jmp	short vid_no_changed
 18994                                  					; reset the flag
 18995                                  %endif
 18996                                  
 18997                                  ; ---------------------------------------------------------------------------
 18998                                  
 18999                                  ext_changed:
 19000                                  		; 26/12/2023
 19001                                  		;pop	ax
 19002                                  		; 02/09/2023
 19003                                  		;dec	si ; mov si, 0FFFFh ; -1
 19004 00001BEA BEFFFF                  		mov	si, 0FFFFh	; -1
 19005                                  					; disk changed!
 19006                                  		; 12/12/2022
 19007                                  		; ('changed_drv' clears cf)
 19008                                  		;clc
 19009 00001BED EBD7                    		jmp	short changed_drv
 19010                                  
 19011                                  ; ---------------------------------------------------------------------------
 19012                                  
 19013                                  ; at i/o time, we detected the error. now we need to determine whether the
 19014                                  ; media was truly changed or not. we return normally if media change unknown.
 19015                                  ; and we pop off the call and jmp to harderr if we see an error.
 19016                                  ;
 19017                                  ; es:di -> bds
 19018                                  
 19019                                  checkio:				
 19020 00001BEF 80FC06                  		cmp	ah, 6
 19021 00001BF2 75D1                    		jnz	short checkfatret
 19022 00001BF4 E825FF                  		call	chkopcnt
 19023 00001BF7 74CC                    		jz	short checkfatret
 19024 00001BF9 E8DAEA                  		call	GetBp
 19025 00001BFC 7212                    		jb	short no_error_map
 19026 00001BFE E889FF                  		call	checkfatvid
 19027 00001C01 7209                    		jb	short checkioret ; disk	error trying to	read in.
 19028 00001C03 09F6                    		or	si, si		; is changed for sure?
 19029 00001C05 7802                    		js	short checkioerr ; yes changed
 19030 00001C07 45                      		inc	bp		; allow	a retry
 19031 00001C08 C3                      		retn
 19032                                  ; ---------------------------------------------------------------------------
 19033                                  
 19034                                  checkioerr:				
 19035 00001C09 E80700                  		call	returnvid
 19036                                  
 19037                                  checkioret:				
 19038 00001C0C F9                      		stc			; make sure carry gets passed through
 19039 00001C0D E955F1                  		jmp	harderr
 19040                                  ; ---------------------------------------------------------------------------
 19041                                  
 19042                                  no_error_map:				
 19043 00001C10 E955F1                  		jmp	harderr2
 19044                                  
 19045                                  ; =============== S U B	R O U T	I N E =======================================
 19046                                  
 19047                                  ; return vid sets up the vid for a return to dos.
 19048                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 19049                                  ;  **** trashes si! ****
 19050                                  
 19051                                  returnvid:		
 19052 00001C13 BE1600                  		mov	si, 22		; extra
 19053                                  					; offset into pointer to return	value
 19054 00001C16 E80700                  		call	vid_into_packet
 19055 00001C19 B406                    		mov	ah, 6
 19056 00001C1B F9                      		stc
 19057 00001C1C C3                      		retn
 19058                                  
 19059                                  ; ---------------------------------------------------------------------------
 19060                                  
 19061                                  ; moves the pointer to the volid for the drive into the original request packet
 19062                                  ; no attempt is made to preserve registers.
 19063                                  ;
 19064                                  ; assumes es:di -> bds
 19065                                  ; **trashes si**
 19066                                  
 19067                                  media_set_vid:				
 19068 00001C1D BE0F00                  		mov	si, 15		; trans+1
 19069                                  					; return the value here	in packet
 19070                                  
 19071                                  		; fall into vid_into_packet
 19072                                  
 19073                                  ; =============== S U B	R O U T	I N E =======================================
 19074                                  
 19075                                  ; return pointer to vid in bds at es:di in packet[si]
 19076                                  
 19077                                  		; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 19078                                  		; 19/10/2022
 19079                                  vid_into_packet:
 19080 00001C20 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 19081 00001C21 C51E[1200]              		lds	bx, [ptrsav]
 19082                                  		;add	di, 75		; BDS.volid
 19083                                  		; 14/04/2024
 19084 00001C25 83C77D                  		add	di, 125	; (PCDOS 7.1)
 19085 00001C28 8938                    		mov	[bx+si], di
 19086                                  		;sub	di, 75		; BDS.volid
 19087 00001C2A 83EF7D                  		sub	di, 125
 19088 00001C2D 8C4002                  		mov	[bx+si+2], es
 19089 00001C30 1F                      		pop	ds
 19090                                  dofloppy:	; 18/12/2022
 19091 00001C31 C3                      		retn
 19092                                  
 19093                                  ; ---------------------------------------------------------------------------
 19094                                  
 19095                                  ;----------------------------------------------------------------------------
 19096                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 19097                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 19098                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 19099                                  ;   of getbp. for 3.5" media, we just return.
 19100                                  ;
 19101                                  ;   inputs:	es:di point to correct bds for this drive
 19102                                  ;		ah has media byte
 19103                                  ;
 19104                                  ;   outputs:	carry clear
 19105                                  ;		    no registers modified
 19106                                  ;		carry set
 19107                                  ;		    al = sectors/fat
 19108                                  ;		    bh = number of root directory entries
 19109                                  ;		    bl = sectors per track
 19110                                  ;		    cx = number of sectors
 19111                                  ;		    dh = sectors per allocation unit
 19112                                  ;		    dl = number of heads
 19113                                  ;
 19114                                  ;----------------------------------------------------------------------------
 19115                                  
 19116                                  		; 26/12/2023 - Retro DOS v5.0
 19117                                  hidensity:
 19118                                  
 19119                                  ; check for correct drive
 19120                                  		
 19121                                  		; 26/12/2023
 19122 00001C32 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 19123                                  		; 12/12/2022
 19124                                  		;test	byte [es:di+23h], 2
 19125                                  		;;test	word [es:di+23h], 2 ; is it special?
 19126                                  					; [es:di+BDS.flags], fchangeline
 19127 00001C37 74F8                    		jz	short dofloppy	; no, do normal floppy test
 19128                                  
 19129                                  ; we have a media byte that is pretty complex. examine drive information
 19130                                  ; table to see what kind it is.
 19131                                  
 19132                                  		; 26/12/2023
 19133 00001C39 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 19134                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 19135 00001C3E 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 19136                                  					; yes, use fatid...
 19137                                  ; 96 tpi drive?
 19138 00001C40 80FCF9                  		cmp	ah, 0F9h
 19139 00001C43 75EC                    		jnz	short dofloppy
 19140                                  
 19141                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 19142                                  ;------ a 720K diskette
 19143                                  
 19144                                  		; 02/09/2023 (PCDOS 7.1)
 19145                                  		; 26/12/2023
 19146 00001C45 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 19147                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 19148 00001C49 3C07                    		cmp	al, 7
 19149                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 19150                                  					; ffOther
 19151 00001C4B 7413                    		jz	short Is720K
 19152 00001C4D 3C09                    		cmp	al, 9
 19153                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 19154                                  					; ff288
 19155 00001C4F 740F                    		jz	short Is720K
 19156 00001C51 B007                    		mov	al, 7		; seven	sectors	/ fat
 19157 00001C53 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 19158                                  					; 224 root dir entries
 19159                                  					; & 0Fh sector max
 19160 00001C56 B96009                  		mov	cx, 2400	; 80*15*2
 19161                                  					; 80 tracks, 15 sectors/track,
 19162                                  					; 2 sides
 19163                                  		; 02/09/2023
 19164 00001C59 5A                      		pop	dx		; pop off return address
 19165 00001C5A BA0201                  		mov	dx, 258		; 1*256+2
 19166                                  					; sectors/allocation unit
 19167                                  					; & head max
 19168                                  		;add	sp, 2		; pop off return address
 19169 00001C5D E9EAEA                  		jmp	Has1		; return to tail of getbp
 19170                                  ; ---------------------------------------------------------------------------
 19171                                  
 19172                                  Is720K:
 19173                                  		; 02/09/2023
 19174 00001C60 5B                      		pop	bx		; pop off return address
 19175                                  		;add	sp, 2		; pop off return address
 19176 00001C61 E9A9EA                  		jmp	Has720K		; return to 720K code
 19177                                  ; ---------------------------------------------------------------------------
 19178                                  
 19179                                  		; 18/12/2022
 19180                                  ;dofloppy:
 19181                                  		;retn
 19182                                  
 19183                                  ; =============== S U B	R O U T	I N E =======================================
 19184                                  
 19185                                  ; 16/10/2022
 19186                                  
 19187                                  ;---------------------------------------------------------------------------
 19188                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 19189                                  ;		   essentially used to indicate changeline, or format.
 19190                                  ;
 19191                                  ;   inputs:	dl contains physical drive number
 19192                                  ;		bx contains bits to set in the flag field in the bdss
 19193                                  ;   outputs:	none
 19194                                  ;   registers modified: flags
 19195                                  ;
 19196                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 19197                                  ;
 19198                                  ; in the virtual drive system we *must* flag the other drives as being changed
 19199                                  ;---------------------------------------------------------------------------
 19200                                  
 19201                                  		; 26/12/2023 - Retro DOS v5.0
 19202                                  set_changed_dl:	
 19203 00001C64 06                      		push	es
 19204 00001C65 57                      		push	di
 19205                                  		;les	di, ds:start_bds
 19206                                  		; 19/10/2022
 19207 00001C66 C43E[1901]              		les	di, [start_bds]
 19208                                  
 19209                                  ; note: we assume that the list is non-empty
 19210                                  
 19211                                  scan_bds:
 19212 00001C6A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19213 00001C6E 7504                    		jnz	short get_next_bds
 19214                                  
 19215                                  ; someone may complain, but this *always* must be done when a disk change is
 19216                                  ; noted. there are *no* other compromising circumstances.
 19217                                  
 19218                                  		; 26/12/2023
 19219 00001C70 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 19220                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 19221                                  					; signal change	on other drive
 19222                                  get_next_bds:
 19223 00001C74 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19224                                  					; go to	next bds
 19225 00001C77 83FFFF                  		cmp	di, 0FFFFh
 19226 00001C7A 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 19227 00001C7C 5F                      		pop	di
 19228 00001C7D 07                      		pop	es
 19229 00001C7E C3                      		retn
 19230                                  
 19231                                  ; =============== S U B	R O U T	I N E =======================================
 19232                                  
 19233                                  ;---------------------------------------------------------------------------
 19234                                  ; checkromchange - see if external program has diddled rom change line.
 19235                                  ;
 19236                                  ;   inputs:	es:di points to current bds.
 19237                                  ;   outputs:	zero set - no change
 19238                                  ;		zero reset - change
 19239                                  ;   registers modified: none
 19240                                  ;---------------------------------------------------------------------------
 19241                                  
 19242                                  		; 26/12/2023 - Retro DOS v5.0
 19243                                  checkromchange:	
 19244                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 19245                                  		; 26/12/2023
 19246 00001C7F 26F6453F40              		test	byte [es:di+3Fh], 40h
 19247                                  		; 10/12/2022
 19248                                  		;test	byte [es:di+23h], 40h
 19249                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 19250                                  					; fchanged
 19251 00001C84 C3                      		retn
 19252                                  
 19253                                  ; =============== S U B	R O U T	I N E =======================================
 19254                                  
 19255                                  ;---------------------------------------------------------------------------
 19256                                  ; resetchanged - restore value of change line
 19257                                  ;
 19258                                  ;   inputs:	es:di points to current bds
 19259                                  ;   outputs:	none
 19260                                  ;   registers modified: none
 19261                                  ;---------------------------------------------------------------------------
 19262                                  
 19263                                  		; 26/12/2023 - Retro DOS v5.0
 19264                                  resetchanged:
 19265                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 19266                                  		; 26/12/2023
 19267 00001C85 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 19268                                  		; 10/12/2022
 19269                                  		;and	byte [es:di+23h], 0BFh
 19270                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 19271                                  					; ~fchanged
 19272 00001C8A C3                      		retn
 19273                                  
 19274                                  ; =============== S U B	R O U T	I N E =======================================
 19275                                  
 19276                                  ;---------------------------------------------------------------------------
 19277                                  ; haschange - see if drive can supply change line
 19278                                  ;
 19279                                  ;   inputs:	es:di points to current bds
 19280                                  ;   outputs:	zero set - no change line available
 19281                                  ;		zero reset - change line available
 19282                                  ;   registers modified: none
 19283                                  ;---------------------------------------------------------------------------
 19284                                  
 19285                                  		; 26/12/2023 - Retro DOS v5.0
 19286                                  haschange:
 19287                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 19288                                  		; 26/12/2023
 19289 00001C8B 26F6453F02              		test	byte [es:di+3Fh], 2
 19290                                  		; 10/12/2022
 19291                                  		;test	byte [es:di+23h], 2
 19292                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 19293                                  					; fchangeline
 19294 00001C90 C3                      		retn
 19295                                  
 19296                                  ; ---------------------------------------------------------------------------
 19297                                  
 19298                                  ; 16/10/2022
 19299                                  
 19300                                  ;-------------------------------------------------------------------------
 19301                                  ; set_volume_id      -	main routine, calls other routines.
 19302                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 19303                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 19304                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 19305                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 19306                                  ;-------------------------------------------------------------------------
 19307                                  
 19308                                  ; set_volume_id
 19309                                  ;   if drive has changeline support, read in and set the volume_id
 19310                                  ; and the last fat_id byte. if no change line support then do nothing.
 19311                                  ;
 19312                                  ;   on entry:
 19313                                  ;	es:di points to the bds for this disk.
 19314                                  ;	ah contains media byte
 19315                                  ;
 19316                                  ;   on exit:
 19317                                  ;	carry clear:
 19318                                  ;	   successful call
 19319                                  ;	carry set
 19320                                  ;	   error and ax has error code
 19321                                  
 19322                                  set_volume_id:
 19323 00001C91 52                      		push	dx		; save registers
 19324 00001C92 50                      		push	ax
 19325 00001C93 E8F5FF                  		call	haschange	; does drive have changeline support?
 19326 00001C96 740B                    		jz	short setvret	; no, get out
 19327 00001C98 E81000                  		call	read_volume_id
 19328 00001C9B 7209                    		jb	short seterr
 19329 00001C9D E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 19330 00001CA0 E8E2FF                  		call	resetchanged	; restore value	of change line
 19331                                  setvret:				
 19332                                  		; 10/12/2022
 19333                                  		; cf = 0
 19334                                  		;clc			; no error, clear carry flag
 19335 00001CA3 58                      		pop	ax		; restore registers
 19336 00001CA4 5A                      		pop	dx
 19337 00001CA5 C3                      		retn
 19338                                  ; ---------------------------------------------------------------------------
 19339                                  
 19340                                  seterr:
 19341 00001CA6 5A                      		pop	dx		; pop stack but don't overwrite ax
 19342 00001CA7 5A                      		pop	dx		; restore dx
 19343 00001CA8 C3                      		retn
 19344                                  ; ---------------------------------------------------------------------------
 19345 00001CA9 0000                    root_sec:	dw 0			; root sector #
 19346                                  
 19347                                  ; 16/10/2022
 19348                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 19349                                  ; 09/12/2022
 19350                                  ROOTSEC equ root_sec
 19351                                  
 19352                                  ; =============== S U B	R O U T	I N E =======================================
 19353                                  
 19354                                  ; 16/10/2022
 19355                                  
 19356                                  ; read_volume_id read the volume id and tells if it has been changed.
 19357                                  ;
 19358                                  ;   on entry:
 19359                                  ;	es:di points to current bds for drive.
 19360                                  ;
 19361                                  ;   on exit:
 19362                                  ;	carry clear
 19363                                  ;	    si = 1  no change
 19364                                  ;	    si = 0  ?
 19365                                  ;	    si = -1 change
 19366                                  ;
 19367                                  ;	carry set:
 19368                                  ;	    error and ax has error code.
 19369                                  
 19370                                  read_volume_id:
 19371 00001CAB 52                      		push	dx		; preserve registers
 19372 00001CAC 51                      		push	cx
 19373 00001CAD 53                      		push	bx
 19374 00001CAE 50                      		push	ax
 19375 00001CAF 06                      		push	es		; stack the bds last
 19376 00001CB0 57                      		push	di
 19377 00001CB1 1E                      		push	ds		; point es to Bios_Data
 19378 00001CB2 07                      		pop	es
 19379 00001CB3 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19380 00001CB6 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 19381                                  		; 26/12/2023
 19382 00001CB9 B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 19383                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 19384                                  		
 19385                                  		;rep	movsb
 19386                                  		; 26/12/2023
 19387                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 19388                                  		;db 0FBh,2Eh,0A4h 
 19389                                  		;cs	; nul_vid is in BIOSCODE segment 
 19390                                  		;rep movsb
 19391 00001CBC F3                      		rep
 19392 00001CBD 2E                      		cs
 19393 00001CBE A4                      		movsb	
 19394                                  		
 19395 00001CBF 5F                      		pop	di
 19396 00001CC0 07                      		pop	es
 19397 00001CC1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 19398                                  					; # of fats
 19399 00001CC5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 19400                                  					; sectors / fat
 19401 00001CC9 F6E1                    		mul	cl		; size taken by	fats
 19402 00001CCB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 19403                                  					; add on reserved sectors
 19404                                  					;
 19405                                  					; ax is	now sector # (0	based)
 19406                                  		; 17/10/2022
 19407 00001CCF 2EA3[A91C]              		mov	[cs:ROOTSEC], ax
 19408                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 19409                                  					; 0070h:3EFFh =	2C7h:198Fh
 19410 00001CD3 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 19411                                  					; # root dir entries
 19412 00001CD7 B104                    		mov	cl, 4		; 16 entries/sector
 19413 00001CD9 D3E8                    		shr	ax, cl		; divide by 16
 19414                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 19415                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 19416 00001CDB 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 19417                                  next_sec:
 19418 00001CDC 51                      		push	cx		; save outer loop counter
 19419 00001CDD 2EA1[A91C]              		mov	ax, [cs:ROOTSEC]
 19420                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 19421                                  					; get sector #
 19422 00001CE1 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 19423                                  					; sectors / track
 19424 00001CE5 31D2                    		xor	dx, dx
 19425 00001CE7 F7F1                    		div	cx
 19426                                  
 19427                                  ; set up registers for call to read_sector
 19428                                  
 19429 00001CE9 42                      		inc	dx		; dx= sectors into track
 19430                                  					; ax= track count from 0
 19431 00001CEA 88D1                    		mov	cl, dl		; sector to read
 19432 00001CEC 31D2                    		xor	dx, dx
 19433 00001CEE 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 19434                                  					; # heads on this disc
 19435 00001CF2 88D6                    		mov	dh, dl		; head number
 19436 00001CF4 88C5                    		mov	ch, al		; track	#
 19437 00001CF6 E8BDEB                  		call	read_sector	; get first sector of the root directory,
 19438                                  					; ds:bx	-> directory sector
 19439 00001CF9 723F                    		jb	short readviderr
 19440 00001CFB B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 19441 00001CFE B008                    		mov	al, 8		; volume label bit
 19442                                  fvid_loop:
 19443                                  		; 02/09/2023 (PCDOS 7.1)
 19444 00001D00 382F                    		cmp	[bx], ch ; 0				
 19445                                  		;cmp	byte [bx], 0 ; end of dir?
 19446 00001D02 7433                    		jz	short no_vid	; yes, no vol id
 19447 00001D04 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 19448 00001D07 7405                    		jz	short ent_loop	; yes, skip
 19449 00001D09 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 19450 00001D0C 750F                    		jnz	short found_vid	; jmp yes
 19451                                  ent_loop:
 19452 00001D0E 83C320                  		add	bx, 32		; add length of	directory entry
 19453 00001D11 E2ED                    		loop	fvid_loop
 19454 00001D13 59                      		pop	cx		; outer loop
 19455 00001D14 2EFF06[A91C]            		inc	word [cs:ROOTSEC]
 19456                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 19457                                  					; next sector
 19458 00001D19 E2C1                    		loop	next_sec	; continue
 19459                                  notfound:
 19460                                  		; 02/09/2023
 19461                                  		;xor	si, si
 19462 00001D1B EB13                    		jmp	short fvid_ret
 19463                                  ; ---------------------------------------------------------------------------
 19464                                  
 19465                                  found_vid:
 19466                                  		; 02/09/2023
 19467                                  		; cf = 0  ('test' instruction clears cf)
 19468 00001D1D 59                      		pop	cx		; clean stack of outer loop counter
 19469 00001D1E 89DE                    		mov	si, bx		; point	to volume_id
 19470 00001D20 06                      		push	es		; preserve current bds
 19471 00001D21 57                      		push	di
 19472 00001D22 1E                      		push	ds
 19473 00001D23 07                      		pop	es		; point es to Bios_Data
 19474 00001D24 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19475 00001D27 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 19476                                  					; length of string minus nul
 19477 00001D2A F3A4                    		rep movsb		; mov volume label to tmp_vid
 19478                                  		;xor	al, al
 19479                                  		; 02/09/2023
 19480 00001D2C 91                      		xchg	ax, cx		; ax = 0
 19481 00001D2D AA                      		stosb			; null terminate
 19482                                  		;;xor	si, si
 19483                                  		; 02/09/2023
 19484                                  		;xchg	ax, si		; si = 0
 19485 00001D2E 5F                      		pop	di		; restore current bds
 19486 00001D2F 07                      		pop	es
 19487                                  fvid_ret:
 19488                                  		; 02/09/2023
 19489 00001D30 31F6                    		xor	si, si ; 0
 19490                                  				
 19491 00001D32 58                      		pop	ax
 19492                                  		; 10/12/2022
 19493                                  		; cf = 0
 19494                                  		;clc
 19495                                  rvidret:
 19496 00001D33 5B                      		pop	bx		; restore registers
 19497 00001D34 59                      		pop	cx
 19498 00001D35 5A                      		pop	dx
 19499 00001D36 C3                      		retn
 19500                                  ; ---------------------------------------------------------------------------
 19501                                  
 19502                                  no_vid:
 19503 00001D37 59                      		pop	cx		; clean stack of outer loop counter
 19504                                  		;jmp	short notfound	; not found
 19505                                  		; 02/09/2023
 19506 00001D38 EBF6                    		jmp	short fvid_ret
 19507                                  ; ---------------------------------------------------------------------------
 19508                                  
 19509                                  readviderr:
 19510 00001D3A 5E                      		pop	si		; trash the outer loop counter
 19511 00001D3B 5E                      		pop	si		; caller's ax, return error code instead
 19512 00001D3C EBF5                    		jmp	short rvidret
 19513                                  
 19514                                  ; ---------------------------------------------------------------------------
 19515                                  		; 26/12/2023 - Retro DOS v5.0
 19516                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 19517                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 19518                                  preset_volid_addr:
 19519 00001D3E BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 19520                                  		; 26/12/2023
 19521                                  		; PCDOS 7.1
 19522 00001D41 83C77D                  		add	di, 125		; BDS.volid
 19523 00001D44 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 19524                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 19525                                  		;add	di, 75		; BDS.volid
 19526                                  		;mov	cx, 12		; VOLID_SIZ
 19527                                  		;
 19528 00001D47 FC                      		cld
 19529 00001D48 C3                      		retn
 19530                                  
 19531                                  ; =============== S U B	R O U T	I N E =======================================
 19532                                  
 19533                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 19534                                  ;
 19535                                  ; inputs:	es:di has current bds
 19536                                  ; outputs:	bds for drive has volume id from tmp
 19537                                  
 19538                                  		; 27/12/2023 - Retro DOS v5.0
 19539                                  transfer_volume_id:
 19540 00001D49 57                      		push	di		; copy the volume id from tmp to special drive
 19541                                  		;push	si
 19542 00001D4A 51                      		push	cx
 19543                                  		; 27/12/2023
 19544 00001D4B 56                      		push	si
 19545                                  
 19546                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19547                                  		;;add	di, BDS.volid
 19548                                  		;add	di, 75		; BDS.volid
 19549                                  		;;mov	cx, VOLID_SIZ
 19550                                  		;mov	cx, 12		; VOLID_SIZ
 19551                                  		;cld
 19552                                  		; 02/09/2023 (PCDOS 7.1)
 19553 00001D4C E8EFFF                  		call	preset_volid_addr
 19554                                  
 19555 00001D4F F3A4                    		rep movsb
 19556                                  		
 19557                                  		; 27/12/2023
 19558 00001D51 5E                      		pop	si
 19559                                  chk_volid_ok:
 19560 00001D52 59                      		pop	cx
 19561                                  		;pop	si
 19562 00001D53 5F                      		pop	di
 19563 00001D54 C3                      		retn
 19564                                  
 19565                                  ; =============== S U B	R O U T	I N E =======================================
 19566                                  
 19567                                  ;  check_volume_id - compare volume id in tmp area with
 19568                                  ;		     one expected for drive
 19569                                  ;
 19570                                  ;   inputs:	es:di has current bds for drive
 19571                                  ;   outputs:	zero true means it matched
 19572                                  
 19573                                  		; 27/12/2023 - Retro DOS v5.0
 19574                                  check_volume_id:
 19575 00001D55 57                      		push	di
 19576 00001D56 51                      		push	cx
 19577                                  		
 19578                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19579                                  		;;add	di, BDS.volid
 19580                                  		;add	di, 75		; BDS.volid
 19581                                  		;;mov	cx, VOLID_SIZ
 19582                                  		;mov	cx, 12		; VOLID_SIZ
 19583                                  		;cld
 19584                                  		; 02/09/2023 (PCDOS 7.1)
 19585 00001D57 E8E4FF                  		call	preset_volid_addr
 19586                                  
 19587 00001D5A F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 19588                                  		
 19589                                  		; 27/12/2023
 19590                                  		;pop	cx
 19591                                  		;pop	di
 19592                                  		;retn
 19593 00001D5C EBF4                    		jmp	short chk_volid_ok
 19594                                  
 19595                                  ; =============== S U B	R O U T	I N E =======================================
 19596                                  
 19597                                  ;   fat_check - see of the fatid has changed in the specified drive.
 19598                                  ;	      - uses the fat id obtained from the boot sector.
 19599                                  ;
 19600                                  ;   inputs:	medbyt is expected fat id
 19601                                  ;		es:di points to current bds
 19602                                  ;
 19603                                  ;   output:	si = -1 if fat id different,
 19604                                  ;		si = 0 otherwise
 19605                                  ;
 19606                                  ;   no other registers changed.
 19607                                  
 19608                                  fat_check:
 19609 00001D5E 50                      		push	ax
 19610 00001D5F 31F6                    		xor	si, si		; say fat id's are same.
 19611 00001D61 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 19612 00001D64 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 19613                                  					; compare it with the bds medbyte
 19614 00001D68 7401                    		jz	short okret1	; carry	clear
 19615 00001D6A 4E                      		dec	si
 19616                                  okret1:
 19617 00001D6B 58                      		pop	ax
 19618 00001D6C C3                      		retn
 19619                                  
 19620                                  ; ---------------------------------------------------------------------------
 19621                                  
 19622                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 19623                                  		;times 2 db 0
 19624                                  
 19625                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 19626                                  		;times 7 db 0
 19627                                  
 19628                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 19629                                  
 19630                                  		; 09/12/2022
 19631                                  		;times 4 db 0	; 17/10/2022
 19632                                  		;db 4 dup(0)	; times 4 db 0
 19633                                  
 19634                                  ; ---------------------------------------------------------------------------
 19635                                  
 19636                                  		; 09/12/2022
 19637                                  		;db 0
 19638                                  
 19639                                  number2div	equ ($-BCode_start)
 19640                                  number2mod	equ (number2div % 16)
 19641                                  
 19642                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 19643 00001D6D 00<rep 3h>              		times (16-number2mod) db 0
 19644                                  %endif
 19645                                  
 19646                                  ;align 16
 19647                                  
 19648                                  ; 09/12/2022
 19649                                  BCODE_END	equ $ - BCode_start
 19650                                  ; 29/09/2023
 19651                                  BCODEEND:
 19652                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 19653                                  ; 13/12/2022
 19654                                  SYSINITOFFSET	equ BCODE_END
 19655                                  ; 29/09/2023
 19656                                  ;SYSINITOFFSET	equ $-$$
 19657                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 19658                                  
 19659                                  ; 28/09/2023
 19660                                  S2SIZE equ $-$$
 19661                                  
 19662                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 19663                                  
 19664                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19665                                  ; 01/05/2019 - Retro DOS v4.0 
 19666                                  ; ============================================================================
 19667                                  ; end of BIOSCODE
 19668                                  
 19669                                  ; ----------------------------------------------------------------------------
 19670                                  ; %include sysinit5.s	; 09/12/2022
 19671                                  ; ----------------------------------------------------------------------------
 19672                                  
 19673                                  ;=============================================================================
 19674                                  ; (IO.SYS) SYSINIT SEGMENT 
 19675                                  ;=============================================================================
 19676                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19677                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19678                                  ;
 19679                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 19680                                  
 19681                                  section .SYSINIT vstart=0
 19682                                  
 19683                                  ; ****************************************************************************
 19684                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 19685                                  ; ----------------------------------------------------------------------------
 19686                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 19687                                  ; ----------------------------------------------------------------------------
 19688                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 19689                                  ; ----------------------------------------------------------------------------
 19690                                  ; Assembler: NASM version 2.15
 19691                                  ; ----------------------------------------------------------------------------
 19692                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 19693                                  ; ----------------------------------------------------------------------------
 19694                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 19695                                  ; ----------------------------------------------------------------------------
 19696                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 19697                                  ; source code by Microsoft, 1991 
 19698                                  ; ----------------------------------------------------------------------------
 19699                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 19700                                  ; by Microsoft, 12/10/1983
 19701                                  ; ****************************************************************************
 19702                                  ; main file: 'retrodos4.s'
 19703                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 19704                                  
 19705                                  ; 30/12/2022 - Retro DOS v4.2 
 19706                                  ; Retro DOS v4.0 - 2019
 19707                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 19708                                   
 19709                                  ; 21/10/2022
 19710                                  ; ----------------------------------------------------------------------------
 19711                                  ; This source code (version) is based on SYSINIT source code of disassembled
 19712                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 19713                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 19714                                  ; ----------------------------------------------------------------------------
 19715                                  ; Binary file splitter & joiner: FFSJ v3.3
 19716                                  
 19717                                  ;--------------------------------------------------------------
 19718                                  ; SYSINIT.TXT (27/01/1983)
 19719                                  ;--------------------------------------------------------------
 19720                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 19721                                  ;over  the  system  initialization  after  the  OEM  bios   has
 19722                                  ;performed any  initialization  it  needs  to  do.   Control is
 19723                                  ;transfered with a long jump to the external  variable  SYSINIT
 19724                                  ;
 19725                                  ;
 19726                                  ;   The OEM  has  the  following  variables declared external:
 19727                                  ;
 19728                                  ;   CURRENT_DOS_LOCATION    WORD
 19729                                  ;
 19730                                  ;This word  contains  the  segment  number of the DOS before it
 19731                                  ;is relocated.  The OEM bios must set this value.
 19732                                  ;
 19733                                  ;   FINAL_DOS_LOCATION      WORD
 19734                                  ;
 19735                                  ;This word contains the segment number of the DOS after SYSINIT
 19736                                  ;moves it.  The OEM bios must set this value.
 19737                                  ;
 19738                                  ;   DEVICE_LIST             DWORD
 19739                                  ;
 19740                                  ;This  double  word  pointer  points  to  the  linked  list  of
 19741                                  ;character and block device drivers.  The  OEM  must  set  this
 19742                                  ;value.
 19743                                  ;
 19744                                  ;   MEMORY_SIZE             WORD
 19745                                  ;
 19746                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 19747                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 19748                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 19749                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 19750                                  ;and read it back until it gets a mismatch.
 19751                                  ;
 19752                                  ;   DEFAULT_DRIVE           BYTE
 19753                                  ;
 19754                                  ;This is  the initial default drive when the system first comes
 19755                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 19756                                  ;it then drive a is assumed.
 19757                                  ;
 19758                                  ;   BUFFERS                 BYTE
 19759                                  ;
 19760                                  ;This is  the  default  number of buffers for the system.  This
 19761                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19762                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 19763                                  ;
 19764                                  ;   FILES                   BYTE
 19765                                  ;
 19766                                  ;This is  the  default  number  of  files for the system.  This
 19767                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19768                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 19769                                  ;
 19770                                  ;   SYSINIT                 FAR
 19771                                  ;
 19772                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 19773                                  ;this label at the end of its INIT code.
 19774                                  ;
 19775                                  ;   The OEM  has  the  following  variables declared public:
 19776                                  ;
 19777                                  ;   RE_INIT                 FAR
 19778                                  ;
 19779                                  ;This is an entry point which allows the BIOS to do some INIT
 19780                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 19781                                  ;PRESERVED.  On entry DS points to the first available memory
 19782                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 19783                                  ;prefix which represents  the  "program"  currently  running.
 19784                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 19785                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 19786                                  ;that  no  memory  is  allocated to it, it is running in free
 19787                                  ;memory.
 19788                                  ;NOTES:
 19789                                  ;     At the time this routine is called SYSINIT occupies the
 19790                                  ;highest 10K of memory ("highest" is determined by the  value
 19791                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 19792                                  ;     Since this is called AFTER DOS is initialized, you can
 19793                                  ;make system calls.  This also implies that the code for this
 19794                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 19795                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 19796                                  ;     If you don't want  anything done just set this to point
 19797                                  ;at a FAR RET instruction.
 19798                                  
 19799                                  ; ----------------------------------------------------------------------
 19800                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 19801                                  ; ----------------------------------------------------------------------
 19802                                  
 19803                                  ;include version.inc
 19804                                  ; ----------------------------------------------------------------------
 19805                                  
 19806                                  ;FALSE   EQU     0
 19807                                  ;TRUE    EQU     0FFFFh
 19808                                  
 19809                                  ;IBMVER	    EQU     TRUE
 19810                                  ;IBMCOPYRIGHT EQU   FALSE
 19811                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 19812                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 19813                                  ;MSVER      EQU     FALSE
 19814                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 19815                                  ;KANJI      EQU     FALSE
 19816                                  
 19817                                  ;(MSDOS 6.0, versiona.inc, 1991)
 19818                                  ; ----------------------------------------------------------------------
 19819                                  ;MAJOR_VERSION  EQU	6
 19820                                  ;;MINOR_VERSION	EQU	0	;6.00
 19821                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 19822                                  
 19823                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 19824                                  ; ----------------------------------------------------------------------
 19825                                  ;MAJOR_VERSION   EQU	5
 19826                                  ;MINOR_VERSION   EQU	0
 19827                                  
 19828                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 19829                                  ;MAJOR_VERSION   EQU	6
 19830                                  ;MINOR_VERSION   EQU	22
 19831                                  
 19832                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 19833                                  MAJOR_VERSION   EQU	7
 19834                                  MINOR_VERSION   EQU	10
 19835                                  
 19836                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 19837                                  
 19838                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 19839                                  				; currently 0.
 19840                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 19841                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 19842                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 19843                                  
 19844                                  ;      if1
 19845                                  ;      %OUT  ... for DOS Version 5.00 ...
 19846                                  ;      endif
 19847                                  
 19848                                         ;******************************
 19849                                         ;Each assembler program should:
 19850                                         ;  mov ah,030h                   ;DOS Get Version function
 19851                                         ;  int 021h                      ;Version ret. in AX,minor version first
 19852                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 19853                                         ;  jne error_handler             ; EXACT version match.
 19854                                         ;******************************
 19855                                  
 19856                                  ; ----------------------------------------------------------------------
 19857                                  ; device definitions
 19858                                  
 19859                                  ;Attribute bit masks
 19860                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 19861                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 19862                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 19863                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 19864                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 19865                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 19866                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 19867                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 19868                                  
 19869                                  ; The device table list has the form:
 19870                                  struc	SYSDEV
 19871 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 19872 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 19873 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 19874 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 19875 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 19876                                  .size:
 19877                                  endstruc
 19878                                  
 19879                                  ;Static Reguest Header
 19880                                  struc	SRHEAD
 19881 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 19882 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 19883 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 19884 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 19885 00000005 ????????????????                	resb 8		;Reserved for queue links
 19886                                  .size:
 19887                                  endstruc
 19888                                  
 19889                                  ;Status word masks
 19890                                  STERR   EQU     8000H           ;Bit 15 - Error
 19891                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 19892                                  STDON   EQU     0100H           ;Bit 8 - Done
 19893                                  STECODE EQU     00FFH           ;Error code
 19894                                  WRECODE EQU     0
 19895                                  
 19896                                  ;Function codes
 19897                                  DEVINIT EQU     0               ;Initialization
 19898                                  DINITHL EQU     26              ;Size of init header
 19899                                  DEVMDCH EQU     1               ;Media check
 19900                                  DMEDHL  EQU     15              ;Size of media check header
 19901                                  DEVBPB  EQU     2               ;Get BPB
 19902                                  DEVRDIOCTL EQU  3               ;IOCTL read
 19903                                  DBPBHL  EQU     22              ;Size of Get BPB header
 19904                                  DEVRD   EQU     4               ;Read
 19905                                  DRDWRHL EQU     22              ;Size of RD/WR header
 19906                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 19907                                  DRDNDHL EQU     14              ;Size of non destructive read header
 19908                                  DEVIST  EQU     6               ;Input status
 19909                                  DSTATHL EQU     13              ;Size of status header
 19910                                  DEVIFL  EQU     7               ;Input flush
 19911                                  ; 21/02/2024
 19912                                  ;DFLSHL EQU     15              ;Size of flush header
 19913                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 19914                                  DEVWRT  EQU     8               ;Write
 19915                                  DEVWRTV EQU     9               ;Write with verify
 19916                                  DEVOST  EQU     10              ;Output status
 19917                                  DEVOFL  EQU     11              ;Output flush
 19918                                  DEVWRIOCTL EQU  12              ;IOCTL write
 19919                                  
 19920                                  ; ----------------------------------------------------------------------
 19921                                  struc	SYS_FCB
 19922 00000000 ??                      .fcb_drive:	resb 1
 19923 00000001 ????????????????        .fcb_name:	resb 8
 19924 00000009 ??????                  .fcb_ext:	resb 3
 19925 0000000C ????                    .fcb_EXTENT:	resw 1
 19926 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 19927 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 19928                                                          ; word
 19929 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 19930 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 19931 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 19932 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 19933                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 19934                                                          ; If file, bit 6=0 if dirty
 19935                                                          ; If I/O device, bit 6=0 if EOF (input)
 19936                                                          ;               Bit 5=1 if Raw mode
 19937                                                          ;               Bit 0=1 if console input device
 19938                                                          ;               Bit 1=1 if console output device
 19939                                                          ;               Bit 2=1 if null device
 19940                                                          ;               Bit 3=1 if clock device
 19941 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 19942 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 19943 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 19944 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 19945 00000020 ??                      .fcb_NR:	resb 1	; Next record
 19946 00000021 ????????                .fcb_RR:	resb 4	; Random record
 19947                                  .size:
 19948                                  endstruc
 19949                                  
 19950                                  ; ----------------------------------------------------------------------
 19951                                  ; Field definition for I/O buffer information
 19952                                  
 19953                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 19954                                  
 19955                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 19956                                  
 19957                                  struc BUFFINFO
 19958 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 19959 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 19960 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 19961                                  				; SFT table index (bit 7 = 1)
 19962                                  				; = FFH if buffer free
 19963 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 19964                                  				;	= 0 if Local device buffer
 19965                                  				; Bit 6 = 1 if buffer dirty
 19966                                  				; Bit 5 = Reserved
 19967                                  				; Bit 4 = Search bit (bit 7 = 1)
 19968                                  				; Bit 3 = 1 if buffer is DATA
 19969                                  				; Bit 2 = 1 if buffer is DIR
 19970                                  				; Bit 1 = 1 if buffer is FAT
 19971                                  				; Bit 0 = Reserved
 19972 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 19973                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 19974 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 19975 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 19976 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19977                                  			   ; hw of sectors per FAT
 19978 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 19979 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 19980 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 19981 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19982                                  			   ; reserved word for dword boundary
 19983                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 19984                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 19985                                  endstruc
 19986                                  
 19987                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 19988                                  				;For buf_flags bit 7 = 1, this is the byte
 19989                                  				;offset of the start of the buffer in
 19990                                  				;the file pointed to by buf_ID. Thus
 19991                                  				;the buffer starts at location
 19992                                  				;buf_offset in the file and contains
 19993                                  				;buf_fill bytes.
 19994                                  
 19995                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 19996                                  
 19997                                  
 19998                                  buf_Free	equ	0FFh		; buf_id of free buffer
 19999                                  
 20000                                  ;Flag byte masks
 20001                                  buf_isnet	EQU	10000000B
 20002                                  buf_dirty	EQU	01000000B
 20003                                  ;***
 20004                                  buf_visit	EQU	00100000B
 20005                                  ;***
 20006                                  buf_snbuf	EQU	00010000B
 20007                                  
 20008                                  buf_isDATA	EQU	00001000B
 20009                                  buf_isDIR	EQU	00000100B
 20010                                  buf_isFAT	EQU	00000010B
 20011                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 20012                                  
 20013                                  buf_NetID	EQU	bufinsiz
 20014                                  
 20015                                  ; ----------------------------------------------------------------------
 20016                                  
 20017                                  ; ----------------------------------------------------------------------
 20018                                  ;**	DPB - Drive Parameter Block
 20019                                  
 20020                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 20021                                  
 20022                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 20023                                  ;	possibly inaccurate deductions from code study... - jgl
 20024                                  ;
 20025                                  ;	The DPB is DOS's main structure for describing block devices.
 20026                                  ;	It contains info about the "Drive" intermingled with info about
 20027                                  ;	the FAT file system which is presumably on the drive.  I don't know
 20028                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 20029                                  ;
 20030                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 20031                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 20032                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 20033                                  
 20034                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 20035                                  
 20036                                  ; 12/05/2019 - Retro DOS v4.0
 20037                                  
 20038                                  ; 01/01/2024
 20039                                  %if 0
 20040                                  
 20041                                  struc	DPB
 20042                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 20043                                  .UNIT:		resb 1		; Driver unit number of DPB
 20044                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 20045                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 20046                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 20047                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 20048                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 20049                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 20050                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 20051                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 20052                                  ; MSDOS 3.3
 20053                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 20054                                  ; MSDOS 6.0
 20055                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 20056                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 20057                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 20058                                  .MEDIA:		resb 1		; Media byte
 20059                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 20060                                  				; check the first time this DPB is used
 20061                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 20062                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 20063                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 20064                                  .size:
 20065                                  endstruc
 20066                                  
 20067                                  %else
 20068                                  
 20069                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 20070                                  
 20071                                  struc	DPB
 20072 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 20073 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 20074 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 20075 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 20076 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 20077 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 20078 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 20079 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 20080 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 20081 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 20082 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 20083 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 20084 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 20085 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 20086 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 20087                                  				; check the first time this DPB is used
 20088 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 20089 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 20090 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 20091                                  ; FAT32 fs ; 01/01/2024
 20092                                  ; ref: https://en.wikibooks.org/wiki/
 20093                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 20094                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 20095 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 20096 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 20097 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 20098 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 20099 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 20100 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 20101 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 20102 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 20103                                  ; 01/01/2024 - Retro DOS v5.0
 20104 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 20105                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 20106                                  endstruc
 20107                                  
 20108                                  %endif
 20109                                  
 20110                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 20111                                  
 20112                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 20113                                  
 20114                                  ; ----------------------------------------------------------------------
 20115                                  ; 26/03/2018
 20116                                  
 20117                                  ; IOCTL SUB-FUNCTIONS
 20118                                  IOCTL_GET_DEVICE_INFO	EQU	0
 20119                                  IOCTL_SET_DEVICE_INFO	EQU	1
 20120                                  IOCTL_READ_HANDLE	EQU	2
 20121                                  IOCTL_WRITE_HANDLE	EQU	3
 20122                                  IOCTL_READ_DRIVE	EQU	4
 20123                                  IOCTL_WRITE_DRIVE	EQU	5
 20124                                  IOCTL_GET_INPUT_STATUS	EQU	6
 20125                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 20126                                  IOCTL_CHANGEABLE?	EQU	8
 20127                                  IOCTL_SHARING_RETRY	EQU	11
 20128                                  GENERIC_IOCTL_HANDLE	EQU	12
 20129                                  GENERIC_IOCTL		EQU	13
 20130                                  
 20131                                  ; GENERIC IOCTL SUB-FUNCTIONS
 20132                                  RAWIO			EQU	8
 20133                                  
 20134                                  ; RAWIO SUB-FUNCTIONS
 20135                                  GET_DEVICE_PARAMETERS	EQU	60H
 20136                                  SET_DEVICE_PARAMETERS	EQU	40H
 20137                                  READ_TRACK		EQU	61H
 20138                                  WRITE_TRACK		EQU	41H
 20139                                  VERIFY_TRACK		EQU	62H
 20140                                  FORMAT_TRACK		EQU	42H
 20141                                  
 20142                                  ; DEVICETYPE VALUES
 20143                                  MAX_SECTORS_IN_TRACK	EQU	63
 20144                                  DEV_5INCH		EQU	0
 20145                                  DEV_5INCH96TPI		EQU	1
 20146                                  DEV_3INCH720KB		EQU	2
 20147                                  DEV_8INCHSS		EQU	3
 20148                                  DEV_8INCHDS		EQU	4
 20149                                  DEV_HARDDISK		EQU	5
 20150                                  DEV_OTHER		EQU	7
 20151                                  ;DEV_3INCH1440KB	EQU	7
 20152                                  DEV_3INCH2880KB		EQU	9
 20153                                  ; Retro DOS v2.0 - 26/03/2018
 20154                                  ;;DEV_TAPE		EQU	6
 20155                                  ;;DEV_ERIMO		EQU	8
 20156                                  ;DEV_3INCH2880KB	EQU	9
 20157                                  DEV_3INCH1440KB		EQU	10
 20158                                  
 20159                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 20160                                  					; CURRENTLY SUPPORT.
 20161                                  MAX_DEV_TYPE		EQU	10
 20162                                  
 20163                                  struc A_SECTORTABLE
 20164 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 20165 00000002 ????                    .ST_SECTORSIZE:		resw	1
 20166                                  .size:
 20167                                  endstruc
 20168                                  
 20169                                  ; ----------------------------------------------------------------------
 20170                                  ; structure, equates for devmark for mem command.
 20171                                  
 20172                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 20173                                  
 20174                                  struc devmark
 20175 00000000 ??                       .id:	    resb 1
 20176 00000001 ????                     .seg:	    resw 1
 20177 00000003 ????                     .size:	    resw 1
 20178 00000005 ??????                   .dum:	    resb 3
 20179 00000008 ????????????????         .filename: resb 8
 20180                                  endstruc
 20181                                  
 20182                                  devmark_stk	equ	'S'
 20183                                  devmark_device	equ	'D'
 20184                                  devmark_ifs	equ	'I'
 20185                                  devmark_buf	equ	'B'
 20186                                  devmark_cds	equ	'L' ; lastdrive
 20187                                  devmark_files	equ	'F'
 20188                                  devmark_fcbs	equ	'X'
 20189                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 20190                                  devmark_ems_stub equ	'E'
 20191                                  
 20192                                  setbrkdone	equ	00000001b
 20193                                  for_devmark	equ	00000010b
 20194                                  not_for_devmark equ	11111101b
 20195                                  
 20196                                  ; ----------------------------------------------------------------------
 20197                                  ; Memory arena structure
 20198                                  
 20199                                  ; 24/03/2019 - Retro DOS v4.0 
 20200                                  ; (MSDOS 6.0, ARENA.INC)
 20201                                  
 20202                                  ;** Arena Header
 20203                                  
 20204                                  struc ARENA
 20205 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 20206 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 20207 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 20208 00000005 ??????                  .RESERVED	resb 3		; reserved
 20209 00000008 ????????????????        .NAME:		resb 8		; owner file name
 20210                                  endstruc
 20211                                  
 20212                                  ; 12/04/2019
 20213                                  
 20214                                  arena_owner_system	EQU 0	; free block indication
 20215                                  
 20216                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 20217                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 20218                                  
 20219                                  ; ----------------------------------------------------------------------
 20220                                  ; Process data block (otherwise known as program header)
 20221                                  
 20222                                  ; 23/03/2019 - Retro DOS v4.0
 20223                                  
 20224                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 20225                                  
 20226                                  FILPERPROC	EQU     20
 20227                                  
 20228                                  struc PDB	; Process_data_block
 20229 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 20230 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 20231 00000004 ??                                      resb 1
 20232 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 20233 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 20234 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 20235 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 20236 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 20237 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 20238 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 20239 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 20240 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 20241 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 20242 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 20243 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 20244 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 20245 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 20246 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 20247 00000042 <res Eh>                .PAD1:		resb 14		; 	
 20248 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 20249 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 20250 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 20251 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 20252 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 20253 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 20254                                  ;.size:
 20255                                  endstruc
 20256                                  
 20257                                  ; ----------------------------------------------------------------------
 20258                                  ; <system call definitions>
 20259                                  
 20260                                  ; 23/03/2019 - Retro DOS v4.0
 20261                                  
 20262                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 20263                                  
 20264                                  ABORT                           EQU 0   ;  0      0
 20265                                  STD_CON_INPUT                   EQU 1   ;  1      1
 20266                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 20267                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 20268                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 20269                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 20270                                  RAW_CON_IO                      EQU 6   ;  6      6
 20271                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 20272                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 20273                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 20274                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 20275                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 20276                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 20277                                  DISK_RESET                      EQU 13  ; 13      D
 20278                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 20279                                  FCB_OPEN                        EQU 15  ; 15      F
 20280                                  FCB_CLOSE                       EQU 16  ; 16     10
 20281                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 20282                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 20283                                  FCB_DELETE                      EQU 19  ; 19     13
 20284                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 20285                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 20286                                  FCB_CREATE                      EQU 22  ; 22     16
 20287                                  FCB_RENAME                      EQU 23  ; 23     17
 20288                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 20289                                  SET_DMA                         EQU 26  ; 26     1A
 20290                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 20291                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 20292                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 20293                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 20294                                  GET_FCB_POSITION                EQU 36  ; 36     24
 20295                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 20296                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 20297                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 20298                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 20299                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 20300                                  GET_DATE                        EQU 42  ; 42     2A
 20301                                  SET_DATE                        EQU 43  ; 43     2B
 20302                                  GET_TIME                        EQU 44  ; 44     2C
 20303                                  SET_TIME                        EQU 45  ; 45     2D
 20304                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 20305                                  ; Extended functionality group
 20306                                  GET_DMA                         EQU 47  ; 47     2F
 20307                                  GET_VERSION                     EQU 48  ; 48     30
 20308                                  KEEP_PROCESS                    EQU 49  ; 49     31
 20309                                  GET_DPB                         EQU 50  ; 50     32
 20310                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 20311                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 20312                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 20313                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 20314                                  CHAR_OPER                       EQU 55  ; 55     37
 20315                                  INTERNATIONAL                   EQU 56  ; 56     38
 20316                                  ;   Directory Group
 20317                                  MKDIR                           EQU 57  ; 57     39
 20318                                  RMDIR                           EQU 58  ; 58     3A
 20319                                  CHDIR                           EQU 59  ; 59     3B
 20320                                  ;   File Group
 20321                                  CREAT                           EQU 60  ; 60     3C
 20322                                  OPEN                            EQU 61  ; 61     3D
 20323                                  CLOSE                           EQU 62  ; 62     3E
 20324                                  READ                            EQU 63  ; 63     3F
 20325                                  WRITE                           EQU 64  ; 64     40
 20326                                  UNLINK                          EQU 65  ; 65     41
 20327                                  LSEEK                           EQU 66  ; 66     42
 20328                                  CHMOD                           EQU 67  ; 67     43
 20329                                  IOCTL                           EQU 68  ; 68     44
 20330                                  XDUP                            EQU 69  ; 69     45
 20331                                  XDUP2                           EQU 70  ; 70     46
 20332                                  CURRENT_DIR                     EQU 71  ; 71     47
 20333                                  ;    Memory Group
 20334                                  ALLOC                           EQU 72  ; 72     48
 20335                                  DEALLOC                         EQU 73  ; 73     49
 20336                                  SETBLOCK                        EQU 74  ; 74     4A
 20337                                  ;    Process Group
 20338                                  EXEC                            EQU 75  ; 75     4B
 20339                                  EXIT                            EQU 76  ; 76     4C
 20340                                  WAITPROCESS			EQU 77  ; 77     4D
 20341                                  FIND_FIRST                      EQU 78  ; 78     4E
 20342                                  ;   Special Group
 20343                                  FIND_NEXT                       EQU 79  ; 79     4F
 20344                                  ; SPECIAL SYSTEM GROUP
 20345                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 20346                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 20347                                  GET_IN_VARS                     EQU 82  ; 82     52
 20348                                  SETDPB                          EQU 83  ; 83     53
 20349                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 20350                                  DUP_PDB                         EQU 85  ; 85     55
 20351                                  RENAME                          EQU 86  ; 86     56
 20352                                  FILE_TIMES                      EQU 87  ; 87     57
 20353                                  ;
 20354                                  ALLOCOPER			EQU 88	; 88     58	
 20355                                  ; Network extention system calls
 20356                                  GetExtendedError		EQU 89	; 89	 59
 20357                                  CreateTempFile			EQU 90	; 90	 5A
 20358                                  CreateNewFile			EQU 91	; 91	 5B
 20359                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 20360                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 20361                                  					;	    CloseByName, CloseUser,
 20362                                  					;	    CloseUserProcess,
 20363                                  					;	    GetOpenFileList
 20364                                  UserOper			EQU 94	; 94	 5E Get and Set
 20365                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 20366                                  xNameTrans			EQU 96	; 96	 60
 20367                                  PathParse			EQU 97	; 97	 61
 20368                                  GetCurrentPSP			EQU 98	; 98	 62
 20369                                  Hongeul 			EQU 99	; 99	 63
 20370                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 20371                                  Set_Printer_Flag		EQU 100 ; 100	 64
 20372                                  GetExtCntry			EQU 101 ; 101	 65
 20373                                  GetSetCdPg			EQU 102 ; 102	 66
 20374                                  ExtHandle			EQU 103 ; 103	 67
 20375                                  Commit				EQU 104 ; 104	 68
 20376                                  GetSetMediaID			EQU 105 ; 105	 69
 20377                                  IFS_IOCTL			EQU 107 ; 107	 6B
 20378                                  ExtOpen 			EQU 108 ; 108	 6C
 20379                                  ;
 20380                                  ;ifdef ROMEXEC
 20381                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 20382                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 20383                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 20384                                  ;endif
 20385                                  ;
 20386                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 20387                                  OEM_C1				EQU 249 ; 249	 F9
 20388                                  OEM_C2				EQU 250 ; 250	 FA
 20389                                  OEM_C3				EQU 251 ; 251	 FB
 20390                                  OEM_C4				EQU 252 ; 252	 FC
 20391                                  OEM_C5				EQU 253 ; 253	 FD
 20392                                  OEM_C6				EQU 254 ; 254	 FE
 20393                                  OEM_C7				EQU 255 ; 255	 FF
 20394                                  
 20395                                  ; ----------------------------------------------------------------------
 20396                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 20397                                  ; ----------------------------------------------------------------------
 20398                                  
 20399                                  ;;	IF	STACKSW
 20400                                  
 20401                                  ;;
 20402                                  ;; Internal Stack Parameters
 20403                                  ;EntrySize		equ	8
 20404                                  ;
 20405                                  ;MinCount		equ	8
 20406                                  ;DefaultCount		equ	9
 20407                                  ;MaxCount		equ	64
 20408                                  ;
 20409                                  ;MinSize 		equ	32
 20410                                  ;DefaultSize		equ	128
 20411                                  ;MaxSize 		equ	512
 20412                                  
 20413                                  ;;	ENDIF
 20414                                  
 20415                                  ; ----------------------------------------------------------------------
 20416                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 20417                                  ; ----------------------------------------------------------------------
 20418                                  					  ;;Rev 3.30 Modification
 20419                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 20420                                  									  
 20421                                  ;*******************************					  
 20422                                  ;System Service call ( Int 15h )					  
 20423                                  ;*******************************					  
 20424                                  ;Function AH = 0C0h, Return system configuration			  
 20425                                  ;For PC and PCJR on return:						  
 20426                                  ;	(AH)	= 80h							  
 20427                                  ;	(CY)	= 1							  
 20428                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 20429                                  ;	(AH)	= 86h							  
 20430                                  ;	(CY)	= 1							  
 20431                                  ;For all others:							  
 20432                                  ;	(AH)	= 0							  
 20433                                  ;	(CY)	= 0							  
 20434                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 20435                                  ; System descriptor :							  
 20436                                  ;	DW	xxxx		length of descriptor in bytes,		  
 20437                                  ;				minimum length = 8			  
 20438                                  ;	DB	xx		model byte				  
 20439                                  ;				0FFh	= PC				  
 20440                                  ;				0FEh	= PC/XT, Portable		  
 20441                                  ;				0FDh	= PC/JR 			  
 20442                                  ;				0FCh	= PC/AT				  
 20443                                  ;				0F9h	= Convertable			  
 20444                                  ;				0F8h	= Model 80			  
 20445                                  ;				0E0 thru 0EFh = reserved		  
 20446                                  ;									  
 20447                                  ;	DB	xx		secondary model byte			  
 20448                                  ;				000h	= PC1				  
 20449                                  ;				000h	= PC/XT, Portable		  
 20450                                  ;				000h	= PC/JR 			  
 20451                                  ;				000h	= PC/AT 			  
 20452                                  ;				001h	= PC/AT Model 339		  
 20453                                  ;				003h	= PC/RT				  
 20454                                  ;				000h	= Convertable			  
 20455                                  ;									  
 20456                                  ;	DB	xx		bios revision level			  
 20457                                  ;				00 for first release, subsequent release  
 20458                                  ;				of code with same model byte and	  
 20459                                  ;				secondary model byte require revison level
 20460                                  ;				to increase by one.			  
 20461                                  ;									  
 20462                                  ;	DB	xx		feature information byte 1		  
 20463                                  ;				X0000000 = 1, bios use DMA channel 3	  
 20464                                  ;					 = 0, DMA channel 3 not used	  
 20465                                  ;									  
 20466                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 20467                                  ;					 = 0, 2nd Interrupt chip not present
 20468                                  ;									  
 20469                                  ;				00X00000 = 1, Real Time Clock present	  
 20470                                  ;					 = 0, Real Time Clock not present 
 20471                                  ;									  
 20472                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 20473                                  ;						called in keyboard interrupt
 20474                                  ;						(Int 09h).		  
 20475                                  ;					 = 0, Keyboard escape sequence not
 20476                                  ;						called. 		  
 20477                                  ;				0000XXXX reserved			  
 20478                                  ;									  
 20479                                  ;	DB	xx		feature information byte 2 - reserved	  
 20480                                  ;									  
 20481                                  ;	DB	xx		feature information byte 2 - reserved	  
 20482                                  ;									  
 20483                                  ;	DB	xx		feature information byte 2 - reserved	  
 20484                                  ;									  
 20485                                  ;	DB	xx		feature information byte 2 - reserved	  
 20486                                  ;									  
 20487                                  
 20488                                  ; 22/03/2019
 20489                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 20490 00000000 ????                    .bios_sd_leng:		resw 1
 20491 00000002 ??                      .bios_sd_modelbyte:	resb 1
 20492                                  .bios_sd_scnd_modelbyte: 
 20493 00000003 ??                      			resb 1
 20494 00000004 ??                      			resb 1
 20495 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 20496 00000006 ????????                			resb 4
 20497                                  endstruc
 20498                                  
 20499                                  ;FeatureByte1	bit map equates
 20500                                  DMAchannel3		equ 10000000b
 20501                                  ScndIntController	equ 01000000b
 20502                                  RealTimeClock		equ 00100000b
 20503                                  KeyEscapeSeq		equ 00010000b
 20504                                  					;;End of Modification
 20505                                  
 20506                                  ; ----------------------------------------------------------------------
 20507                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 20508                                  ; ----------------------------------------------------------------------
 20509                                  ; 22/03/2019 - Retro DOS v4.0
 20510                                  
 20511                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 20512                                  
 20513                                  struc SysInitVars
 20514                                  ; MSDOS 3.3
 20515 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 20516 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 20517 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 20518 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 20519 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 20520 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 20521 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 20522 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 20523 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 20524 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 20525 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 20526 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 20527                                  ; MSDOS 6.0
 20528 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 20529 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 20530 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 20531 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 20532                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 20533 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 20534 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 20535 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 20536 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 20537 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 20538 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 20539 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 20540                                  .size:
 20541                                  endstruc
 20542                                  
 20543                                  ;This is added for more information exchage between DOS, BIOS.
 20544                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 20545                                  
 20546                                  ; 22/03/2019
 20547                                  struc SysInitVars_Ext
 20548 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 20549 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 20550                                  endstruc
 20551                                  
 20552                                  ; 09/06/2018
 20553                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 20554                                  SYSI_DPB    equ	0
 20555                                  SYSI_SFT    equ 4
 20556                                  SYSI_CLOCK  equ 8
 20557                                  SYSI_CON    equ 12
 20558                                  SYSI_MAXSEC equ 16
 20559                                  SYSI_BUF    equ 18
 20560                                  SYSI_CDS    equ 22
 20561                                  SYSI_FCB    equ 26
 20562                                  SYSI_KEEP   equ 30
 20563                                  SYSI_NUMIO  equ	32
 20564                                  SYSI_NCDS   equ	33
 20565                                  SYSI_DEV    equ 34
 20566                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 20567                                  SYSI_ATTR	  equ 38
 20568                                  SYSI_STRAT	  equ 40
 20569                                  SYSI_INTER	  equ 42
 20570                                  SYSI_NAME	  equ 44
 20571                                  SYSI_SPLICE	  equ 52
 20572                                  SYSI_IBMDOS_SIZE  equ 53
 20573                                  SYSI_IFS_DOSCALL@ equ 55
 20574                                  SYSI_IFS	  equ 59
 20575                                  SYSI_BUFFERS	  equ 63
 20576                                  SYSI_BOOT_DRIVE   equ 67
 20577                                  SYSI_DWMOVE	  equ 68
 20578                                  SYSI_EXT_MEM	  equ 69
 20579                                  
 20580                                  ;The SYSI_BUF of SysInitVars points to the following structure
 20581                                  
 20582                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 20583                                  
 20584                                  struc BUFFINF 	; BUFFINFO
 20585 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 20586 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 20587 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 20588 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 20589                                  
 20590 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 20591                                  				; are in HMA
 20592 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 20593                                  				;  used to read/write on disks
 20594 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 20595 00000015 ????                    .UU_EMS_NPA640:		resw 1
 20596 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 20597 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 20598 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 20599 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 20600 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 20601 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 20602 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 20603                                  .size:
 20604                                  endstruc
 20605                                  
 20606                                  ; ----------------------------------------------------------------------
 20607                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 20608                                  ; ----------------------------------------------------------------------
 20609                                  ; 22/03/2019 - Retro DOS v4.0
 20610                                  
 20611                                  ;**	CDS - Current Directory Structure
 20612                                  ;
 20613                                  ; CDS items are used bu the internal routines to store cluster numbers and
 20614                                  ; network identifiers for each logical name.  The ID field is used dually,
 20615                                  ; both as net ID and for a cluster number for local devices. In the case
 20616                                  ; of local devices, the cluster number will be -1 if there is a potential
 20617                                  ; of the disk being changed or if the path must be recracked.
 20618                                  ;
 20619                                  ;	Some pathnames have special preambles, such as
 20620                                  ;
 20621                                  ;		\\machine\sharename\...
 20622                                  ;	For these pathnames we can't allow ".." processing to back us
 20623                                  ;	up into the special front part of the name.  The CURDIR_END field
 20624                                  ;	holds the address of the seperator character which marks
 20625                                  ;	the split between the special preamble and the regular
 20626                                  ;	path list; ".." processing isn't allowed to back us up past
 20627                                  ;	(i.e., before) CURDIR_END
 20628                                  ;	For the root, it points at the leading /. For net
 20629                                  ;	assignments it points at the end (nul) of the initial assignment:
 20630                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 20631                                  ;	  ^		 ^		     ^
 20632                                  
 20633                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 20634                                  TEMPLEN 	EQU	DIRSTRLEN*2
 20635                                  
 20636                                  struc 		curdir_list
 20637                                  ; MSDOS 3.3
 20638 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 20639 00000043 ????                    .cdir_flags	resw	1		; various flags
 20640 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 20641 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 20642 0000004D ????                    .cdir_usr_word	resw	1
 20643 0000004F ????                    .cdir_end	resw	1		; end of assignment
 20644                                  ; MSDOS 6.0
 20645 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 20646 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 20647 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 20648                                  .size:
 20649                                  endstruc
 20650                                  
 20651                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 20652                                  						; ASM87 which doesn't allow
 20653                                  						; Size directive as a macro
 20654                                  						; argument
 20655                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 20656                                  
 20657                                  ;**	Flag values for CURDIR_FLAGS
 20658                                  
 20659                                  ;Flag word masks
 20660                                  curdir_isnet	EQU	1000000000000000B
 20661                                  curdir_isifs	EQU	1000000000000000B
 20662                                  curdir_inuse	EQU	0100000000000000B
 20663                                  curdir_splice	EQU	0010000000000000B
 20664                                  curdir_local	EQU	0001000000000000B
 20665                                  
 20666                                  ; ----------------------------------------------------------------------
 20667                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 20668                                  ; ----------------------------------------------------------------------
 20669                                  ; 25/03/2019 - Retro DOS v4.0
 20670                                  
 20671                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 20672                                  ; 09/04/2024 - Retro DOS v5.0
 20673                                  
 20674                                  ; system file table
 20675                                  
 20676                                  ;**	System File Table SuperStructure
 20677                                  ;
 20678                                  ;	The system file table entries are allocated in contiguous groups.
 20679                                  ;	There may be more than one such groups; the SF "superstructure"
 20680                                  ;	tracks the groups.
 20681                                  
 20682                                  struc	SF
 20683 00000000 ????????                .SFLink:	resd	1
 20684 00000004 ????                    .SFCount:	resw	1		; number of entries
 20685 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 20686                                  .size:
 20687                                  endstruc
 20688                                  
 20689                                  ;**	System file table entry
 20690                                  ;
 20691                                  ;	These are the structures which are at SFTABLE in the SF structure.
 20692                                  
 20693                                  struc	SF_ENTRY
 20694 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 20695                                  					;   if FCB then ref count
 20696 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 20697 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 20698 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 20699                                  					; Bit 15 = 1 if remote file
 20700                                  					;	 = 0 if local file or device
 20701                                  					; Bit 14 = 1 if date/time is not to be
 20702                                  					;   set from clock at CLOSE.  Set by
 20703                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 20704                                  					;   other reseters of the dirty bit
 20705                                  					;   (WRITE)
 20706                                  					; Bit 13 = Pipe bit (reserved)
 20707                                  					;
 20708                                  					; Bits 0-7 (old FCB_devid bits)
 20709                                  					; If remote file or local file, bit
 20710                                  					; 6=0 if dirty Device ID number, bits
 20711                                  					; 0-5 if local file.
 20712                                  					; bit 7=0 for local file, bit 7
 20713                                  					;      =1 for local I/O device
 20714                                  					; If local I/O device, bit 6=0 if EOF (input)
 20715                                  					;		Bit 5=1 if Raw mode
 20716                                  					;		Bit 0=1 if console input device
 20717                                  					;		Bit 1=1 if console output device
 20718                                  					;		Bit 2=1 if null device
 20719                                  					;		Bit 3=1 if clock device
 20720 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 20721                                  					; to device header if local device,
 20722                                  					; points to net device header if
 20723                                  					; remote
 20724 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 20725                                  ;.sf_lstclus:	resw	1 ; *	
 20726 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 20727 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 20728 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 20729 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 20730                                  ;
 20731                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 20732                                  ; ID
 20733                                  ;
 20734 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 20735 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 20736 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 20737                                  ;
 20738                                  ; End of 7 bytes of file-system specific info.
 20739                                  ;
 20740 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 20741                                  					; directory entry.  This is used by
 20742                                  					; close to detect file deleted and
 20743                                  					; disk changed errors.
 20744                                  ; SHARING INFO
 20745 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 20746 0000002F ????                    .sf_UID:	resw	1
 20747 00000031 ????                    .sf_PID:	resw	1
 20748 00000033 ????                    .sf_MFT:	resw	1
 20749 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 20750 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 20751                                  .size:
 20752                                  endstruc
 20753                                  
 20754                                  ; ----------------------------------------------------------------------
 20755                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 20756                                  ; ----------------------------------------------------------------------
 20757                                  ; 11/06/2018 - Retro DOS v3.0
 20758                                  
 20759                                  ;Equates for COUNTRY INFORMATION.
 20760                                  SetCountryInfo		EQU	1	;country info
 20761                                  SetUcase		EQU	2	;uppercase table
 20762                                  SetLcase		EQU	3	;lowercase table (Reserved)
 20763                                  SetUcaseFile		EQU	4	;uppercase file spec table
 20764                                  SetFileList		EQU	5	;valid file character list
 20765                                  SetCollate		EQU	6	;collating sequence
 20766                                  SetDBCS 		EQU	7	;double byte character set
 20767                                  SetALL			EQU	-1	;all the entries
 20768                                  
 20769                                  ;DOS country and code page information table structure.
 20770                                  ;Internally, IBMDOS gives a pointer to this table.
 20771                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 20772                                  ;this structure.
 20773                                  
 20774                                  struc country_cdpg_info ; DOS_country_cdpg_info
 20775 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 20776 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 20777 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 20778 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 20779 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 20780 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 20781                                  
 20782 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 20783 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 20784                                  
 20785 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 20786 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 20787                                  
 20788 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 20789 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 20790                                  
 20791 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 20792 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 20793 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 20794 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 20795 00000067 ????                    .ccDFormat:		resw	1	;date format
 20796 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 20797                                  					;5 byte of (currency symbol+0)
 20798 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 20799 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 20800 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 20801 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 20802 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 20803 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 20804 00000078 ??                      .ccTFormat:		resb	1	;time format
 20805 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 20806 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 20807 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 20808                                  .size:
 20809                                  endstruc
 20810                                  
 20811                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 20812                                  
 20813                                  ; ======================================================================
 20814                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 20815                                  ; ======================================================================
 20816                                  ; 21/03/2019 - Retro DOS v4.0
 20817                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20818                                  
 20819                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 20820                                  ; 21/10/2022
 20821                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 20822                                  ; 22/10/2022
 20823                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 20824                                  ; 09/12/2022
 20825                                  DOSBIOCODESEG equ IOSYSCODESEG
 20826                                  
 20827                                  ; Note: These offset addresses must be chanqed when the code 
 20828                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 20829                                  
 20830                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 20831                                  
 20832                                  ; 09/12/2022
 20833                                  %if 0
 20834                                  
 20835                                  ; 13/05/2019
 20836                                  
 20837                                  ;IsWin386         equ 08CFh
 20838                                  ;V86_Crit_SetFocus equ 08D0h
 20839                                  ; 21/10/2022
 20840                                  IsWin386          equ 08D0h
 20841                                  V86_Crit_SetFocus equ 08D1h 
 20842                                  
 20843                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 20844                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20845                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 20846                                  
 20847                                  ;SysinitPresent	  equ 08FCh
 20848                                  ; 21/10/2022
 20849                                  SysinitPresent	  equ 08FDh
 20850                                  
 20851                                  inHMA		  equ 000Dh
 20852                                  xms		  equ 000Eh
 20853                                  ;FreeHMAPtr	  equ 08F6h
 20854                                  ;multrk_flag	  equ 0533h
 20855                                  ;ec35_flag	  equ 0535h
 20856                                  ;EOT		  equ 012Eh
 20857                                  ; 21/10/2022
 20858                                  FreeHMAPtr	  equ 08F7h
 20859                                  multrk_flag	  equ 052Fh
 20860                                  ec35_flag	  equ 0531h
 20861                                  EOT		  equ 012Ch
 20862                                  
 20863                                  ;NextStack	  equ 08BFh
 20864                                  ;IT_StackLoc	  equ 08C5h
 20865                                  ;IT_StackSize	  equ 08C9h
 20866                                  ; 21/10/2022
 20867                                  NextStack	  equ 08C0h
 20868                                  IT_StackLoc	  equ 08C6h
 20869                                  IT_StackSize	  equ 08CAh
 20870                                  
 20871                                  ;MoveDOSIntoHMA	  equ 08F8h
 20872                                  ; 21/10/2022
 20873                                  MoveDOSIntoHMA	  equ 08F9h
 20874                                  
 20875                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 20876                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 20877                                  ; 21/10/2022
 20878                                  INT19SEM equ 0640h ; (iosys5.txt)
 20879                                  I19_LST  equ 0641h ; (iosys5.txt)
 20880                                  
 20881                                  %endif
 20882                                  
 20883                                  ; 09/12/2022
 20884                                  seg_reinit equ _seg_reinit
 20885                                  ec35_flag  equ ec35flag
 20886                                  INT19SEM   equ int19sem
 20887                                  I19_LST    equ i19_lst
 20888                                  
 20889                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 20890                                  INT19OLD08 equ I19_LST+6
 20891                                  INT19OLD09 equ I19_LST+11
 20892                                  INT19OLD0A equ I19_LST+16
 20893                                  INT19OLD0B equ I19_LST+21
 20894                                  INT19OLD0C equ I19_LST+26
 20895                                  INT19OLD0D equ I19_LST+31
 20896                                  INT19OLD0E equ I19_LST+36
 20897                                  INT19OLD70 equ I19_LST+41
 20898                                  INT19OLD72 equ I19_LST+46
 20899                                  INT19OLD73 equ I19_LST+51
 20900                                  INT19OLD74 equ I19_LST+56
 20901                                  INT19OLD76 equ I19_LST+61
 20902                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 20903                                  
 20904                                  ; 09/12/2022
 20905                                  %if 0
 20906                                  
 20907                                  ;keyrd_func	equ 04E9h
 20908                                  ;keysts_func	equ 04EAh
 20909                                  ;t_switch	equ 04F6h
 20910                                  ; 21/10/2022
 20911                                  keyrd_func	equ 04E5h
 20912                                  keysts_func	equ 04E6h
 20913                                  t_switch	equ 04F2h
 20914                                  
 20915                                  ; 22/10/2022
 20916                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 20917                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 20918                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 20919                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 20920                                  
 20921                                  %endif
 20922                                  
 20923                                  ; 09/12/2022
 20924                                  BCODESTART	equ BIOSDATAWORD
 20925                                  RE_INIT		equ re_init
 20926                                  
 20927                                  ; ----------------------------------------------------------------------
 20928                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 20929                                  ; ----------------------------------------------------------------------
 20930                                  ; 15/04/2019 - Retro DOS v4.0
 20931                                  
 20932                                  CONFIG_BEGIN        equ  '['
 20933                                  CONFIG_BREAK        equ  'C'
 20934                                  CONFIG_BUFFERS      equ  'B'
 20935                                  CONFIG_COMMENT      equ  'Y'
 20936                                  CONFIG_COUNTRY      equ  'Q'
 20937                                  CONFIG_DEVICE       equ  'D'
 20938                                  CONFIG_DEVICEHIGH   equ  'U'
 20939                                  CONFIG_DOS          equ  'H'
 20940                                  CONFIG_DRIVPARM     equ  'P'
 20941                                  CONFIG_FCBS         equ  'X'
 20942                                  CONFIG_FILES        equ  'F'
 20943                                  CONFIG_INCLUDE      equ  'J'
 20944                                  CONFIG_INSTALL      equ  'I'
 20945                                  CONFIG_INSTALLHIGH  equ  'W'
 20946                                  CONFIG_LASTDRIVE    equ  'L'
 20947                                  CONFIG_MENUCOLOR    equ  'R'
 20948                                  CONFIG_MENUDEFAULT  equ  'A'
 20949                                  CONFIG_MENUITEM     equ  'E'
 20950                                  CONFIG_MULTITRACK   equ  'M'
 20951                                  CONFIG_NUMLOCK      equ  'N'
 20952                                  CONFIG_REM          equ  '0'
 20953                                  CONFIG_SEMICOLON    equ  ';'
 20954                                  CONFIG_SET          equ  'V'
 20955                                  CONFIG_SHELL        equ  'S'
 20956                                  CONFIG_STACKS       equ  'K'
 20957                                  CONFIG_SUBMENU      equ  'O'
 20958                                  CONFIG_SWITCHES     equ  '1'
 20959                                  
 20960                                  CONFIG_UNKNOWN      equ  'Z'
 20961                                  
 20962                                  ; 18/03/2025 - MiniDOS v1.0
 20963                                  ; 13/05/2024 - Retro DOS v5.0 (PCDOS 71 IBMBIO.COM)
 20964                                  ;CONFIG_DOSDATA      equ  'T'
 20965                                  
 20966                                  CONFIG_OPTION_QUERY equ 80h
 20967                                  
 20968                                  ; ----------------------------------------------------------------------
 20969                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 20970                                  ; ----------------------------------------------------------------------
 20971                                  ; 21/03/2019 - Retro DOS v4.0
 20972                                  
 20973                                  true	equ	0FFFFh
 20974                                  false	equ	0
 20975                                  cr	equ	13
 20976                                  lf	equ	10
 20977                                  tab	equ	9
 20978                                  
 20979                                  multMULT	   equ	4Ah
 20980                                  multMULTGETHMAPTR  equ	1
 20981                                  multMULTALLOCHMA   equ	2
 20982                                  
 20983                                  ;NOEXEC    equ	FALSE
 20984                                  
 20985                                  stacksw    equ	true	;include switchable hardware stacks
 20986                                  mycds_size equ	88	;size of curdir_list. if it is not
 20987                                  			;the same, then will generate compile error.
 20988                                  
 20989                                  entrysize   equ     8
 20990                                  
 20991                                  mincount    equ     8
 20992                                  defaultcount equ    9
 20993                                  maxcount    equ     64
 20994                                  
 20995                                  minsize     equ     32
 20996                                  defaultsize equ     128
 20997                                  maxsize     equ     512
 20998                                  
 20999                                  ;%define allocbyte  byte [es:bp+0]
 21000                                  ;%define intlevel   byte [es:bp+1]
 21001                                  ;%define savedsp    word [es:bp+2]
 21002                                  ;%define savedss    word [es:bp+4]
 21003                                  ;%define newsp	    word [es:bp+6]
 21004                                  
 21005                                  allocbyte   equ     0
 21006                                  intlevel    equ     1
 21007                                  savedsp     equ     2
 21008                                  savedss     equ     4
 21009                                  newsp       equ     6
 21010                                  
 21011                                  free	    equ     0
 21012                                  allocated   equ     1
 21013                                  overflowed  equ     2
 21014                                  clobbered   equ     3
 21015                                  
 21016                                  ;---------------------------------------
 21017                                  ; external variable defined in ibmbio module for multi-track
 21018                                  
 21019                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 21020                                  			  ; it on after handling config.sys file as a
 21021                                  			  ; default value,if multrk_flag = multrk_off1.
 21022                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 21023                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 21024                                  
 21025                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 21026                                  
 21027                                  SYSINIT$:
 21028                                  	;IF	STACKSW 
 21029                                  	; include MSSTACK.INC	;Main stack program and data definitions
 21030                                  	; include STKMES.INC	;Fatal stack error message
 21031                                  	;   public Endstackcode
 21032                                  ;Endstackcode	label byte
 21033                                  	;ENDIF
 21034                                  
 21035                                  ; 05/07/2018
 21036                                  ; ----------------------------------------------------------------------
 21037                                  ; 04/06/2018 - Retro DOS v3.0
 21038                                  
 21039                                  ; ----------------------------------------------------------------------
 21040                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 21041                                  ; ----------------------------------------------------------------------
 21042                                  
 21043                                  ;	MSStack.inc
 21044                                  ;
 21045                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 21046                                  ;	should follow the standard Interrupt Sharing Scheme which has
 21047                                  ;	a standard header structure.
 21048                                  ;	Fyi, the following shows the relations between
 21049                                  ;	the interrupt vector and interrupt level.
 21050                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 21051                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 21052                                  ;	MSSTACK module modifies the following interrupt vectors
 21053                                  ;	to meet the standard Interrupt Sharing standard;
 21054                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 21055                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 21056                                  ;	should be initialized to indicat whether this interrupt handler is
 21057                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 21058                                  ;	program header is initialized in STKINIT.INC module.
 21059                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 21060                                  ;
 21061                                  
 21062                                  ;  User specifies the number of stack elements - default = 9
 21063                                  ;						 minimum = 8
 21064                                  ;						 maximum = 64
 21065                                  ;
 21066                                  ;  Intercepts Asynchronous Hardware Interrupts only
 21067                                  ;
 21068                                  ;  Picks a stack from pool of stacks and switches to it
 21069                                  ;
 21070                                  ;  Calls the previously saved interrupt vector after pushing flags
 21071                                  ;
 21072                                  ;  On return, returns the stack to the stack pool
 21073                                  ;
 21074                                  
 21075                                  ; This is a modification of STACKS:
 21076                                  ; 1. To fix a bug which was causing the program to take up too much space.
 21077                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 21078                                  ;    . Clobbers the stack that got too big instead of innocent stack
 21079                                  ;    . Allows system to work if the only stack that got too big was the most
 21080                                  ;      deeply nested one
 21081                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 21082                                  ; 4. Does not intercept any interrupts on a PCjr.
 21083                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 21084                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 21085                                  
 21086                                  		;EVEN
 21087                                  ;align 2
 21088                                  		; 21/10/2022
 21089                                  
 21090 00000000 0000                    		dw	0	; spare field but leave these in order
 21091 00000002 0000                    stackcount:	dw	0
 21092 00000004 0000                    stackat: 	dw	0
 21093 00000006 0000                    stacksize:	dw	0
 21094 00000008 0000                    stacks:		dw	0
 21095 0000000A 0000                    		dw	0
 21096                                  
 21097 0000000C [0800]                  firstentry:	dw	stacks
 21098 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21099 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21100                                  
 21101                                  ;***********************************************************************
 21102                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 21103                                  
 21104                                  ; ----------------------------------------------------------------------
 21105                                  
 21106 00000012 00000000                old02:	dd	0
 21107                                  
 21108                                  int02:
 21109                                  
 21110                                  ; *********************************************************************
 21111                                  ;
 21112                                  ; this is special support for the pc convertible / nmi handler
 21113                                  ;
 21114                                  ;	on the pc convertible, there is a situation where an nmi can be 
 21115                                  ;	caused by using the "out" instructions to certain ports. when this
 21116                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 21117                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 21118                                  ;	includes other type of interrupts (hardware and software), and
 21119                                  ;	also includes other type of nmi's. when any nmi has occured,
 21120                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 21121                                  ;	the software takes specific steps to allow further interrupting.
 21122                                  ;
 21123                                  ;	for pc convertible, the situation where the nmi is generated by the
 21124                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 21125                                  ;	otherwords, it is actually a "restartable exception". in this
 21126                                  ;	case, the software handler must be able to get to the stack in
 21127                                  ;	order to figure out what instruction caused the problem, where
 21128                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 21129                                  ;	we will not switch stacks in this situation. this situation is
 21130                                  ;	detected by interrogating port 62h, and checking for a bit value
 21131                                  ;	of 80h. if set, *****do not switch stacks*****.
 21132                                  ;
 21133                                  ; *********************************************************************
 21134                                  
 21135 00000016 50                      	push	ax
 21136 00000017 06                      	push	es
 21137 00000018 B800F0                  	mov	ax,0F000h
 21138 0000001B 8EC0                    	mov	es,ax
 21139                                  	; 02/11/2022
 21140 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 21141 00000023 07                      	pop	es
 21142 00000024 750C                    	jne	short normal02
 21143                                  
 21144 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 21145                                  				; 0-3: values of DIP switches
 21146                                  				; 5: 1=Timer 2 channel out
 21147                                  				; 6: 1=I/O channel check
 21148                                  				; 7: 1=RAM parity check error occurred.
 21149 00000028 A880                    	test	al,80h
 21150 0000002A 7406                    	jz	short normal02
 21151                                  special02:
 21152 0000002C 58                      	pop	ax
 21153 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 21154                                  normal02:
 21155 00000032 58                      	pop	ax
 21156 00000033 E81101                  	call	do_int_stacks
 21157 00000036 [1200]                  	dw	old02
 21158                                  
 21159                                  ; ----------------------------------------------------------------------
 21160                                  
 21161 00000038 00000000                old08:	dd	0
 21162                                  
 21163                                  int08:
 21164 0000003C E80801                  	call	do_int_stacks
 21165 0000003F [3800]                  	dw	old08
 21166                                  
 21167                                  ; ----------------------------------------------------------------------
 21168                                  
 21169 00000041 00000000                old09:	dd	0
 21170                                  
 21171                                  int09:
 21172                                  
 21173                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 21174                                  ; as its first instruction for compatibility reasons
 21175                                  
 21176 00000045 EB02                    	jmp	short keyboard_lbl
 21177 00000047 90                      	nop
 21178 00000048 00                      	db	0
 21179                                  
 21180                                  keyboard_lbl:
 21181 00000049 E8FB00                  	call	do_int_stacks
 21182 0000004C [4100]                  	dw	old09
 21183                                  
 21184                                  ; ----------------------------------------------------------------------
 21185                                  
 21186 0000004E 00000000                old70:	dd	0
 21187                                  
 21188                                  int70:
 21189 00000052 E8F200                  	call	do_int_stacks
 21190 00000055 [4E00]                  	dw	old70
 21191                                  
 21192                                  ; ----------------------------------------------------------------------
 21193                                  
 21194                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 21195                                  ;public	int&a
 21196                                  ;public	old&a
 21197                                  ;public	firstflag&a
 21198                                  ;int&a	proc	far
 21199                                  ;	jmp	short entry_int&a&_stk
 21200                                  ;old&a	dd	  0		;forward pointer
 21201                                  ;	dw	  424bh 	;compatible signature for int. sharing
 21202                                  ;firstflag&a db   0		;the firstly hooked.
 21203                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 21204                                  ;	db	7 dup (0)	;reserved for future.
 21205                                  ;entry_int&a&_stk:
 21206                                  ;	call	do_int_stacks
 21207                                  ;	dw	old&a
 21208                                  ;intret_&a:
 21209                                  ;	iret
 21210                                  ;int&a	endp
 21211                                  ;	endm
 21212                                  
 21213                                  ; ----------------------------------------------------------------------
 21214                                  
 21215                                  int0A:
 21216 00000057 EB10                    	jmp	short entry_int0A_stk
 21217 00000059 00000000                old0A:	dd	0	
 21218 0000005D 4B42                    	dw	424Bh
 21219                                  firstflag0A:
 21220 0000005F 00                      	db	0
 21221 00000060 EB0C                    	jmp	short intret_0A
 21222 00000062 00<rep 7h>              	times	7 db 0
 21223                                  
 21224                                  entry_int0A_stk:
 21225 00000069 E8DB00                  	call	do_int_stacks
 21226 0000006C [5900]                  	dw	old0A
 21227                                  intret_0A:
 21228 0000006E CF                      	iret
 21229                                  
 21230                                  ; ----------------------------------------------------------------------
 21231                                  
 21232                                  int0B:
 21233 0000006F EB10                    	jmp	short entry_int0B_stk
 21234 00000071 00000000                old0B:	dd	0	
 21235 00000075 4B42                    	dw	424Bh
 21236                                  firstflag0B:
 21237 00000077 00                      	db	0
 21238 00000078 EB0C                    	jmp	short intret_0B
 21239 0000007A 00<rep 7h>              	times	7 db 0
 21240                                  
 21241                                  entry_int0B_stk:
 21242 00000081 E8C300                  	call	do_int_stacks
 21243 00000084 [7100]                  	dw	old0B
 21244                                  intret_0B:
 21245 00000086 CF                      	iret
 21246                                  
 21247                                  ; ----------------------------------------------------------------------
 21248                                  
 21249                                  int0C:
 21250 00000087 EB10                    	jmp	short entry_int0C_stk
 21251 00000089 00000000                old0C:	dd	0	
 21252 0000008D 4B42                    	dw	424Bh
 21253                                  firstflag0C:
 21254 0000008F 00                      	db	0
 21255 00000090 EB0C                    	jmp	short intret_0C
 21256 00000092 00<rep 7h>              	times	7 db 0
 21257                                  
 21258                                  entry_int0C_stk:
 21259 00000099 E8AB00                  	call	do_int_stacks
 21260 0000009C [8900]                  	dw	old0C
 21261                                  intret_0C:
 21262 0000009E CF                      	iret
 21263                                  
 21264                                  ; ----------------------------------------------------------------------
 21265                                  
 21266                                  int0D:
 21267 0000009F EB10                    	jmp	short entry_int0D_stk
 21268 000000A1 00000000                old0D:	dd	0	
 21269 000000A5 4B42                    	dw	424Bh
 21270                                  firstflag0D:
 21271 000000A7 00                      	db	0
 21272 000000A8 EB0C                    	jmp	short intret_0D
 21273 000000AA 00<rep 7h>              	times	7 db 0
 21274                                  
 21275                                  entry_int0D_stk:
 21276 000000B1 E89300                  	call	do_int_stacks
 21277 000000B4 [A100]                  	dw	old0D
 21278                                  intret_0D:
 21279 000000B6 CF                      	iret
 21280                                  
 21281                                  ; ----------------------------------------------------------------------
 21282                                  
 21283                                  int0E:
 21284 000000B7 EB10                    	jmp	short entry_int0E_stk
 21285 000000B9 00000000                old0E:	dd	0	
 21286 000000BD 4B42                    	dw	424Bh
 21287                                  firstflag0E:
 21288 000000BF 00                      	db	0
 21289 000000C0 EB0C                    	jmp	short intret_0E
 21290 000000C2 00<rep 7h>              	times	7 db 0
 21291                                  
 21292                                  entry_int0E_stk:
 21293 000000C9 E87B00                  	call	do_int_stacks
 21294 000000CC [B900]                  	dw	old0E
 21295                                  intret_0E:
 21296 000000CE CF                      	iret
 21297                                  
 21298                                  ; ----------------------------------------------------------------------
 21299                                  
 21300                                  int72:
 21301 000000CF EB10                    	jmp	short entry_int72_stk
 21302 000000D1 00000000                old72:	dd	0	
 21303 000000D5 4B42                    	dw	424Bh
 21304                                  firstflag72:
 21305 000000D7 00                      	db	0
 21306 000000D8 EB0C                    	jmp	short intret_72
 21307 000000DA 00<rep 7h>              	times	7 db 0
 21308                                  
 21309                                  entry_int72_stk:
 21310 000000E1 E86300                  	call	do_int_stacks
 21311 000000E4 [D100]                  	dw	old72
 21312                                  intret_72:
 21313 000000E6 CF                      	iret
 21314                                  
 21315                                  ; ----------------------------------------------------------------------
 21316                                  
 21317                                  int73:
 21318 000000E7 EB10                    	jmp	short entry_int73_stk
 21319 000000E9 00000000                old73:	dd	0	
 21320 000000ED 4B42                    	dw	424Bh
 21321                                  firstflag73:
 21322 000000EF 00                      	db	0
 21323 000000F0 EB0C                    	jmp	short intret_73
 21324 000000F2 00<rep 7h>              	times	7 db 0
 21325                                  
 21326                                  entry_int73_stk:
 21327 000000F9 E84B00                  	call	do_int_stacks
 21328 000000FC [E900]                  	dw	old73
 21329                                  intret_73:
 21330 000000FE CF                      	iret
 21331                                  
 21332                                  ; ----------------------------------------------------------------------
 21333                                  
 21334                                  int74:
 21335 000000FF EB10                    	jmp	short entry_int74_stk
 21336 00000101 00000000                old74:	dd	0	
 21337 00000105 4B42                    	dw	424Bh
 21338                                  firstflag74:
 21339 00000107 00                      	db	0
 21340 00000108 EB0C                    	jmp	short intret_74
 21341 0000010A 00<rep 7h>              	times	7 db 0
 21342                                  
 21343                                  entry_int74_stk:
 21344 00000111 E83300                  	call	do_int_stacks
 21345 00000114 [0101]                  	dw	old74
 21346                                  intret_74:
 21347 00000116 CF                      	iret
 21348                                  
 21349                                  ; ----------------------------------------------------------------------
 21350                                  
 21351                                  int76:
 21352 00000117 EB10                    	jmp	short entry_int76_stk
 21353 00000119 00000000                old76:	dd	0	
 21354 0000011D 4B42                    	dw	424Bh
 21355                                  firstflag76:
 21356 0000011F 00                      	db	0
 21357 00000120 EB0C                    	jmp	short intret_76
 21358 00000122 00<rep 7h>              	times	7 db 0
 21359                                  
 21360                                  entry_int76_stk:
 21361 00000129 E81B00                  	call	do_int_stacks
 21362 0000012C [1901]                  	dw	old76
 21363                                  intret_76:
 21364 0000012E CF                      	iret
 21365                                  
 21366                                  ; ----------------------------------------------------------------------
 21367                                  
 21368                                  int77:
 21369 0000012F EB10                    	jmp	short entry_int77_stk
 21370 00000131 00000000                old77:	dd	0	
 21371 00000135 4B42                    	dw	424Bh
 21372                                  firstflag77:
 21373 00000137 00                      	db	0
 21374 00000138 EB0C                    	jmp	short intret_77
 21375 0000013A 00<rep 7h>              	times	7 db 0
 21376                                  
 21377                                  entry_int77_stk:
 21378 00000141 E80300                  	call	do_int_stacks
 21379 00000144 [3101]                  	dw	old77
 21380                                  intret_77:
 21381 00000146 CF                      	iret
 21382                                  
 21383                                  ; ----------------------------------------------------------------------
 21384                                  
 21385                                  ;********************************************************************
 21386                                  ;common routines
 21387                                  ;********************************************************************
 21388                                  
 21389                                  ; do interrupt stack switching. the fake return address holds
 21390                                  ; a pointer to the far-pointer of the actual interrupt
 21391                                  ; service routine
 21392                                  
 21393                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 21394                                  ; 21/03/2019 - Retro DOS v4.0
 21395                                  
 21396                                  ;allocbyte   equ 0
 21397                                  ;intlevel    equ 1
 21398                                  ;savedsp     equ 2
 21399                                  ;savedss     equ 4
 21400                                  ;newsp       equ 6
 21401                                  
 21402                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 21403                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 21404                                  
 21405                                  do_int_stacks:
 21406 00000147 50                      	push	ax
 21407 00000148 55                      	push	bp
 21408 00000149 06                      	push	es
 21409 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 21410 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 21411 00000154 B001                    	mov	al,allocated ; 1
 21412                                  	; 21/10/2022
 21413                                  	;xchg	[es:bp+allocbyte],al 
 21414                                  	; 11/12/2022
 21415 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 21416 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 21417 0000015C 7551                    	jne	short notfree02
 21418                                  
 21419 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 21420                                  
 21421                                  found02:
 21422 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 21423 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 21424                                  
 21425 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 21426                                  
 21427 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 21428                                  	; 21/10/2022
 21429                                  	;mov	bp,[es:bp+6]
 21430                                  	; 11/12/2022
 21431                                  	;cmp	[es:bp+0],ax	
 21432 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 21433 00000176 7544                    	jne	short foundbad02
 21434                                  
 21435                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 21436 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 21437 0000017A 8EC5                    	mov	es,bp
 21438 0000017C 89E5                    	mov	bp,sp
 21439 0000017E 8B6E06                  	mov	bp,[bp+6]
 21440 00000181 8ED0                    	mov	ss,ax
 21441 00000183 8CC4                    	mov	sp,es
 21442 00000185 8EC0                    	mov	es,ax
 21443 00000187 2E8B6E00                	mov	bp,[cs:bp]
 21444                                  
 21445                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 21446                                  	;push    bp
 21447                                  	;mov     bp,sp
 21448                                  	;mov     ax,[bp+8]
 21449                                  	;pop     bp
 21450                                  	;push    es
 21451                                  	;pop     ss
 21452                                  	;mov     sp,bp
 21453                                  	;mov     bp,ax
 21454                                  	; 11/12/2022
 21455                                  	;;mov	bp,[cs:bp+0]	
 21456                                  	;mov	bp,[cs:bp]	
 21457                                  
 21458 0000018B 9C                      	pushf				; go execute the real interrupt handler
 21459                                  	; 11/12/2022
 21460 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 21461                                  	; 21/10/2022
 21462                                  	;call	far [cs:bp+0]
 21463                                  
 21464 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 21465                                  	; 11/12/2022
 21466 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 21467                                  	; 21/10/2022
 21468                                  	;mov	bp,[es:bp+0]
 21469 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 21470 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 21471                                  
 21472                                  	; 11/12/2022
 21473                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 21474                                  	; 21/10/2022
 21475 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 21476 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 21477                                  
 21478 000001A8 07                      	pop	es
 21479 000001A9 5D                      	pop	bp			; saved on entry
 21480 000001AA 58                      	pop	ax			; saved on entry
 21481 000001AB 83C402                  	add	sp,2
 21482 000001AE CF                      	iret				; done with this interrupt
 21483                                  
 21484                                  notfree02:
 21485 000001AF 3C01                    	cmp	al,allocated		; error flag
 21486 000001B1 7404                    	je	short findnext02	;  no, continue
 21487                                  	; 11/12/2022
 21488                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 21489                                  	; 21/10/2022
 21490 000001B3 26864600                	xchg	[es:bp],al
 21491                                  
 21492                                  findnext02:
 21493 000001B7 E81200                  	call	longpath
 21494 000001BA EBA8                    	jmp	short found02
 21495                                  
 21496                                  foundbad02:
 21497 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21498 000001C1 72F4                    	jc	short findnext02
 21499 000001C3 89C5                    	mov	bp,ax			; flag this entry
 21500                                  	; 11/12/2022
 21501                                  	;mov	byte [es:bp+allocbyte],clobbered
 21502                                  	; 21/10/2022
 21503 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 21504 000001CA EBEB                    	jmp	short findnext02	; keep looking
 21505                                  
 21506                                  ; ----------------------------------------------------------------------
 21507                                  
 21508                                  ; Common routines
 21509                                  
 21510                                  longpath:
 21511                                  	; 21/03/2019
 21512 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 21513                                  lploopp:
 21514                                  	; 11/12/2022
 21515                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 21516                                  	; 21/10/2022
 21517 000001D1 26807E0000              	cmp	byte [es:bp],free
 21518 000001D6 7512                    	jne	short inuse		;  no, try next one
 21519                                  
 21520 000001D8 B001                    	mov	al,allocated
 21521                                  	; 11/12/2022
 21522                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 21523                                  	; 21/10/2022
 21524 000001DA 26864600                	xchg	[es:bp],al
 21525 000001DE 3C00                    	cmp	al,free 		; is it still free?
 21526 000001E0 7414                    	je	short found		;  yes, go use it
 21527                                  
 21528 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 21529 000001E4 7404                    	je	short inuse		;  no, check the next one
 21530                                  
 21531                                  	; 11/12/2022
 21532                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 21533                                  	; 21/10/2022
 21534 000001E6 26884600                	mov	[es:bp],al
 21535                                  inuse:
 21536 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21537 000001EF 7406                    	je	short fatal
 21538 000001F1 83ED08                  	sub	bp,entrysize
 21539 000001F4 EBDB                    	jmp	short lploopp
 21540                                  found:
 21541 000001F6 C3                      	retn
 21542                                  fatal:
 21543 000001F7 1E                      	push	ds
 21544 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 21545 000001FB 8ED8                    	mov	ds,ax
 21546 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21547 00000202 1F                      	pop	ds
 21548 00000203 7504                    	jne	short skip_nmis
 21549                                  
 21550 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 21551 00000207 E672                    	out	72h,al
 21552                                  
 21553                                  skip_nmis:
 21554 00000209 FA                      	cli				; disable and mask
 21555 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 21556 0000020C E621                    	out	021h,al
 21557 0000020E E6A1                    	out	0A1h,al
 21558                                  
 21559 00000210 8CCE                    	mov	si,cs
 21560 00000212 8EDE                    	mov	ds,si
 21561 00000214 BE[3B02]                	mov	si,fatal_msg
 21562                                  ;SR;
 21563                                  ;   We set all foci to this VM to issue the stack failure message
 21564                                  ;
 21565 00000217 50                      	push	ax
 21566 00000218 1E                      	push	ds
 21567                                  	;;mov	ax,Bios_Data ; 0070h
 21568                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 21569                                  	; 21/10/2022
 21570 00000219 B87000                  	mov	ax,DOSBIODATASEG
 21571 0000021C 8ED8                    	mov	ds,ax
 21572                                  
 21573                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 21574 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 21575 00000223 1F                      	pop	ds
 21576 00000224 58                      	pop	ax
 21577 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 21578                                  
 21579                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 21580                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 21581                                  	; 21/10/2022
 21582 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 21583                                  ;
 21584                                  ;SR; We do not bother about the returned status of this call. 
 21585                                  ;
 21586                                  fatal_loop:
 21587 0000022C AC                      	lodsb
 21588 0000022D 3C24                    	cmp	al,'$'
 21589 0000022F 7408                    	je	short fatal_done
 21590                                  
 21591 00000231 B307                    	mov	bl,7
 21592 00000233 B40E                    	mov	ah,14
 21593 00000235 CD10                    	int	10h			; whoops, this enables ints
 21594 00000237 EBF3                    	jmp	short fatal_loop
 21595                                  
 21596                                  fatal_done:
 21597 00000239 EBFE                    	jmp	short fatal_done
 21598                                  
 21599                                  
 21600                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 21601                                  ; ----------------------------------------------------------------------
 21602                                  ;	include msbio.cl5		; fatal stack error message
 21603                                  
 21604                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 21605                                  
 21606                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 21607                                  ; ----------------------------------------------------------------------
 21608                                  ; 04/06/2018 - Retro DOS v3.0
 21609                                  
 21610                                  fatal_msg:
 21611 0000023B 0D0A                    	db	0Dh,0Ah
 21612 0000023D 070D0A                  	db	7,0Dh,0Ah
 21613 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 21613 00000249 737461636B206F7665-
 21613 00000252 72666C6F770D0A     
 21614 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 21614 00000262 6C7465640D0A24     
 21615                                  
 21616                                  endstackcode:
 21617                                  
 21618                                  ; ----------------------------------------------------------------------
 21619                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 21620                                  ; ----------------------------------------------------------------------
 21621                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 21622                                  
 21623                                  ; 22/03/2019 - Retro DOS v4.0
 21624                                  
 21625                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 21626                                  
 21627                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 21628                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 21629                                  
 21630                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21631                                  ; ----------------------------------------------------------------------
 21632                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 21633                                  
 21634                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 21635                                  
 21636                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21637                                  ; ----------------------------------------------------------------------
 21638                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 21639                                  
 21640                                  SYSINIT:	
 21641 00000269 E9A001                          JMP	GOINIT
 21642                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 21643                                  
 21644                                  ; ----------------------------------------------------------------------
 21645                                  
 21646                                  struc DDHighInfo
 21647 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 21648 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 21649 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 21650                                  endstruc
 21651                                  
 21652                                  ; 22/03/2019 - Retro DOS v4.0
 21653                                  
 21654 0000026C 00                      runhigh: db	0
 21655                                  
 21656                                  ; 02/11/2022
 21657                                  ;align 4
 21658                                  
 21659                                  DOSINFO: 
 21660 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 21661                                  ;MSDOS:
 21662                                  dos_temp_location: ; dword ; MSDOS 6.0
 21663                                  dosinit:		; MSDOS 6.0
 21664 00000271 0000                    	dw	0
 21665                                  
 21666                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21667                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 21668                                  ;	dw	0
 21669                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 21670                                  
 21671                                  CURRENT_DOS_LOCATION:
 21672 00000273 0000                    	dw	0
 21673                                  
 21674                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 21675                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 21676                                  
 21677                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21678                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 21679                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 21680                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21681                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 21682                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 21683                                  
 21684                                  DEVICE_LIST:
 21685 00000275 00000000                	dd	0
 21686                                  
 21687                                  ; 04/06/2018 - Retro DOS v3.0
 21688                                  ; 28/03/2018
 21689                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 21690                                  ;
 21691                                  sysi_country:	
 21692 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 21693                                  
 21694                                  ; MSDOS 6.0
 21695 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 21696                                  
 21697                                  ;lo_doscod_size: dw	0	; dos code size when in low mem
 21698                                  ;hi_doscod_size: dw	0	; dos code size when in HMA
 21699                                  ; 08/03/2025 (MiniDOS)
 21700 00000281 0000                    dos_code_size:	dw	0
 21701                                  
 21702 00000283 0000                    def_php:	dw	0
 21703                                  
 21704                                  ; M022--
 21705                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 21706                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 21707                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 21708                                  ;  the new home.
 21709                                  
 21710                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 21711                                  ; 21/10/2022
 21712                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 21713                                  
 21714                                  ; 22/10/2022
 21715                                  seg_reinit_ptr:	; label dword
 21716 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 21717                                  temp_bcode_seg:
 21718                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 21719                                  		; 22/10/2022
 21720 00000287 0203                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 21721                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21722                                  fake_floppy_drv:
 21723 00000289 00                      		db	0	; set to 1 if this machine
 21724                                  				; does not have any floppies!!!
 21725                                  
 21726                                  ; Internal Stack Parameters
 21727                                  
 21728 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 21729 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 21730 0000028E 00000000                stack_addr:	dd	0
 21731                                  
 21732                                  ; 05/06/2018 - Retro DOS v3.0
 21733                                  
 21734                                  ; various default values
 21735                                  
 21736 00000292 0100                    MEMORY_SIZE:	dw	1
 21737                                  
 21738                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 21739                                  
 21740 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 21741 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 21742 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 21743 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 21744 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 21745                                  
 21746 0000029D 08                      FILES:	db	8	; enough files for pipe
 21747 0000029E 04                      FCBS:	db	4	; performance for recycling
 21748 0000029F 00                      KEEP:	db	0	; keep original set
 21749 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 21750                                  
 21751                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 21752                                  ;;CONFBOT: dw	0
 21753                                  ;;ALLOCLIM: dw	0
 21754                                  ;CONFBOT: ; 02/11/2022
 21755                                  ;top_of_cdss: dw 0
 21756                                  
 21757                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 21758                                  ; (SYSINIT:02A3h)
 21759 000002A1 0000                    CONFBOT: dw	0
 21760 000002A3 0000                    ALLOCLIM: dw	0
 21761 000002A5 0000                    top_of_cdss: dw 0
 21762                                  
 21763                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 21764                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 21765                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 21766                                  
 21767 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 21768                                  
 21769                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 21770                                  %if 0
 21771                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21772                                  ; (SYSINIT:02A9h)
 21773                                  
 21774                                  command_line:
 21775                                  	db	2,0
 21776                                  	db	'P'
 21777                                  	db	0
 21778                                  	times	124 db 0 ; db 124 dup(0)
 21779                                  
 21780                                  %endif
 21781                                  
 21782                                  ; (SYSINIT:0329h)
 21783 000002AB 00                      ZERO:	db	0
 21784 000002AC 00                      sepchr:	db	0
 21785 000002AD 0000                    linecount: dw	0			; line count in config.sys
 21786 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 21787 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 21788                                  
 21789 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 21790 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 21791                                  
 21792 000002BB 0000                    buf_prev_off:	dw	0
 21793                                  
 21794                                          ;IF      NOT NOEXEC
 21795                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 21796                                          ;ENDIF
 21797                                  
 21798                                  ; 29/12/2023
 21799                                  ; 01/05/2018
 21800                                  COMEXE:
 21801 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 21802 000002BF [8A46]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 21803 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21804                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21805 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 21806 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21807 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 21808 000002C9 0000                    		dw	0
 21809                                  
 21810                                  ; variables for install= command.
 21811                                  
 21812 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 21813                                  					;  indicating the pass number
 21814                                  					; 0 - do scan for DOS=HIGH/LOW
 21815                                  					; 1 - load device drivers
 21816                                  					; 2 - was to load IFS
 21817                                  					;      now it is unused
 21818                                  					; 3 - do install=
 21819                                  					; >3 - nop
 21820 000002CC 0000                    install_flag:	dw	0
 21821                                  
 21822                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 21823                                  has_installed	equ	00000010b	; sysinit_base installed.
 21824                                  
 21825 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 21826 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 21827 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 21828 000002D8 0000                    checksum:	dw	0		; used by sum_up
 21829                                  
 21830 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 21831 000002EE 00                      ldexec_line:	db	0		;# of parm characters
 21832 000002EF 20                      ldexec_start:	db	' '
 21833 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 21834                                  
 21835                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 21836                                  
 21837                                  instexe:
 21838 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 21839 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 21840 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21841                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21842 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 21843 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 21844 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 21845 0000034C 0000                    		dw	0
 21846                                  
 21847                                  ; variables for comment=
 21848                                  
 21849 0000034E 00                      com_level:	db	0		; level of " " in command line
 21850 0000034F 00                      cmmt:		db	0		; length of comment string token
 21851 00000350 00                      cmmt1:		db	0		; token
 21852 00000351 00                      cmmt2:		db	0		; token
 21853 00000352 00                      cmd_indicator:	db	0
 21854 00000353 00                      donotshownum:	db	0
 21855                                  
 21856 00000354 0000                    count:		dw	0
 21857 00000356 0000                    org_count:	dw	0
 21858 00000358 0000                    chrptr:		dw	0
 21859 0000035A 0000                    cntryfilehandle: dw	0
 21860 0000035C 0000                    old_area:	dw	0
 21861 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 21862                                  
 21863                                  bucketptr: ; label dword
 21864                                  bufptr:	   ; label dword		; leave this stuff in order!
 21865 00000360 0000                    memlo:	dw	0
 21866                                  prmblk:	   ; label word
 21867 00000362 0000                    memhi:	dw	0
 21868 00000364 0000                    ldoff:	dw	0
 21869 00000366 0000                    area:	dw	0
 21870                                  
 21871                                  ; 18/03/2025 - MiniDOS v1.0
 21872                                  %if 0
 21873                                  
 21874                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 21875                                  prev_memhi:	dw 0
 21876                                  prev_alloclim:	dw 0
 21877                                  dosdata_umb:	db 0
 21878                                  
 21879                                  %endif
 21880                                  
 21881                                  ; Following is the request packet used to call INIT routines for 
 21882                                  ; all device drivers. Some fields may be accessed individually in
 21883                                  ; the code, and hence have individual labels, but they should not
 21884                                  ; be separated.
 21885                                  
 21886 00000368 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 21887                                  	;db	24			; was 22
 21888 00000369 00                      	db	0
 21889 0000036A 00                      	db	0			; initialize code
 21890 0000036B 0000                    	dw	0
 21891 0000036D 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 21892                                  
 21893 00000375 00                      unitcount:	db	0
 21894 00000376 00000000                break_addr:	dd	0
 21895 0000037A 00000000                bpb_addr:	dd	0
 21896                                  drivenumber:	; 22/10/2022
 21897 0000037E 00                      devdrivenum:	db	0 
 21898 0000037F 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 21899                                  
 21900                                  ; end of request packet
 21901                                  
 21902                                  ;drivenumber:	db	0  ; 22/03/2019
 21903                                  
 21904                                  toomanydrivesflag:
 21905 00000381 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 21906                                  align 2
 21907                                  
 21908                                  BCodeSeg:	; 21/10/2022
 21909 00000382 0203                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 21910                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21911                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 21912                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 21913                                  
 21914                                  ; 30/12/2022
 21915                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 21916                                  ;
 21917                                  ; Magicbackdoor: dd 0
 21918                                  ; NullBackdoor: 
 21919                                  ;		retf
 21920                                  
 21921                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21922                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21923                                  ; 19/04/2019
 21924                                  _timer_lw_:
 21925 00000384 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 21926                                  
 21927                                  ; 29/12/2023 - Retro DOS v5.0
 21928                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 21929                                  
 21930 00000386 00                      F5_key:	db 0
 21931 00000387 00                      F8_key:	db 0
 21932                                  
 21933                                  ; 07/03/2025 (MiniDOS 1.0)
 21934                                  %if 0
 21935                                  MagicBackdoor:	dd 0
 21936                                  NullBackdoor:
 21937                                  		retf
 21938                                  %endif
 21939                                  
 21940                                  ;SR;
 21941                                  ; This is the communication block between the DOS and the BIOS. It starts at
 21942                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 21943                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 21944                                  ;is passed to DOS as part of the DOSINIT call.
 21945                                  ;
 21946                                  
 21947                                  BiosComBlock:
 21948                                  	;dd	Bios_Data:SysinitPresent 
 21949                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 21950 00000388 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 21951                                  	;dw	KERNEL_SEGMENT ; 0070h
 21952                                  	; 21/10/2022
 21953 0000038A 7000                    	dw	DOSBIODATASEG ; 0070h
 21954                                  
 21955                                  ;align 2
 21956                                  
 21957                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 21958                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 21959                                  tempstack:	
 21960 0000038C 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 21961                                  
 21962                                  ; ----------------------------------------------------------------------------
 21963                                  
 21964                                  	; 29/12/2023 - Retro DOS v5.0
 21965                                  	; 22/10/2022 - Retro DOS v4.0
 21966                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 21967                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 21968                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 21969                                  	; 12/12/2023
 21970 0000040C 0E                      	push	cs
 21971 0000040D 1F                      	pop	ds
 21972                                  
 21973                                  	; 12/12/2022
 21974                                  	; 22/03/2019 - Retro DOS v4.0
 21975                                  	; 06/07/2018
 21976                                  	; 04/06/2018 - Retro DOS v3.0
 21977                                  ; before doing anything else, let's set the model byte
 21978 0000040E B4C0                    	mov	ah,0C0h 		; get system configuration
 21979 00000410 CD15                    	int	15h			; 
 21980 00000412 7214                    	jc	short no_rom_config
 21981                                  
 21982                                  	;cmp	ah,0			; double check
 21983                                  	;jne	short no_rom_config
 21984                                  	; 03/09/2023
 21985 00000414 08E4                    	or	ah,ah
 21986 00000416 7510                    	jnz	short no_rom_config
 21987                                  
 21988                                  	; 12/12/2023 ; *
 21989                                  	; ds = cs
 21990                                  
 21991 00000418 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 21992                                  	;mov	[cs:sys_model_byte],al 
 21993 0000041C A2[B902]                	mov	[sys_model_byte],al ; *
 21994 0000041F 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 21995                                  	;mov	[cs:sys_scnd_model_byte],al
 21996 00000423 A2[BA02]                	mov	[sys_scnd_model_byte],al ; *
 21997                                  	;jmp	short SYSIN
 21998                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21999 00000426 EB29                    	jmp	short move_myself
 22000                                  
 22001                                  no_rom_config:				; Old ROM
 22002                                  	; 12/12/2023
 22003                                  	;mov	ax,0F000h
 22004                                  	;mov	ds,ax
 22005                                  	;mov	al,[0FFFEh]
 22006                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 22007                                  	; 12/12/2023
 22008                                  	; ds = cs
 22009 00000428 B800F0                  	mov	ax,0F000h
 22010 0000042B 8EC0                    	mov	es,ax
 22011 0000042D 26A0FEFF                	mov	al,[es:0FFFEh]
 22012 00000431 A2[B902]                	mov	[sys_model_byte],al	; set the model byte.
 22013                                  	
 22014                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 22015                                  ; execute the equipment determination interrupt and then
 22016                                  ; check the returned value to see if we have any floppy drives
 22017                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 22018                                  ; see the at tech ref bios listings for help on the equipment
 22019                                  ; flag interrupt (11h)	
 22020                                  
 22021                                  	; 22/10/2022
 22022                                  ;check_for_fake_floppy:			; entry point for rom_config above
 22023 00000434 CD11                    	int	11h			; check equipment flag
 22024                                  
 22025                                  	; 29/12/2023 - Retro DOS v5.0
 22026                                  	;jmp	short check_for_fake_floppy
 22027                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 22028                                  	;db	52h	; 'RPS' sign
 22029                                  	;db	50h
 22030                                  	;db	53h
 22031                                  
 22032                                  check_for_fake_floppy:
 22033                                  	; 29/12/2023
 22034                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 22035                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 22036                                  	;			; by using 'RPS' sign position)
 22037                                  	;			;		 03/07/2023 - Erdogan Tan
 22038                                  	;test	ax, 1		; have any floppies?
 22039                                  
 22040                                  	; 12/12/2022
 22041 00000436 A801                    	test	al,1		
 22042                                  	;test	ax,1			; have any floppies?
 22043 00000438 7517                    	jnz	short move_myself	; yes,normal system
 22044                                  
 22045                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 22046                                  ; whether it is an old ROM BIOS or a new one
 22047                                  ;
 22048                                  ; WARNING !!!
 22049                                  ;
 22050                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 22051                                  ; here will require an equivalent modification in MSINIT.ASM also
 22052                                  
 22053                                  	; 12/12/2023
 22054                                  	;push	es  ; not necessary
 22055                                  
 22056 0000043A 30C9                    	xor	cl,cl	
 22057 0000043C B408                    	mov	ah,8			; get disk parameters
 22058 0000043E B200                    	mov	dl,0			; of drive 0
 22059 00000440 CD13                    	int	13h
 22060                                  
 22061                                  	;pop	es  ; 12/12/2023	
 22062                                  
 22063 00000442 720D                    	jc	short move_myself	; if error lets assume that the
 22064                                  					;  ROM BIOS lied
 22065                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 22066                                  	;je	short move_myself
 22067                                  	; 03/09/2023
 22068 00000444 08C9                    	or	cl,cl
 22069 00000446 7409                    	jz	short move_myself
 22070                                  
 22071 00000448 08D2                    	or	dl,dl			; number of flp drvs == 0?
 22072 0000044A 7505                    	jnz	short move_myself	; no
 22073                                  
 22074                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 22075                                  	; 12/12/2023
 22076                                  	; ds = cs
 22077 0000044C C606[8902]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 22078                                  
 22079                                  move_myself:
 22080                                  	; 12/12/2023
 22081                                  	;cld	; not necessary		; set up move
 22082                                  	;xor	si,si
 22083                                  	;mov	di,si
 22084                                  
 22085                                  	; 12/12/2023
 22086                                  	; ds = cs
 22087                                  	; 12/12/2022
 22088                                  	;push	cs
 22089                                  	;pop	ds
 22090                                  
 22091                                  	;mov	cx,[cs:MEMORY_SIZE]
 22092 00000451 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 22093                                  
 22094                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22095                                  ;;;	if	msver
 22096                                  ;	cmp	cx,1		; 1 means do scan
 22097                                  ;	jnz	short noscan
 22098                                  ;	mov	cx,2048		; start scanning at 32k boundary
 22099                                  ;	xor	bx,bx
 22100                                  ;
 22101                                  ;memscan:inc	cx
 22102                                  ;	jz	short setend
 22103                                  ;	mov	ds,cx
 22104                                  ;	mov	al,[bx]
 22105                                  ;	not	al
 22106                                  ;	mov	[bx],al
 22107                                  ;	cmp	al,[bx]
 22108                                  ;	not	al
 22109                                  ;	mov	[bx],al
 22110                                  ;	jz	short memscan
 22111                                  ;setend:
 22112                                  ;	mov	cs:[memory_size],cx
 22113                                  ;;;	endif
 22114                                  
 22115                                  ;noscan: 				; cx is mem size in para
 22116                                  ;;
 22117                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 22118                                  ;;		  before we try to run.
 22119                                  ;;	       b) in any case, we should check for sufficient memory and give
 22120                                  ;;		  an appropriate error diagnostic if there isn't enough
 22121                                  ;
 22122                                  ;	push	cs
 22123                                  ;	pop	ds
 22124                                  ;
 22125                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 22126                                  ;;	  that way it would be easier to slide them down home in a minimal
 22127                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 22128                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 22129                                  ;;	  temporary home and the final one.  the problem with doing that
 22130                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 22131                                  ;
 22132                                  ;	dec	cx			; one para for an arena at end of mem
 22133                                  ;					; in case of UMBs
 22134                                  
 22135                                  	; 22/10/2022
 22136                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 22137                                  
 22138                                  	; 12/12/2022
 22139                                  	;push	cs
 22140                                  	;pop	ds
 22141                                  
 22142 00000455 49                      	dec	cx
 22143                                  
 22144                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 22145                                  
 22146 00000456 31DB                    	xor	bx,bx
 22147 00000458 8EC3                    	mov	es,bx
 22148                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 22149                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 22150                                  	; 29/09/2023
 22151 0000045A 26C41EBC00              	les	bx,[es:(2Fh*4)]
 22152 0000045F 26817F035250            	cmp	word [es:bx+3],'RP'
 22153 00000465 751B                    	jne	short NoRPL
 22154 00000467 26807F054C              	cmp	byte [es:bx+5],'L'
 22155 0000046C 7514                    	jne	short NoRPL
 22156                                  
 22157 0000046E 89CA                    	mov	dx,cx			; get TOM into DX
 22158 00000470 52                      	push	dx
 22159 00000471 B8064A                  	mov	ax,4A06h
 22160                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 22161 00000474 CD2F                    	int	2Fh			; Get new TOM from any RPL
 22162 00000476 58                      	pop	ax
 22163 00000477 89D1                    	mov	cx,dx
 22164 00000479 39C2                    	cmp	dx,ax
 22165 0000047B 7405                    	je	short NoRPL
 22166                                  	
 22167                                  	; 11/12/2022
 22168                                  	; ds = cs
 22169 0000047D 8916[9402]              	mov	[RPLMemTop],dx
 22170                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22171                                  	;mov	[cs:RPLMemTop],dx
 22172                                  	
 22173 00000481 49                      	dec	cx
 22174                                  NoRPL:
 22175 00000482 B8[D04E]                	mov	ax,SI_end		; need this much room for sysinit
 22176                                  					; (SI_end == sysinit code size)
 22177                                  					; 03/09/2023
 22178                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 22179                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 22180 00000485 E8F807                  	call	off_to_para
 22181 00000488 29C1                    	sub	cx,ax
 22182                                  
 22183                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 22184                                  ; code above sysinit in memory
 22185                                  ;
 22186 0000048A 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 22187                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 22188                                  
 22189 0000048E B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 22190                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 22191                                  					; 03/09/2023
 22192                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 22193 00000491 E8EC07                  	call	off_to_para		; leave this much room for BIOS code
 22194 00000494 29C1                    	sub	cx,ax
 22195 00000496 8EC1                    	mov	es,cx			; segment where sysinit will be located
 22196                                  
 22197                                  	; 12/12/2023
 22198 00000498 FC                      	cld	; not necessary		; set up move
 22199 00000499 31F6                    	xor	si,si
 22200 0000049B 89F7                    	mov	di,si
 22201                                  
 22202 0000049D B9[D04E]                	mov	cx,SI_end		; (sysinit code size)
 22203 000004A0 D1E9                    	shr	cx,1			; divide by 2 to get words
 22204 000004A2 F3A5                    	rep	movsw			; relocate sysinit
 22205                                  
 22206 000004A4 06                      	push	es			; push relocated segment
 22207 000004A5 B8[AA04]                	mov	ax,SYSIN
 22208 000004A8 50                      	push	ax			; push relocated entry point
 22209                                  
 22210 000004A9 CB                      	retf				; far jump to relocated sysinit
 22211                                  
 22212                                  ; =============== S U B R O U T I N E ========================================
 22213                                  
 22214                                  ; 30/12/2023
 22215                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 22216                                  %if 0
 22217                                  get_cpu_type:
 22218                                  	pushf
 22219                                  	push	bx
 22220                                  	xor	bx,bx
 22221                                  	xor	ax,ax
 22222                                  	push	ax
 22223                                  	popf
 22224                                  	pushf
 22225                                  	pop	ax
 22226                                  	and	ax,0F000h
 22227                                  	cmp	ax,0F000h
 22228                                  	jz	short cpu_8086
 22229                                  	mov	ax,0F000h
 22230                                  	push	ax
 22231                                  	popf
 22232                                  	pushf
 22233                                  	pop	ax
 22234                                  	and	ax,0F000h
 22235                                  	jz	short cpu_286
 22236                                  cpu_386:
 22237                                  	inc	bx
 22238                                  cpu_286:
 22239                                  	inc	bx
 22240                                  cpu_8086:
 22241                                  	mov	ax,bx
 22242                                  	pop	bx
 22243                                  	popf
 22244                                  	retn
 22245                                  %endif
 22246                                  
 22247                                  ; ----------------------------------------------------------------------------
 22248                                  
 22249                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 22250                                  
 22251                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 22252                                  	; (SYSINIT:0533h)
 22253                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22254                                  	; (SYSINIT:04BFh)
 22255                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 22256                                  	; (SYSINIT:04F3h)
 22257                                  SYSIN:
 22258                                  	; Retro DOS 5.0 - 30/12/2023
 22259                                  	; Retro DOS 4.0 - 22/03/2019
 22260                                  	; Retro DOS 2.0 - 25/02/2018
 22261                                  
 22262                                  	; 23/04/2019
 22263                                  	;;mov	ax,Bios_Data
 22264                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22265                                  	; 21/10/2022
 22266 000004AA B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22267 000004AD 8ED8                    	mov	ds,ax
 22268                                  
 22269                                  	; 30/12/2023 - Retro DOS v5.0
 22270                                  	;;;
 22271                                  	;push	es
 22272                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 22273                                  	;push	di
 22274                                  	
 22275                                  	;call	get_cpu_type	; determine if 386 system
 22276                                  	;
 22277                                  get_cpu_type:
 22278 000004AF 9C                      	pushf
 22279 000004B0 31C0                    	xor	ax,ax
 22280 000004B2 50                      	push	ax
 22281 000004B3 9D                      	popf
 22282 000004B4 9C                      	pushf
 22283 000004B5 58                      	pop	ax
 22284 000004B6 2500F0                  	and	ax,0F000h
 22285 000004B9 3D00F0                  	cmp	ax,0F000h
 22286 000004BC 740F                    	jz	short cpu_8086
 22287 000004BE B800F0                  	mov	ax,0F000h
 22288 000004C1 50                      	push	ax
 22289 000004C2 9D                      	popf
 22290 000004C3 9C                      	pushf
 22291 000004C4 58                      	pop	ax
 22292 000004C5 2500F0                  	and	ax,0F000h
 22293 000004C8 7402                    	jz	short cpu_286
 22294                                  cpu_386:
 22295 000004CA 29C0                    	sub	ax,ax
 22296                                  cpu_286:
 22297 000004CC 40                      	inc	ax
 22298                                  cpu_8086:	; ax = 0
 22299                                  	; 30/12/2023 - Retro DOS v5.0
 22300 000004CD 2EA2[A506]              	mov	[cs:cpu_type],al ; 07/04/2024
 22301 000004D1 9D                      	popf
 22302                                  	;
 22303                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 22304 000004D2 3C02                    	cmp	al,2
 22305 000004D4 7512                    	jnz     short not_386_system
 22306 000004D6 FC                      	cld			; 80386
 22307 000004D7 1E                      	push	ds
 22308 000004D8 07                      	pop	es		; change A20 line on/off check code
 22309 000004D9 BF[4D07]                	mov	di,cpu386_cmpsd
 22310 000004DC B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 22311 000004DF AB                      	stosw
 22312 000004E0 B800F3                  	mov	ax,0F300h	; repz  ; F3
 22313 000004E3 AB                      	stosw
 22314 000004E4 B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 22315 000004E7 AB                      	stosw
 22316                                  not_386_system:
 22317                                  	;pop	di
 22318                                  	;pop	ax
 22319                                  	;pop	es
 22320                                  	;;;
 22321                                  
 22322 000004E8 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 22323 000004EC C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 22324                                  
 22325                                  ; first move the MSDOS.SYS image up to a harmless place 
 22326                                  ; on top of our new sysinitseg
 22327                                  
 22328                                  	; 22/10/2022
 22329 000004F1 B8[D04E]                	mov	ax,SI_end		; how big is sysinitseg?
 22330 000004F4 E88907                  	call	off_to_para
 22331 000004F7 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 22332 000004F9 01C8                    	add	ax,cx
 22333 000004FB 8EC0                    	mov	es,ax
 22334                                  	
 22335 000004FD 31F6                    	xor	si,si
 22336 000004FF 89F7                    	mov	di,si
 22337                                  
 22338 00000501 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 22339                                  
 22340                                  	;mov	ax,cs	
 22341                                  	;mov	ds,ax
 22342                                  
 22343                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 22344                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 22345                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 22346                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 22347                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 22348                                  
 22349                                  	; 22/10/2022
 22350 00000506 B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 22351                                  			     ; 03/09/2023
 22352                                  			     ; 5800h (PCDOS 7.1)
 22353 00000509 F3A5                    	rep     movsw
 22354 0000050B 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 22355                                  
 22356                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 22357                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 22358                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 22359                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 22360                                  
 22361                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 22362                                  	;mov	ax,cs
 22363                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22364                                  	;mov	ds,ax
 22365                                  
 22366                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22367                                  
 22368                                  ;	; 24/04/2019 
 22369                                  ;;ifndef ROMDOS
 22370                                  ;	mov	ax,[es:3] 		; get offset of dos
 22371                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 22372                                  ;	mov	[dosinit],ax		; that's the entry point offset
 22373                                  ;	call	off_to_para		; subtract this much from segment
 22374                                  ;	; 23/04/2019
 22375                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 22376                                  ;	sub	[FINAL_DOS_LOCATION],ax
 22377                                  ;;else
 22378                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 22379                                  ;;
 22380                                  ;;endif ; ROMDOS
 22381                                  
 22382                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22383                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 22384                                  
 22385                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 22386                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 22387                                  
 22388                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22389                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22390                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22391                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 22392                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 22393 00000510 A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 22394                                  				; 30/12/2023
 22395                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 22396                                  				;  (IBMDOS.SYS, offset 3)
 22397                                  
 22398 00000513 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22399                                  	; 02/11/2022
 22400 00000517 E86607                  	call	off_to_para		; subtract this much from segment
 22401 0000051A 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 22402                                  
 22403                                  	; Current DOSCODE start address = dword [dosinit]
 22404                                  
 22405                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 22406                                  ;; until it is determined whether it will be running in HIMEM or not.
 22407                                  
 22408                                  ;ifndef ROMDOS
 22409                                  
 22410                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 22411                                  
 22412                                  	; 22/10/2022
 22413 0000051F 8CC0                    	mov	ax,es
 22414 00000521 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 22415 00000524 8EC0                    	mov	es,ax
 22416 00000526 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 22417 0000052B 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 22418                                  
 22419                                  	;mov	si,BCODE_START ; mov si,30h
 22420                                  	; 09/12/2022
 22421 0000052D BE[3000]                	mov	si,BCODESTART
 22422                                  	; 02/11/2022
 22423 00000530 89F7                    	mov	di,si
 22424                                  	; 30/12/2023
 22425                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 22426                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 22427                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 22428                                  	;sub	cx,si
 22429                                  	; 31/03/2024
 22430                                  	BCODESIZE equ BCODEEND-BCODESTART
 22431 00000532 B9401D                  	mov	cx,BCODESIZE
 22432 00000535 D1E9                    	shr	cx,1
 22433 00000537 F3A5                    	rep	movsw			; move Bios_Code into place
 22434                                  
 22435 00000539 8CC0                    	mov	ax,es			; tell it what segment it's in
 22436 0000053B 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 22437                                  
 22438                                  ;endif	; not ROMDOS
 22439                                  
 22440                                  ; now call dosinit while it's in its temporary home
 22441                                  
 22442                                  	;mov	ax,cs
 22443                                  	;mov	ds,ax	 
 22444                                  
 22445                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 22446                                  
 22447                                  	; 22/10/2022
 22448                                  
 22449 00000540 2EC43E[8803]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 22450                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 22451 00000545 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 22452                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 22453                                  
 22454 0000054A 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 22455                                  
 22456 0000054F FA                      	cli
 22457 00000550 8CC8                    	mov	ax,cs
 22458 00000552 8ED0                    	mov	ss,ax
 22459                                  
 22460                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 22461                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 22462                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 22463                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 22464                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 22465                                  ;SYSINIT:0532h: 
 22466                                  
 22467                                  ; 22/10/2022
 22468                                  ; ----------------------------------------------------------------------------
 22469                                  ;SYSINIT:05A6h:
 22470                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 22471                                  
 22472                                  ; 03/09/2023
 22473                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 22474                                  
 22475                                  	;mov	sp,05A6h
 22476 00000554 BC5405                  	mov     sp,locstack		; set stack
 22477                                  
 22478 00000557 FB                      	sti
 22479                                  
 22480                                  ;align 2
 22481                                  	; 30/03/2018
 22482                                  ;LOCSTACK:
 22483                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 22484                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 22485                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 22486                                  
 22487                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22488                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 22489                                  
 22490                                  ; This call to DOSINIT will relocate the DOS data from its present location
 22491                                  ; at the top of memory, to its final location in low memory just above the
 22492                                  ; BIOS data. It will then build important DOS data structures in low 
 22493                                  ; memory following the DOS data. It returns (among many other things) the
 22494                                  ; new starting address of free memory.
 22495                                  
 22496 00000558 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 22497                                  			 ; es:di -> sysinitvars_ext
 22498                                  
 22499 0000055D 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 22500                                  	
 22501                                  	; 11/12/2022
 22502                                  	; 22/03/2019
 22503 00000562 0E                      	push	cs
 22504 00000563 1F                      	pop	ds
 22505                                  	; 22/10/2022
 22506                                  	;mov	[hi_doscod_size],ax
 22507                                  	;mov	[lo_doscod_size],cx
 22508                                  	; 08/03/2025 (MiniDOS)
 22509 00000564 A3[8102]                	mov	[dos_code_size],ax
 22510 00000567 8916[7D02]              	mov	[dos_segreinit],dx
 22511                                  	
 22512                                  	; 11/12/2022
 22513                                  	; ds = cs
 22514                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 22515                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 22516                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 22517                                  
 22518                                  	; 05/06/2018 - Retro DOS v3.0
 22519                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 22520                                  
 22521                                  	; 11/12/2022
 22522                                  	; ds = cs
 22523                                  	; 22/10/2022
 22524                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 22525 0000056B 268B05                  	mov	ax,[es:di] ; 22/03/2019
 22526                                  	;mov	[cs:DOSINFO],ax
 22527 0000056E A3[6D02]                	mov	[DOSINFO],ax
 22528                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 22529 00000571 268B4502                	mov	ax,[es:di+2]
 22530                                  	;mov	[cs:DOSINFO+2],ax
 22531 00000575 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 22532                                  
 22533                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 22534 00000578 268B4504                	mov	ax,[es:di+4]
 22535                                  	;mov	[cs:sysi_country],ax
 22536 0000057C A3[7902]                	mov	[sysi_country],ax
 22537                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 22538 0000057F 268B4506                	mov	ax,[es:di+6]
 22539                                  	;mov	[cs:sysi_country+2],ax
 22540 00000583 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 22541                                  
 22542                                  	; 20/04/2019
 22543                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 22544                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 22545                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 22546                                  	; 22/10/2022
 22547                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 22548                                  	;;;mov	[dos_segreinit+2],es
 22549                                  	;;mov	[dos_segreinit+2],ax
 22550                                  	;mov	[cs:dos_segreinit+2],ax
 22551                                  	; 11/12/2022
 22552                                  	; ds = cs
 22553 00000586 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 22554 0000058A 8C06[7F02]              	mov	[dos_segreinit+2],es
 22555                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22556                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 22557                                  	;mov	[cs:dos_segreinit+2],es
 22558                                  
 22559                                  ; ----------------------------------------------------------------------------
 22560                                  
 22561                                  ;SYSINIT:0577h:
 22562                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 22563                                  ;SYSINIT:05D1h:	; NoRPLArena 
 22564                                  
 22565                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 22566                                  ;------ Cover up RPL code with an arena
 22567                                  ;SYSINIT:05EBh:
 22568                                  	; 11/12/2022
 22569                                  	; ds = cs
 22570 0000058E 31DB                    	xor	bx,bx
 22571 00000590 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 22572                                  	;cmp	word [RPLMemTop],0
 22573                                  	;;cmp	word [cs:RPLMemTop],0
 22574 00000594 7450                    	je	short NoRPLArena
 22575                                  
 22576                                  ;------ alloc all memory
 22577                                  
 22578                                  	; 11/12/2022
 22579                                  	;mov	bx,0FFFFh
 22580 00000596 4B                      	dec	bx
 22581                                  	; bx = 0FFFFh
 22582 00000597 B448                    	mov	ah,48h
 22583 00000599 CD21                    	int	21h
 22584                                  			; DOS - 2+ - ALLOCATE MEMORY
 22585                                  			; BX = number of 16-byte paragraphs desired
 22586 0000059B B448                    	mov	ah,48h
 22587 0000059D CD21                    	int	21h
 22588                                  
 22589 0000059F 8EC0                    	mov	es,ax			; get it into ES and save it
 22590 000005A1 06                      	push	es
 22591                                  
 22592                                  ;------ resize upto RPL mem
 22593                                  
 22594                                  	; 11/12/2022
 22595                                  	; ds = cs
 22596                                  	;sub	ax,[cs:RPLMemTop]
 22597 000005A2 2B06[9402]              	sub	ax,[RPLMemTop]
 22598 000005A6 F7D8                    	neg	ax
 22599 000005A8 48                      	dec	ax
 22600 000005A9 89C3                    	mov	bx,ax
 22601 000005AB B44A                    	mov	ah,4Ah
 22602 000005AD CD21                    	int	21h
 22603                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 22604                                  			; ES = segment address of block to change
 22605                                  			; BX = new size in paragraphs
 22606                                  
 22607                                  ;------ allocate the free (RPL MEM)
 22608                                  
 22609 000005AF BBFFFF                  	mov	bx,0FFFFh
 22610 000005B2 B448                    	mov	ah,48h
 22611 000005B4 CD21                    	int	21h
 22612 000005B6 B448                    	mov	ah,48h
 22613 000005B8 CD21                    	int	21h
 22614                                  
 22615                                  ;----- mark that it belongs to RPL
 22616                                  
 22617 000005BA 48                      	dec	ax
 22618 000005BB 8EC0                    	mov	es,ax
 22619                                  	;mov	word [es:arena_owner],8
 22620 000005BD 26C70601000800          	mov	word [es:1],8
 22621                                  	;mov	word [es:arena_name],'RP'
 22622 000005C4 26C70608005250          	mov	word [es:8],'RP'
 22623                                  	;mov	word [es:arena_name+2],'L'
 22624 000005CB 26C7060A004C00          	mov	word [es:10],'L'
 22625                                  	;mov	word [es:arena_name+4],0
 22626 000005D2 26C7060C000000          	mov	word [es:12],0
 22627                                  	;mov	word [es:arena_name+6],0
 22628 000005D9 26C7060E000000          	mov	word [es:14],0	
 22629                                  
 22630 000005E0 07                              pop     es                      ; get back ptr to first block
 22631 000005E1 B449                            mov     ah,49h	; Dealloc	; and free it
 22632 000005E3 CD21                    	int	21h		
 22633                                  					; DOS - 2+ - FREE MEMORY
 22634                                  					; ES = segment address of area to be freed
 22635                                  	; 11/12/2022
 22636 000005E5 F8                      	clc
 22637                                  
 22638                                  ; ----------------------------------------------------------------------------
 22639                                  
 22640                                  NoRPLArena:
 22641                                  	; 11/12/2022
 22642                                  	; ds = cs
 22643                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 22644 000005E6 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 22645                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 22646                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 22647                                  
 22648                                  	; 11/12/2022
 22649                                  	;clc				; get the extended memory size
 22650                                  
 22651                                  ;	execute the get extended memory size subfunction in the bios int 15h
 22652                                  ;	if the function reports an error do nothing else store the extended
 22653                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 22654                                  ;	currently pointed to by es:di. use the offsets specified in the
 22655                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 22656                                  
 22657 000005EA B488                    	mov	ah,88h
 22658 000005EC CD15                    	int	15h			; check extended memory size
 22659 000005EE 720B                    	jc	short no_ext_memory
 22660                                  			; Get Extended Memory Size
 22661                                  			; Return: CF clear on success
 22662                                  			; AX = size of memory above 1M in K	
 22663                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 22664                                  	; 22/10/2022
 22665 000005F0 26894545                	mov	[es:di+45h],ax ; save extended memory size
 22666 000005F4 09C0                    	or	ax,ax
 22667 000005F6 7403                    	jz	short no_ext_memory
 22668 000005F8 E8E705                  	call	ClrVDISKHeader
 22669                                  no_ext_memory:
 22670                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 22671 000005FB 268B4510                	mov	ax,[es:di+10h]
 22672                                  	;add	ax,bufinsiz
 22673                                  	; 30/12/2023 - Retro DOS v5.0
 22674                                  	;add	ax,20		; size of buffer header
 22675 000005FF 83C018                  	add     ax,24		; bufinsiz
 22676                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 22677                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 22678                                  	; 11/12/2022
 22679                                  	; ds = cs
 22680 00000602 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 22681                                  	;mov	[cs:singlebuffersize],ax	
 22682                                  	; 11/12/2022
 22683 00000605 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 22684                                  	;mov	al,[cs:DEFAULT_DRIVE]
 22685                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 22686 00000608 26884543                	mov	[es:di+43h],al
 22687                                  
 22688                                  ; determine if 386 system...
 22689                                  
 22690                                  ; 30/12/2023
 22691                                  %if 0
 22692                                  	;get_cpu_type			; macro to determine cpu type
 22693                                  
 22694                                  get_cpu_type:
 22695                                  	; 11/12/2022
 22696                                  	pushf
 22697                                  	;push	bx
 22698                                  	;xor	bx,bx
 22699                                  	; 11/12/2022
 22700                                  	;xor	cx,cx
 22701                                  	;
 22702                                  	xor	ax,ax
 22703                                  	; ax = 0
 22704                                  	push    ax
 22705                                  	popf
 22706                                  	pushf
 22707                                  	pop	ax
 22708                                  	and	ax,0F000h
 22709                                  	;cmp	ax,0F000h
 22710                                  	cmp	ah,0F0h 
 22711                                  	je	short cpu_8086
 22712                                  	;mov	ax,0F000h
 22713                                  	mov	ah,0F0h
 22714                                  	; ax = 0F000h
 22715                                  	push	ax
 22716                                  	popf
 22717                                  	pushf
 22718                                  	pop	ax
 22719                                  	;and	ax,0F000h
 22720                                  	and	ah,0F0h
 22721                                  	jz	short cpu_286
 22722                                  cpu_386:
 22723                                  	; 11/12/2022
 22724                                  	;;inc	bx
 22725                                  	;inc	cx
 22726                                  	; 11/12/2022
 22727                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22728                                  	mov	byte [es:di+44h],1
 22729                                  
 22730                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 22731                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 22732                                  	;push	es
 22733                                  	;push	di
 22734                                  	;mov	ax,DOSBIODATASEG ; 0070h
 22735                                  	;mov	es,ax
 22736                                  	;cld
 22737                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 22738                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 22739                                  	;stosw
 22740                                  	;mov	ax,0F300h      ; repz  ; F3
 22741                                  	;stosw
 22742                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 22743                                  	;stosw
 22744                                  	;pop	di
 22745                                  	;pop	es
 22746                                  
 22747                                  cpu_286:
 22748                                  	;;;inc	bx
 22749                                  	;;inc	cx
 22750                                  cpu_8086:
 22751                                  	; 11/12/2022
 22752                                  	;;mov	ax,bx
 22753                                  	;pop	bx
 22754                                  	popf
 22755                                  %endif
 22756                                  	;...
 22757                                  
 22758                                  	; 11/12/2022
 22759                                  	;or	cl,cl
 22760                                  	;jz	short not_386_system
 22761                                  	; 11/12/202
 22762                                  	;cmp	cl,2
 22763                                  	;;cmp	ax,2			; is it a 386?
 22764                                  	;jne	short not_386_system	; no: don't mess with flag
 22765                                  
 22766                                  	; 30/12/2023 - Retro DOS v5.0
 22767 0000060C 803E[A506]02            	cmp	byte [cpu_type], 2	; is it a 386?
 22768 00000611 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 22769                                  	
 22770                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22771                                  	; 11/12/2022
 22772                                  	; 22/10/2022
 22773 00000613 26C6454401              	mov	byte [es:di+44h],1
 22774                                  _not_386_cpu:
 22775                                  	;mov	al,[es:di+SYSI_NUMIO]
 22776 00000618 268A4520                	mov	al,[es:di+20h]
 22777                                  	; 11/12/2022
 22778                                  	; ds = cs
 22779 0000061C A2[7E03]                	mov	[drivenumber],al	; save start of installable block drvs
 22780                                  	;mov	[cs:drivenumber],al
 22781                                  
 22782 0000061F 8CC8                    	mov	ax,cs
 22783 00000621 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 22784                                  	; 11/12/2022
 22785                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 22786                                  	;;mov	cx,[cs:singlebuffersize]
 22787                                  	;shr	cx,1			
 22788                                  	;shr	cx,1			; divide size by 16...
 22789                                  	;shr	cx,1
 22790                                  	;shr	cx,1			; ...to get paragraphs...
 22791                                  	;inc	cx			; ... and round up
 22792                                  	; 11/12/2022
 22793 00000624 8B1E[9B02]              	mov	bx,[singlebuffersize]
 22794 00000628 B104                    	mov	cl,4
 22795 0000062A D3EB                    	shr	bx,cl
 22796 0000062C 43                      	inc	bx
 22797                                  
 22798                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 22799                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 22800                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 22801                                  ;	  it is probably safe to assume that the sector size always will be.
 22802                                  ;
 22803                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 22804                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 22805                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 22806                                  ;	  other code from ever causing a problem???
 22807                                  
 22808                                  	; 11/12/2022
 22809 0000062D 29D8                    	sub	ax,bx
 22810                                  	;sub	ax,cx
 22811 0000062F A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 22812                                  	; 22/10/2022
 22813                                  	;mov	[cs:top_of_cdss],ax
 22814                                  
 22815                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 22816                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 22817                                  ;	for allocating memory for MagicDrv.
 22818                                  
 22819                                  	; 30/12/2023
 22820                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 22821                                  	;push	di
 22822                                  
 22823                                  	; 22/10/2022
 22824                                  ;	mov	cx,ax			; save pointer for buffer
 22825                                  ;
 22826                                  ;;	now allocate space for 26 CDSs
 22827                                  ;
 22828                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 22829                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22830                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22831                                  
 22832                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 22833                                  	; (SYSINIT:064Ch)
 22834 00000632 89C1                    	mov	cx,ax ; (*)
 22835 00000634 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 22836 00000637 A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22837 0000063A A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22838                                  	 	
 22839                                  ; setup and initialize the temporary buffer at cx
 22840                                  
 22841                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 22842 0000063D 26C47D12                	les	di,[es:di+12h]
 22843                                  	; 11/12/2022
 22844 00000641 31DB                    	xor	bx,bx
 22845                                  	;xor	ax,ax
 22846                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 22847                                  	;mov	word [es:di+4],0
 22848 00000643 26895D04                	mov	[es:di+4],bx ; 0
 22849                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 22850                                  	;mov	word [es:di],0
 22851 00000647 26891D                  	mov	[es:di],bx ; 0
 22852                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 22853                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 22854                                  	;mov	[es:di+2],ax
 22855                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 22856                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 22857 0000064A 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 22858 0000064E 8EC1                    	mov	es,cx
 22859                                  
 22860                                  	; 11/12/2022
 22861                                  	;xor	ax,ax
 22862                                  	;mov	di,ax			; es:di -> single buffer
 22863 00000650 89DF                    	mov	di,bx
 22864                                  	; di = 0
 22865                                  
 22866                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 22867                                  	; 11/12/2022
 22868                                  	;mov	[es:di],ax ; 0
 22869 00000652 26891D                  	mov	[es:di],bx ; 0
 22870                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 22871                                  	; 11/12/2022
 22872                                  	;mov	[es:di+2],ax ; 0
 22873 00000655 26895D02                	mov	[es:di+2],bx ; 0 
 22874                                  
 22875                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 22876                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 22877                                  
 22878                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 22879 00000659 26C74504FF00            	mov	word [es:di+4],00FFh
 22880                                  ;SYSINIT:06E6h
 22881                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 22882                                  	;mov	word [es:di+6],0
 22883                                  	; 11/12/2022
 22884                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 22885 0000065F 26895D06                	mov	[es:di+6],bx ; 0
 22886                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 22887                                  	;mov	word [es:di+8],0
 22888                                  	; 11/12/2022
 22889                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 22890 00000663 26895D08                	mov	[es:di+8],bx ; 0
 22891                                  
 22892                                  	; 30/12/2023 (!*)
 22893                                  	;pop	di			; restore pointer to DOSINFO data
 22894                                  	;pop	es
 22895                                  
 22896                                  	; 11/12/2022
 22897                                  	; ds = cs
 22898                                  	; 22/10/2022
 22899                                  	;push	cs
 22900                                  	;pop	ds
 22901                                  
 22902 00000667 E81F06                  	call	TempCDS			; set up cdss so re_init and sysinit
 22903                                  					;  can make disk system calls
 22904                                  					; tempcds trashes ds
 22905                                  	; 10/05/2019
 22906 0000066A 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 22907                                  
 22908                                  	;if not ibmjapver
 22909                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 22910                                  	;endif
 22911                                  
 22912                                  	; 22/10/2022
 22913                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 22914                                  	; 30/12/2022
 22915                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 22916                                  	;call	far ptr 70h:89Bh
 22917 0000066F 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 22918                                  
 22919 00000674 FB                      	sti				; ints ok
 22920 00000675 FC                      	cld				; make sure
 22921                                  
 22922                                  ; 23/03/2019
 22923                                  
 22924                                  ;SYSINIT:069Eh	; 30/12/2022
 22925                                  
 22926                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 22927                                  ; of the way by putting it just below sysinit at end of memory.
 22928                                  
 22929 00000676 8CCB                    	mov	bx,cs
 22930 00000678 83EB10                  	sub	bx,10h
 22931 0000067B 8EC3                    	mov	es,bx
 22932 0000067D 31F6                    	xor	si,si
 22933 0000067F 89F7                    	mov	di,si
 22934 00000681 B98000                  	mov	cx,128
 22935 00000684 F3A5                    	rep	movsw
 22936                                  
 22937                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 22938                                  	; 22/10/2022
 22939 00000686 268C063600              	mov	[es:36h],es
 22940                                  
 22941                                   	; Set Process Data Block - Program Segment Prefix address
 22942                                  	; BX = PDB/PSP segment
 22943 0000068B B450                            mov	ah,50h	; SET_CURRENT_PDB
 22944 0000068D CD21                    	int	21h			; tell DOS we moved it
 22945                                  			; DOS - 2+ internal - SET PSP SEGMENT
 22946                                  			; BX = segment address of new PSP
 22947                                  	; 22/10/2022
 22948                                  	; 27/03/2019
 22949                                  	; 30/12/2023
 22950                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 22951                                  
 22952 0000068F 0E                      	push	cs	
 22953 00000690 1F                      	pop	ds
 22954                                  
 22955                                  	; set up temp. critical error handler
 22956 00000691 BA[4845]                	mov	dx,int24		; set up int 24 handler
 22957                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 22958                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 22959 00000694 B82425                  	mov	ax,2524h
 22960 00000697 CD21                    	int	21h
 22961                                  
 22962 00000699 803E[8103]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 22963 0000069E 7406                            je      short no_err		   ;  N: continue            M029
 22964 000006A0 BA[644E]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 22965                                          ; 22/10/2022
 22966                                  	;call	print 			   ;		             M029
 22967                                  	; 12/12/2022
 22968 000006A3 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 22969                                  
 22970                                  	; 30/12/2023 - Retro DOS v5.0
 22971                                  cpu_type:
 22972 000006A5 FF                      	db 0FFh	; db 0
 22973                                  
 22974                                  no_err:
 22975                                  	; 12/05/2019
 22976                                  	;----------------------------------------------
 22977                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 22978                                  	; 22/10/2022 - Retro DOS v4.0
 22979                                  	; 12/12/2022
 22980                                  	; 30/12/2023 - Retro DOS v5.0
 22981 000006A6 BA[4C45]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 22982                                  p_dosinit_msg:
 22983 000006A9 E8773E                  	call	print			; Print message
 22984                                  	;----------------------------------------------
 22985                                  	
 22986                                  	; 11/12/2022
 22987                                  	; 22/10/2022
 22988                                  	; 23/03/2019 - Retro DOS v4.0
 22989                                  	;pop	ds			; start of free memory
 22990                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 22991                                  	
 22992                                  	; 11/12/2022
 22993                                  	; 27/03/2019
 22994 000006AC 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 22995                                  	; 30/12/2023
 22996                                  	;pop	ds ; */
 22997                                  
 22998 000006B0 08D2                    	or	dl,dl
 22999                                  	; 30/12/2023
 23000 000006B2 7405                    	jz	short nodrvset		; bios didn't say
 23001                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 23002                                  	;dec	dl			; A = 0
 23003                                  	; 18/12/2022
 23004 000006B4 4A                      	dec	dx
 23005 000006B5 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 23006 000006B7 CD21                    	int	21h			; select the disk
 23007                                  			; DOS - SELECT DISK
 23008                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 23009                                  			; Return: AL = number of logical drives
 23010                                  nodrvset:
 23011                                  	; ---------------------
 23012                                  
 23013                                  	;ifdef	dblspace_hooks
 23014                                  	;	....
 23015                                  	;	....
 23016                                  	;endif
 23017                                  
 23018                                  	; ---------------------
 23019                                  
 23020                                  ; ----------------------------------------------------------------------------
 23021                                  
 23022                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 23023                                  
 23024                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 23025                                  ; ----------------------------------------------------------------------------
 23026                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23027                                  ; ----------------------------------------------------------------------------
 23028                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 23029                                  ; ----------------------------------------------------------------------------
 23030                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 23031                                  
 23032                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 23033                                  
 23034                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 23035                                  
 23036                                  ProcessConfig:
 23037                                  	;; ds = cs ; 27/03/2019
 23038                                  	; 11/12/2022
 23039                                  	; ds <> cs	
 23040                                  
 23041                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 23042                                  
 23043 000006B9 E80619                  	call	doconf			; do pre-scan for dos=high/low
 23044                                  
 23045                                  	; 11/12/2022
 23046                                  	; 27/03/2019
 23047                                  	; ds = cs (at return from doconf)
 23048                                  
 23049                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 23050                                  ; It will either be relocated to low memory, above the DOS data structures,
 23051                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 23052                                  ; code entry points will be located in low memory. Dos_segreinit is used
 23053                                  ; to tell the DOS data where the code has been placed, and to install the
 23054                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 23055                                  ; must first initialize it in its present location and load the installable
 23056                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 23057                                  ; relocate the DOS code into HiMem.
 23058                                  ;
 23059                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 23060                                  ; to install the low memory stub (this must be done before allowing any
 23061                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 23062                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 23063                                  ; been patched.
 23064                                  
 23065                                  	; 22/10/2022 - Retro DOS v4.0
 23066                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 23067                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 23068                                  	; 11/12/2022
 23069 000006BC 803E[6C02]00            	cmp	byte [runhigh],0
 23070 000006C1 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 23071                                  
 23072                                  ;------ user chose to load high
 23073                                  
 23074                                  	; 22/10/2022
 23075                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 23076                                  	; 11/12/2022
 23077                                  	; ds = cs
 23078                                  ; 13/04/2024
 23079                                  %if 0
 23080                                  	mov	es,[CURRENT_DOS_LOCATION]
 23081                                  %endif
 23082                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 23083                                  	; 27/03/2019
 23084                                  	;;mov	es,[FINAL_DOS_LOCATION]
 23085                                  
 23086 000006C3 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 23087                                  
 23088                                  ; 13/04/2024
 23089                                  %if 0	
 23090                                  	; 11/12/2022
 23091                                  	; ds = cs
 23092                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23093                                  	call	far [dos_segreinit]
 23094                                  %endif
 23095 000006C5 EB08                    	jmp	short do_multi_pass
 23096                                  
 23097                                  ;------ User chose to load dos low
 23098                                  
 23099                                  dont_install_stub:
 23100                                  	; 22/10/2022
 23101 000006C7 31DB                    	xor	bx,bx			; M012
 23102                                  					; don't use int 21 call to alloc mem
 23103 000006C9 E8E102                  	call	MovDOSLo		; move it !
 23104                                  
 23105 000006CC B80100                  	mov	ax,1			; dont install stub
 23106                                  
 23107                                  ; 13/04/2024
 23108                                  %if 1
 23109                                  do_multi_pass:
 23110                                  %endif
 23111                                  	; 11/12/2022
 23112                                  	; ds = cs
 23113 000006CF 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23114                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 23115                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23116                                  	; 27/03/2019
 23117                                  ;do_multi_pass:
 23118                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 23119                                  
 23120                                  	; 11/12/2022
 23121                                  	; ds =cs
 23122                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 23123 000006D3 FF1E[7D02]              	call	far [dos_segreinit]
 23124                                  
 23125                                  ; 13/04/2024
 23126                                  %if 0
 23127                                  do_multi_pass:
 23128                                  %endif
 23129                                  
 23130 000006D7 E81D02                  	call	AllocFreeMem		; allocate all the free mem
 23131                                  					; & update [memhi] & [area]
 23132                                  					; start of free memory.
 23133                                  	;ifdef	dblspace_hooks
 23134                                  	;mov	bx,0			; magic backdoor to place int hooks
 23135                                  	;call	cs:MagicBackdoor
 23136                                  	;endif
 23137                                  
 23138                                  ; 07/03/2025
 23139                                  %if 0
 23140                                  	; 07/04/2024 - Retro DOS v5.0
 23141                                  	; (PCDOS 7.1 IBMBIO.COM)
 23142                                  	;cmp	byte [cs:F5_key],1
 23143                                  	cmp	byte [F5_key],1
 23144                                  	je	short skip_magicbackdoor
 23145                                  	;cmp	byte [cs:F8_key],1
 23146                                  	cmp	byte [F8_key],1
 23147                                  	je	short skip_magicbackdoor
 23148                                  	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 23149                                  	;call	far [cs:MagicBackdoor]
 23150                                  	call	far [MagicBackdoor]
 23151                                  
 23152                                  skip_magicbackdoor:
 23153                                  %endif
 23154                                  
 23155                                  ; Now, process config.sys some more.  
 23156                                  ; Load the device drivers and install programs
 23157                                  
 23158                                  	; 22/10/2022
 23159                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 23160                                  	; 11/12/2022
 23161                                  	; ds = cs
 23162 000006DA FE06[CB02]              	inc	byte [multi_pass_id]
 23163 000006DE E87D19                  	call	multi_pass		; load device drivers
 23164 000006E1 E8BA2D                  	call	ShrinkUMB
 23165 000006E4 E8DE2D                  	call	UnlinkUMB		; unlink all UMBs	;M002
 23166                                  	; 02/11/2022
 23167                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 23168                                  	; 11/12/2022
 23169                                  	; ds = cs
 23170 000006E7 FE06[CB02]              	inc	byte [multi_pass_id]
 23171 000006EB E87019                  	call	multi_pass		; was load ifs (now does nothing)
 23172                                  
 23173                                  	;ifdef	dblspace_hooks
 23174                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 23175                                  	;endif
 23176                                  
 23177                                  	; ds = cs
 23178                                  
 23179                                  	; 07/04/2024
 23180                                  	;call	endfile			; setup fcbs, files, buffers etc
 23181                                  
 23182                                  	;ifdef	dblspace_hooks
 23183                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 23184                                  	;endif
 23185                                  
 23186                                  ; 07/03/2025
 23187                                  %if 0
 23188                                  	; 07/04/2024 - Retro DOS v5.0
 23189                                  	; (PCDOS 7.1 IBMBIO.COM)
 23190                                  	;cmp	byte [cs:F5_key],1
 23191                                  	cmp	byte [F5_key],1
 23192                                  	je	short skip_magicpostload
 23193                                  	;cmp	byte [cs:F8_key],1
 23194                                  	cmp	byte [F8_key],1
 23195                                  	je	short skip_magicpostload
 23196                                  	call	MagicPostload		; make sure Magicdrv is final placed
 23197                                  	; 13/04/2024
 23198                                  	; ds = cs
 23199                                  	call	endfile			; setup fcbs, files, buffers etc
 23200                                  	call	MagicSetCdss		; disable CDSs of reserved drives
 23201                                  	; ds = cs
 23202                                  	jmp	short _@_
 23203                                  
 23204                                  skip_magicpostload:
 23205                                  %endif
 23206                                  
 23207                                  	; 13/04/2024
 23208                                  	; ds = cs
 23209 000006EE E83606                  	call	endfile			; setup fcbs, files, buffers etc
 23210                                  _@_:
 23211                                  
 23212                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 23213                                  ;to device drivers. This has been moved up to this point to avoid problems 
 23214                                  ;with overlays called from installed programs
 23215                                  
 23216                                  	; 11/12/2022
 23217                                  	; ds = cs
 23218                                  
 23219                                  	;;mov	ax,Bios_Data ; 0070h
 23220                                  	;mov	ax,KERNEL_SEGMENT
 23221                                  	; 21/10/2022
 23222 000006F1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23223 000006F4 8EC0                    	mov	es,ax			; point ES to bios data
 23224                                  
 23225 000006F6 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 23226                                  
 23227                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23228                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 23229                                  	;test	byte [cs:install_flag],1
 23230                                  	; 11/12/2022
 23231                                  	; ds = cs
 23232 000006FC F606[CC02]01            	test	byte [install_flag],1
 23233                                  	;test	byte [cs:install_flag],have_install_cmd
 23234                                  					; are there install commands?
 23235 00000701 7407                    	jz	short dolast		; no, no need for further processing
 23236                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 23237                                  	; 11/12/2022
 23238                                  	; ds =cs
 23239 00000703 FE06[CB02]              	inc	byte [multi_pass_id]
 23240 00000707 E85419                  	call	multi_pass		; execute install= commands
 23241                                  
 23242                                  dolast:
 23243                                  	
 23244                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 23245                                  ;  free the confbot area used for config.sys and sysinit itself.
 23246                                  
 23247                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 23248                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 23249                                  ; anything, but just set up the ROM area for suballocation (or print
 23250                                  ; a message if HiMem is not available).
 23251                                  ;
 23252                                  ; There is also this little hack for CPM style DOS calls that needs to
 23253                                  ; be done when A20 is set...
 23254                                  
 23255                                  	; 11/12/2022
 23256                                  	; ds = cs
 23257                                  
 23258                                  	; 22/10/2022
 23259                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 23260                                  	; 11/12/2022
 23261 0000070A 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 23262 0000070F 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 23263 00000711 E84802                  	call	LoadDOSHiOrLo
 23264                                  _@@_:
 23265                                  	;cmp	byte [cs:runhigh],0	; are we running low
 23266                                  	; 11/12/2022
 23267                                  	; ds = cs
 23268 00000714 803E[6C02]00            	cmp	byte [runhigh],0
 23269                                  	;je	short _@@@
 23270 00000719 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 23271 0000071B E84C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 23272                                  _@@@:
 23273                                  
 23274                                  ; We are now done with CONFIG.SYS processing
 23275                                  
 23276                                  ConfigDone:
 23277                                  	; 12/12/2022
 23278                                  	; 22/10/2022
 23279                                  	;mov	byte [cs:donotshownum],1 
 23280                                  					; done with config.sys.
 23281                                  					; do not show line number message.
 23282                                  	;mov	es,[cs:area]
 23283                                  	; 12/12/2022
 23284                                  	; ds = cs
 23285                                  	; 27/03/2019
 23286 0000071E C606[5303]01            	mov	byte [donotshownum],1
 23287 00000723 8E06[6603]              	mov	es,[area]
 23288                                  
 23289 00000727 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 23290 00000729 CD21                    	int	21h
 23291                                  			; DOS - 2+ - FREE MEMORY
 23292                                  			; ES = segment address of area to be freed
 23293                                  
 23294                                  	; 22/10/2022
 23295                                  	;test	word [cs:install_flag],2
 23296                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 23297                                  	;test	byte [cs:install_flag],has_installed
 23298                                  	; 11/12/2022
 23299                                  	; ds = cs
 23300 0000072B F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 23301                                  	;test	byte [install_flag],has_installed
 23302 00000730 741F                    	jz	short skip_free_sysinitbase ; no.
 23303                                  
 23304                                  ; set block from the old_area with impossible_owner_size.
 23305                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 23306                                  ; handle install= command.
 23307                                  
 23308                                  	; 12/12/2022
 23309                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23310                                  	;push	bx
 23311                                  	
 23312                                  	; 22/10/2022
 23313                                  	;mov	es,[cs:old_area]
 23314                                  	;mov	bx,[cs:impossible_owner_size]
 23315                                  	; 12/12/2022
 23316                                  	; ds = cs
 23317 00000732 8E06[5C03]              	mov	es,[old_area]
 23318 00000736 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 23319                                  	
 23320 0000073A B44A                    	mov	ah,4Ah ; SETBLOCK
 23321 0000073C CD21                    	int	21h
 23322                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23323                                  			; ES = segment address of block to change
 23324                                  			; BX = new size in paragraphs
 23325 0000073E 8CC0                    	mov	ax,es
 23326 00000740 48                      	dec	ax
 23327 00000741 8EC0                    	mov	es,ax			; point to arena
 23328                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 23329 00000743 26C70601000800          	mov	word [es:1],8
 23330                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 23331 0000074A 26C70608005344          	mov	word [es:8],'SD'
 23332                                  	
 23333                                  	; 12/12/2022
 23334                                  	;pop	bx
 23335                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23336                                  
 23337                                  skip_free_sysinitbase:
 23338                                  	; 22/10/2022
 23339                                  	;cmp	byte [cs:runhigh],0
 23340                                  	; 12/12/2022
 23341                                  	; ds = cs
 23342 00000751 803E[6C02]00            	cmp	byte [runhigh],0	
 23343 00000756 7403                    	je	short _@@@_ ; 04/07/2023
 23344                                  
 23345 00000758 E8DF03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 23346                                  
 23347                                  ; ----------------------------------------------------------------------------
 23348                                  
 23349                                  _@@@_:
 23350                                  	; 12/12/2022
 23351                                  	; ds = cs
 23352                                  	; 22/10/2022
 23353                                  	; 27/03/2019
 23354                                  	;push	cs
 23355                                  	;pop	ds			; point DS to sysinitseg
 23356                                  
 23357                                  ; set up the parameters for command
 23358                                  
 23359                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23360                                  ;;ifdef	MULTI_CONFIG
 23361                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 23362                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 23363                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 23364                                  ;	; !!!
 23365                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23366                                  ;       ; !!!
 23367                                  ;	call    disable_autoexec        ; no, we should disable it
 23368                                  ;process_autoexec:
 23369                                  ;;endif	; !!!
 23370                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23371                                  ;	; !!!
 23372                                  
 23373                                  	; 22/10/2022 
 23374                                  	;mov     cl,[command_line]
 23375                                          ;mov     ch,0
 23376                                          ;inc     cx
 23377                                          ;mov     si,command_line	
 23378                                  	;add     si,cx
 23379                                          ;mov     byte [si],cr	; cr-terminate command line
 23380                                  
 23381                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23382                                  	; (SYSINIT:0809h)
 23383                                  
 23384                                  	;;;;
 23385                                  
 23386                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23387                                  	; (SYSINIT:0813h)
 23388                                  	; ds = cs
 23389                                  	; push	cs
 23390                                  	; pop	ds
 23391                                  
 23392 0000075B C606[DC14]00            	mov	byte [config_cmd],0	; set special code for query_user
 23393 00000760 E88839                  	call    query_user		; to issue the AUTOEXEC prompt
 23394                                  	; 07/04/2024
 23395                                  	;jnc	short process_autoexec	; we should process autoexec normally
 23396                                  
 23397                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23398                                  	;;;
 23399 00000763 9C                      	pushf
 23400 00000764 F606[5047]01            	test	byte [bDisableUI],1
 23401 00000769 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 23402 0000076B 803E[8603]01            	cmp	byte [F5_key],1
 23403 00000770 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 23404                                  _@@@@_:
 23405 00000772 9D                      	popf
 23406 00000773 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 23407 00000775 EB01                    	jmp	short bypass_autoexec
 23408                                  _@@@@@_:
 23409 00000777 9D                      	popf			; cf status at the return from 'query_user' call
 23410                                  bypass_autoexec:
 23411                                  	;;;
 23412                                  
 23413                                  	; !!!
 23414 00000778 800E[5447]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23415                                  	; !!!
 23416 0000077D E8663A                  	call    disable_autoexec        ; no, we should disable it
 23417                                  process_autoexec:
 23418                                  	; !!!
 23419 00000780 E8AE3A                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23420                                  
 23421                                  	;mov     cl,[command_line]
 23422                                  	; 30/12/2022
 23423 00000783 BE[8A46]                	mov	si,command_line
 23424 00000786 8A0C                    	mov	cl,[si]
 23425 00000788 B500                    	mov     ch,0
 23426 0000078A 41                      	inc     cx
 23427                                  	;mov	si,command_line
 23428 0000078B 01CE                    	add     si,cx
 23429 0000078D C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 23430                                  	
 23431                                  	;;;;		
 23432                                  
 23433                                  ; 30/12/2022 - Retro DOS v4.2
 23434                                  %if 0
 23435                                  	;mov	si,(offset command_line+1)
 23436                                  	mov	si,command_line+1
 23437                                  	push    ds
 23438                                  	pop     es
 23439                                  	mov     di,si
 23440                                  	mov     cl,0FFh ; -1
 23441                                  _@_loop:
 23442                                  	inc     cl ; +1
 23443                                  	lodsb
 23444                                  	stosb
 23445                                  	or      al,al
 23446                                  	jnz     short _@_loop
 23447                                  	dec     di
 23448                                  	mov     al,0Dh
 23449                                  	stosb			; cr-terminate command line
 23450                                  	mov     [command_line],cl ; command line length (except CR)
 23451                                  %endif
 23452                                  
 23453                                  ; ----------------------------------------------------------------------------
 23454                                  
 23455                                  ;   Once we get to this point, the above code, which is below "retry"
 23456                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 23457                                  ;   which follow....)
 23458                                  
 23459                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 23460 00000790 BA[FC45]                	mov	dx,commnd	; now pointing to file description
 23461                                  
 23462                                  ; we are going to open the command interpreter and size it as is done in
 23463                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 23464                                  ; there is not enough room for the command interpreter,exec will probably
 23465                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 23466                                  ; here to catch it. this code is not perfect (for instance .exe command
 23467                                  ; interpreters are possible) because it does its sizing based on the
 23468                                  ; assumption that the file being loaded is a .com file. it is close enough to
 23469                                  ; correctness to be usable.
 23470                                  
 23471                                  ; first, find out where the command interpreter is going to go.
 23472                                  
 23473 00000793 52                      	push	dx		; save pointer to name
 23474 00000794 BBFFFF                  	mov	bx,0FFFFh
 23475 00000797 B448                    	mov	ah,48h	; ALLOC
 23476 00000799 CD21                            int     21h             ; get biggest piece
 23477 0000079B B448                    	mov	ah,48h	; ALLOC
 23478 0000079D CD21                    	int	21h		; second time gets it
 23479 0000079F 726B                    	jc	short memerrjx	; oooops
 23480                                  
 23481 000007A1 8EC0                    	mov	es,ax
 23482 000007A3 B449                    	mov	ah,49h	; DEALLOC
 23483 000007A5 CD21                    	int	21h		; give it right back
 23484 000007A7 89DD                    	mov	bp,bx
 23485                                  
 23486                                  ; es:0 points to block,and bp is the size of the block in para.
 23487                                  
 23488                                  ; we will now adjust the size in bp down by the size of sysinit.
 23489                                  ; we need to do this because exec might get upset if some of the exec
 23490                                  ; data in sysinit is overlayed during the exec.
 23491                                  
 23492                                  	; 22/10/2022
 23493                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 23494 000007A9 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 23495 000007AD 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 23496                                  
 23497                                  ; Note that the "config_wrkseg" environment data is a segment in
 23498                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 23499                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 23500                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 23501                                  ; we need to make sure that there's no way Exec will stomp on that data
 23502                                  ; before it can copy it, and one way to do that is to make the available
 23503                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 23504                                  ; from the "memory_size" segment value (which is typically A000h) instead
 23505                                  ; of the current sysinit CS....
 23506                                  ;
 23507                                  ; The reason I use the term "paranoid" is because this code should have
 23508                                  ; slid the data required by Exec up to the very top of memory, because as
 23509                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 23510                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 23511                                  ; consumes). Now it's just a little worse (65K or more, depending on
 23512                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 23513                                  ; is determined by the size of CONFIG.SYS.... -JTP
 23514                                  
 23515                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 23516                                  	; (SYSINIT:0858h)
 23517 000007AF 8B0E[D814]              	mov	cx,[config_envlen]
 23518 000007B3 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 23519 000007B5 A1[DA14]                        mov	ax,[config_wrkseg]	
 23520                                  
 23521                                  	; 22/10/2022
 23522                                  	;mov	cx,[config_envlen]
 23523                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 23524                                          ;mov	ax,[config_wrkseg]
 23525                                  ;no_env:
 23526                                  	; 22/10/2022
 23527                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 23528                                  no_env:
 23529                                  	; 30/12/2022
 23530                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 23531 000007B8 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 23532 000007BA 83C311                  	add	bx,11h		; add the sysinit php
 23533 000007BD 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 23534 000007BF 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 23535                                  
 23536                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 23537 000007C1 B8003D                          mov	ax,3D00h
 23538 000007C4 F9                      	stc                     ; in case of int 24
 23539 000007C5 CD21                    	int	21h
 23540 000007C7 7271                    	jc	short comerr	; ooops
 23541                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 23542                                  			; DS:DX -> ASCIZ filename
 23543                                  			; AL = access mode
 23544                                  			; 0 - read
 23545                                  	; 22/10/2022
 23546                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 23547 000007C9 89C3                            mov     bx,ax           ; handle in bx
 23548                                  
 23549                                  ;   If the standard command interpreter is being used, verify it is correct
 23550                                  
 23551                                  	; 30/12/2022 - Retro DOS v4.2
 23552                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 23553 000007CB 803E[F945]00            	cmp	byte [newcmd],0	; was a new shell selected?
 23554 000007D0 7518                    	jne	short skip_validation ; yes
 23555                                  	; 07/04/2024 - Retro DOS v5.0
 23556                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 23557 000007D2 BA[8C07]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 23558 000007D5 B90400                  	mov	cx,4		;
 23559 000007D8 B43F                    	mov	ah,READ		;
 23560 000007DA CD21                    	int	21h		;
 23561 000007DC 803E[8C07]E9            	cmp	byte [retry-4],0E9h
 23562 000007E1 7557                    	jne	short comerr
 23563                                  	; 20/04/2019 - Retro DOS v4.0
 23564                                  	; 30/12/2022 
 23565                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23566                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 23567                                  	; 07/04/2024 - Retro DOS v5.0
 23568                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 23569                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 23570                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 23571 000007E3 803E[8F07]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23572 000007E8 7550                    	jne	short comerr	;
 23573                                  
 23574                                  	; 22/10/2022
 23575                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 23576                                  	;jne	short skip_validation ; yes
 23577                                  	;mov	dx,retry-4
 23578                                  	;mov	cx,4		;
 23579                                  	;mov	ah,READ		;
 23580                                  	;int	21h		;
 23581                                  	;cmp	byte [retry-4],0E9h
 23582                                  	;jne	short comerr
 23583                                  	;; 20/04/2019 - Retro DOS v4.0
 23584                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23585                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23586                                  	;jne	short comerr	;
 23587                                  
 23588                                  ;skip_validation:
 23589                                  	; 22/10/2022
 23590                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 23591                                  skip_validation:
 23592                                  	; 30/12/2022
 23593                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 23594 000007EA 31C9                    	xor	cx,cx
 23595 000007EC 31D2                    	xor	dx,dx
 23596                                  	;mov	ax,(LSEEK<<8)|2
 23597 000007EE B80242                  	mov	ax,4202h
 23598 000007F1 F9                      	stc			; in case of int 24
 23599 000007F2 CD21                    	int	21h		; get file size in dx:ax
 23600 000007F4 7244                    	jc	short comerr
 23601                                  				; convert size in dx:ax to para in ax
 23602 000007F6 83C00F                  	add	ax,15		; round up size for conversion to para
 23603 000007F9 83D200                  	adc	dx,0
 23604 000007FC E88104                  	call	off_to_para
 23605 000007FF B10C                    	mov	cl,12
 23606 00000801 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 23607 00000803 09D0                    	or	ax,dx		; ax is now # of para for file
 23608 00000805 83C010                  	add	ax,10h		; 100h byte php
 23609 00000808 39E8                    	cmp	ax,bp		; will command fit in available mem?
 23610 0000080A 7208                    	jb	short okld	; jump if yes.
 23611                                  
 23612                                  ; 30/12/2022
 23613                                  %if 0
 23614                                  	; 22/10/2022
 23615                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 23616                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 23617                                  	; 02/11/2022
 23618                                  	;jmp	mem_err
 23619                                  	; 11/12/2022
 23620                                  	; ds = cs
 23621                                  	jmp	mem_err2
 23622                                  %endif
 23623                                  	; 30/12/2022
 23624                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 23625                                  memerrjx:
 23626 0000080C BA[0F4C]                	mov	dx,badmem 	; "Configuration too large for memory"
 23627 0000080F E8113D                  	call	print
 23628 00000812 EB3A                    	jmp     short continue
 23629                                  
 23630                                  okld:
 23631 00000814 B43E                    	mov	ah,3Eh ; CLOSE
 23632 00000816 CD21                    	int	21h		; close file
 23633                                  
 23634                                  	; 22/10/2022
 23635 00000818 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 23636                                  
 23637                                  	; 24/03/2019
 23638                                  
 23639 00000819 0E                      	push	cs		; point es to sysinitseg
 23640 0000081A 07                      	pop	es
 23641 0000081B BB[BD02]                        mov     bx,COMEXE	; point to exec block
 23642                                  	; 22/10/2022
 23643                                  	;pop	dx              ; recover pointer to name
 23644                                  
 23645                                  ;;ifdef	MULTI_CONFIG
 23646                                  
 23647                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 23648                                  ;   there will be data if there were any valid SET commands and/or if a menu
 23649                                  ;   selection was made (in which case the CONFIG environment variable will be
 23650                                  ;   set to that selection).
 23651                                  
 23652                                  	; 23/10/2022
 23653                                  	;mov	cx,[config_envlen]
 23654                                  	;jcxz	no_envdata
 23655                                          ;mov	cx,[config_wrkseg]
 23656                                  ;no_envdata:
 23657                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 23658                                  	;mov	[bx],cx
 23659                                  
 23660                                  ;;endif	;MULTI_CONFIG
 23661                                  
 23662                                  	; 30/12/2022 - Retro DOS v4.2
 23663                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 23664 0000081E 8B0E[D814]              	mov	cx,[config_envlen]
 23665 00000822 E304                    	jcxz	no_envdata
 23666 00000824 8B0E[DA14]                      mov	cx,[config_wrkseg]
 23667                                  no_envdata:
 23668                                  	;mov	[bx+EXEC0.ENVIRON],cx
 23669 00000828 890F                    	mov	[bx],cx	
 23670                                  	
 23671                                  	; 23/10/2022
 23672                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 23673                                  
 23674                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 23675 0000082A 8C4F04                  	mov	[bx+4],cs
 23676                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 23677 0000082D 8C4F08                  	mov	[bx+8],cs
 23678                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 23679 00000830 8C4F0C                  	mov	[bx+12],cs
 23680                                  
 23681                                  	;mov	ax,(EXEC<<8) + 0
 23682                                  	; 23/10/2022
 23683                                  	;xor	ax,ax
 23684                                  	;mov	ah,4Bh
 23685                                  	; 04/07/2023
 23686                                  	;mov	ax,4B00h
 23687 00000833 B8004B                  	mov	ax,(EXEC<<8)
 23688                                  
 23689 00000836 F9                      	stc                     ; in case of int 24
 23690 00000837 CD21                            int     21h             ; go start up command
 23691                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 23692                                  			; DS:DX -> ASCIZ filename
 23693                                  			; ES:BX -> parameter block
 23694                                  			; AL = subfunc: load & execute program
 23695                                  	;push	cs
 23696                                  	;pop	ds
 23697                                  
 23698                                  	; 13/04/2024
 23699                                  	; 23/10/2022
 23700 00000839 52                      	push	dx		; push to balance fall-through pop
 23701                                  
 23702                                  ; note fall through if exec returns (an error)
 23703                                  comerr:
 23704                                  	; 23/10/2022
 23705                                  ;;ifdef	MULTI_CONFIG
 23706                                  	;cmp	byte [commnd4],0
 23707                                  	;je	short comerr2	; all defaults exhausted, print err msg
 23708                                  	;cmp	byte [newcmd],0
 23709                                  	;je	short continue	; don't print err msg for defaults just yet
 23710                                  ;comerr2:
 23711                                  ;;endif
 23712                                  
 23713                                  	; 30/12/2022 - Retro DOS v4.2
 23714                                  	;push	cs
 23715                                  	;pop	ds
 23716                                  	; 07/04/2024
 23717                                  	; ds = cs
 23718                                  
 23719 0000083A 803E[6D46]00            	cmp	byte [commnd4],0
 23720 0000083F 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 23721 00000841 803E[F945]00            	cmp	byte [newcmd],0
 23722 00000846 7406                    	je	short continue	; don't print err msg for defaults just yet
 23723                                  comerr2:
 23724                                  	; 07/04/2024
 23725                                  	;push	dx ; 30/12/2022
 23726                                  
 23727                                  	; 23/10/2022
 23728 00000848 BA[8B4B]                        mov     dx,badcom	; want to print command error
 23729 0000084B E8A93C                  	call	badfil
 23730                                  	
 23731                                  	; 07/04/2024
 23732                                  	;pop	dx  ; 30/12/2022
 23733                                  continue:
 23734                                  	; 13/04/2024
 23735                                  	; 23/10/2022
 23736 0000084E 5A                      	pop	dx
 23737                                  
 23738                                  ; 30/12/2022
 23739                                  %if 0
 23740                                  
 23741                                  ;;ifndef MULTI_CONFIG
 23742                                  	;jmp	stall
 23743                                  	; 24/10/2022
 23744                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 23745                                  	jmp	short stall
 23746                                  ;;else
 23747                                  
 23748                                  %endif
 23749                                  	
 23750                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 23751                                  ;%if 1
 23752                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 23753                                  ;%if 0	
 23754 0000084F B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 23755 00000851 CD21                    	int	21h             ;
 23756 00000853 0441                    	add	al,'A'          ;
 23757 00000855 88C2                    	mov	dl,al           ; DL == default drive letter
 23758 00000857 BE[3C46]                	mov	si,commnd2
 23759 0000085A 803E[F945]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 23760 0000085F 7505                    	jne	short do_def2	; then try the 2nd alternate;
 23761 00000861 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 23762 00000864 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 23763                                  do_def2:			
 23764 00000866 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 23765 00000869 7554                            jne	short do_alt    ; no
 23766                                  do_def3:
 23767 0000086B BE[4D46]                	mov	si,commnd3
 23768 0000086E 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 23769 00000871 754C                    	jne	short do_alt	; no
 23770 00000873 BE[6D46]                	mov	si,commnd4
 23771 00000876 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 23772 00000879 7544                    	jne	short do_alt	; no
 23773 0000087B 52                      	push	dx              ;
 23774 0000087C BA[FE4D]                	mov	dx,badcomprmpt
 23775 0000087F E8A13C                  	call	print		;
 23776 00000882 5A                      	pop	dx              ; recover default drive letter in DL
 23777                                  request_input:			;
 23778 00000883 B402                    	mov	ah,STD_CON_OUTPUT
 23779 00000885 CD21                    	int	21h             ;
 23780 00000887 52                      	push	dx              ;
 23781 00000888 B23E                    	mov	dl,'>'          ;
 23782 0000088A CD21                    	int	21h             ;
 23783 0000088C 8A1E[FB45]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 23784 00000890 B700                    	mov	bh,0            ;
 23785 00000892 C687[FC45]0D            	mov	byte [commnd+bx],0Dh
 23786 00000897 BA[FA45]                	mov	dx,tmplate
 23787 0000089A B40A                    	mov	ah,STD_CON_STRING_INPUT
 23788 0000089C CD21                    	int	21h             ; read a line of input
 23789 0000089E BA[364B]                	mov	dx,crlfm	;
 23790 000008A1 E87F3C                  	call	print           ;
 23791 000008A4 5A                      	pop	dx              ;
 23792 000008A5 8A1E[FB45]              	mov	bl,[tmplate+1]	;
 23793 000008A9 08DB                    	or	bl,bl           ; was anything typed?
 23794 000008AB 74D6                    	jz	short request_input ;
 23795 000008AD C606[F945]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 23796 000008B2 C687[FC45]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 23797 000008B7 C706[8A46]000D          	mov	word [command_line],0D00h
 23798 000008BD EB35                    	jmp	short do_exec   ;
 23799                                  do_alt:
 23800 000008BF 1E                      	push	ds
 23801 000008C0 07                      	pop	es
 23802 000008C1 C606[F945]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 23803 000008C6 BF[FC45]                	mov	di,commnd	;
 23804                                  do_alt1:
 23805 000008C9 AC                      	lodsb			; copy the alternate, zapping it as we go,
 23806 000008CA C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 23807 000008CE AA                      	stosb 			;
 23808 000008CF 08C0                    	or	al,al		;
 23809 000008D1 75F6                    	jnz	short do_alt1	;
 23810 000008D3 BF[8A46]                	mov	di,command_line
 23811 000008D6 807C023A                	cmp	byte [si+2],':'
 23812 000008DA 7503                    	jne	short do_alt2	;
 23813 000008DC 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 23814                                  do_alt2:			;
 23815 000008DF AC                      	lodsb			;
 23816 000008E0 AA                      	stosb			;
 23817 000008E1 08C0                    	or	al,al           ;
 23818 000008E3 75FA                    	jnz	short do_alt2   ;
 23819 000008E5 C645FF0D                	mov	byte [di-1],cr
 23820                                  
 23821                                  ;;   Last but not least, see if we need to call disable_autoexec
 23822                                  
 23823                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 23824                                  	;cmp	[command_line-1],0
 23825                                          ;jne	short do_exec   ;
 23826                                          ;mov	[command_line-1],'/'
 23827                                  	;call	disable_autoexec ;
 23828                                  
 23829                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 23830 000008E9 C606[4A47]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 23831 000008EE E8F538                  	call	disable_autoexec
 23832 000008F1 E83D39                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 23833                                  do_exec:
 23834 000008F4 E999FE                  	jmp	retry		;
 23835                                  
 23836                                  ;;endif	;MULTI_CONFIG
 23837                                  
 23838                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 23839                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23840                                  
 23841                                  ; 24/03/2019 - Retro DOS v4.0
 23842                                  
 23843                                  ; ----------------------------------------------------------------------
 23844                                  ; procedure : AllocFreeMem
 23845                                  ;
 23846                                  ; Allocate Max memory from DOS to find out where to load DOS.
 23847                                  ; DOS is at temporary location when this call is being made
 23848                                  ;
 23849                                  ; Inputs : None
 23850                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 23851                                  ;	   [area] & [memhi] set to the para value of the start of the
 23852                                  ;	   free memory.
 23853                                  ;
 23854                                  ; Uses   : AX, BX
 23855                                  ;
 23856                                  ; ----------------------------------------------------------------------
 23857                                  	
 23858                                  	; 30/12/2022 - Retro DOS v4.2
 23859                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 23860                                  
 23861                                  	; 08/04/2024 - Retro DOS v5.0
 23862                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 23863                                  
 23864                                  	; 23/10/2022
 23865                                  AllocFreeMem:
 23866 000008F7 BBFFFF                  	mov	bx,0FFFFh
 23867 000008FA B448                    	mov	ah,48h ; ALLOC
 23868 000008FC CD21                    	int	21h			; first time fails
 23869 000008FE B448                    	mov	ah,48h ; ALLOC
 23870 00000900 CD21                    	int	21h			; second time gets it
 23871                                  	; 11/12/2022
 23872                                  	; ds = cs
 23873                                  	;mov	[cs:area],ax
 23874                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 23875 00000902 A3[6603]                	mov	[area],ax
 23876 00000905 A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 23877 00000908 C3                      	retn				; start of free memory
 23878                                  				
 23879                                  	; include msbio.cl6
 23880                                  ; ----------------------------------------------------------------------
 23881                                  DOSLOMSG:
 23882 00000909 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 23882 00000912 7661696C61626C653A-
 23882 0000091B 204C6F6164696E6720-
 23882 00000924 444F53206C6F770D0A-
 23882 0000092D 24                 
 23883                                  FEmsg:
 23884 0000092E 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 23884 00000937 6F723A2043616E6E6F-
 23884 00000940 7420616C6C6F636174-
 23884 00000949 65204D656D6F727920-
 23884 00000952 666F7220444F530D0A-
 23884 0000095B 24                 
 23885                                  
 23886                                  ; ----------------------------------------------------------------------
 23887                                  ;
 23888                                  ; procedure : LoadDOSHiOrLo
 23889                                  ;
 23890                                  ;		Tries to move DOS into HMA. If it fails then loads
 23891                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 23892                                  ;		moved; this just tries to allocate the HMA, and prints
 23893                                  ;		a message if this is not possible.
 23894                                  ;
 23895                                  ; ----------------------------------------------------------------------
 23896                                  
 23897                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23898                                  LoadDOSHiOrLo:
 23899                                  	; 27/03/2019 - Retro DOS v4.0
 23900                                  	; ds = cs
 23901 0000095C E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 23902                                  	;jc	short LdngLo		; If that don't work...
 23903                                  	;retn
 23904                                  	; 18/12/2022
 23905 0000095F 731C                    	jnc	short LoadDosHi_ok
 23906                                  LdngLo:
 23907                                  	; 23/10/2022
 23908                                  	;push	cs
 23909                                  	;pop	ds
 23910                                  	; 11/12/2022
 23911                                  	; ds = cs
 23912 00000961 B409                    	mov	ah,9
 23913 00000963 BA[0909]                	mov	dx,DOSLOMSG		; inform user that we are
 23914 00000966 CD21                    	int	21h			; loading low
 23915                                  
 23916                                  ;ifndef ROMDOS
 23917                                  	; actually move the dos, and reinitialize it.
 23918                                  
 23919 00000968 BB0100                  	mov	bx,1				; M012
 23920                                  						;  use int 21 alloc for mem
 23921 0000096B E83F00                  	call	MovDOSLo
 23922                                  	; 11/12/2022
 23923                                  	; ds = cs
 23924                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 23925                                  	; 23/10/2022
 23926 0000096E 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23927                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 23928                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 23929 00000972 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 23930                                  	; 11/12/2022
 23931                                  	; ds = cs
 23932                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 23933 00000974 FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 23934                                  	
 23935                                  ;endif ; ROMDOS
 23936                                  	; 23/10/2022
 23937                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 23938                                  	; 11/12/2022
 23939                                  	; ds = cs
 23940 00000978 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 23941                                  LoadDosHi_ok:	; 18/12/2022
 23942 0000097D C3                      	retn
 23943                                  
 23944                                  ; ----------------------------------------------------------------------
 23945                                  ;
 23946                                  ; procedure : TryToMovDOSHi
 23947                                  ;
 23948                                  ;		This tries to move DOS into HMA.
 23949                                  ;		Returns CY if it failed.
 23950                                  ;		If it succeeds returns with carry cleared.
 23951                                  ;
 23952                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 23953                                  ;		the A20 switching code in the low mem stub to be installed.
 23954                                  ; 
 23955                                  ; ----------------------------------------------------------------------
 23956                                  
 23957                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23958                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 23959                                  TryToMovDOSHi:
 23960                                  	; 11/12/2022
 23961                                  	; 27/03/2019 - Retro DOS v4.0
 23962                                  	; ds = cs
 23963 0000097E E81300                  	call	MovDOSHi
 23964 00000981 7210                    	jc	short ttldhx
 23965                                  
 23966                                  ;ifndef ROMDOS
 23967                                  	; 23/10/2022
 23968                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 23969                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 23970                                  	; 11/12/2022
 23971                                  	; ds = cs
 23972 00000983 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23973                                  ;else
 23974                                  ;	..
 23975                                  ;endif ; ROMDOS
 23976                                  
 23977                                  	; 11/12/2022
 23978                                  	; ds = cs
 23979 00000987 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 23980                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23981 00000989 FF1E[7D02]              	call	far [dos_segreinit]
 23982                                  	;mov	byte [cs:runhigh],1
 23983 0000098D C606[6C02]01            	mov	byte [runhigh],1
 23984 00000992 F8                      	clc
 23985                                  ttldhx:
 23986 00000993 C3                      	retn
 23987                                  
 23988                                  ; ----------------------------------------------------------------------
 23989                                  ;
 23990                                  ; procedure : MovDOSHi
 23991                                  ;
 23992                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 23993                                  ;		For ROMDOS, the code is not actually moved, but the
 23994                                  ;		HMA is allocated and prepared for sub-allocation.
 23995                                  ;
 23996                                  ;		Returns : CY if it failed
 23997                                  ;
 23998                                  ; ----------------------------------------------------------------------
 23999                                  
 24000                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24001                                  MovDOSHi:
 24002                                  	; 14/05/2019
 24003                                  	; 27/03/2019 - Retro DOS v4.0
 24004                                  	; ds = cs
 24005 00000994 E8D600                  	call	AllocHMA
 24006 00000997 7213                    	jc	short mdhx			; did we get HMA?
 24007 00000999 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 24008 0000099C 8EC0                    	mov	es,ax
 24009                                  
 24010                                  ;ifndef ROMDOS
 24011                                  	; actually move the BIOS and DOS
 24012                                  
 24013                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24014                                  	; 24/03/2019
 24015                                  	
 24016                                  	; 23/10/2022
 24017 0000099E E83200                  	call	MovBIOS				; First move BIOS into HMA
 24018                                  
 24019                                  	; ES:DI points to free HMA after BIOS
 24020                                  	
 24021                                  	; 14/05/2019
 24022                                  	; 24/03/2019 - Retro DOS v4.0
 24023                                  	;xor	di,di
 24024                                  	
 24025                                  	; 23/10/2022
 24026                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 24027                                  	; 11/12/2022
 24028                                  	; ds = cs
 24029                                  	;mov	cx,[hi_doscod_size]		; when it is in HMA
 24030                                  	; 08/03/2025 (MiniDOS)
 24031 000009A1 8B0E[8102]              	mov	cx,[dos_code_size]	
 24032 000009A5 E81100                  	call	MovDOS				; and move it
 24033                                  
 24034                                  	; ES:DI points to free HMA after DOS
 24035                                  ;else
 24036                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 24037                                  ;
 24038                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 24039                                  ;
 24040                                  ;endif ; ROMDOS
 24041                                  
 24042 000009A8 E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 24043 000009AB F8                      	clc
 24044                                  mdhx:
 24045 000009AC C3                      	retn
 24046                                  
 24047                                  ; ----------------------------------------------------------------------
 24048                                  ;
 24049                                  ; procedure : MovDOSLo
 24050                                  ;
 24051                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 24052                                  ;
 24053                                  ; ----------------------------------------------------------------------
 24054                                  
 24055                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24056                                  
 24057                                  ;ifndef ROMDOS
 24058                                  
 24059                                  MovDOSLo:
 24060                                  	; 14/05/2019
 24061                                  	; 27/03/2019 - Retro DOS v4.0
 24062                                  	; ds = cs
 24063 000009AD E84500                  	call	AllocMemForDOS			; incestuosly!!!
 24064                                  	
 24065                                  	; 23/10/2022
 24066                                  	; 14/05/2019
 24067                                  	;inc	ax  ; skip MCB
 24068                                  	
 24069 000009B0 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 24070                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24071                                  	; 24/03/2019
 24072                                  	
 24073                                  	; 23/10/2022
 24074 000009B2 E81E00                  	call	MovBIOS
 24075                                  
 24076                                  ;------ ES:DI points memory immediately after BIOS
 24077                                  
 24078                                  	; 14/05/2019
 24079                                  	; NOTE: 
 24080                                  	;     Order of (RETRO) DOS kernel sections at memory:
 24081                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 24082                                  
 24083                                  	; 24/03/2019 - Retro DOS v4.0
 24084                                  	;xor	di,di	
 24085                                  
 24086                                  	; 23/10/2022
 24087                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 24088                                  	; 11/12/2022
 24089                                  	; ds = cs
 24090                                  	;mov	cx,[lo_doscod_size]		; low
 24091                                  	; 08/03/2025 (MiniDOS)
 24092 000009B5 8B0E[8102]              	mov	cx,[dos_code_size]
 24093                                  	;call	MovDOS
 24094                                  	;retn
 24095                                  	; 11/12/2022
 24096                                  	;jmp	short MovDOS
 24097                                  
 24098                                  ;endif ; ROMDOS
 24099                                  
 24100                                  ; 11/12/2022
 24101                                  
 24102                                  ; ----------------------------------------------------------------------
 24103                                  ;
 24104                                  ; procedure : MovDOS
 24105                                  ;
 24106                                  ;		Moves DOS code into requested area
 24107                                  ;
 24108                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24109                                  ;	     CX    - size of DOS code to be moved
 24110                                  ;
 24111                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24112                                  ;
 24113                                  ; ----------------------------------------------------------------------
 24114                                  
 24115                                  	; 11/12/2022
 24116                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24117                                  
 24118                                  ;ifndef ROMDOS
 24119                                  
 24120                                  MovDOS:
 24121                                  	; 14/05/2019
 24122                                  	; 27/03/2019 - Retro DOS v4.0
 24123                                  
 24124                                  	; 11/12/2022
 24125                                  	; ds = cs
 24126                                  
 24127                                  	; 23/10/2022
 24128                                  	;push	ds ; *//
 24129                                  	
 24130 000009B9 06                      	push	es
 24131 000009BA 57                      	push	di
 24132                                  
 24133                                  	; 11/12/2022
 24134 000009BB 1E                      	push	ds ; *// ; 11/12/202
 24135                                  
 24136                                  	; 29/04/2019
 24137 000009BC C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 24138                                  	; 23/10/2022
 24139                                  	;lds	si,[cs:dosinit]
 24140                                  	; 03/09/2023
 24141 000009C0 89F0                    	mov	ax,si
 24142                                  
 24143 000009C2 F3A4                    	rep	movsb
 24144                                  
 24145 000009C4 1F                      	pop	ds ; *// ; 11/12/2022
 24146                                  
 24147 000009C5 5B                      	pop	bx				; get back offset into which
 24148                                  						;  DOS was moved
 24149                                  	; 03/09/2023
 24150                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24151                                  						;  wants to run
 24152                                  	; 03/09/2023
 24153                                  	;mov	ax,[dosinit]
 24154                                  	; ax = [dosinit]
 24155                                  
 24156 000009C6 29D8                    	sub	ax,bx
 24157 000009C8 E8B502                  	call	off_to_para
 24158 000009CB 5B                      	pop	bx				; get the segment at which
 24159                                  						;  we moved DOS into
 24160 000009CC 29C3                    	sub	bx,ax				; Adjust segment
 24161                                  	
 24162                                  	; 11/12/2022
 24163                                  	; 23/10/2022
 24164                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24165                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24166                                  	; 11/12/2022
 24167 000009CE 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 24168                                  		
 24169                                  	; 27/03/2019
 24170                                  	;pop	ds ; *//
 24171                                  	; ds = cs
 24172                                  	;mov	[FINAL_DOS_LOCATION],bx
 24173                                  
 24174 000009D2 C3                      	retn
 24175                                  
 24176                                  ;endif ;ROMDOS
 24177                                  
 24178                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24179                                  ; 24/03/2019
 24180                                  ; ----------------------------------------------------------------------
 24181                                  ;
 24182                                  ; procedure : MovBIOS
 24183                                  ;
 24184                                  ;		Moves BIOS code into requested segment
 24185                                  ;
 24186                                  ;	In : ES - segment to which BIOS is to be moved
 24187                                  ;		  ( it moves always into offset BCode_Start)
 24188                                  ;
 24189                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 24190                                  ;
 24191                                  ; ----------------------------------------------------------------------
 24192                                  
 24193                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24194                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24195                                  
 24196                                  ;ifndef ROMDOS
 24197                                  
 24198                                  MovBIOS: ; proc	near
 24199                                  	; 11/12/2022
 24200 000009D3 1E                      	push	ds ; ds = cs
 24201                                  	;
 24202                                  	; 23/10/2022
 24203                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 24204                                  	; 17/09/2023 ; 08/04/2024
 24205 000009D4 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 24206                                  	;mov	si,BCODE_START ; mov si,30h
 24207                                  	; 09/12/2022
 24208 000009D8 BE[3000]                	mov	si,BCODESTART ; 30h
 24209 000009DB 89F7                    	mov	di,si
 24210                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24211 000009DD B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 24212 000009E0 29F1                    	sub	cx,si				; size of BIOS
 24213 000009E2 D1E9                    	shr	cx,1				; Both the labels are para
 24214                                  						;  aligned
 24215 000009E4 F3A5                    	rep	movsw
 24216                                  	
 24217                                  	; 11/12/2022
 24218 000009E6 1F                      	pop	ds ; ds = cs
 24219                                  	;
 24220 000009E7 06                      	push	es
 24221 000009E8 57                      	push	di				; save end of BIOS
 24222 000009E9 8CC0                    	mov	ax,es
 24223                                  	;
 24224                                  	; 11/12/2022
 24225                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 24226                                  	;;call	dword ptr cs:_seg_reinit_ptr
 24227                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 24228                                  	; ds = cs
 24229 000009EB A3[8203]                	mov	[BCodeSeg],ax
 24230 000009EE FF1E[8502]              	call	far [seg_reinit_ptr]
 24231                                  	;
 24232 000009F2 5F                      	pop	di
 24233 000009F3 07                      	pop	es				; get back end of BIOS
 24234 000009F4 C3                      	retn
 24235                                  
 24236                                  ;MovBIOS endp
 24237                                  
 24238                                  ;endif ; ROMDOS
 24239                                  
 24240                                  ; 11/12/2022
 24241                                  %if 0
 24242                                  
 24243                                  ; 24/03/2019
 24244                                  
 24245                                  ; ----------------------------------------------------------------------
 24246                                  ;
 24247                                  ; procedure : MovDOS
 24248                                  ;
 24249                                  ;		Moves DOS code into requested area
 24250                                  ;
 24251                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24252                                  ;	     CX    - size of DOS code to be moved
 24253                                  ;
 24254                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24255                                  ;
 24256                                  ; ----------------------------------------------------------------------
 24257                                  
 24258                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24259                                  
 24260                                  ;ifndef ROMDOS
 24261                                  
 24262                                  MovDOS:
 24263                                  	; 14/05/2019
 24264                                  	; 27/03/2019 - Retro DOS v4.0
 24265                                  
 24266                                  	; 11/12/2022
 24267                                  	; ds = cs
 24268                                  
 24269                                  	; 23/10/2022
 24270                                  	;push	ds ; *//
 24271                                  	
 24272                                  	push	es
 24273                                  	push	di
 24274                                  
 24275                                  	; 11/12/2022
 24276                                  	push	ds ; *// ; 11/12/202
 24277                                  
 24278                                  	; 29/04/2019
 24279                                  	lds	si,[dosinit] ; 11/12/2022
 24280                                  	; 23/10/2022
 24281                                  	;lds	si,[cs:dosinit]
 24282                                  	; 03/09/2023
 24283                                  	mov	ax,si
 24284                                  
 24285                                  	rep	movsb
 24286                                  
 24287                                  	pop	ds ; *// ; 11/12/2022
 24288                                  
 24289                                  	pop	bx				; get back offset into which
 24290                                  						;  DOS was moved
 24291                                  	;mov	ax,[dosinit] ; 03/09/2023
 24292                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24293                                  						;  wants to run
 24294                                  	sub	ax,bx
 24295                                  	call	off_to_para
 24296                                  	pop	bx				; get the segment at which
 24297                                  						;  we moved DOS into
 24298                                  	sub	bx,ax				; Adjust segment
 24299                                  	
 24300                                  	; 11/12/2022
 24301                                  	; 23/10/2022
 24302                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24303                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24304                                  	; 11/12/2022
 24305                                  	mov	[CURRENT_DOS_LOCATION],bx
 24306                                  		
 24307                                  	; 27/03/2019
 24308                                  	;pop	ds ; *//
 24309                                  	; ds = cs
 24310                                  	;mov	[FINAL_DOS_LOCATION],bx
 24311                                  
 24312                                  	retn
 24313                                  
 24314                                  ;endif ;ROMDOS
 24315                                  
 24316                                  %endif
 24317                                  
 24318                                  ; ----------------------------------------------------------------------
 24319                                  ;
 24320                                  ; procedure : AllocMemForDOS
 24321                                  ;
 24322                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 24323                                  ;
 24324                                  ;	Out : AX - seg of allocated memoryblock
 24325                                  ;
 24326                                  ; ----------------------------------------------------------------------
 24327                                  
 24328                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24329                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24330                                  
 24331                                  ;ifndef ROMDOS
 24332                                  
 24333                                  AllocMemForDOS:
 24334                                  	; 11/12/2022
 24335                                  	; 14/05/2019
 24336                                  	; 27/03/2019 - Retro DOS v4.0
 24337                                  	; ds = cs
 24338                                  	;mov	ax,BCode_end
 24339                                  	;sub	ax,BCode_start		; BIOS code size
 24340                                  	; 23/10/2022
 24341 000009F5 B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 24342                                  					; 30/12/2022
 24343                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24344                                  	;sub	ax,BCODE_START ; 30h
 24345                                  	; 09/12/2022
 24346 000009F8 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 24347                                  	; 24/03/2019 - Retro DOS v4.0 
 24348                                  	; 02/11/2022
 24349                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 24350                                  	; 11/12/2022
 24351                                  	; ds = cs
 24352                                  	;add	ax,[lo_doscod_size]
 24353                                  	; 08/03/2025 (MiniDOS)
 24354 000009FB 0306[8102]              	add	ax,[dos_code_size]
 24355 000009FF 83C00F                  	add	ax,15
 24356 00000A02 E87B02                  	call	off_to_para			; convert to para
 24357                                  	; 23/10/2022
 24358                                  	; 14/05/2019
 24359                                  	;inc	ax ; + 1 paragraph for MCB
 24360 00000A05 09DB                    	or	bx,bx				; M012
 24361 00000A07 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 24362 00000A09 741A                    	jz	short update_arena		; M012
 24363 00000A0B B448                    	mov	ah,48h				; request DOS
 24364 00000A0D CD21                    	int	21h
 24365 00000A0F 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 24366                                   	; 23/10/2022
 24367                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 24368 00000A11 83E803                  	sub	ax,3				; Take care ORG 30h of
 24369                                  						;  BIOS code
 24370 00000A14 8EC0                    	mov	es,ax
 24371                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 24372                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 24373                                  	; 14/05/2019
 24374                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 24375                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 24376                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 24377                                  	; 23/10/2022
 24378 00000A16 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 24379 00000A1D 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 24380                                  
 24381 00000A24 C3                      	retn
 24382                                  
 24383                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 24384                                  ;	  using DOS itself causes an arena to be generated.
 24385                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 24386                                  ;	  assume that the device drivers are loaded into
 24387                                  ;	  the first arena. For this reason, MagicDrv's
 24388                                  ;	  main device driver header arena is manually
 24389                                  ;	  truncated from the arena chain, and the space
 24390                                  ;	  for DOS is allocated using the following
 24391                                  ;	  simple code, which also assumes that the
 24392                                  ;	  first arena is the free one where DOS's low
 24393                                  ;	  stub will go.
 24394                                  ;
 24395                                  ; M012 : BEGIN
 24396                                  
 24397                                  	; 23/10/2022
 24398                                  update_arena:
 24399 00000A25 1E                      	push	ds ; ds = cs
 24400 00000A26 57                      	push	di
 24401 00000A27 51                      	push	cx
 24402 00000A28 52                      	push	dx
 24403                                  	; 23/10/2022
 24404                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 24405                                  	; 11/12/2022
 24406                                  	; ds = cs 
 24407 00000A29 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 24408 00000A2D 4F                      	dec	di
 24409 00000A2E 4F                      	dec	di				; Arena head is immediately
 24410                                  						;  before sysvar
 24411 00000A2F 8E05                    	mov	es,[di]				; es = arena head
 24412                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 24413 00000A31 268B0E0300              	mov	cx,[es:3]
 24414 00000A36 39D9                    	cmp	cx,bx				; is it sufficient ?
 24415 00000A38 7227                    	jb	short FatalErr			; no, fatal error
 24416                                  
 24417                                  	;mov	dl,[es:ARENA.SIGNATURE]
 24418 00000A3A 268A160000              	mov	dl,[es:0]
 24419 00000A3F 8CC0                    	mov	ax,es
 24420 00000A41 01D8                    	add	ax,bx				; ax = new arena head
 24421 00000A43 8905                    	mov	[di],ax				; store it in DOS data area
 24422 00000A45 8ED8                    	mov	ds,ax
 24423                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 24424 00000A47 88160000                	mov	[0],dl
 24425                                  	;mov	word [ARENA.OWNER],0		; free
 24426 00000A4B C70601000000            	mov	word [1],0
 24427 00000A51 29D9                    	sub	cx,bx				; size of the new block
 24428                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 24429 00000A53 890E0300                	mov	[3],cx
 24430 00000A57 8CC0                    	mov	ax,es				; return seg to the caller
 24431                                  	; 23/10/2022
 24432                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 24433 00000A59 83E803                  	sub	ax,3				;  BIOS code
 24434 00000A5C 5A                      	pop	dx
 24435 00000A5D 59                      	pop	cx
 24436 00000A5E 5F                      	pop	di
 24437 00000A5F 1F                      	pop	ds ; ds = cs
 24438 00000A60 C3                      	retn
 24439                                  ;
 24440                                  ; M012 : END
 24441                                  ;
 24442                                  FatalErr:
 24443 00000A61 0E                      	push	cs
 24444 00000A62 1F                      	pop	ds
 24445 00000A63 BA[2E09]                	mov	dx,FEmsg
 24446 00000A66 B409                    	mov	ah,9
 24447 00000A68 CD21                    	int	21h 		; DOS - PRINT STRING
 24448                                  				; DS:DX -> string terminated by "$"
 24449                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 24450 00000A6A E93807                  	jmp	stall
 24451                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 24452                                  	;cli
 24453                                  	;hlt
 24454                                  
 24455                                  ;endif ;ROMDOS
 24456                                  
 24457                                  ; 25/03/2019 - Retro DOS v4.0
 24458                                  
 24459                                  ; ----------------------------------------------------------------------
 24460                                  ;
 24461                                  ; procedure : AllocHMA
 24462                                  ;
 24463                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 24464                                  ;	  up there. If it gets any sort of error, it will return with
 24465                                  ;	  carry set so that we can resort to running low.
 24466                                  ;
 24467                                  ;	It also returns ES: -> 0ffffh if it returns success
 24468                                  ;
 24469                                  ; ----------------------------------------------------------------------
 24470                                  
 24471                                  AllocHMA:
 24472                                  ;	cas note:  The pre-286 check is no longer needed here since the
 24473                                  ;		   presence of XMS is sufficient. However, this code hasn't
 24474                                  ;		   been deleted because it can be recycled for skipping the
 24475                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 24476                                  ;		   in the case of a pre-286.
 24477                                  
 24478                                  ;;	see if we're running on a pre-286. If not, force low.
 24479                                  ;
 24480                                  ;	xor	ax,ax
 24481                                  ;	pushf			; save flags (like int)
 24482                                  ;	push	ax
 24483                                  ;	popf
 24484                                  ;	pushf
 24485                                  ;	pop	ax
 24486                                  ;	popf			; restore original flags (like int)
 24487                                  ;	and	ax,0F000h
 24488                                  ;	cmp	ax,0F000h	; 8088/8086?
 24489                                  ;	jz	short grab_hma_error
 24490                                  
 24491                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24492                                  	; (SYSINIT:0A26h)
 24493                                  
 24494                                  	; 13/04/2024 - Retro DOS v5.0
 24495                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C41h) 
 24496                                  
 24497 00000A6D 1E                      	push	ds
 24498                                  	;;mov	ax,Bios_Data
 24499                                  	;mov	ax,KERNEL_SEGMENT
 24500                                  	; 21/10/2022
 24501 00000A6E B87000                  	mov	ax,DOSBIODATASEG ; 70h
 24502 00000A71 8ED8                    	mov	ds,ax
 24503                                  
 24504 00000A73 E84A00                  	call	IsXMSLoaded
 24505 00000A76 7545                    	jnz	short grabhma_error
 24506                                  
 24507 00000A78 B81043                  	mov	ax,4310h
 24508 00000A7B CD2F                    	int	2Fh		; get the vector into es:bx
 24509                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 24510                                  		; Return: ES:BX -> driver entry point
 24511                                  
 24512 00000A7D 891E[0E00]              	mov	[xms],bx
 24513                                  	;mov	[0Eh], bx
 24514 00000A81 8C06[1000]              	mov	[xms+2],es
 24515                                  	;mov	[10h],es
 24516                                  
 24517 00000A85 B401                    	mov	ah,1		; request HMA
 24518 00000A87 BAFFFF                  	mov	dx,0FFFFh
 24519                                  	;call	dword ptr ds:0Eh
 24520 00000A8A FF1E[0E00]              	call	far [xms]
 24521 00000A8E 48                      	dec	ax
 24522 00000A8F 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 24523                                  
 24524                                  ;------ Himem may be lying because it has allocated mem for int 15
 24525                                  
 24526 00000A91 B488                    	mov	ah,88h
 24527 00000A93 CD15                    	int	15h
 24528                                  		; Get Extended Memory Size
 24529                                  		; Return: CF clear on success
 24530                                  		; AX = size of memory above 1M in K
 24531 00000A95 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 24532                                  	;jb	short grabhma_error
 24533                                  	; 11/12/2022
 24534 00000A98 7224                    	jb	short grabhma_err ; cf=1
 24535                                  allocHMA_1:
 24536 00000A9A B405                    	mov	ah,5		; localenableA20
 24537                                  	;call	dword ptr ds:0Eh
 24538 00000A9C FF1E[0E00]              	call	far [xms]
 24539 00000AA0 48                      	dec	ax
 24540 00000AA1 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 24541                                  
 24542 00000AA3 E89D01                  	call	IsVDiskInstalled
 24543 00000AA6 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 24544                                  
 24545 00000AA8 B8FFFF                  	mov	ax,0FFFFh
 24546 00000AAB 8EC0                    	mov	es,ax
 24547 00000AAD 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 24548 00000AB4 26813E10003412          	cmp	word [es:10h],1234h
 24549                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 24550                                  	; 11/12/2022
 24551 00000ABB 7401                    	je	short allocHMA_ok	
 24552                                  
 24553                                  ; 11/12/2022
 24554                                  ;	; 11/12/2022
 24555                                  ;	; cf=0
 24556                                  ;	;clc
 24557                                  ;	pop	ds
 24558                                  ;	retn
 24559                                  
 24560                                  grabhma_error:
 24561 00000ABD F9                      	stc
 24562                                  	; 11/12/022
 24563                                  grabhma_err:	; cf=1
 24564                                  allocHMA_ok:	; cf=0
 24565 00000ABE 1F                      	pop	ds
 24566 00000ABF C3                      	retn
 24567                                  
 24568                                  ; ----------------------------------------------------------------------
 24569                                  ;
 24570                                  ; procedure : IsXMSLoaded
 24571                                  ;
 24572                                  ;             Checks whether a XMS driver is loaded
 24573                                  ;
 24574                                  ; Returns : Z flag set if XMS driver loaded
 24575                                  ;           Z flag reset if no XMS drivers are present
 24576                                  ;
 24577                                  ; ----------------------------------------------------------------------
 24578                                  
 24579                                  IsXMSLoaded:
 24580 00000AC0 B80043                  	mov	ax,4300h
 24581 00000AC3 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 24582                                  				; Return: AL = 80h XMS driver installed
 24583                                  				; AL <> 80h no driver
 24584 00000AC5 3C80                    	cmp	al,80h		; XMS installed?
 24585 00000AC7 C3                      	retn
 24586                                  
 24587                                  ; ----------------------------------------------------------------------
 24588                                  ; procedure : FTryToMovDOSHi
 24589                                  ;
 24590                                  ;		Called from HMA suballoc calls
 24591                                  ;	
 24592                                  ; ----------------------------------------------------------------------
 24593                                  
 24594                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24595                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 24596                                  
 24597                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24598                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 24599                                  
 24600                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 24601                                  
 24602                                  FTryToMovDOSHi:	; proc	far
 24603                                  
 24604 00000AC8 50                      	push	ax
 24605 00000AC9 53                      	push	bx
 24606 00000ACA 51                      	push	cx
 24607 00000ACB 52                      	push	dx
 24608 00000ACC 56                      	push	si
 24609 00000ACD 57                      	push	di
 24610 00000ACE 1E                      	push	ds
 24611 00000ACF 06                      	push	es
 24612                                  
 24613                                  	; 23/10/2022
 24614                                  	; 27/03/2019 - Retro DOS v4.0
 24615                                  	; 11/12/2022
 24616 00000AD0 0E                      	push	cs
 24617 00000AD1 1F                      	pop	ds
 24618                                  
 24619                                  	;cmp	byte [cs:runhigh],0FFh
 24620                                  	; 11/12/2022
 24621 00000AD2 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24622 00000AD7 7503                    	jne	short _ftymdh_1
 24623                                  
 24624                                  	; ds = cs
 24625 00000AD9 E8A2FE                  	call	TryToMovDOSHi
 24626                                  _ftymdh_1:
 24627 00000ADC 07                      	pop	es
 24628 00000ADD 1F                      	pop	ds
 24629 00000ADE 5F                      	pop	di
 24630 00000ADF 5E                      	pop	si
 24631 00000AE0 5A                      	pop	dx
 24632 00000AE1 59                      	pop	cx
 24633 00000AE2 5B                      	pop	bx
 24634 00000AE3 58                      	pop	ax
 24635                                  
 24636 00000AE4 CB                      	retf
 24637                                  
 24638                                  ; ----------------------------------------------------------------------
 24639                                  ;
 24640                                  ; following piece of code will be moved into a para boundary. And the para
 24641                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 24642                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 24643                                  ; to determine free extended memory.
 24644                                  ;
 24645                                  ; For more details read "power programming" column by Ray Duncan in the
 24646                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 24647                                  ;
 24648                                  ; ----------------------------------------------------------------------
 24649                                  
 24650                                  	; 30/12/2023 - Retro DOS 5.0
 24651 00000AE5 00                      	db	0
 24652                                  
 24653                                  ; 13/04/2024
 24654                                  ;align 2
 24655                                  
 24656                                  	; 30/12/2023
 24657                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 24658                                  
 24659                                  StartVDHead:
 24660                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 24661                                  
 24662 00000AE6 00000000                	dd	0		; link to next device driver
 24663 00000AEA 0080                    	dw	8000h		; device attribute
 24664 00000AEC 0000                    	dw	0		; strategy routine offset
 24665 00000AEE 0000                    	dw	0		; interrupt routine offset
 24666 00000AF0 01                      	db	1		; number of units
 24667                                  	;db	7 dup(0) 
 24668 00000AF1 00<rep 7h>              	times	7 db 0 		; reserved area
 24669                                  VDiskSig1:
 24670 00000AF8 564449534B              	db	'VDISK'
 24671                                  
 24672                                  VLEN1	equ	($-VDiskSig1)
 24673                                  
 24674 00000AFD 202056332E33            	db	'  V3.3'	; vdisk label
 24675                                  	;db	15 dup (0)	; pad
 24676 00000B03 00<rep Fh>              	times	15 db 0
 24677 00000B12 0000                    	dw	0		; bits 0-15 of free HMA
 24678 00000B14 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 24679                                  VDInt19:
 24680 00000B15 EA                      	db	0EAh		; jmp to old vector
 24681                                  OldVDInt19:
 24682 00000B16 00000000                	dd	0		; Saved int 19 vector
 24683                                  
 24684                                  EndVDHead: ; label byte
 24685                                  
 24686                                  VDiskHMAHead:	
 24687 00000B1A 000000                  	db	0,0,0		; non-bootable disk
 24688                                  VDiskSig2:
 24689 00000B1D 564449534B              	db	'VDISK'
 24690                                  
 24691                                  VLEN2	equ	($-VDiskSig2)
 24692                                  
 24693 00000B22 332E33                  	db	'3.3'		; OEM - signature
 24694 00000B25 8000                    	dw	128		; number of bytes/sector
 24695 00000B27 01                      	db	1		; sectors/cluster
 24696 00000B28 0100                    	dw	1		; reserved sectors
 24697 00000B2A 01                      	db	1		; number of FAT copies
 24698 00000B2B 4000                    	dw	64		; number of root dir entries
 24699 00000B2D 0002                    	dw	512		; number of sectors
 24700 00000B2F FE                      	db	0FEh		; media descriptor
 24701 00000B30 0600                    	dw	6		; number of sectors/FAT
 24702 00000B32 0800                    	dw	8		; sectors per track
 24703 00000B34 0100                    	dw	1		; number of heads
 24704 00000B36 0000                    	dw	0		; number of hidden sectors
 24705 00000B38 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 24706                                  
 24707                                  EndVDiskHMAHead: ; label byte
 24708                                  
 24709                                  ; ----------------------------------------------------------------------
 24710                                  ;
 24711                                  ; procedure : InstVDiskHeader
 24712                                  ;
 24713                                  ;             Installs the VDISK header to reserve the 64k of HMA
 24714                                  ;	      It puts a 32 byte header at 10000:0 and
 24715                                  ;	      another header at (seg of int19):0
 24716                                  ;
 24717                                  ; Inputs : None
 24718                                  ;
 24719                                  ; Outputs : None
 24720                                  ;
 24721                                  ; USES : DS,SI,AX,CX,DX
 24722                                  ;
 24723                                  ; ----------------------------------------------------------------------
 24724                                  
 24725                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24726                                  
 24727                                  InstVDiskHeader:
 24728 00000B3A 31C0                    	xor	ax,ax
 24729 00000B3C 8ED8                    	mov	ds,ax			; seg of int vect table
 24730                                  
 24731                                  ;-------------- save old int 19 vector
 24732                                  
 24733                                  	; 23/10/2022
 24734 00000B3E A16400                  	mov	ax,[19h*4]
 24735                                  	;mov	[OldVDInt19],ax
 24736 00000B41 2EA3[160B]              	mov	[cs:OldVDInt19],ax
 24737 00000B45 A16600                  	mov	ax,[19h*4+2]
 24738                                  	;mov	[OldVDInt19+2],ax
 24739 00000B48 2EA3[180B]              	mov	[cs:OldVDInt19+2],ax
 24740                                  
 24741                                  ;-------------- calculate seg of new int 19 handler
 24742                                  
 24743 00000B4C B448                    	mov	ah,48h			; allocate memory
 24744                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 24745                                  	; 23/10/2022
 24746 00000B4E BB0400                  	mov	bx,4
 24747 00000B51 CD21                    	int	21h
 24748                                  
 24749                                  ;	if carry, fatal hanging error!!!!!
 24750                                  
 24751 00000B53 48                      	dec	ax			; point to arena
 24752 00000B54 8EC0                    	mov	es,ax
 24753                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 24754 00000B56 26C70601000800          	mov	word [es:1],8
 24755                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 24756 00000B5D 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 24757 00000B64 40                      	inc	ax
 24758 00000B65 8EC0                    	mov	es,ax			; get back to allocated memory
 24759                                  
 24760                                  ;-------------- install new int 19 vector
 24761                                  
 24762 00000B67 FA                      	cli				; no reboots at this time
 24763                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 24764 00000B68 C70664002F00            	mov	word [19h*4],47
 24765 00000B6E A36600                  	mov	[19h*4+2],ax
 24766                                  
 24767                                  ;-------------- move the code into proper place
 24768                                  
 24769                                  	;mov	cx,(EndVDHead-StartVDHead)
 24770 00000B71 B93400                  	mov	cx,52
 24771 00000B74 BE[E60A]                	mov	si,StartVDHead
 24772 00000B77 31FF                    	xor	di,di
 24773 00000B79 0E                      	push	cs
 24774 00000B7A 1F                      	pop	ds
 24775 00000B7B FC                      	cld
 24776 00000B7C F3A4                    	rep	movsb
 24777 00000B7E FB                      	sti				; BUGBUG is sti OK now?
 24778                                  
 24779                                  ;-------------- mov the HMA VDisk head into HMA
 24780                                  
 24781                                  	; 23/10/2022
 24782 00000B7F 57                      	push	di
 24783 00000B80 06                      	push	es
 24784                                  
 24785                                  	;mov	ax,0FFFFh
 24786                                  	;mov	es,ax
 24787                                  	; 03/09/2023
 24788 00000B81 49                      	dec	cx
 24789                                  	; cx = 0FFFFh
 24790 00000B82 8EC1                    	mov	es,cx
 24791                                  
 24792 00000B84 BF1000                  	mov	di,10h
 24793                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 24794 00000B87 B92000                  	mov	cx,32
 24795 00000B8A BE[1A0B]                	mov	si,VDiskHMAHead
 24796 00000B8D F3A4                    	rep	movsb			; ds already set to cs
 24797                                  
 24798 00000B8F 5F                      	pop	di
 24799 00000B90 07                      	pop	es
 24800                                  
 24801 00000B91 C3                      	retn
 24802                                  
 24803                                  ; ----------------------------------------------------------------------
 24804                                  ; procedure : ClrVDISKHeader
 24805                                  ;
 24806                                  ;		Clears the first 32 bytes at 1MB boundary
 24807                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 24808                                  ;		left by previous DOS=HIGH session
 24809                                  ;
 24810                                  ; ----------------------------------------------------------------------
 24811                                  
 24812                                  struc desc
 24813 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 24814 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 24815 00000004 ??                       .hi_byte:	resb 	1		; address
 24816 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 24817 00000006 ????                     .reserved:	resw	1		;
 24818                                   .size:
 24819                                  endstruc
 24820                                  
 24821                                  		; 23/10/2022
 24822                                  bmove:		;label byte
 24823                                  
 24824                                  dummy:		;times desc.size db 0	; desc	<>
 24825 00000B92 00<rep 8h>              		times 8 db 0		 
 24826                                  gdt:		;times desc.size db 0	; desc	<>
 24827 00000B9A 00<rep 8h>              		times 8 db 0
 24828 00000BA2 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 24829 00000BA4 0000                    		dw	0
 24830 00000BA6 00                      		db	0
 24831 00000BA7 93                      		db	93h
 24832 00000BA8 0000                    		dw	0
 24833 00000BAA FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 24834 00000BAC 0000                    		dw	0
 24835 00000BAE 10                      		db	10h
 24836 00000BAF 93                      		db	93h
 24837 00000BB0 0000                    		dw	0
 24838                                  
 24839                                  rombios_code:	;times desc.size db 0	; desc	<>
 24840 00000BB2 00<rep 8h>              		times 8 db 0
 24841                                  temp_stack:	;times desc.size db 0	; desc	<>
 24842 00000BBA 00<rep 8h>              		times 8 db 0
 24843                                  
 24844 00000BC2 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 24845                                  
 24846                                  
 24847                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 24848                                  
 24849                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 24850                                  ; (SYSINIT:0CA6h)
 24851                                  
 24852                                  ClrVDISKHeader:	; proc	near
 24853                                  
 24854                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 24855                                  ;;-----------------------------------------------------------	      ;I070
 24856                                  ;; The following workaround get around a problem with the	      ;I070
 24857                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 24858                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 24859                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 24860                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 24861                                  ;; move crashes the system. We can do this because these	      ;I070
 24862                                  ;; systems clear all of memory on a cold boot.			      ;I070
 24863                                  ;								      ;I070
 24864                                  ;               in      al,64h         ; Test for password servr mode ;I070
 24865                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 24866                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 24867                                  ;                                      ; Check for Tortugas...	      ;I070
 24868                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 24869                                  ;               je      short ClrVDISKno                              ;I070
 24870                                  ;                                      ; Check for mod 30-286	      ;I070
 24871                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 24872                                  ;               jne     short ClrVDISKok			      ;I070
 24873                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 24874                                  ;								      ;I070
 24875                                  ;ClrVDISKok:							      ;I070
 24876                                  ;-----------------------------------------------------------	      ;I070
 24877                                  
 24878                                  	; 30/12/2023 - Retro DOS v5.0
 24879                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 24880                                  ClrVDISKHeader:
 24881 00000BE2 E464                    	in	al,64h	; 8042 keyboard controller status register
 24882                                  			; 7:  PERR    1=parity error in data received from keyboard
 24883                                  			;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 24884                                  			; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 24885                                  			; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 24886                                  			;    +------------------------------+-----------------------------------+
 24887                                  			; 4:  INH     0=keyboard communications inhibited
 24888                                  			; 3:  A2      0=60h was the port last written to, 1=64h was last
 24889                                  			; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 24890                                  			; 1:  IBF     1=input buffer full (keyboard can't accept data)
 24891                                  			; 0:  OBF     1=output buffer full (data from keyboard is available)
 24892 00000BE4 A810                    	test	al,10h	; test bit 4 - Is keyboard inhibited?
 24893 00000BE6 7511                    	jnz	short ClrVDISKok ; No, go do block move
 24894                                  	; 30/12/2023
 24895                                  	; ds = cs	
 24896 00000BE8 813E[B902]F819          	cmp	word [sys_model_byte],19F8h ; check for TORTUGA models
 24897 00000BEE 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 24898                                  				 ; (while 8042 is disabled)
 24899 00000BF0 813E[B902]FC09          	cmp	word [sys_model_byte],9FCh ; check for PS/2 30-286 model
 24900 00000BF6 7501                    	jnz	short ClrVDISKok
 24901                                  ClrVDISKno:
 24902 00000BF8 C3                      	retn
 24903                                  ; ---------------------------------------------------------------------------
 24904                                  	; 30/12/2023
 24905                                  ClrVDISKok:
 24906                                  	; 12/12/2022
 24907                                  	; ds = cs
 24908                                  
 24909                                  	; 30/12/2022 - Retro DOS v4.2
 24910                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 24911                                  
 24912 00000BF9 06                      	push	es
 24913 00000BFA 8CC8                    	mov	ax,cs
 24914 00000BFC 89C2                    	mov	dx,ax
 24915 00000BFE B10C                    	mov	cl,12
 24916 00000C00 D3EA                    	shr	dx,cl
 24917 00000C02 B104                    	mov	cl,4
 24918 00000C04 D3E0                    	shl	ax,cl
 24919 00000C06 05[C20B]                	add	ax,ClrdVDISKHead
 24920 00000C09 80D200                  	adc	dl,0
 24921                                  
 24922                                  	;; 23/10/2022
 24923                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 24924                                  	;mov	[cs:src_desc+2],ax
 24925                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 24926                                  	;mov	[cs:src_desc+4],dl
 24927                                  	; 12/12/2022
 24928                                  	;mov	[src_desc+desc.lo_word],ax
 24929 00000C0C A3[A40B]                	mov	[src_desc+2],ax
 24930                                  	;mov	[src_desc+desc.hi_byte],dl
 24931 00000C0F 8816[A60B]              	mov	[src_desc+4],dl
 24932                                  
 24933 00000C13 B91000                  	mov	cx,16	; 16 words
 24934 00000C16 0E                      	push	cs
 24935 00000C17 07                      	pop	es
 24936 00000C18 BE[920B]                	mov	si,bmove
 24937 00000C1B B487                    	mov	ah,87h
 24938 00000C1D CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 24939                                  			; CX = number of words to move 
 24940                                  			; ES:SI -> global descriptor table
 24941                                  			; Return: CF set on error, AH = status
 24942 00000C1F 07                      	pop	es
 24943 00000C20 C3                      	retn
 24944                                  
 24945                                  ; ----------------------------------------------------------------------
 24946                                  ;
 24947                                  ; procedure : SaveFreeHMAPtr
 24948                                  ;
 24949                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 24950                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 24951                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 24952                                  ;		the offset.
 24953                                  ;
 24954                                  ; Inputs : ES:DI - pointer to free HMA
 24955                                  ; Output : FreeHMAPtr in BIOS data segment updated
 24956                                  ;
 24957                                  ; ----------------------------------------------------------------------
 24958                                  
 24959                                  SaveFreeHMAPtr:
 24960                                  	; 03/09/2023
 24961 00000C21 1E                      	push	ds
 24962 00000C22 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 24963 00000C25 8ED8                    	mov	ds,ax
 24964                                  	;
 24965 00000C27 8CC3                    	mov	bx,es
 24966 00000C29 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 24967                                  	; 03/09/2023
 24968 00000C2C A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 24969                                  	;
 24970 00000C2F 29D8                    	sub	ax,bx
 24971 00000C31 83C70F                  	add	di,15		   ; para round
 24972 00000C34 83E7F0                  	and	di,0FFF0h
 24973 00000C37 B104                    	mov	cl,4
 24974 00000C39 D3E0                    	shl	ax,cl
 24975 00000C3B 29C7                    	sub	di,ax
 24976                                  	;
 24977                                  	; 03/09/2023
 24978                                  	;push	ds
 24979                                  	;;mov	ax,Bios_Data ; 0070h
 24980                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 24981                                  	; 21/10/2022
 24982                                  	; 03/09/2023
 24983                                  	;mov	ax,DOSBIODATASEG ; 0070h
 24984                                  	;mov	ds,ax
 24985                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 24986 00000C3D 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 24987                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 24988 00000C41 1F                      	pop	ds
 24989 00000C42 C3                      	retn
 24990                                  
 24991                                  ; ----------------------------------------------------------------------
 24992                                  ;
 24993                                  ; procedure : IsVDiskInstalled
 24994                                  ;
 24995                                  ;		Checks for the presence of VDISK header at 1MB boundary
 24996                                  ;		& INT 19 vector
 24997                                  ;
 24998                                  ; Inputs  : A20 flag should be ON
 24999                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 25000                                  ;
 25001                                  ; ----------------------------------------------------------------------
 25002                                  
 25003                                  IsVDiskInstalled:
 25004 00000C43 31C0                    	xor	ax,ax
 25005 00000C45 8ED8                    	mov	ds,ax
 25006 00000C47 8E1E4E00                	mov	ds,[19*4+2]
 25007                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 25008                                  	; 23/10/2022
 25009 00000C4B BE1200                  	mov	si,12h ; 18
 25010                                  	;mov	cx,VLEN1 ; 5
 25011 00000C4E B90500                  	mov	cx,5
 25012 00000C51 0E                      	push	cs
 25013 00000C52 07                      	pop	es
 25014 00000C53 BF[F80A]                	mov	di,VDiskSig1
 25015 00000C56 F3A6                    	rep	cmpsb
 25016 00000C58 740F                    	je	short ivdins_retn
 25017 00000C5A B8FFFF                  	mov	ax,0FFFFh
 25018 00000C5D 8ED8                    	mov	ds,ax
 25019                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 25020 00000C5F BE1300                  	mov	si,13h
 25021 00000C62 BF[1D0B]                	mov	di,VDiskSig2
 25022                                  	;;mov	cx,VLEN2  ; 5
 25023                                  	;mov	cx,5
 25024                                  	; 03/09/2023
 25025 00000C65 B105                    	mov	cl,5
 25026 00000C67 F3A6                    	rep	cmpsb
 25027                                  ivdins_retn: 
 25028 00000C69 C3                      	retn			; returns the Zero flag
 25029                                  
 25030                                  ; ----------------------------------------------------------------------
 25031                                  ;
 25032                                  ; procedure : CPMHack
 25033                                  ;
 25034                                  ;		Copies the code from 0:c0 into ffff:0d0h
 25035                                  ;		for CPM compatibility
 25036                                  ;
 25037                                  ; ----------------------------------------------------------------------
 25038                                  
 25039                                  	; 11/12/2022
 25040                                  CPMHack:
 25041 00000C6A 1E                      	push	ds
 25042 00000C6B B9FFFF                  	mov	cx,0FFFFh
 25043 00000C6E 8EC1                    	mov	es,cx		; ES = FFFF
 25044                                  	;xor	cx,cx
 25045                                  	; 11/12/2022
 25046 00000C70 41                      	inc	cx  ; cx = 0
 25047 00000C71 8ED9                    	mov	ds,cx		; DS = 0
 25048 00000C73 BEC000                  	mov	si,0C0h
 25049 00000C76 BFD000                  	mov	di,0D0h
 25050                                  	;mov	cx,5
 25051 00000C79 B105                    	mov	cl,5
 25052 00000C7B FC                      	cld
 25053 00000C7C F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 25054 00000C7E 1F                      	pop	ds
 25055 00000C7F C3                      	retn
 25056                                  
 25057                                  ; ----------------------------------------------------------------------
 25058                                  ;
 25059                                  ; procedure : off_to_para
 25060                                  ;
 25061                                  ; ----------------------------------------------------------------------
 25062                                  off_to_para:
 25063 00000C80 D1E8                    	shr	ax,1
 25064 00000C82 D1E8                    	shr	ax,1
 25065 00000C84 D1E8                    	shr	ax,1
 25066 00000C86 D1E8                    	shr	ax,1
 25067 00000C88 C3                      	retn
 25068                                  
 25069                                  ; ----------------------------------------------------------------------
 25070                                  ;**	TempCDS - Create (Temporary?) CDS
 25071                                  ;
 25072                                  ;	ENTRY	?? BUGBUG
 25073                                  ;		(DS) = SysInitSeg
 25074                                  ;	EXIT	?? BUGBUG
 25075                                  ;	USES	?? BUGBUG
 25076                                  ; ----------------------------------------------------------------------
 25077                                  
 25078                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25079                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25080                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25081                                  TempCDS:
 25082 00000C89 C43E[6D02]              	les	di,[DOSINFO]
 25083 00000C8D 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 25084                                  
 25085                                  	;mov	cl,[es:di+20h]
 25086 00000C91 30ED                    	xor	ch,ch			; (cx) = # of block devices
 25087                                  
 25088 00000C93 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 25089                                  	;mov	[es:di+21h],cl	
 25090                                  
 25091                                  	;mov	al,cl
 25092                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 25093                                  	;;mov	ah,88
 25094                                  	;mul	ah			; (ax) = byte size for those CDSs
 25095                                  	; 30/12/2023
 25096 00000C97 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 25097                                  	;mov	al,88
 25098 00000C99 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 25099                                  
 25100 00000C9B E8CE04                  	call	ParaRound		; (ax) = paragraph size for CDSs
 25101 00000C9E 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 25102                                  
 25103                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 25104                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 25105                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 25106                                  ;		   variable which has the top of free memory for
 25107                                  ;		   device driver loads, etc.
 25108                                  
 25109 00000CA2 29C6                    	sub	si,ax
 25110                                  
 25111                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 25112                                  ;		that automatically updates alloclim every time we
 25113                                  ;		set up some new CDSs. Instead, I've added code
 25114                                  ;		which pre-allocates space for 26 CDSs. This
 25115                                  ;	        way we've got room for worst case CDSs before
 25116                                  ;		we place MagicDrv.sys
 25117                                  ;
 25118                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 25119                                  
 25120                                  	; 30/12/2022
 25121                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25122                                  	; (SYSINIT:0C52h)
 25123                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 25124                                  
 25125 00000CA4 26897518                	mov	[es:di+SYSI_CDS+2],si
 25126                                  	;mov	[es:di+18h],si
 25127 00000CA8 89F0                    	mov	ax,si
 25128 00000CAA 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 25129                                  	;mov	[word es:di+16h],0
 25130                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 25131 00000CB0 26C535                  	lds	si,[es:di]
 25132 00000CB3 8EC0                    	mov	es,ax
 25133 00000CB5 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 25134                                  
 25135                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 25136                                  ;	info from the corresponding DPB.
 25137                                  ;
 25138                                  ;	(cx) = count of CDSs left to process
 25139                                  ;	(es:di) = address of next CDS
 25140                                  
 25141                                  fooset:
 25142                                  	; 23/10/2022
 25143 00000CB7 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 25144 00000CBB AB                      	stosw				; setup the root as the curdir
 25145                                  	
 25146                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25147                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25148                                  
 25149                                  	; 30/12/2022
 25150                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 25151 00000CBC E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25152                                  
 25153                                  ;	(ds:si) = address of DPB
 25154                                  ;		 (si) = -1 if no drive
 25155                                  
 25156 00000CBF 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 25157 00000CC3 AB                      	stosw
 25158 00000CC4 2EFE06[A702]            	inc	byte [cs:DirStrng]
 25159 00000CC9 31C0                    	xor	ax,ax ; 0
 25160 00000CCB 51                      	push	cx
 25161                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 25162 00000CCC B93F00                  	mov	cx,63	; 23/10/2022
 25163 00000CCF F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 25164                                  
 25165                                  ;	should handle the system that does not have any floppies.
 25166                                  ;	in this case,we are going to pretended there are two dummy floppies
 25167                                  ;	in the system. still they have dpb and cds,but we are going to
 25168                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 25169                                  ;	"invalid drive specification" message when the user try to
 25170                                  ;	access them.
 25171                                  ;
 25172                                  ;	(ax) = 0
 25173                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25174                                  ;	(ds:si) = Next DPB (-1 if none)
 25175                                  
 25176 00000CD1 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 25177 00000CD4 740C                    	je	short fooset_zero	; don't have any physical drive.
 25178                                  
 25179                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 25180                                  ;	if we are faking floppy drives then see if this cds being initialised
 25181                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 25182                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 25183                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 25184                                  ;	for dpb offsets look at inc\dpb.inc.
 25185                                  
 25186                                  	; 03/09/2023
 25187 00000CD6 41                      	inc	cx  ; cx = 1
 25188                                  
 25189 00000CD7 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 25190                                  	;cmp	byte [cs:fake_floppy_drv],1
 25191 00000CDC 750A                    	jne	short normcds 		; machine has floppy drives
 25192                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 25193                                  	;cmp	byte [si],1
 25194 00000CDE 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 25195 00000CE0 7706                    	ja	short normcds
 25196                                  
 25197                                  	; 30/12/2023
 25198                                  	; ax = 0
 25199                                  fooset_zero:
 25200 00000CE2 B103                    	mov	cl,3			; the next dbp pointer
 25201                                  					; AX should be zero here
 25202 00000CE4 F3AB                    	rep	stosw
 25203                                  	; 30/12/2023
 25204                                  	;pop	cx
 25205 00000CE6 EB0F                    	jmp	short get_next_dpb ; findcds
 25206                                  
 25207                                  ;	(ax) = 0
 25208                                  
 25209                                  	; 30/12/2023
 25210                                  ;fooset_zero:
 25211                                  	;mov	cl,3
 25212                                  	;rep	stosw
 25213                                  	;pop	cx
 25214                                  	;jmp	short fincds
 25215                                  
 25216                                  ;*	We have a "normal" DPB and thus a normal CDS.
 25217                                  ;
 25218                                  ;	(ax) = 0
 25219                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25220                                  ;	(ds:si) = Next DPB (-1 if none)
 25221                                  
 25222                                  normcds:
 25223                                  	; 30/12/2023
 25224                                  	;pop	cx
 25225                                  
 25226                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 25227                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 25228                                  ;	this media is a non-fat based one.
 25229                                  
 25230                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 25231                                  	; 23/10/2022
 25232                                  	;cmp	byte [si+8],0
 25233                                  	; 03/09/2023 (ax=0)
 25234 00000CE8 384408                  	cmp	[si+8],al ; 0
 25235 00000CEB 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 25236 00000CED B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 25237                                  	;mov	ax,4000h
 25238                                  setnormcds:
 25239 00000CF0 AB                      	stosw				; curdir_flags
 25240 00000CF1 89F0                    	mov	ax,si
 25241 00000CF3 AB                      	stosw				; curdir_devptr
 25242 00000CF4 8CD8                    	mov	ax,ds
 25243 00000CF6 AB                      	stosw
 25244                                  
 25245                                  get_next_dpb:				; entry point for fake_fooset_zero
 25246                                  	; 30/12/2022
 25247                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25248                                  	; 23/10/2022
 25249                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 25250                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25251                                  fincds:	; get_next_dpb
 25252                                  	; 30/12/2023
 25253 00000CF7 59                      	pop	cx
 25254                                  	; 30/12/2022
 25255                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25256 00000CF8 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 25257 00000CFB AB                      	stosw				; curdir_id
 25258 00000CFC AB                      	stosw				; curdir_id
 25259 00000CFD AB                      	stosw				; curdir_user_word
 25260 00000CFE B80200                  	mov	ax,2
 25261 00000D01 AB                      	stosw				; curdir_end
 25262 00000D02 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 25263 00000D04 AA                      	stosb
 25264 00000D05 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 25265 00000D06 AB                      	stosw
 25266 00000D07 AB                      	stosw
 25267                                  
 25268 00000D08 E2AD                    	loop	fooset
 25269                                  	
 25270 00000D0A 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 25271                                  	
 25272 00000D10 C3                      	retn
 25273                                  
 25274                                  ; ----------------------------------------------------------------------
 25275                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 25276                                  ;
 25277                                  ;	entry:
 25278                                  ;	   al == ASCII CAPS drive letter
 25279                                  ;
 25280                                  ;	exit:
 25281                                  ;	   ds:si -> DPB, or si = -1 if not found
 25282                                  ; ----------------------------------------------------------------------
 25283                                  
 25284                                  ; 30/12/2023
 25285                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 25286                                  
 25287                                  	; 30/12/2022
 25288                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 25289                                  	; 23/10/2022
 25290                                  get_dpb_for_drive_al:
 25291 00000D11 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 25292                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 25293 00000D16 C534                    	lds	si,[si]
 25294 00000D18 2C41                    	sub	al,'A'
 25295                                  
 25296                                  get_dpb_for_drive_1:
 25297                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 25298 00000D1A 3A04                    	cmp	al,[si]
 25299 00000D1C 7408                    	je	short got_dpb_for_drive	;  done if so
 25300                                  
 25301 00000D1E C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25302 00000D21 83FEFF                  	cmp	si,-1
 25303 00000D24 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 25304                                  
 25305                                  got_dpb_for_drive:
 25306 00000D26 C3                      	retn
 25307                                  
 25308                                  ;=======================================================================
 25309                                  
 25310                                  ;**	EndFile - Build DOS structures
 25311                                  ;
 25312                                  ; This procedure is called after the config.sys has been processed and
 25313                                  ; installable device drivers have been loaded (but before "install="
 25314                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 25315                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 25316                                  ; to allow for the safe EXECing of "install=" programs. All memory
 25317                                  ; above these structures is deallocated back to DOS.
 25318                                  ;
 25319                                  ;	ENTRY	?? BUGBUG
 25320                                  ;	EXIT	?? BUGBUG
 25321                                  ;	USES	?? BUGBUG
 25322                                  
 25323                                  ;=======================================================================
 25324                                  ; allocate files
 25325                                  ; ----------------------------------------------------------------------
 25326                                  
 25327                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25328                                  	; (SYSINIT:0CCDh)
 25329                                  
 25330                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25331                                  	; (SYSINIT:0E00h)
 25332                                  
 25333                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25334                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 25335                                  	
 25336                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 25337                                  
 25338                                  endfile:
 25339                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 25340                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 25341                                  ; to confbot.
 25342                                  
 25343                                  ;	if this procedure has been called to take care of install= command,
 25344                                  ;	   then we have to save es,si registers.
 25345                                  
 25346                                  	; 11/12/2022
 25347                                  	; ds = cs
 25348                                  
 25349                                  	; 23/10/2022
 25350                                  	; 31/03/2019
 25351 00000D27 1E                      	push	ds
 25352                                  
 25353                                  	;;mov	ax,Bios_Data ; 0070h
 25354                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25355                                  	; 21/10/2022
 25356 00000D28 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25357 00000D2B 8ED8                    	mov	ds,ax
 25358                                  
 25359                                  	;cmp	word [052Fh],0
 25360 00000D2D 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 25361 00000D32 7505                    	jne	short multrk_flag_done
 25362                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25363                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 25364                                  	; 12/12/2022
 25365 00000D34 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 25366                                  multrk_flag_done:
 25367                                  	; 23/10/2022
 25368                                  	; 31/03/2019
 25369 00000D39 1F                      	pop	ds
 25370                                  
 25371                                  	; 11/12/2022
 25372                                  	; ds = cs
 25373                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 25374                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25375                                  	; (SYSINIT:0E14h)
 25376 00000D3A A1[A102]                	mov	ax,[CONFBOT]
 25377 00000D3D A3[A302]                	mov	[ALLOCLIM],ax
 25378                                  	; 23/10/2022
 25379                                  	;mov	ax, [cs:top_of_cdss]
 25380                                  	;mov	[cs:ALLOCLIM], ax 
 25381                                  
 25382                                  	; 11/12/2022
 25383                                  	; ds = cs
 25384                                  	;push	cs
 25385                                  	;pop	ds
 25386                                  	
 25387                                  	;mov	ax,[CONFBOT]
 25388                                  	;mov	[ALLOCLIM],ax
 25389                                  
 25390                                  ; 18/03/2025 - MiniDOS v1.0
 25391                                  %if 0
 25392                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 25393                                  	;;;
 25394                                  	;;mov	ax,[cs:ALLOCLIM]
 25395                                  	;mov	ax,[ALLOCLIM]
 25396                                  	;mov	[cs:prev_alloclim],ax
 25397                                  	mov	[prev_alloclim],ax
 25398                                  	;mov	ax,[cs:memhi]
 25399                                  	mov	ax,[memhi]
 25400                                  	;mov	[cs:prev_memhi],ax
 25401                                  	mov	[prev_memhi],ax
 25402                                  dosfts:
 25403                                  	;;;
 25404                                  %endif
 25405                                  
 25406 00000D40 E87E35                  	call	round
 25407                                  
 25408                                  	; 11/12/2022
 25409                                  	; ds = cs
 25410 00000D43 A0[9D02]                	mov	al,[FILES]
 25411                                  	; 23/10/2022
 25412                                  	;mov	al,[cs:FILES]
 25413 00000D46 2C05                    	sub	al,5
 25414 00000D48 764B                    	jbe	short dofcbs
 25415                                  
 25416 00000D4A 50                      	push	ax
 25417                                  	;mov	al,devmark_files ; 'F'
 25418 00000D4B B046                    	mov	al,'F'
 25419 00000D4D E86C07                  	call	setdevmark		; set devmark for sfts (files)
 25420 00000D50 58                      	pop	ax
 25421 00000D51 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25422                                  					;  it does sign extend.
 25423                                  	; 11/12/2022
 25424                                  	; ds = cs
 25425 00000D53 8B1E[6003]              	mov	bx,[memlo]
 25426 00000D57 8B16[6203]              	mov	dx,[memhi]
 25427 00000D5B C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25428                                  	; 23/10/2022
 25429                                  	;mov	bx,[cs:memlo]
 25430                                  	;mov	dx,[cs:memhi]
 25431                                  	;lds	di,[cs:DOSINFO]		
 25432                                  
 25433                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 25434 00000D5F C57D04                  	lds	di,[di+4]
 25435                                  
 25436                                  	;mov	[di+SF.SFLink],bx
 25437 00000D62 891D                    	mov	[di],bx
 25438 00000D64 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 25439                                  
 25440 00000D67 0E                      	push	cs
 25441 00000D68 1F                      	pop	ds
 25442                                  
 25443                                  	; 11/12/2022
 25444                                  	; ds = cs
 25445 00000D69 C43E[6003]              	les	di,[memlo]		;point to new sft
 25446                                  	; 23/10/2022
 25447                                  	;les	di,[cs:memlo]
 25448                                  
 25449                                  	;mov	word [es:di+SF.SFLink],-1
 25450 00000D6D 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 25451                                  	;mov	[es:di+SF.SFCount],ax
 25452 00000D72 26894504                	mov	[es:di+4],ax
 25453                                  	; 09/04/2024
 25454 00000D76 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25455                                  	;mov	bl,59
 25456 00000D78 F6E3                    	mul	bl			;ax = number of bytes to clear
 25457 00000D7A 89C1                    	mov	cx,ax
 25458                                  	; 11/12/2022
 25459                                  	; ds = cs
 25460 00000D7C 0106[6003]              	add	[memlo],ax		;allocate memory
 25461                                  	; 23/10/2022
 25462                                  	;add	[cs:memlo],ax
 25463 00000D80 B80600                  	mov	ax,6
 25464                                  	; 11/12/2022
 25465 00000D83 0106[6003]              	add	[memlo],ax		;remember the header too
 25466                                  	;add	[cs:memlo],ax
 25467                                  	; 11/12/2022
 25468 00000D87 800E[E114]02            	or	byte [setdevmarkflag],for_devmark ; 2
 25469                                  	; 23/10/2022
 25470                                  	;or	byte [cs:setdevmarkflag],2
 25471 00000D8C E83235                  	call	round			; check for mem error before the stosb
 25472 00000D8F 01C7                    	add	di,ax
 25473 00000D91 31C0                    	xor	ax,ax
 25474 00000D93 F3AA                    	rep	stosb			;clean out the stuff
 25475                                  
 25476                                  ; allocate fcbs
 25477                                  ; ----------------------------------------------------------------------
 25478                                  
 25479                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25480                                  	; (SYSINIT:0D48h)
 25481                                  dofcbs:
 25482                                  	; 11/12/2022
 25483                                  	; ds = cs
 25484                                  	;push	cs
 25485                                  	;pop	ds
 25486 00000D95 E82935                  	call	round
 25487                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 25488 00000D98 B058                    	mov	al,'X'
 25489 00000D9A E81F07                  	call	setdevmark
 25490                                  	; 11/12/2022
 25491                                  	; ds = cs
 25492 00000D9D A0[9E02]                	mov	al,[FCBS]
 25493                                  	;mov	al,[cs:FCBS]
 25494 00000DA0 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25495                                  					;  it does sign extend.
 25496                                  	; 11/12/2022
 25497 00000DA2 8B1E[6003]              	mov	bx,[memlo]
 25498 00000DA6 8B16[6203]              	mov	dx,[memhi]
 25499 00000DAA C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25500                                  	; 23/10/2022
 25501                                  	;mov	bx,[cs:memlo]
 25502                                  	;mov	dx,[cs:memhi]
 25503                                  	;lds	di,[cs:DOSINFO]
 25504                                  
 25505                                  	;mov	[di+SYSI_FCB],bx
 25506                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 25507                                  	; 23/10/2022
 25508 00000DAE 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 25509 00000DB1 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 25510                                  
 25511 00000DB4 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 25512 00000DB9 30FF                    	xor	bh,bh
 25513                                  	;mov	[di+SYSI_KEEP],bx
 25514 00000DBB 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 25515                                  
 25516 00000DBE 0E                      	push	cs
 25517 00000DBF 1F                      	pop	ds
 25518                                  	
 25519 00000DC0 C43E[6003]              	les	di,[memlo]		;point to new table
 25520                                  	;mov	word [es:di+SF.SFLink],-1
 25521 00000DC4 26C705FFFF              	mov	word [es:di],-1
 25522                                  	;mov	[es:di+SF.SFCount],ax
 25523                                  	; 02/11/2022
 25524 00000DC9 26894504                	mov	[es:di+4],ax
 25525 00000DCD B33B                    	mov	bl,SF_ENTRY.size ; 59
 25526 00000DCF 89C1                    	mov	cx,ax
 25527 00000DD1 F6E3                    	mul	bl			;ax = number of bytes to clear
 25528 00000DD3 0106[6003]              	add	[memlo],ax		;allocate memory
 25529                                  	;mov	ax,6
 25530 00000DD7 B80600                  	mov	ax,SF.size-2 ; 6
 25531 00000DDA 0106[6003]              	add	[memlo],ax		;remember the header too
 25532                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25533 00000DDE 800E[E114]02            	or	byte [setdevmarkflag],2
 25534 00000DE3 E8DB34                  	call	round			; check for mem error before the stosb
 25535 00000DE6 01C7                    	add	di,ax			;skip over header
 25536 00000DE8 B041                    	mov	al,'A'
 25537                                  fillloop:
 25538 00000DEA 51                      	push	cx			; save count
 25539 00000DEB B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 25540 00000DEE FC                      	cld
 25541 00000DEF F3AA                    	rep	stosb			; filled
 25542                                  
 25543                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 25544                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 25545                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 25546                                  
 25547                                  	; 18/12/2022
 25548                                  	;cx = 0
 25549 00000DF1 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 25550 00000DF5 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 25551 00000DF9 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 25552                                  	
 25553                                  	; 23/10/2022	
 25554                                  	;mov     word [es:di-3Bh],0
 25555                                  	;mov     word [es:di-26h],0
 25556                                  	;mov     word [es:di-24h],0
 25557                                  
 25558 00000DFD 59                      	pop	cx
 25559 00000DFE E2EA                    	loop	fillloop
 25560                                  
 25561                                  ; allocate buffers
 25562                                  ; ----------------------------------------------------------------------
 25563                                  
 25564                                  ; search through the list of media supported and allocate 3 buffers if the
 25565                                  ; capacity of the drive is > 360kb
 25566                                  
 25567                                  	; 18/12/2022
 25568                                  	; cx = 0
 25569 00000E00 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 25570 00000E05 7403                    	je	short dodefaultbuff
 25571 00000E07 E98000                  	jmp	dobuff			; the user entered the buffers=.
 25572                                  
 25573                                  dodefaultbuff:
 25574                                  	; 18/12/2022
 25575 00000E0A 890E[9902]              	mov	[h_buffers],cx ; 0
 25576                                  	;inc	cx
 25577                                  	;inc	cx
 25578                                  	;mov	[buffers],cx ; 2
 25579                                  	; 10/04/2024
 25580 00000E0E C706[9702]0200          	mov	word [buffers],2
 25581                                  
 25582                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 25583                                  	;mov	word [buffers],2	; default to 2 buffers
 25584                                  
 25585                                  	; 23/10/2022
 25586                                  	; 04/09/2023
 25587                                  	;push	ax
 25588                                  	;push	ds ; 26/03/2019
 25589                                  
 25590                                  	; 04/09/2023
 25591                                  	; ds = cs
 25592 00000E14 C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 25593                                  	;les	bp,[cs:DOSINFO]
 25594                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 25595                                  	; 11/12/2022
 25596 00000E18 26C46E00                	les	bp,[es:bp]
 25597                                  	; 23/10/2022
 25598                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 25599                                  
 25600                                  	; 04/09/2023
 25601                                  	; ds = cs
 25602                                  	;push	cs
 25603                                  	;pop	ds
 25604                                  ;SYSINIT:0DE2h:
 25605                                  nextdpb:				; test if the drive supports removeable media
 25606                                  	;mov	bl,[es:bp+DPB.drive]
 25607                                  	; 11/12/2022
 25608 00000E1C 268A5E00                	mov	bl,[es:bp]
 25609                                  	; 23/10/2022
 25610                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25611                                  
 25612                                  	;inc	bl
 25613                                  	; 18/12/2022
 25614 00000E20 43                      	inc	bx
 25615                                  
 25616                                  	;mov	ax,(IOCTL<<8)|8
 25617 00000E21 B80844                  	mov	ax,4408h
 25618 00000E24 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25619                                  
 25620                                  ; ignore fixed disks
 25621                                  
 25622 00000E26 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 25623 00000E28 7534                    	jnz	short nosetbuf
 25624                                  
 25625                                  ; get parameters of drive
 25626                                  
 25627 00000E2A 31DB                    	xor	bx,bx
 25628                                  	;;mov	bl,[es:bp+DPB.drive]
 25629                                  	; 11/12/2022
 25630 00000E2C 268A5E00                	mov	bl,[es:bp]
 25631                                  	; 23/10/2022
 25632                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25633                                  	
 25634                                  	;inc	bl
 25635                                  	; 18/12/2022
 25636 00000E30 43                      	inc	bx
 25637                                  
 25638 00000E31 BA[8448]                	mov	dx,deviceparameters
 25639                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 25640 00000E34 B80D44                  	mov	ax,440Dh
 25641                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 25642 00000E37 B96008                  	mov	cx,860h
 25643 00000E3A CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25644 00000E3C 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 25645                                  					; generic ioctl
 25646                                  ; determine capacity of drive
 25647                                  ; media capacity = #sectors * bytes/sector
 25648                                  
 25649                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 25650                                  	; 23/10/2022
 25651 00000E3E 8B1E[9348]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 25652                                  	
 25653                                  ; to keep the magnitude of the media capacity within a word,
 25654                                  ; scale the sector size
 25655                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 25656                                  
 25657                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 25658                                  	; 23/10/2022
 25659 00000E42 A1[8B48]                	mov	ax,[deviceparameters+7] ; bytes per sector
 25660 00000E45 31D2                    	xor	dx,dx
 25661 00000E47 B90002                  	mov	cx,512
 25662 00000E4A F7F1                    	div	cx			; scale sector size in factor of
 25663                                  					; 512 bytes
 25664 00000E4C F7E3                    	mul	bx			; ax = #sectors * size factor
 25665 00000E4E 09D2                    	or	dx,dx			; just in case of large floppies
 25666 00000E50 7505                    	jnz	short setbuf
 25667 00000E52 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 25668 00000E55 7607                    	jbe	short nosetbuf
 25669                                  setbuf:
 25670                                  	; 18/12/2022
 25671                                  	; word [buffers] = 2
 25672 00000E57 C606[9702]03            	mov	byte [buffers],3
 25673                                  	;mov	word [buffers],3
 25674 00000E5C EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 25675                                  					; for default buffer count
 25676                                  nosetbuf:
 25677                                  	; 23/10/2022
 25678                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 25679 00000E5E 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 25680 00000E63 7406                    	je	short chk_memsize_for_buffers
 25681                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 25682 00000E65 26C46E19                	les	bp,[es:bp+19h]
 25683 00000E69 EBB1                    	jmp	short nextdpb
 25684                                  
 25685                                  ;from dos 3.3,the default number of buffers will be changed according to the
 25686                                  ;memory size too.
 25687                                  ; default buffers = 2
 25688                                  ; if diskette media > 360 kb,then default buffers = 3
 25689                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 25690                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 25691                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 25692                                  
 25693                                  chk_memsize_for_buffers:
 25694                                  	; 18/12/2022
 25695                                  	;cmp	word [MEMORY_SIZE],2000h
 25696                                  	;jbe	short bufset
 25697                                  	;mov	word [buffers],5
 25698                                  	;cmp	word [MEMORY_SIZE],4000h
 25699                                  	;jbe	short bufset
 25700                                  	;mov	word [buffers],10
 25701                                  	;cmp	word [MEMORY_SIZE],8000h
 25702                                  	;jbe	short bufset
 25703                                  	;mov	word [buffers],15
 25704                                  
 25705                                  	; 18/12/2022
 25706                                  	; word [buffers] = 3 or 2
 25707 00000E6B BB[9702]                	mov	bx,buffers
 25708 00000E6E A1[9202]                	mov	ax,[MEMORY_SIZE]
 25709 00000E71 48                      	dec	ax	; [MEMORY_SIZE] - 1
 25710                                  
 25711 00000E72 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 25712 00000E75 7213                    	jb	short bufset
 25713 00000E77 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 25714 00000E7A 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 25715 00000E7D 730B                    	jnb	short bufset
 25716 00000E7F C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 25717 00000E82 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 25718 00000E85 7303                    	jnb	short bufset
 25719 00000E87 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 25720                                  bufset:
 25721                                  	; 23/10/2022
 25722                                  	; 26/03/2019
 25723                                  	; 04/09/2023
 25724                                  	;pop	ds
 25725                                  	;pop	ax
 25726                                  
 25727                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25728                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 25729                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25730                                  
 25731                                  ; 26/03/2019
 25732                                  
 25733                                  ;*******************************************************************************
 25734                                  ;									       *
 25735                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 25736                                  ; input :								       *
 25737                                  ;    memhi:memlo - start of the next available memory			       *
 25738                                  ;    buffers = number of buffers					       *
 25739                                  ;    h_buffers = number of secondary buffers				       *
 25740                                  ;									       *
 25741                                  ; output:								       *
 25742                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 25743                                  ;	buffinfo set.							       *
 25744                                  ;	bufferqueue set.						       *
 25745                                  ;									       *
 25746                                  ; subroutines to be called:						       *
 25747                                  ;									       *
 25748                                  ;*******************************************************************************
 25749                                  
 25750                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25751                                  	; (SYSINIT:0E60h)
 25752                                  dobuff:
 25753                                  	; ds = cs ; 31/03/2019
 25754                                  	; 23/10/2022
 25755                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 25756                                  	; 04/09/2023
 25757 00000E8A A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 25758 00000E8D 8B0E[9902]              	mov	cx,[h_buffers] ; *
 25759 00000E91 C51E[6D02]              	lds	bx,[DOSINFO]
 25760                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 25761                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 25762 00000E95 89473F                  	mov	[bx+3Fh],ax
 25763                                  	; 04/09/2023
 25764                                  	;mov	ax,[cs:h_buffers]
 25765                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 25766                                  	;mov	[bx+41h],ax
 25767                                  	; 04/09/2023
 25768 00000E98 894F41                  	mov	[bx+41h],cx ; *
 25769 00000E9B C55F12                  	lds	bx,[bx+12h]
 25770                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 25771 00000E9E E82034                  	call	round		; get [memhi]:[memlo]
 25772                                  	;mov	al,devmark_buf	; ='B'
 25773 00000EA1 B042                    	mov	al,'B'	
 25774 00000EA3 E81606                  	call	setdevmark
 25775                                  
 25776                                  ;allocate buffers
 25777                                  
 25778 00000EA6 1E                      	push	ds			; save buffer info. ptr.
 25779 00000EA7 53                      	push	bx
 25780                                  
 25781 00000EA8 E84E03                  	call	set_buffer
 25782                                  
 25783 00000EAB 5B                      	pop	bx
 25784 00000EAC 1F                      	pop	ds
 25785                                  
 25786                                  ;now set the secondary buffer if specified.
 25787                                  
 25788 00000EAD 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 25789 00000EB3 742D                    	je	short xif16
 25790 00000EB5 E80934                  	call	round
 25791                                  	; 23/10/2022
 25792 00000EB8 2E8B0E[6003]            	mov	cx,[cs:memlo]
 25793                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 25794 00000EBD 894F06                  	mov	[bx+6],cx
 25795 00000EC0 2E8B0E[6203]            	mov	cx,[cs:memhi]
 25796                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 25797 00000EC5 894F08                  	mov	[bx+8],cx
 25798 00000EC8 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 25799                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 25800 00000ECD 894F0A                  	mov	[bx+10],cx
 25801 00000ED0 B80002                  	mov	ax,512			; 512 byte
 25802 00000ED3 F7E1                    	mul	cx
 25803 00000ED5 2EA3[6003]              	mov	[cs:memlo],ax
 25804                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25805 00000ED9 2E800E[E114]02          	or	byte [cs:setdevmarkflag],2
 25806 00000EDF E8DF33                  	call	round
 25807                                  xif16:
 25808                                  
 25809                                  ; ----------------------------------------------------------------------
 25810                                  ; allocate cdss
 25811                                  ; ----------------------------------------------------------------------
 25812                                  
 25813                                  buf1:
 25814 00000EE2 E8DC33                  	call	round
 25815                                  
 25816 00000EE5 50                      	push	ax
 25817                                  	; 23/10/2022
 25818                                  	;mov	ax,devmark_cds		;='L'
 25819 00000EE6 B84C00                  	mov	ax, 'L'
 25820 00000EE9 E8D005                  	call	setdevmark
 25821 00000EEC 58                      	pop	ax
 25822                                  
 25823 00000EED 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 25824                                  	;mov	cl,[es:di+SYSI_NUMIO]
 25825 00000EF2 268A4D20                	mov	cl,[es:di+20h]
 25826 00000EF6 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 25827 00000EFB 7305                    	jae	short gotncds 		; user setting must be at least numio
 25828 00000EFD 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 25829                                  gotncds:
 25830 00000F02 30ED                    	xor	ch,ch
 25831                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 25832 00000F04 26884D21                	mov	[es:di+21h],cl
 25833 00000F08 2EA1[6203]              	mov	ax,[cs:memhi]
 25834                                  	;mov	[es:di+SYSI_CDS+2],ax
 25835 00000F0C 26894518                	mov	[es:di+18h],ax
 25836 00000F10 2EA1[6003]              	mov	ax,[cs:memlo]
 25837                                  	;mov	[es:di+SYSI_CDS],ax
 25838 00000F14 26894516                	mov	[es:di+16h],ax
 25839 00000F18 88C8                    	mov	al,cl
 25840                                  	;mov	ah,curdirlen ; curdir_list.size
 25841 00000F1A B458                    	mov	ah,88
 25842 00000F1C F6E4                    	mul	ah
 25843 00000F1E E84B02                  	call	ParaRound
 25844 00000F21 2E0106[6203]            	add	[cs:memhi],ax
 25845                                  
 25846                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25847 00000F26 2E800E[E114]02          	or	byte [cs:setdevmarkflag],2
 25848 00000F2C E89233                  	call	round			; check for mem error before initializing
 25849                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 25850 00000F2F 26C535                  	lds	si,[es:di]
 25851                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 25852 00000F32 26C47D16                	les	di,[es:di+16h]
 25853 00000F36 E87EFD                  	call	fooset
 25854                                  
 25855                                  ; ----------------------------------------------------------------------
 25856                                  ; allocate space for internal stack
 25857                                  ; ----------------------------------------------------------------------
 25858                                  
 25859 00000F39 0E                      	push	cs
 25860 00000F3A 1F                      	pop	ds
 25861                                  
 25862                                  ;	if the user did not entered stacks= command, as a default, do not install
 25863                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 25864                                  ;	otherwise,install it to the user specified value or to the default
 25865                                  ;	value of 9,128 for other systems.
 25866                                  
 25867 00000F3B 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 25868 00000F40 740E                    	je	short doinstallstack	; then install as specified by the user
 25869 00000F42 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 25870 00000F47 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 25871 00000F49 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 25872 00000F4E 736D                    	jae	short skipstack
 25873                                  doinstallstack:
 25874 00000F50 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 25875 00000F53 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 25876 00000F55 7466                    	jz	short skipstack		; don't install stack.
 25877                                  
 25878                                  ;	dynamic relocation of stack code.
 25879                                  
 25880 00000F57 E86733                  	call	round			;[memhi] = seg. for stack code
 25881                                  					;[memlo] = 0
 25882                                  
 25883                                  ; set devmark block into memory for mem command
 25884                                  ; devmark_id = 's' for stack
 25885                                  
 25886                                  	;mov	al,devmark_stk	;='S'
 25887                                  	; 23/10/2022
 25888 00000F5A B053                    	mov	al,'S'
 25889 00000F5C E85D05                  	call	setdevmark
 25890                                  
 25891 00000F5F A1[6203]                	mov	ax,[memhi]
 25892 00000F62 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 25893                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25894                                  	; 11/12/2022
 25895                                  	; ds = cs
 25896                                  	;push	cs
 25897                                  	;pop	ds
 25898 00000F64 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 25899 00000F66 31FF                    	xor	di,di
 25900 00000F68 B9[6902]                	mov	cx,endstackcode
 25901 00000F6B 890E[6003]              	mov	[memlo],cx
 25902 00000F6F E84F33                  	call	round		;have enough space for relocation?
 25903 00000F72 F3A4                    	rep	movsb
 25904                                  
 25905 00000F74 1E                      	push	ds		; stick the location of the NextStack entry
 25906                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 25907                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25908                                  	; 21/10/2022
 25909 00000F75 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25910 00000F78 8ED8                    	mov	ds,ax
 25911 00000F7A C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 25912 00000F80 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 25913                                  
 25914 00000F84 2EA1[6003]              	mov	ax,[cs:memlo]
 25915 00000F88 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 25916 00000F8C A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 25917 00000F8F 2EA1[6203]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 25918 00000F93 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 25919 00000F97 A3[0A08]                	mov	[IT_StackLoc+2],ax
 25920                                  
 25921                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 25922                                  
 25923                                  	;mov	ax,entrysize ; mov ax,8
 25924                                  	; 23/10/2022
 25925 00000F9A B80800                  	mov	ax,8
 25926 00000F9D 2E0306[8C02]            	add	ax,[cs:stack_size]
 25927 00000FA2 2EF726[8A02]            	mul	word [cs:stack_count]
 25928                                  
 25929 00000FA7 A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 25930                                  
 25931 00000FAA 1F                      	pop	ds		; no more need to access Instance Table
 25932                                  
 25933 00000FAB E8BE01                  	call	ParaRound	; convert size to paragraphs
 25934                                  	
 25935                                  	; 11/12/2022
 25936                                  	; ds = cs
 25937                                  	;add	[cs:memhi],ax
 25938 00000FAE 0106[6203]              	add	[memhi],ax
 25939                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25940                                  	;or	byte [cs:setdevmarkflag],2
 25941 00000FB2 800E[E114]02            	or	byte [setdevmarkflag],2
 25942                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25943                                  				;to set the devmark_size for stack by round routine.
 25944 00000FB7 E80733                  	call	round		; check for memory error before
 25945                                  				; continuing
 25946 00000FBA E8E902                  	call	stackinit	; initialize hardware stack. 
 25947                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 25948                                  skipstack:
 25949                                  
 25950                                  ; 18/03/2025 - MiniDOS 1.0
 25951                                  %if 0	
 25952                                  	; 10/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25953                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:11F0h)
 25954                                  	;;;
 25955                                  	;push	cs
 25956                                  	;pop	ds
 25957                                  	; ds = cs
 25958                                  	cmp	byte [dosdata_umb],1	; PCDOS 7 feature - DOSDATA=UMB/NOUMB configuration
 25959                                  					; 1 = DOSDATA=UMB, 2 = (UMB) done, 0 = NOUMB
 25960                                  	ja	short dosdata_umb_done	; 2 - done
 25961                                  	jb	short dosdata_noumb	; 0 - DOSDATA=NOUMB
 25962                                  	
 25963                                  	cmp	byte [setdevmark],0EAh
 25964                                  	je	short dosdata_noumb
 25965                                  	
 25966                                  	mov	ax,5802h
 25967                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25968                                  				; AL = function code: (DOS 5beta) get UMB link state
 25969                                  	cbw
 25970                                  	mov	di,ax			; al = 01h -> UMBs in DOS memory chain
 25971                                  					; save current (previous) UMB link state
 25972                                  	mov	bx,1			; bx = 01h -> add UMBs to DOS memory chain
 25973                                  	
 25974                                  	mov	ax,5803h
 25975                                  	int	21h
 25976                                  	jc	short dosdata_noumb
 25977                                  	
 25978                                  	mov	ax,5800h
 25979                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25980                                  				; AL = function code: get allocation strategy
 25981                                  	
 25982                                  	mov	si,ax			; ax = current strategy
 25983                                  					; save current (previous) allocation strategy
 25984                                  	mov	bx,40h			; bl = new strategy = 40h - high memory first fit
 25985                                  	
 25986                                  	mov	ax,5801h
 25987                                  	int	21h
 25988                                  
 25989                                  	mov	bx,[memhi]
 25990                                  	sub	bx,[prev_memhi]
 25991                                  	
 25992                                  	mov	ah,48h
 25993                                  	int	21h		; DOS - 2+ - ALLOCATE MEMORY
 25994                                  				; BX = number of 16-byte paragraphs desired
 25995                                  	mov	cx,ax			; ax = segment of allocated block
 25996                                  	mov	bx,di			; restore previous UMB link state
 25997                                  	
 25998                                  	mov	ax,5803h
 25999                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26000                                  				; AL = function code: (DOS 5beta) set UMB link state
 26001                                  	mov	bx,si			; restore previous allocation strategy
 26002                                  	
 26003                                  	mov	ax,5801h
 26004                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26005                                  				; AL = function code: set allocation strategy
 26006                                  	cmp	cx,0A000h		; Is the allocated memory block (segment) a UMB?
 26007                                  	jb	short dosdata_noumb	; no
 26008                                  	
 26009                                  	;mov	word [ALLOCLIM],0FFFFh
 26010                                  	;mov	word [memlo],0
 26011                                  	mov	[memhi],cx
 26012                                  	dec	cx
 26013                                  	mov	es,cx			; point to arena/mcb
 26014                                  	; 10/04/2024
 26015                                  	xor	cx,cx ; 0
 26016                                  	mov	[memlo],cx ; 0
 26017                                  	dec	cx
 26018                                  	mov	[ALLOCLIM],cx ; 0FFFFh
 26019                                  
 26020                                  	mov	word [es:1],8		; [es:arena_owner], 8 ; set impossible owner
 26021                                  	mov	word [es:8],4453h	; [es:arena_name],'SD' ; System Data
 26022                                  	inc	byte [dosdata_umb]	; 1 -> 2 ; DOSDATA=UMB done.
 26023                                  	jmp	dosfts
 26024                                  
 26025                                  dosdata_umb_done:
 26026                                  	mov	ax,[prev_memhi]		; (recent memory block/segment before UMBs)
 26027                                  	mov	[memhi],ax
 26028                                  	mov	ax,[prev_alloclim]
 26029                                  	mov	[ALLOCLIM],ax
 26030                                  dosdata_noumb:
 26031                                   	;;;
 26032                                  %endif
 26033                                  
 26034                                  ;skipstack:
 26035                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26036                                  	; (SYSINIT:0F99h)
 26037                                  
 26038                                  	; 11/12/2022
 26039                                  	; ds = cs
 26040                                  	;push	cs
 26041                                  	;pop	ds
 26042                                  
 26043 00000FBD A0[9D02]                	mov	al,[FILES]
 26044 00000FC0 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 26045                                  				;  it does sign extend.
 26046 00000FC2 89C1                    	mov	cx,ax
 26047 00000FC4 31DB                    	xor	bx,bx		;close standard input
 26048 00000FC6 B43E                    	mov	ah,3Eh ; CLOSE
 26049 00000FC8 CD21                    	int	21h
 26050 00000FCA BB0200                  	mov	bx,2
 26051                                  rcclloop:			;close everybody but standard output
 26052 00000FCD B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 26053 00000FCF CD21                    	int	21h		; in case we can't get new one open.
 26054 00000FD1 43                      	inc	bx
 26055 00000FD2 E2F9                    	loop	rcclloop
 26056                                  
 26057 00000FD4 BA[9445]                	mov	dx,condev
 26058 00000FD7 B002                    	mov	al,2
 26059 00000FD9 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 26060 00000FDB F9                      	stc			; set for possible int 24
 26061 00000FDC CD21                    	int	21h
 26062 00000FDE 7305                    	jnc	short goaux
 26063 00000FE0 E81435                  	call	badfil
 26064 00000FE3 EB13                    	jmp	short goaux2
 26065                                  goaux:	
 26066 00000FE5 50                      	push	ax
 26067 00000FE6 BB0100                  	mov	bx,1		;close standard output
 26068 00000FE9 B43E                    	mov	ah,3Eh ; CLOSE
 26069 00000FEB CD21                    	int	21h
 26070 00000FED 58                      	pop	ax
 26071                                  
 26072 00000FEE 89C3                    	mov	bx,ax		;new device handle
 26073 00000FF0 B445                    	mov	ah,45h ; XDUP
 26074 00000FF2 CD21                    	int	21h		;dup to 1,stdout
 26075 00000FF4 B445                    	mov	ah,45h ; XDUP
 26076 00000FF6 CD21                    	int	21h		;dup to 2,stderr
 26077                                  goaux2: 
 26078 00000FF8 BA[9845]                	mov	dx,auxdev
 26079 00000FFB B002                    	mov	al,2		;read/write access
 26080 00000FFD E82835                  	call	open_dev
 26081                                  
 26082 00001000 BA[9C45]                	mov	dx,prndev
 26083 00001003 B001                    	mov	al,1		;write only
 26084 00001005 E82035                  	call	open_dev
 26085                                  
 26086                                  ;global rearm command for shared interrupt devices attached in the system;
 26087                                  ;shared interrupt attachment has some problem when it issues interrupt
 26088                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 26089                                  ;no further interrupts on that level will be presented until a global rearm
 26090                                  ;is issued. by the request of the system architecture group, msbio will
 26091                                  ;issue a global rearm after every device driver is loaded.
 26092                                  ;to issue a global rearm:	;for pc1,xt,palace
 26093                                  ;
 26094                                  ;			  out 02f2h,xx  ; interrupt level 2
 26095                                  ;			  out 02f3h,xx  ; interrupt level 3
 26096                                  ;			  out 02f4h,xx  ; interrupt level 4
 26097                                  ;			  out 02f5h,xx  ; interrupt level 5
 26098                                  ;			  out 02f6h,xx  ; interrupt level 6
 26099                                  ;			  out 02f7h,xx  ; interrupt level 7
 26100                                  ;
 26101                                  ;	for pc at,in addition to the above commands,
 26102                                  ;	need to handle the secondary interrupt handler
 26103                                  ;
 26104                                  ;			  out 06f2h,xx  ; interrupt level 10
 26105                                  ;			  out 06f3h,xx  ; interrupt level 11
 26106                                  ;			  out 06f4h,xx  ; interrupt level 12
 26107                                  ;			  out 06f6h,xx  ; interrupt level 14
 26108                                  ;			  out 06f7h,xx  ; interrupt level 15
 26109                                  ;
 26110                                  ;	for round-up machine
 26111                                  ;
 26112                                  ;			  none.
 26113                                  
 26114                                  ; where xx stands for any value.
 26115                                  ;
 26116                                  ; for your information,after naples level machine,the system service bios
 26117                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 26118                                  
 26119                                  	; 24/10/2022
 26120                                  
 26121 00001008 50                      	push	ax
 26122 00001009 53                      	push	bx
 26123 0000100A 52                      	push	dx
 26124 0000100B 06                      	push	es
 26125                                  
 26126 0000100C B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 26127 0000100E BAF202                  	mov	dx,2F2h 		;get starting address
 26128 00001011 EE                      	out	dx,al			; out 02f2h,0ffh
 26129 00001012 42                      	inc	dx
 26130 00001013 EE                      	out	dx,al			; out 02f3h,0ffh
 26131 00001014 42                      	inc	dx
 26132 00001015 EE                      	out	dx,al			; out 02f4h,0ffh
 26133 00001016 42                      	inc	dx
 26134 00001017 EE                      	out	dx,al			; out 02f5h,0ffh
 26135 00001018 42                      	inc	dx
 26136 00001019 EE                      	out	dx,al			; out 02f6h,0ffh
 26137 0000101A 42                      	inc	dx
 26138 0000101B EE                      	out	dx,al			; out 02f7h,0ffh
 26139                                  
 26140                                  ;sb secondary global rearm
 26141                                  
 26142 0000101C B800F0                  	mov	ax,0F000h		;get machine type
 26143 0000101F 8EC0                    	mov	es,ax
 26144 00001021 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 26145 00001027 740D                    	je	short startrearm	; *if at no need to check
 26146                                  
 26147 00001029 B4C0                    	mov	ah,0C0h 		;get system configuration
 26148 0000102B CD15                    	int	15h			; *
 26149 0000102D 7216                    	jc	short finishrearm	; *jmp if old rom
 26150                                  
 26151                                  ; test feature byte for secondary interrupt controller
 26152                                  
 26153 0000102F 26F6470540              	test	byte [es:bx+5],40h
 26154                                  	; 24/10/2022
 26155                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 26156 00001034 740F                    	je	short finishrearm	;jmp if it is there
 26157                                  
 26158                                  startrearm:
 26159 00001036 B0FF                    	mov	al,0FFh 		;write any pattern to port
 26160 00001038 BAF206                  	mov	dx,6F2h 		;get starting address
 26161 0000103B EE                      	out	dx,al			;out 06f2h,0ffh
 26162 0000103C 42                      	inc	dx			;bump address
 26163 0000103D EE                      	out	dx,al			;out 06f3h,0ffh
 26164 0000103E 42                      	inc	dx			;bump address
 26165 0000103F EE                      	out	dx,al			;out 06f4h,0ffh
 26166 00001040 42                      	inc	dx			;bump address
 26167 00001041 42                      	inc	dx			;bump address
 26168 00001042 EE                      	out	dx,al			;out 06f6h,0ffh
 26169 00001043 42                      	inc	dx			;bump address
 26170 00001044 EE                      	out	dx,al			;out 06f7h,0ffh
 26171                                  
 26172                                  finishrearm:
 26173 00001045 07                      	pop	es
 26174 00001046 5A                      	pop	dx
 26175 00001047 5B                      	pop	bx
 26176 00001048 58                      	pop	ax
 26177                                  
 26178                                  ;    global rearm end *******************
 26179                                  
 26180                                  ; ----------------------------------------------------------------------
 26181                                  ; allocate sysinit_base for install= command
 26182                                  ; ----------------------------------------------------------------------
 26183                                  ; sysinit_base allocation.
 26184                                  ;   check if endfile has been called to handle install= command.
 26185                                  
 26186                                  set_sysinit_base:
 26187                                  
 26188                                  ; ----------------------------------------------------------------------
 26189                                  ;sysinit_base will be established in the secure area of
 26190                                  ;lower memory when it handles the first install= command.
 26191                                  ;sysinit_base is the place where the actual exec function will be called and
 26192                                  ;will check sysinit module in high memory if it is damaged by the application
 26193                                  ;program.  if sysinit module has been broken,then "memory error..." message
 26194                                  ;is displayed by sysinit_base.
 26195                                  ; ----------------------------------------------------------------------
 26196                                  
 26197                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26198                                  	; (SYSINIT:1028h)
 26199                                  
 26200                                  	; 11/12/2022
 26201                                  	; ds = cs
 26202 00001049 50                      	push	ax			; set devmark for mem command
 26203 0000104A A1[6203]                	mov	ax,[memhi]
 26204 0000104D 2B06[6603]              	sub	ax,[area]
 26205 00001051 A3[5E03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 26206                                  	;mov	al,devmark_inst ; 'T'
 26207 00001054 B054                    	mov	al,'T'
 26208 00001056 E86304                  	call	setdevmark
 26209 00001059 58                      	pop	ax
 26210                                  
 26211 0000105A 8B3E[6203]              	mov	di,[memhi]
 26212 0000105E 8EC7                    	mov	es,di
 26213 00001060 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 26214 00001064 31FF                    	xor	di,di
 26215 00001066 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 26216 0000106A BE[7811]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 26217 0000106D B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 26218                                  	; 24/10/2022 
 26219                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 26220 00001070 010E[6003]              	add	[memlo],cx
 26221                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 26222                                  	; 11/12/2022
 26223                                  	; ds = cs
 26224                                  	;or	byte [cs:setdevmarkflag],2
 26225 00001074 800E[E114]02            	or	byte [setdevmarkflag],2
 26226                                  	;or	byte [setdevmarkflag],for_devmark
 26227 00001079 E84532                  	call	round			; check mem error. also,readjust memhi for the next use.
 26228 0000107C F3A4                    	rep	movsb			; reallocate it.
 26229                                  
 26230 0000107E C706[D402][5F11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 26231 00001084 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 26232                                  	;or	word [install_flag],has_installed ; set the flag.
 26233                                  	;or	byte [install_flag],has_installed ; 2
 26234                                  	; 11/12/2022
 26235 00001088 800E[CC02]02            	or	byte [install_flag],2
 26236                                  	; 24/10/2022
 26237                                  	;or	word [install_flag],2	
 26238                                  
 26239                                  ; ----------------------------------------------------------------------
 26240                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 26241                                  ; the top of the memory will be allocated for sysinit and config.sys if
 26242                                  ; have_install_cmd.
 26243                                  ; ----------------------------------------------------------------------
 26244                                  
 26245 0000108D E83132                  	call	round
 26246 00001090 8B1E[6203]              	mov	bx,[memhi]
 26247 00001094 A1[6603]                	mov	ax,[area]
 26248 00001097 A3[5C03]                	mov	[old_area],ax		; save [area]
 26249 0000109A 8EC0                    	mov	es,ax			;calc what we needed
 26250 0000109C 29C3                    	sub	bx,ax
 26251                                  	; 24/10/2022
 26252 0000109E B44A                    	mov	ah,4Ah ; SETBLOCK
 26253 000010A0 CD21                    	int	21h			;give the rest back
 26254                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26255                                  		; ES = segment address of block to change
 26256                                  		; BX = new size in paragraphs
 26257 000010A2 06                      	push	es
 26258 000010A3 8CC0                    	mov	ax,es
 26259 000010A5 48                      	dec	ax
 26260 000010A6 8EC0                    	mov	es,ax			;point to arena
 26261                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 26262                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 26263                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 26264                                  	; 24/10/2022
 26265 000010A8 26C70601000800          	mov	word [es:1],8		;set impossible owner
 26266 000010AF 26C70608005344          	mov	word [es:8],'SD'	; System Data
 26267 000010B6 07                      	pop	es
 26268                                  
 26269 000010B7 BBFFFF                  	mov	bx,0FFFFh
 26270 000010BA B448                    	mov	ah,48h ; ALLOC
 26271 000010BC CD21                    	int	21h
 26272 000010BE B448                    	mov	ah,48h ; ALLOC
 26273 000010C0 CD21                    	int	21h			; allocate the rest of the memory
 26274                                  		; DOS - 2+ - ALLOCATE MEMORY
 26275                                  		; BX = number of 16-byte paragraphs desired
 26276 000010C2 A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 26277 000010C5 C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 26278                                  
 26279                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 26280                                  ;;;; allocated.
 26281                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 26282                                  ;;;; this time) to the top-of-the memory),here we are going to
 26283                                  ;;;; 1). "setblock" from memhi to confbot.
 26284                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 26285                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 26286                                  
 26287                                  ;memory allocation for sysinit,confbot module.
 26288                                  
 26289 000010CB 8EC0                    	mov	es,ax
 26290                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26291                                  	; (SYSINIT:11DFh)
 26292 000010CD 8B1E[A102]              	mov	bx,[CONFBOT]
 26293                                  	; 24/10/2022
 26294                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 26295 000010D1 29C3                    	sub	bx,ax			; confbot - memhi
 26296 000010D3 4B                      	dec	bx			; make a room for the memory block id.
 26297 000010D4 4B                      	dec	bx			; make sure!!!.
 26298 000010D5 B44A                    	mov	ah,4Ah ; SETBLOCK
 26299 000010D7 CD21                    	int	21h			; this will free (confbot to top of memory)
 26300                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26301                                  		; ES = segment address of block to change
 26302                                  		; BX = new size in paragraphs
 26303 000010D9 BBFFFF                  	mov	bx,0FFFFh
 26304 000010DC B448                    	mov	ah,48h ; ALLOC
 26305 000010DE CD21                    	int	21h
 26306 000010E0 B448                    	mov	ah,48h ; ALLOC
 26307 000010E2 CD21                    	int	21h			; allocate (confbot to top of memory)
 26308                                  		; DOS - 2+ - ALLOCATE MEMORY
 26309                                  		; BX = number of 16-byte paragraphs desired
 26310 000010E4 A3[6603]                	mov	[area],ax		; save allocated memory segment.
 26311                                  					; need this to free this area for command.com.
 26312 000010E7 8E06[6203]              	mov	es,[memhi]
 26313 000010EB B449                    	mov	ah,49h			; free allocated memory.
 26314 000010ED CD21                    	int	21h			; free (memhi to confbot(=area))
 26315                                  		; DOS - 2+ - FREE MEMORY
 26316                                  		; ES = segment address of area to be freed
 26317                                  endfile_ret:
 26318 000010EF C3                      	retn
 26319                                  
 26320                                  ; End of "EndFile" DOS structure configuration.
 26321                                  
 26322                                  ; ----------------------------------------------------------------------
 26323                                  ; 26/03/2019 - Retro DOS v4.0
 26324                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 26325                                  ; ----------------------------------------------------------------------
 26326                                  ; Do_Install_Exec
 26327                                  ;
 26328                                  ; This procedure is used to EXEC a program being loaded via the 
 26329                                  ; "install=" mechanism in config.sys. It does this by setting up
 26330                                  ; the parameters, and then jumping to sysinit_base, which has been
 26331                                  ; setup in low memory. When complete, sysinit_base will jump back
 26332                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 26333                                  ; program).
 26334                                  
 26335                                  ;SYSINIT:10CFh:
 26336                                  
 26337                                  do_install_exec:			; now,handles install= command.
 26338                                  
 26339 000010F0 56                      	push	si			; save si for config.sys again.
 26340                                  
 26341                                  ; we are going to call load/exec function.
 26342                                  ; set es:bx to the parameter block here;;;;;;;
 26343                                  ; set ds:dx to the asciiz string. remember that we already has 0
 26344                                  ; after the filename. so parameter starts after that. if next
 26345                                  ; character is a line feed (i.e. 10),then assume that the 0
 26346                                  ; we already encountered used to be a carrage return. in this
 26347                                  ; case,let's set the length to 0 which will be followed by
 26348                                  ; carridge return.
 26349                                  
 26350                                  ; es:si -> command line in config.sys. points to the first non blank
 26351                                  ;character after =.
 26352                                  
 26353 000010F1 06                      	push	es
 26354 000010F2 1E                      	push	ds
 26355 000010F3 07                      	pop	es
 26356 000010F4 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 26357 000010F5 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 26358                                  
 26359 000010F7 31C9                    	xor	cx,cx
 26360 000010F9 FC                      	cld
 26361 000010FA 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 26362 00001100 BF[F002]                	mov	di,ldexec_parm
 26363                                  installfilename:			; skip the file name
 26364 00001103 AC                      	lodsb				; al = ds:si; si++
 26365                                  	; 05/09/2023
 26366 00001104 08C0                    	or	al,al
 26367                                  	;cmp	al,0
 26368                                  	;je	short got_installparm
 26369                                  	;jmp	short installfilename
 26370                                  	; 10/04/2024
 26371 00001106 75FB                    	jnz	short installfilename
 26372                                  got_installparm:			; copy the parameters to ldexec_parm
 26373 00001108 AC                      	lodsb
 26374 00001109 268805                  	mov	[es:di],al
 26375 0000110C 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 26376 0000110E 7405                    	je	short done_installparm
 26377 00001110 FEC1                    	inc	cl			; # of char. in the parm.
 26378 00001112 47                      	inc	di
 26379 00001113 EBF3                    	jmp	short got_installparm
 26380                                  done_installparm:
 26381 00001115 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 26382                                  	; 05/09/2023
 26383 0000111A 08C9                    	or	cl,cl
 26384                                  	;cmp	cl,0			; if no parm,then
 26385 0000111C 7506                    	jne	short install_seg_set 	; let the parm area
 26386 0000111E 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 26387                                  					; starts with cr.
 26388                                  install_seg_set:
 26389                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 26390 00001124 31DB                    	xor	bx,bx
 26391                                  	;mov	word [cs:0],0		; make a null environment segment
 26392 00001126 2E891F                  	mov	[cs:bx],bx ; 05/09/2023
 26393 00001129 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 26394                                  
 26395                                  ;---------------------------------------------------M067----------------
 26396                                  ;
 26397                                  ; 	the environment pointer is made 0. so the current environment ptr.
 26398                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 26399                                  ;
 26400                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 26401                                  ;
 26402                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 26403                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 26404                                  ; 	was fixed. 
 26405                                  ;
 26406                                  ; ----------------------------------------------------------------------
 26407                                  
 26408                                  ;;ifdef MULTI_CONFIG
 26409                                  
 26410                                  ; If there's any environment data in "config_wrkseg", pass to app
 26411                                  
 26412                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 26413                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26414                                  ;%if 0
 26415 0000112B 89C1                    	mov	cx,ax ; *
 26416                                  	; 05/09/2023
 26417 0000112D 2E391E[D814]            	cmp	[cs:config_envlen],bx ; 0
 26418                                  	;cmp	word [cs:config_envlen],0
 26419 00001132 7405                    	je	short no_envdata2
 26420 00001134 2E8B0E[DA14]            	mov	cx,[cs:config_wrkseg] ; *
 26421                                  no_envdata2:
 26422                                  ;;endif  ;MULTI_CONFIG
 26423                                  
 26424                                  ;%endif	; 24/10/2022
 26425                                  
 26426                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 26427                                  	; 05/09/2023 (BugFix)
 26428                                  	; 24/10/2022
 26429 00001139 2E890E[4003]            	mov	[cs:iexec.environ],cx ; *
 26430                                  	; 02/11/2022
 26431                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 26432                                  
 26433                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 26434 0000113E 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 26435                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 26436 00001142 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 26437                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 26438 00001146 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 26439 0000114A E86000                  	call	sum_up
 26440 0000114D 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 26441 00001151 31C0                    	xor	ax,ax
 26442 00001153 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 26443 00001155 BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 26444 00001158 06                      	push	es			; save es,ds for load/exec
 26445 00001159 1E                      	push	ds			; these registers will be restored in sysinit_base.
 26446 0000115A 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 26447                                  					; load/exec function and check sum.
 26448                                  
 26449                                  ;----------------------------------------
 26450                                  
 26451                                  ;j.k. this is the returning address from sysinit_base.
 26452                                  
 26453                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26454                                  
 26455                                  sysinitptr:				; returning far address from sysinit_base
 26456 0000115F 5E                      	pop	si			; restore si for config.sys file.
 26457 00001160 06                      	push	es
 26458 00001161 1E                      	push	ds
 26459 00001162 07                      	pop	es
 26460 00001163 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 26461 00001164 7305                            jnc     short install_exit_ret
 26462                                  
 26463 00001166 56                      	push	si			; error in loading the file for install=.
 26464 00001167 E89133                  	call	badload 		; es:si-> path,filename,0.
 26465 0000116A 5E                      	pop	si
 26466                                  
 26467                                  	; 24/10/2022
 26468                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 26469                                  	; 11/12/2022
 26470                                  	; ds = cs
 26471                                  
 26472                                  	; 30/12/2022 - Retro DOS v4.2
 26473                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 26474                                  
 26475                                  install_exit_ret:
 26476 0000116B C3                      	retn
 26477                                  
 26478                                  ; 30/12/2022 - Retro DOS v4.2
 26479                                  %if 0
 26480                                  install_exit_ret:
 26481                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 26482                                  
 26483                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 26484                                  ;SYSINIT:1142h:
 26485                                  	mov     ah,4Dh
 26486                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 26487                                  	cmp     ah,3
 26488                                  	jz      short sysinitptr_retn
 26489                                  	call    error_line
 26490                                  	stc
 26491                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 26492                                  	retn		
 26493                                  
 26494                                  %endif ; 24/10/2022
 26495                                  
 26496                                  ; ----------------------------------------------------------------------
 26497                                  
 26498                                  ;**	ParaRound - Round Up length to paragraph multiple
 26499                                  ;
 26500                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 26501                                  ;	by 16 yielding a "length in paragraphs" value.
 26502                                  ;
 26503                                  ;	ENTRY	(ax) = byte length
 26504                                  ;	EXIT	(ax) = rounded up length in paragraphs
 26505                                  ;	USES	ax, flags
 26506                                  
 26507                                  ParaRound:
 26508 0000116C 83C00F                  	add	ax,15
 26509 0000116F D1D8                    	rcr	ax,1
 26510 00001171 D1E8                    	shr	ax,1
 26511 00001173 D1E8                    	shr	ax,1
 26512 00001175 D1E8                    	shr	ax,1
 26513 00001177 C3                      	retn
 26514                                  
 26515                                  ; ----------------------------------------------------------------------
 26516                                  ; sysinit_base module.
 26517                                  ;
 26518                                  ; This module is relocated by the routine EndFile to a location in low
 26519                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 26520                                  ; that are being loaded by the "install=" command. After the EXEC call
 26521                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 26522                                  ; top of memory) to be sure that the EXECed program did not damage it.
 26523                                  ; If it did, then this module will print an error message and stop the
 26524                                  ; system. Otherwise, it returns control to SYSINIT.
 26525                                  ;
 26526                                  ;in: after relocation,
 26527                                  ;    ax = 4b00h - load and execute the program dos function.
 26528                                  ;    ds = confbot. segment of config.sys file image
 26529                                  ;    es = sysinitseg. segment of sysinit module itself.
 26530                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 26531                                  ;    es:bx = pointer to a parameter block for load.
 26532                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 26533                                  ;    bigsize (word) - # of word from confbot to SI_end.
 26534                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 26535                                  ;			word boundary moduler form.
 26536                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 26537                                  ;
 26538                                  ;note: sysinit should save necessary registers and when the control is back
 26539                                  
 26540                                  	; 24/10/2022
 26541                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 26542                                  sysinit_base:				
 26543 00001178 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 26544 0000117D 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 26545 00001182 CD21                    	int	21h			; load/exec dos call.
 26546 00001184 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 26547 00001189 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 26548 0000118E 1F                      	pop	ds			; restore confbot seg
 26549 0000118F 07                      	pop	es			; restore sysinitseg
 26550 00001190 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 26551                                  					; at this time,i don't have to worry about
 26552                                  					; that sysinit module has been broken or not.
 26553 00001192 E81800                  	call	sum_up			; otherwise,check if it is good.
 26554 00001195 263906[D802]            	cmp	[es:checksum],ax
 26555 0000119A 740C                    	je	short sysinit_base_end
 26556                                  
 26557                                  ;	memory broken. show "memory allocation error" message and stall.
 26558                                  
 26559 0000119C B409                    	mov	ah,9
 26560 0000119E 0E                      	push	cs
 26561 0000119F 1F                      	pop	ds
 26562                                  	; 30/12/2022
 26563                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 26564                                  	;mov	dx,102
 26565 000011A0 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 26566                                  					; 66h (for MSDOS 6.21 SYSINIT)
 26567 000011A3 CD21                    	int	21h
 26568                                  		; DOS - PRINT STRING
 26569                                  		; DS:DX -> string terminated by "$"
 26570                                  
 26571                                  	; 30/12/2022 - Retro DOS v4.2
 26572                                  stall:
 26573                                  	; 24/10/2022
 26574                                  _stall: 
 26575                                  	; 11/12/2022
 26576 000011A5 F4                      	hlt 
 26577                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26578                                  	;hlt				;use HLT to minimize energy consumption
 26579 000011A6 EBFD                            jmp	short _stall
 26580                                  
 26581                                  sysinit_base_end: 
 26582 000011A8 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 26583                                  
 26584                                  ;-------------------------------------
 26585                                  
 26586                                  sum_up:
 26587                                  
 26588                                  ;in:   es - sysinitseg.
 26589                                  ;out:  ax - result
 26590                                  ;
 26591                                  ;remark: since this routine will only check starting from "locstack" to the end of
 26592                                  ;	 sysinit segment,the data area, and the current stack area are not
 26593                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 26594                                  ;	 gaurantee to be safe.
 26595                                  ;
 26596                                  ;first sum up confbot seg.
 26597                                  
 26598 000011AD 1E                      	push	ds
 26599                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26600                                  	; (SYSINIT:12C6h)
 26601 000011AE 26A1[A102]              	mov	ax,[es:CONFBOT]
 26602                                  	; 24/10/2022
 26603                                  	;mov	ax,[es:top_of_cdss]
 26604 000011B2 8ED8                    	mov	ds,ax
 26605 000011B4 31F6                    	xor	si,si
 26606 000011B6 31C0                    	xor	ax,ax
 26607 000011B8 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 26608                                  					; whole test better fail.
 26609 000011BD D1E9                    	shr	cx,1			; make it a word count
 26610 000011BF 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 26611                                  sum1:
 26612 000011C1 0304                    	add	ax,[si]
 26613 000011C3 46                      	inc	si
 26614 000011C4 46                      	inc	si
 26615 000011C5 E2FA                    	loop	sum1
 26616                                  ;now,sum up sysinit module.
 26617                                  sum_sys_code:
 26618                                  	; 24/10/2022
 26619 000011C7 BEC611                  	mov	si,locstack ;; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 26620                                  			    ;; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 26621                                  			    ; 10/04/2024	
 26622                                  			    ; 586h (PCDOS 7.1 IBMBIO.COM, SYSINIT)	
 26623                                  				        ; starting after the stack.  M069
 26624                                  					;  this does not cover the possible stack code!!!
 26625                                  	;;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 26626                                  	; 02/11/2022
 26627                                  	;;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 26628                                  	; 10/04/2024
 26629                                  	;mov	cx,5B40h  ; (23360) for PCDOS 7.1 IBMBIO.COM (SYSINIT)	
 26630                                  	; 30/12/2022  
 26631 000011CA B9[D04E]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 26632 000011CD 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 26633 000011CF D1E9                    	shr	cx,1
 26634                                  sum2:
 26635 000011D1 260304                  	add	ax,[es:si]
 26636 000011D4 46                      	inc	si
 26637 000011D5 46                      	inc	si
 26638 000011D6 E2F9                    	loop	sum2
 26639 000011D8 1F                      	pop	ds
 26640 000011D9 C3                      	retn
 26641                                  
 26642                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26643                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 26644                                  ; (SYSINIT:12F2h)
 26645                                  ; 10/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 26646                                  ; (SYSINIT:149Dh)
 26647                                  
 26648                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 26649                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h)
 26650                                  				    ; = 62 (PCDOS 7.1 IBMBIO.COM, SYSINIT:143Bh)
 26651                                  sysinit_base_ssx:	
 26652 000011DA 0000                    	dw	0
 26653                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 26654                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1295h)
 26655                                  				    ; = 64 (PCDOS 7.1 IBMBIO.COM, SYSINIT:1440h)
 26656                                  sysinit_base_spx:
 26657 000011DC 0000                    	dw	0	
 26658                                  
 26659                                  mem_alloc_err_msgx:
 26660                                  
 26661                                         ;include msbio.cl4		; memory allocation error message
 26662                                  
 26663                                  ;(SYSINIT:12F6h: ; MSDOS 6.21 IO.SYS)
 26664                                  ;SYSINIT:14A1h:	; PCDOS 7.1 IBMBIO.COM
 26665 000011DE 0D0A                    	db	0Dh,0Ah
 26666 000011E0 4D656D6F727920616C-     	db 	'Memory allocation error $'
 26666 000011E9 6C6F636174696F6E20-
 26666 000011F2 6572726F722024     
 26667                                  
 26668                                  end_sysinit_base: ; label byte
 26669                                  	; 24/10/2022
 26670                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 26671                                  
 26672                                  ; ----------------------------------------------------------------------
 26673                                  ; Set_Buffer
 26674                                  ;
 26675                                  ;function: set buffers in the real memory.				  
 26676                                  ;	   lastly set the memhi,memlo for the next available free address.
 26677                                  ;
 26678                                  ;input:    ds:bx -> buffinfo.
 26679                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 26680                                  ;	   singlebuffersize = buffer header size + sector size		  
 26681                                  ;
 26682                                  ;output:   buffers Queue established.	       				   
 26683                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 26684                                  ; ----------------------------------------------------------------------
 26685                                  
 26686                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26687                                  	; (SYSINIT:11DCh)
 26688                                  
 26689                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26690                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:14BCh)
 26691                                  
 26692                                  set_buffer:
 26693 000011F9 30D2                    	xor	dl,dl				; assume buffers not in HMA
 26694 000011FB E85500                  	call	GetBufferAddr
 26695 000011FE 7402                    	jz	short set_buff_1
 26696 00001200 B201                    	mov	dl,1				; buffers in HMA
 26697                                  set_buff_1:
 26698                                  	; 25/10/2022
 26699                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 26700 00001202 893F                    	mov	[bx],di
 26701                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 26702 00001204 8C4702                  	mov	[bx+2],es
 26703                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 26704 00001207 C747040000              	mov	word [bx+4],0
 26705                                  
 26706 0000120C 89F8                    	mov	ax,di
 26707 0000120E 2E8B0E[9702]            	mov	cx,[cs:buffers]
 26708 00001213 57                      	push	di				; remember first buffer
 26709                                  
 26710                                  ;	for each buffer
 26711                                  
 26712                                  nxt_buff:
 26713 00001214 E86700                  	call	set_buffer_info 		; set buf_link,buf_id...
 26714 00001217 89C7                    	mov	di,ax
 26715 00001219 E2F9                    	loop	nxt_buff
 26716                                  
 26717 0000121B 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 26718                                  
 26719 00001220 59                      	pop	cx				; get first buffer
 26720                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 26721 00001221 26890D                  	mov	[es:di],cx
 26722 00001224 87F9                    	xchg	cx,di
 26723                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 26724                                  	; 25/10/2022
 26725 00001226 26894D02                	mov	[es:di+2],cx
 26726                                  
 26727 0000122A 08D2                    	or	dl,dl				; In HMa ?
 26728 0000122C 7417                    	jz	short set_buff_2		; no
 26729                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 26730 0000122E C6470C01                	mov	byte [bx+12],1
 26731 00001232 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 26732                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 26733 00001236 C7470D0000              	mov	word [bx+13],0
 26734                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 26735 0000123B 89470F                  	mov	word [bx+15],ax
 26736 0000123E 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 26737                                  	; 11/04/2024 - Retro DOS v5.0
 26738                                  	; 05/09/2023
 26739                                  	;;sub	ax,bufinsiz ; 20		; buffer head not required
 26740                                  	;sub	ax,20
 26741 00001242 83E818                  	sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 26742                                  
 26743                                  set_buff_2:
 26744 00001245 2E0106[6003]            	add	[cs:memlo],ax
 26745                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26746 0000124A 2E800E[E114]02          	or	byte [cs:setdevmarkflag],2
 26747                                  	;call	round
 26748                                  	;retn
 26749                                  	; 12/12/2022
 26750 00001250 E96E30                  	jmp	round
 26751                                  
 26752                                  ; ----------------------------------------------------------------------
 26753                                  ; procedure : GetBufferAddr
 26754                                  ;
 26755                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 26756                                  ;
 26757                                  ; returns in es:di the buffer adress
 26758                                  ; returns NZ if allocated in HMA
 26759                                  ; ----------------------------------------------------------------------
 26760                                  
 26761                                  	; 25/10/2022 
 26762                                  GetBufferAddr:
 26763 00001253 53                      	push	bx
 26764 00001254 52                      	push	dx
 26765                                  
 26766                                  ; 18/03/2025 - MiniDOS 1.0
 26767                                  %if 0
 26768                                  	; 11/04/2024 - Retro DOS v5.0
 26769                                  	; PCDOS 7.1 IBMBIO.COM
 26770                                  	;;;
 26771                                  	cmp	byte [cs:dosdata_umb],2
 26772                                  				; is dosdata moved to UMB ? (DOSDATA=UMB done)
 26773                                  	jne	short gba_1     ; no
 26774                                  	cmp	word [bx+2],0FFFFh ; is the buffer (already) in HMA ?
 26775                                  	je	short gba_2	; yes
 26776                                  gba_1:
 26777                                  	;;;
 26778                                  
 26779                                  %endif
 26780 00001255 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 26781 00001259 2EF726[9702]            	mul	word [cs:buffers]
 26782                                  	;add	ax,0Fh
 26783 0000125E 83C00F                  	add	ax,15 
 26784                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26785                                  	;and	ax,~15	; 0FFF0h	; para round
 26786                                  	; 12/12/2022
 26787 00001261 24F0                    	and	al,~15	; 0F0h
 26788 00001263 89C3                    	mov	bx,ax
 26789 00001265 B8024A                  	mov	ax,4A02h
 26790                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 26791 00001268 CD2F                    	int	2Fh	; DOS 5+ - ALLOCATE HMA SPACE
 26792                                  			;     AX = 4A02h
 26793                                  			;     BX = number of bytes
 26794                                  			; Return:
 26795                                  			;     ES:DI -> start of allocated HMA block or FFFFh:FFFFh
 26796                                  			;     BX = number of bytes actually allocated
 26797                                  			;	   (rounded up to next paragraph)
 26798                                  			; Notes:
 26799                                  			;     this call is not valid unless DOS is loaded in the HMA
 26800                                  			;     (DOS=HIGH)
 26801                                  
 26802 0000126A 83FFFF                  	cmp	di,0FFFFh
 26803 0000126D 7506                    	jne	short got_hma
 26804                                  	
 26805                                  	;mov	di,0		; dont xor di,di Z flag needed
 26806                                  	; 05/09/2023
 26807                                  	; zf=1
 26808 0000126F 47                      	inc	di ; 0FFFFh -> 0
 26809                                  	; zf=1
 26810                                  	
 26811                                  	;zf=1
 26812                                  	;xor	di,di	; 25/10/2022
 26813                                  	;zf=1
 26814 00001270 2E8E06[6203]            	mov	es,[cs:memhi]
 26815                                  got_hma:
 26816 00001275 5A                      	pop	dx
 26817 00001276 5B                      	pop	bx
 26818 00001277 C3                      	retn
 26819                                  
 26820                                  	; 11/04/2024 - Retro DOS v5.0
 26821                                  	; PCDOS 7.1 IBMBIO.COM
 26822                                  	;;;
 26823                                  gba_2:
 26824 00001278 C43F                    	les	di,[bx]
 26825 0000127A 09FF                    	or	di,di
 26826                                  	;pop	dx
 26827                                  	;pop	bx
 26828                                  	;retn
 26829                                  	; 11/04/2024 - Retro DOS v5.0
 26830 0000127C EBF7                    	jmp	short got_hma
 26831                                  	;;;
 26832                                  
 26833                                  ; ----------------------------------------------------------------------
 26834                                  
 26835                                  set_buffer_info:
 26836                                  
 26837                                  ;function: set buf_link,buf_id,buf_sector
 26838                                  ;
 26839                                  ;in: es:di -> buffer header to be set.
 26840                                  ;    ax = di
 26841                                  ;
 26842                                  ;out:
 26843                                  ;    above entries set.
 26844                                  
 26845                                  	; 25/10/2022 
 26846 0000127E 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 26847                                  	;pop	word [es:di+buffinfo.buf_prev]
 26848 00001283 268F4502                	pop	word [es:di+2]
 26849 00001287 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 26850 0000128B 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 26851                                  	;mov	[es:di+buffinfo.buf_next],ax
 26852 00001290 268905                  	mov	[es:di],ax
 26853                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 26854 00001293 26C74504FF00            	mov	word [es:di+4],00FFh
 26855                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 26856 00001299 26C745060000            	mov	word [es:di+6],0
 26857                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 26858 0000129F 26C745080000            	mov	word [es:di+8],0
 26859 000012A5 C3                      	retn
 26860                                  
 26861                                  ; ======================================================================
 26862                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 26863                                  ; ----------------------------------------------------------------------
 26864                                  ; 27/03/2019 - Retro DOS v4.0
 26865                                  
 26866                                  ; ----------------------------------------------------------------------
 26867                                  ; ibmstack initialization routine.
 26868                                  ;
 26869                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 26870                                  ;	has been modified. this initialization routine also has to
 26871                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 26872                                  ;	should be set to signal that this interrupt handler is the
 26873                                  ;	first handler hooked to this interrupt vector.
 26874                                  ;	we determine this by looking at the instruction pointed by
 26875                                  ;	this vector. if it is iret, then this handler should be the
 26876                                  ;	first one. in our case, only the interrupt vector 77h is the
 26877                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 26878                                  ;
 26879                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 26880                                  ;	some design changes are needed to the above interrupt sharing
 26881                                  ;	method. the above sharing scheme assumes that 1). interrupt
 26882                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 26883                                  ;	interrupts would only be generated on levels 7 and 15.
 26884                                  ;	these assumptions are not true any more. we have to use the firstflag
 26885                                  ;	for every level of interrupt. we will set the firstflag on the following
 26886                                  ;	conditions:
 26887                                  ;
 26888                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 26889                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 26890                                  ;	 c. else if cs:ip points to an iret, then "first"
 26891                                  ;	 d. else if cs:ip points to dummy, then "first"
 26892                                  ;
 26893                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 26894                                  ;	be equal to the value at f000:ff01. this location is the initial value
 26895                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 26896                                  ;	the bioses for all of the machines.
 26897                                  ;
 26898                                  ;	system design group requests bios to handle the phantom interrupts.
 26899                                  ;
 26900                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 26901                                  ;	produced by the bogus adapter card even without interrupt request is
 26902                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 26903                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 26904                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 26905                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 26906                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 26907                                  ;	interrupt line.
 26908                                  ;
 26909                                  ;	to handle those "phantom" interrupts, the main stack code will check
 26910                                  ;	the own firstflag, and if it is not "first" (which means the forward
 26911                                  ;	pointer points to the legal shared interrupt handler), then pass the
 26912                                  ;	control. if it is the first, then the following action should be
 26913                                  ;	taken. we don't have to implement skack logic in this case.
 26914                                  ;
 26915                                  ;	to implement this logic, we rather choose a simple method.
 26916                                  ;	if ont of the above "firstflag" conditions is met, we are not
 26917                                  ;	going to hook this interrupt vector. the reason is if the original
 26918                                  ;	vector points to "iret" and do nothing, we don't need
 26919                                  ;	to implement the stack logic for it. this will simplify implementation
 26920                                  ;	while maintaining compatibility with the old version of dos.
 26921                                  ;	this implies that in the main stack code, there might be a stack code
 26922                                  ;	that will never be used, a dead code.
 26923                                  ;
 26924                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 26925                                  
 26926                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26927                                  	; (SYSINIT:1287h)
 26928                                  
 26929                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26930                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:157Ch)
 26931                                  
 26932                                  	; 14/12/2022
 26933                                  stackinit:
 26934 000012A6 50                      	push	ax
 26935 000012A7 1E                      	push	ds
 26936 000012A8 06                      	push	es
 26937 000012A9 53                      	push	bx
 26938 000012AA 51                      	push	cx
 26939 000012AB 52                      	push	dx
 26940 000012AC 57                      	push	di
 26941 000012AD 56                      	push	si
 26942 000012AE 55                      	push	bp
 26943                                  
 26944                                  ;currently es -> stack code area
 26945                                  
 26946                                  	; 12/12/2022
 26947                                  	; ds = cs
 26948 000012AF A1[8A02]                	mov	ax,[stack_count]
 26949 000012B2 89C1                    	mov	cx,ax  ; *!*!*  
 26950                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26951                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 26952                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 26953 000012B4 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 26954                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 26955 000012B8 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 26956 000012BB 26A3[0600]              	mov	[es:stacksize],ax
 26957                                  	; 12/12/2022
 26958 000012BF A1[8E02]                	mov	ax,[stack_addr]			; offset
 26959                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26960                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26961                                  	;mov	ax,[cs:stack_addr]  ; !!
 26962 000012C2 26A3[0800]              	mov	[es:stacks],ax
 26963                                  	; 12/12/2022
 26964 000012C6 89C5                    	mov	bp,ax ; *!*
 26965 000012C8 A1[9002]                	mov	ax,[stack_addr+2]
 26966                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26967                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26968                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 26969 000012CB 26A3[0A00]              	mov	[es:stacks+2],ax
 26970                                  
 26971                                  ; initialize the data fields with the parameters
 26972                                  
 26973                                  ; "firstentry" will always be at stacks
 26974                                  
 26975                                  	;mov	bp,[es:stacks]			; get offset of stack
 26976                                  	; 12/12/2022
 26977                                  	; bp = [es:stacks] ; *!*
 26978 000012CF 26892E[0C00]            	mov	[es:firstentry],bp
 26979                                  
 26980                                  ; the stacks will always immediately follow the table entries
 26981                                  
 26982 000012D4 B80800                  	mov	ax,entrysize ; 8
 26983                                  	;mov	cx,[es:stackcount]
 26984                                  	; 12/12/2022
 26985                                  	; cx = [es:stackcount] ; *!*!*
 26986 000012D7 F7E1                    	mul	cx
 26987 000012D9 01E8                    	add	ax,bp
 26988 000012DB 26A3[0400]              	mov	[es:stackat],ax
 26989 000012DF 89C3                    	mov	bx,ax
 26990 000012E1 83EB02                  	sub	bx,2
 26991                                  
 26992                                  ; zero the entire stack area to start with
 26993                                  
 26994 000012E4 268B3E[0400]            	mov	di,[es:stackat]
 26995 000012E9 26A1[0600]              	mov	ax,[es:stacksize]
 26996 000012ED F7E1                    	mul	cx
 26997 000012EF 89C1                    	mov	cx,ax
 26998 000012F1 31C0                    	xor	ax,ax
 26999 000012F3 06                      	push	es
 27000 000012F4 1F                      	pop	ds				;ds = relocated stack code seg.
 27001                                  
 27002                                  ;now, ds -> stack code area
 27003                                  
 27004 000012F5 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 27005 000012F9 FC                      	cld
 27006 000012FA F3AA                    	rep	stosb
 27007                                  
 27008 000012FC 8B0E[0200]              	mov	cx,[stackcount]
 27009                                  
 27010                                  ; loop for "count" times, building a table entry
 27011                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 27012                                  ;  cx = number of entries
 27013                                  ;  es:bp => base of stacks - 2
 27014                                  ;  es:bx => first table entry
 27015                                  
 27016                                  buildloop:
 27017                                  	; 11/12/2022
 27018                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 27019                                  	; 25/10/2022
 27020                                  	;mov	byte [es:bp],free
 27021                                  	; 06/07/2023
 27022 00001300 26884600                	mov	[es:bp],al ; 0 ; free
 27023 00001304 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 27024                                  	;mov	[es:bp+1],al
 27025 00001308 26894602                	mov	[es:bp+savedsp],ax
 27026                                  	;mov	[es:bp2],ax
 27027 0000130C 26894604                	mov	[es:bp+savedss],ax
 27028                                  	;mov	[es:bp+4],ax
 27029 00001310 031E[0600]              	add	bx,[stacksize]
 27030 00001314 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 27031                                  	;mov	[es:bp+6],bx
 27032 00001318 26892F                  	mov	[es:bx],bp
 27033 0000131B 83C508                  	add	bp,entrysize ; 8
 27034                                  
 27035 0000131E E2E0                    	loop	buildloop
 27036                                  
 27037 00001320 83ED08                  	sub	bp,entrysize ; 8
 27038 00001323 892E[0E00]              	mov	[lastentry],bp
 27039 00001327 892E[1000]              	mov	[nextentry],bp
 27040                                  
 27041 0000132B 1E                      	push	ds
 27042                                  	;mov	ax,0F000h		;look at the model byte
 27043                                  	; 05/09/2023
 27044 0000132C B4F0                    	mov	ah,0F0h ; ax = 0F000h
 27045 0000132E 8ED8                    	mov	ds,ax
 27046 00001330 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 27047 00001335 1F                      	pop	ds
 27048 00001336 7504                    	jne	short skip_disablenmis
 27049                                  
 27050 00001338 B007                    	mov	al,07h			; disable convertible nmis
 27051 0000133A E672                    	out	72h,al
 27052                                  
 27053                                  skip_disablenmis:
 27054 0000133C 31C0                    	xor	ax,ax
 27055 0000133E 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 27056                                  					;ds - relocated stack code segment
 27057 00001340 FA                      	cli
 27058                                  
 27059                                  	;irp	aa,<02,08,09,70>
 27060                                  	;
 27061                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27062                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 27063                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 27064                                  	;mov	dx,offset int&aa	;pass where new handler is
 27065                                  	;call	new_init_loop		;adjust the vector to new handler,
 27066                                  	;				;saving pointer to original owner
 27067                                  	;endm
 27068                                  
 27069                                  stkinit_02:
 27070 00001341 BE0800                  	mov	si,02h*4 ; 8
 27071 00001344 BF[B305]                	mov	di,INT19OLD02
 27072 00001347 BB[1200]                	mov	bx,old02
 27073 0000134A BA[1600]                	mov	dx,int02
 27074 0000134D E84801                  	call	new_init_loop
 27075                                  stkinit_08:
 27076 00001350 BE2000                  	mov	si,08h*4 ; 32
 27077 00001353 BF[B805]                	mov	di,INT19OLD08
 27078 00001356 BB[3800]                	mov	bx,old08
 27079 00001359 BA[3C00]                	mov	dx,int08
 27080 0000135C E83901                  	call	new_init_loop
 27081                                  stkinit_09:
 27082 0000135F BE2400                  	mov	si,09h*4 ; 36
 27083 00001362 BF[BD05]                	mov	di,INT19OLD09
 27084 00001365 BB[4100]                	mov	bx,old09
 27085 00001368 BA[4500]                	mov	dx,int09
 27086 0000136B E82A01                  	call	new_init_loop
 27087                                  stkinit_70:
 27088 0000136E BEC001                  	mov	si,70h*4 ; 448
 27089 00001371 BF[DB05]                	mov	di,INT19OLD70
 27090 00001374 BB[4E00]                	mov	bx,old70
 27091 00001377 BA[5200]                	mov	dx,int70
 27092 0000137A E81B01                  	call	new_init_loop
 27093                                  
 27094                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 27095                                  	;
 27096                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27097                                  	;push	ds			;save relocated stack code segment
 27098                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 27099                                  	;push	ds
 27100                                  	;pop	dx			;dx = segment value
 27101                                  	;	
 27102                                  	;cmp	dx,0
 27103                                  	;jz	int&aa&_first
 27104                                  	;
 27105                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 27106                                  	;jz	int&aa&_first
 27107                                  	;
 27108                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 27109                                  	;jz	int&aa&_not_first
 27110                                  	;
 27111                                  	;cmp	dx,0f000h		;rom bios segment
 27112                                  	;jnz	int&aa&_not_first
 27113                                  	;
 27114                                  	;push	es
 27115                                  	;push	dx
 27116                                  	;mov	dx,0f000h
 27117                                  	;mov	es,dx
 27118                                  	;cmp	bx,word ptr es:0ff01h
 27119                                         	;pop	dx
 27120                                  	;pop	es
 27121                                  	;jz	int&aa&_first
 27122                                  	;
 27123                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 27124                                  	;pop	ds
 27125                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 27126                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 27127                                  	;mov	dx, offset int&aa	;pass where new handler is
 27128                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 27129                                  	;				;pointer to original owner.
 27130                                  	;jmp	short int&aa&_end
 27131                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 27132                                  	;pop	ds
 27133                                  ;int&aa&_end:
 27134                                  	;
 27135                                  	;endm
 27136                                  
 27137                                  stkinit_0A:
 27138 0000137D BE2800                  	mov	si,0Ah*4 ; 40
 27139                                  	
 27140                                  ; 14/12/2022
 27141                                  %if 0	
 27142                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27143                                  	push	ds
 27144                                  	
 27145                                  	lds	bx,[es:si]
 27146                                  	push	ds
 27147                                  	pop	dx
 27148                                  		
 27149                                  	cmp	dx,0
 27150                                  	je	short int_0A_first
 27151                                  	
 27152                                  	cmp	byte [bx],0CFh
 27153                                  	je	short int_0A_first
 27154                                  	
 27155                                  	cmp	word [bx+6],424Bh
 27156                                  	je	short int_0A_not_first
 27157                                  	
 27158                                  	cmp	dx,0F000h
 27159                                  	jne	short int_0A_not_first
 27160                                  	
 27161                                  	push	es
 27162                                  	push	dx
 27163                                  	mov	dx,0F000h
 27164                                  	mov	es,dx
 27165                                  	cmp	bx,[es:0FF01h]
 27166                                         	pop	dx
 27167                                  	pop	es
 27168                                  	je	short int_0A_first
 27169                                  %Endif
 27170                                  
 27171                                  	; 14/12/2022
 27172                                  	; 25/10/2022
 27173 00001380 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27174 00001383 730C                    	jnc	short int_0A_first
 27175                                  	
 27176                                  int_0A_not_first:
 27177                                  	; 14/12/2022
 27178                                  	; 25/10/2022
 27179                                  	;pop	ds
 27180 00001385 BF[C205]                	mov	di,INT19OLD0A
 27181 00001388 BB[5900]                	mov	bx,old0A
 27182 0000138B BA[5700]                	mov	dx,int0A
 27183 0000138E E80701                  	call	new_init_loop
 27184                                  	
 27185                                  	; 14/12/2022	
 27186                                  	;jmp	short int_0A_end
 27187                                  ;int_0A_first:
 27188                                  	; 25/10/2022
 27189                                  	;pop	ds
 27190                                  
 27191                                  	; 14/12/2022
 27192                                  int_0A_first:
 27193                                  int_0A_end:
 27194                                  
 27195                                  stkinit_0B:
 27196 00001391 BE2C00                  	mov	si,0Bh*4 ; 44
 27197                                  	
 27198                                  	; 14/12/2022
 27199                                  	; 25/10/2022
 27200 00001394 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27201 00001397 730C                    	jnc	short int_0B_end ; int_0B_first
 27202                                  
 27203                                  ; 14/12/2022
 27204                                  %if 0	
 27205                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27206                                  	push	ds
 27207                                  	lds	bx,[es:si]
 27208                                  	push	ds
 27209                                  	pop	dx
 27210                                  		
 27211                                  	cmp	dx,0
 27212                                  	je	short int_0B_first
 27213                                  
 27214                                  	cmp	byte [bx],0CFh
 27215                                  	je	short int_0B_first
 27216                                  	
 27217                                  	cmp	word [bx+6],424Bh
 27218                                  	je	short int_0B_not_first
 27219                                  	
 27220                                  	cmp	dx,0F000h
 27221                                  	jne	short int_0B_not_first
 27222                                  
 27223                                  	push	es
 27224                                  	push	dx
 27225                                  	mov	dx,0F000h
 27226                                  	mov	es,dx
 27227                                  	cmp	bx,[es:0FF01h]
 27228                                  	pop	dx
 27229                                  	pop	es
 27230                                  	je	short int_0B_first
 27231                                  %endif
 27232                                  
 27233                                  int_0B_not_first:
 27234                                  	; 14/12/2022
 27235                                  	; 25/10/2022
 27236                                  	;pop	ds
 27237 00001399 BF[C705]                	mov	di,INT19OLD0B
 27238 0000139C BB[7100]                	mov	bx,old0B
 27239 0000139F BA[6F00]                	mov	dx,int0B
 27240 000013A2 E8F300                  	call	new_init_loop
 27241                                  
 27242                                  	; 14/12/2022
 27243                                  	;jmp	short int_0B_end
 27244                                  ;int_0B_first:
 27245                                  	; 25/10/2022
 27246                                  	;pop	ds
 27247                                  
 27248                                  int_0B_end:
 27249                                  	
 27250                                  stkinit_0C:
 27251 000013A5 BE3000                  	mov	si,0Ch*4 ; 48
 27252                                  	
 27253                                  	; 14/12/2022
 27254                                  	; 25/10/2022
 27255 000013A8 E8C300                  	call	int_xx_first_check
 27256 000013AB 730C                    	jnc	short int_0C_end ; int_0C_first
 27257                                  
 27258                                  ; 14/12/2022
 27259                                  %if 0	
 27260                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27261                                  	push	ds
 27262                                  	lds	bx,[es:si]
 27263                                  	push	ds
 27264                                  	pop	dx
 27265                                  		
 27266                                  	cmp	dx,0
 27267                                  	je	short int_0C_first
 27268                                  
 27269                                  	cmp	byte [bx],0CFh
 27270                                  	je	short int_0C_first
 27271                                  	
 27272                                  	cmp	word [bx+6],424Bh
 27273                                  	je	short int_0C_not_first
 27274                                  	
 27275                                  	cmp	dx,0F000h
 27276                                  	jne	short int_0C_not_first
 27277                                  
 27278                                  	push	es
 27279                                  	push	dx
 27280                                  	mov	dx,0F000h
 27281                                  	mov	es,dx
 27282                                  	cmp	bx,[es:0FF01h]
 27283                                  	pop	dx
 27284                                  	pop	es
 27285                                  	je	short int_0C_first
 27286                                  %endif
 27287                                  	
 27288                                  int_0C_not_first:
 27289                                  	; 14/12/2022
 27290                                  	; 25/10/2022
 27291                                  	;pop	ds
 27292 000013AD BF[CC05]                	mov	di,INT19OLD0C
 27293 000013B0 BB[8900]                	mov	bx,old0C
 27294 000013B3 BA[8700]                	mov	dx,int0C
 27295 000013B6 E8DF00                  	call	new_init_loop
 27296                                  
 27297                                  	; 14/12/2022
 27298                                  	;jmp	short int_0C_end
 27299                                  ;int_0C_first:
 27300                                  	; 25/10/2022
 27301                                  	;pop	ds
 27302                                  
 27303                                  int_0C_end:
 27304                                  
 27305                                  stkinit_0D:
 27306 000013B9 BE3400                  	mov	si,0Dh*4 ; 52
 27307                                  
 27308                                  	; 14/12/2022	
 27309                                  	; 25/10/2022
 27310 000013BC E8AF00                  	call	int_xx_first_check
 27311 000013BF 730C                    	jnc	short int_0D_end ; int_0D_first
 27312                                  
 27313                                  ; 14/12/2022
 27314                                  %if 0	
 27315                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27316                                  	push	ds
 27317                                  	lds	bx,[es:si]
 27318                                  	push	ds
 27319                                  	pop	dx
 27320                                  		
 27321                                  	cmp	dx,0
 27322                                  	je	short int_0D_first
 27323                                  
 27324                                  	cmp	byte [bx],0CFh
 27325                                  	je	short int_0D_first
 27326                                  	
 27327                                  	cmp	word [bx+6],424Bh
 27328                                  	je	short int_0D_not_first
 27329                                  	
 27330                                  	cmp	dx,0F000h
 27331                                  	jne	short int_0D_not_first
 27332                                  
 27333                                  	push	es
 27334                                  	push	dx
 27335                                  	mov	dx,0F000h
 27336                                  	mov	es,dx
 27337                                  	cmp	bx,[es:0FF01h]
 27338                                  	pop	dx
 27339                                  	pop	es
 27340                                  	je	short int_0D_first
 27341                                  %endif
 27342                                  	
 27343                                  int_0D_not_first:
 27344                                  	; 14/12/2022
 27345                                  	; 25/10/2022
 27346                                  	;pop	ds
 27347 000013C1 BF[D105]                	mov	di,INT19OLD0D
 27348 000013C4 BB[A100]                	mov	bx,old0D
 27349 000013C7 BA[9F00]                	mov	dx,int0D
 27350 000013CA E8CB00                  	call	new_init_loop
 27351                                  
 27352                                  	; 14/12/2022
 27353                                  	;jmp	short int_0D_end
 27354                                  	; 02/11/2022
 27355                                  ;int_0D_first:
 27356                                  	;pop	ds
 27357                                  
 27358                                  int_0D_end:
 27359                                  
 27360                                  stkinit_0E:
 27361 000013CD BE3800                  	mov	si,0Eh*4 ; 56
 27362                                  
 27363                                  	; 14/12/2022	
 27364                                  	; 25/10/2022
 27365 000013D0 E89B00                  	call	int_xx_first_check
 27366 000013D3 730C                    	jnc	short int_0E_end ; int_0E_first
 27367                                  
 27368                                  ; 14/12/2022
 27369                                  %if 0	
 27370                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27371                                  	push	ds
 27372                                  	lds	bx,[es:si]
 27373                                  	push	ds
 27374                                  	pop	dx
 27375                                  		
 27376                                  	cmp	dx,0
 27377                                  	je	short int_0E_first
 27378                                  
 27379                                  	cmp	byte [bx],0CFh
 27380                                  	je	short int_0E_first
 27381                                  	
 27382                                  	cmp	word [bx+6],424Bh
 27383                                  	je	short int_0E_not_first
 27384                                  	
 27385                                  	cmp	dx,0F000h
 27386                                  	jne	short int_0E_not_first
 27387                                  
 27388                                  	push	es
 27389                                  	push	dx
 27390                                  	mov	dx,0F000h
 27391                                  	mov	es,dx
 27392                                  	cmp	bx,[es:0FF01h]
 27393                                  	pop	dx
 27394                                  	pop	es
 27395                                  	je	short int_0E_first
 27396                                  %endif
 27397                                  	
 27398                                  int_0E_not_first:
 27399                                  	; 14/12/2022
 27400                                  	; 25/10/2022
 27401                                  	;pop	ds
 27402 000013D5 BF[D605]                	mov	di,INT19OLD0E
 27403 000013D8 BB[B900]                	mov	bx,old0E
 27404 000013DB BA[B700]                	mov	dx,int0E
 27405 000013DE E8B700                  	call	new_init_loop
 27406                                  
 27407                                  	; 14/12/2022
 27408                                  	;jmp	short int_0E_end
 27409                                  ;int_0E_first:
 27410                                  	; 25/10/2022
 27411                                  	;pop	ds	
 27412                                  
 27413                                  int_0E_end:
 27414                                  
 27415                                  stkinit_72:
 27416 000013E1 BEC801                  	mov	si,72h*4 ; 456
 27417                                  	
 27418                                  	; 14/12/2022
 27419                                  	; 25/10/2022
 27420 000013E4 E88700                  	call	int_xx_first_check
 27421 000013E7 730C                    	jnc	short int_72_end ; int_72_first
 27422                                  
 27423                                  ; 14/12/2022
 27424                                  %if 0	
 27425                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27426                                  	push	ds
 27427                                  	lds	bx,[es:si]
 27428                                  	push	ds
 27429                                  	pop	dx
 27430                                  		
 27431                                  	cmp	dx,0
 27432                                  	je	short int_72_first
 27433                                  
 27434                                  	cmp	byte [bx],0CFh
 27435                                  	je	short int_72_first
 27436                                  	
 27437                                  	cmp	word [bx+6],424Bh
 27438                                  	je	short int_72_not_first
 27439                                  	
 27440                                  	cmp	dx,0F000h
 27441                                  	jne	short int_72_not_first
 27442                                  
 27443                                  	push	es
 27444                                  	push	dx
 27445                                  	mov	dx,0F000h
 27446                                  	mov	es,dx
 27447                                  	cmp	bx,[es:0FF01h]
 27448                                  	pop	dx
 27449                                  	pop	es
 27450                                  	je	short int_72_first
 27451                                  %endif
 27452                                  	
 27453                                  int_72_not_first:
 27454                                  	; 14/12/2022
 27455                                  	; 25/10/2022
 27456                                  	;pop	ds
 27457 000013E9 BF[E005]                	mov	di,INT19OLD72
 27458 000013EC BB[D100]                	mov	bx,old72
 27459 000013EF BA[CF00]                	mov	dx,int72
 27460 000013F2 E8A300                  	call	new_init_loop
 27461                                  
 27462                                  	; 14/12/2022
 27463                                  	;jmp	short int_72_end
 27464                                  ;int_72_first:
 27465                                  	; 25/10/2022
 27466                                  	;pop	ds
 27467                                  
 27468                                  int_72_end:
 27469                                  
 27470                                  stkinit_73:
 27471 000013F5 BECC01                  	mov	si,73h*4 ; 460
 27472                                  	
 27473                                  	; 14/12/2022
 27474                                  	; 25/10/2022
 27475 000013F8 E87300                  	call	int_xx_first_check
 27476 000013FB 730C                    	jnc	short int_73_end ; int_73_first
 27477                                  
 27478                                  ; 14/12/2022
 27479                                  %if 0	
 27480                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27481                                  	push	ds
 27482                                  	lds	bx,[es:si]
 27483                                  	push	ds
 27484                                  	pop	dx
 27485                                  		
 27486                                  	cmp	dx,0
 27487                                  	je	short int_73_first
 27488                                  
 27489                                  	cmp	byte [bx],0CFh
 27490                                  	je	short int_73_first
 27491                                  	
 27492                                  	cmp	word [bx+6],424Bh
 27493                                  	je	short int_73_not_first
 27494                                  	
 27495                                  	cmp	dx,0F000h
 27496                                  	jne	short int_73_not_first
 27497                                  
 27498                                  	push	es
 27499                                  	push	dx
 27500                                  	mov	dx,0F000h
 27501                                  	mov	es,dx
 27502                                  	cmp	bx,[es:0FF01h]
 27503                                  	pop	dx
 27504                                  	pop	es
 27505                                  	je	short int_73_first
 27506                                  %endif	
 27507                                  	
 27508                                  int_73_not_first:
 27509                                  	; 14/12/2022
 27510                                  	; 25/10/2022
 27511                                  	;pop	ds
 27512 000013FD BF[E505]                	mov	di,INT19OLD73
 27513 00001400 BB[E900]                	mov	bx,old73
 27514 00001403 BA[E700]                	mov	dx,int73
 27515 00001406 E88F00                  	call	new_init_loop
 27516                                  
 27517                                  	; 14/12/2022
 27518                                  	;jmp	short int_73_end
 27519                                  ;int_73_first:
 27520                                  	; 25/10/2022
 27521                                  	;pop	ds
 27522                                  
 27523                                  int_73_end:
 27524                                  
 27525                                  stkinit_74:
 27526 00001409 BED001                  	mov	si,74h*4 ; 464
 27527                                  	
 27528                                  	; 14/12/2022
 27529                                  	; 25/10/2022
 27530 0000140C E85F00                  	call	int_xx_first_check
 27531 0000140F 730C                    	jnc	short int_74_end ; int_74_first
 27532                                  
 27533                                  ; 14/12/2022
 27534                                  %if 0		
 27535                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27536                                  	push	ds
 27537                                  	lds	bx,[es:si]
 27538                                  	push	ds
 27539                                  	pop	dx
 27540                                  		
 27541                                  	cmp	dx,0
 27542                                  	je	short int_74_first
 27543                                  
 27544                                  	cmp	byte [bx],0CFh
 27545                                  	je	short int_74_first
 27546                                  	
 27547                                  	cmp	word [bx+6],424Bh
 27548                                  	je	short int_74_not_first
 27549                                  	
 27550                                  	cmp	dx,0F000h
 27551                                  	jne	short int_74_not_first
 27552                                  
 27553                                  	push	es
 27554                                  	push	dx
 27555                                  	mov	dx,0F000h
 27556                                  	mov	es,dx
 27557                                  	cmp	bx,[es:0FF01h]
 27558                                  	pop	dx
 27559                                  	pop	es
 27560                                  	je	short int_74_first
 27561                                  %endif
 27562                                  
 27563                                  int_74_not_first:
 27564                                  	; 14/12/2022
 27565                                  	; 25/10/2022
 27566                                  	;pop	ds
 27567 00001411 BF[EA05]                	mov	di,INT19OLD74
 27568 00001414 BB[0101]                	mov	bx,old74
 27569 00001417 BA[FF00]                	mov	dx,int74
 27570 0000141A E87B00                  	call	new_init_loop
 27571                                  	
 27572                                  	; 14/12/2022
 27573                                  	;jmp	short int_74_end
 27574                                  ;int_74_first:
 27575                                  	; 25/10/2022
 27576                                  	;pop	ds
 27577                                  
 27578                                  int_74_end:
 27579                                  
 27580                                  stkinit_76:
 27581 0000141D BED801                  	mov	si,76h*4 ; 472
 27582                                  	
 27583                                  	; 14/12/2022
 27584                                  	; 25/10/2022
 27585 00001420 E84B00                  	call	int_xx_first_check
 27586 00001423 730E                    	jnc	short int_76_end ; int_76_first
 27587                                  
 27588                                  ; 14/12/2022
 27589                                  %if 0	
 27590                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27591                                  	push	ds
 27592                                  	lds	bx,[es:si]
 27593                                  	push	ds
 27594                                  	pop	dx
 27595                                  		
 27596                                  	cmp	dx,0
 27597                                  	je	short int_76_first
 27598                                  
 27599                                  	cmp	byte [bx],0CFh
 27600                                  	je	short int_76_first
 27601                                  	
 27602                                  	cmp	word [bx+6],424Bh
 27603                                  	je	short int_76_not_first
 27604                                  	
 27605                                  	cmp	dx,0F000h
 27606                                  	jne	short int_76_not_first
 27607                                  
 27608                                  	push	es
 27609                                  	push	dx
 27610                                  	mov	dx,0F000h
 27611                                  	mov	es,dx
 27612                                  	cmp	bx,[es:0FF01h]
 27613                                  	pop	dx
 27614                                  	pop	es
 27615                                  	je	short int_76_first
 27616                                  %endif
 27617                                  	
 27618                                  int_76_not_first:
 27619                                  	; 14/12/2022
 27620                                  	; 25/10/2022
 27621                                  	;pop	ds
 27622 00001425 BF[EF05]                	mov	di,INT19OLD76
 27623 00001428 BB[1901]                	mov	bx,old76
 27624 0000142B BA[1701]                	mov	dx,int76
 27625 0000142E E86700                  	call	new_init_loop
 27626                                  
 27627                                  	; 14/12/2022
 27628 00001431 EB00                    	jmp	short int_76_end
 27629                                  ;int_76_first:
 27630                                  	; 25/10/2022
 27631                                  	;pop	ds
 27632                                  
 27633                                  int_76_end:
 27634                                  
 27635                                  stkinit_77:
 27636 00001433 BEDC01                  	mov	si,77h*4 ; 476
 27637                                  	
 27638                                  	; 14/12/2022
 27639                                  	; 25/10/2022
 27640 00001436 E83500                  	call	int_xx_first_check
 27641 00001439 730C                    	jnc	short int_77_end ; int_77_first
 27642                                  
 27643                                  ; 14/12/2022
 27644                                  %if 0	
 27645                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27646                                  	push	ds
 27647                                  	lds	bx,[es:si]
 27648                                  	push	ds
 27649                                  	pop	dx
 27650                                  		
 27651                                  	cmp	dx,0
 27652                                  	je	short int_77_first
 27653                                  
 27654                                  	cmp	byte [bx],0CFh
 27655                                  	je	short int_77_first
 27656                                  	
 27657                                  	cmp	word [bx+6],424Bh
 27658                                  	je	short int_77_not_first
 27659                                  	
 27660                                  	cmp	dx,0F000h
 27661                                  	jne	short int_77_not_first
 27662                                  
 27663                                  	push	es
 27664                                  	push	dx
 27665                                  	mov	dx,0F000h
 27666                                  	mov	es,dx
 27667                                  	cmp	bx,[es:0FF01h]
 27668                                  	pop	dx
 27669                                  	pop	es
 27670                                  	je	short int_77_first
 27671                                  %endif
 27672                                  	
 27673                                  int_77_not_first:
 27674                                  	; 14/12/2022
 27675                                  	; 25/10/2022
 27676                                  	;pop	ds
 27677 0000143B BF[F405]                	mov	di,INT19OLD77
 27678 0000143E BB[3101]                	mov	bx,old77
 27679 00001441 BA[2F01]                	mov	dx,int77
 27680 00001444 E85100                  	call	new_init_loop
 27681                                  
 27682                                  	; 14/12/2022
 27683                                  	;jmp	short int_77_end
 27684                                  ;int_77_first:
 27685                                  	; 25/10/2022
 27686                                  	;pop	ds
 27687                                  
 27688                                  int_77_end:
 27689 00001447 1E                      	push	ds
 27690 00001448 B800F0                  	mov	ax,0F000h		; look at the model byte
 27691 0000144B 8ED8                    	mov	ds,ax
 27692 0000144D 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 27693 00001452 1F                      	pop	ds
 27694 00001453 7504                    	jne	short skip_enablenmis
 27695                                  
 27696 00001455 B027                    	mov	al,27h			; enable convertible nmis
 27697 00001457 E672                    	out	72h,al
 27698                                  
 27699                                  ; 25/10/2022
 27700                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 27701                                  
 27702                                  skip_enablenmis:
 27703 00001459 FB                      	sti
 27704                                  	;;mov	ax,Bios_Data ; 70h
 27705                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27706                                  	; 21/10/2022
 27707 0000145A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27708 0000145D 8ED8                    	mov	ds,ax
 27709                                  
 27710                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 27711                                  
 27712 0000145F C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 27713                                  					; initialization is complete
 27714                                  
 27715 00001464 5D                      	pop	bp			; restore all
 27716 00001465 5E                      	pop	si
 27717 00001466 5F                      	pop	di
 27718 00001467 5A                      	pop	dx
 27719 00001468 59                      	pop	cx
 27720 00001469 5B                      	pop	bx
 27721 0000146A 07                      	pop	es
 27722 0000146B 1F                      	pop	ds
 27723 0000146C 58                      	pop	ax
 27724 0000146D C3                      	retn
 27725                                  
 27726                                  ; 14/12/2022
 27727                                  ; ----------------------------------------------------------------------
 27728                                  
 27729                                  	; 14/12/2022
 27730                                  	; 25/10/2022
 27731                                  ;%if 0
 27732                                  	; 27/03/2019 - Retro DOS v4.0
 27733                                  int_xx_first_check:
 27734 0000146E 1E                      	push	ds
 27735 0000146F 26C51C                  	lds	bx,[es:si]
 27736 00001472 1E                      	push	ds
 27737 00001473 5A                      	pop	dx
 27738                                  		
 27739                                  	;cmp	dx,0
 27740                                  	;je	short int_xx_first
 27741                                  	; 05/09/2023
 27742 00001474 21D2                    	and	dx,dx
 27743 00001476 741E                    	jz	short int_xx_first
 27744                                  	
 27745 00001478 803FCF                  	cmp	byte [bx],0CFh
 27746 0000147B 7419                    	je	short int_xx_first
 27747                                  	
 27748 0000147D 817F064B42              	cmp	word [bx+6],424Bh
 27749 00001482 7411                    	je	short int_xx_not_first
 27750                                  	
 27751 00001484 81FA00F0                	cmp	dx,0F000h
 27752 00001488 750B                    	jne	short int_xx_not_first
 27753                                  
 27754 0000148A 06                      	push	es
 27755                                  	;push	dx
 27756                                  	;mov	dx,0F000h
 27757 0000148B 8EC2                    	mov	es,dx
 27758 0000148D 263B1E01FF              	cmp	bx,[es:0FF01h]
 27759                                        	;pop	dx
 27760 00001492 07                      	pop	es
 27761 00001493 7401                    	je	short int_xx_first
 27762                                  
 27763                                  int_xx_not_first:
 27764 00001495 F9                      	stc
 27765                                  int_xx_first:
 27766 00001496 1F                      	pop	ds
 27767 00001497 C3                      	retn
 27768                                  
 27769                                  ;%endif
 27770                                  
 27771                                  ; ----------------------------------------------------------------------
 27772                                  ; 27/03/2019 - Retro DOS v4.0
 27773                                  
 27774                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27775                                  ; (SYSINIT:1610h)
 27776                                  
 27777                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 27778                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1905h)
 27779                                  
 27780                                  new_init_loop:
 27781                                  
 27782                                  ; 18/03/2025 - MiniDOS 1.0
 27783                                  %if 0
 27784                                  	;;; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 27785                                  	cmp	byte [cs:dosdata_umb],2
 27786                                  				; is DOSDATA=UMB done ? (DOSDATA is in UMB)
 27787                                  	jne	short new_init_loop_1st
 27788                                  	push	ds		; restore original/previous interrupt handler
 27789                                  				; (from int19old?? field in BIOSDATA)
 27790                                  	;mov	ax,70h
 27791                                  	mov	ax,DOSBIODATASEG
 27792                                  	mov	ds,ax
 27793                                  	lds	ax,[di]		; restore original Int ?? handler addr from int19old?? field
 27794                                  	mov	[es:si],ax	; copy the original int handler addr to its int vector addr
 27795                                  	mov	[es:si+2],ds
 27796                                  	pop	ds
 27797                                  new_init_loop_1st: 
 27798                                  	;;;
 27799                                  
 27800                                  %endif
 27801                                  
 27802                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 27803                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 27804                                  ;	dx=ds:offset of intxx, the new interrupt handler
 27805                                  ;	di=offset value of int19old&aa variable in bios.
 27806                                  ;	es=zero, segid of vector table
 27807                                  ;	ds=relocated stack code segment
 27808                                  
 27809                                  ; 13/04/2024
 27810                                  %if 0
 27811                                  	mov	ax,[es:si]		;remember offset in vector
 27812                                  	mov	[bx],ax			; to original owner in ds
 27813                                  	mov	ax,[es:si+2]		;remember segid in vector
 27814                                  	mov	[bx+2],ax		; to original owner in ds
 27815                                  
 27816                                  	push	ds
 27817                                  	;;mov	ax,Bios_Data ; 70h
 27818                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27819                                  	; 21/10/2022
 27820                                  	mov	ax,DOSBIODATASEG ; 0070h
 27821                                  	mov	ds,ax			;set int19oldxx value in bios for
 27822                                  	mov	ax,[es:si]		;int 19 handler
 27823                                  	mov	[di],ax
 27824                                  	mov	ax,[es:si+2]
 27825                                  	mov	[di+2],ax
 27826                                  	pop	ds
 27827                                  %else
 27828                                  	; 13/04/2024 - Retro DOS v5.0
 27829 00001498 1E                      	push	ds
 27830 00001499 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 27831 0000149D 894702                  	mov	[bx+2],ax		; to original owner in ds
 27832 000014A0 50                      	push	ax
 27833 000014A1 268B04                  	mov	ax,[es:si]		;remember offset in vector
 27834 000014A4 8907                    	mov	[bx],ax			; to original owner in ds
 27835 000014A6 50                      	push	ax
 27836 000014A7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27837 000014AA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 27838 000014AC 58                      	pop	ax			;int 19 handler
 27839 000014AD 8905                    	mov	[di],ax
 27840 000014AF 58                      	pop	ax
 27841 000014B0 894502                  	mov	[di+2],ax
 27842 000014B3 1F                      	pop	ds
 27843                                  %endif
 27844 000014B4 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 27845 000014B7 268C5C02                	mov	[es:si+2],ds
 27846 000014BB C3                      	retn
 27847                                  
 27848                                  ; End of STACK initialization routine
 27849                                  ; ----------------------------------------------------------------------
 27850                                  
 27851                                  ; ----------------------------------------------------------------------
 27852                                  ;set the devmark for mem command.
 27853                                  ;in: [memhi] - the address to place devmark
 27854                                  ;    [memlo] = 0
 27855                                  ;    al = id for devmark_id
 27856                                  ;out: devmark established.
 27857                                  ;     the address saved in cs:[devmark_addr]
 27858                                  ;     [memhi] increase by 1.
 27859                                  ; ----------------------------------------------------------------------
 27860                                  
 27861                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27862                                  ; (SYSINIT:1637h)
 27863                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 27864                                  ; (SYSINIT:176Ch)
 27865                                  
 27866                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 27867                                  
 27868                                  setdevmark:
 27869                                  
 27870                                  	; 04/09/2023
 27871                                  	;push	es
 27872                                  	;push	cx
 27873                                  
 27874 000014BC 2E8B0E[6203]            	mov	cx,[cs:memhi]
 27875 000014C1 2E890E[DF14]            	mov	[cs:devmark_addr],cx
 27876 000014C6 8EC1                    	mov	es,cx
 27877                                  	; 25/10/2022
 27878                                  	;mov	[es:devmark.id],al
 27879 000014C8 26A20000                	mov	[es:0],al
 27880 000014CC 41                      	inc	cx
 27881                                  	;mov	[es:devmark.seg],cx
 27882 000014CD 26890E0100              	mov	[es:1],cx
 27883                                  
 27884                                  	; 04/09/2023
 27885                                  	;pop	cx
 27886                                  	;pop	es
 27887                                  	
 27888 000014D2 2EFF06[6203]            	inc	word [cs:memhi]
 27889 000014D7 C3                      	retn
 27890                                  
 27891                                  ; ----------------------------------------------------------------------
 27892                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 27893                                  ; ----------------------------------------------------------------------
 27894                                  ; 27/03/2019 - Retro DOS v4.0
 27895                                  
 27896                                  ;MULTI_CONFIG	equ 1
 27897                                  
 27898                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 27899                                                                          ; allocation strategy call
 27900                                  
 27901                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 27902                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 27903                                  
 27904                                  default_filenum equ 8
 27905                                  
 27906                                  ;stacksw	equ true		; include switchable hardware stacks
 27907                                  
 27908                                  ; external variable defined in ibmbio module for multi-track
 27909                                  
 27910                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 27911                                  					; it on after handling config.sys file as a
 27912                                  					; default value,if multrk_flag = multrk_off1.
 27913                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 27914                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 27915                                  
 27916                                  ; if stacksw
 27917                                  
 27918                                  ; internal stack parameters
 27919                                  
 27920                                  ;entrysize	equ 8
 27921                                  
 27922                                  ;mincount	equ 8
 27923                                  ;defaultcount	equ 9
 27924                                  ;maxcount	equ 64
 27925                                  
 27926                                  ;minsize 	equ 32
 27927                                  ;defaultsize	equ 128
 27928                                  ;maxsize 	equ 512
 27929                                  
 27930                                  DOS_FLAG_OFFSET	equ 86h
 27931                                  
 27932                                  ;ifdef MULTI_CONFIG
 27933                                  ;
 27934                                  ;   config_envlen must immediately precede config_wrkseg, because they
 27935                                  ;   may be loaded as a dword ptr
 27936                                  
 27937                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27938                                  ; 25/10/2022
 27939 000014D8 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 27940                                                 				;  a scratch env, this is its length
 27941 000014DA 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 27942                                                     			;  segment of work area
 27943                                  
 27944 000014DC 00                      config_cmd:	db  0  			; current config cmd
 27945                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 27946 000014DD 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 27947                                  
 27948                                  ;endif ; MULTI_CONFIG
 27949                                  
 27950 000014DE 00                      multdeviceflag:	db  0
 27951                                  
 27952 000014DF 0000                    devmark_addr:	dw  0			;segment address for devmark.
 27953                                  
 27954 000014E1 00                      setdevmarkflag: db  0			;flag used for devmark
 27955                                  
 27956                                  ; 30/12/2022
 27957                                  ; 12/12/2022
 27958 000014E2 00                      driver_units:	db  0			;total unitcount for driver
 27959                                  
 27960                                  ; 12/12/2022
 27961                                  ;ems_stub_installed:
 27962                                  ;		db  0
 27963                                  
 27964                                  ; 12/12/2022	
 27965                                  ;align 2
 27966                                  
 27967                                  badparm_ptr:	; label	dword
 27968 000014E3 0000                    badparm_off:	dw  0
 27969 000014E5 0000                    badparm_seg:	dw  0
 27970                                  
 27971                                  ;******************************************************************************
 27972                                  ;take care of config.sys file.
 27973                                  ;system parser data and code.
 27974                                  ;******************************************************************************
 27975                                  
 27976                                  ;*******************************************************************
 27977                                  ; parser options set for msbio sysconf module
 27978                                  ;*******************************************************************
 27979                                  ;
 27980                                  ;**** default assemble swiches definition **************************
 27981                                  
 27982                                  ;farsw	equ 0		; near call expected
 27983                                  ;datesw	equ 0		; check date format
 27984                                  ;timesw	equ 0		; check time format
 27985                                  ;filesw	equ 1		; check file specification
 27986                                  ;capsw	equ 0		; perform caps if specified
 27987                                  ;cmpxsw	equ 0		; check complex list
 27988                                  ;numsw	equ 1		; check numeric value
 27989                                  ;keysw	equ 0		; support keywords
 27990                                  ;swsw	equ 1		; support switches
 27991                                  ;val1sw	equ 1		; support value definition 1
 27992                                  ;val2sw	equ 0		; support value definition 2
 27993                                  ;val3sw	equ 1		; support value definition 3
 27994                                  ;drvsw	equ 1		; support drive only format
 27995                                  ;qussw	equ 0		; support quoted string format
 27996                                  
 27997                                  ; psdata_seg equ cs
 27998                                  
 27999                                  	;.xlist
 28000                                  	;include parse.asm		;together with psdata.inc
 28001                                  	;.list
 28002                                  
 28003                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 28004                                  ; ======================================================================
 28005                                  ; 27/03/2019 - Retro DOS v4.0
 28006                                  
 28007                                  ; 30/03/2019
 28008                                  ; VERSION.INC (MSDOS 6.0) 
 28009                                  ; Set DBCS Blank constant
 28010                                  
 28011                                  ; ifndef DBCS
 28012                                  DB_SPACE EQU 2020h
 28013                                  DB_SP_HI EQU 20h
 28014                                  DB_SP_LO EQU 20h
 28015                                  ; else
 28016                                  
 28017                                  ;*******************************************************************
 28018                                  ; Parser include file
 28019                                  ;*******************************************************************
 28020                                  
 28021                                  ;**** Equation field
 28022                                  ;-------- Character code definition
 28023                                  
 28024                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 28025                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 28026                                  _$P_Period	   equ	"."             ;AN020;
 28027                                  _$P_Slash	   equ	"/"             ;AN020;
 28028                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 28029                                  _$P_Comma	   equ	","             ;AN000;
 28030                                  _$P_Switch	   equ	"/"             ;AN000;
 28031                                  _$P_Keyword	   equ	"="             ;AN000;
 28032                                  _$P_Colon	   equ	":"             ;AN000;
 28033                                  _$P_Plus 	   equ	"+"             ;AN000;
 28034                                  _$P_Minus	   equ	"-"             ;AN000;
 28035                                  _$P_Rparen	   equ	")"             ;AN000;
 28036                                  _$P_Lparen	   equ	"("             ;AN000;
 28037                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 28038                                  _$P_DQuote	   equ	'"'             ;AN000;
 28039                                  _$P_NULL 	   equ	0		;AN000;
 28040                                  _$P_TAB		   equ	9		;AN000;
 28041                                  _$P_CR		   equ	0Dh		;AN000;
 28042                                  _$P_LF		   equ	0Ah		;AN000;
 28043                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 28044                                  
 28045                                  ;-------- Masks
 28046                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 28047                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 28048                                  
 28049                                  ;-------- DOS function call related equs
 28050                                  
 28051                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 28052                                  					; by this call, following information
 28053                                  struc _$P_CDI	
 28054 00000000 ????                     .DateF: resw 1
 28055 00000002 ??????????               .Money: resb 5
 28056 00000007 ????                     .1000:	 resb 2
 28057 00000009 ????                     .Dec:	 resb 2
 28058 0000000B ????                     .DateS: resb 2
 28059 0000000D ????                     .TimeS: resb 2
 28060 0000000F ??                          	 resb 1
 28061 00000010 ??                      	 resb 1
 28062 00000011 ??                       .TimeF: resb 1	 
 28063 00000012 ????????                	 resw 2
 28064 00000016 ????                    	 resb 2
 28065 00000018 <res Ah>                	 resw 5
 28066                                   .size:
 28067                                  endstruc
 28068                                  
 28069                                  _$P_Date_MDY	   equ	0		;AN000;
 28070                                  _$P_Date_DMY	   equ	1		;AN000;
 28071                                  _$P_Date_YMD	   equ	2		;AN000;
 28072                                  ;-------------
 28073                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 28074                                  					;AN000; DS:SI will points to DBCS EV
 28075                                  ;-------------
 28076                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 28077                                  					;AN000; following parameters are set
 28078                                  					;AN000; to get casemap table.
 28079                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 28080                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 28081                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 28082                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 28083                                  					; By this call following information
 28084                                  					; is returned.
 28085                                  struc _$P_DOS_TBL
 28086 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 28087 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 28088 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 28089                                  endstruc
 28090                                  
 28091                                  ; ----------------------------------------------------------------------------
 28092                                  ; PARMS 	LABEL	BYTE
 28093                                  ;		DW	PARMSX
 28094                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 28095                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28096                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 28097                                  ;					; TYPICAL ARE ";", "="
 28098                                  ;					; "," & WHITESPACE ALWAYS
 28099                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28100                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 28101                                  ; ----------------------------------------------------------------------------
 28102                                  
 28103                                  ;-------------------------------- PARMS block structure
 28104                                  struc _$P_PARMS_Blk
 28105 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 28106 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 28107 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 28108                                  endstruc
 28109                                  
 28110                                  _$P_Len_PARMS	   equ	4		;AN000;
 28111                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 28112                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 28113                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 28114                                  
 28115                                  ; ----------------------------------------------------------------------------
 28116                                  ; PARMSX	LABEL	BYTE
 28117                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 28118                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 28119                                  ;		:			; REPEATS maxp-1 TIMES
 28120                                  ;		DB	maxs		; # OF SWITCHES
 28121                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 28122                                  ;		:			; REPEATS maxs-1 TIMES
 28123                                  ;		DB	maxk		; # OF KEYWORD
 28124                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 28125                                  ;		:			; REPEATS maxk-1 TIMES
 28126                                  ; ----------------------------------------------------------------------------
 28127                                  
 28128                                  ;-------------------------------- PARMSX block structure
 28129                                  struc _$P_PARMSX_Blk		;AN000;
 28130 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 28131 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 28132 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 28133                                  endstruc
 28134                                  
 28135                                  ; ----------------------------------------------------------------------------
 28136                                  ; << Control field definition  >>
 28137                                  ;
 28138                                  ;
 28139                                  ;CONTROL   LABEL   BYTE
 28140                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 28141                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 28142                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 28143                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 28144                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 28145                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 28146                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 28147                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 28148                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 28149                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 28150                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 28151                                  ;				   ; 0002H=REPEATS ALLOWED
 28152                                  ;				   ; 0001H=OPTIONAL
 28153                                  ;	   DW	   FUNCTION_FLAGS
 28154                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 28155                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 28156                                  ;				   ; 0010H=REMOVE ":" AT END
 28157                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 28158                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 28159                                  ;	   DW	   VALUES	   ; VALUE LISTS
 28160                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 28161                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 28162                                  ;	   :
 28163                                  ;
 28164                                  ;Note:
 28165                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 28166                                  ;      DATE bit simalteniously.
 28167                                  ;
 28168                                  ;      The parser examins each bit along with the following priority.
 28169                                  ;
 28170                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 28171                                  ;      FILE SPEC -> SIMPLE STRING.
 28172                                  ;
 28173                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 28174                                  ;      in the result buffer is capitalized.
 28175                                  ;
 28176                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 28177                                  ;
 28178                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 28179                                  ;      switch, for example, '/A', then STRING points to;
 28180                                  ;
 28181                                  ;			DB    1 	; number of following synonyms
 28182                                  ;			DB   '/A',0
 28183                                  ;
 28184                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 28185                                  ;
 28186                                  ;			DB    1 	; number of following synonyms
 28187                                  ;			DB   'CODEPAGE=',0
 28188                                  ;
 28189                                  ;    - "..." must consist of upper case characters only because the parser
 28190                                  ;      performs pattern matching after converting input to upper case (by
 28191                                  ;      using the current country upper case table)
 28192                                  ;
 28193                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 28194                                  ;      example /A and /B, the format will be;
 28195                                  ;
 28196                                  ;			DB    2 	; number of following synonyms
 28197                                  ;			DB    '/A',0
 28198                                  ;			DB    '/B',0
 28199                                  ; ----------------------------------------------------------------------------
 28200                                  
 28201                                  ;**** Match_Flags
 28202                                  
 28203                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 28204                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 28205                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 28206                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 28207                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 28208                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 28209                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 28210                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 28211                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 28212                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 28213                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 28214                                  _$P_Optional	   equ	0001h		;AN000; Optional
 28215                                  
 28216                                  ;**** Function flags
 28217                                  
 28218                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 28219                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 28220                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 28221                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 28222                                  
 28223                                  ;-------------------------------- Control block structure
 28224                                  struc _$P_Control_Blk
 28225 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 28226 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 28227 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 28228 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 28229 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 28230 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 28231                                  endstruc
 28232                                  
 28233                                  ; ----------------------------------------------------------------------------
 28234                                  ; << Value List Definition >>
 28235                                  ;
 28236                                  ;VALUES 	LABEL	BYTE
 28237                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 28238                                  ;	     +-
 28239                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 28240                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 28241                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 28242                                  ;	     |	:
 28243                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 28244                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 28245                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 28246                                  ;	     |	:
 28247                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 28248                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 28249                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 28250                                  ;	     +-	:
 28251                                  ;
 28252                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 28253                                  ;
 28254                                  ;Note:
 28255                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 28256                                  ;      when no choice lists are provided.
 28257                                  ;
 28258                                  ;    - STRING must consist of upper case characters only because the parser
 28259                                  ;      performs pattern matching after converting input to upper case (by
 28260                                  ;      using the current country upper case table)
 28261                                  ; ----------------------------------------------------------------------------
 28262                                  
 28263                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 28264                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 28265                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 28266                                  _$P_nval_String	   equ	3		;AN000; string list ID
 28267                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 28268                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 28269                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 28270                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 28271                                  
 28272                                  struc _$P_Val_List
 28273 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 28274 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 28275 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 28276 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 28277 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 28278                                  endstruc
 28279                                  
 28280                                  ; ----------------------------------------------------------------------------
 28281                                  ; << Result Buffer Definition  >>
 28282                                  ;
 28283                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 28284                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 28285                                  ;						;	1=NUMBER, 2=LIST INDEX,
 28286                                  ;						;	3=STRING, 4=COMPLEX,
 28287                                  ;						;	5=FILESPEC, 6=DRIVE
 28288                                  ;						;	7=DATE, 8=TIME
 28289                                  ;						;	9=QUOTED STRING
 28290                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 28291                                  ;
 28292                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 28293                                  ;
 28294                                  ;            +-
 28295                                  ;	    | DD	n			; VALUE IF NUMBER
 28296                                  ;	    | or
 28297                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 28298                                  ;	    |					; (ES presents Segment address)
 28299                                  ;	    | or
 28300                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 28301                                  ;	    | or
 28302                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 28303                                  ;	    | or
 28304                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 28305                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 28306                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 28307                                  ;	    | or
 28308                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 28309                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 28310                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 28311                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 28312                                  ;	    +-
 28313                                  ;
 28314                                  ;
 28315                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 28316                                  ;      list.
 28317                                  ;
 28318                                  ;      YEAR: If the input value for the year is less than 100, parser
 28319                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 28320                                  ;	     the year value, he returns 1987.
 28321                                  ; ----------------------------------------------------------------------------
 28322                                  
 28323                                  ;-------------------------------- Result block structure
 28324                                  struc _$P_Result_Blk
 28325 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 28326 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 28327 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 28328 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 28329                                  endstruc
 28330                                  
 28331                                  ;--------------------------------
 28332                                  ;**** values for the type field in the result block
 28333                                  
 28334                                  _$P_EOL		   equ	0		;AN000; End of line
 28335                                  _$P_Number	   equ	1		;AN000; Number
 28336                                  _$P_List_Idx	   equ	2		;AN000; List Index
 28337                                  _$P_String	   equ	3		;AN000; String
 28338                                  _$P_Complex	   equ	4		;AN000; Complex
 28339                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 28340                                  _$P_Drive	   equ	6		;AN000; Drive
 28341                                  _$P_Date_F	   equ	7		;AN000; Date
 28342                                  _$P_Time_F	   equ	8		;AN000; Time
 28343                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 28344                                  
 28345                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 28346                                  
 28347                                  ;**** Return code
 28348                                  ;
 28349                                  ; following return code will be returned in the AX register.
 28350                                  
 28351                                  _$P_No_Error	   equ	0		;AN000; No error
 28352                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 28353                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 28354                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 28355                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 28356                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 28357                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 28358                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 28359                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 28360                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 28361                                  
 28362                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 28363                                  
 28364                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 28365                                  
 28366                                  ; 14/04/2024 - Retro DOS v5.0
 28367                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:1C62h
 28368                                  
 28369                                  ;********************** Local Data *************************************
 28370 000014E7 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 28371 000014E9 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 28372 000014EB 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 28373 000014ED 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 28374 000014EF 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 28375 000014F0 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 28376 000014F2 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 28377 000014F4 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 28378                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 28379                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 28380                                  
 28381                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 28382                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 28383                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 28384                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 28385                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 28386                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 28387                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 28388                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 28389                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 28390                                  
 28391                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 28392                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 28393                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 28394                                  
 28395 000014F6 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 28396 000014F8 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 28397 000014FA 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 28398 000014FC 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 28399                                  
 28400 000014FE 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 28401                                  _$P_STRING_BUF_END equ	$		;AN000;
 28402                                  
 28403                                  ; 25/10/2022
 28404                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 28405                                  
 28406 0000157E FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 28407 0000157F 0000                    		   dw	0		;AN000; offset	of char case map table
 28408 00001581 0000                    		   dw	0		;AN000; segment of char case map table
 28409                                  ; 25/10/2022
 28410                                  ;IF CAPSW
 28411                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 28412                                  ;		   dw	0		;AN000; offset	of file case map table
 28413                                  ;		   dw	0		;AN000; segment of file case map table
 28414                                  ;ENDIF
 28415                                  
 28416                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 28417                                  ;
 28418                                  
 28419                                  ;M029
 28420                                  ;!!!WARNING!!!
 28421                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 28422                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 28423                                  ;changes need to be made in SYSPARSE
 28424                                  
 28425                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 28426                                  
 28427                                  ; 25/10/2022
 28428                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 28429                                  
 28430 00001583 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 28431                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 28432                                  
 28433                                  ;ENDIF					;AN000;(of FileSW)
 28434                                  
 28435                                  ; delimiter parsing
 28436                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 28437                                  _$P_period_only	   equ	02h		;AN032; check only for period
 28438                                  
 28439                                  ;filespec error flag
 28440 0000158C 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 28441                                  					;AN033;  was detected.
 28442                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 28443                                  
 28444                                  
 28445                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 28446                                  ; ======================================================================
 28447                                  ; 27/03/2019 - Retro DOS v4.0
 28448                                  
 28449                                  ;***********************************************************************
 28450                                  ; SysParse;
 28451                                  ;
 28452                                  ;  Function : Parser Entry
 28453                                  ;
 28454                                  ;  Input: DS:SI -> command line
 28455                                  ;	  ES:DI -> parameter block
 28456                                  ;	  cs -> psdata.inc
 28457                                  ;	  CX = operand ordinal
 28458                                  ;
 28459                                  ;	  Note:  ES is the segment containing all the control blocks defined
 28460                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 28461                                  ;		 is in DS.
 28462                                  ;
 28463                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 28464                                  ;		    invalid value list. But this parser does NOT implement
 28465                                  ;		    this feature. Therefore CY always zero.
 28466                                  ;
 28467                                  ;	   CY = 0   AX = return code
 28468                                  ;		    BL = terminated delimiter code
 28469                                  ;		    CX = new operand ordinal
 28470                                  ;		    SI = set past scaned operand
 28471                                  ;		    DX = selected result buffer
 28472                                  ;
 28473                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 28474                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 28475                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 28476                                  ;
 28477                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 28478                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 28479                                  ;
 28480                                  ;-------- Modification History -----------------------------------------
 28481                                  ;
 28482                                  ;  4/04/87 : Created by K. K,
 28483                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 28484                                  ;	   : JMP SHORT assemble error (tm02)
 28485                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 28486                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 28487                                  ;	     DateSW equ 1)	      (tm04)
 28488                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 28489                                  ;				      (tm05) in PSDATA.INC
 28490                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 28491                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 28492                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 28493                                  ;	     value-list block	      (tm07)
 28494                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 28495                                  ;	     switch (keyword) or not. If there is, backup si for next call
 28496                                  ;	     (tm08)
 28497                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 28498                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 28499                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 28500                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 28501                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 28502                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 28503                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 28504                                  ;					  (tm12)
 28505                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 28506                                  ;					  (tm13)
 28507                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 28508                                  ;					  (tm14)
 28509                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 28510                                  ;					  (tm15)
 28511                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 28512                                  
 28513                                  ;  7/24/87 : Quoted strings being returned with quotes.
 28514                                  
 28515                                  ;  7/28/87 : Kerry S (;AN018;)
 28516                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 28517                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 28518                                  ;	     affected: _$P_Chk_SW_Control.
 28519                                  
 28520                                  ;  7/29/87 : Kerry S (;AN019;)
 28521                                  ;	     Now allow the optional bit in match flags for switches.  This
 28522                                  ;	     allows the switch to be encountered with a value or without a
 28523                                  ;	     value and no error is returned.
 28524                                  ;
 28525                                  
 28526                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 28527                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 28528                                  ;	     within a date response, instead of checking just for the one
 28529                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 28530                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 28531                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 28532                                  
 28533                                  ;  9/1/87  : Kerry S (;AN021)
 28534                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 28535                                  ;	     the command line with the string in the control block the
 28536                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 28537                                  ;	     on the command line and assuming a match.	This allowed a shorter
 28538                                  ;	     string on the command line than in the synonym list in the control
 28539                                  ;	     block.  I put in a test for a null in the control block so the
 28540                                  ;	     string in the control block must be the same length as the string
 28541                                  ;	     preceeding the colon or equal on the command line.
 28542                                  
 28543                                  ;  8/28/87 : Kerry S (;AN022;)
 28544                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 28545                                  ;	     problems for people who included it themselves in a segment other
 28546                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 28547                                  ;	     segment.
 28548                                  
 28549                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 28550                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 28551                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 28552                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 28553                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 28554                                  ;	     BL be used if TIME is being parsed.
 28555                                  
 28556                                  ;  9/24/87 : Ed K
 28557                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 28558                                  ;	     invocations with their normally expanded code; made comments
 28559                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 28560                                  
 28561                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 28562                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 28563                                  ;	     pointed to by non-existant CONTROL.
 28564                                  
 28565                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 28566                                  ;	     A quoted text string can be framed only by double quote.  Remove
 28567                                  ;	     support to frame quoted text string with single quote.
 28568                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 28569                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 28570                                  ;	     single quote in PROC prologues are left as is for history reasons.
 28571                                  
 28572                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 28573                                  ;	     quote chars within a quoted string is supposed to be reported as
 28574                                  ;	     one quote character, but is reported as two quotes.  This changed
 28575                                  ;	     two instructions in PROC _$P_Quoted_Str.
 28576                                  
 28577                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 28578                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 28579                                  
 28580                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 28581                                  
 28582                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 28583                                  ;	     psdata buffer should have cs.
 28584                                  
 28585                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 28586                                  ;	     positional missing.
 28587                                  
 28588                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 28589                                  ;	     as a line delimiter, should use carriage return.
 28590                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 28591                                  
 28592                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 28593                                  
 28594                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 28595                                  ;	     endless loop since SI is returned still pointing to start
 28596                                  ;	     of that parm.
 28597                                  
 28598                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 28599                                  ;	     Vector to returned string has CS instead of cs, but
 28600                                  ;	     when tried to fix it on previous version, changed similar
 28601                                  ;	     but wrong place.
 28602                                  
 28603                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 28604                                  ;	     delimiters between hours, minutes, seconds for time. And period
 28605                                  ;	     and comma are valid delimiters between seconds and 100th second.
 28606                                  
 28607                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 28608                                  ;	     in a filespec, then flag an error.
 28609                                  
 28610                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 28611                                  ;	     indexed off of the cs equate instead of the DS register.
 28612                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 28613                                  ;  -->	     local parser data. Why were some references to local data changed
 28614                                  ;	     to do this before, but not all ?????
 28615                                  
 28616                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 28617                                  
 28618                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 28619                                  ;
 28620                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 28621                                  
 28622                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 28623                                  
 28624                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 28625                                  ;	     separator in TIME before hundredths field.
 28626                                  ;
 28627                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 28628                                  ;			strings as keywords.
 28629                                  ;
 28630                                  ;***********************************************************************
 28631                                  
 28632                                  ;IF FarSW				;AN000;(Check if need far return)
 28633                                  ;SysParse proc far			;AN000;
 28634                                  ;ELSE					;AN000;
 28635                                  ;SysParse proc near			;AN000;
 28636                                  ;ENDIF					;AN000;(of FarSW)
 28637                                  
 28638                                  ; 27/03/2019 - Retro DOS v4.0
 28639                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 28640                                  
 28641                                  ; 25/10/2022 - Retro DOS v4.0
 28642                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 28643                                  
 28644                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 28645                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 28646                                  
 28647                                  SysParse:
 28648                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 28649                                  	; dx = 0
 28650 0000158D 1E                      	push	ds ; *!*
 28651 0000158E 0E                      	push	cs
 28652 0000158F 1F                      	pop	ds 
 28653                                  
 28654                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 28655                                  	;cld				;AN000; confirm forward direction
 28656                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 28657                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 28658                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 28659                                  	;
 28660                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 28661                                  
 28662                                  	; 06/09/2023
 28663 00001590 8916[F414]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 28664 00001594 FC                      	cld				;AN000; confirm forward direction
 28665 00001595 890E[E714]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 28666 00001599 8916[E914]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 28667 0000159D 8916[FC14]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 28668 000015A1 8916[ED14]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 28669                                  
 28670                                  ;M029 -- Begin changes
 28671                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 28672                                  ;entry to SysParse. This is in the non-checksum region and any program that
 28673                                  ;corrupts this table but does not corrupt the checksum region will leave
 28674                                  ;command.com parsing in an inconsistent state.
 28675                                  ; NB: The special characters string has been hardcoded here. If any change
 28676                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 28677                                  
 28678                                  ;IF FileSW + DrvSW
 28679                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 28680                                  	
 28681                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 28682                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 28683                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 28684                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 28685                                  
 28686                                  	; 14/04/2024
 28687                                  	; 06/09/2023
 28688 000015A5 C706[8315]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 28689 000015AB C706[8515]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 28690 000015B1 C706[8715]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 28691 000015B7 C706[8915]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 28692                                  ;ENDIF
 28693                                  	; 06/09/2023
 28694 000015BD 1F                      	pop	ds ; *!*
 28695                                  
 28696                                  ;M029 -- End of changes
 28697                                  
 28698 000015BE E87806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 28699 000015C1 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 28700                                  ;--------------------------- End of Line
 28701 000015C3 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 28702 000015C6 53                      	push	bx			;AN000;
 28703                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 28704                                  					;AN000; Get the PARMSX address to
 28705 000015C7 268B1D                  	mov	bx,[es:di]
 28706                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 28707                                  					;AN000; check ORDINAL to see if the minimum
 28708 000015CA 263A0F                  	cmp	cl,[es:bx]	
 28709 000015CD 7303                    	jae	short _$P_Fin		;AN000; positional found.
 28710                                  
 28711 000015CF B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 28712                                  _$P_Fin: 				;AN000;
 28713 000015D2 5B                      	pop	bx			;AN000;
 28714 000015D3 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 28715                                  ;---------------------------
 28716                                  _$P_Start:				;AN000;
 28717 000015D6 2E8936[F614]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 28718 000015DB 53                      	push	bx			;AN000; quoted string or file spec.
 28719 000015DC 57                      	push	di			;AN000;
 28720 000015DD 55                      	push	bp			;AN000;
 28721                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 28722                                  	; 02/11/2022
 28723                                  	;lea	bx,[_$P_STRING_BUF]
 28724                                  	; 07/09/2023
 28725 000015DE BB[FE14]                	mov	bx,_$P_STRING_BUF
 28726 000015E1 2EF606[F514]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 28727 000015E7 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 28728                                  
 28729                                  _$P_Pack_Loop:				;AN000;
 28730 000015E9 AC                      	lodsb				;AN000; Pick a operand from buffer
 28731 000015EA E8F106                  	call	_$P_Chk_Switch		;AN000; Check switch character
 28732 000015ED 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 28733                                  
 28734 000015EF E86906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 28735 000015F2 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 28736                                  
 28737 000015F4 E89906                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 28738 000015F7 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 28739                                  
 28740 000015F9 2EF606[F514]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 28741                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 28742 000015FF 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 28743                                  
 28744 00001601 E83506                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 28745 00001604 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 28746                                  
 28747                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 28748 00001606 2EF606[F514]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 28749 0000160C 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 28750                                  
 28751 0000160E 4E                      	dec	si			;AN000; (tm08)
 28752 0000160F EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 28753                                  
 28754                                  _$P_PL01:				;AN000;
 28755 00001611 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 28756 00001614 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 28757 00001616 7506                    	jne	short _$P_PL00 		;AN000; then
 28758                                  
 28759 00001618 2E800E[F514]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 28760                                  _$P_PL00:				;AN000;
 28761 0000161E 43                      	inc	bx			;AN000; ready to see next byte
 28762 0000161F E8D506                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 28763 00001622 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 28764                                  
 28765 00001624 AC                      	lodsb				;AN000; if yes, store
 28766 00001625 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 28767 00001628 43                      	inc	bx			;AN000; update pointer
 28768 00001629 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 28769                                  
 28770                                  _$P_Pack_End_BY_EOL:			;AN000;
 28771 0000162B 4E                      	dec	si			;AN000; backup si pointer
 28772                                  _$P_Pack_End:				;AN000;
 28773 0000162C 2E8936[EB14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 28774                                  	; 07/09/2023
 28775                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 28776 00001631 30E4                    	xor	ah,ah ; 0 ; *
 28777 00001633 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 28778                                  	;
 28779 00001636 2E891E[FA14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 28780                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 28781 0000163B 268B1D                  	mov	bx,[es:di]
 28782                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 28783                                  	; 02/11/2022
 28784                                  	;lea	si,[_$P_STRING_BUF]
 28785                                  	; 07/09/2023
 28786 0000163E BE[FE14]                	mov	si,_$P_STRING_BUF
 28787 00001641 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 28788 00001645 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 28789                                  
 28790 00001647 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 28791 0000164B 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 28792                                  
 28793 0000164D 2EF606[F514]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 28794 00001653 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 28795                                  
 28796                                  _$P_Positional_Manager:			;AN000; else process as positional
 28797 00001655 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28798                                  	; 07/09/2023
 28799                                  	;xor	ah,ah			;AN000; ax = maxp
 28800 00001659 2E3906[E714]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 28801 0000165E 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 28802                                  
 28803 00001660 2EA1[E714]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 28804 00001664 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 28805 00001666 43                      	inc	bx			;AC035; add '2' to
 28806 00001667 43                      	inc	bx			;AC035;  BX reg
 28807                                  					;AN000; now bx points to 1st CONTROL
 28808 00001668 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 28809 0000166A 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 28810 0000166D E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 28811 00001670 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28812                                  
 28813                                  _$P_Too_Many_Error:			;AN000;
 28814 00001672 2EC706[E914]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 28815 00001679 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28816                                  
 28817                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 28818                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 28819                                  get_maxp:
 28820                                  	;mov	al,[es:bx+1]
 28821 0000167B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28822                                  	; 07/09/2023
 28823                                  	; ah=0 ; *
 28824                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 28825 0000167F 30ED                    	xor	ch,ch ; **
 28826 00001681 40                      	inc	ax			;AN000;
 28827 00001682 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 28828 00001684 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 28829 00001686 C3                      	retn
 28830                                  
 28831                                  _$P_SW_Manager:				;AN000;
 28832                                  	; 07/09/2023
 28833                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28834                                  	;xor	ah,ah			;AN000; ax = maxp
 28835                                  	;inc	ax			;AN000;
 28836                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28837                                  	;add	bx,ax			;AN000; now bx points to maxs
 28838 00001687 E8F1FF                  	call	get_maxp ; 07/09/2023
 28839                                  
 28840 0000168A 268A0F                  	mov	cl,[es:bx]		;AN000;
 28841                                  	; 07/09/2023
 28842                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 28843                                  	;or	cx,cx			;AN000; at least one switch ?
 28844                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 28845                                  	; 07/07/2023
 28846 0000168D E30F                    	jcxz	_$P_SW_Not_Found	; no
 28847                                  
 28848 0000168F 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 28849                                  
 28850                                  _$P_SW_Mgr_Loop: 			;AN000;
 28851 00001690 53                      	push	bx			;AN000;
 28852 00001691 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 28853 00001694 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 28854 00001697 5B                      	pop	bx			;AN000;
 28855 00001698 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 28856                                  
 28857 0000169A 43                      	inc	bx			;AC035; add '2' to
 28858 0000169B 43                      	inc	bx			;AC035;  BX reg
 28859                                  					;AN000; else bx points to the next CONTROL
 28860 0000169C E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 28861                                  
 28862                                  _$P_SW_Not_Found:			;AN000;
 28863 0000169E 2EC706[E914]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 28864 000016A5 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 28865                                  
 28866                                  _$P_Key_Manager: 			;AN000;
 28867                                  	; 07/09/2023
 28868                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28869                                  	;xor	ah,ah			;AN000; ax = maxp
 28870                                  	;inc	ax			;AN000;
 28871                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28872                                  	;add	bx,ax			;AN000; now bx points to maxs
 28873 000016A7 E8D1FF                  	call	get_maxp ; 07/09/2023
 28874                                  	
 28875 000016AA 268A07                  	mov	al,[es:bx]		;AN000;
 28876 000016AD 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 28877 000016AF D1E0                    	shl	ax,1			;AN000;
 28878 000016B1 40                      	inc	ax			;AN000; ax = ax*2+1
 28879 000016B2 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 28880 000016B4 268A0F                  	mov	cl,[es:bx]		;AN000;
 28881                                  	; 07/09/2023
 28882                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 28883                                  	;or	cx,cx			;AN000; at least one keyword ?
 28884                                  	;jz	short _$P_Key_Not_Found	;AN000;
 28885                                  	; 07/07/2023
 28886 000016B7 E305                    	jcxz	_$P_Key_Not_Found	; no
 28887                                  
 28888 000016B9 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 28889                                  
 28890                                  _$P_Key_Mgr_Loop:			;AN000;
 28891                                  	; 07/09/2023
 28892                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 28893                                  	; (always returns with cf=1)
 28894                                  	;push	bx			;AN000;
 28895                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 28896                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 28897                                  	;pop	bx			;AN000;
 28898                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 28899                                  	; 07/09/2023
 28900                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 28901                                  
 28902 000016BA 43                      	inc	bx			;AC035; add '2' to
 28903 000016BB 43                      	inc	bx			;AC035;  BX reg
 28904                                  					;AN000; else bx points to the next CONTROL
 28905 000016BC E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 28906                                  
 28907                                  _$P_Key_Not_Found:			;AN000;
 28908 000016BE 2EC706[E914]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 28909                                  _$P_Return_to_Caller:			;AN000;
 28910 000016C5 5D                      	pop	bp			;AN000;
 28911 000016C6 5F                      	pop	di			;AN000;
 28912 000016C7 5B                      	pop	bx			;AN000;
 28913 000016C8 2E8B0E[E714]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 28914 000016CD 2EA1[E914]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 28915 000016D1 2E8B36[EB14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 28916 000016D6 2E8B16[ED14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 28917 000016DB 2E8A1E[EF14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 28918                                  _$P_Single_Exit: 			;AN000;
 28919 000016E0 F8                      	clc				;AN000;
 28920 000016E1 C3                      	retn				;AN000;
 28921                                  
 28922                                  ;***********************************************************************
 28923                                  ; _$P_Chk_Pos_Control
 28924                                  ;
 28925                                  ; Function: Parse CONTROL block for a positional
 28926                                  ;
 28927                                  ; Input:     ES:BX -> CONTROL block
 28928                                  ;	     cs:SI -> _$P_STRING_BUF
 28929                                  ;
 28930                                  ; Output:    None
 28931                                  ;
 28932                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 28933                                  ;
 28934                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 28935                                  ;***********************************************************************
 28936                                  
 28937                                  _$P_Chk_Pos_Control:
 28938 000016E2 50                      	push	ax			;AN000;
 28939                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 28940 000016E3 268B07                  	mov	ax,[es:bx]
 28941                                  	; 12/12/2022
 28942 000016E6 A802                    	test	al,_$P_Repeat
 28943                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 28944 000016E8 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 28945                                  
 28946 000016EA 2EFF06[E714]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 28947                                  _$P_CPC00:				;AN000;
 28948 000016EF 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 28949 000016F3 7517                    	jne	short _$P_CPC01		;AN000;
 28950                                  
 28951                                  	; 12/12/2022
 28952 000016F5 A801                    	test	al,_$P_Optional
 28953                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 28954 000016F7 7509                    	jnz	short _$P_CPC02		;AN000;
 28955                                  
 28956 000016F9 2EC706[E914]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 28957 00001700 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 28958                                  
 28959                                  _$P_CPC02:				;AN000;
 28960 00001702 50                      	push	ax			;AN000;
 28961                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 28962                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 28963                                  	; 07/07/2023
 28964 00001703 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 28965 00001706 E89600                  	call	_$P_Fill_Result		;AN000;
 28966 00001709 58                      	pop	ax			;AN000;
 28967 0000170A EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 28968                                  
 28969                                  _$P_CPC01:				;AN000;
 28970 0000170C E81101                  	call	_$P_Check_Match_Flags	;AN000;
 28971                                  _$P_CPC_Exit:				;AN000;
 28972 0000170F 58                      	pop	ax			;AN000;
 28973 00001710 C3                      	retn				;AN000;
 28974                                  
 28975                                  ;***********************************************************************
 28976                                  ; _$P_Chk_Key_Control
 28977                                  ;
 28978                                  ; Function: Parse CONTROL block for a keyword
 28979                                  ;
 28980                                  ; Input:     ES:BX -> CONTROL block
 28981                                  ;	     cs:SI -> _$P_STRING_BUF
 28982                                  ;
 28983                                  ; Output:    CY = 1 : not match
 28984                                  ;
 28985                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 28986                                  ;
 28987                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 28988                                  ;***********************************************************************
 28989                                  
 28990                                  ; 07/09/2023
 28991                                  ;_$P_Chk_Key_Control:
 28992                                  ;	stc				;AN000; this logic works when the KeySW
 28993                                  ;	retn				;AN000; is reset.
 28994                                  
 28995                                  ;***********************************************************************
 28996                                  ; _$P_Search_KEYorSW:
 28997                                  ;
 28998                                  ; Function: Seach specified keyword or switch from CONTROL
 28999                                  ;
 29000                                  ; Input:     ES:BX -> CONTROL block
 29001                                  ;	     cs:SI -> _$P_STRING_BUF
 29002                                  ;
 29003                                  ; Output:    CY = 1 : not match
 29004                                  ;
 29005                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 29006                                  ;***********************************************************************
 29007                                  
 29008                                  	; 25/10/2022 - Retro DOS v4.0
 29009                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 29010                                  
 29011                                  _$P_Search_KEYorSW:			;AN000;
 29012 00001711 55                      	push	bp			;AN000;
 29013 00001712 51                      	push	cx			;AN000;
 29014 00001713 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 29015 00001717 30ED                    	xor	ch,ch			;AN000; and set it to cx
 29016                                  	;or	cx,cx			;AN000; No synonyms specified ?
 29017                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 29018                                  	; 07/07/2023
 29019 00001719 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 29020                                  
 29021                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 29022                                  	; 25/10/2022
 29023 0000171B 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 29024                                  	;lea	bp,[bx+9]
 29025                                  _$P_KEYorSW_Loop:			;AN000;
 29026 0000171E E8B503                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 29027 00001721 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 29028                                  
 29029 00001723 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 29030 00001726 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 29031                                  _$P_KEYorSW_Not_Found:			;AN000;
 29032 00001728 F9                      	stc				;AN000; indicate not found in synonym list
 29033 00001729 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 29034                                  
 29035                                  _$P_KEYorSW_Found:			;AN000;
 29036 0000172B 2E892E[FC14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 29037 00001730 F8                      	clc				;AN000; indicate found
 29038                                  _$P_KEYorSW_Exit:			;AN000;
 29039 00001731 59                      	pop	cx			;AN000;
 29040 00001732 5D                      	pop	bp			;AN000;
 29041 00001733 C3                      	retn				;AN000;
 29042                                   
 29043                                  ;***********************************************************************
 29044                                  ; _$P_MoveBP_NUL
 29045                                  ;***********************************************************************
 29046                                  
 29047                                  _$P_MoveBP_NUL:
 29048                                  _$P_MBP_Loop:				;AN000;
 29049                                  	; 11/12/2022
 29050 00001734 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 29051                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29052                                  	; (SYSINIT:18DBh)
 29053                                   	;cmp     byte [es:bp+0],0
 29054 00001739 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 29055                                  
 29056 0000173B 45                      	inc	bp			;AN000; until
 29057 0000173C EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 29058                                  
 29059                                  _$P_MBP_Exit:				;AN000;
 29060 0000173E 45                      	inc	bp			;AN000; bp points to next to NULL
 29061 0000173F C3                      	retn				;AN000;
 29062                                  
 29063                                  ;***********************************************************************
 29064                                  ; _$P_Chk_SW_Control
 29065                                  ;
 29066                                  ; Function: Parse CONTROL block for a switch
 29067                                  ;
 29068                                  ; Input:     ES:BX -> CONTROL block
 29069                                  ;	     cs:SI -> _$P_STRING_BUF
 29070                                  ;
 29071                                  ; Output:    CY = 1 : not match
 29072                                  ;
 29073                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29074                                  ;
 29075                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29076                                  ;***********************************************************************
 29077                                  
 29078                                  _$P_Chk_SW_Control:
 29079                                  
 29080                                  ;IF SwSW				;AN000;(Check if switch is supported)
 29081                                  	;or	byte [cs:_$P_Flags+1],10h
 29082 00001740 2E800E[F514]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 29083 00001746 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 29084 00001749 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 29085                                  
 29086                                  	;and	[cs:_$P_Flags+],0EFh
 29087 0000174B 2E8026[F514]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 29088                                  					;AC034; reset the indicator previously set
 29089 00001751 50                      	push	ax			;AN000; 	      /switch:
 29090 00001752 2EA1[F814]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 29091 00001756 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 29092 00001758 2E0106[F614]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 29093 0000175D 58                      	pop	ax			;AN000;
 29094                                  
 29095 0000175E 2E8B36[F814]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 29096 00001763 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 29097 00001767 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 29098                                  
 29099 00001769 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 29100 0000176E 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 29101                                  
 29102 00001770 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 29103 00001777 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 29104                                  
 29105                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 29106                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 29107 00001779 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 29108 0000177D 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 29109                                  
 29110                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 29111                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 29112                                  	;test	word [es:bx],1
 29113                                  	; 12/12/2022
 29114                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 29115 0000177F 26F60701                	test	byte [es:bx],_$P_Optional
 29116 00001783 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 29117                                  
 29118 00001785 2EC706[E914]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 29119 0000178C EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 29120                                  
 29121                                  _$P_CSW00:				;AN000;
 29122 0000178E E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 29123 00001791 F8                      	clc				;AN000; indicate match
 29124                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29125                                  	; 12/12/2022
 29126 00001792 C3                      	retn
 29127                                  
 29128                                  _$P_Chk_SW_Err0: 			;AN000;
 29129 00001793 F9                      	stc				;AN000; not found in switch synonym list
 29130                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29131                                  	; 12/12/2022
 29132 00001794 C3                      	retn	
 29133                                  
 29134                                  _$P_Chk_SW_Exit: 			;AN000;
 29135 00001795 50                      	push	ax			;AN000;
 29136                                  	;mov	al,_$P_String		;AN000;
 29137                                  	;mov	ah,_$P_No_Tag		;AN000;
 29138                                  	; 07/07/2023
 29139 00001796 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29140 00001799 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 29141 0000179C 58                      	pop	ax			;AN000;
 29142 0000179D F8                      	clc				;AN000;
 29143                                  _$P_Chk_SW_Single_Exit:			;AN000;
 29144 0000179E C3                      	retn				;AN000;
 29145                                  ;ELSE					;AN000;(of IF SwSW)
 29146                                  ;	stc				;AN000; this logic works when the SwSW
 29147                                  ;	retn				;AN000; is reset.
 29148                                  
 29149                                  ;***********************************************************************
 29150                                  ; _$P_Fill_Result
 29151                                  ;
 29152                                  ; Function: Fill the result buffer
 29153                                  ;
 29154                                  ; Input:    AH = Item tag
 29155                                  ;	    AL = type
 29156                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 29157                                  ;		  AL = 2: DX has index(offset) into value list
 29158                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 29159                                  ;		  AL = 7: DX has year, CL has month and CH has date
 29160                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 29161                                  ;			  amd CH has hundredths
 29162                                  ;		  AL = else: cs:SI points to returned string buffer
 29163                                  ;	    ES:BX -> CONTROL block
 29164                                  ;
 29165                                  ; Output:   None
 29166                                  ;
 29167                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 29168                                  ;
 29169                                  ; Vars: _$P_DX(W)
 29170                                  ;***********************************************************************
 29171                                  
 29172                                  _$P_Fill_Result:
 29173 0000179F 57                      	push	di			;AN000;
 29174 000017A0 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 29175                                  					;AN000; di points to result buffer
 29176 000017A4 2E893E[ED14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 29177                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 29178                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 29179                                  	; 07/09/2023
 29180                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 29181 000017A9 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 29182                                  
 29183 000017AC 50                      	push	ax			;AN000;
 29184 000017AD 2EA1[FC14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 29185 000017B1 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 29186                                  					;AN000;   then set it to the result
 29187 000017B5 58                      	pop	ax			;AN000;
 29188                                  _$P_RLT04:				;AN000;
 29189 000017B6 3C01                    	cmp	al,_$P_Number		;AN000; if number
 29190 000017B8 750A                    	jne	short _$P_RLT00		;AN000;
 29191                                  
 29192                                  _$P_RLT02:				;AN000;
 29193 000017BA 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 29194 000017BE 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 29195 000017C2 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 29196                                  
 29197                                  _$P_RLT00:				;AN000;
 29198 000017C4 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 29199 000017C6 7506                    	jne	short _$P_RLT01		;AN000;
 29200                                  
 29201 000017C8 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 29202                                  					;AN000; then store list index
 29203 000017CC EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 29204                                  
 29205                                  _$P_RLT01:				;AN000;
 29206 000017CE 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 29207 000017D0 74E8                    	je	short _$P_RLT02		;AN000;
 29208                                  
 29209 000017D2 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 29210 000017D4 74E4                    	je	short _$P_RLT02		;AN000;
 29211                                  
 29212 000017D6 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 29213 000017D8 7506                    	jne	short _$P_RLT03		;AN000;
 29214                                  
 29215 000017DA 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 29216 000017DE EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 29217                                  
 29218                                  _$P_RLT03:				;AN000;
 29219 000017E0 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 29220 000017E2 750F                    	jne	short _$P_RLT05		;AN000;
 29221                                  
 29222 000017E4 2EA1[F614]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 29223 000017E8 40                      	inc	ax			;AN000; skip left Parentheses
 29224 000017E9 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 29225 000017ED 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 29226 000017F1 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 29227                                  
 29228                                  _$P_RLT05:				;AN000;
 29229                                  ;------------------------  AL = 3, 5, or 9
 29230 000017F3 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 29231                                  					;AN000; store offset of STRING_BUF
 29232 000017F7 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 29233                                  					;AN031; store segment of STRING_BUF
 29234 000017FB 50                      	push	ax			;AN000;
 29235 000017FC 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 29236                                  					;AN000; need CAPS by file table?
 29237 00001801 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 29238                                  
 29239 00001803 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 29240 00001805 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 29241                                  
 29242                                  _$P_RLT_CAP00:				;AN000;
 29243 00001807 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 29244                                  					;AN000; need CAPS by char table ?
 29245 0000180C 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 29246                                  
 29247 0000180E B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 29248                                  _$P_RLT_CAP02:				;AN000;
 29249 00001810 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 29250                                  _$P_RLT_CAP01:				;AN000;
 29251 00001813 58                      	pop	ax			;AN000;
 29252 00001814 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 29253                                  					;AN000; removing colon at end ?
 29254 00001819 7403                    	jz	short _$P_RLT_Exit	;AN000;
 29255                                  
 29256 0000181B E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 29257                                  _$P_RLT_Exit:				;AN000;
 29258 0000181E 5F                      	pop	di			;AN000;
 29259 0000181F C3                      	retn				;AN000;
 29260                                  
 29261                                  ;***********************************************************************
 29262                                  ; _$P_Check_Match_Flags
 29263                                  ;
 29264                                  ; Function:  Check the mutch_flags and make the exit code and set the
 29265                                  ;	     result buffer
 29266                                  ;
 29267                                  ;	    Check for types in this order:
 29268                                  ;		Complex
 29269                                  ;		Date
 29270                                  ;		Time
 29271                                  ;		Drive
 29272                                  ;		Filespec
 29273                                  ;		Quoted String
 29274                                  ;		Simple String
 29275                                  ;
 29276                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29277                                  ;	     ES:BX -> CONTROL block
 29278                                  ;
 29279                                  ; Output:    None
 29280                                  ;
 29281                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 29282                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 29283                                  ;	     _$P_Drive_Format
 29284                                  ;***********************************************************************
 29285                                  
 29286                                  	; 25/10/2022 - Retro DOS v4.0
 29287                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 29288                                  
 29289                                  	; 14/04/2024 - Retro DOS v5.0
 29290                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1FC3h)
 29291                                  
 29292                                  	; 12/12/2022
 29293                                  _$P_Check_Match_Flags:
 29294 00001820 2EC606[8C15]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 29295                                  					;AN033;AC034;; clear filespec error flag.
 29296 00001826 50                      	push	ax			;AN000;
 29297                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 29298 00001827 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 29299 0000182A 09C0                    	or	ax,ax			;AC035; test ax for zero
 29300 0000182C 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 29301 0000182E 50                      	push	ax			;AN000; (tm12)
 29302 0000182F 53                      	push	bx			;AN000; (tm12)
 29303 00001830 52                      	push	dx			;AN000; (tm12)
 29304 00001831 57                      	push	di			;AN000; (tm12)
 29305 00001832 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 29306                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 29307                                  	;mov	al,_$P_String		;AN000; (tm12)
 29308                                  	; 07/07/2023
 29309 00001839 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29310 0000183C E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 29311 0000183F 5F                      	pop	di			;AN000; (tm12)
 29312 00001840 5A                      	pop	dx			;AN000; (tm12)
 29313 00001841 5B                      	pop	bx			;AN000; (tm12)
 29314 00001842 58                      	pop	ax			;AN000; (tm12)
 29315                                  	; 12/12/2022
 29316                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 29317                                  	; 12/12/2022
 29318                                  ;_$P_Mat: 				;AN000; (tm12)
 29319                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 29320                                  _$P_Bridge:
 29321 00001843 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 29322                                  	
 29323                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29324                                  	; (SYSINIT:19F9h)
 29325                                  	; 12/12/2022
 29326                                  	;nop	; db 90h
 29327                                  
 29328                                  ; 12/12/2022
 29329                                  _$P_Mat:
 29330                                  _$P_Match03:				;AN000;
 29331                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 29332                                  	; 07/07/2023
 29333 00001845 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 29334 00001848 7412                    	jz	short _$P_Match04	;AN000;
 29335                                  
 29336 0000184A 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29337 00001851 E81E01                  	call	_$P_Value		;AN000; do process
 29338 00001854 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29339 0000185A 7557                    	jne	short _$P_Match_Exit	;AN000;
 29340                                  _$P_Match04:				;AN000;
 29341                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 29342                                  	; 07/07/2023
 29343 0000185C F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 29344 0000185F 7412                    	jz	short _$P_Match05	;AN000;
 29345                                  
 29346 00001861 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29347 00001868 E8E300                  	call	_$P_SValue		;AN000; do process
 29348 0000186B 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29349 00001871 7540                    	jne	short _$P_Match_Exit	;AN000;
 29350                                  _$P_Match05:				;AN000;
 29351                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 29352                                  	; 07/07/2023
 29353 00001873 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 29354 00001876 7415                    	jz	short _$P_Match06	;AN000;
 29355                                  
 29356 00001878 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29357 0000187F E8F202                  	call	_$P_File_Format		;AN000; 1st, call file format
 29358 00001882 E87203                  	call	_$P_Drive_Format	;AN000; check drive format, next
 29359 00001885 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29360 0000188B 7526                    	jne	short _$P_Match_Exit	;AN000;
 29361                                  _$P_Match06:				;AN000;
 29362                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 29363                                  	; 07/07/2023
 29364 0000188D F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 29365 00001890 7412                    	jz	short _$P_Match07	;AN000;
 29366                                  
 29367 00001892 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29368 00001899 E8D802                  	call	_$P_File_Format		;AN000; do process
 29369 0000189C 2E833E[E914]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29370 000018A2 750F                    	jne	short _$P_Match_Exit	;AN000;
 29371                                  _$P_Match07:				;AN000;
 29372                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 29373                                  	; 07/07/2023
 29374 000018A4 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 29375 000018A7 740A                    	jz	short _$P_Match09	;AN000;
 29376                                  
 29377 000018A9 2EC706[E914]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29378 000018B0 E8BA01                  	call	_$P_Simple_String	;AN000; do process
 29379                                  _$P_Match09:				;AN000;
 29380                                  _$P_Match_Exit:				;AN000;
 29381 000018B3 2E833E[8C15]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 29382 000018B9 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29383 000018BB 2E833E[E914]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 29384 000018C1 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29385 000018C3 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 29386                                  _$P_Match2_Exit: 			;AN033;
 29387 000018CA 58                      	pop	ax			;AN000;
 29388 000018CB C3                      	retn				;AN000;
 29389                                  
 29390                                  ;***********************************************************************
 29391                                  ; _$P_Remove_Colon;
 29392                                  ;
 29393                                  ; Function: Remove colon at end
 29394                                  ;
 29395                                  ; Input:    cs:SI points to string buffer to be examineed
 29396                                  ;
 29397                                  ; Output:   None
 29398                                  ;
 29399                                  ; Use:	_$P_Chk_DBCS
 29400                                  ;***********************************************************************
 29401                                  
 29402                                  _$P_Remove_Colon:
 29403 000018CC 50                      	push	ax			;AN000;
 29404 000018CD 56                      	push	si			;AN000;
 29405                                  _$P_RCOL_Loop:				;AN000;
 29406 000018CE 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29407 000018D1 08C0                    	or	al,al			;AN000; end of string ?
 29408 000018D3 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 29409                                  
 29410 000018D5 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 29411 000018D7 750D                    	jne	short _$P_RCOL00	;AN000;
 29412                                  
 29413 000018D9 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 29414 000018DE 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 29415                                  
 29416 000018E0 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 29417 000018E4 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 29418                                  
 29419                                  _$P_RCOL00:				;AN000;
 29420 000018E6 E80E04                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 29421 000018E9 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 29422                                  
 29423 000018EB 46                      	inc	si			;AN000; if yes, skip trailing byte
 29424                                  _$P_RCOL01:				;AN000;
 29425 000018EC 46                      	inc	si			;AN000; si points to next byte
 29426 000018ED EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 29427                                  
 29428                                  _$P_RCOL_Exit:				;AN000;
 29429 000018EF 5E                      	pop	si			;AN000;
 29430 000018F0 58                      	pop	ax			;AN000;
 29431 000018F1 C3                      	retn				;AN000;
 29432                                  
 29433                                  ;***********************************************************************
 29434                                  ; _$P_Do_CAPS_String;
 29435                                  ;
 29436                                  ; Function: Perform capitalization along with the file case map table
 29437                                  ;	    or character case map table.
 29438                                  ;
 29439                                  ; Input:    AL = 2 : Use character table
 29440                                  ;	    AL = 4 : Use file table
 29441                                  ;	    cs:SI points to string buffer to be capitalized
 29442                                  ;
 29443                                  ; Output:   None
 29444                                  ;
 29445                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 29446                                  ;***********************************************************************
 29447                                  
 29448                                  _$P_Do_CAPS_String:
 29449 000018F2 56                      	push	si			;AN000;
 29450 000018F3 52                      	push	dx			;AN000;
 29451 000018F4 88C2                    	mov	dl,al			;AN000; save info id
 29452                                  
 29453                                  _$P_DCS_Loop:				;AN000;
 29454 000018F6 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 29455 000018F9 E8FB03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 29456 000018FC 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 29457                                  
 29458 000018FE 08C0                    	or	al,al			;AN000; end of string ?
 29459 00001900 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 29460                                  
 29461 00001902 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 29462 00001905 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 29463 00001908 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 29464                                  _$P_DCS00:				;AN000;
 29465 0000190A 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 29466                                  _$P_DCS01:				;AN000;
 29467 0000190B 46                      	inc	si			;AN000; si point to next byte
 29468 0000190C EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 29469                                  _$P_DCS_Exit:				;AN000;
 29470 0000190E 5A                      	pop	dx			;AN000;
 29471 0000190F 5E                      	pop	si			;AN000;
 29472 00001910 C3                      	retn
 29473                                  
 29474                                  ;***********************************************************************
 29475                                  ; _$P_Do_CAPS_Char;
 29476                                  ;
 29477                                  ; Function: Perform capitalization along with the file case map table
 29478                                  ;	    or character case map table.
 29479                                  ;
 29480                                  ; Input:    DL = 2 : Use character table
 29481                                  ;	    DL = 4 : Use file table
 29482                                  ;	    AL = character to be capitalized
 29483                                  ;
 29484                                  ; Output:   None
 29485                                  ;
 29486                                  ; Use:	INT 21h /w AH=65h
 29487                                  ;***********************************************************************
 29488                                  
 29489                                  _$P_Do_CAPS_Char:
 29490 00001911 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 29491 00001913 730B                    	jae	short _$P_DCC_Go	;AN000;
 29492                                  
 29493 00001915 3C61                    	cmp	al,"a"                  ;AN000; if no,
 29494 00001917 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 29495                                  
 29496 00001919 3C7A                    	cmp	al,"z"                  ;AN000;
 29497 0000191B 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 29498                                  
 29499 0000191D 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 29500                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 29501                                  	; 07/07/2023
 29502 0000191F C3                      	retn
 29503                                  
 29504                                  _$P_DCC_Go:				;AN000;
 29505 00001920 53                      	push	bx			;AN000;
 29506 00001921 06                      	push	es			;AN000;
 29507 00001922 57                      	push	di			;AN000;
 29508                                  
 29509                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 29510                                  	;lea	di,[_$P_Char_CAP_Ptr]
 29511                                  	; 07/09/2023
 29512 00001923 BF[7E15]                	mov	di,_$P_Char_CAP_Ptr
 29513                                  _$P_DCC00:				;AN000;
 29514 00001926 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 29515 00001929 7415                    	je	short _$P_DCC01		;AN000; if no,
 29516                                  
 29517                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 29518                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 29519                                  ; call, regardless of what base register is currently be defined as cs.
 29520                                  
 29521 0000192B 50                      	push	ax			;AN000; get CAPS table thru DOS call
 29522 0000192C 51                      	push	cx			;AN000;
 29523 0000192D 52                      	push	dx			;AN000;
 29524                                  
 29525 0000192E 0E                      	push	cs			;AC036; pass current base seg into
 29526                                  					;(Note: this used to push CS.  BUG...
 29527 0000192F 07                      	pop	es			;AN000;   ES reg, required for
 29528                                  					;get extended country information
 29529                                  	;mov	al,dl ; function	;AN000; upper case table
 29530                                  	; 07/07/2023
 29531 00001930 92                      	xchg	ax,dx
 29532 00001931 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 29533 00001933 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 29534 00001936 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 29535                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 29536                                  	; 07/07/2023
 29537 00001939 89DA                    	mov	dx,bx ; 0FFFFh
 29538                                  					;DI already set to point to buffer
 29539 0000193B CD21                    	int	21h			;AN000; es:di point to buffer that
 29540                                  					;now has been filled in with info
 29541 0000193D 5A                      	pop	dx			;AN000;
 29542 0000193E 59                      	pop	cx			;AN000;
 29543 0000193F 58                      	pop	ax			;AN000;
 29544                                  
 29545                                  _$P_DCC01:				;AN000;
 29546                                  
 29547                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 29548                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 29549                                  ; regardless of which base reg is currently the cs reg.
 29550                                  
 29551                                  	; 14/04/2024
 29552                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 29553                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 29554                                  	; 07/07/2023
 29555 00001940 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 29556 00001944 43                      	inc	bx			;AC035; add '2' to
 29557 00001945 43                      	inc	bx			;AC035;  BX reg
 29558                                  					;AN000; skip length field
 29559 00001946 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 29560                                  	;xlat	es:[bx] 		;AN000; perform case map
 29561 00001948 26                      	es
 29562 00001949 D7                      	xlat
 29563 0000194A 5F                      	pop	di			;AN000;
 29564 0000194B 07                      	pop	es			;AN000;
 29565 0000194C 5B                      	pop	bx			;AN000;
 29566                                  _$P_CAPS_Ret:				;AN000;
 29567 0000194D C3                      	retn				;AN000;
 29568                                  
 29569                                  ;***********************************************************************
 29570                                  ; _$P_Value / _$P_SValue
 29571                                  ;
 29572                                  ; Function:  Make 32bit value from cs:SI and see value list
 29573                                  ;	     and make result buffer.
 29574                                  ;	     _$P_SValue is an entry point for the signed value
 29575                                  ;	     and this will simply call _$P_Value after the handling
 29576                                  ;	     of the sign character, "+" or "-"
 29577                                  ;
 29578                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29579                                  ;	     ES:BX -> CONTROL block
 29580                                  ;
 29581                                  ; Output:    None
 29582                                  ;
 29583                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 29584                                  ;
 29585                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 29586                                  ;***********************************************************************
 29587                                  
 29588                                  	; 26/10/2022 - Retro DOS v4.0
 29589                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 29590                                  
 29591                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29592                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 29593                                  _$P_SValue:				;AN000; when signed value here
 29594 0000194E 50                      	push	ax			;AN000;
 29595 0000194F 2E800E[F514]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 29596 00001955 2E8026[F514]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 29597                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 29598 0000195B 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 29599 0000195E 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 29600 00001960 740A                    	je	short _$P_SVal00	;AN000;
 29601                                  
 29602 00001962 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 29603 00001964 7507                    	jne	short _$P_Sval01	;AN000; else
 29604                                  
 29605 00001966 2E800E[F514]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 29606                                  _$P_SVal00:				;AN000;
 29607 0000196C 46                      	inc	si			;AN000; skip sign char
 29608                                  _$P_Sval01:				;AN000;
 29609 0000196D E80200                  	call	_$P_Value		;AN000; and process value
 29610 00001970 58                      	pop	ax			;AN000;
 29611 00001971 C3                      	retn
 29612                                  
 29613                                  ;***********************************************************************
 29614                                  
 29615                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29616                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 29617                                  
 29618                                  	; 26/10/2022
 29619                                  _$P_Value:				;AN000;
 29620 00001972 50                      	push	ax			;AN000;
 29621 00001973 51                      	push	cx			;AN000;
 29622 00001974 52                      	push	dx			;AN000;
 29623 00001975 56                      	push	si			;AN000;
 29624 00001976 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 29625 00001978 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 29626 0000197A 53                      	push	bx			;AN000; save control pointer
 29627                                  _$P_Value_Loop:				;AN000;
 29628 0000197B 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29629 0000197E 08C0                    	or	al,al			;AN000; end of line ?
 29630 00001980 7438                    	jz	short _$P_Value00	;AN000;
 29631                                  
 29632 00001982 E8DC00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 29633 00001985 722F                    	jc	short _$P_Value_Err0	;AN000;
 29634                                  
 29635 00001987 30E4                    	xor	ah,ah			;AN000;
 29636 00001989 89C5                    	mov	bp,ax			;AN000; save binary number
 29637                                  
 29638                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29639                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 29640                                  ;				Erdogan Tan - July 2023
 29641                                  %if 0
 29642                                  	shl	dx,1			;AN000; to have 2*x
 29643                                  	rcl	cx,1			;AN000; shift left w/ carry
 29644                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29645                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29646                                  
 29647                                  	mov	bx,dx			;AN000; save low(2*x)
 29648                                  	mov	ax,cx			;AN000; save high(2*x)
 29649                                  	shl	dx,1			;AN000; to have 4*x
 29650                                  	rcl	cx,1			;AN000; shift left w/ carry
 29651                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29652                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29653                                  
 29654                                  	shl	dx,1			;AN000; to have 8*x
 29655                                  	rcl	cx,1			;AN000; shift left w/ carry
 29656                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29657                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29658                                  
 29659                                  	add	dx,bx			;AN000; now have 10*x
 29660                                  	adc	cx,ax			;AN000; 32bit ADD
 29661                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29662                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29663                                  
 29664                                  	add	dx,bp			;AN000; Add the current one degree decimal
 29665                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 29666                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29667                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29668                                  
 29669                                  	inc	si			;AN000; update pointer
 29670                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 29671                                  ;_$P_Value_Err0:
 29672                                  %endif
 29673                                  ;****
 29674                                  %if 1
 29675                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29676                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 29677                                  
 29678                                  	; 14/04/2024 - Retro DOS v5.0
 29679                                  	;xor	ah,ah
 29680                                  	;mov	bp,ax			; save binary number
 29681                                  	
 29682 0000198B E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29683 0000198E 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 29684 00001990 89C8                    	mov	ax,cx
 29685 00001992 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29686 00001995 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29687 00001998 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 29688 0000199A 11C1                    	adc	cx,ax
 29689 0000199C E80F00                  	call	_$P_Value_Chk_Add_OVF
 29690 0000199F 01EA                    	add	dx,bp			; Add the current one degree decimal
 29691                                  					; if carry, add 1 to high 16bit
 29692 000019A1 83D100                  	adc	cx,0
 29693 000019A4 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 29694                                  					; then error, exit (without return here)
 29695 000019A7 46                      	inc	si			; update pointer
 29696 000019A8 EBD1                    	jmp	short _$P_Value_Loop
 29697                                  
 29698                                  _$P_Value_2x_OVF:
 29699 000019AA D1E2                    	shl	dx,1 			; to have 2*x
 29700 000019AC D1D1                    	rcl	cx,1			; shift left w/ carry
 29701                                  _$P_Value_Chk_Add_OVF:
 29702 000019AE E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 29703 000019B1 7201                    	jc	short _$P_Value_OVF
 29704 000019B3 C3                      	retn
 29705                                  _$P_Value_OVF:
 29706 000019B4 44                      	inc	sp 			; skip "call" return address to the caller
 29707 000019B5 44                      	inc	sp
 29708                                  
 29709                                  ;_$P_Value_Err0:	
 29710                                  %endif
 29711                                  ;****
 29712                                  
 29713                                  _$P_Value_Err0:				;AN000;
 29714 000019B6 5B                      	pop	bx			;AN000;
 29715 000019B7 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 29716                                  ;
 29717                                  _$P_Value00:				;AN000;
 29718 000019BA 5B                      	pop	bx			;AN000; restore control pointer
 29719 000019BB 2EF606[F514]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 29720 000019C1 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 29721                                  
 29722 000019C3 F7D1                    	not	cx			;AN000; +
 29723 000019C5 F7D2                    	not	dx			;AN000; |- Make 2's complement
 29724 000019C7 83C201                  	add	dx,1			;AN000; |
 29725 000019CA 83D100                  	adc	cx,0			;AN000; +
 29726                                  
 29727                                  _$P_Value01:				;AN000; / nval = 0
 29728 000019CD 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 29729 000019D1 268A04                  	mov	al,[es:si]		;AN000; get nval
 29730                                  	; 07/09/2023
 29731                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 29732                                  	;;*jne	short _$P_Value02	;AN000;
 29733                                  	;;* 07/07/2023
 29734                                  	;je	short _$P_Value05
 29735                                  	; 07/09/2023
 29736 000019D4 08C0                    	or	al,al
 29737 000019D6 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 29738                                  
 29739                                  	;mov	al,_$P_Number		;AN000; Set type
 29740                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29741                                  	; 07/07/2023
 29742                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29743                                  	;*jmp	short _$P_Value_Exit	;AN000;
 29744                                  
 29745                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 29746                                  	; (SYSINIT:1BA5h)
 29747                                  	; 12/12/2022
 29748                                  	;nop	; db  90h
 29749                                  
 29750                                  _$P_Value02:				;AN000; / nval = 1
 29751                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 29752                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 29753                                  ;(tm07) jne	short _$P_Value03	;AN000;
 29754                                  
 29755 000019D8 46                      	inc	si			;AN000;
 29756 000019D9 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 29757                                  	
 29758                                  	; 07/09/2023
 29759                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 29760                                  	;je	short _$P_Value03	;AN000; (tm07)
 29761 000019DC 08C0                    	or	al,al
 29762 000019DE 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 29763                                  
 29764 000019E0 46                      	inc	si			;AN000; si points to 1st item_tag
 29765                                  _$P_Val02_Loop:				;AN000;
 29766 000019E1 2EF606[F514]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 29767 000019E7 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 29768                                  
 29769 000019E9 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 29770 000019ED 7234                    	jb	short _$P_Val02_Next	;AN000;
 29771 000019EF 7706                    	ja	short _$P_Val_In	;AN000;
 29772                                  
 29773 000019F1 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 29774 000019F5 722C                    	jb	short _$P_Val02_Next	;AN000;
 29775                                  
 29776                                  _$P_Val_In:				;AN000;
 29777 000019F7 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 29778 000019FB 7726                    	ja	short _$P_Val02_Next	;AN000;
 29779 000019FD 7237                    	jb	short _$P_Val_Found	;AN000;
 29780                                  
 29781 000019FF 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 29782 00001A03 771E                    	ja	short _$P_Val02_Next	;AN000;
 29783                                  
 29784 00001A05 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 29785                                  
 29786                                  _$P_Val02_Sign:				;AN000;
 29787 00001A07 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 29788 00001A0B 7C16                    	jl	short _$P_Val02_Next	;AN000;
 29789 00001A0D 7F06                    	jg	short _$P_SVal_In	;AN000;
 29790                                  
 29791 00001A0F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 29792 00001A13 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 29793                                  
 29794                                  _$P_SVal_In:				;AN000;
 29795 00001A15 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 29796 00001A19 7F08                    	jg	short _$P_Val02_Next	;AN000;
 29797                                  
 29798 00001A1B 7C19                    	jl	short _$P_Val_Found	;AN000;
 29799                                  
 29800 00001A1D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 29801                                  	;jg	short _$P_Val02_Next	;AN000;
 29802                                  	;jmp	short _$P_Val_Found	;AN000;
 29803                                  	; 07/07/2023
 29804 00001A21 7E13                    	jng	short _$P_Val_Found
 29805                                  
 29806                                  _$P_Val02_Next:				;AN000;
 29807 00001A23 83C609                  	add	si,_$P_Len_Range 	;AN000;
 29808 00001A26 FEC8                    	dec	al			;AN000; loop nrng times in AL
 29809 00001A28 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 29810                                  					; / Not found
 29811 00001A2A 2EC706[E914]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 29812                                  	;mov	al,_$P_Number		;AN000;
 29813                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29814                                  _$P_Value05:		;* 07/07/2023
 29815                                  	; 07/07/2023
 29816 00001A31 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29817 00001A34 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 29818                                  
 29819                                  _$P_Val_Found:				;AN000;
 29820 00001A36 B001                    	mov	al,_$P_Number		;AN000;
 29821 00001A38 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 29822 00001A3B EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 29823                                  
 29824                                  _$P_Value03:				;AN000; / nval = 2
 29825                                  
 29826                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 29827                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 29828                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 29829                                  ;(tm07) inc	si			;AN000;
 29830                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 29831                                  ;	mov	ah,$P_Len_Range 	;AN000;
 29832                                  ;	mul	ah			;AN000;  Skip nrng field
 29833                                  ;	inc	ax			;AN000;
 29834                                  ;	add	si,ax			;AN000; si points to nnval
 29835                                  ;	mov	al,es:[si]		;AN000; get nnval
 29836                                  ;	inc	si			;AN000; si points to 1st item_tag
 29837                                  ;$P_Val03_Loop:				;AN000;
 29838                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 29839                                  ;	jne	$P_Val03_Next		;AN000;
 29840                                  ;
 29841                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 29842                                  ;	je	$P_Val_Found		;AN000;
 29843                                  ;
 29844                                  ;$P_Val03_Next:				;AN000;
 29845                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 29846                                  ;	dec	al			;AN000; loop nval times in AL
 29847                                  ;	jne	$P_Val03_Loop		;AN000;
 29848                                  ;					;AN000; / Not found
 29849                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 29850                                  ;	mov	al,$P_Number		;AN000;
 29851                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 29852                                  ;	jmp	short $P_Value_Exit	;AN000;
 29853                                  ;
 29854                                  ;ENDIF					;AN000;(of Val2SW)
 29855                                  ;$P_Value04:
 29856                                  
 29857                                  _$P_Value_Err:				;AN000;
 29858 00001A3D 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 29859                                  	;mov	al,_$P_String		;AN000; Set type
 29860                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29861                                  	; 07/09/2023
 29862                                  	; 07/07/2023
 29863 00001A44 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29864                                  _$P_Value_Exit:				;AN000;
 29865 00001A47 E855FD                  	call	_$P_Fill_Result		;AN000;
 29866 00001A4A 5E                      	pop	si			;AN000;
 29867 00001A4B 5A                      	pop	dx			;AN000;
 29868 00001A4C 59                      	pop	cx			;AN000;
 29869 00001A4D 58                      	pop	ax			;AN000;
 29870 00001A4E C3                      	retn				;AN000;
 29871                                  
 29872                                  ; 28/03/2019 - Retro DOS v4.0
 29873                                  
 29874                                  ;***********************************************************************
 29875                                  ; _$P_Check_OVF
 29876                                  ;
 29877                                  ; Function:  Check if overflow is occurred with consideration of
 29878                                  ;	     signed or un-signed numeric value
 29879                                  ;
 29880                                  ; Input:     Flag register
 29881                                  ;
 29882                                  ; Output:    CY = 1  :	Overflow
 29883                                  ;
 29884                                  ; Vars:     _$P_Flags(R)
 29885                                  ;***********************************************************************
 29886                                  
 29887                                  	; 26/10/2022
 29888                                  _$P_Check_OVF:
 29889 00001A4F 9C                      	pushf				;AN000;
 29890 00001A50 2EF606[F514]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 29891 00001A56 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 29892                                  
 29893 00001A58 9D                      	popf				;AN000; by the CY bit
 29894 00001A59 C3                      	retn				;AN000;
 29895                                  
 29896                                  _$P_COVF:				;AN000;
 29897 00001A5A 9D                      	popf				;AN000; else,
 29898 00001A5B 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 29899                                  
 29900 00001A5D F8                      	clc				;AN000; indicate it with CY bit
 29901 00001A5E C3                      	retn				;AN000; CY=0 means no overflow
 29902                                  
 29903                                  _$P_COVF00:				;AN000;
 29904 00001A5F F9                      	stc				;AN000; and CY=1 means overflow
 29905 00001A60 C3                      	retn				;AN000;
 29906                                  
 29907                                  ;***********************************************************************
 29908                                  ; _$P_0099;
 29909                                  ;
 29910                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 29911                                  ;
 29912                                  ; Input:     AL = character code
 29913                                  ;
 29914                                  ; Output:    CY = 1 : AL is not number
 29915                                  ;	     CY = 0 : AL contains binary value
 29916                                  ;***********************************************************************
 29917                                  
 29918                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29919                                  %if 0
 29920                                  _$P_0099:
 29921                                  	cmp	al,"0"                  ;AN000;
 29922                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29923                                  	; 12/12/2022
 29924                                  	jb	short _$P_0099Err2  ; cf=1
 29925                                  
 29926                                  	cmp	al,"9"                  ;AN000;
 29927                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29928                                  
 29929                                  	sub	al,"0"                  ;AN000; make char -> bin
 29930                                  	; 12/12/2022
 29931                                  	; cf=0	
 29932                                  	;clc				;AN000; indicate no error
 29933                                  	retn				;AN000;
 29934                                  
 29935                                  _$P_0099Err:				;AN000;
 29936                                  	stc				;AN000; indicate error
 29937                                  _$P_0099Err2: ; 12/12/2022	
 29938                                  	retn				;AN000;
 29939                                  %endif
 29940                                  
 29941                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29942                                  %if 1
 29943                                  _$P_0099:
 29944 00001A61 3C30                    	cmp	al,"0"                  ; cmp al,30h
 29945 00001A63 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 29946 00001A65 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 29947 00001A67 F5                      	cmc				; cf=0 -> cf=1
 29948 00001A68 7202                    	jb	short _$P_0099Err
 29949 00001A6A 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 29950                                  	; cf=0
 29951                                  _$P_0099Err:	; cf=1
 29952 00001A6C C3                      	retn
 29953                                  %endif
 29954                                  
 29955                                  ;***********************************************************************
 29956                                  ; _$P_Simple_String
 29957                                  ;
 29958                                  ; Function:  See value list for the simple string
 29959                                  ;	     and make result buffer.
 29960                                  ;
 29961                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29962                                  ;	     ES:BX -> CONTROL block
 29963                                  ;
 29964                                  ; Output:    None
 29965                                  ;
 29966                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 29967                                  ;
 29968                                  ; Vars: _$P_RC(W)
 29969                                  ;***********************************************************************
 29970                                  
 29971                                  _$P_Simple_String:
 29972 00001A6D 50                      	push	ax			;AN000;
 29973 00001A6E 53                      	push	bx			;AN000;
 29974 00001A6F 52                      	push	dx			;AN000;
 29975 00001A70 57                      	push	di			;AN000;
 29976 00001A71 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 29977 00001A75 268A05                  	mov	al,[es:di]		;AN000; get nval
 29978 00001A78 08C0                    	or	al,al			;AN000; no value list ?
 29979 00001A7A 7504                    	jnz	short _$P_Sim00		;AN000; then
 29980                                  
 29981 00001A7C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29982 00001A7E EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 29983                                  
 29984                                  _$P_Sim00:				;AN000;
 29985                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 29986 00001A80 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 29987 00001A82 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 29988                                  
 29989 00001A84 47                      	inc	di			;AN000;
 29990 00001A85 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 29991 00001A88 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 29992 00001A8A F6E4                    	mul	ah			;AN000; Skip nrng field
 29993 00001A8C 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 29994 00001A8D 01C7                    	add	di,ax			;AN000; di points to nnval
 29995 00001A8F 268A05                  	mov	al,[es:di]		;AN000; get nnval
 29996 00001A92 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 29997 00001A94 F6E4                    	mul	ah			;AN000; Skip nnval field
 29998 00001A96 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 29999 00001A97 01C7                    	add	di,ax			;AN000; di points to nstrval
 30000 00001A99 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 30001 00001A9C 47                      	inc	di			;AC035; add '2' to
 30002 00001A9D 47                      	inc	di			;AC035;  DI reg
 30003                                  					;AN000; di points to 1st string in list
 30004                                  _$P_Sim_Loop:				;AN000;
 30005 00001A9E 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 30006 00001AA1 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 30007 00001AA4 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 30008                                  
 30009 00001AA6 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 30010 00001AA9 FEC8                    	dec	al			;AN000; loop nstval times in AL
 30011 00001AAB 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 30012                                  					;AN000; / Not found
 30013 00001AAD 2EC706[E914]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 30014 00001AB4 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30015 00001AB6 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 30016                                  
 30017                                  _$P_Sim_Found:				;AN000;
 30018 00001AB8 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 30019 00001ABC B002                    	mov	al,_$P_List_Idx		;AN000;
 30020 00001ABE 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 30021 00001AC1 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 30022                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 30023                                  _$P_Sim01:				;AN000;
 30024 00001AC3 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30025 00001ACA B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30026                                  _$P_Sim_Exit:				;AN000;
 30027 00001ACC B003                    	mov	al,_$P_String		;AN000; Set type
 30028                                  _$P_Sim_Exit0:				;AN000;
 30029 00001ACE E8CEFC                  	call	_$P_Fill_Result		;AN000;
 30030 00001AD1 5F                      	pop	di			;AN000;
 30031 00001AD2 5A                      	pop	dx			;AN000;
 30032 00001AD3 5B                      	pop	bx			;AN000;
 30033 00001AD4 58                      	pop	ax			;AN000;
 30034 00001AD5 C3                      	retn				;AN000;
 30035                                  
 30036                                  ;***********************************************************************
 30037                                  ; _$P_String_Comp:
 30038                                  ;
 30039                                  ; Function:  Compare two string
 30040                                  ;
 30041                                  ; Input:     cs:SI -> 1st string
 30042                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30043                                  ;	     ES:BX -> CONTROL block
 30044                                  ;
 30045                                  ; Output:    CY = 1 if not match
 30046                                  ;
 30047                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 30048                                  ;
 30049                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 30050                                  ;***********************************************************************
 30051                                  
 30052                                  _$P_String_Comp:
 30053 00001AD6 50                      	push	ax			;AN000;
 30054 00001AD7 55                      	push	bp			;AN000;
 30055 00001AD8 52                      	push	dx			;AN000;
 30056 00001AD9 56                      	push	si			;AN000;
 30057 00001ADA B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 30058                                  _$P_SCOM_Loop:				;AN000;
 30059 00001ADC 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30060 00001ADF E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 30061 00001AE2 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 30062                                  
 30063 00001AE4 E82AFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 30064                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 30065 00001AE7 2EF606[F514]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 30066 00001AED 740D                    	jz	short _$P_SCOM04	;AN000;
 30067                                  
 30068 00001AEF 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 30069 00001AF1 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 30070                                  
 30071 00001AF3 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 30072 00001AF8 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 30073                                  
 30074 00001AFA EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 30075                                  
 30076                                  _$P_SCOM04:				;AN000;
 30077 00001AFC 2EF606[F514]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 30078 00001B02 740E                    	jz	short _$P_SCOM03	;AN000;
 30079                                  
 30080 00001B04 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 30081 00001B06 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 30082                                  
 30083                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30084                                  	;cmp	byte [es:bp+0],_$P_NULL
 30085                                  	; 11/12/2022
 30086 00001B08 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 30087 00001B0D 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 30088                                  
 30089                                  _$P_SCOM05:				;AN000;   found a match
 30090 00001B0F 46                      	inc	si			;AN000; si points to just after "=" or ":"
 30091 00001B10 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 30092                                  
 30093                                  _$P_SCOM03:				;AN000;
 30094                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 30095                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30096                                  	;cmp	al,[es:bp+0]
 30097                                  	; 11/12/2022
 30098 00001B12 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 30099 00001B16 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 30100                                  
 30101 00001B18 08C0                    	or	al,al			;AN000; end of line
 30102 00001B1A 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 30103                                  
 30104                                  	; 12/12/2022
 30105                                  	;inc	si			;AN000; update operand pointer
 30106                                  	;inc	bp			;AN000;    and synonym pointer
 30107                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30108 00001B1C EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 30109                                  
 30110                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 30111                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30112                                  	;cmp	al,[es:bp+0]
 30113                                  	; 11/12/2022
 30114 00001B1E 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 30115 00001B22 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 30116                                  
 30117 00001B24 46                      	inc	si			;AN000; else, load next byte
 30118 00001B25 2E8A04                  	mov	al,[cs:si]		;AN000; and
 30119 00001B28 45                      	inc	bp			;AN000;
 30120                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30121                                  	;cmp	al,[es:bp+0]
 30122                                  	; 11/12/2022
 30123 00001B29 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 30124 00001B2D 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 30125                                  
 30126                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30127                                  	; 12/12/2022
 30128                                  _$P_SCOM01:
 30129 00001B2F 46                      	inc	si			;AN000; else update operand pointer
 30130 00001B30 45                      	inc	bp			;AN000; 		and synonym pointer
 30131                                  ;_$P_SCOM01:				;AN000;
 30132 00001B31 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 30133                                  
 30134                                  _$P_SCOM_Differ0:			;AN000;
 30135                                  ;IF SwSW				;AN000;(tm10)
 30136 00001B33 2EF606[F514]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 30137 00001B39 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30138                                  
 30139                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30140                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 30141                                  	; 12/12/2022
 30142 00001B3B 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 30143 00001B40 7407                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30144                                  
 30145                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30146                                  	;cmp	byte [es:bp+0],_$P_NULL
 30147                                  	; 11/12/2022
 30148 00001B42 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 30149                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 30150 00001B47 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 30151                                  
 30152                                  _$P_not_applicable:			;AN000;(tm10)
 30153                                  ;ENDIF					;AN000;(tm10)
 30154                                  
 30155                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30156                                  					;AN000; ignore colon option specified ?
 30157                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 30158                                  	; 12/12/2022
 30159 00001B49 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30160                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30161                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 30162 00001B4D 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 30163                                  
 30164 00001B4F 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 30165 00001B51 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 30166                                  
 30167                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30168                                  	;cmp	byte [es:bp+0],_$P_NULL
 30169                                  	; 11/12/2022
 30170 00001B53 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 30171 00001B58 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 30172                                  
 30173 00001B5A EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 30174                                  
 30175                                  _$P_SCOM02:				;AN000;
 30176 00001B5C 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 30177 00001B5E 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 30178                                  
 30179                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30180                                  	;cmp	byte [es:bp+0],_$P_Colon
 30181                                  	; 11/12/2022
 30182 00001B60 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 30183 00001B65 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 30184                                  
 30185                                  _$P_SCOM_Differ: 			;AN000;
 30186 00001B67 F9                      	stc				;AN000; indicate not found
 30187 00001B68 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 30188                                  
 30189                                  _$P_SCOM_Same:				;AN000;
 30190                                  	; 12/12/2022
 30191                                  	; cf=0
 30192 00001B6A 2E8936[F814]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 30193                                  	; 12/12/2022
 30194                                  	;clc				;AN000; indicate found
 30195                                  _$P_SCOM_Exit:				;AN000;
 30196 00001B6F 5E                      	pop	si			;AN000;
 30197 00001B70 5A                      	pop	dx			;AN000;
 30198 00001B71 5D                      	pop	bp			;AN000;
 30199 00001B72 58                      	pop	ax			;AN000;
 30200 00001B73 C3                      	retn
 30201                                  
 30202                                  ; 30/03/2019
 30203                                  
 30204                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 30205                                  
 30206                                  ;***********************************************************************
 30207                                  ; _$P_File_Format;
 30208                                  ;
 30209                                  ; Function:  Check if the input string is valid file spec format.
 30210                                  ;	     And set the result buffer.
 30211                                  ;
 30212                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30213                                  ;	     ES:BX -> CONTROL block
 30214                                  ;
 30215                                  ; Output:    None
 30216                                  ;
 30217                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 30218                                  ;
 30219                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 30220                                  ;	_$P_SaveSI_Cmpx(R)
 30221                                  ;***********************************************************************
 30222                                  
 30223                                  _$P_File_Format:
 30224 00001B74 50                      	push	ax			;AN000;
 30225 00001B75 57                      	push	di			;AN000;
 30226 00001B76 56                      	push	si			;AN000;
 30227 00001B77 2E8B3E[F614]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 30228                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 30229 00001B7C 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 30230 00001B7F 08C0                    	or	al,al			;AN000; end of line ?
 30231 00001B81 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 30232                                  
 30233 00001B83 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 30234 00001B86 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 30235                                  
 30236 00001B88 2EC606[8C15]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 30237                                  					;AN033;AC034;; set error flag- bad char.
 30238 00001B8E 5E                      	pop	si			;AN033;
 30239 00001B8F 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 30240 00001B93 5F                      	pop	di			;AN033;
 30241 00001B94 EB3E                    	jmp	short _$P_FileF02	;AN033;
 30242                                  
 30243                                  _$P_FileF_Err:				;AN000;
 30244 00001B96 5E                      	pop	si			;AN000;
 30245 00001B97 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 30246 00001B9B 5F                      	pop	di			;AN000;
 30247                                  
 30248                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 30249                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 30250                                  	; 12/12/2022
 30251 00001B9C 26F60701                	test	byte [es:bx],_$P_Optional
 30252                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30253                                  	;test	word [es:bx],_$P_Optional
 30254 00001BA0 7532                    	jnz	short _$P_FileF02	;AN000;
 30255                                  
 30256 00001BA2 2EC706[E914]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 30257 00001BA9 EB29                    	jmp	short _$P_FileF02	;AN000;
 30258                                  
 30259                                  _$P_FileF03:				;AN000;
 30260 00001BAB 58                      	pop	ax			;AN000; discard save si
 30261 00001BAC 56                      	push	si			;AN000; save new si
 30262                                  _$P_FileF_Loop1: 			;AN000;
 30263 00001BAD 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 30264 00001BB0 08C0                    	or	al,al			;AN000; end of line ?
 30265 00001BB2 741E                    	jz	short _$P_FileF_RLT	;AN000;
 30266                                  
 30267 00001BB4 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 30268 00001BB7 740B                    	je	short _$P_FileF00	;AN000;
 30269                                  
 30270 00001BB9 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 30271 00001BBC 7302                    	jnc	short _$P_FileF01	;AN000;
 30272 00001BBE 47                      	inc	di			;AN000; if yes, skip next byte
 30273 00001BBF 46                      	inc	si			;AN000;
 30274                                  _$P_FileF01:				;AN000;
 30275 00001BC0 47                      	inc	di			;AN000;
 30276 00001BC1 46                      	inc	si			;AN000;
 30277 00001BC2 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 30278                                  ;
 30279                                  _$P_FileF00:				;AN000;
 30280 00001BC4 2EA2[EF14]              	mov	[cs:_$P_Terminator],al	;AC034;
 30281 00001BC8 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 30282 00001BCC 47                      	inc	di			;AN000;
 30283 00001BCD 2E893E[EB14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 30284                                  _$P_FileF_RLT:				;AN000;
 30285 00001BD2 5E                      	pop	si			;AN000;
 30286 00001BD3 5F                      	pop	di			;AN000;
 30287                                  _$P_FileF02:				;AN000;
 30288 00001BD4 58                      	pop	ax			;AN000; (tm14)
 30289                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 30290                                  	; 08/07/2023
 30291 00001BD5 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 30292 00001BD8 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 30293                                  
 30294 00001BDA 50                      	push	ax			;AN000; (tm14)
 30295                                  	;mov	ah,_$P_No_Tag		;AN000; set
 30296                                  	;mov	al,_$P_File_Spec 	;AN000; result
 30297                                  	; 08/07/2023
 30298 00001BDB B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 30299                                  					      ; set result
 30300 00001BDE E8BEFB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 30301 00001BE1 58                      	pop	ax			;AN000;
 30302                                  
 30303                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 30304 00001BE2 C3                      	retn				;AN000;
 30305                                  
 30306                                  ;***********************************************************************
 30307                                  ; _$P_FileSp_Chk
 30308                                  ;
 30309                                  ; Function:  Check if the input byte is one of file special characters
 30310                                  ;
 30311                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30312                                  ;	     AL = character code to be examineed
 30313                                  ;
 30314                                  ; Output:    ZF = 1 , AL is one of special characters
 30315                                  ;***********************************************************************
 30316                                  
 30317                                  _$P_FileSp_Chk:
 30318 00001BE3 53                      	push	bx			;AN000;
 30319 00001BE4 51                      	push	cx			;AN000;
 30320                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 30321                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 30322                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 30323                                  	; 07/09/2023
 30324 00001BE5 BB[8315]                	mov	bx,_$P_FileSp_Char
 30325 00001BE8 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 30326                                  _$P_FileSp_Loop: 			;AN000;
 30327 00001BEB 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 30328 00001BEE 7404                    	je	short _$P_FileSp_Exit	;AN000;
 30329                                  
 30330 00001BF0 43                      	inc	bx			;AN000;
 30331 00001BF1 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 30332                                  
 30333 00001BF3 41                      	inc	cx			;AN000; reset ZF
 30334                                  _$P_FileSp_Exit: 			;AN000;
 30335 00001BF4 59                      	pop	cx			;AN000;
 30336 00001BF5 5B                      	pop	bx			;AN000;
 30337 00001BF6 C3                      	retn
 30338                                  
 30339                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 30340                                  
 30341                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 30342                                  
 30343                                  ;***********************************************************************
 30344                                  ; _$P_Drive_Format;
 30345                                  ;
 30346                                  ; Function:  Check if the input string is valid drive only format.
 30347                                  ;	     And set the result buffer.
 30348                                  ;
 30349                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30350                                  ;	     ES:BX -> CONTROL block
 30351                                  ;
 30352                                  ; Output:    None
 30353                                  ;
 30354                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 30355                                  ;
 30356                                  ; Vars: _$P_RC(W)
 30357                                  ;***********************************************************************
 30358                                  
 30359                                  _$P_Drive_Format:
 30360 00001BF7 50                      	push	ax			;AN000;
 30361 00001BF8 52                      	push	dx			;AN000;
 30362 00001BF9 2E8A04                  	mov	al,[cs:si]		;AN000;
 30363 00001BFC 08C0                    	or	al,al			;AN000; if null string
 30364 00001BFE 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 30365                                  
 30366 00001C00 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 30367 00001C03 722A                    	jc	short _$P_Drv_Err	;AN000;
 30368                                  
 30369 00001C05 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 30370 00001C0A 740D                    	je	short _$P_DrvF00	;AN000;
 30371                                  
 30372                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30373                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 30374                                  	; 12/12/2022
 30375 00001C0C 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30376                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30377                                  	;test	word [es:bx],_$P_Ig_Colon
 30378 00001C10 741D                    	jz	short _$P_Drv_Err	;AN000;
 30379                                  
 30380 00001C12 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 30381 00001C17 7516                    	jne	short _$P_Drv_Err	;AN000;
 30382                                  
 30383                                  _$P_DrvF00:				;AN000;
 30384 00001C19 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 30385 00001C1B 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 30386 00001C1D 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 30387                                  
 30388 00001C1F 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 30389 00001C21 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 30390                                  
 30391 00001C23 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 30392 00001C25 88C2                    	mov	dl,al			;AN000; set
 30393                                  	;mov	ah,_$P_No_Tag		;AN000; result
 30394                                  	;mov	al,_$P_Drive		;AN000; buffer
 30395                                  	; 08/07/2023
 30396 00001C27 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 30397                                  					      ; set result buffer
 30398 00001C2A E872FB                  	call	_$P_Fill_Result		;AN000; to drive
 30399 00001C2D EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 30400                                  
 30401                                  _$P_Drv_Err:				;AN000;
 30402 00001C2F 2EC706[E914]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30403                                  _$P_Drv_Exit:				;AN000;
 30404 00001C36 5A                      	pop	dx			;AN000;
 30405 00001C37 58                      	pop	ax			;AN000;
 30406 00001C38 C3                      	retn				;AN000;
 30407                                  
 30408                                  ;ENDIF					;AN000;(of DrvSW)
 30409                                  
 30410                                  ;***********************************************************************
 30411                                  ; _$P_Skip_Delim;
 30412                                  ;
 30413                                  ; Function: Skip delimiters specified in the PARMS list, white space
 30414                                  ;	    and comma.
 30415                                  ;
 30416                                  ; Input:    DS:SI -> Command String
 30417                                  ;	    ES:DI -> Parameter List
 30418                                  ;
 30419                                  ; Output:   CY = 1 if the end of line encounterd
 30420                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 30421                                  ;	    AL = Last examineed character
 30422                                  ;
 30423                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 30424                                  ;
 30425                                  ; Vars:     _$P_Flags(R)
 30426                                  ;***********************************************************************
 30427                                  
 30428                                  _$P_Skip_Delim:
 30429                                  _$P_Skip_Delim_Loop:			;AN000;
 30430 00001C39 AC                      	lodsb				;AN000;
 30431 00001C3A E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 30432 00001C3D 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 30433                                  
 30434 00001C3F E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 30435 00001C42 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 30436                                  
 30437 00001C44 2EF606[F514]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 30438 00001C4A 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 30439                                  
 30440 00001C4C 2EF606[F514]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 30441                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 30442                                  	; 08/07/2023
 30443                                  	; cf=0
 30444 00001C52 7505                    	jnz	short _$P_Skip_Delim_Exit
 30445 00001C54 C3                      	retn
 30446                                  
 30447                                  	;dec	si			;AN000; backup si for next call (tm08)
 30448                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 30449                                  	; 12/12/2022
 30450                                  	; cf=0
 30451                                  	; 08/07/2023
 30452                                  	;jmp	short _$P_Skip_Delim_Exit
 30453                                  
 30454                                  _$P_Skip_Delim_CY:			;AN000;
 30455 00001C55 F9                      	stc				;AN000; indicate EOL
 30456 00001C56 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 30457                                  
 30458                                  _$P_Skip_Delim_NCY:			;AN000;
 30459 00001C58 F8                      	clc				;AN000; indicate non delim
 30460                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 30461 00001C59 4E                      	dec	si			;AN000;  backup index pointer
 30462                                  	; 08/07/2023
 30463                                  	; 12/12/2022
 30464                                  ;_$P_Exit_At_Extra:	 ; cf=0
 30465 00001C5A C3                      	retn				;AN000;
 30466                                  
 30467                                  	; 12/12/2022
 30468                                  ;_$P_Exit_At_Extra:			;AN000;
 30469                                  	;clc				;AN000; indicate extra delim
 30470                                  	;retn				;AN000;
 30471                                  
 30472                                  ;***********************************************************************
 30473                                  ; _$P_Chk_EOL;
 30474                                  ;
 30475                                  ; Function: Check if AL is one of End of Line characters.
 30476                                  ;
 30477                                  ; Input:    AL = character code
 30478                                  ;	    ES:DI -> Parameter List
 30479                                  ;
 30480                                  ; Output:   ZF = 1 if one of End of Line characters
 30481                                  ;**********************************************************************
 30482                                  
 30483                                  _$P_Chk_EOL:
 30484 00001C5B 53                      	push	bx			;AN000;
 30485 00001C5C 51                      	push	cx			;AN000;
 30486 00001C5D 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 30487 00001C5F 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30488 00001C61 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 30489 00001C63 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30490                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 30491 00001C65 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 30492 00001C67 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30493                                  ;ENDIF					;AN028;
 30494 00001C69 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 30495                                  					;AN000; EOL character specified ?
 30496 00001C6E 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 30497 00001C70 31DB                    	xor	bx,bx			;AN000;
 30498 00001C72 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 30499                                  					;AN000; get length of delimiter list
 30500 00001C76 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 30501                                  	; 08/07/2023
 30502 00001C79 31C9                    	xor	cx,cx ; *
 30503 00001C7B 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 30504 00001C7F 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 30505                                  	; 08/07/2023
 30506                                  	;;xor	cx,cx			;AN000; Get number of extra character
 30507                                  	;xor	ch,ch ; *
 30508 00001C81 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 30509                                  _$P_Chk_EOL_Loop:			;AN000;
 30510 00001C84 43                      	inc	bx			;AN000;
 30511 00001C85 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 30512 00001C88 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30513 00001C8A E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 30514                                  	; 08/07/2023
 30515                                  	; cx=0
 30516                                  _$P_Chk_EOL_NZ:				;AN000;
 30517                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 30518                                  	; 08/07/2023
 30519 00001C8C 41                      	inc	cx  ; zf=0  (cx=1) ; *
 30520                                  _$P_Chk_EOL_Exit:			;AN000;
 30521 00001C8D 59                      	pop	cx			;AN000;
 30522 00001C8E 5B                      	pop	bx			;AN000;
 30523 00001C8F C3                      	retn
 30524                                  
 30525                                  ;***********************************************************************
 30526                                  ; _$P_Chk_Delim;
 30527                                  ;
 30528                                  ; Function: Check if AL is one of delimiter characters.
 30529                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 30530                                  ;	    blanks.
 30531                                  ;
 30532                                  ; Input:    AL = character code
 30533                                  ;	    DS:SI -> Next Character
 30534                                  ;	    ES:DI -> Parameter List
 30535                                  ;
 30536                                  ; Output:   ZF = 1 if one of delimiter characters
 30537                                  ;	    SI points to the next character
 30538                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 30539                                  ;***********************************************************************
 30540                                  
 30541                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30542                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 30543                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 30544                                  
 30545                                  _$P_Chk_Delim:
 30546 00001C90 53                      	push	bx			;AN000;
 30547 00001C91 51                      	push	cx			;AN000;
 30548 00001C92 2EC606[EF14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 30549                                  					;AC034; Assume terminated by space
 30550                                  	;and	byte [cs:_$P_Flags20,0DFh
 30551 00001C98 2E8026[F514]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 30552 00001C9E 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 30553 00001CA0 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30554                                  
 30555 00001CA2 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 30556 00001CA4 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30557                                  
 30558 00001CA6 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 30559 00001CA8 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30560                                  
 30561                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 30562                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 30563                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30564                                  ;_$P_Chk_Delim00:
 30565                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 30566                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 30567                                  %if 0
 30568                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30569                                  _$P_Chk_Delim00: 			;AN000;
 30570                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 30571                                  	jne	short _$P_Chk_Delim01	;AN000;
 30572                                  
 30573                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 30574                                  	jne	short _$P_Chk_Delim01	;AN000;
 30575                                  
 30576                                  	mov	al,_$P_Space		;AN000;
 30577                                  	inc	si			;AN000; make si point to next character
 30578                                  	cmp	al,al			;AN000; Set ZF
 30579                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30580                                  %endif
 30581                                  
 30582                                  _$P_Chk_Delim01: 			;AN000;
 30583 00001CAA 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 30584                                  					;AN000; delimiter character specified ?
 30585 00001CAF 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 30586                                  
 30587                                  	;xor	cx,cx			;AN000;
 30588 00001CB1 30ED                    	xor	ch,ch
 30589                                  	;mov	cl,[es:di+3]
 30590 00001CB3 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 30591                                  					;AN000; get length of delimiter list
 30592                                  	;or	cx,cx			;AN000; No extra Delim character ?
 30593                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 30594                                  	; 08/07/2023
 30595 00001CB7 E30B                    	jcxz	_$P_Chk_Delim_NZ
 30596                                  
 30597 00001CB9 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 30598                                  _$P_Chk_Delim_Loop:			;AN000;
 30599 00001CBC 43                      	inc	bx			;AN000;
 30600 00001CBD 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 30601 00001CC0 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30602                                  
 30603 00001CC2 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 30604                                  
 30605                                  _$P_Chk_Delim_NZ:			;AN000;
 30606                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 30607                                  	; 08/07/2023
 30608                                  	; cx=0 here
 30609 00001CC4 41                      	inc	cx ; cx=1, zf=0
 30610                                  _$P_Chk_Delim_Exit:			;AN000;
 30611                                  _$P_ChkDfin:				;AN000;
 30612 00001CC5 59                      	pop	cx			;AN000;
 30613 00001CC6 5B                      	pop	bx			;AN000;
 30614 00001CC7 C3                      	retn				;AN000;
 30615                                  
 30616                                  _$P_Chk_Delim_Exit0:			;AN000;
 30617 00001CC8 2EA2[EF14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 30618 00001CCC 2EF606[F514]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 30619 00001CD2 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 30620                                  
 30621 00001CD4 2E800E[F514]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 30622                                  					;AC034; flag terminated extra delimiter or comma
 30623                                  _$P_No_Set_Extra:			;AN027;
 30624 00001CDA 38C0                    	cmp	al,al			;AN000; set ZF
 30625 00001CDC EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30626                                  
 30627                                  ;***********************************************************************
 30628                                  ; _$P_Chk_Switch;
 30629                                  ;
 30630                                  ; Function: Check if AL is the switch character not in first position of
 30631                                  ;	    _$P_STRING_BUF
 30632                                  ;
 30633                                  ; Input:    AL = character code
 30634                                  ;	    BX = current pointer within _$P_String_Buf
 30635                                  ;	    SI =>next char on command line (following the one in AL)
 30636                                  ;
 30637                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 30638                                  ;		 position, and has no chance of being part of a date string,
 30639                                  ;		 i.e. should be treated as a delimiter.
 30640                                  
 30641                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 30642                                  ;		 position, or is a slash but may be part of a date string, i.e.
 30643                                  ;		 should not be treated as a delimiter.
 30644                                  ;
 30645                                  ; Vars:  _$P_Terminator(W)
 30646                                  
 30647                                  ; Use:	 _$P_0099
 30648                                  ;***********************************************************************
 30649                                  
 30650                                  _$P_Chk_Switch:
 30651                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 30652                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 30653                                  	; 08/07/2023
 30654 00001CDE BD[FE14]                	mov	bp,_$P_STRING_BUF
 30655                                  
 30656                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 30657 00001CE1 39EB                    	cmp	bx,bp			;AN000;
 30658 00001CE3 7406                    	je	short _$P_STRUC_L2	;AN000;
 30659                                  
 30660                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 30661 00001CE5 3C2F                    	cmp	al,_$P_Switch		;AN000;
 30662 00001CE7 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 30663                                  
 30664 00001CE9 F9                      	stc				;AN020;not in first position and is slash
 30665                                  	;jmp     short _$P_STRUC_L1	;AN000;
 30666                                  	; 12/12/2022
 30667 00001CEA C3                      	retn
 30668                                  
 30669                                  ; 12/12/2022
 30670                                  ;_$P_STRUC_L5:				;AN000;
 30671                                  ;	CLC				;AN020;not a slash
 30672                                  ;;	    .ENDIF			;AN020;
 30673                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 30674                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 30675                                  
 30676                                  _$P_STRUC_L2:				;AN000;
 30677                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 30678 00001CEB 3C2F                    	cmp     al,_$P_Switch		;AN000;
 30679 00001CED 7506                    	jne	short _$P_STRUC_L12	;AN000;
 30680                                  
 30681 00001CEF 2E800E[F514]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 30682                                  ;	.ENDIF				;AN020;
 30683                                  
 30684                                  	; 12/12/2022
 30685                                  	; cf=0
 30686                                  	;retn
 30687                                  
 30688                                  _$P_STRUC_L5:
 30689                                  	; 12/12/2022
 30690                                  _$P_STRUC_L12:				;AN000;
 30691 00001CF5 F8                      	clc				;AN020;CF=0 indicating first char
 30692                                  ;	.ENDIF				;AN020;
 30693                                  _$P_STRUC_L1:				;AN000;
 30694 00001CF6 C3                      	retn				;AN000;
 30695                                  
 30696                                  ;**************************************************************************
 30697                                  ; _$P_Chk_DBCS:
 30698                                  ;
 30699                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 30700                                  ;
 30701                                  ;  Input:
 30702                                  ;	  AL	= Code to be examineed
 30703                                  ;
 30704                                  ;  Output:
 30705                                  ;	  If CF is on then a lead byte of DBCS
 30706                                  ;
 30707                                  ; Use: INT 21h w/AH=63
 30708                                  ;
 30709                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 30710                                  ;***************************************************************************
 30711                                  
 30712                                  _$P_Chk_DBCS:
 30713 00001CF7 1E                      	push	ds			;AN000;
 30714 00001CF8 56                      	push	si			;AN000;
 30715 00001CF9 53                      	push	bx			;AN000; (tm11)
 30716                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 30717                                  	;jne	short _$P_DBCS00	;AN000;
 30718                                  	; 08/07/2023
 30719 00001CFA 2E8B36[F214]            	mov	si,[cs:_$P_DBCSEV_SEG]
 30720 00001CFF 21F6                    	and	si,si ; 0 ?
 30721 00001D01 7525                    	jnz	short _$P_DBCS00 ; already set
 30722 00001D03 50                      	push	ax			;AN000;
 30723 00001D04 1E                      	push	ds			;AN000; (tm11)
 30724 00001D05 51                      	push	cx			;AN000;
 30725 00001D06 52                      	push	dx			;AN000;
 30726 00001D07 57                      	push	di			;AN000;
 30727 00001D08 55                      	push	bp			;AN000;
 30728 00001D09 06                      	push	es			;AN000;
 30729                                  	; si = 0 ; 08/07/2023
 30730                                  	;xor	si,si			;AN000;
 30731 00001D0A 8EDE                    	mov	ds,si ; 0		;AN000;
 30732 00001D0C B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 30733 00001D0F CD21                    	int	21h			;AN000;
 30734                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 30735 00001D11 8CDB                    	mov	bx,ds			;AN000; (tm11)
 30736 00001D13 09DB                    	or	bx,bx			;AN000; (tm11)
 30737 00001D15 07                      	pop	es			;AN000;
 30738 00001D16 5D                      	pop	bp			;AN000;
 30739 00001D17 5F                      	pop	di			;AN000;
 30740 00001D18 5A                      	pop	dx			;AN000;
 30741 00001D19 59                      	pop	cx			;AN000;
 30742 00001D1A 1F                      	pop	ds			;AN000; (tm11)
 30743 00001D1B 58                      	pop	ax			;AN000;
 30744 00001D1C 7424                    	jz	short _$P_NON_DBCS	;AN000;
 30745                                  _$P_DBCS02:				;AN000;
 30746 00001D1E 2E8936[F014]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 30747 00001D23 2E891E[F214]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 30748                                  _$P_DBCS00:				;AN000;
 30749                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 30750                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 30751                                  	; 08/07/2023
 30752 00001D28 2EC536[F014]            	lds	si,[cs:_$P_DBCSEV_OFF]
 30753                                  _$P_DBCS_LOOP:				;AN000;
 30754 00001D2D 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 30755 00001D30 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 30756 00001D32 3A04                    	cmp	al,[si] 		;AN000;
 30757 00001D34 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 30758 00001D36 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 30759 00001D39 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 30760 00001D3B F9                      	stc				;AN000; if yes, indicate DBCS and exit
 30761 00001D3C EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 30762                                  _$P_DBCS01:				;AN000;
 30763 00001D3E 46                      	inc	si			;AC035; add '2' to
 30764 00001D3F 46                      	inc	si			;AC035;  SI reg
 30765                                  					;AN000; get next vector
 30766 00001D40 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 30767                                  _$P_NON_DBCS:				;AN000;
 30768                                  	; 12/12/2022
 30769                                  	; cf=0
 30770                                  	;clc				;AN000; indicate SBCS
 30771                                  _$P_DBCS_EXIT:				;AN000;
 30772 00001D42 5B                      	pop	bx			;AN000; (tm11)
 30773 00001D43 5E                      	pop	si			;AN000;
 30774 00001D44 1F                      	pop	ds			;AN000;
 30775 00001D45 C3                      	retn				;AN000;
 30776                                  
 30777                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 30778                                  ; ======================================================================
 30779                                  ; 27/03/2019 - Retro DOS v4.0
 30780                                  
 30781                                  ;control block definitions for parser.
 30782                                  ;-----------------------------------------------------------------------
 30783                                  ; buffer = [n | n,m] {/e}
 30784                                  
 30785                                  ; 30/03/2019
 30786                                  
 30787                                  struc p_parms
 30788 00000000 ????                    	resw	1	; dw ?
 30789 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 30790 00000003 ??                      	resb	1	; db 1	; length is 1
 30791 00000004 ??                      	resb 	1	; db ';' ; delimiter
 30792                                  .size:
 30793                                  endstruc
 30794                                  
 30795                                  struc p_pos
 30796 00000000 ????                    	resw	1	; dw ?	; numeric value??
 30797 00000002 ????                    	resw	1	; dw ?	; function
 30798 00000004 ????                    	resw	1	; dw ?	; result value buffer
 30799                                  
 30800                                  ; note: by defining result_val before this structure, we could remove
 30801                                  ;  the "result_val" from every structure invocation
 30802                                  
 30803 00000006 ????                    	resw	1	; dw ?	; value list
 30804 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 30805                                  .size:
 30806                                  endstruc
 30807                                  
 30808                                  struc	p_range
 30809 00000000 ??                      	resb	1	; db 1	; range definition
 30810 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 30811 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 30812 00000003 ????????                	resd	1	; dd ?	; numeric min
 30813 00000007 ????????                	resd	1	; dd ?	; numeric max
 30814                                  .size:
 30815                                  endstruc
 30816                                  
 30817                                  ;-----------------------------------------------------------------------
 30818                                  
 30819                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30820                                  	; (SYSINIT:1F48h)
 30821                                  
 30822                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30823                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 30824                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 30825                                  
 30826                                  ; buffer = [n | n,m] {/e}
 30827                                  
 30828                                  ;buf_parms p_parms <buf_parmsx>
 30829                                  buf_parms: 
 30830 00001D46 [4B1D]                  	dw	buf_parmsx
 30831 00001D48 01                      	db	1	; an extra delimiter list
 30832 00001D49 01                      	db	1	; length is 1
 30833 00001D4A 3B                      	db	';'	; delimiter
 30834                                  
 30835                                  buf_parmsx:
 30836 00001D4B 0102[551D][691D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 30837 00001D51 01                      	db	1			; one switch
 30838 00001D52 [7D1D]                  	dw	sw_x_ctrl
 30839 00001D54 00                      	db	0			; no keywords
 30840                                  
 30841                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 30842                                  buf_pos1:
 30843 00001D55 0080                    	dw	8000h	; numeric value??
 30844 00001D57 0000                    	dw	0	; function
 30845 00001D59 [8F1D]                  	dw	result_val ; result value buffer	
 30846 00001D5B [5E1D]                  	dw	buf_range_1 ; value list
 30847 00001D5D 00                      	db	0  	; no switches/keywords
 30848                                  
 30849                                  ;buf_range_1 p_range <,,,1,99>		; M050
 30850                                  buf_range_1:
 30851 00001D5E 01                      	db	1	; range definition
 30852 00001D5F 01                      	db	1	; 1 definition of range
 30853 00001D60 01                      	db	1	; item tag for this range
 30854 00001D61 01000000                	dd	1	; numeric min
 30855 00001D65 63000000                	dd	99	; numeric max
 30856                                  
 30857                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 30858                                  buf_pos2:
 30859 00001D69 0180                    	dw	8001h
 30860 00001D6B 0000                    	dw	0
 30861 00001D6D [8F1D]                  	dw	result_val	
 30862 00001D6F [721D]                  	dw	buf_range_2
 30863 00001D71 00                      	db	0
 30864                                  
 30865                                  ;buf_range_2 p_range <,,,0,8>
 30866                                  buf_range_2:
 30867 00001D72 01                      	db	1
 30868 00001D73 01                      	db	1
 30869 00001D74 01                      	db	1
 30870 00001D75 00000000                	dd	0
 30871 00001D79 08000000                	dd	8
 30872                                  
 30873                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 30874                                  sw_x_ctrl:
 30875 00001D7D 0000                    	dw	0
 30876 00001D7F 0000                    	dw	0
 30877 00001D81 [8F1D]                  	dw	result_val	
 30878 00001D83 [8E1D]                  	dw	noval
 30879 00001D85 01                      	db	1	; 1 switch
 30880                                  	
 30881                                  switch_x:
 30882 00001D86 2F5800                  	db	'/X',0		; M016
 30883                                  
 30884                                  p_buffers:
 30885 00001D89 0000                    	dw	0	; local variables
 30886                                  p_h_buffers:
 30887 00001D8B 0000                    	dw	0
 30888                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30889                                  p_buffer_slash_x:
 30890 00001D8D 00                      	db	0 ; 31/03/2019
 30891                                  
 30892                                  ;-- common definitions -------------------------------------------------
 30893                                  
 30894 00001D8E 00                      noval:	db	0
 30895                                  
 30896                                  result_val: 	;label	byte
 30897 00001D8F 00                      	db	0		; type returned
 30898                                  result_val_itag:
 30899 00001D90 00                      	db	0		; item tag returned
 30900                                  result_val_swoff:
 30901 00001D91 0000                    	dw	0		; es:offset of the switch defined
 30902                                  rv_byte:	;label	byte
 30903 00001D93 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 30904                                  
 30905                                  ;-----------------------------------------------------------------------
 30906                                  
 30907                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30908                                  	; (SYSINIT:1F99h)
 30909                                  
 30910                                  ; break = [ on | off ]
 30911                                  
 30912                                  ;brk_parms p_parms  <brk_parmsx>
 30913                                  brk_parms:
 30914 00001D97 [9C1D]                  	dw	brk_parmsx
 30915 00001D99 01                      	db	1	; an extra delimiter list
 30916 00001D9A 01                      	db	1	; length is 1
 30917 00001D9B 3B                      	db	';'	; delimiter
 30918                                  
 30919                                  brk_parmsx:
 30920 00001D9C 0101[A21D]              	dw	101h,brk_pos	; min,max = 1 positional
 30921 00001DA0 00                      	db	0		; no switches
 30922 00001DA1 00                      	db	0		; no keywords
 30923                                  
 30924                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 30925                                  brk_pos:
 30926 00001DA2 0020                    	dw	2000h
 30927 00001DA4 0000                    	dw	0
 30928 00001DA6 [8F1D]                  	dw	result_val	
 30929 00001DA8 [AB1D]                  	dw	on_off_string
 30930 00001DAA 00                      	db	0
 30931                                  
 30932                                  on_off_string:	;label	byte
 30933 00001DAB 03                      	db	3		; signals that there is a string choice
 30934 00001DAC 00                      	db	0		; no range definition
 30935 00001DAD 00                      	db	0		; no numeric values choice
 30936 00001DAE 02                      	db	2		; 2 strings for choice
 30937 00001DAF 01                      	db	1		; the 1st string tag
 30938 00001DB0 [B51D]                  	dw	on_string
 30939 00001DB2 02                      	db	2		; the 2nd string tag
 30940 00001DB3 [B81D]                  	dw	off_string
 30941                                  
 30942                                  on_string:
 30943 00001DB5 4F4E00                  	db	"ON",0
 30944                                  off_string:
 30945 00001DB8 4F464600                	db	"OFF",0
 30946                                  
 30947                                  p_ctrl_break:
 30948 00001DBC 00                      	db	0	; local variable
 30949                                  
 30950                                  ;-----------------------------------------------------------------------
 30951                                  
 30952                                  	; 27/10/2022
 30953                                  
 30954                                  ; country = n {m {path}}
 30955                                  ; or
 30956                                  ; country = n,,path
 30957                                  
 30958                                  ;cntry_parms p_parms <cntry_parmsx>
 30959                                  cntry_parms:
 30960 00001DBD [C21D]                  	dw	cntry_parmsx
 30961 00001DBF 01                      	db	1
 30962 00001DC0 01                      	db	1
 30963 00001DC1 3B                      	db	';'
 30964                                  	
 30965                                  cntry_parmsx:
 30966 00001DC2 0103[CC1D][E01D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 30966 00001DC8 [E91D]             
 30967 00001DCA 00                      	db	0		; no switches
 30968 00001DCB 00                      	db	0		; no keywords
 30969                                  
 30970                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 30971                                  cntry_pos1:
 30972 00001DCC 0080                    	dw	8000h
 30973 00001DCE 0000                    	dw	0
 30974 00001DD0 [8F1D]                  	dw	result_val	
 30975 00001DD2 [D51D]                  	dw	cc_range
 30976 00001DD4 00                      	db	0
 30977                                  
 30978                                  ;cc_range p_range <,,,1,999>
 30979                                  cc_range:
 30980 00001DD5 01                      	db	1
 30981 00001DD6 01                      	db	1
 30982 00001DD7 01                      	db	1
 30983 00001DD8 01000000                	dd	1
 30984 00001DDC E7030000                	dd	999
 30985                                  
 30986                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 30987                                  cntry_pos2:
 30988 00001DE0 0180                    	dw	8001h
 30989 00001DE2 0000                    	dw	0
 30990 00001DE4 [8F1D]                  	dw	result_val	
 30991 00001DE6 [D51D]                  	dw	cc_range
 30992 00001DE8 00                      	db	0
 30993                                  
 30994                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 30995                                  cntry_pos3:
 30996 00001DE9 0102                    	dw	201h
 30997 00001DEB 0000                    	dw	0
 30998 00001DED [8F1D]                  	dw	result_val	
 30999 00001DEF [8E1D]                  	dw	noval
 31000 00001DF1 00                      	db	0	
 31001                                  
 31002                                  p_cntry_code:
 31003 00001DF2 0000                    	dw	0	; local variable
 31004                                  p_code_page:
 31005 00001DF4 0000                    	dw	0	; local variable
 31006                                  
 31007                                  ;-----------------------------------------------------------------------
 31008                                  
 31009                                  	; 27/10/2022
 31010                                  
 31011                                  ; files = n
 31012                                  
 31013                                  ;files_parms p_parms <files_parmsx>
 31014                                  files_parms:
 31015 00001DF6 [FB1D]                  	dw	files_parmsx
 31016 00001DF8 01                      	db	1
 31017 00001DF9 01                      	db	1
 31018 00001DFA 3B                      	db	';'
 31019                                  
 31020                                  files_parmsx:
 31021 00001DFB 0101[011E]              	dw	101h,files_pos	; min,max 1 positional
 31022 00001DFF 00                      	db	0		; no switches
 31023 00001E00 00                      	db	0		; no keywords
 31024                                  
 31025                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 31026                                  files_pos:
 31027 00001E01 0080                    	dw	8000h
 31028 00001E03 0000                    	dw	0
 31029 00001E05 [8F1D]                  	dw	result_val	
 31030 00001E07 [0A1E]                  	dw	files_range
 31031 00001E09 00                      	db	0
 31032                                  
 31033                                  ;files_range p_range <,,,8,255>
 31034                                  files_range:
 31035 00001E0A 01                      	db	1
 31036 00001E0B 01                      	db	1
 31037 00001E0C 01                      	db	1
 31038 00001E0D 08000000                	dd	8
 31039 00001E11 FF000000                	dd	255
 31040                                  
 31041                                  p_files:
 31042 00001E15 00                      	db	0		; local variable
 31043                                  
 31044                                  ;-----------------------------------------------------------------------
 31045                                  
 31046                                  	; 27/10/2022
 31047                                  
 31048                                  ; fcbs = n,m
 31049                                  
 31050                                  ;fcbs_parms p_parms <fcbs_parmsx>
 31051                                  fcbs_parms:
 31052 00001E16 [1B1E]                  	dw	fcbs_parmsx
 31053 00001E18 01                      	db	1
 31054 00001E19 01                      	db	1
 31055 00001E1A 3B                      	db	';'
 31056                                  
 31057                                  fcbs_parmsx:
 31058 00001E1B 0102[231E][371E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 31059 00001E21 00                      	db	0		; no switches
 31060 00001E22 00                      	db	0		; no keywords
 31061                                  
 31062                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 31063                                  fcbs_pos_1:
 31064 00001E23 0080                    	dw	8000h
 31065 00001E25 0000                    	dw	0
 31066 00001E27 [8F1D]                  	dw	result_val	
 31067 00001E29 [2C1E]                  	dw	fcbs_range
 31068 00001E2B 00                      	db	0
 31069                                  
 31070                                  ;fcbs_range p_range <,,,1,255>
 31071                                  fcbs_range:
 31072 00001E2C 01                      	db	1
 31073 00001E2D 01                      	db	1
 31074 00001E2E 01                      	db	1
 31075 00001E2F 01000000                	dd	1
 31076 00001E33 FF000000                	dd	255
 31077                                  
 31078                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 31079                                  fcbs_pos_2:
 31080 00001E37 0080                    	dw	8000h
 31081 00001E39 0000                    	dw	0
 31082 00001E3B [8F1D]                  	dw	result_val	
 31083 00001E3D [401E]                  	dw	fcbs_keep_range
 31084 00001E3F 00                      	db	0
 31085                                  
 31086                                  ;fcbs_keep_range p_range <,,,0,255>
 31087                                  fcbs_keep_range:
 31088 00001E40 01                      	db	1
 31089 00001E41 01                      	db	1
 31090 00001E42 01                      	db	1
 31091 00001E43 00000000                	dd	0
 31092 00001E47 FF000000                	dd	255
 31093                                  
 31094 00001E4B 00                      p_fcbs:	db	0		; local variable
 31095 00001E4C 00                      p_keep:	db	0		; local variable
 31096                                  
 31097                                  ;-----------------------------------------------------------------------
 31098                                  
 31099                                  	; 27/10/2022
 31100                                  
 31101                                  ; lastdrive = x
 31102                                  
 31103                                  ;ldrv_parms p_parms <ldrv_parmsx>
 31104                                  ldrv_parms:
 31105 00001E4D [521E]                  	dw	ldrv_parmsx
 31106 00001E4F 01                      	db	1
 31107 00001E50 01                      	db	1
 31108 00001E51 3B                      	db	';'
 31109                                  
 31110                                  ldrv_parmsx:
 31111 00001E52 0101[581E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 31112 00001E56 00                      	db	0		; no switches
 31113 00001E57 00                      	db	0		; no keywords
 31114                                  
 31115                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 31116                                  ldrv_pos:				    ; remove colon at end
 31117 00001E58 1001                    	dw	110h
 31118 00001E5A 1000                    	dw	10h
 31119 00001E5C [8F1D]                  	dw	result_val	
 31120 00001E5E [8E1D]                  	dw	noval
 31121 00001E60 00                      	db	0
 31122                                  	
 31123 00001E61 00                      p_ldrv:	db	0		; local variable
 31124                                  
 31125                                  ;-----------------------------------------------------------------------
 31126                                  
 31127                                  	; 27/10/2022
 31128                                  
 31129                                  ; stacks = n,m
 31130                                  
 31131                                  ;stks_parms p_parms <stks_parmsx>
 31132                                  stks_parms:
 31133 00001E62 [671E]                  	dw	stks_parmsx
 31134 00001E64 01                      	db	1
 31135 00001E65 01                      	db	1
 31136 00001E66 3B                      	db	';'
 31137                                  
 31138                                  stks_parmsx:
 31139 00001E67 0202[6F1E][831E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 31140 00001E6D 00                      	db	0		; no switches
 31141 00001E6E 00                      	db	0		; no keywords
 31142                                  
 31143                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 31144                                  stks_pos_1:
 31145 00001E6F 0080                    	dw	8000h
 31146 00001E71 0000                    	dw	0
 31147 00001E73 [8F1D]                  	dw	result_val	
 31148 00001E75 [781E]                  	dw	stks_range
 31149 00001E77 00                      	db	0
 31150                                  
 31151                                  ;stks_range p_range <,,,0,64>
 31152                                  stks_range:
 31153 00001E78 01                      	db	1
 31154 00001E79 01                      	db	1
 31155 00001E7A 01                      	db	1
 31156 00001E7B 00000000                	dd	0
 31157 00001E7F 40000000                	dd	64
 31158                                  
 31159                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 31160                                  stks_pos_2:
 31161 00001E83 0080                    	dw	8000h
 31162 00001E85 0000                    	dw	0
 31163 00001E87 [8F1D]                  	dw	result_val	
 31164 00001E89 [8C1E]                  	dw	stk_size_range
 31165 00001E8B 00                      	db	0
 31166                                  
 31167                                  ;stk_size_range p_range <,,,0,512>
 31168                                  stk_size_range:
 31169 00001E8C 01                      	db	1
 31170 00001E8D 01                      	db	1
 31171 00001E8E 01                      	db	1
 31172 00001E8F 00000000                	dd	0
 31173 00001E93 00020000                	dd	512	
 31174                                  
 31175                                  p_stack_count:
 31176 00001E97 0000                    	dw	0	; local variable
 31177                                  p_stack_size:
 31178 00001E99 0000                    	dw	0	; local variable
 31179                                  
 31180                                  ;-----------------------------------------------------------------------
 31181                                  
 31182                                  	; 27/10/2022
 31183                                  
 31184                                  ; multitrack = [ on | off ]
 31185                                  
 31186                                  ;mtrk_parms p_parms <mtrk_parmsx>
 31187                                  mtrk_parms:
 31188 00001E9B [A01E]                  	dw	mtrk_parmsx
 31189 00001E9D 01                      	db	1
 31190 00001E9E 01                      	db	1
 31191 00001E9F 3B                      	db	';'
 31192                                  
 31193                                  mtrk_parmsx:
 31194 00001EA0 0101[A61E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 31195 00001EA4 00                      	db	0		; no switches
 31196 00001EA5 00                      	db	0		; no keywords
 31197                                  
 31198                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31199                                  mtrk_pos:
 31200 00001EA6 0020                    	dw	2000h
 31201 00001EA8 0000                    	dw	0
 31202 00001EAA [8F1D]                  	dw	result_val	
 31203 00001EAC [AB1D]                  	dw	on_off_string
 31204 00001EAE 00                      	db	0
 31205                                  
 31206 00001EAF 00                      p_mtrk:	db	0		; local variable
 31207                                  
 31208                                  ;-----------------------------------------------------------------------
 31209                                  
 31210                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31211                                  	; (SYSINIT:20B2h)
 31212                                  
 31213                                  ; switches=/k
 31214                                  
 31215                                  ;swit_parms p_parms <swit_parmsx>
 31216                                  swit_parms:
 31217 00001EB0 [B51E]                  	dw	swit_parmsx
 31218 00001EB2 01                      	db	1
 31219 00001EB3 01                      	db	1
 31220 00001EB4 3B                      	db	';'
 31221                                  
 31222                                  swit_parmsx:
 31223 00001EB5 0000                    	dw	0		; no positionals
 31224                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 31225                                  	;db	5               ; # of switches
 31226                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31227 00001EB7 06                      	db	6
 31228                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31229                                  	;db	3
 31230 00001EB8 [C51E]                  	dw	swit_k_ctrl	; /k control
 31231                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 31232 00001EBA [D11E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 31233 00001EBC [DD1E]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 31234 00001EBE [E91E]                  	dw	swit_t_ctrl     ; /t control
 31235 00001EC0 [F51E]                  	dw	swit_w_ctrl     ; /w control
 31236                                  	; 14/04/2024 - Retro DOS v5.0 ; **
 31237 00001EC2 [011F]                  	dw	swit_i_ctrl	; /i control
 31238 00001EC4 00                      	db	0		; no keywords
 31239                                  
 31240                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31241                                  swit_k_ctrl:
 31242 00001EC5 00000000[8F1D]-         	dw	0,0,result_val,noval
 31242 00001ECB [8E1D]             
 31243 00001ECD 01                      	db	1
 31244 00001ECE 2F4B00                  swit_k:	db	'/K',0
 31245                                  
 31246                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 31247                                  ; (SYSINIT:220Ch) ; *
 31248                                  
 31249                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31250                                  ;
 31251                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31252                                  swit_n_ctrl: ; *
 31253 00001ED1 00000000[8F1D]-         	dw	0,0,result_val,noval
 31253 00001ED7 [8E1D]             
 31254 00001ED9 01                      	db	1
 31255 00001EDA 2F4E00                  swit_n: db	'/N',0
 31256                                  
 31257                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31258                                  swit_f_ctrl: ; *
 31259 00001EDD 00000000[8F1D]-         	dw	0,0,result_val,noval
 31259 00001EE3 [8E1D]             
 31260 00001EE5 01                      	db	1
 31261 00001EE6 2F4600                  swit_f: db 	'/F',0
 31262                                  
 31263                                  	; 27/10/2022
 31264                                  
 31265                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 31266                                  swit_t_ctrl:
 31267 00001EE9 00000000[8F1D]-         	dw	0,0,result_val,noval
 31267 00001EEF [8E1D]             
 31268 00001EF1 01                      	db	1
 31269 00001EF2 2F5400                  swit_t:	db	'/T',0			   ;				M059
 31270                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 31271                                  swit_w_ctrl:
 31272 00001EF5 00000000[8F1D]-         	dw	0,0,result_val,noval
 31272 00001EFB [8E1D]             
 31273 00001EFD 01                      	db	1
 31274 00001EFE 2F5700                  swit_w:	db	'/W',0			   ;				M063
 31275                                  
 31276                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31277                                  ;;;
 31278                                  ;swit_i_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31279                                  swit_i_ctrl:
 31280 00001F01 0000                    	dw	0
 31281 00001F03 0000                    	dw	0
 31282 00001F05 [8F1D]                  	dw	result_val
 31283 00001F07 [8E1D]                  	dw	noval
 31284 00001F09 01                      	db	1
 31285 00001F0A 2F4900                  swit_i:	db	'/I',0
 31286                                  ;;;
 31287                                  
 31288                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 31289                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 31290                                  ;   in the above table to prevent the parsing code from complaining about them
 31291                                  
 31292 00001F0D 00                      p_swit_k:	db     0	; local variable
 31293 00001F0E 00                      p_swit_t:	db     0	; local variable			M059
 31294 00001F0F 00                      p_swit_w:	db     0	; local variable			M063
 31295                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31296 00001F10 00                      p_swit_i:	db     0
 31297                                  
 31298                                  ;-----------------------------------------------------------------------
 31299                                  
 31300                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31301                                  	; (SYSINIT:20E8h)
 31302                                  
 31303                                  ; DOS = [ high | low ]
 31304                                  
 31305                                  ;dos_parms p_parms  <dos_parmsx>
 31306                                  dos_parms:
 31307 00001F11 [161F]                  	dw	dos_parmsx
 31308 00001F13 01                      	db	1
 31309 00001F14 01                      	db	1
 31310 00001F15 3B                      	db	';'
 31311                                  dos_parmsx:
 31312 00001F16 01                      	db	1		; min parameters
 31313 00001F17 02                      	db	2		; max parameters
 31314 00001F18 [1E1F]                  	dw	dos_pos		; 
 31315 00001F1A [1E1F]                  	dw	dos_pos		; 
 31316 00001F1C 00                      	db	0		; no switches
 31317 00001F1D 00                      	db	0		; no keywords
 31318                                  
 31319                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31320                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31321                                  dos_pos:
 31322 00001F1E 00200000[8F1D]-         	dw	2000h,0,result_val,dos_strings
 31322 00001F24 [301F]             
 31323 00001F26 00                      	db	0
 31324 00001F27 00200000[8F1D]-         	dw	2000h,0,result_val,dos_strings
 31324 00001F2D [301F]             
 31325 00001F2F 00                      	db	0	
 31326                                  
 31327                                  dos_strings:	;label	byte
 31328 00001F30 03                      	db	3		; signals that there is a string choice
 31329 00001F31 00                      	db	0		; no range definition
 31330 00001F32 00                      	db	0		; no numeric values choice
 31331 00001F33 04                      	db	4		; 4 strings for choice
 31332 00001F34 01                      	db	1		; the 1st string tag
 31333 00001F35 [401F]                  	dw	hi_string
 31334 00001F37 02                      	db	2		; the 2nd string tag
 31335 00001F38 [451F]                  	dw	lo_string
 31336 00001F3A 03                      	db	3
 31337 00001F3B [491F]                  	dw	umb_string
 31338 00001F3D 04                      	db	4
 31339 00001F3E [4D1F]                  	dw	noumb_string
 31340                                  
 31341                                  ; 18/03/2025 - MiniDOS 1.0
 31342                                  %if 0
 31343                                  
 31344                                  ; 14/04/2024 - Retro DOS v5.0
 31345                                  ; (PCDOS 7.1 IBMDOS.COM - SYSINIT:273Eh)
 31346                                  ;;;
 31347                                  dosdata_parms:
 31348                                  	dw	dosdata_parmsx	; DOSDATA = UMB|NOUMB
 31349                                  	db	1
 31350                                  	db	1
 31351                                  	db	';'
 31352                                  dosdata_parmsx:
 31353                                  	db	1
 31354                                  	db	1		; min,max = 1 positional
 31355                                  	dw	dosdata_pos
 31356                                  	db	0		; no switches
 31357                                  	db	0		; no keywords
 31358                                  
 31359                                  	; dosdata_pos p_pos <2000h,0,result_val,dosdata_strings>
 31360                                  dosdata_pos:
 31361                                  	dw	2000h		; simple string
 31362                                  	dw	0
 31363                                  	dw	result_val
 31364                                  	dw	dosdata_strings
 31365                                  	db	0
 31366                                  dosdata_strings:
 31367                                  	db	3		; signals that there is a string choice
 31368                                  	db	0		; no range definition
 31369                                  	db	0		; no numeric values choice
 31370                                  	db	2		; 2 strings for choice
 31371                                  	db	1		; the 1st string tag
 31372                                  	dw	umb_string	; "UMB"
 31373                                  	db	2		; the 2nd string tag
 31374                                  	dw	noumb_string	; "NOUMB"
 31375                                  ;;;
 31376                                  %endif
 31377                                  
 31378 00001F40 4849474800              hi_string:	db	"HIGH",0
 31379 00001F45 4C4F5700                lo_string:	db	"LOW",0
 31380 00001F49 554D4200                umb_string:	db	"UMB",0
 31381 00001F4D 4E4F554D4200            noumb_string:	db	"NOUMB",0
 31382                                  
 31383                                  p_dos_hi:
 31384 00001F53 00                      	db	0	; local variable
 31385                                  			; BUGBUG : I dont know whether PARSER uses
 31386                                  			;          this variable or not
 31387                                  	; 14/04/2024 (PCDOS 7.1 IBMBIO.COM)
 31388 00001F54 00                      	db	0
 31389                                  
 31390                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31391                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31392                                  ;%if 0
 31393                                  
 31394                                  ;****************************************************************** RICHID ****
 31395                                  
 31396                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 31397                                  
 31398                                  ; 30/03/2019 - Retro DOS v4.0
 31399                                  ;------------------------------------------------------------------------------
 31400                                  
 31401                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 31402                                  ;
 31403                                  ;   Date:     May 14, 1992
 31404                                  ;
 31405                                  ;******************************************************************************
 31406                                  ;
 31407                                  ;   Modification log:
 31408                                  ;
 31409                                  ;     DATE    WHO      DESCRIPTION
 31410                                  ;   --------  -------  --------------------------------------------------------
 31411                                  ;   05/14/92  t-richj  Original
 31412                                  ;   06/21/92  t-richj  Final revisions before check-in
 31413                                  ;
 31414                                  ;******************************************************************************
 31415                                  ;
 31416                                  ; There are two primary definitions which need to be made, selectively, before
 31417                                  ; this include file should be used.  These are:
 31418                                  ;    HV_Extern - If this has been defined, variables for this module will be
 31419                                  ;                declared as external.  Otherwise, variables will be declared
 31420                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 31421                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 31422                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 31423                                  ;                (as only one module, sysconf.asm, includes this file).
 31424                                  ;    HV_LoadHigh - This should be defined when this module is going into
 31425                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 31426                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 31427                                  ;
 31428                                  ;******************************************************************************
 31429                                  
 31430                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 31431                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 31432                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 31433                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 31434                                  ; space problem (it's just such a nice round number, eh?).
 31435                                  
 31436                                  MAXUMB	equ	16
 31437                                  
 31438                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 31439                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 31440                                  
 31441                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 31442                                  SystemPSPOwner	equ	8
 31443                                  ;JapanPSPOwner	equ	9
 31444                                  
 31445                                  ; for LoadHigh and DeviceHigh:
 31446                                  ;
 31447                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 31448                                  ;	          UnHideUMBs().
 31449                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 31450                                  ;	           line.
 31451                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 31452                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 31453                                  ;	          given a command-line like "/L:3,500;4"
 31454                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 31455                                  ;	          matching its index number was specified on the command-line;
 31456                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 31457                                  ;	          will be set to 1.  All others will be set to 0.
 31458                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 31459                                  ;	          specified by the user for a UMB (in the above example, all
 31460                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 31461                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 31462                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 31463                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 31464                                  ;	           for details).
 31465                                  
 31466 00001F55 00                      fInHigh:  db	0
 31467 00001F56 00                      fUmbTiny: db	0
 31468 00001F57 0000                    SegLoad:  dw	0
 31469 00001F59 00                      UmbLoad:  db	0
 31470 00001F5A 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 31471 00001F6A 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 31472 00001F8A 00                      fm_umb:   db	0
 31473 00001F8B 00                      fm_strat: db	0
 31474 00001F8C 00                      fm_argc:  db	0	
 31475                                  
 31476                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 31477                                  ; UmbLoad is set to the UMB number given.
 31478                                  
 31479                                  UNSPECIFIED	equ	-1
 31480                                  
 31481                                  ;%endif ; 27/10/2022
 31482                                  
 31483                                  ;****************************************************************** RICHID ****
 31484                                  
 31485                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 31486                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 31487                                  
 31488                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31489                                  ; (SYSINIT:212Bh)	
 31490                                  
 31491                                  		;public	DevEntry
 31492                                  
 31493 00001F8D 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 31494 00001F8F 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 31495 00001F91 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 31496 00001F93 00000000                DevEntry:	dd	0	; Entry point to the device driver
 31497 00001F97 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 31498                                  ; 30/12/2022
 31499                                  ; 27/10/2022 
 31500 00001F9B 00                      ConvLoad:	db	0	; Use conventional (dos5-style) InitDevLoad?
 31501                                  ;
 31502 00001F9C 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 31503 00001F9D 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 31504 00001F9F 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 31505 00001FA1 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 31506                                  ;
 31507 00001FA3 00000000                DevXMSAddr:	dd	0
 31508                                  ;
 31509 00001FA7 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 31510 00001FA9 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 31511                                  ;
 31512 00001FAB 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 31513                                  				;  is being loaded into UMB
 31514 00001FAC 0000                    DevSizeOption:	dw	0	; SIZE= option
 31515                                  ;
 31516 00001FAE 00                      Int12Lied:	db	0	; did we trap int 12 ?
 31517 00001FAF 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 31518 00001FB1 50524F544D414E24        ThreeComName:	db	'PROTMAN$' ; 3Com Device name
 31519                                  ;
 31520 00001FB9 00                      FirstUMBLinked:	db	0
 31521 00001FBA 0000                    DevDOSData:	dw	0	; segment of DOS Data
 31522 00001FBC 00000000                DevCmdLine:	dd	0	; Current Command line
 31523 00001FC0 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 31524                                  				; to use the file name in the command line
 31525                                  ; 13/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31526                                  ;	ifdef	dblspace_hooks
 31527 00001FC1 00                      MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 31528                                  ;	endif
 31529                                  
 31530                                  ; ===========================================================================
 31531                                  
 31532                                  ; 31/03/2019 - Retro DOS v4.0
 31533                                  
 31534                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31535                                  ; (SYSINIT:215Eh)
 31536                                  
 31537                                  ;----------------------------------------------------------------------------
 31538                                  ;
 31539                                  ; procedure : doconf
 31540                                  ;
 31541                                  ;             Config file is parsed initially with this routine. For the
 31542                                  ;             Subsequent passes 'multi_pass' entry is used .
 31543                                  ;
 31544                                  ;----------------------------------------------------------------------------
 31545                                  
 31546                                  	; 27/10/2022
 31547                                  doconf:
 31548 00001FC2 0E                      	push	cs
 31549 00001FC3 1F                      	pop	ds
 31550                                  
 31551 00001FC4 B80037                  	mov	ax,3700h
 31552                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 31553 00001FC7 CD21                    	int	21h
 31554 00001FC9 8816[8B46]              	mov	[command_line+1],dl	; set in default command line
 31555                                  
 31556                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 31557                                  ; 27/10/2022
 31558                                  ;;ifdef	MULTI_CONFIG
 31559                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 31560 00001FCD 8816[8946]              	mov	[def_swchr],dl ; 31/03/2019 
 31561                                  ;;endif	;MULTI_CONFIG
 31562                                  
 31563 00001FD1 BA[A045]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 31564 00001FD4 B8003D                  	mov	ax,3D00h
 31565                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 31566 00001FD7 F9                      	stc				;in case of int 24
 31567 00001FD8 CD21                    	int	21h			;function request
 31568 00001FDA 7309                    	jnc	short noprob		; brif opened okay
 31569                                  
 31570                                  ; 31/12/2022
 31571                                  ; 27/10/2022
 31572                                  ;;ifdef	MULTI_CONFIG
 31573 00001FDC E81519                  	call	kbd_read		; we still want to give the guy
 31574                                  ;					; a chance to select clean boot!
 31575                                  ;;endif					; (ie, no autoexec.bat processing)
 31576 00001FDF C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 31577 00001FE4 C3                      	retn
 31578                                  noprob: 				;get file size (note < 64k!!)
 31579 00001FE5 89C3                    	mov	bx,ax  ; File handle
 31580 00001FE7 31C9                    	xor	cx,cx			; 0
 31581 00001FE9 31D2                    	xor	dx,dx			; 0
 31582                                  	;mov	ax,4202h
 31583 00001FEB B80242                  	mov	ax,(LSEEK<<8)|2
 31584 00001FEE CD21                    	int	21h
 31585 00001FF0 A3[5403]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 31586                                  					; 08/09/2023 - Erdogan Tan - Note:
 31587 00001FF3 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 31588                                  					; I am not removing 'xor dx,dx' here
 31589                                  					; for MSDOS compatibility.
 31590                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 31591                                  					; (Error will be same if CONGIG.SYS file
 31592                                  					;  size > 64KB) 
 31593                                  	;mov	ax,4200h
 31594 00001FF5 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 31595 00001FF8 CD21                    	int	21h
 31596                                  
 31597                                  	; 31/12/2022 - Retro DOS v4.2 
 31598 00001FFA 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 31599                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31600                                  	;mov	dx,[top_of_cdss] 
 31601                                  
 31602 00001FFE A1[5403]                	mov	ax,[count]
 31603 00002001 A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 31604 00002004 E865F1                  	call	ParaRound
 31605 00002007 29C2                    	sub	dx,ax
 31606                                  
 31607                                  ; 31/12/2022
 31608                                  ; 27/10/2022
 31609                                  ;ifdef	MULTI_CONFIG
 31610                                  ;
 31611                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 31612                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 31613                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 31614                                  ;  we (may) add a variable to the environment that does not explicity appear
 31615                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 31616                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 31617                                  ;  of extra space, so here we account for it (the worst case of course is
 31618                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 31619                                  ;
 31620 00002009 4A                      	dec	dx                      ;reserve 1 additional paragraph
 31621 0000200A 8916[DA14]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 31622 0000200E 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 31623                                  ;;endif	;MULTI_CONFIG
 31624                                  
 31625 00002010 83EA11                  	sub	dx,11h			;room for header
 31626                                  	
 31627                                  	; 31/12/2022
 31628 00002013 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 31629 00002017 8916[A102]              	mov	[CONFBOT],dx
 31630                                  	
 31631                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31632                                  	;mov	[top_of_cdss],dx
 31633                                  	;call    TempCDS 
 31634                                  	; 31/12/2022
 31635                                  	; 11/12/2022
 31636                                  	; ds <> cs 
 31637                                  	;mov	dx,[cs:top_of_cdss]
 31638                                  
 31639                                  	; 08/09/2023
 31640                                  	; ds = cs
 31641 0000201B 8B0E[5403]              	mov	cx,[count]
 31642                                  	
 31643 0000201F 8EDA                    	mov	ds,dx
 31644 00002021 8EC2                    	mov	es,dx
 31645                                  
 31646 00002023 31D2                    	xor	dx,dx
 31647                                  	; 08/09/2023
 31648                                  	;mov	cx,[cs:count]
 31649 00002025 B43F                    	mov	ah,3Fh
 31650                                  	;mov	ah,READ  ; 3Fh
 31651 00002027 F9                      	stc				;in case of int 24
 31652 00002028 CD21                    	int	21h			;function request
 31653 0000202A 9C                      	pushf
 31654                                  
 31655                                  ; find the eof mark in the file. if present,then trim length.
 31656                                  
 31657 0000202B 50                      	push	ax
 31658 0000202C 57                      	push	di
 31659 0000202D 51                      	push	cx
 31660 0000202E B01A                    	mov	al,1Ah			; eof mark
 31661 00002030 89D7                    	mov	di,dx			; point to buffer
 31662 00002032 E305                    	jcxz	puteol			; no chars
 31663 00002034 F2AE                    	repnz	scasb			; find end
 31664 00002036 7501                    	jnz	short puteol		; none found and count exhausted
 31665                                  
 31666                                  ; we found a 1a. back up
 31667                                  
 31668 00002038 4F                      	dec	di			; backup past 1Ah
 31669                                  
 31670                                  ;  just for the halibut, stick in an extra eol
 31671                                  
 31672                                  puteol:
 31673 00002039 B00D                    	mov	al,cr ; 0Dh
 31674 0000203B AA                      	stosb
 31675 0000203C B00A                    	mov	al,lf  ;0Ah
 31676 0000203E AA                      	stosb
 31677 0000203F 29D7                    	sub	di,dx			; difference moved
 31678                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31679                                  	;mov	[cs:count],di		; new count
 31680                                  
 31681                                  	; 11/12/2022	
 31682                                  	; 31/03/2019 - Retro DOS v4.0
 31683 00002041 0E                      	push	cs
 31684 00002042 1F                      	pop	ds
 31685                                  
 31686 00002043 893E[5403]              	mov	[count],di		; new count
 31687                                  
 31688 00002047 59                      	pop	cx
 31689 00002048 5F                      	pop	di
 31690 00002049 58                      	pop	ax
 31691                                  
 31692                                  	; 11/12/2022
 31693                                  	; 27/10/2022
 31694                                  	;push	cs
 31695                                  	;pop	ds
 31696                                  
 31697 0000204A 50                      	push	ax
 31698                                  	;mov	ah,CLOSE
 31699 0000204B B43E                    	mov	ah,3Eh
 31700 0000204D CD21                    	int	21h
 31701 0000204F 58                      	pop	ax
 31702 00002050 9D                      	popf
 31703 00002051 7204                    	jc	short conferr 		;if not we've got a problem
 31704 00002053 39C1                    	cmp	cx,ax
 31705 00002055 742C                    	jz	short getcom		;couldn't read the file
 31706                                  conferr:
 31707 00002057 BA[A045]                	mov	dx,config		;want to print config error
 31708 0000205A E89A24                  	call	badfil
 31709                                  	; 14/04/2024
 31710                                  endconv:	; 01/01/2023
 31711 0000205D C3                      	retn
 31712                                  
 31713                                  ;----------------------------------------------------------------------------
 31714                                  ;
 31715                                  ; entry : multi_pass
 31716                                  ;
 31717                                  ;             called to execute device=,install= commands
 31718                                  ;
 31719                                  ;----------------------------------------------------------------------------
 31720                                  
 31721                                  	; 27/10/2022
 31722                                  multi_pass:
 31723 0000205E 0E                      	push	cs
 31724 0000205F 1F                      	pop	ds
 31725                                  
 31726 00002060 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 31727                                  ;jae_endconv:
 31728 00002065 73F6                    	jae	short endconv 		; do nothing. just return.
 31729                                  
 31730                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31731 00002067 FF36[A102]              	push	word [CONFBOT]
 31732                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31733                                  	;push	word [top_of_cdss]
 31734 0000206B 07                      	pop	es			; es -> confbot
 31735                                  
 31736 0000206C 8B36[5603]              	mov	si,[org_count]
 31737 00002070 8936[5403]              	mov	[count],si		; set count
 31738 00002074 31F6                    	xor	si,si ; 0
 31739 00002076 8936[5803]                      mov     [chrptr],si		; reset chrptr
 31740 0000207A 8936[AD02]                      mov     [linecount],si		; reset linecount
 31741                                  
 31742 0000207E E8FD21                  	call	getchr
 31743 00002081 EB06                    	jmp	short conflp
 31744                                  
 31745                                  	; 14/04/2024
 31746                                  	; 01/01/2023
 31747                                  ;endconv:
 31748                                  	;retn	
 31749                                  
 31750                                  getcom:
 31751                                  	; 03/01/2023
 31752                                  	; ds = cs
 31753 00002083 E83516                          call    organize                ; organize the file
 31754 00002086 E8F521                  	call	getchr
 31755                                  conflp: 
 31756 00002089 72D2                    	jc	short endconv
 31757                                  
 31758 0000208B FF06[AD02]                      inc     word [linecount]	; increase linecount
 31759                                  
 31760                                  	; 08/09/2023
 31761 0000208F 30E4                    	xor	ah,ah ; 0
 31762                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 31763                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 31764 00002091 8826[DE14]              	mov	[multdeviceflag],ah ; 0
 31765 00002095 8826[E114]              	mov	[setdevmarkflag],ah ; 0
 31766                                  
 31767 00002099 3C0A                    	cmp	al,lf			; linefeed?
 31768 0000209B 7448                    	je	short blank_line	;  then ignore this line.
 31769                                  
 31770                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31771                                  ; (SYSINIT:23CCh)
 31772                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31773                                  ;%if 0
 31774                                  
 31775                                  ;ifdef	MULTI_CONFIG
 31776                                  
 31777                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 31778                                  ;   number immediately following it....
 31779                                  
 31780 0000209D A2[DC14]                        mov     [config_cmd],al         ; save original command code
 31781                                  	;and	al,NOT CONFIG_OPTION_QUERY
 31782 000020A0 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 31783                                  
 31784                                  	; 08/09/2023
 31785 000020A2 3826[DD14]              	cmp	[config_multi],ah ; 0
 31786                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 31787 000020A6 7427                            je      short not_final		; no, line number is not embedded
 31788                                  
 31789 000020A8 50                              push    ax                      ;
 31790 000020A9 E8D221                          call    getchr                  ; ignore end-of-image errors,
 31791 000020AC 88C4                            mov     ah,al                   ; because if there's an error
 31792 000020AE E8CD21                          call    getchr                  ; fetching the line number that's
 31793 000020B1 86E0                            xchg    al,ah                   ; supposed to be there, the next
 31794 000020B3 A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 31795 000020B6 58                              pop     ax
 31796                                  ;
 31797                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 31798                                  ;   which to obtain its original program name, it grovels through all of
 31799                                  ;   memory to find the filename that was used to exec it; it wants to find
 31800                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 31801                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 31802                                  ;   immediately before the filename, but since we are now storing line # info
 31803                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 31804                                  ;   spot.
 31805                                  ;
 31806                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 31807                                  ;   over the line number info, since we no longer need that info anyway. This
 31808                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 31809                                  ;   retrieved.
 31810                                  ;
 31811 000020B7 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 31812 000020BC 7211                            jb	short not_final		; no
 31813                                          ;test	word [install_flag],have_install_cmd
 31814 000020BE F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 31815 000020C3 7407                            jz	short final		; no install cmds, so yes it is
 31816 000020C5 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 31817 000020CA 7203                            jb	short not_final		; no
 31818                                  final:                                  ;
 31819 000020CC 268804                  	mov	[es:si],al		; save backward-compatible command code
 31820                                  not_final:                              ;
 31821                                  ;endif
 31822                                  
 31823                                  ; 31/12/2022
 31824                                  ;%endif ; 27/10/2022
 31825                                  
 31826 000020CF 88C4                    	mov	ah,al
 31827 000020D1 E8AA21                  	call	getchr
 31828 000020D4 7314                    	jnc	short tryi
 31829                                  
 31830 000020D6 803E[CB02]02            	cmp	byte [multi_pass_id],2
 31831                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 31832                                  	; 27/10/2022
 31833 000020DB 7380                    	jnb	short endconv	
 31834 000020DD E97508                  	jmp	badop
 31835                                  	
 31836                                  coff:	
 31837                                  	; 11/12/2022
 31838                                  	; ds = cs
 31839                                  	;push	cs
 31840                                  	;pop	ds
 31841 000020E0 E89221                  	call	newline
 31842 000020E3 EBA4                    	jmp	short conflp	; 13/05/2019
 31843                                  
 31844                                  blank_line:
 31845 000020E5 E89621                  	call	getchr
 31846 000020E8 EB9F                    	jmp	short conflp
 31847                                  
 31848                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31849                                  ; 11/12/2022
 31850                                  ; (there is not a jump or call to here from anywhere!)
 31851                                  ;coff_p:
 31852                                  	;push	cs
 31853                                  	;pop	ds
 31854                                  
 31855                                  ;to handle install= commands,we are going to use multi-pass.
 31856                                  ;the first pass handles the other commands and only set install_flag when
 31857                                  ;it finds any install command. the second pass will only handle the
 31858                                  ;install= command.
 31859                                  
 31860                                  ;------------------------------------------------------------------------------
 31861                                  ;install command
 31862                                  ;------------------------------------------------------------------------------
 31863                                  
 31864                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31865                                  	; (SYSINIT:2250h)
 31866                                  tryi:
 31867 000020EA 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 31868 000020EF 7503                    	jne	short not_init_pass
 31869 000020F1 E97F01                  	jmp	multi_try_doshi
 31870                                  not_init_pass:
 31871 000020F4 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 31872                                          ; 11/12/2022
 31873                                  	;je	short multi_pass_coff2	; now it is NOPs
 31874 000020F9 74E5                    	je	short coff
 31875                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31876                                  	;je	short multi_pass_coff	
 31877                                  					; This pass can be made use of if
 31878                                  					; we want do some config.sys process
 31879                                  					; after device drivers are loaded
 31880                                  					; and before install= commands
 31881                                  					; are processed
 31882                                  
 31883 000020FB 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 31884 00002100 741D                    	je	short multi_try_i
 31885 00002102 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 31886                                  	; 11/12/2022
 31887                                  	;je	short multi_pass_coff2
 31888 00002105 74D9                    	je	short coff
 31889                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31890                                  	;je	short multi_pass_coff	
 31891                                  
 31892                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 31893                                  ;       but don't process them now.        
 31894                                          
 31895 00002107 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 31896                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31897 0000210A 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 31898                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31899                                  	;jne	short tryb	
 31900                                  	
 31901                                  	;or	word [install_flag],have_install_cmd ; set the flag
 31902 0000210C 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 31903                                  multi_pass_coff2:
 31904 00002111 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 31905                                  
 31906                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31907                                  ; (SYSINIT:2448h)
 31908                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31909                                  ;%if 0
 31910                                  precheck_installhigh:
 31911 00002113 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 31912 00002116 756B                    	jne     short tryb		; carry on with normal processing
 31913                                  	;or	word [install_flag],have_install_cmd
 31914 00002118 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 31915 0000211D EBC1                    	jmp	short coff
 31916                                  ;%endif ; 27/10/2022
 31917                                  
 31918                                  multi_try_i:
 31919 0000211F 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 31920                                  	; 31/12/2022 - Retro DOS v4.2
 31921 00002122 750A                    	jne	short multi_try_n	; no, check for installhigh
 31922                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31923                                  	;jne	short multi_pass_filter
 31924                                  
 31925                                  ; 31/12/2022
 31926                                  ;%if 1 
 31927                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31928                                  ;%if 0
 31929                                  ;ifdef	MULTI_CONFIG
 31930 00002124 E8C41F                  	call	query_user              ; query the user if config_cmd
 31931 00002127 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31932                                  ;endif
 31933                                  ;%endif ; 27/10/2022
 31934                                  
 31935 00002129 E8C4EF                  	call	do_install_exec 	;install it.
 31936 0000212C EBB2                    	jmp	short coff		;to handle next install= command.
 31937                                  
 31938                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31939                                  ; (SYSINIT:2463h)
 31940                                  ;%if 1
 31941                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31942                                  ;%if 0
 31943                                  
 31944                                  multi_try_n:
 31945 0000212E 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 31946 00002131 7537                            jne	short multi_pass_filter	; no. ignore this.
 31947                                  ;ifdef	MULTI_CONFIG
 31948 00002133 E8B51F                          call    query_user              ; query the user if config_cmd
 31949 00002136 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31950                                  ;endif
 31951                                  
 31952                                  ;       The memory environment is in its normal DOS state, so do
 31953                                  ;       the standard calls to set the alloc strategy for loading high
 31954                                  
 31955 00002138 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 31956 0000213B CD21                    	int	21h			;get alloc strategy
 31957 0000213D 89C3                    	mov	bx,ax
 31958 0000213F 53                              push    bx                      ; save for the return
 31959                                  
 31960 00002140 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 31961 00002144 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 31962 00002147 CD21                    	int	21h			;set alloc strategy
 31963                                  
 31964 00002149 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 31965 0000214C CD21                            int     21h                     ; get link state
 31966 0000214E 30E4                            xor     ah,ah                   ; clear top byte
 31967 00002150 50                              push    ax                      ; save for return
 31968                                  
 31969 00002151 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 31970 00002154 BB0100                  	mov	bx,1
 31971 00002157 CD21                    	int	21h			;link in UMBs
 31972                                  
 31973 00002159 E894EF                  	call	do_install_exec 	;install it.
 31974                                  
 31975 0000215C B80358                          mov     ax,(ALLOCOPER<<8)|3
 31976 0000215F 5B                              pop     bx                      ; recover original link state
 31977 00002160 CD21                            int     21h
 31978 00002162 5B                              pop     bx                      ; recover original alloc strategy
 31979 00002163 B80158                          mov     ax,(ALLOCOPER<<8)|1
 31980 00002166 CD21                            int     21h
 31981                                  
 31982                                  	;jmp	short coff		;to handle next install= command.
 31983                                  	; 01/01/2023
 31984 00002168 EBA7                    	jmp	short multi_pass_coff2
 31985                                  
 31986                                  ;%endif ; 27/10/2022
 31987                                  
 31988                                  multi_pass_filter:
 31989 0000216A 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 31990 0000216D 740A                    	je	short multi_pass_adjust
 31991 0000216F 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 31992 00002172 7405                    	je	short multi_pass_adjust
 31993 00002174 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 31994 00002177 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 31995                                  
 31996                                  multi_pass_adjust:			; these commands need to
 31997 00002179 FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 31998 0000217D FF06[5403]              	inc	word [count]		;  for newline proc.
 31999                                  
 32000                                  multi_pass_coff:
 32001                                  	; 11/12/2022
 32002                                  	;jmp	short coff		; to handle next install= commands.
 32003                                  	; 01/01/2023
 32004 00002181 EB8E                    	jmp	short multi_pass_coff2
 32005                                  
 32006                                  ;------------------------------------------------------------------------------
 32007                                  ; buffer command
 32008                                  ;------------------------------------------------------------------------------
 32009                                  
 32010                                  ;******************************************************************************
 32011                                  ;									      *
 32012                                  ; function: parse the parameters of buffers= command.			      *
 32013                                  ;									      *
 32014                                  ; input :								      *
 32015                                  ;	es:si -> parameters in command line.				      *
 32016                                  ; output:								      *
 32017                                  ;	buffers set							      *
 32018                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 32019                                  ;	h_buffers set if secondary buffer cache specified.		      *
 32020                                  ;									      *
 32021                                  ; subroutines to be called:						      *
 32022                                  ;	sysinit_parse							      *
 32023                                  ; logic:								      *
 32024                                  ; {									      *
 32025                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 32026                                  ;	set dx,cx to 0; 						      *
 32027                                  ;	reset buffer_slash_x;						      *
 32028                                  ;	while (end of command line)					      *
 32029                                  ;	{ sysinit_parse;						      *
 32030                                  ;	  if (no error) then						      *
 32031                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 32032                                  ;		    buffer_slash_x = 1					      *
 32033                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 32034                                  ;			  buffers = result_val._$P_picked_val;		      *
 32035                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 32036                                  ;	  else	{show error message;error exit} 			      *
 32037                                  ;	};								      *
 32038                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 32039                                  ; };									      *
 32040                                  ;									      *
 32041                                  ;******************************************************************************
 32042                                  
 32043                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32044                                  	; (SYSINIT:229Ch)
 32045                                  tryb:
 32046 00002183 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 32047 00002186 755C                    	jne	short tryc
 32048                                  
 32049                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32050                                  ; (SYSINIT:24BFh)
 32051                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32052                                  ;%if 0
 32053                                  ;ifdef	MULTI_CONFIG
 32054 00002188 E8601F                  	call	query_user		; query the user if config_cmd
 32055 0000218B 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 32056                                  ;endif
 32057                                  ;%endif ; 27/10/2022
 32058                                  
 32059                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32060                                  	; 18/12/2022
 32061 0000218D 31C9                    	xor	cx,cx
 32062                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 32063 0000218F 880E[8D1D]              	mov	[p_buffer_slash_x],cl ; 0
 32064                                  
 32065 00002193 BF[461D]                	mov	di,buf_parms
 32066                                  	;xor	cx,cx	; 18/12/2022
 32067                                  	; 03/01/2023
 32068                                  	;mov	dx,cx
 32069                                  do7:
 32070 00002196 E89D07                  	call	sysinit_parse
 32071 00002199 7303                    	jnc	short if7		; parse error,
 32072                                  	;call	badparm_p		;  and show messages and end the search loop.
 32073                                  	;;jmp	short sr7
 32074                                  	; 31/12/2022
 32075                                  ;sr7:
 32076                                  	;jmp	coff
 32077                                  	; 03/01/2023
 32078 0000219B E9D006                  	jmp	badparm_p_coff
 32079                                  if7:
 32080 0000219E 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 32081 000021A1 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 32082                                  	;cmp	word [result_val_swoff],switch_x
 32083 000021A3 813E[911D][861D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 32084                                  	;jne	short if11
 32085                                  	; 31/12/2022
 32086 000021A9 74EB                    	je	short do7 ;je short en11
 32087                                  
 32088                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 32089                                  	;jmp	short en11 ; 31/12/2022
 32090                                  if11:
 32091                                  	;mov	ax,[rv_dword]
 32092 000021AB A1[931D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 32093 000021AE 83F901                  	cmp	cx,1
 32094 000021B1 7505                    	jne	short if13
 32095                                  
 32096 000021B3 A3[891D]                	mov	[p_buffers],ax
 32097                                  	;jmp	short en11
 32098                                  	; 31/12/2022
 32099 000021B6 EBDE                    	jmp	short do7
 32100                                  if13:
 32101 000021B8 A3[8B1D]                	mov	[p_h_buffers],ax
 32102                                  en11:
 32103 000021BB EBD9                    	jmp	short do7
 32104                                  en7:
 32105 000021BD 833E[891D]63            	cmp	word [p_buffers],99
 32106 000021C2 760B                    	jbe	short if18
 32107                                  
 32108                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 32109                                  ;	jne	short if18
 32110                                  
 32111 000021C4 E89A07                  	call	badparm_p
 32112 000021C7 C706[8B1D]0000          	mov	word [p_h_buffers],0
 32113 000021CD EB12                    	jmp	short sr7
 32114                                  if18:
 32115 000021CF A1[891D]                	mov	ax,[p_buffers]	; we don't have any problem.
 32116 000021D2 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 32117                                  
 32118 000021D5 A1[8B1D]                	mov	ax,[p_h_buffers]
 32119 000021D8 A3[9902]                	mov	[h_buffers],ax
 32120                                  
 32121                                  ;	mov	al,[p_buffer_slash_x]	; M016
 32122                                  ;	mov	[buffer_slash_x],al
 32123                                  
 32124 000021DB A1[AD02]                	mov	ax,[linecount]
 32125 000021DE A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 32126                                  	; 31/12/2022
 32127                                  	;jmp	short sr7
 32128                                  	; 03/01/2023
 32129                                  sr7:
 32130 000021E1 E9FCFE                  	jmp	coff
 32131                                  
 32132                                  ;------------------------------------------------------------------------------
 32133                                  ; break command
 32134                                  ;------------------------------------------------------------------------------
 32135                                  
 32136                                  ;****************************************************************************
 32137                                  ;									    *
 32138                                  ; function: parse the parameters of break = command.			    *
 32139                                  ;									    *
 32140                                  ; input :								    *
 32141                                  ;	es:si -> parameters in command line.				    *
 32142                                  ; output:								    *
 32143                                  ;	turn the control-c check on or off.				    *
 32144                                  ;									    *
 32145                                  ; subroutines to be called:						    *
 32146                                  ;	sysinit_parse							    *
 32147                                  ; logic:								    *
 32148                                  ; {									    *
 32149                                  ;	set di to brk_parms;						    *
 32150                                  ;	set dx,cx to 0; 						    *
 32151                                  ;	while (end of command line)					    *
 32152                                  ;	{ sysinit_parse;						    *
 32153                                  ;	  if (no error) then						    *
 32154                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 32155                                  ;		   set p_ctrl_break,on;					    *
 32156                                  ;	       else					  /*off 	 */ *
 32157                                  ;		   set p_ctrl_break,off;				    *
 32158                                  ;	  else {show message;error_exit};				    *
 32159                                  ;	};								    *
 32160                                  ;	if (no error) then						    *
 32161                                  ;	   dos function call to set ctrl_break check according to	    *
 32162                                  ; };									    *
 32163                                  ;									    *
 32164                                  ;****************************************************************************
 32165                                  
 32166                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32167                                  	; (SYSINIT:22FFh)
 32168                                  tryc:
 32169 000021E4 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 32170 000021E7 7539                    	jne	short trym
 32171                                  
 32172                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32173                                  ; (SYSINIT:2527h)
 32174                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32175                                  ;%if 0
 32176                                  ;ifdef	MULTI_CONFIG
 32177 000021E9 E8FF1E                  	call	query_user              ; query the user if config_cmd
 32178 000021EC 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 32179                                  ;endif
 32180                                  ;%endif ; 27/10/2022
 32181                                  
 32182 000021EE BF[971D]                	mov	di,brk_parms
 32183 000021F1 31C9                    	xor	cx,cx
 32184                                  	; 03/01/2023
 32185                                  	;mov	dx,cx
 32186                                  do22:
 32187 000021F3 E84007                  	call	sysinit_parse
 32188 000021F6 7303                    	jnc	short if22		; parse error
 32189                                  	;call	badparm_p		;  show message and end the search loop.
 32190                                  	;;jmp	short sr22
 32191                                  	; 31/12/2022
 32192                                  ;sr22:
 32193                                  	;jmp	coff
 32194                                  	; 03/01/2023
 32195 000021F8 E97306                  	jmp	badparm_p_coff
 32196                                  if22:
 32197 000021FB 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32198 000021FE 7415                    	je	short en22		; then end the $endloop
 32199                                  
 32200                                  	;cmp	byte [result_val_itag],1
 32201 00002200 803E[901D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32202 00002205 7507                    	jne	short if26
 32203                                  
 32204 00002207 C606[BC1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 32205                                  	;jmp	short en26
 32206                                  	; 31/12/2022
 32207 0000220C EBE5                    	jmp	short do22
 32208                                  if26:
 32209 0000220E C606[BC1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 32210                                  en26:
 32211 00002213 EBDE                    	jmp	short do22		; we actually set the ctrl break
 32212                                  en22:
 32213 00002215 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 32214 00002217 B001                    	mov	al,1
 32215 00002219 8A16[BC1D]              	mov	dl,[p_ctrl_break]
 32216 0000221D CD21                    	int	21h
 32217                                  	; 31/12/2022
 32218                                  	;jmp	short sr22
 32219                                  	; 03/01/2023
 32220                                  sr22:
 32221 0000221F E9BEFE                  	jmp	coff
 32222                                  
 32223                                  ;------------------------------------------------------------------------------
 32224                                  ; multitrack command
 32225                                  ;------------------------------------------------------------------------------
 32226                                  
 32227                                  ;******************************************************************************
 32228                                  ;									      *
 32229                                  ; function: parse the parameters of multitrack= command.		      *
 32230                                  ;									      *
 32231                                  ; input :								      *
 32232                                  ;	es:si -> parameters in command line.				      *
 32233                                  ; output:								      *
 32234                                  ;	turn multrk_flag on or off.					      *
 32235                                  ;									      *
 32236                                  ; subroutines to be called:						      *
 32237                                  ;	sysinit_parse							      *
 32238                                  ; logic:								      *
 32239                                  ; {									      *
 32240                                  ;	set di to brk_parms;						      *
 32241                                  ;	set dx,cx to 0; 						      *
 32242                                  ;	while (end of command line)					      *
 32243                                  ;	{ sysinit_parse;						      *
 32244                                  ;	  if (no error) then						      *
 32245                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 32246                                  ;		   set p_mtrk,on;					      *
 32247                                  ;	       else					  /*off 	 */   *
 32248                                  ;		   set p_mtrk,off;					      *
 32249                                  ;	  else {show message;error_exit};				      *
 32250                                  ;	};								      *
 32251                                  ;	if (no error) then						      *
 32252                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 32253                                  ;									      *
 32254                                  ; };									      *
 32255                                  ;									      *
 32256                                  ;******************************************************************************
 32257                                  
 32258                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32259                                  trym:
 32260 00002222 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 32261 00002225 7573                    	jne	short tryu
 32262                                  
 32263                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32264                                  ; (SYSINIT:2569h)
 32265                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32266                                  ;%if 0
 32267                                  ;ifdef	MULTI_CONFIG
 32268 00002227 E8C11E                  	call	query_user      ; query the user if config_cmd
 32269 0000222A 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 32270                                  ;endif
 32271                                  ;%endif	; 27/10/2022
 32272                                  
 32273 0000222C BF[9B1E]                	mov	di,mtrk_parms
 32274 0000222F 31C9                    	xor	cx,cx
 32275                                  	; 03/01/2023
 32276                                  	;mov	dx,cx
 32277                                  do31:
 32278 00002231 E80207                  	call	sysinit_parse
 32279 00002234 7303                    	jnc	short if31	; parse error
 32280                                  	;call	badparm_p	;  show message and end the search loop.
 32281                                  	;;jmp	short sr31
 32282                                  	; 31/12/2022
 32283                                  ;sr31:
 32284                                  	;jmp	coff
 32285                                  	; 03/01/2023
 32286 00002236 E93506                  	jmp	badparm_p_coff
 32287                                  if31:
 32288 00002239 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 32289 0000223C 7415                    	je	short en31	; then end the $endloop
 32290                                  
 32291                                  	;cmp	byte [result_val_itag],1
 32292 0000223E 803E[901D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32293 00002243 7507                    	jne	short if35
 32294                                  
 32295 00002245 C606[AF1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 32296                                  	;jmp	short en35
 32297                                  	; 31/12/2022
 32298 0000224A EBE5                    	jmp	short do31
 32299                                  if35:
 32300 0000224C C606[AF1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 32301                                  en35:
 32302 00002251 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 32303                                  en31:
 32304 00002253 1E                      	push	ds
 32305                                  	;;mov	ax,Bios_Data ; 70h
 32306                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 32307                                  	; 21/10/2022
 32308 00002254 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 32309 00002257 8ED8                    	mov	ds,ax
 32310                                  
 32311 00002259 2E803E[AF1E]00          	cmp	byte [cs:p_mtrk],0
 32312 0000225F 7508                    	jne	short if39
 32313                                  
 32314 00002261 C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 32315 00002267 EB06                    	jmp	short en39
 32316                                  if39:
 32317 00002269 C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 32318                                  en39:
 32319 0000226F 1F                      	pop	ds
 32320                                  	; 31/12/2022
 32321                                  	;jmp	short sr31
 32322                                  	; 03/01/2023
 32323                                  sr31:
 32324 00002270 E96DFE                  	jmp	coff
 32325                                  
 32326                                  ;----------------------------------------------------------------------------
 32327                                  ; DOS=HIGH/LOW command
 32328                                  ;----------------------------------------------------------------------------
 32329                                  
 32330                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32331                                  multi_try_doshi:
 32332 00002273 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 32333 00002276 7403                    	je	short it_is_h
 32334                                  skip_it:
 32335 00002278 E9EFFE                  	jmp	multi_pass_filter
 32336                                  it_is_h:				; M003 - removed initing DevUMB
 32337                                  					;	 & runhigh
 32338                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32339                                  ; (SYSINIT:25C1h)
 32340                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32341                                  ;%if 0
 32342                                  ;ifdef	MULTI_CONFIG
 32343 0000227B E86D1E                  	call	query_user              ; query the user if config_cmd
 32344 0000227E 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 32345                                  ;endif
 32346                                  ;%endif ; 27/10/2022
 32347                                  
 32348 00002280 BF[111F]                	mov	di,dos_parms
 32349 00002283 31C9                    	xor	cx,cx
 32350                                  	; 03/01/2023
 32351                                  	;mov	dx,cx
 32352                                  h_do_parse:
 32353 00002285 E8AE06                  	call	sysinit_parse
 32354 00002288 7303                    	jnc	short h_parse_ok	; parse error
 32355                                  h_badparm:
 32356                                  	; 03/01/2023
 32357                                  	;call	badparm_p		; show message and end the search loop.
 32358                                  	;;jmp	short h_end
 32359                                  	; 11/12/2022
 32360                                  ;h_end:
 32361                                  	;jmp	coff
 32362                                  	; 03/01/2023
 32363 0000228A E9E105                  	jmp	badparm_p_coff	
 32364                                  h_parse_ok:
 32365 0000228D 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32366 00002290 7405                    	je	short h_end		; then end the $endloop
 32367 00002292 E82307                  	call	ProcDOS
 32368 00002295 EBEE                    	jmp	short h_do_parse
 32369                                  	; 11/12/2022
 32370                                  	; 03/01/2023
 32371                                  h_end:
 32372 00002297 E946FE                  	jmp	coff
 32373                                  
 32374                                  ;-----------------------------------------------------------------------------
 32375                                  ; devicehigh command
 32376                                  ;-----------------------------------------------------------------------------
 32377                                  
 32378                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32379                                  tryu:
 32380 0000229A 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 32381 0000229D 7554                    	jne	short tryd
 32382                                  
 32383                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32384                                  ; (SYSINIT:25E9h)
 32385                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32386                                  ;%if 0
 32387                                  ;ifdef	MULTI_CONFIG
 32388 0000229F E8491E                  	call	query_user              ; query the user if config_cmd
 32389 000022A2 724F                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 32390                                  ;endif
 32391                                  ;%endif ; 28/10/2022
 32392                                  
 32393                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32394                                  ;%if 0
 32395                                  	; 01/01/2023
 32396                                  	; ds = cs
 32397                                  
 32398 000022A4 E8A607                  	call	InitVar
 32399 000022A7 E87A0F                  	call	ParseSize		; process the size= option
 32400                                  	;jnc	short tryu_0
 32401                                  	; 31/12/2022
 32402 000022AA 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 32403                                  
 32404                                  ;%endif ; 28/10/2022
 32405                                  
 32406                                  ; 31/12/2022
 32407                                  %if 0
 32408                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32409                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 32410                                  	;mov	[cs:badparm_seg], es
 32411                                  	; 11/12/2022
 32412                                  	; ds = cs
 32413                                  	mov	[badparm_off], si
 32414                                  	mov	[badparm_seg], es
 32415                                  
 32416                                  	; 31/12/2022
 32417                                  	;call	ParseSize
 32418                                  	;jnc	short tryu_2	; 28/10/2022
 32419                                  	
 32420                                  	;call	badparm_p
 32421                                  	;jmp	coff
 32422                                  	; 03/01/2023
 32423                                  	jmp	badparm_p_coff
 32424                                  %endif
 32425                                  
 32426                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32427                                  ; (SYSINIT:2606h)
 32428                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32429                                  ;%if 0
 32430                                  tryu_0:
 32431                                  	;mov	ax,[cs:DevSizeOption]
 32432                                  	; 31/12/2022
 32433 000022AC A1[AC1F]                	mov	ax,[DevSizeOption] ; ds = cs
 32434 000022AF 09C0                    	or	ax,ax
 32435 000022B1 7510                    	jnz	short tryu_2
 32436                                  
 32437 000022B3 E82908                  	call	ParseVar
 32438 000022B6 730B                    	jnc	short tryu_2
 32439                                  tryu_1:
 32440                                  	; 31/12/2022
 32441                                  	; ds = cs
 32442 000022B8 8936[E314]              	mov	[badparm_off], si
 32443 000022BC 8C06[E514]              	mov	[badparm_seg], es
 32444                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 32445                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 32446                                  	
 32447                                  	;call	badparm_p		; so all we have to do is choke and
 32448                                  	;jmp	coff			; die, rather verbosely.
 32449                                  	; 03/01/2023
 32450 000022C0 E9AB05                  	jmp	badparm_p_coff
 32451                                  
 32452                                  ;%endif ; 28/10/2022
 32453                                  
 32454                                  tryu_2:	
 32455 000022C3 56                      	push	si
 32456 000022C4 06                      	push	es
 32457                                  
 32458                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 32459                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 32460                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 32461                                  tryu_3:
 32462 000022C5 268A04                  	mov	al,[es:si]
 32463 000022C8 3C0D                    	cmp	al,cr
 32464                                  	; 14/04/2024
 32465                                  	;je	short tryu_4
 32466                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32467 000022CA 740C                    	je	short tryu_5
 32468 000022CC 3C0A                    	cmp	al,lf
 32469 000022CE 740A                    	je	short tryu_4
 32470 000022D0 E8861F                  	call	delim
 32471 000022D3 7405                    	jz	short tryu_4
 32472 000022D5 46                      	inc	si
 32473 000022D6 EBED                    	jmp	short tryu_3
 32474                                  
 32475                                  	; 14/04/2024
 32476                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32477                                  tryu_5:
 32478 000022D8 B020                    	mov     al,20h ; ' '   ; blank instead of cr
 32479                                  
 32480                                  tryu_4:	
 32481                                  	; 11/12/2022
 32482                                  	; ds = cs
 32483 000022DA A2[C01F]                	mov	[DevSavedDelim],al
 32484                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 32485                                  					;  it with null
 32486                                  	; 18/12/2022
 32487 000022DD 29DB                    	sub	bx,bx
 32488 000022DF 26881C                  	mov	[es:si],bl ; 0
 32489                                   	;mov	byte [es:si],0
 32490                                  
 32491 000022E2 07                      	pop	es
 32492 000022E3 5E                      	pop	si	; 14/04/2024
 32493                                  
 32494                                  ;------------------------------------------------------------------------------
 32495                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32496                                  ;------------------------------------------------------------------------------
 32497                                  
 32498                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32499                                  ; (SYSINIT:2642h)
 32500                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32501                                  ;%if 0
 32502                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32503                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 32504                                  %if 1
 32505                                  	; 01/01/2023
 32506                                  	; ds = cs
 32507 000022E4 E8650C                  	call	UmbTest			; See if UMBs are around...
 32508                                  	; 01/01/2023
 32509                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 32510                                  	
 32511                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 32512                                  	; 31/12/2022
 32513                                  	; ds = cs, bx = 0
 32514                                  	;mov	byte [DeviceHi],bl ; 0
 32515                                  	;jmp	short LoadDevice
 32516                                  	; 01/01/2023
 32517 000022E7 7222                    	jc	short LoadDevice ; bl = 0
 32518                                  %endif
 32519                                  ;%endif
 32520                                  ;------------------------------------------------------------------------------
 32521                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32522                                  ;------------------------------------------------------------------------------
 32523                                  
 32524                                  NrmTst:
 32525                                  	; 11/12/2022
 32526                                  	; ds = cs
 32527                                  	;;mov	byte [cs:DeviceHi],0
 32528                                  	;mov	byte [DeviceHi],0
 32529                                  	; 18/12/2022
 32530                                  	; bx = 0
 32531 000022E9 381E[9C1F]              	cmp	[DevUMB],bl ; 0
 32532                                  	;cmp	byte [DevUMB],0
 32533                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 32534 000022ED 741C                    	je	short LoadDevice	; no, we don't
 32535                                  	;mov	byte [cs:DeviceHi],1
 32536                                  	; 11/12/2022
 32537                                  	;mov	byte [DeviceHi],1
 32538                                  	; 18/12/2022
 32539 000022EF FEC3                    	inc	bl ; mov bl,1 ; (*)
 32540                                  	; 11/12/2022
 32541                                  	;jmp	short LoadDevice2	; 11/12/2022
 32542 000022F1 EB18                    	jmp	short LoadDevice
 32543                                  
 32544                                  ;------------------------------------------------------------------------------
 32545                                  ; device command
 32546                                  ;------------------------------------------------------------------------------
 32547                                  
 32548                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32549                                  	; (SYSINIT:2665h)
 32550                                  
 32551                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32552                                  	; (SYSINIT:2401h)
 32553                                  tryd:
 32554                                  	; 11/12/2022
 32555                                  	;xor 	bx,bx ; 31/12/2022
 32556                                  	;
 32557 000022F3 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 32558 000022F6 7403                    	je	short gotd
 32559                                  skip_it2:
 32560 000022F8 E9BA02                  	jmp	tryq
 32561                                  gotd:
 32562                                  
 32563                                  ; 31/12/2022 - Retro DOS v4.2
 32564                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32565                                  ;%if 0
 32566                                  ;ifdef	MULTI_CONFIG
 32567 000022FB E8ED1D                  	call	query_user              ; query the user if config_cmd
 32568 000022FE 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 32569                                  ;endif
 32570                                  ;%endif ; 28/10/2022
 32571                                  
 32572                                  	; 31/12/2022
 32573 00002300 29DB                    	sub	bx,bx
 32574                                  	; bx = 0
 32575                                  	; 11/12/2022
 32576                                  	; ds = cs
 32577                                  	;mov	byte [DeviceHi],0
 32578                                  	;mov	word [DevSizeOption],0
 32579 00002302 891E[AC1F]              	mov	[DevSizeOption],bx ; 0
 32580 00002306 C606[C01F]20            	mov	byte [DevSavedDelim],' '
 32581                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 32582                                  	;mov	word [cs:DevSizeOption],0
 32583                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 32584                                  					;  be replaced with a ' '
 32585                                  LoadDevice:                             ; device= or devicehigh= command.
 32586                                  	; 11/12/2022
 32587                                  	;mov	byte [DeviceHi],0
 32588 0000230B 881E[AB1F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 32589                                  LoadDevice2:
 32590                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 32591                                  	;
 32592                                  	;push    cs
 32593                                          ;pop     ds
 32594                                  	;
 32595                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 32596                                  	;mov	[bpb_addr+2],es
 32597                                  	;
 32598                                  	;mov	[DevCmdLine],si		; save it for ourself
 32599                                  	;mov	[DevCmdLine+2],es
 32600                                  	;
 32601                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 32602                                  
 32603                                  	; 11/12/2022
 32604                                  	; ds = cs
 32605                                  	;mov	bx,cs
 32606                                  	;mov	ds,bx
 32607                                  
 32608                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 32609 0000230F 8936[7A03]              	mov	[bpb_addr],si
 32610                                  	;mov	[cs:bpb_addr+2],es
 32611 00002313 8C06[7C03]              	mov	[bpb_addr+2],es
 32612                                  
 32613                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 32614 00002317 8936[BC1F]              	mov	[DevCmdLine],si
 32615                                  	;mov	[cs:DevCmdLine+2],es	
 32616 0000231B 8C06[BE1F]              	mov	[DevCmdLine+2],es
 32617                                  
 32618                                  	; 31/12/2022 - Retro DOS v4.2
 32619 0000231F C606[E214]00            	mov	byte [driver_units],0	; clear total block units for driver	
 32620                                  
 32621 00002324 E89A1F                  	call	round
 32622                                  	
 32623 00002327 E8060E                  	call	SizeDevice
 32624 0000232A 723F                    	jc	short BadFile
 32625                                  
 32626                                  	; 11/12/2022
 32627                                  	; ds = cs
 32628                                  
 32629                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 32630                                  
 32631                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32632                                  ; (SYSINIT:26A4h)
 32633                                  
 32634                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32635                                  ;%if 0
 32636 0000232C C606[9B1F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 32637                                  
 32638                                  	; 22/07/2023
 32639                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 32640 00002331 800E[AB1F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 32641                                  	; 10/07/2023
 32642                                  	;or	al,al
 32643 00002336 741E                    	jz	short DevConvLoad	; the actual load.
 32644                                  
 32645                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 32646 00002338 A0[591F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 32647                                  
 32648 0000233B 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 32649 0000233D 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 32650                                  
 32651 0000233F FE0E[9B1F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 32652                                  
 32653 00002343 E8CE09                  	call	GetLoadSize		; Returns size of first UMB specified
 32654 00002346 09C0                    	or	ax,ax
 32655 00002348 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 32656                                  
 32657 0000234A 3B06[8D1F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 32658 0000234E 7D06                    	jge	short DevConvLoad
 32659                                  tryd_1:
 32660 00002350 A1[8D1F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 32661 00002353 E8CA09                  	call	StoLoadSize		; minsize for load UMB.
 32662                                  
 32663                                  ;%endif ; 28/10/2022
 32664                                  
 32665                                  ; - End DeviceHigh primary logic changes --------------------------------------
 32666                                  
 32667                                  DevConvLoad:
 32668                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32669 00002356 E8DB0C                  	call	InitDevLoad
 32670                                  
 32671                                  	; 11/12/2022
 32672                                  	; ds = cs
 32673 00002359 A1[8F1F]                	mov	ax,[DevLoadAddr]
 32674 0000235C 0306[8D1F]              	add	ax,[DevSize]
 32675 00002360 7206                    	jc	short NoMem
 32676 00002362 3906[911F]              	cmp	[DevLoadEnd],ax
 32677 00002366 7315                    	jae	short LoadDev
 32678                                  	
 32679                                  	; 11/12/2022
 32680                                  	;mov	ax,[cs:DevLoadAddr]
 32681                                  	;add	ax,[cs:DevSize]
 32682                                  	;jc	short NoMem
 32683                                  	;cmp	[cs:DevLoadEnd],ax
 32684                                  	;jae	short LoadDev
 32685                                  NoMem:
 32686                                  	; 11/12/2022
 32687                                  	; ds = cs
 32688                                  	;jmp	mem_err
 32689 00002368 E9951F                  	jmp	mem_err2
 32690                                  
 32691                                  BadFile:
 32692                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32693                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 32694                                  	;;cmp	byte [es:si],' '
 32695                                          ;;jae	short tryd_2
 32696                                  	; 31/12/2022	
 32697                                  	;cmp	byte [es:si],0Dh	; cr
 32698                                          ;jne	short tryd_2
 32699                                  	;jmp	badop
 32700                                  	; 31/12/2022
 32701                                  	; ds = cs
 32702                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32703                                  	; (SYSINIT:26E6h)
 32704 0000236B E8230E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 32705 0000236E 26803C20                	cmp	byte [es:si],' ' 
 32706                                  	;cmp	byte [es:si],20h ; space
 32707 00002372 7303                    	jnb	short tryd_2
 32708 00002374 E9DE05                  	jmp	badop
 32709                                  tryd_2:
 32710 00002377 E88121                  	call	badload
 32711 0000237A E963FD                  	jmp	coff
 32712                                  
 32713                                  LoadDev:
 32714 0000237D 06                      	push	es
 32715 0000237E 1F                      	pop	ds
 32716                                  
 32717 0000237F 89F2                    	mov	dx,si			;ds:dx points to file name
 32718 00002381 E8F10D                  	call	ExecDev			; load device driver using exec call
 32719                                  badldreset:
 32720 00002384 1E                      	push	ds
 32721 00002385 07                      	pop	es			;es:si back to config.sys
 32722 00002386 0E                      	push	cs
 32723 00002387 1F                      	pop	ds			;ds back to sysinit
 32724 00002388 72E1                    	jc	short BadFile
 32725                                  goodld:
 32726                                  	; 11/12/2022
 32727                                  	; ds = cs
 32728                                  
 32729 0000238A 06                      	push	es ; +	; 31/12/2022
 32730 0000238B 56                      	push	si ; ++
 32731 0000238C E8130E                  	call	RemoveNull
 32732 0000238F 06                      	push	es
 32733 00002390 56                      	push	si
 32734                                  
 32735 00002391 0E                      	push	cs
 32736 00002392 07                      	pop	es
 32737                                  
 32738 00002393 1E                      	push	ds ; **  ; ds = cs
 32739 00002394 56                      	push	si
 32740                                  
 32741                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 32742                                  	; 31/12/2022
 32743                                  	; ds = cs
 32744 00002395 C536[931F]              	lds	si,[DevEntry]
 32745                                  
 32746                                  	;test	word [si+4],8000h
 32747                                  	; 11/12/2022
 32748 00002399 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 32749                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 32750 0000239D 7514                    	jnz	short got_device_com_cont   ; no.
 32751                                  
 32752 0000239F 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 32753                                  	;cmp	byte [si+32],26
 32754 000023A4 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 32755 000023A8 7209                    	jb	short got_device_com_cont
 32756                                  
 32757 000023AA 5E                      	pop	si
 32758 000023AB 1F                      	pop	ds ; **
 32759                                  
 32760 000023AC 5E                      	pop	si			; clear the stack
 32761 000023AD 07                      	pop	es
 32762                                  
 32763                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32764                                  	;call	RetFromUM
 32765                                  	; 31/12/2022
 32766                                  	; ds = cs ; **
 32767 000023AE E8E00D                  	call	RetFromUM		; Do this before we leave
 32768                                  
 32769                                  	;jmp	short badnumblock
 32770                                  	; 31/12/2022
 32771 000023B1 EB73                    	jmp	short badnumblock2  ; ds = cs
 32772                                  
 32773                                  got_device_com_cont:
 32774 000023B3 5E                      	pop	si
 32775 000023B4 1F                      	pop	ds
 32776                                  
 32777                                  	; 11/12/2022
 32778                                  	; ds = cs
 32779                                  
 32780 000023B5 E82306                  	call	LieInt12Mem
 32781 000023B8 E88006                  	call	UpdatePDB		; update the PSP:2 value M020
 32782                                  
 32783                                  	; 11/12/2022
 32784                                  	; ds = cs
 32785                                  	; 08/09/2023
 32786 000023BB 31C0                    	xor	ax, ax ; 0
 32787 000023BD 3806[DE14]              	cmp	byte [multdeviceflag],al ; 0
 32788                                  	;cmp	byte [multdeviceflag],0
 32789                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 32790                                  					;  driver in the file ; M027
 32791 000023C1 750B                    	jne	short skip_pass_limit	;		      ; M027
 32792                                  
 32793                                  	; 11/12/2022
 32794                                  	; ds = cs
 32795                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 32796                                  	;mov	bx,[cs:DevLoadEnd]
 32797                                  	;mov	[cs:break_addr+2],bx
 32798                                  
 32799                                  	;mov	word [break_addr],0
 32800                                  	; 08/09/2023
 32801 000023C3 A3[7603]                	mov	[break_addr],ax ; 0
 32802 000023C6 8B1E[911F]              	mov	bx,[DevLoadEnd]
 32803 000023CA 891E[7803]              	mov	[break_addr+2],bx
 32804                                  
 32805                                  skip_pass_limit:
 32806                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 32807                                  ;	number of installed devices (including DblSpace drives) where
 32808                                  ;	"drivenumber" is the number that the next block device will
 32809                                  ;	be assigned to. Because some naughty device drivers (like
 32810                                  ;	interlnk) look at the internal DOS variable instead of the
 32811                                  ;	value we pass it, we'll temporarily stick our value into
 32812                                  ;	DOS DATA while we're initializing the device drivers.
 32813                                  ;
 32814                                  ;	Note that this will make it impossible for this device
 32815                                  ;	driver to access the DblSpace drive letters, whether
 32816                                  ;	they are swapped-hosts or unswapped compressed drives,
 32817                                  ;	during its initialization phase.
 32818                                  
 32819                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32820                                  ; (SYSINIT:2752h)
 32821                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32822                                  ;%if 0
 32823                                  	; 31/12/2022
 32824                                  	;push	ds
 32825                                  	
 32826                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32827                                  	; 31/12/2022
 32828                                  	; ds = cs
 32829                                  	; 08/09/2023
 32830                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32831                                  
 32832                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 32833                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 32834                                  	;mov	ah,al
 32835                                  
 32836                                  	; 08/09/2023
 32837                                  	; ds = cs
 32838 000023CE A0[7E03]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 32839 000023D1 A2[7E03]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 32840 000023D4 88C4                    	mov	ah,al
 32841 000023D6 C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32842                                  
 32843 000023DA 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 32844                                  	; 31/12/2022
 32845                                  	;pop	ds
 32846                                  	
 32847 000023DD 50                      	push	ax			; save real sysi_numio/ncds in ax
 32848                                  
 32849                                  ;%endif ; 29/10/2022
 32850                                  
 32851                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32852                                  	; (SYSINIT:24B9h)
 32853                                  
 32854 000023DE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 32855 000023E1 E8251F                  	call	calldev 		; calldev (sdevstrat);
 32856 000023E4 BB0800                  	mov	bx,SYSDEV.INT ; 8
 32857 000023E7 E81F1F                  	call	calldev 		; calldev (sdevint);
 32858                                  
 32859                                  	; 11/12/2022
 32860                                  	; ds <> cs (from calldev) ; 31/12/2022
 32861                                  
 32862                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32863                                  ; (SYSINIT:2773h)
 32864                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32865                                  ;%if 0
 32866 000023EA 58                      	pop	ax			; get real sysi_numio value
 32867                                  	; 31/12/2022
 32868                                  	;push	ds
 32869 000023EB 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32870 000023F0 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 32871                                  	; 31/12/2022
 32872                                  	;pop	ds
 32873                                  
 32874                                  ;%endif ; 29/10/2022
 32875                                  
 32876                                  	; 11/12/2022
 32877 000023F3 0E                      	push	cs
 32878 000023F4 1F                      	pop	ds
 32879                                  
 32880 000023F5 E81106                  	call	TrueInt12Mem
 32881                                  
 32882                                  	; 11/12/2022
 32883                                  	; ds = cs
 32884                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 32885                                  	;mov	[cs:DevBrkAddr],ax
 32886                                  	;mov	ax,[cs:break_addr+2]
 32887                                  	;mov	[cs:DevBrkAddr+2],ax
 32888 000023F8 A1[7603]                	mov	ax,[break_addr]	
 32889 000023FB A3[971F]                	mov	[DevBrkAddr],ax
 32890 000023FE A1[7803]                	mov	ax,[break_addr+2]
 32891 00002401 A3[991F]                	mov	[DevBrkAddr+2],ax
 32892                                  
 32893                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32894                                  	;call	RetFromUM		; There we go... all done.
 32895                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32896                                  	; (SYSINIT:2791h)
 32897 00002404 E88A0D                  	call	RetFromUM		; There we go... all done.	
 32898                                  
 32899                                  	; 31/12/2022
 32900                                  	; ds = cs
 32901                                  
 32902                                  	; 11/12/2022
 32903 00002407 803E[9C1F]00            	cmp	byte [DevUMB],0	
 32904                                  	;cmp	byte [cs:DevUMB],0
 32905 0000240C 7403                    	je	short tryd_3
 32906 0000240E E8750F                  	call	AllocUMB
 32907                                  	; 31/12/2022
 32908                                  	; ds = cs
 32909                                  tryd_3:
 32910                                  
 32911                                  ;ifndef ROMDOS
 32912                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 32913                                  
 32914                                  	; 11/12/2022
 32915                                  	; ds = cs
 32916                                  	
 32917                                  	;cmp	byte [cs:runhigh],0FFh
 32918 00002411 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 32919 00002416 7503                    	jne	short tryd_4
 32920                                  	
 32921                                  	; 11/12/2022
 32922                                  	; ds = cs
 32923 00002418 E863E5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 32924                                  tryd_4:
 32925                                  ;endif ; ROMDOS
 32926                                  
 32927 0000241B 5E                      	pop	si
 32928 0000241C 1F                      	pop	ds
 32929 0000241D C60400                  	mov	byte [si],0		; *p = 0;
 32930                                  
 32931 00002420 0E                      	push	cs
 32932 00002421 1F                      	pop	ds
 32933                                  
 32934 00002422 EB1F                    	jmp	short was_device_com
 32935                                  
 32936                                  ;----------------------------------------------------------------------------
 32937                                  
 32938                                  ; 02/04/2019 - Retro DOS v4.0
 32939                                  
 32940                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32941                                  ; (SYSINIT:27B3h)
 32942                                  
 32943                                  badnumblock:
 32944 00002424 0E                      	push	cs
 32945 00002425 1F                      	pop	ds
 32946                                  badnumblock2:	; 31/12/2022 (ds=cs)
 32947 00002426 BA[364C]                	mov	dx,badblock
 32948 00002429 E8F720                  	call	print
 32949                                  
 32950                                  ;------ fall thru -----------------------------------------------------------
 32951                                  
 32952                                  	; 31/12/2022 - Retro DOS v4.2
 32953                                  
 32954                                  erase_dev_do:				; modified to show message "error in config.sys..."
 32955                                  	
 32956                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 32957                                  				; (Note: 'call CheckDoubleSpace'
 32958                                  				; has been removed at 'erase_dev_do:' pos
 32959                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 32960                                  				; Erdogan Tan - 10/07/2023
 32961 0000242C 5E                      	pop	si ; ++
 32962 0000242D 07                      	pop	es ; + ; 31/12/2022
 32963                                  
 32964 0000242E 0E                      	push	cs
 32965 0000242F 1F                      	pop	ds
 32966                                  
 32967                                  skip1_resetmemhi:
 32968                                  	; 11/12/2022
 32969                                  	; ds = cs
 32970 00002430 833E[7F03]00            	cmp	word [configmsgflag],0
 32971                                  	;cmp	word [cs:configmsgflag],0
 32972 00002435 7409                    	je	short no_error_line_msg
 32973                                  
 32974 00002437 E84F05                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 32975                                  	; 11/12/2022
 32976                                  	; ds = cs
 32977                                  	;mov	word [cs:configmsgflag],0
 32978 0000243A C706[7F03]0000          	mov	word [configmsgflag],0	; set the default value again.
 32979                                  
 32980                                  no_error_line_msg:
 32981 00002440 E99DFC                  	jmp	coff
 32982                                  
 32983                                  ;----------------------------------------------------------------------------
 32984                                  
 32985                                  was_device_com:
 32986                                  	; 14/12/2022
 32987                                  	; ds = cs
 32988 00002443 A1[991F]                	mov	ax,[DevBrkAddr+2]
 32989                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 32990 00002446 3B06[911F]              	cmp	ax,[DevLoadEnd]
 32991                                  	;cmp	ax,[cs:DevLoadEnd]
 32992 0000244A 7605                    	jbe	short breakok
 32993                                  
 32994 0000244C 5E                      	pop	si
 32995 0000244D 07                      	pop	es
 32996 0000244E E91AFF                  	jmp	BadFile
 32997                                  
 32998                                  breakok:
 32999                                  	; 14/12/2022
 33000                                  	; ds = cs
 33001 00002451 C43E[6D02]              	les	di,[DOSINFO] 
 33002 00002455 C516[931F]              	lds	dx,[DevEntry]
 33003                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 33004 00002459 89D6                    	mov	si,dx
 33005                                  
 33006                                  	; 14/11/2022
 33007                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 33008                                  
 33009                                  	; 14/12/2022
 33010                                  	; ds <> cs
 33011                                  	
 33012                                  	;mov	ax,[si+4]
 33013 0000245B 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 33014                                  	; 12/12/2022
 33015 0000245E F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 33016                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 33017 00002461 7426                    	jz	short isblock
 33018                                  
 33019                                  ;------ lets deal with character devices
 33020                                  
 33021 00002463 2E800E[E114]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33022 00002469 E8690D                  	call	DevSetBreak		;go ahead and alloc mem for device
 33023                                  jc_edd:
 33024 0000246C 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 33025                                  
 33026                                  	; 12/12/2022
 33027 0000246E A801                    	test	al,ISCIN
 33028                                  	;test	ax,ISCIN ; 1		;is it a console in?
 33029 00002470 7408                    	jz	short tryclk
 33030                                  
 33031 00002472 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 33032 00002476 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 33033                                  tryclk: 
 33034                                  	; 12/12/2022
 33035 0000247A A808                    	test	al,ISCLOCK
 33036                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 33037 0000247C 7408                    	jz	short golink
 33038                                  
 33039 0000247E 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 33040 00002482 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 33041                                  golink: 
 33042 00002486 E9DF00                  	jmp	linkit
 33043                                  
 33044                                  ;------ deal with block device drivers
 33045                                  
 33046                                  isblock:
 33047 00002489 2EA0[7503]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 33048 0000248D 08C0                    	or	al,al
 33049 0000248F 749B                    	jz	short erase_dev_do
 33050                                  	;mov	[si+10],al
 33051 00002491 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 33052                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33053                                  	;add	[cs:driver_units],al
 33054                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33055 00002494 2E0006[E214]            	add	[cs:driver_units],al	; keep total for all drivers in file
 33056                                  perdrv:
 33057 00002499 98                      	cbw				; warning no device > 127 units
 33058 0000249A 89C1                    	mov	cx,ax
 33059 0000249C 88E6                    	mov	dh,ah
 33060                                  	;mov	dl,[es:di+32]
 33061 0000249E 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 33062 000024A2 88D4                    	mov	ah,dl
 33063 000024A4 00C4                    	add	ah,al			; check for too many devices
 33064 000024A6 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 33065 000024A9 7603                    	jbe	short ok_block
 33066 000024AB E976FF                  	jmp	badnumblock
 33067                                  
 33068                                  ok_block:
 33069 000024AE 2E800E[E114]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33070 000024B4 E81E0D                  	call	DevSetBreak		; alloc the device
 33071 000024B7 72B3                    	jc	short jc_edd
 33072 000024B9 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 33073                                  
 33074 000024BD 2E0006[7E03]            	add	[cs:drivenumber],al	; remember amount for next device
 33075 000024C2 2EC51E[7A03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 33076                                  perunit:
 33077 000024C7 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 33078                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 33079                                  	; 11/12/2022
 33080 000024CC 26C46E00                	les	bp,[es:bp]
 33081                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33082                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 33083                                  scandpb:
 33084                                  	;cmp	word [es:bp+25],-1
 33085 000024D0 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 33086 000024D5 7406                    	je	short foundpb
 33087                                  	;les	bp,[es:bp+25]
 33088 000024D7 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 33089 000024DB EBF3                    	jmp	short scandpb
 33090                                  foundpb:
 33091 000024DD 2EA1[971F]              	mov	ax,[cs:DevBrkAddr]
 33092 000024E1 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 33093 000024E5 2EA1[991F]              	mov	ax,[cs:DevBrkAddr+2]
 33094 000024E9 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 33095                                  
 33096 000024ED 2EC42E[971F]            	les	bp,[cs:DevBrkAddr]
 33097 000024F2 2E8306[971F]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 33098                                  				; 08/09/2023
 33099                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 33100 000024F8 E8B90C                  	call	RoundBreakAddr
 33101                                  
 33102 000024FB 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 33103 00002501 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 33104                                  
 33105 00002506 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 33106 00002508 43                      	inc	bx
 33107 00002509 43                      	inc	bx			;point to next guy
 33108                                  	;mov	[es:bp+DPB.DRIVE],dx
 33109                                  	; 11/12/2022
 33110 0000250A 26895600                	mov	[es:bp],dx ; 13/05/2019
 33111                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33112                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 33113                                  
 33114                                  	; 13/04/2024 - Retro DOS v5.0
 33115                                  	; PCDOS 7.1 IBMBIO.COM
 33116                                  	;;;
 33117 0000250E 52                      	push	dx
 33118 0000250F 51                      	push	cx		; initialize FAT32 extended DPB parameters/fields
 33119 00002510 BA5241                  	mov	dx,4152h	; 'AR' signature for FAT32 extended DPB
 33120 00002513 31C9                    	xor	cx,cx	; 0
 33121                                  	;mov	[es:bp+1Dh],cx
 33122 00002515 26894E1D                	mov	[es:bp+DPB.NEXT_FREE],cx ; last allocated cluster #
 33123                                  	;cmp	[si+0Bh],cx	; BPB.fatsecs16 
 33124 00002519 394C0B                  	cmp	[si+A_BPB.SECTORSPERFAT],cx ; 0
 33125 0000251C 7514                    	jnz	short set_dpb	; FAT DPB (33 bytes)   -jnz-
 33126                                  				; FAT32 DPB (61 bytes) -jz-
 33127                                  	;mov	[es:bp+39h],cx
 33128 0000251E 26894E39                	mov	[es:bp+DPB.FAT32_NXTFREE],cx ; 0
 33129                                  	;mov	[es:bp+3Bh],cx
 33130 00002522 26894E3B                	mov	[es:bp+DPB.FAT32_NXTFREE+2],cx ; 0
 33131 00002526 49                      	dec	cx	; 0FFFFh ; -1
 33132                                  	;mov	[es:bp+1Fh],cx
 33133 00002527 26894E1F                	mov	[es:bp+DPB.FREE_CNT],cx ; -1 = unknown
 33134                                  	;mov	[es:bp+21h],cx
 33135 0000252B 26894E21                	mov	[es:bp+DPB.FREE_CNT+2],cx ; -1 = unknown
 33136 0000252F B95845                  	mov	cx,4558h       ; 'EX' signature for FAT32 extended DPB
 33137                                  set_dpb:
 33138                                  	;;;
 33139                                  
 33140 00002532 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 33141 00002534 CD21                    	int	21h
 33142                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 33143                                  			; DS:SI -> BPB (BIOS Parameter Block)
 33144                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 33145                                  	; 13/04/2024
 33146                                  	;;;
 33147 00002536 59                      	pop	cx
 33148 00002537 5A                      	pop	dx
 33149                                  	;;;
 33150                                  
 33151                                  	;mov	ax,[es:bp+2]
 33152 00002538 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 33153 0000253C 06                      	push	es
 33154 0000253D 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 33155                                  	;cmp	ax,[es:di+10h]
 33156 00002542 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 33157 00002546 07                      	pop	es
 33158                                  	; 13/04/2024
 33159                                  	;jna	short iblk_1
 33160                                  	;jmp	bad_bpb_size_sector
 33161                                  	; 29/10/2022
 33162 00002547 775E                    	ja	short bad_bpb_size_sector
 33163                                  iblk_1:
 33164 00002549 1E                      	push	ds
 33165 0000254A 52                      	push	dx
 33166                                  
 33167 0000254B 2EC516[931F]            	lds	dx,[cs:DevEntry]
 33168                                  	;mov	[es:bp+13h],dx
 33169 00002550 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 33170                                  	;mov	[es:bp+15h],ds
 33171 00002554 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 33172                                  
 33173 00002558 5A                      	pop	dx
 33174 00002559 1F                      	pop	ds
 33175                                  
 33176 0000255A 42                      	inc	dx
 33177 0000255B FEC6                    	inc	dh
 33178                                  	;loop	perunit
 33179                                  	; 13/04/2024
 33180                                  	;;;
 33181 0000255D 49                      	dec	cx		; cx = cx - 1
 33182                                  				; cx = remain count from [cs:unitcount]
 33183 0000255E 7403                    	jz	short iblk_2	; cx = 0 -> done
 33184 00002560 E964FF                  	jmp	perunit		; loop until cx is 0
 33185                                  iblk_2:
 33186                                  	;;;
 33187                                  	
 33188 00002563 0E                      	push	cs
 33189 00002564 1F                      	pop	ds
 33190                                  
 33191 00002565 E821E7                  	call	TempCDS 		; set cds for new drives
 33192                                  	; 31/12/2022
 33193                                  	; ds <> cs
 33194                                  linkit:
 33195 00002568 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 33196 0000256D 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 33197 00002571 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 33198                                  
 33199 00002575 2EC536[931F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 33200 0000257A 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 33201 0000257E 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 33202 00002582 8B04                    	mov	ax,[si]			;get pointer to next device
 33203 00002584 2EA3[931F]              	mov	[cs:DevEntry],ax	;and save it
 33204                                  
 33205 00002588 890C                    	mov	[si],cx			;link in the driver
 33206 0000258A 895402                  	mov	[si+2],dx
 33207                                  enddev:
 33208 0000258D 5E                      	pop	si
 33209 0000258E 07                      	pop	es
 33210 0000258F 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 33211 00002590 740B                    	jz	short coffj3
 33212                                  
 33213 00002592 2EFE06[DE14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 33214 00002597 E85D0C                  	call	DevBreak		; M009
 33215                                  	; 11/12/2022
 33216                                  	; ds = cs (DevBreak)
 33217                                  
 33218                                  	; 03/04/2019 - Retro DOS v4.0
 33219                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 33220 0000259A E9EDFD                  	jmp	goodld			; otherwise pretend we loaded it in
 33221                                  coffj3: 
 33222                                  	; 18/12/2022
 33223                                  	; ax = 0
 33224 0000259D 2EA2[DE14]              	mov	[cs:multdeviceflag],al ; 0
 33225                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 33226 000025A1 E8530C                  	call	DevBreak
 33227                                  	; 11/12/2022
 33228                                  	; ds = cs (DevBreak)
 33229                                  	
 33230                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33231                                  	; (SYSINIT:2919h)
 33232                                  	; 11/07/2023
 33233                                  	; 07/03/2025 - MiniDOS 1.0
 33234                                  	;call	CheckProtmanArena
 33235                                  	
 33236                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 33237                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 33238                                  ;					;  created a bogus arena to try
 33239                                  ;					;  to protect some of its resident-
 33240                                  ;					;  init code.
 33241                                  	; 13/04/2024 - Retro DOS v5.0
 33242                                  	; PCDOS 7.1 IBMBIO.COM
 33243                                  	;;call	CheckDoubleSpace
 33244                                  	
 33245                                  	; 07/03/2025 - MiniDOS 1.0
 33246 000025A4 E939FB                  	jmp	coff
 33247                                  
 33248                                  ;----------------------------------------------------------------------------
 33249                                  
 33250                                  ; 03/04/2019 - Retro DOS v4.0
 33251                                  
 33252                                  bad_bpb_size_sector:
 33253 000025A7 5E                      	pop	si
 33254 000025A8 07                      	pop	es
 33255 000025A9 BA[584B]                	mov	dx,badsiz_pre
 33256 000025AC BB[364B]                	mov	bx,crlfm
 33257 000025AF E84F1F                  	call	prnerr
 33258                                  
 33259 000025B2 E92BFB                  	jmp	coff
 33260                                  
 33261                                  ;------------------------------------------------------------------------------
 33262                                  ; country command
 33263                                  ;      the syntax is:
 33264                                  ;	country=country id {,codepage {,path}}
 33265                                  ;	country=country id {,,path}	:default codepage id in dos
 33266                                  ;------------------------------------------------------------------------------
 33267                                  
 33268                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33269                                  	; (SYSINIT:2663h)
 33270                                  tryq:
 33271 000025B5 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 33272 000025B8 7403                    	je	short tryq_cont
 33273                                  skip_it3:
 33274 000025BA E90D01                  	jmp	tryf
 33275                                  tryq_cont:
 33276                                  
 33277                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33278                                  ; (SYSINIT:297Eh)
 33279                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33280                                  ;%if 0
 33281                                  ;ifdef	MULTI_CONFIG
 33282 000025BD E82B1B                  	call	query_user		; query the user if config_cmd
 33283 000025C0 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 33284                                  ;endif
 33285                                  ;%endif ; 02/11/2022
 33286                                  
 33287                                  	; 31/12/2022
 33288                                  	;xor	bx,bx
 33289 000025C2 31C9                    	xor	cx,cx
 33290                                  	; 14/12/2022
 33291                                  	; ds = cs
 33292                                  	; bx = 0
 33293                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 33294                                  	;mov	word [cs:p_code_page],0
 33295                                  	; 31/12/2022
 33296                                  	; cx = 0
 33297                                  	;mov	[cntry_drv],bl ; 0
 33298                                  	;mov	[p_code_page],bx ; 0
 33299 000025C4 880E[AC45]              	mov	[cntry_drv],cl ; 0
 33300 000025C8 890E[F41D]              	mov	[p_code_page],cx ; 0	
 33301                                  
 33302 000025CC BF[BD1D]                	mov	di,cntry_parms
 33303                                  	;xor	cx,cx	; 31/12/2022
 33304                                  	; 03/01/2023
 33305                                  	;mov	dx,cx
 33306                                  do52:
 33307 000025CF E86403                  	call	sysinit_parse
 33308 000025D2 730B                    	jnc	short if52		; parse error,check error code and
 33309                                  
 33310 000025D4 E8E000                  	call	cntry_error		; show message and end the search loop.
 33311                                  	; 14/12/2022
 33312                                  	; ds = cs
 33313 000025D7 C706[F21D]FFFF          	mov	word [p_cntry_code],-1
 33314                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 33315 000025DD EB34                    	jmp	short sr52
 33316                                  if52:
 33317 000025DF 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33318 000025E2 742F                    	jz	short sr52		; then end the search loop
 33319                                  
 33320                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 33321                                  	; 14/12/2022
 33322                                  	; ds = cs
 33323 000025E4 803E[8F1D]01            	cmp	byte [result_val],_$P_Number	
 33324                                  	;cmp	byte [cs:result_val],_$P_Number
 33325 000025E9 7512                    	jnz	short if56
 33326                                  
 33327                                  	;;mov	ax,[cs:rw_dword]
 33328                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33329                                  	; 14/12/2022
 33330 000025EB A1[931D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33331 000025EE 83F901                  	cmp	cx,1
 33332 000025F1 7505                    	jne	short if57
 33333                                  
 33334                                  	;mov	[cs:p_cntry_code],ax
 33335                                  	; 14/12/2022
 33336 000025F3 A3[F21D]                	mov	[p_cntry_code],ax
 33337                                  
 33338                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33339                                  	;jmp	short en57
 33340                                  	; 12/12/2022
 33341                                  	;jmp	short en56
 33342 000025F6 EBD7                    	jmp	short do52
 33343                                  if57:
 33344                                  	;mov	[cs:p_code_page],ax
 33345                                  	; 14/12/2022
 33346                                  	; ds = cs
 33347 000025F8 A3[F41D]                	mov	[p_code_page],ax
 33348                                  en57:
 33349                                  	;jmp	short en56		; path entered
 33350                                  	; 12/12/2022
 33351 000025FB EBD2                    	jmp	short do52
 33352                                  if56:
 33353 000025FD 1E                      	push	ds
 33354 000025FE 06                      	push	es
 33355 000025FF 56                      	push	si
 33356 00002600 57                      	push	di
 33357                                  
 33358 00002601 0E                      	push	cs
 33359 00002602 07                      	pop	es
 33360                                  
 33361                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 33362                                  	; 14/12/2022
 33363 00002603 C536[931D]              	lds	si,[rv_dword]
 33364 00002607 BF[AC45]                	mov	di,cntry_drv
 33365 0000260A E8E31E                  	call	move_asciiz
 33366                                  
 33367 0000260D 5F                      	pop	di
 33368 0000260E 5E                      	pop	si
 33369 0000260F 07                      	pop	es
 33370 00002610 1F                      	pop	ds
 33371                                  en56:
 33372 00002611 EBBC                    	jmp	short do52
 33373                                  sr52:
 33374                                  	; 14/12/2022
 33375                                  	; ds = cs
 33376 00002613 833E[F21D]FF            	cmp	word [p_cntry_code],-1
 33377                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 33378 00002618 7509                    	jne	short tryq_open
 33379 0000261A E9C3FA                  	jmp	coff
 33380                                  
 33381                                  tryqbad:				;"invalid country code or code page"
 33382 0000261D F9                      	stc
 33383 0000261E BA[9F4B]                	mov     dx,badcountry
 33384 00002621 EB79                    	jmp     tryqchkerr
 33385                                  
 33386                                  tryq_open:
 33387                                  	; 14/12/2022
 33388                                  	; ds = cs
 33389 00002623 803E[AC45]00            	cmp	byte [cntry_drv],0
 33390                                  	;cmp	byte [cs:cntry_drv],0
 33391 00002628 7405                    	je	short tryq_def
 33392 0000262A BA[AC45]                	mov	dx,cntry_drv
 33393 0000262D EB03                    	jmp	short tryq_openit
 33394                                  
 33395                                  tryq_def:
 33396 0000262F BA[AE45]                	mov	dx,cntry_root
 33397                                  tryq_openit:
 33398 00002632 B8003D                  	mov	ax,3D00h		;open a file
 33399 00002635 F9                      	stc
 33400 00002636 CD21                    	int	21h
 33401 00002638 7242                    	jc	short tryqfilebad	;open failure
 33402                                  
 33403                                  	; 14/12/2022
 33404                                  	; ds = cs
 33405 0000263A A3[5A03]                	mov	[cntryfilehandle],ax
 33406                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 33407 0000263D 89C3                    	mov	bx,ax
 33408 0000263F A1[F21D]                	mov	ax,[p_cntry_code]
 33409 00002642 8B16[F41D]              	mov	dx,[p_code_page]
 33410                                  	;mov	ax,[cs:p_cntry_code]
 33411                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 33412                                  	;mov	cx,[cs:memhi]
 33413 00002646 8B0E[6203]              	mov	cx,[memhi]
 33414 0000264A 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 33415                                  					;M023
 33416                                  	; 14/12/2022
 33417                                  	; ds = cs
 33418 0000264E 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 33419                                  	;cmp	cx,[cs:ALLOCLIM]
 33420 00002652 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 33421                                  
 33422 00002654 BE[AC45]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 33423 00002657 803C00                  	cmp	byte [si],0 		;default path?
 33424 0000265A 7502                    	jne	short tryq_set_for_dos
 33425                                  
 33426 0000265C 46                      	inc	si
 33427 0000265D 46                      	inc	si			;ds:si -> cntry_root
 33428                                  
 33429                                  tryq_set_for_dos:
 33430                                  	; 14/12/2022
 33431                                  	; ds = cs
 33432 0000265E C43E[7902]              	les	di,[sysi_country]
 33433                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 33434 00002662 57                      	push	di			;save di
 33435                                  	;add	di,8
 33436 00002663 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 33437 00002666 E8871E                  	call	move_asciiz		;set the path to country.sys in dos.
 33438 00002669 5F                      	pop	di			;es:di -> country info tab again.
 33439                                  
 33440                                  	; 14/12/2022	
 33441 0000266A 8B0E[6203]              	mov	cx,[memhi]
 33442                                  	;mov	cx,[cs:memhi]
 33443 0000266E 8ED9                    	mov	ds,cx
 33444 00002670 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 33445 00002672 E8171D                  	call	setdoscountryinfo	;now do the job!!!
 33446                                  	; ds <> cs ; 14/12/2022
 33447 00002675 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 33448                                  
 33449 00002677 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 33450 0000267A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 33451                                  
 33452                                  tryqfilebad:
 33453 0000267C 0E                      	push	cs
 33454 0000267D 07                      	pop	es
 33455 0000267E 2E803E[AC45]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 33456 00002684 7405                    	je	short tryqdefbad
 33457                                  
 33458 00002686 BE[AC45]                	mov	si,cntry_drv
 33459 00002689 EB03                    	jmp	short tryqbadload
 33460                                  
 33461                                  tryqdefbad:				;default file has been used.
 33462 0000268B BE[AE45]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 33463                                  tryqbadload:
 33464 0000268E E86A1E                  	call	badload 		;ds will be restored to sysinit_seg
 33465                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33466                                  	; (SYSINIT:2A69h)
 33467 00002691 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 33468                                  	;mov	cx,[cs:CONFBOT]
 33469                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33470                                  	;mov	cx,[cs:top_of_cdss]
 33471                                  	; 11/12/2022
 33472                                  	; ds = cs
 33473                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 33474 00002695 8EC1                    	mov	es,cx			;restore es -> confbot.
 33475 00002697 EB13                    	jmp	short coffj4
 33476                                  
 33477                                  tryqmemory:
 33478 00002699 BA[E24B]                	mov	dx,insufmemory
 33479                                  tryqchkerr:
 33480                                  	;mov	cx,[cs:CONFBOT]
 33481                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33482                                  	;mov	cx,[cs:top_of_cdss]
 33483                                  	; 12/12/2022
 33484 0000269C 0E                      	push	cs
 33485 0000269D 1F                      	pop	ds
 33486                                  	; 31/12/2022 - Retro DOS v4.2
 33487 0000269E 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 33488                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 33489 000026A2 8EC1                    	mov	es,cx			;restore es -> confbot seg
 33490                                  	;push	cs
 33491                                  	;pop	ds			;restore ds to sysinit_seg
 33492 000026A4 7306                    	jnc	short coffj4		;if no error,then exit
 33493                                  
 33494 000026A6 E87A1E                  	call	print			;else show error message
 33495 000026A9 E8DD02                  	call	error_line
 33496                                  coffj4:
 33497                                  	;mov	bx,[cs:cntryfilehandle]
 33498                                  	; 11/12/2022
 33499                                  	; ds = cs
 33500 000026AC 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 33501 000026B0 B43E                    	mov	ah,3Eh
 33502 000026B2 CD21                    	int	21h			;close a file. don't care even if it fails.
 33503 000026B4 E929FA                  	jmp	coff
 33504                                  
 33505                                  ;--------------------------------------------
 33506                                  
 33507                                  cntry_error:
 33508                                  
 33509                                  ;function: show "invalid country code or code page" messages,or
 33510                                  ;		"error in country command" depending on the error code
 33511                                  ;		in ax returned by sysparse;
 33512                                  ;in:	ax - error code
 33513                                  ;	ds - sysinitseg
 33514                                  ;	es - confbot
 33515                                  ;out:	show message.  dx destroyed.
 33516                                  
 33517 000026B7 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 33518 000026BA 7505                    	jne	short if64
 33519 000026BC BA[9F4B]                	mov	dx,badcountry		;"invalid country code or code page"
 33520 000026BF EB03                    	jmp	short en64
 33521                                  if64:
 33522 000026C1 BA[C54B]                	mov	dx,badcountrycom	;"error in contry command"
 33523                                  en64:
 33524 000026C4 E85C1E                  	call	print
 33525                                  	;call	error_line
 33526                                  	;retn
 33527                                  	; 11/12/2022
 33528 000026C7 E9BF02                  	jmp	error_line
 33529                                  
 33530                                  ;------------------------------------------------------------------------------
 33531                                  ; files command
 33532                                  ;------------------------------------------------------------------------------
 33533                                  
 33534                                  ;******************************************************************************
 33535                                  ; function: parse the parameters of files= command.			      *
 33536                                  ;									      *
 33537                                  ; input :								      *
 33538                                  ;	es:si -> parameters in command line.				      *
 33539                                  ; output:								      *
 33540                                  ;	variable files set.						      *
 33541                                  ;									      *
 33542                                  ; subroutines to be called:						      *
 33543                                  ;	sysinit_parse							      *
 33544                                  ; logic:								      *
 33545                                  ; {									      *
 33546                                  ;	set di points to files_parms;					      *
 33547                                  ;	set dx,cx to 0; 						      *
 33548                                  ;	while (end of command line)					      *
 33549                                  ;	{ sysinit_parse;						      *
 33550                                  ;	  if (no error) then						      *
 33551                                  ;	     files = result_val._$P_picked_val				      *
 33552                                  ;	  else								      *
 33553                                  ;	     error exit;						      *
 33554                                  ;	};								      *
 33555                                  ; };									      *
 33556                                  ;									      *
 33557                                  ;******************************************************************************
 33558                                  
 33559                                  tryf:
 33560 000026CA 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 33561 000026CD 7528                    	jne	short tryl
 33562                                  
 33563                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33564                                  ; (SYSINIT:2AABh)
 33565                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33566                                  ;%if 0
 33567                                  ;ifdef	MULTI_CONFIG
 33568 000026CF E8191A                  	call	query_user              ; query the user if config_cmd
 33569 000026D2 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 33570                                  ;endif
 33571                                  ;%endif ; 30/10/2022
 33572                                  
 33573                                  	; 14/12/2022
 33574                                  	; ds = cs
 33575                                  
 33576 000026D4 BF[F61D]                	mov	di,files_parms
 33577 000026D7 31C9                    	xor	cx,cx
 33578                                  	; 03/01/2023
 33579                                  	;mov	dx,cx
 33580                                  do67:
 33581 000026D9 E85A02                  	call	sysinit_parse
 33582 000026DC 7303                    	jnc	short if67		; parse error
 33583                                  	;call	badparm_p		;  and show messages and end the search loop.
 33584                                  	;jmp	short sr67
 33585                                  	; 03/01/2023
 33586 000026DE E98D01                  	jmp	badparm_p_coff
 33587                                  if67:
 33588 000026E1 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33589 000026E4 7408                    	je	short en67		; then end the $endloop
 33590                                  
 33591                                  	; 14/12/2022
 33592                                  	; ds = cs
 33593                                  	;;mov	al,[cs:rv_dword]
 33594                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33595                                  	;mov	[cs:p_files],al		; save it temporarily
 33596                                  	;mov	al,[rv_dword]
 33597 000026E6 A0[931D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 33598 000026E9 A2[151E]                	mov	[p_files],al
 33599                                  
 33600 000026EC EBEB                    	jmp	short do67
 33601                                  en67:
 33602                                  	; 14/12/2022
 33603                                  	; ds = cs
 33604 000026EE A0[151E]                	mov	al,[p_files]
 33605 000026F1 A2[9D02]                	mov	[FILES],al	
 33606                                  	;mov	al,[cs:p_files]
 33607                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 33608                                  sr67:
 33609 000026F4 E9E9F9                  	jmp	coff
 33610                                  
 33611                                  ; 04/04/2019 - Retro DOS v4.0
 33612                                  
 33613                                  ;------------------------------------------------------------------------------
 33614                                  ; lastdrive command
 33615                                  ;------------------------------------------------------------------------------
 33616                                  
 33617                                  ;******************************************************************************
 33618                                  ; function: parse the parameters of lastdrive= command. 		      *
 33619                                  ;									      *
 33620                                  ; input :								      *
 33621                                  ;	es:si -> parameters in command line.				      *
 33622                                  ; output:								      *
 33623                                  ;	set the variable num_cds.					      *
 33624                                  ;									      *
 33625                                  ; subroutines to be called:						      *
 33626                                  ;	sysinit_parse							      *
 33627                                  ; logic:								      *
 33628                                  ; {									      *
 33629                                  ;	set di points to ldrv_parms;					      *
 33630                                  ;	set dx,cx to 0; 						      *
 33631                                  ;	while (end of command line)					      *
 33632                                  ;	{ sysinit_parse;						      *
 33633                                  ;	  if (no error) then						      *
 33634                                  ;	     set num_cds to the returned value; 			      *
 33635                                  ;	  else	/*error exit*/						      *
 33636                                  ;	     error exit;						      *
 33637                                  ;	};								      *
 33638                                  ; };									      *
 33639                                  ;									      *
 33640                                  ;******************************************************************************
 33641                                  
 33642                                  tryl:
 33643 000026F7 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 33644 000026FA 7528                    	jne	short tryp
 33645                                  
 33646                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33647                                  ; (SYSINIT:2AE0h)
 33648                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33649                                  ;%if 0
 33650 000026FC E8EC19                  	call	query_user      ; query the user if config_cmd
 33651 000026FF 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 33652                                  ;endif
 33653                                  ;%endif ; 30/10/2022
 33654                                  
 33655                                  	; 14/12/2022
 33656                                  	; ds = cs
 33657                                  
 33658 00002701 BF[4D1E]                	mov	di,ldrv_parms
 33659 00002704 31C9                    	xor	cx,cx
 33660                                  	; 03/01/2023
 33661                                  	;mov	dx,cx
 33662                                  do73:
 33663 00002706 E82D02                  	call	sysinit_parse
 33664 00002709 7303                    	jnc	short if73	; parse error
 33665                                  	;call	badparm_p	;  and show messages and end the search loop.
 33666                                  	;jmp	short sr73
 33667                                  	; 03/01/2023
 33668 0000270B E96001                  	jmp	badparm_p_coff
 33669                                  if73:
 33670 0000270E 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 33671 00002711 7408                    	je	short en73	; then end the $endloop
 33672                                  
 33673                                  	; 14/12/2022
 33674                                  	; ds = cs
 33675                                  	;;mov	al,[cs:rv_dword]
 33676                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 33677                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 33678                                  
 33679                                  	;mov	al,[rv_dword]
 33680 00002713 A0[931D]                	mov	al,[rv_byte]
 33681 00002716 A2[611E]                	mov	[p_ldrv],al
 33682                                  
 33683 00002719 EBEB                    	jmp	short do73
 33684                                  en73:
 33685                                  	; 14/12/2022
 33686                                  	; ds = cs
 33687 0000271B A0[611E]                	mov	al,[p_ldrv]
 33688 0000271E A2[A002]                	mov	[NUM_CDS],al
 33689                                  	;mov	al,[cs:p_ldrv]
 33690                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 33691                                  sr73:
 33692 00002721 E9BCF9                  	jmp	coff
 33693                                  
 33694                                  ;--------------------------------------------------------------------------
 33695                                  ; setting drive parameters
 33696                                  ;--------------------------------------------------------------------------
 33697                                  
 33698                                  tryp:
 33699 00002724 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 33700 00002727 7516                    	jne	short tryk
 33701                                  
 33702                                  ; 31/12/2022 - Retro DOS v4.2
 33703                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33704                                  ;%if 0
 33705                                  ;ifdef	MULTI_CONFIG
 33706 00002729 E8BF19                  	call	query_user      ; query the user if config_cmd
 33707 0000272C 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 33708                                  ;endif
 33709                                  ;%endif ; 30/10/2022
 33710                                  
 33711 0000272E E8A30E                  	call	parseline
 33712 00002731 7209                    	jc	short trypbad
 33713 00002733 E8BC0D                  	call	setparms
 33714 00002736 E8FE0D                  	call	diddleback
 33715                                  
 33716                                  ; No error check here, because setparms and diddleback have no error 
 33717                                  ; returns, and setparms as coded now can return with carry set. 
 33718                                  ;       jc	short trypbad
 33719                                  
 33720                                  	; 12/12/2022
 33721                                  	; cf = 0
 33722                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33723                                  	;jc	short trypbad
 33724                                  	
 33725 00002739 E9A4F9                  	jmp	coff
 33726                                  trypbad:
 33727 0000273C E91602                  	jmp	badop
 33728                                  
 33729                                  ;--------------------------------------------------------------------------
 33730                                  ; setting internal stack parameters
 33731                                  ; stacks=m,n where
 33732                                  ;	m is the number of stacks (range 8 to 64,default 9)
 33733                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 33734                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 33735                                  ;	any combinations that are not within the specified limits will
 33736                                  ;	result in "unrecognized command" error.
 33737                                  ;--------------------------------------------------------------------------
 33738                                  
 33739                                  ;**************************************************************************
 33740                                  ;									  *
 33741                                  ; function: parse the parameters of stacks= command.			  *
 33742                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 33743                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 33744                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 33745                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 33746                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 33747                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 33748                                  ;	    (or if "0,0" pair has been entered.)			  *
 33749                                  ; input :								  *
 33750                                  ;	es:si -> parameters in command line.				  *
 33751                                  ; output:								  *
 33752                                  ;	set the variables stack_count,stack_size.			  *
 33753                                  ;									  *
 33754                                  ; subroutines to be called:						  *
 33755                                  ;	sysinit_parse							  *
 33756                                  ; logic:								  *
 33757                                  ; {									  *
 33758                                  ;	set di points to stks_parms;					  *
 33759                                  ;	set dx,cx to 0; 						  *
 33760                                  ;	while (end of command line)					  *
 33761                                  ;	{ sysinit_parse;						  *
 33762                                  ;	  if (no error) then						  *
 33763                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 33764                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 33765                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 33766                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 33767                                  ;	     }								  *
 33768                                  ;	  else	/*error exit*/						  *
 33769                                  ;	     error exit;						  *
 33770                                  ;	};								  *
 33771                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 33772                                  ;	if o.k.,then set stack_count,stack_size;			  *
 33773                                  ;	 else error_exit;						  *
 33774                                  ; };									  *
 33775                                  ;**************************************************************************
 33776                                  
 33777                                  tryk:
 33778                                          ;if      stacksw
 33779                                  
 33780 0000273F 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 33781 00002742 7402                    	je	short do_tryk
 33782                                  skip_it4:
 33783 00002744 EB79                    	jmp	short trys	; 15/12/2022
 33784                                  do_tryk:
 33785                                  
 33786                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33787                                  ; (SYSINIT:2B33h)
 33788                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33789                                  ;%if 0
 33790                                  ;ifdef	MULTI_CONFIG
 33791 00002746 E8A219                         call	query_user              ; query the user if config_cmd
 33792 00002749 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 33793                                  ;endif
 33794                                  ;%endif	; 30/10/2022
 33795                                  
 33796                                  	; 14/12/2022
 33797                                  	; ds = cs
 33798                                  
 33799 0000274B BF[621E]                	mov	di,stks_parms
 33800 0000274E 31C9                    	xor	cx,cx
 33801                                  	; 03/01/2023
 33802                                  	;mov	dx,cx
 33803                                  do79:
 33804 00002750 E8E301                  	call	sysinit_parse
 33805 00002753 730B                    	jnc	short if79		; parse error
 33806                                  
 33807 00002755 BA[514C]                	mov	dx,badstack		; "invalid stack parameter"
 33808 00002758 E8C81D                  	call	print			;  and show messages and end the search loop.
 33809 0000275B E82B02                  	call	error_line
 33810                                  	;jmp	sr79
 33811                                  	; 11/12/2022
 33812 0000275E EB39                    	jmp	short sr79
 33813                                  if79:
 33814 00002760 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33815 00002763 7412                    	je	short en79		; then end the $endloop
 33816                                  
 33817                                  	; 14/12/2022
 33818                                  	; ds = cs
 33819                                  
 33820                                  	;;mov	ax,[cs:rv_dword]
 33821                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33822                                  	;mov	ax,[rv_dword]
 33823 00002765 A1[931D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33824                                  
 33825 00002768 83F901                  	cmp	cx,1
 33826 0000276B 7505                    	jne	short if83
 33827                                  
 33828                                  	; 14/12/2022
 33829                                  	;mov	[cs:p_stack_count],ax
 33830                                  	;jmp	short en83
 33831 0000276D A3[971E]                	mov	[p_stack_count],ax
 33832 00002770 EBDE                    	jmp	short do79
 33833                                  if83:
 33834                                  	; 14/12/2022
 33835                                  	;mov	[cs:p_stack_size],ax
 33836 00002772 A3[991E]                	mov	[p_stack_size],ax
 33837                                  en83:
 33838 00002775 EBD9                    	jmp	short do79
 33839                                  en79:
 33840                                  	; 14/12/2022
 33841                                  	; ds = cs
 33842 00002777 A1[971E]                	mov	ax,[p_stack_count]
 33843 0000277A 09C0                    	or	ax,ax
 33844 0000277C 741E                    	jz	short if87		
 33845                                  
 33846                                  	; 14/12/2022
 33847                                  	;cmp	word [p_stack_count],0
 33848                                  	;;cmp	word [cs:p_stack_count],0
 33849                                  	;je	short if87
 33850                                  
 33851                                  	; 14/12/2022
 33852 0000277E 83F808                  	cmp	ax, mincount ; 8
 33853                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 33854                                  	; 15/12/2022
 33855 00002781 721F                    	jb	short en87
 33856 00002783 833E[991E]20            	cmp	word [p_stack_size],minsize ; 32
 33857                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 33858                                  	; 15/12/2022
 33859 00002788 7218                    	jb	short en87
 33860                                  if94:
 33861                                  	; 14/12/2022
 33862                                  	; ds = cs
 33863                                  	; ax = [p_stack_count]
 33864                                  	;mov	ax,[p_stack_count]
 33865                                  	;;mov	ax,[cs:p_stack_count]
 33866 0000278A A3[8A02]                	mov	[stack_count],ax
 33867                                  	;mov	[cs:stack_count],ax
 33868                                  	;mov	ax,[cs:p_stack_size]
 33869 0000278D A1[991E]                	mov	ax,[p_stack_size]
 33870                                  	;mov	[cs:stack_size],ax
 33871 00002790 A3[8C02]                	mov	[stack_size],ax
 33872                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33873 00002793 C706[8E02]FFFF          	mov	word [stack_addr],-1
 33874                                  sr79:
 33875 00002799 E944F9                  	jmp	coff
 33876                                  
 33877                                  if87:
 33878                                  	; 14/12/2022
 33879 0000279C 3906[991E]              	cmp	[p_stack_size],ax ; 0
 33880 000027A0 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 33881                                  	;cmp	word [cs:p_stack_size],0
 33882                                  	;je	short if94
 33883                                  en87:
 33884                                  	; 15/12/2022
 33885                                  	; ([p_stack_count] is invalid, use default values)
 33886                                  	; 14/12/2022
 33887                                  	; ds = cs
 33888 000027A2 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 33889 000027A8 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 33890 000027AE C706[8E02]0000          	mov	word [stack_addr],0
 33891                                  	;mov	word [cs:stack_count],defaultcount ; 9
 33892                                  	;				; reset to default value.
 33893                                  	;mov	word [cs:stack_size],defaultsize ; 128
 33894                                  	;mov	word [cs:stack_addr],0
 33895                                  
 33896 000027B4 BA[514C]                	mov	dx,badstack
 33897 000027B7 E8691D                  	call	print
 33898 000027BA E8CC01                  	call	error_line
 33899 000027BD EBDA                    	jmp	short sr79
 33900                                  
 33901                                  ; 15/12/2022
 33902                                  %if 0
 33903                                  	mov	di,stks_parms
 33904                                  	xor	cx,cx
 33905                                  	; 03/01/2023
 33906                                  	;mov	dx,cx
 33907                                  do79:
 33908                                  	call	sysinit_parse
 33909                                  	jnc	short if79		; parse error
 33910                                  
 33911                                  	mov	dx,badstack		; "invalid stack parameter"
 33912                                  	call	print			;  and show messages and end the search loop.
 33913                                  	call	error_line
 33914                                  	;jmp	sr79
 33915                                  	; 11/12/2022
 33916                                  	jmp	short sr79
 33917                                  if79:
 33918                                  	cmp	ax,_$P_RC_EOL		; end of line?
 33919                                  	je	short en79		; then end the $endloop
 33920                                  
 33921                                  	;mov	ax,[cs:rv_dword]
 33922                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33923                                  	cmp	cx,1
 33924                                  	jne	short if83
 33925                                  
 33926                                  	mov	[cs:p_stack_count],ax
 33927                                  	jmp	short en83
 33928                                  if83:
 33929                                  	mov	[cs:p_stack_size],ax
 33930                                  en83:
 33931                                  	jmp	short do79
 33932                                  en79:
 33933                                  	cmp	word [cs:p_stack_count],0
 33934                                  	je	short if87
 33935                                  
 33936                                  	cmp	word [cs:p_stack_count],mincount ; 8
 33937                                  	jb	short ll88
 33938                                  	cmp	word [cs:p_stack_size],minsize ; 32
 33939                                  	jnb	short if88
 33940                                  ll88:
 33941                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33942                                  if88:
 33943                                  	jmp	short en87
 33944                                  
 33945                                  	; 11/12/2022
 33946                                  if94:
 33947                                  	mov	ax,[cs:p_stack_count]
 33948                                  	mov	[cs:stack_count],ax
 33949                                  	mov	ax,[cs:p_stack_size]
 33950                                  	mov	[cs:stack_size],ax
 33951                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33952                                  sr79:
 33953                                  	jmp	coff
 33954                                  
 33955                                  if87:
 33956                                  	cmp	word [cs:p_stack_size],0
 33957                                  	je	short en87
 33958                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33959                                  en87:
 33960                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 33961                                  	jne	short if94
 33962                                  
 33963                                  	mov	word [cs:stack_count],defaultcount ; 9
 33964                                  					; reset to default value.
 33965                                  	mov	word [cs:stack_size],defaultsize ; 128
 33966                                  	mov	word [cs:stack_addr],0
 33967                                  
 33968                                  	mov	dx,badstack
 33969                                  	call	print
 33970                                  	call	error_line
 33971                                  	jmp	short sr79
 33972                                  
 33973                                  %endif
 33974                                  
 33975                                  ; 11/12/2022
 33976                                  %if 0 
 33977                                  if94:
 33978                                  	mov	ax,[cs:p_stack_count]
 33979                                  	mov	[cs:stack_count],ax
 33980                                  	mov	ax,[cs:p_stack_size]
 33981                                  	mov	[cs:stack_size],ax
 33982                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33983                                  sr79:
 33984                                  	jmp	coff
 33985                                  %endif
 33986                                  	;endif
 33987                                  
 33988                                  ;------------------------------------------------------------------------
 33989                                  ; shell command
 33990                                  ;------------------------------------------------------------------------
 33991                                  
 33992                                  trys:
 33993 000027BF 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 33994 000027C2 755A                    	jne	short tryx
 33995                                  
 33996                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33997                                  ; (SYSINIT:2BE1h)
 33998                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33999                                  ;%if 0
 34000                                  ;ifdef	MULTI_CONFIG
 34001 000027C4 E82419                  	call	query_user              ; query the user if config_cmd
 34002 000027C7 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 34003                                  	; 14/04/2024
 34004                                  	; ds = cs
 34005                                  	;mov	byte [cs:newcmd],1
 34006 000027C9 C606[F945]01            	mov	byte [newcmd],1
 34007                                  ;endif
 34008                                  ;%endif ; 30/10/2022
 34009                                  
 34010                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 34011                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34012                                  	;mov	byte [cs:command_line+1],0
 34013                                  	; 15/12/2022
 34014                                  	; ds = cs
 34015                                  	; 08/09/2023
 34016                                  	;mov	byte [command_line+1],0
 34017 000027CE C706[8A46]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 34018                                  
 34019 000027D4 BF[FD45]                        mov     di,commnd+1		; we already have the first char
 34020 000027D7 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 34021                                  storeshell:
 34022 000027DA E8A11A                  	call	getchr
 34023 000027DD 08C0                            or      al,al                   ; this is the normal case: "organize"
 34024 000027DF 741C                            jz	short getshparms	; put a ZERO right after the filename
 34025                                  
 34026 000027E1 3C20                            cmp     al," "                  ; this may happen if there are no args
 34027 000027E3 7209                            jb	short endofshell	; I suppose...
 34028 000027E5 8805                    	mov	[di],al
 34029 000027E7 47                      	inc	di
 34030                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 34031                                          ;jb	short storeshell	; commnd (the filename)
 34032                                          ;jmp	short endofshell
 34033                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34034                                  	;jmp	short storeshell
 34035                                  	; 03/01/2023
 34036 000027E8 81FF[3B46]              	cmp	di,commnd+63		; this makes sure we don't overflow
 34037 000027EC 72EC                            jb	short storeshell	; commnd (the filename)
 34038                                  	;jmp	short endofshell
 34039                                  
 34040                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34041                                  ;getshparms:
 34042                                  ;	mov     byte [di],0		; zero-terminate the filename
 34043                                  ;	mov     di,command_line+1	; prepare to process the command-line
 34044                                  ;
 34045                                  ;parmloop:
 34046                                  ;	call	getchr
 34047                                  ;	cmp	al," "
 34048                                  ;	jb	short endofparms
 34049                                  ;	mov	[di],al
 34050                                  ;	inc	di
 34051                                  ;	cmp     di,command_line+126
 34052                                  ;	jb	short parmloop
 34053                                  ;endofparms:
 34054                                  ;	mov     cx,di
 34055                                  ;	sub     cx,command_line+1
 34056                                  ;	mov     [cs:command_line],cl
 34057                                  ;
 34058                                  ;endofshell:
 34059                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 34060                                  ;					; the command-line as the case may be)
 34061                                  ;skipline:
 34062                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34063                                  ;       je	short endofline		; the line: watch for ever-present LF
 34064                                  ;call	getchr
 34065                                  ;       jnc	short skipline		; keep it up as long as there are chars
 34066                                  ;
 34067                                  ;endofline:
 34068                                  ;       jmp     conflp
 34069                                  
 34070                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34071                                  endofshell:
 34072 000027EE C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 34073                                  					; the command-line as the case may be)
 34074                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34075                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34076                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 34077                                  	;call	getchr
 34078                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34079 000027F1 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34080 000027F3 7405                    	je	short endofline		; the line: watch for ever-present LF
 34081 000027F5 E8861A                  	call	getchr
 34082                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 34083                                  	; (SYSINIT:2C3Ah)
 34084 000027F8 73F7                    	jnb	short skipline
 34085                                  	
 34086                                  endofline:
 34087 000027FA E98CF8                  	jmp     conflp
 34088                                  
 34089                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34090                                  getshparms:
 34091                                  	; 18/12/2022
 34092                                  	; al = 0
 34093 000027FD 8805                    	mov	[di],al ; 0
 34094                                  	;mov	byte [di],0		; zero-terminate the filename
 34095 000027FF BF[8B46]                	mov     di,command_line+1	; prepare to process the command-line
 34096                                  parmloop:
 34097 00002802 E8791A                  	call	getchr
 34098 00002805 3C20                    	cmp	al," " ; 20h
 34099                                  	;jb	short endofshell
 34100                                  	; 03/01/2023
 34101 00002807 7209                    	jb	short endofparms
 34102                                  
 34103 00002809 8805                    	mov	[di],al
 34104 0000280B 47                      	inc	di
 34105                                  	;jmp	short parmloop
 34106                                  	; 03/01/2023 - Retro DOS v4.2
 34107 0000280C 81FF[0847]              	cmp     di,command_line+126
 34108 00002810 72F0                    	jb	short parmloop
 34109                                  
 34110                                  	; 03/01/2023 - Retro DOS v4.2
 34111                                  endofparms:
 34112 00002812 89F9                    	mov	cx,di
 34113 00002814 81E9[8B46]              	sub	cx,command_line+1
 34114                                  	;mov	[cs:command_line],cl
 34115                                  	; 03/01/2023
 34116 00002818 880E[8A46]              	mov	[command_line],cl
 34117 0000281C EBD0                    	jmp	short endofshell
 34118                                  
 34119                                  ;------------------------------------------------------------------------
 34120                                  ; fcbs command
 34121                                  ;------------------------------------------------------------------------
 34122                                  
 34123                                  ;************************************************************************
 34124                                  ; function: parse the parameters of fcbs= command.			*
 34125                                  ;									*
 34126                                  ; input :								*
 34127                                  ;	es:si -> parameters in command line.				*
 34128                                  ; output:								*
 34129                                  ;	set the variables fcbs,keep.					*
 34130                                  ;									*
 34131                                  ; subroutines to be called:						*
 34132                                  ;	sysinit_parse							*
 34133                                  ; logic:								*
 34134                                  ; {									*
 34135                                  ;	set di points to fcbs_parms;					*
 34136                                  ;	set dx,cx to 0; 						*
 34137                                  ;	while (end of command line)					*
 34138                                  ;	{ sysparse;							*
 34139                                  ;	  if (no error) then						*
 34140                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 34141                                  ;		   fcbs = result_val._$P_picked_val;			*
 34142                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 34143                                  ;		   keep = result_val._$P_picked_val;			*
 34144                                  ;	     }								*
 34145                                  ;	  else	/*error exit*/						*
 34146                                  ;	     error exit;						*
 34147                                  ;	};								*
 34148                                  ; };									*
 34149                                  ;************************************************************************
 34150                                  
 34151                                  tryx:
 34152 0000281E 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 34153                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34154 00002821 7534                    	jne	short try1
 34155                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34156                                  	;jne	short tryy	; comment command
 34157                                  
 34158                                  ; 31/12/2022 - Retro DOS v4.2
 34159                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34160                                  ;%if 0
 34161                                  ;ifdef	MULTI_CONFIG
 34162 00002823 E8C518                  	call	query_user      ; query the user if config_cmd
 34163 00002826 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 34164                                  ;endif
 34165                                  ;%endif ; 30/10/2022
 34166                                  
 34167 00002828 BF[161E]                	mov	di,fcbs_parms
 34168 0000282B 31C9                    	xor	cx,cx
 34169                                  	; 03/01/2023
 34170                                  	;mov	dx,cx
 34171                                  do98:
 34172 0000282D E80601                  	call	sysinit_parse
 34173                                          ; 03/01/2023
 34174                                  	;jnc	short if98	; parse error
 34175                                          ;call	badparm_p	;  and show messages and end the search loop.
 34176                                  	;jmp	short sr98
 34177                                  	;------------------------
 34178                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34179 00002830 723C                    	jc	short badparm_p_coff
 34180                                  if98:
 34181 00002832 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34182 00002835 7412                    	je	short en98	; then end the $endloop
 34183                                  
 34184                                  	;;mov	al,[cs:rv_dword]
 34185                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34186                                  	; 15/12/2022
 34187                                  	; ds = cs
 34188 00002837 A0[931D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34189 0000283A 83F901                  	cmp	cx,1		; the first positional?
 34190 0000283D 7505                    	jne	short if102
 34191                                  	;mov	[cs:p_fcbs],al
 34192                                  	; 15/12/2022
 34193 0000283F A2[4B1E]                	mov	[p_fcbs],al
 34194                                  	;jmp	short en102
 34195 00002842 EBE9                    	jmp	short do98
 34196                                  if102:
 34197                                  	;mov	[cs:p_keep],al
 34198                                  	; 15/12/2022
 34199 00002844 A2[4C1E]                	mov	[p_keep],al
 34200                                  en102:
 34201 00002847 EBE4                    	jmp	short do98
 34202                                  en98:
 34203                                  	; 15/12/2022
 34204                                  	; ds = cs
 34205 00002849 A0[4B1E]                	mov	al,[p_fcbs]
 34206 0000284C A2[9E02]                	mov	[FCBS],al
 34207 0000284F C606[9F02]00            	mov	byte [KEEP],0
 34208                                  	;mov	al,[cs:p_fcbs]	 ; M017
 34209                                  	;mov	[cs:FCBS],al	 ; M017
 34210                                  	;mov	byte [cs:KEEP],0 ; M017
 34211                                  sr98:
 34212 00002854 E989F8                  	jmp	coff
 34213                                  
 34214                                  ; 31/12/2022 - Retro DOS v4.2
 34215                                  %if 0
 34216                                  
 34217                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34218                                  ;-------------------------------------------------------------------------
 34219                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34220                                  ;		line number
 34221                                  ;-------------------------------------------------------------------------
 34222                                  
 34223                                  tryy:
 34224                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34225                                  	jne	short try0
 34226                                  
 34227                                  donothing:
 34228                                  	; 15/12/2022
 34229                                  	; ds = cs
 34230                                  	dec	word [chrptr]
 34231                                  	inc	word [count]
 34232                                  	; 02/11/2022
 34233                                  	;dec	word [cs:chrptr]
 34234                                  	;inc	word [cs:count]
 34235                                  
 34236                                  	jmp	coff
 34237                                  
 34238                                  ;------------------------------------------------------------------------
 34239                                  ; rem command
 34240                                  ;------------------------------------------------------------------------
 34241                                  
 34242                                  try0:				; do nothing with this line.
 34243                                  	cmp     ah,CONFIG_REM ; '0'
 34244                                  	je	short donothing
 34245                                  
 34246                                  %endif
 34247                                  
 34248                                  ; 07/04/2019 - Retro DOS v4.0
 34249                                  
 34250                                  ;-----------------------------------------------------------------------
 34251                                  ; switches command
 34252                                  ;-----------------------------------------------------------------------
 34253                                  
 34254                                  ;***********************************************************************
 34255                                  ;								       *
 34256                                  ; function: parse the option switches specified.		       *
 34257                                  ; note - this command is intended for the future use also.	       *
 34258                                  ; when we need to set system data flag,use this command.	       *
 34259                                  ;								       *
 34260                                  ; input :							       *
 34261                                  ;	es:si -> parameters in command line.			       *
 34262                                  ; output:							       *
 34263                                  ;	p_swit_k set if /k option chosen.			       *
 34264                                  ;								       *
 34265                                  ; subroutines to be called:					       *
 34266                                  ;	sysinit_parse						       *
 34267                                  ; logic:							       *
 34268                                  ; {								       *
 34269                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 34270                                  ;	set dx,cx to 0; 					       *
 34271                                  ;	while (end of command line)				       *
 34272                                  ;	{ sysinit_parse;					       *
 34273                                  ;	  if (no error) then					       *
 34274                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 34275                                  ;		    p_swit_k = 1				       *
 34276                                  ;	       endif						       *
 34277                                  ;	  else {show error message;error exit}			       *
 34278                                  ;	};							       *
 34279                                  ; };								       *
 34280                                  ;								       *
 34281                                  ;***********************************************************************
 34282                                  
 34283                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 34284                                  
 34285                                  try1:
 34286 00002857 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 34287 0000285A 7403                    	je	short do_try1	; switches= command entered?
 34288                                  skip_it5:
 34289                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34290                                  	; (SYSINIT:2C8Ah)
 34291 0000285C E98E00                  	jmp	tryv
 34292                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34293                                  	;jmp	tryz
 34294                                  
 34295                                  do_try1:
 34296                                  
 34297                                  ; 31/12/2022 - Retro DOS v4.2
 34298                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34299                                  ;%if 0
 34300                                  ;ifdef	MULTI_CONFIG
 34301 0000285F E88918                  	call	query_user      ; query the user if config_cmd
 34302 00002862 72F8                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 34303                                  ;endif
 34304                                  ;%endif ; 30/10/2022
 34305                                  
 34306 00002864 BF[B01E]                	mov	di,swit_parms
 34307 00002867 31C9                    	xor	cx,cx
 34308                                  	; 03/01/2023
 34309                                  	;mov	dx,cx
 34310                                  do110:
 34311 00002869 E8CA00                  	call	sysinit_parse
 34312 0000286C 7306                    	jnc	short if110	; parse error
 34313                                  	;call	badparm_p	;  and show messages and end the search loop.
 34314                                  	;jmp	short sr110
 34315                                  	; -----------------------
 34316                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34317                                  badparm_p_coff:
 34318 0000286E E8F000                  	call	badparm_p
 34319 00002871 E96CF8                  	jmp	coff
 34320                                  	;------------------------
 34321                                  if110:
 34322 00002874 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34323 00002877 743C                    	je	short en110	; then jmp to $endloop for semantic check
 34324                                  
 34325                                  	; 15/12/2022
 34326                                  	; ds = cs
 34327                                  	;;cmp	word [cs:result_val_swoff],swit_k
 34328                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34329 00002879 813E[911D][CE1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34330 0000287F 7507                    	jne	short if115	;				;M059
 34331                                  	; 15/12/2022
 34332 00002881 C606[0D1F]01            	mov	byte [p_swit_k],1
 34333                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 34334 00002886 EBE1                    	jmp	short do110
 34335                                  if115:	
 34336                                  	; 15/12/2022							;M059
 34337                                  	;;cmp	word [cs:result_val_swoff],swit_t
 34338                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 34339 00002888 813E[911D][F21E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 34340                                  	;jne	short if116					;M059 M063
 34341                                  	; 14/04/2024
 34342                                  	;;;
 34343 0000288E 7507                    	jne	short if118  ; (PCDOS 7.1 IBMBIO.COM)
 34344                                  	;;; 
 34345                                  	; 15/12/2022
 34346 00002890 C606[0E1F]01            	mov	byte [p_swit_t],1
 34347                                  	;mov	byte [cs:p_swit_t],1				;M059
 34348 00002895 EBD2                    	jmp	short do110					;M059
 34349                                  
 34350                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34351                                  	;;;
 34352                                  if118:
 34353                                  	;;cmp	word [cs:result_val_swoff],swit_i ; offset "/I"
 34354                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34355 00002897 813E[911D][0A1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34356 0000289D 7507                    	jne	short if116
 34357                                  	;mov	byte [cs:p_swit_i],1	; set the flag
 34358 0000289F C606[101F]01            	mov	byte [p_swit_i],1
 34359 000028A4 EBC3                    	jmp     short do110
 34360                                  	;;;
 34361                                  if116:
 34362                                  	; 15/12/2022
 34363                                  	;;cmp	word [cs:result_val_swoff],swit_w
 34364                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 34365 000028A6 813E[911D][FE1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 34366 000028AC 75BB                    	jne	short do110					;M063
 34367                                  	; 15/12/2022
 34368 000028AE C606[0F1F]01            	mov	byte [p_swit_w],1
 34369                                  	;mov	byte [cs:p_swit_w],1				;M063
 34370 000028B3 EBB4                    	jmp	short do110					;M063
 34371                                  en110:
 34372                                  	; 15/12/2022
 34373                                  	; ds = cs
 34374 000028B5 803E[0D1F]01            	cmp	byte [p_swit_k],1
 34375                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 34376 000028BA 1E                      	push	ds
 34377                                  	;;mov	ax,Bios_Data
 34378                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 34379                                  	; 21/10/2022
 34380 000028BB B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 34381 000028BE 8ED8                    	mov	ds,ax
 34382 000028C0 750A                    	jne	short if117
 34383                                  	; 14/04/2024
 34384 000028C2 C606[7E04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 34385                                  				; BIOSDATA:047Eh for PCDOS 7.1 IBMBIO.COM
 34386 000028C7 C606[7F04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 34387                                  				; BIOSDATA:047Fh for PCDOS 7.1 IBMBIO.COM
 34388                                  if117:
 34389                                  	; 15/12/2022
 34390                                  	; ds <> cs
 34391 000028CC 2EA0[0E1F]              	mov	al,[cs:p_swit_t]				;M059
 34392 000028D0 A2[8B04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 34393                                  		; 14/04/2024	; BIOSDATA:048Bh for PCDOS 7.1 IBMBIO.COM
 34394 000028D3 2E803E[0F1F]00          	cmp	byte [cs:p_swit_w],0				;M063
 34395 000028D9 740E                    	je	short skip_dos_flag				;M063
 34396 000028DB 06                      	push	es
 34397 000028DC 53                      	push	bx
 34398 000028DD B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 34399 000028DF CD21                    	int	21h						;M063
 34400                                  			; DOS - 2+ internal - GET LIST OF LISTS
 34401                                  			; Return: ES:BX -> DOS list of lists
 34402                                  	;or	bytes [es:86h],2
 34403 000028E1 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 34404 000028E7 5B                      	pop	bx
 34405 000028E8 07                      	pop	es
 34406                                  skip_dos_flag:							;M063
 34407 000028E9 1F                      	pop	ds
 34408                                  sr110:
 34409 000028EA E9F3F7                  	jmp	coff
 34410                                  
 34411                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34412                                  ; (SYSINIT:2D14h)
 34413                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34414                                  ;%if 0
 34415                                  
 34416                                  tryv:
 34417                                  
 34418                                  ;ifdef	MULTI_CONFIG
 34419                                  ;------------------------------------------------------------------------
 34420                                  ; set command (as in "set var=value<cr/lf>")
 34421                                  ;------------------------------------------------------------------------
 34422                                  
 34423 000028ED 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 34424 000028F0 750F                    	jne	short tryn
 34425 000028F2 E8F617                  	call	query_user      ; query the user if config_cmd
 34426 000028F5 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 34427 000028F7 E8ED13                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 34428 000028FA 73EE                    	jnc	short sr110	; no error
 34429                                  err:    
 34430 000028FC E88A00                  	call	error_line      ; whoops, display error in line XXX
 34431 000028FF EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 34432                                  
 34433                                  ;------------------------------------------------------------------------
 34434                                  ; numlock command (as in "numlock=on|off")
 34435                                  ;------------------------------------------------------------------------
 34436                                  tryn:
 34437 00002901 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 34438                                  	; 18/03/2025 - MiniDOS 1.0
 34439 00002904 750C                    	jne	short tryy
 34440                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34441                                  	;jne	short tryt
 34442                                  
 34443 00002906 E8E217                  	call	query_user      ; query the user if config_cmd
 34444 00002909 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 34445 0000290B E86E10                  	call	set_numlock
 34446 0000290E 72EC                    	jc	short err
 34447 00002910 EBD8                    	jmp	short sr110	; all done
 34448                                  
 34449                                  ;endif	;MULTI_CONFIG
 34450                                  
 34451                                  ; 18/03/2025
 34452                                  %if 0
 34453                                  
 34454                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34455                                  ;------------------------------------------------------------------------
 34456                                  ; dosdata command
 34457                                  ;------------------------------------------------------------------------
 34458                                  tryt:
 34459                                  	;cmp	ah,54h ; 'T'
 34460                                  	cmp	ah,CONFIG_DOSDATA ; 'T' ; PCDOS 7 new config cmd
 34461                                  	jne	short tryy
 34462                                  
 34463                                  	call	query_user
 34464                                  	jc	short tryy
 34465                                  
 34466                                  	mov	di,dosdata_parms
 34467                                  	xor	cx,cx
 34468                                  	; 14/04/2024 - Retro DOS v5.0
 34469                                  	;mov	dx,cx ; 0
 34470                                  do120:
 34471                                  	call	sysinit_parse
 34472                                  	jnc	short if120
 34473                                  
 34474                                  	;call	badparm_p
 34475                                  	;jmp	short en120
 34476                                  	; 14/04/2024 - Retro DOS v5.0
 34477                                  	jmp	badparm_p_coff
 34478                                  if120:
 34479                                  	;cmp	ax,0FFFFh
 34480                                  	cmp	ax,_$P_RC_EOL ; -1 ; end of line?
 34481                                  	jz	short en120
 34482                                  	cmp	byte [result_val_itag],1 ; tag 1 (UMB)
 34483                                  				; [result_val+_$P_Result_Blk.Item_Tag]
 34484                                   	jnz	short if121
 34485                                  	mov	byte [dosdata_umb],1 ; DOSDATA=UMB (1) NOUMB (0)
 34486                                  	;jmp	short sr120
 34487                                  	; 14/04/2024
 34488                                  	jmp	short do120
 34489                                  if121:
 34490                                  	mov	byte [dosdata_umb],0 ; DOSDATA=UMB (1) NOUMB (0)
 34491                                  sr120:
 34492                                  	jmp	short do120
 34493                                  	; 14/04/2024
 34494                                  ;en120:
 34495                                  	;jmp	coff
 34496                                  
 34497                                  %endif
 34498                                  
 34499                                  
 34500                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34501                                  ;-------------------------------------------------------------------------
 34502                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34503                                  ;		line number
 34504                                  ;-------------------------------------------------------------------------
 34505                                  
 34506                                  	; 31/12/2022
 34507                                  tryy:
 34508 00002912 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34509 00002915 750B                    	jne	short try0
 34510                                  
 34511                                  donothing:
 34512                                  	; 15/12/2022
 34513                                  	; ds = cs
 34514 00002917 FF0E[5803]              	dec	word [chrptr]
 34515 0000291B FF06[5403]              	inc	word [count]
 34516                                  	; 02/11/2022
 34517                                  	;dec	word [cs:chrptr]
 34518                                  	;inc	word [cs:count]
 34519                                  en120:		; 14/04/2024
 34520 0000291F E9BEF7                  	jmp	coff
 34521                                  
 34522                                  ;------------------------------------------------------------------------
 34523                                  ; rem command
 34524                                  ;------------------------------------------------------------------------
 34525                                  
 34526                                  try0:				; do nothing with this line.
 34527 00002922 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 34528 00002925 74F0                    	je	short donothing
 34529                                  
 34530                                  ;%endif	; 30/10/2022
 34531                                  
 34532                                  ; 30/10/2022
 34533                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 34534                                  
 34535                                  ;------------------------------------------------------------------------
 34536                                  ; bogus command
 34537                                  ;------------------------------------------------------------------------
 34538                                  
 34539                                  tryz:
 34540 00002927 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 34541                                  	; 31/12/2022
 34542 0000292A 74EB                    	je	short donothing
 34543                                  	; 02/11/2022
 34544                                  	;je	short tryz_donothing
 34545                                  
 34546 0000292C FF0E[5803]              	dec	word [chrptr]
 34547 00002930 FF06[5403]              	inc	word [count]
 34548 00002934 EB1F                    	jmp	short badop
 34549                                  
 34550                                  ; 31/12/2022
 34551                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34552                                  ;tryz_donothing:
 34553                                  ;	jmp	donothing
 34554                                  
 34555                                  ;------------------------------------------------------------------------------
 34556                                  
 34557                                  sysinit_parse:
 34558                                  
 34559                                  ;------------------------------------------------------------------------------
 34560                                  ;set up registers for sysparse
 34561                                  ;in)	es:si -> command line in confbot
 34562                                  ;	di -> offset of the parse control definition.
 34563                                  ;
 34564                                  ;out)	calls sysparse.
 34565                                  ;	carry will set if parse error.
 34566                                  ;	*** the caller should check the eol condition by looking at ax
 34567                                  ;	*** after each call.
 34568                                  ;	*** if no parameters are found,then ax will contain a error code.
 34569                                  ;	*** if the caller needs to look at the synomym@ of the result,
 34570                                  ;	***  the caller should use cs:@ instead of es:@.
 34571                                  ;	cx register should be set to 0 at the first time the caller calls this
 34572                                  ;	 procedure.
 34573                                  ;	ax - exit code
 34574                                  ;	bl - terminated delimeter code
 34575                                  ;	cx - new positional ordinal
 34576                                  ;	si - set to pase scanned operand
 34577                                  ;	dx - selected result buffer
 34578                                  ;------------------------------------------------------------------------------
 34579                                  
 34580                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34581                                  	; (SYSINIT:2D78h)
 34582                                  
 34583                                  	; 14/04/2024 - Retro DOS v5.0
 34584                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:32F3h)
 34585                                  
 34586                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34587                                  	; ds = cs
 34588 00002936 8C06[E514]              	mov	[badparm_seg],es	;save the pointer to the parm
 34589 0000293A 8936[E314]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 34590                                  
 34591                                  	; 24/10/2022
 34592 0000293E 06                      	push	es			;save es,ds
 34593 0000293F 1E                      	push	ds
 34594                                  
 34595 00002940 06                      	push	es
 34596 00002941 1F                      	pop	ds			;now ds:si -> command line
 34597                                  
 34598 00002942 0E                      	push	cs
 34599 00002943 07                      	pop	es			;now es:di -> control definition
 34600                                  
 34601                                  	; 09/09/2023
 34602                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 34603                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 34604                                  	
 34605                                  	;mov	dx,0
 34606                                  	; 04/01/2023
 34607 00002944 29D2                    	sub	dx,dx ; 0
 34608 00002946 E844EC                  	call	SysParse
 34609                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 34610                                  	; 06/09/2023
 34611 00002949 21C0                    	and	ax,ax
 34612                                  
 34613                                  ;**cas note: when zero true after cmp, carry clear
 34614                                  
 34615                                  	;je	short ll4
 34616                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 34617                                  	; 12/12/2022
 34618 0000294B 7405                    	je	short en4 ; cf=0
 34619 0000294D 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 34620                                  	;jne	short if4
 34621                                  	; 12/12/2022
 34622 00002950 7400                    	je	short en4 ; cf=0
 34623                                  	; 06/09/2023
 34624                                  	; cf=1
 34625                                  
 34626                                  ; 12/12/2022
 34627                                  ;ll4:
 34628                                  ;	; 12/12/2022
 34629                                  ;	; cf=0
 34630                                  ;	;clc
 34631                                  ;	jmp	short en4
 34632                                  
 34633                                  if4:
 34634                                  	; 24/10/2022
 34635                                  	; 06/09/2023 (cf=1)
 34636                                  	;stc
 34637                                  en4:
 34638 00002952 1F                      	pop	ds
 34639 00002953 07                      	pop	es
 34640 00002954 C3                      	retn
 34641                                  
 34642                                  ; 11/12/2022
 34643                                  %if 0
 34644                                  
 34645                                  ;----------------------------------------------------------------------------
 34646                                  ;
 34647                                  ; procedure : badop_p
 34648                                  ;
 34649                                  ;             same thing as badop,but will make sure to set ds register back
 34650                                  ;             to sysinitseg and return back to the caller.
 34651                                  ;
 34652                                  ;----------------------------------------------------------------------------
 34653                                  
 34654                                  badop_p:
 34655                                  	push	cs
 34656                                  	pop	ds		;set ds to configsys seg.
 34657                                  	mov	dx,badopm
 34658                                  	call	print
 34659                                          ;call	error_line
 34660                                  	;retn
 34661                                  	; 11/12/2022
 34662                                  	jmp	error_line
 34663                                  
 34664                                  %endif
 34665                                  
 34666                                  ;----------------------------------------------------------------------------
 34667                                  ;
 34668                                  ; label : badop
 34669                                  ;
 34670                                  ;----------------------------------------------------------------------------
 34671                                  
 34672                                  badop:	
 34673 00002955 BA[124B]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 34674 00002958 E8C81B                  	call	print
 34675 0000295B E82B00                  	call	error_line	;show "error in config.sys ..." .
 34676 0000295E E97FF7                  	jmp	coff
 34677                                  
 34678                                  ;----------------------------------------------------------------------------
 34679                                  ;
 34680                                  ; procedure : badparm_p
 34681                                  ;
 34682                                  ;             show "bad command or parameters - xxxxxx"
 34683                                  ;             in badparm_seg,badparm_off -> xxxxx
 34684                                  ;
 34685                                  ;----------------------------------------------------------------------------
 34686                                  
 34687                                  	; 24/10/2022
 34688                                  badparm_p:
 34689                                  	; 11/12/2022
 34690                                  	; ds = cs
 34691                                  	; 11/12/2022
 34692                                  	;push	ds ; *
 34693 00002961 52                      	push	dx
 34694 00002962 56                      	push	si
 34695                                  
 34696                                  	; 11/12/2022
 34697                                  	; ds = cs
 34698                                  	;push	cs
 34699                                  	;pop	ds
 34700                                  
 34701 00002963 BA[394B]                	mov	dx,badparm
 34702 00002966 E8BA1B                  	call	print			; "bad command or parameters - "
 34703 00002969 C536[E314]              	lds	si,[badparm_ptr]
 34704                                  
 34705                                  ;	print "xxxx" until cr.
 34706                                  
 34707                                  do1:
 34708 0000296D 8A14                    	mov	dl,[si]			; get next character
 34709 0000296F 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 34710 00002972 7407                    	je	short en1		; exit loop if so
 34711                                  
 34712 00002974 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 34713 00002976 CD21                    	int	21h			; display character
 34714 00002978 46                      	inc	si			; next character
 34715 00002979 EBF2                    	jmp	short do1
 34716                                  en1:
 34717 0000297B 0E                      	push	cs
 34718 0000297C 1F                      	pop	ds
 34719                                  
 34720 0000297D BA[364B]                	mov	dx,crlfm
 34721 00002980 E8A01B                  	call	print
 34722 00002983 E80300                  	call	error_line
 34723                                  
 34724 00002986 5E                      	pop	si
 34725 00002987 5A                      	pop	dx
 34726                                  	; 11/12/2022
 34727                                  	;pop	ds ; *
 34728                                  badparmp_ret:
 34729 00002988 C3                      	retn
 34730                                  
 34731                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34732                                  %if 0
 34733                                  
 34734                                  ;----------------------------------------------------------------------------
 34735                                  ;
 34736                                  ; procedure : getchr
 34737                                  ;
 34738                                  ;----------------------------------------------------------------------------
 34739                                  
 34740                                  	; 24/10/2022
 34741                                  getchr:
 34742                                  	; 12/12/2022
 34743                                  	;push	cx
 34744                                  	;mov	cx,[count]
 34745                                  	;jcxz	nochar
 34746                                  	; 12/12/2022
 34747                                  	cmp	word [count],1 
 34748                                  	jb	short nochar ; cf=1 ([count] = 0)
 34749                                  	
 34750                                  	mov	si,[chrptr]
 34751                                  	mov	al,[es:si]
 34752                                  	dec	word [count]
 34753                                  	inc	word [chrptr]
 34754                                  	; 12/12/202
 34755                                  	; cf=0
 34756                                  	;clc
 34757                                  ;get_ret:
 34758                                  	;pop	cx
 34759                                  	;retn
 34760                                  nochar: 
 34761                                  	; 12/12/2022
 34762                                  	; cf=1
 34763                                  	;stc
 34764                                  	;jmp	short get_ret
 34765                                  	
 34766                                  	retn
 34767                                  %endif
 34768                                  
 34769                                  ; 11/12/2022
 34770                                  %if 0
 34771                                  
 34772                                  ;----------------------------------------------------------------------------
 34773                                  ;
 34774                                  ; procedure : incorrect_order
 34775                                  ;
 34776                                  ;             show "incorrect order in config.sys ..." message.
 34777                                  ;
 34778                                  ;----------------------------------------------------------------------------
 34779                                  
 34780                                  incorrect_order:
 34781                                  	mov	dx,badorder
 34782                                  	call	print
 34783                                  	call	showlinenum
 34784                                  	retn
 34785                                  
 34786                                  %endif
 34787                                  
 34788                                  ;----------------------------------------------------------------------------
 34789                                  ;
 34790                                  ; procedure : error_line
 34791                                  ;
 34792                                  ;             show "error in config.sys ..." message.
 34793                                  ;
 34794                                  ;----------------------------------------------------------------------------
 34795                                  
 34796                                  	; 11/12/2022
 34797                                  	; 24/10/2022
 34798                                  error_line:
 34799                                  	; 11/12/2022
 34800                                  	; ds = cs
 34801                                  	;push	cs
 34802                                  	;pop	ds
 34803                                  
 34804 00002989 BA[6E4C]                	mov	dx,errorcmd
 34805 0000298C E8941B                  	call	print
 34806                                  	;call	showlinenum
 34807                                  	;retn
 34808                                  	; 11/12/2022
 34809                                  	;jmp	short shortlinemum
 34810                                  
 34811                                  ;----------------------------------------------------------------------------
 34812                                  ;
 34813                                  ; procedure : showlinenum
 34814                                  ;
 34815                                  ; convert the binary linecount to decimal ascii string in showcount
 34816                                  ; and display showcount at the current curser position.
 34817                                  ; in.) linecount
 34818                                  ;
 34819                                  ; out) the number is printed.
 34820                                  ;
 34821                                  ;----------------------------------------------------------------------------
 34822                                  
 34823                                  	; 11/12/2022
 34824                                  	; ds = cs
 34825                                  	; 24/10/2022
 34826                                  showlinenum:
 34827 0000298F 06                      	push	es
 34828                                  	; 11/12/2022
 34829                                  	;push	ds
 34830 00002990 57                      	push	di
 34831                                  
 34832 00002991 0E                      	push	cs
 34833 00002992 07                      	pop	es		; es=cs
 34834                                  
 34835                                  	; 11/12/2022
 34836                                  	;push	cs
 34837                                  	;pop	ds
 34838                                  
 34839 00002993 BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 34840 00002996 B90A00                  	mov	cx,10		; decimal divide factor
 34841                                  	;mov	ax,[cs:linecount]
 34842                                  	; 11/12/2022
 34843 00002999 A1[AD02]                	mov	ax,[linecount]
 34844                                  sln_loop:
 34845                                  	; 11/12/2022
 34846 0000299C 39C8                    	cmp	ax,cx ; < 10 ?
 34847                                  	;cmp	ax,10		; < 10?
 34848 0000299E 720C                    	jb	short sln_last
 34849                                  
 34850 000029A0 31D2                    	xor	dx,dx
 34851 000029A2 F7F1                    	div	cx	; cx = 10
 34852 000029A4 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 34853 000029A7 8815                    	mov	[di],dl
 34854 000029A9 4F                      	dec	di
 34855 000029AA EBF0                    	jmp	short sln_loop
 34856                                  
 34857                                  sln_last:
 34858 000029AC 0C30                    	or	al,30h	; "0"
 34859 000029AE 8805                    	mov	[di],al
 34860 000029B0 89FA                    	mov	dx,di
 34861 000029B2 E86E1B                  	call	print		; show it.
 34862 000029B5 5F                      	pop	di
 34863                                  	; 11/12/2022
 34864                                  	;pop	ds
 34865 000029B6 07                      	pop	es
 34866 000029B7 C3                      	retn
 34867                                  
 34868                                  ; 07/04/2019 - Retro DOS v4.0
 34869                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 34870                                  
 34871                                  ;----------------------------------------------------------------------------
 34872                                  ;
 34873                                  ; procedure : ProcDOS
 34874                                  ;
 34875                                  ;	Process the result of DOS= parsing
 34876                                  ;
 34877                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 34878                                  ;				= 2 for DOS=LOW
 34879                                  ;				= 3 for DOS=UMB
 34880                                  ;				= 4 for DOS=NOUMB
 34881                                  ;----------------------------------------------------------------------------
 34882                                  
 34883                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 34884                                  	; (SYTSINIT:2AB5h)
 34885                                  ProcDOS:
 34886                                  	; 01/01/2023
 34887                                  	; ds = cs
 34888 000029B8 30E4                    	xor	ah,ah
 34889                                  	;;mov	al,[cs:result_val_itag]
 34890                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 34891                                  	; 01/01/2023
 34892 000029BA A0[901D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 34893 000029BD 48                      	dec	ax
 34894 000029BE 7415                    	jz	short pd_hi
 34895 000029C0 48                      	dec	ax
 34896 000029C1 740E                    	jz	short pd_lo
 34897 000029C3 48                      	dec	ax
 34898 000029C4 7405                    	jz	short pd_umb
 34899                                  	;;mov	byte [cs:DevUMB],0
 34900                                  	; 18/12/2022
 34901                                  	;mov	byte [cs:DevUMB],ah ; 0
 34902                                  	; 01/01/2023
 34903 000029C6 8826[9C1F]              	mov	byte [DevUMB],ah ; 0
 34904 000029CA C3                      	retn
 34905                                  pd_umb:
 34906                                  	; 01/01/2023
 34907 000029CB C606[9C1F]FF            	mov	byte [DevUMB],0FFh
 34908                                  	;mov	byte [cs:DevUMB],0FFh
 34909 000029D0 C3                      	retn
 34910                                  pd_lo:
 34911                                  	; 01/01/2023
 34912 000029D1 A2[6C02]                	mov	[runhigh],al ; 0
 34913                                  	; 18/12/2022
 34914                                  	;mov	[cs:runhigh],al ; 0
 34915                                  	;;mov	byte [cs:runhigh],0
 34916 000029D4 C3                      	retn
 34917                                  pd_hi:
 34918                                  	; 01/01/2023
 34919 000029D5 C606[6C02]FF            	mov	byte [runhigh],0FFh
 34920                                  	;mov	byte [cs:runhigh],0FFh
 34921                                  limx:	; 11/12/2022
 34922 000029DA C3                      	retn
 34923                                  
 34924                                  ;----------------------------------------------------------------------------
 34925                                  ;
 34926                                  ; procedure : LieInt12Mem
 34927                                  ;
 34928                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 34929                                  ;		alloclim set to the limit of low memory.
 34930                                  ;
 34931                                  ;	Output : none
 34932                                  ;
 34933                                  ;	Changes the ROM BIOS variable which stores the total low memory
 34934                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 34935                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 34936                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 34937                                  ;	converted into Ks and stored in 40:13h
 34938                                  ;
 34939                                  ;----------------------------------------------------------------------------
 34940                                  
 34941                                  LieInt12Mem:
 34942                                  	; 11/12/2022
 34943                                  	; ds = cs
 34944 000029DB A1[A302]                	mov	ax,[ALLOCLIM]
 34945                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 34946                                  					; assuming that it is 3Com
 34947 000029DE E84200                  	call	IsIt3Com		; Is it 3Com driver?
 34948 000029E1 740A                    	jz	short lim_set		; yes, lie to him differently
 34949                                  	; 13/05/2019
 34950                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 34951                                  	;je	short limx		; no, don't lie
 34952                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 34953                                  	; 11/12/2022
 34954                                  	; ds = cs
 34955 000029E3 803E[AB1F]00            	cmp	byte [DeviceHi],0
 34956 000029E8 74F0                    	je	short limx
 34957 000029EA A1[911F]                	mov	ax,[DevLoadEnd]
 34958                                  lim_set:
 34959                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34960                                  	; 11/12/2022
 34961                                  	;call	SetInt12Mem
 34962                                  ;limx:
 34963                                  	;retn
 34964                                  	
 34965                                  	;jmp	short SetInt12Mem 
 34966                                  
 34967                                  ;----------------------------------------------------------------------------
 34968                                  ;
 34969                                  ; procedure : SetInt12Mem
 34970                                  ;
 34971                                  ;	Input : AX = Memory size to be set (in paras)
 34972                                  ;	Output : none
 34973                                  ;
 34974                                  ;	Sets the variable 40:13 to the memory size passed in AX
 34975                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 34976                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 34977                                  ;	restoring the value of 40:13
 34978                                  ;
 34979                                  ;----------------------------------------------------------------------------
 34980                                  
 34981                                  	; 01/11/2022
 34982                                  SetInt12Mem:
 34983 000029ED 1E                      	push	ds
 34984 000029EE BB4000                  	mov	bx,40h
 34985 000029F1 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 34986 000029F3 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 34987                                  	;mov	[cs:OldInt12Mem],bx	; save it
 34988 000029F7 B106                    	mov	cl,6
 34989 000029F9 D3E8                    	shr	ax,cl			; convert paras into Ks
 34990 000029FB A31300                  	mov	[13h],ax		; Lie
 34991                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 34992 000029FE 1F                      	pop	ds
 34993                                  	; 14/04/2024
 34994                                  	; ds = cs
 34995 000029FF 891E[AF1F]              	mov	[OldInt12Mem],bx
 34996 00002A03 C606[AE1F]FF            	mov	byte [Int12Lied],0FFh
 34997                                  ;limx:
 34998 00002A08 C3                      	retn
 34999                                  
 35000                                  ;----------------------------------------------------------------------------
 35001                                  ;
 35002                                  ; procedure : TrueInt12Mem
 35003                                  ;
 35004                                  ;	Input : Int12Lied = 0 if we are not lying currently
 35005                                  ;			  = 0ffh if we are lying
 35006                                  ;		OldInt12Mem = Saved value of 40:13h
 35007                                  ;
 35008                                  ;	Output : none
 35009                                  ;
 35010                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 35011                                  ;	and resets the flag which indicates that we were lying
 35012                                  ;
 35013                                  ;----------------------------------------------------------------------------
 35014                                  
 35015                                  TrueInt12Mem:
 35016                                  	; 11/12/2022
 35017                                  	; ds = cs
 35018 00002A09 803E[AE1F]00            	cmp	byte [Int12Lied],0
 35019                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 35020                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 35021                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 35022 00002A0E 7412                    	je	short timx		; no, we weren't
 35023                                  	; 18/12/2022
 35024 00002A10 B84000                  	mov	ax,40h
 35025 00002A13 8826[AE1F]              	mov	[Int12Lied],ah ; 0
 35026                                  	;mov	byte [Int12Lied],0
 35027                                  	;mov	byte [cs:Int12Lied],0
 35028 00002A17 1E                      	push	ds
 35029                                  	;mov	ax,40h
 35030 00002A18 8ED8                    	mov	ds,ax
 35031 00002A1A 2EA1[AF1F]              	mov	ax,[cs:OldInt12Mem]
 35032 00002A1E A31300                  	mov	[13h],ax		; restore INT 12 memory
 35033 00002A21 1F                      	pop	ds
 35034                                  timx:
 35035 00002A22 C3                      	retn
 35036                                  
 35037                                  ;----------------------------------------------------------------------------
 35038                                  ;
 35039                                  ; procedure : IsIt3Com?
 35040                                  ;
 35041                                  ;	Input : DevEntry = Seg:0 of device driver
 35042                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 35043                                  ;		 else Zero flag is reset
 35044                                  ;
 35045                                  ;----------------------------------------------------------------------------
 35046                                  
 35047                                  IsIt3Com:
 35048                                  	; 11/12/2022
 35049                                  	; ds = cs
 35050 00002A23 1E                      	push	ds
 35051 00002A24 06                      	push	es
 35052 00002A25 56                      	push	si
 35053                                  	; 11/12/2022
 35054 00002A26 C536[931F]              	lds	si,[DevEntry]
 35055                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 35056 00002A2A 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 35057 00002A2D 0E                      	push	cs
 35058 00002A2E 07                      	pop	es
 35059 00002A2F BF[B11F]                	mov	di,ThreeComName
 35060 00002A32 B90800                  	mov	cx,8			; name length
 35061 00002A35 F3A6                    	rep	cmpsb
 35062 00002A37 5E                      	pop	si
 35063 00002A38 07                      	pop	es
 35064 00002A39 1F                      	pop	ds
 35065 00002A3A C3                      	retn
 35066                                  
 35067                                  ;M020 : BEGIN
 35068                                  ;----------------------------------------------------------------------------
 35069                                  
 35070                                  UpdatePDB:
 35071 00002A3B 1E                      	push	ds
 35072 00002A3C B462                    	mov	ah,62h
 35073 00002A3E CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 35074 00002A40 8EDB                    	mov	ds,bx
 35075 00002A42 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 35076                                  	;mov	[2],bx
 35077 00002A47 891E0200                	mov	[PDB.BLOCK_LEN],bx
 35078 00002A4B 1F                      	pop	ds
 35079 00002A4C C3                      	retn
 35080                                  
 35081                                  ; M020 : END
 35082                                  
 35083                                  ;----------------------------------------------------------------------------
 35084                                  
 35085                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35086                                  ;%if 0
 35087                                  
 35088                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35089                                  ; (SYSINIT:2EEEh)
 35090                                  
 35091                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 35092                                  ;include highexit.inc	; umb's, etc
 35093                                  
 35094                                  ; ----------------------------------------------------------------------
 35095                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 35096                                  ; ----------------------------------------------------------------------
 35097                                  ; 07/04/2019 - Retro DOS v4.0
 35098                                  
 35099                                  ;******************************************************************************
 35100                                  ;
 35101                                  ; This file contains routines needed to parse and implement user-given
 35102                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 35103                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 35104                                  ; the variables in highvar.inc, for use by the rest of the routines.
 35105                                  ;
 35106                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 35107                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 35108                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 35109                                  ;    DH/LH module opts
 35110                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 35111                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 35112                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 35113                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 35114                                  ; available during the load.
 35115                                  ;
 35116                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 35117                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 35118                                  ; upper-memory block which was not specified by the user... in addition, if
 35119                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 35120                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 35121                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 35122                                  ; free any UMBs so allocated.
 35123                                  ;
 35124                                  ; When a device driver loads, there is the additional problem of allocating its
 35125                                  ; initial load site; this should be restricted to the first UMB specified on
 35126                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 35127                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 35128                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 35129                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 35130                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 35131                                  ;
 35132                                  ;******************************************************************************
 35133                                  
 35134                                  SWTCH	equ	'/'		; Switch character
 35135                                  
 35136                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 35137                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 35138                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 35139                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 35140                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 35141                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 35142                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 35143                                  
 35144                                  CR	equ	0Dh		; Carriage Return
 35145                                  LF	equ	0Ah		; Line Feed
 35146                                  TAB	equ	09h		; Tab character (^I)
 35147                                  
 35148                                  ; -----------------------------------------------------------------------------
 35149                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 35150                                  ; -----------------------------------------------------------------------------
 35151                                  ; ENTRY:       None
 35152                                  ; EXIT:        Variables listed in highvar.inc are initialized
 35153                                  ; ERROR EXIT:  None
 35154                                  ; USES:        Flags, variables in highvar.inc
 35155                                  ; -----------------------------------------------------------------------------
 35156                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 35157                                  ; are largely ignored, but it is initialized nonetheless.
 35158                                  ; -----------------------------------------------------------------------------
 35159                                  
 35160                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35161                                  ; (SYSINIT:2EEEh)
 35162                                  
 35163                                  InitVar:
 35164                                  	; 01/01/2023
 35165                                  	; ds = cs
 35166                                  
 35167                                  	;pushreg <ax, cx, di, es>
 35168                                  	; 03/01/2023
 35169                                  	;push	ax
 35170                                  	;push	cx
 35171                                  	;push	di
 35172 00002A4D 06                      	push	es
 35173                                  
 35174                                  	;dataseg es			;Point ES into appropriate data segment
 35175 00002A4E 0E                      	push	cs
 35176 00002A4F 07                      	pop	es
 35177                                  
 35178 00002A50 31C0                    	xor	ax,ax
 35179                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 35180                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 35181                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 35182                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 35183                                  	;				;Later is the # of the 1st spec'd UMB
 35184                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 35185                                  
 35186                                  	; 01/01/2023
 35187                                  	; ds = cs
 35188 00002A52 A2[561F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 35189 00002A55 A2[551F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 35190 00002A58 A3[571F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 35191 00002A5B C606[591F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 35192                                  					;Later is the # of the 1st spec'd UMB
 35193 00002A60 A2[8C1F]                	mov	[fm_argc], al		;Start with zero args having been read
 35194                                  
 35195 00002A63 FC                      	cld
 35196                                  
 35197 00002A64 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 35198 00002A67 BF[5A1F]                	mov	di,UmbUsed		;on the UmbUsed array,
 35199 00002A6A F3AA                    	rep	stosb			;	Store 0
 35200                                  
 35201                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 35202                                  	; 01/01/2033
 35203 00002A6C B110                    	mov	cl,MAXUMB ; 16
 35204 00002A6E BF[6A1F]                	mov	di,UmbSize		;on the UmbSize array,
 35205 00002A71 F3AB                    	rep	stosw			;	Store 0
 35206                                  
 35207                                  	;normseg es			; Return ES
 35208                                  
 35209                                  	;popreg	<es, di, cx, ax>
 35210 00002A73 07                      	pop	es
 35211                                  	; 03/01/2023
 35212                                  	;pop	di
 35213                                  	;pop	cx
 35214                                  	;pop	ax	 	
 35215                                  
 35216 00002A74 C3                      	retn
 35217                                  
 35218                                  ; -----------------------------------------------------------------------------
 35219                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 35220                                  ; -----------------------------------------------------------------------------
 35221                                  ; ENTRY   : None
 35222                                  ; EXIT    : None
 35223                                  ; ERROR   : None
 35224                                  ; USES    : Flags, fm_umb, fm_strat
 35225                                  ; -----------------------------------------------------------------------------
 35226                                  
 35227                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35228                                  	; (SYSINIT:2F22h)
 35229                                  FixMem:
 35230                                  	; 01/01/2023
 35231                                  	;push	ax
 35232                                  	;push	bx
 35233                                  	;push	cx
 35234                                  	;push	dx
 35235 00002A75 06                      	push	es
 35236                                  
 35237 00002A76 E84900                  	call	fm_link		; Link in UMBs
 35238                                  
 35239 00002A79 E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 35240 00002A7C 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 35241                                  
 35242 00002A7E 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 35243                                  
 35244                                  ; - Walk MCB Chain ------------------------------------------------------------
 35245                                  
 35246 00002A80 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 35247 00002A82 89D1                    	mov 	cx,dx		; in CX... and the last owner
 35248 00002A84 42                      	inc	dx		; in dx as we go through the loop:
 35249                                  
 35250                                  ; ------------------------------------------
 35251                                  ; FM10--DX  = last MCB's owner's PSP address
 35252                                  ;       CX  = last MCB's address (segment)
 35253                                  ; ------------------------------------------
 35254                                  
 35255 00002A85 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 35256 00002A89 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 35257 00002A8E 09D3                    	or	bx,dx			; dx was owner of previous MCB
 35258 00002A90 7516                    	jnz	short fm30		; If not both zero, don't cat.
 35259                                  
 35260                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 35261                                  
 35262 00002A92 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 35263 00002A97 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 35264 00002A99 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 35265                                  
 35266 00002A9D 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 35267                                  	;add	bx,1			; And add one for the header
 35268                                  	; 11/07/2023
 35269 00002AA2 43                      	inc	bx
 35270 00002AA3 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 35271                                  
 35272                                  	; ---------------------------------------------------------------------
 35273                                  
 35274 00002AA8 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 35275 00002AAA 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 35276                                  
 35277 00002AAF 8CC3                    	mov	bx,es			; Move to the next MCB
 35278 00002AB1 26031E0300              	add	bx,[es:ARENA.SIZE]
 35279 00002AB6 43                      	inc	bx
 35280 00002AB7 8EC3                    	mov	es,bx
 35281                                  
 35282                                  	;cmp	al,'Z'
 35283 00002AB9 3C5A                    	cmp	al,arena_signature_end
 35284 00002ABB 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 35285                                  fmX:	
 35286 00002ABD E81300                  	call	fm_unlink		; Unlink UMBs
 35287                                  
 35288 00002AC0 07                      	pop	es
 35289                                  	; 01/01/2023
 35290                                  	;pop	dx
 35291                                  	;pop	cx
 35292                                  	;pop	bx
 35293                                  	;pop	ax
 35294                                  
 35295 00002AC1 C3                      	retn
 35296                                  
 35297                                  ; -----------------------------------------------------------------------------
 35298                                  ;*** fm_link - links UMBs not already linked in
 35299                                  ; -----------------------------------------------------------------------------
 35300                                  ; ENTRY:    None
 35301                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 35302                                  ; ERROR:    None
 35303                                  ; USES:     AX, BX, fm_umb
 35304                                  ; -----------------------------------------------------------------------------
 35305                                  
 35306                                  	; 01/01/2023 - Retro DOS v4.2
 35307                                  fm_link:
 35308 00002AC2 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 35309 00002AC5 CD21                    	int	21h			; Current link-state is now in al
 35310                                  
 35311                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 35312                                  	;
 35313                                  	;push	es
 35314                                  	;push	cs
 35315                                  	;pop	es
 35316                                  	;mov	[es:fm_umb],al
 35317                                  	;pop	es
 35318                                  	
 35319                                  	; 01/01/2023
 35320                                  	; ds = cs
 35321                                  	;mov	[cs:fm_umb],al
 35322 00002AC7 A2[8A1F]                	mov	[fm_umb],al
 35323                                  
 35324 00002ACA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35325 00002ACD BB0100                  	mov	bx,1
 35326 00002AD0 CD21                    	int	21h
 35327 00002AD2 C3                      	retn
 35328                                  
 35329                                  ; -----------------------------------------------------------------------------
 35330                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 35331                                  ; -----------------------------------------------------------------------------
 35332                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 35333                                  ; EXIT:     None
 35334                                  ; ERROR:    None
 35335                                  ; USES:     AX, BX
 35336                                  ; -----------------------------------------------------------------------------
 35337                                  
 35338                                  	; 01/01/2023 - Retro DOS v4.2
 35339                                  fm_unlink:
 35340 00002AD3 31DB                    	xor	bx,bx
 35341                                  	
 35342                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 35343                                  	;
 35344                                  	;push	ds
 35345                                  	;push	cs
 35346                                  	;pop	ds
 35347                                  	;mov	bl,[fm_umb]	
 35348                                  	;pop	ds
 35349                                  	
 35350                                  	; 01/01/2023
 35351                                  	; ds = cs
 35352                                  	;mov	bl,[cs:fm_umb]
 35353 00002AD5 8A1E[8A1F]              	mov	bl,[fm_umb]
 35354                                  
 35355 00002AD9 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35356 00002ADC CD21                    	int	21h			; so just use that, and call int 21h
 35357 00002ADE C3                      	retn
 35358                                  
 35359                                  ; 08/04/2019 - Retro DOS v4.0
 35360                                  
 35361                                  ; -----------------------------------------------------------------------------
 35362                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 35363                                  ; laid out in highvar.inc
 35364                                  ; -----------------------------------------------------------------------------
 35365                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 35366                                  ; EXIT:     ES:SI points to first character in child program name
 35367                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 35368                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 35369                                  ; -----------------------------------------------------------------------------
 35370                                  ; Error codes (in AX if carry set on return):
 35371                                  ;
 35372                                  PV_InvArg	equ	1	; Invalid argument passed
 35373                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 35374                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 35375                                  ;
 35376                                  ; This routine exects ES:SI to point to a string much like the following:
 35377                                  ;    "/S/L:1,200;2 module options"
 35378                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 35379                                  ; required, though that's what this routine is supposed to parse.
 35380                                  ;
 35381                                  optS		equ	'S'	; /S
 35382                                  optL		equ	'L'	; /L:...
 35383                                  ;
 35384                                  ; -----------------------------------------------------------------------------
 35385                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 35386                                  ; a command-line for spawning a child process. For a typical LH command, say,
 35387                                  ;     lh /l:1,1000;2 print/d:lpt2
 35388                                  ; the arguments would look like (one per line):
 35389                                  ;     lh
 35390                                  ;     /l
 35391                                  ;     1
 35392                                  ;     1000
 35393                                  ;     2
 35394                                  ;     print
 35395                                  ;     /d
 35396                                  ;     :lpt2
 35397                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 35398                                  ; arg was the filename. So, inside this routine, we keep a running counter
 35399                                  ; of the number of arguments LH will need to skip in order to get to the
 35400                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 35401                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 35402                                  ; for:
 35403                                  ;    Each /L
 35404                                  ;    Each /S (there should be only one)
 35405                                  ;    Each UMB number (they follow ":" or ";")
 35406                                  ;    Each UMB size   (they follow ",")
 35407                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 35408                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 35409                                  ; -----------------------------------------------------------------------------
 35410                                  
 35411                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35412                                  	; (SYSINIT:2F9Fh)
 35413                                  
 35414                                  ParseVar:
 35415                                  	;pushreg <di, ds, es>
 35416                                  	; 01/01/2023
 35417                                  	;push	di ; * ; (not required) ; 01/01/2023
 35418 00002ADF 1E                      	push	ds
 35419 00002AE0 06                      	push	es
 35420                                  
 35421 00002AE1 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 35422 00002AE2 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 35423 00002AE3 FC                      	cld
 35424                                  
 35425                                  ; ------------------------------------------------
 35426                                  ; PV10--ES:SI = any whitespace on the command-line
 35427                                  ; ------------------------------------------------
 35428                                  
 35429 00002AE4 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 35430 00002AE5 E8A200                  	call	isWhite
 35431 00002AE8 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 35432                                  	;cmp	al,'/'
 35433 00002AEA 3C2F                    	cmp	al,SWTCH
 35434 00002AEC 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 35435                                  
 35436 00002AEE 4E                      	dec	si		; Backup--it's now "odule options", and we need
 35437 00002AEF F8                      	clc			; that "m" we just read (or whatever it is).
 35438 00002AF0 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 35439                                  
 35440 00002AF2 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 35441                                  	;toUpper al		; So we make it upper-case, and...
 35442 00002AF3 24DF                    	and	al,0DFh
 35443                                  	;cmp	al,'S'
 35444 00002AF5 3C53                    	cmp	al,optS		; just read 'S'?
 35445 00002AF7 750D                    	jne	short pv30
 35446                                  
 35447                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 35448 00002AF9 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35449                                  
 35450                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 35451                                  	;
 35452                                  	;push	es
 35453                                  	;push	cs
 35454                                  	;pop	es
 35455                                  	;mov	[es:fUmbTiny],1	
 35456                                  	;pop	es
 35457                                  
 35458 00002AFE 2EC606[561F]01          	mov	byte [cs:fUmbTiny],1
 35459                                  
 35460 00002B04 EBDE                    	jmp	short pv10	; possibly even "/L...".
 35461                                  
 35462                                  pv30:	;cmp	al,'L'
 35463 00002B06 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 35464 00002B08 750D                    	jne	short pvE1		; switch!
 35465                                  
 35466                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 35467 00002B0A 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35468                                  
 35469 00002B0F E80E00                  	call	parseL
 35470 00002B12 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 35471                                  
 35472 00002B14 4E                      	dec	si		; Else, back up and exit.
 35473 00002B15 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 35474                                  
 35475                                  pvE1:	;mov	ax,3
 35476 00002B17 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 35477 00002B1A 4E                      pvErr:	dec	si
 35478 00002B1B 4E                      	dec	si
 35479 00002B1C F9                      	stc
 35480                                  pvX:	;popreg	<es, ds, di>
 35481 00002B1D 07                      	pop	es
 35482 00002B1E 1F                      	pop	ds
 35483                                  	; 01/01/2023
 35484                                  	;pop	di ; * ; (not required) ; 01/01/2023
 35485 00002B1F C3                      	retn
 35486                                  
 35487                                  ; -----------------------------------------------------------------------------
 35488                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 35489                                  ; -----------------------------------------------------------------------------
 35490                                  ; ENTRY:    ES:SI points to colon
 35491                                  ; EXIT:     ES:SI points to first character not parsed
 35492                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 35493                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 35494                                  ; -----------------------------------------------------------------------------
 35495                                  ; If the string here is terminated with anything other than whitespace or a
 35496                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 35497                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 35498                                  ; makes sure the app /L: is reported as being the culprit.
 35499                                  ; -----------------------------------------------------------------------------
 35500                                  
 35501                                  parseL:
 35502 00002B20 AC                      	lodsb
 35503 00002B21 3C3A                    	cmp	al,':'		; Make sure they did /L:
 35504 00002B23 754E                    	jne	short plE1	; If they didn't, return with carry set.
 35505                                  
 35506                                  ; ------------------------------------------
 35507                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 35508                                  ; ------------------------------------------
 35509                                  
 35510 00002B25 E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 35511 00002B28 724F                    	jc	short plE2	; And error if it's a bad number.
 35512 00002B2A E89D01                  	call	convUMB		; Convert any address to a UMB number
 35513                                  
 35514 00002B2D 88C1                    	mov	cl,al		; Remember the UMB number
 35515 00002B2F E87600                  	call	stowUMB		; Mark this UMB # as used;
 35516 00002B32 7245                    	jc	short plE2	; If it was already marked, it'll error
 35517                                  
 35518                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 35519 00002B34 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35520                                  
 35521 00002B39 AC                      	lodsb
 35522 00002B3A 3C3B                    	cmp	al,';'		; Did "umb;" ?
 35523 00002B3C 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 35524                                  
 35525 00002B3E E84900                  	call	isWhite		; Did "umb " ?
 35526 00002B41 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 35527                                  
 35528 00002B43 E83900                  	call	isEOL		; Did "umb" ?
 35529 00002B46 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35530                                  
 35531                                  	;cmp	al,'/'
 35532 00002B48 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 35533 00002B4A 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 35534                                  
 35535 00002B4C 3C2C                    	cmp	al,','		; Did "umb," ?
 35536 00002B4E 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 35537                                  
 35538                                  ; --- Read a size -------------------------------------------------------------
 35539                                  
 35540 00002B50 E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 35541 00002B53 721E                    	jc	short plE1	; And error if it's a bad size.
 35542                                  
 35543 00002B55 E81601                  	call	toPara		; Convert from bytes to paragraphs
 35544                                  
 35545 00002B58 E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 35546                                  
 35547                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 35548 00002B5B 2EFE06[8C1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35549                                  
 35550 00002B60 AC                      	lodsb
 35551 00002B61 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 35552 00002B63 74C0                    	je	short pl10	;
 35553                                  
 35554 00002B65 E82200                  	call	isWhite		; Did it end with whitespace?
 35555 00002B68 7414                    	jz	short plX	; If so, we're done here--go back.
 35556                                  
 35557 00002B6A E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 35558 00002B6D 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35559                                  
 35560                                  	;cmp	al,'/'
 35561 00002B6F 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 35562 00002B71 740A                    	je	short plSwX	; If so, again, we're done here.
 35563                                  plE1:	
 35564                                  	;mov	ax,1
 35565 00002B73 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 35566 00002B76 4E                      	dec	si
 35567 00002B77 F9                      	stc
 35568 00002B78 C3                      	retn
 35569                                  
 35570                                  plE2:	;mov	ax,2
 35571 00002B79 B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 35572                                  	; 12/12/2022
 35573                                  	; cf=1
 35574                                  	;stc
 35575 00002B7C C3                      	retn
 35576                                  plSwX:	
 35577 00002B7D 4E                      	dec	si		; If we hit a '/' character, back up one char
 35578                                  				; so the whitespace checker will see it too.
 35579                                  plX:	; 12/12/2022
 35580                                  	; cf=0
 35581                                  	;clc			; Then just return with carry clear, so
 35582 00002B7E C3                      	retn			; ParseVar will go about its business.
 35583                                  
 35584                                  ; -----------------------------------------------------------------------------
 35585                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 35586                                  ; -----------------------------------------------------------------------------
 35587                                  ; ENTRY:    None
 35588                                  ; EXIT:     None
 35589                                  ; ERROR:    None
 35590                                  ; USES:     fm_argc, flags
 35591                                  ; -----------------------------------------------------------------------------
 35592                                  
 35593                                  ;incArgc:
 35594                                  	;push	ax
 35595                                  
 35596                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 35597                                  
 35598                                  	;mov	al,[cs:fm_argc]
 35599                                  
 35600                                  	;inc	al		; Increment it,
 35601                                  
 35602                                  	;;putdata fm_argc, al	; And store it right back.
 35603                                  
 35604                                  	;mov	[cs:fm_argc],al
 35605                                  
 35606                                  	;pop	ax
 35607                                  	;retn
 35608                                  
 35609                                  ; -----------------------------------------------------------------------------
 35610                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 35611                                  ; -----------------------------------------------------------------------------
 35612                                  ; ENTRY:    AL contains character to test
 35613                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 35614                                  ; ERROR:    None
 35615                                  ; USES:     ZF
 35616                                  ; -----------------------------------------------------------------------------
 35617                                  
 35618                                  isEOL:
 35619 00002B7F 3C00                    	cmp	al,0		; Null-terminator
 35620 00002B81 7406                    	je	short ieX
 35621 00002B83 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 35622 00002B85 7402                    	je	short ieX
 35623 00002B87 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 35624                                  ieX:	
 35625 00002B89 C3                      	retn
 35626                                  
 35627                                  ; -----------------------------------------------------------------------------
 35628                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 35629                                  ; -----------------------------------------------------------------------------
 35630                                  ; ENTRY:    AL contains character to test
 35631                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 35632                                  ; ERROR:    None
 35633                                  ; USES:     ZF
 35634                                  ; -----------------------------------------------------------------------------
 35635                                  
 35636                                  isWhite:
 35637 00002B8A 3C20                    	cmp	al,' '		; Space
 35638 00002B8C 7406                    	je	short iwX
 35639 00002B8E 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 35640 00002B90 7402                    	je	short iwX
 35641 00002B92 3C09                    	cmp	al,tab ; 9	; Tab
 35642                                  iwX:	
 35643 00002B94 C3                      	retn
 35644                                  
 35645                                  ; -----------------------------------------------------------------------------
 35646                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 35647                                  ; -----------------------------------------------------------------------------
 35648                                  ; ENTRY:    AL contains UMB number
 35649                                  ; EXIT:     None
 35650                                  ; ERROR:    None
 35651                                  ; USES:     Flags, variables in highvar.inc
 35652                                  ; -----------------------------------------------------------------------------
 35653                                  
 35654                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35655                                  
 35656                                  unMarkUMB:
 35657                                  	; 02/01/2023
 35658                                  	;push	ax
 35659                                  	;push	bx
 35660                                  	;push	di
 35661                                  	;push	es
 35662                                  	;
 35663                                  	;push	cs
 35664                                  	;pop	es
 35665                                  
 35666 00002B95 30E4                    	xor	ah,ah
 35667 00002B97 89C3                    	mov	bx,ax
 35668                                  
 35669                                  	; 19/04/2019
 35670                                  	
 35671                                  	;;mov	byte [es:bx+UmbUsed],0
 35672                                  	;mov	[es:bx+UmbUsed],ah ; 0
 35673                                  	; 02/01/2023
 35674                                  	; ds= cs
 35675                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 35676 00002B99 88A7[5A1F]              	mov	[bx+UmbUsed],ah ; 0
 35677                                  
 35678 00002B9D 3806[591F]              	cmp	[UmbLoad],al
 35679                                  	;cmp	[cs:UmbLoad],al
 35680                                  	;;cmp	[es:UmbLoad],al
 35681 00002BA1 7504                    	jne	short umu10
 35682                                  
 35683                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 35684                                  	;mov	[es:UmbLoad],ah ; 0
 35685                                  	; 02/01/2023
 35686                                  	; ds = cs
 35687                                  	;mov	[cs:UmbLoad],ah ; 0
 35688 00002BA3 8826[591F]              	mov	[UmbLoad],ah ; 0
 35689                                  umu10:	
 35690                                  	;pop	es
 35691                                  	;pop	di
 35692                                  	;pop	bx
 35693                                  	;pop	ax
 35694 00002BA7 C3                      	retn
 35695                                  
 35696                                  ; -----------------------------------------------------------------------------
 35697                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 35698                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 35699                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 35700                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 35701                                  ; -----------------------------------------------------------------------------
 35702                                  ; ENTRY:    AL contains UMB number, as specified by the user
 35703                                  ; EXIT:     None
 35704                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 35705                                  ; USES:     AX, Flags, variables in highvar.inc
 35706                                  ; -----------------------------------------------------------------------------
 35707                                  
 35708                                  	; 01/01/2023 - Retro DOS v4.2
 35709                                  stowUMB:
 35710 00002BA8 3C10                    	cmp	al,MAXUMB ; 16
 35711 00002BAA 7202                    	jb	short su10
 35712 00002BAC F9                      	stc
 35713 00002BAD C3                      	retn			; Ooops-- UMB>=MAXUMB
 35714                                  su10:	
 35715                                  	; 01/01/2023
 35716                                  	;push	bx
 35717                                  	;push	di
 35718                                  	;push	si
 35719                                  	;push	ds
 35720                                  	;push	es
 35721                                  	;push	cs
 35722                                  	;pop	es
 35723                                  	;push	cs
 35724                                  	;pop	ds
 35725                                  
 35726                                  	; 01/01/2023
 35727                                  	; ds <> cs
 35728                                  	;cmp	byte [cs:UmbLoad],0FFh
 35729 00002BAE 2E803E[591F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 35730                                  				; If this, we haven't been here before
 35731 00002BB4 7504                    	jne	short su20
 35732 00002BB6 2EA2[591F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 35733                                  
 35734                                  	;;cmp	byte [UmbLoad],0FFh
 35735                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 35736                                  	;jne	short su20
 35737                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 35738                                  su20:	
 35739 00002BBA 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 35740 00002BBC 740E                    	jz	short su30	; that we should do here.
 35741                                  
 35742                                  	;mov	bl,al
 35743                                  	;xor	bh,bh
 35744                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 35745                                  	; 01/01/2023
 35746 00002BBE 30E4                    	xor	ah,ah
 35747 00002BC0 89C3                    	mov	bx,ax
 35748 00002BC2 B001                    	mov	al,1
 35749                                  
 35750                                  	;xchg	[es:bx+UmbUsed],al
 35751                                  	; 01/01/2023
 35752 00002BC4 2E8687[5A1F]            	xchg	[cs:bx+UmbUsed],al
 35753                                  
 35754                                  	;or	al,al		; If it was already 1, then al==1... and that
 35755                                  	;jz	short su30	; means an error.
 35756                                  	;
 35757                                  	;stc			; OOOPS!  This one's been used before.  :(
 35758                                  	
 35759                                  	; 01/01/2023
 35760 00002BC9 3C01                    	cmp	al,1
 35761 00002BCB F5                      	cmc 	; if al > 0 -> cf = 1
 35762                                  su30:	
 35763                                  	; 01/01/2023
 35764                                  	;pop	es
 35765                                  	;pop	ds
 35766                                  	;pop	si
 35767                                  	;pop	di
 35768                                  	;pop	bx
 35769 00002BCC C3                      	retn
 35770                                  
 35771                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35772                                  %if 0
 35773                                  ; -----------------------------------------------------------------------------
 35774                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 35775                                  ; -----------------------------------------------------------------------------
 35776                                  ; ENTRY:    CL contains UMB number, AX contains size
 35777                                  ; EXIT:     None
 35778                                  ; ERROR:    None
 35779                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 35780                                  ; -----------------------------------------------------------------------------
 35781                                  
 35782                                  ; 13/05/2019
 35783                                  
 35784                                  	; 01/01/2023 - Retro DOS v4.2
 35785                                  stowSiz:
 35786                                  	; 01/01/2023
 35787                                  	;push	bx
 35788                                  	;;push	di ; ?
 35789                                  	;push	es
 35790                                  
 35791                                  	;push	cs
 35792                                  	;pop	es	
 35793                                  
 35794                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 35795                                  	mov	bh,0			;     bx==UMB number, AX==size
 35796                                  	shl	bl,1			;     bx==offset into array, AX=size
 35797                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 35798                                  	; 01/01/2023
 35799                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 35800                                  
 35801                                  	; 01/01/2023
 35802                                  	;pop	es
 35803                                  	;;pop	di ; ?
 35804                                  	;pop	bx
 35805                                  
 35806                                  	retn
 35807                                  %endif
 35808                                  
 35809                                  ; -----------------------------------------------------------------------------
 35810                                  ;*** toDigit - converts a character-digit to its binary counterpart
 35811                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 35812                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 35813                                  ; A-F are considered valid iff gnradix is 16.
 35814                                  ; -----------------------------------------------------------------------------
 35815                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 35816                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 35817                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 35818                                  ; USES:     CL, Flags
 35819                                  ; -----------------------------------------------------------------------------
 35820                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35821                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35822                                  ; will be 10 or 16.
 35823                                  ; -----------------------------------------------------------------------------
 35824                                  
 35825                                  gnradix:
 35826 00002BCD 0000                    	dw	0		; Must be a word--16x16 multiplication
 35827                                  
 35828                                  toDigit:
 35829 00002BCF 2E833E[CD2B]10          	cmp	word [cs:gnradix],16
 35830 00002BD5 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 35831                                  
 35832                                  toDigit_hex:
 35833 00002BD7 80F961                  	cmp	cl,'a'	; 61h
 35834 00002BDA 7209                    	jb	short td10
 35835 00002BDC 80F966                  	cmp	cl,'f'	; 66h
 35836 00002BDF 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 35837 00002BE1 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 35838                                  	;clc			; <- CLC is implicit from last SUB
 35839 00002BE4 C3                      	retn
 35840                                  td10:	
 35841 00002BE5 80F941                  	cmp	cl,'A'  ; 41h
 35842 00002BE8 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 35843 00002BEA 80F946                  	cmp	cl,'F'	; 46h
 35844 00002BED 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 35845 00002BEF 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 35846                                  	;clc			; <- CLC is implicit from last SUB
 35847 00002BF2 C3                      	retn
 35848                                  toDigit_dec:
 35849                                  td20:	
 35850 00002BF3 80F930                  	cmp	cl,'0'		; If less than zero,
 35851                                  	;jb	short tdE	; Done.
 35852 00002BF6 720A                    	jb	short tdEr ; 08/04/2019
 35853 00002BF8 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 35854 00002BFB 7704                    	ja	short tdE	; Done.
 35855 00002BFD 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 35856                                  	;clc			; <- CLC is implicit from last SUB
 35857 00002C00 C3                      	retn
 35858                                  tdE:	
 35859 00002C01 F9                      	stc
 35860                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 35861 00002C02 C3                      	retn
 35862                                  
 35863                                  ; -----------------------------------------------------------------------------
 35864                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 35865                                  ; -----------------------------------------------------------------------------
 35866                                  ; ENTRY:    ES:SI points to an ascii string to scan
 35867                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 35868                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 35869                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 35870                                  ; -----------------------------------------------------------------------------
 35871                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35872                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35873                                  ; will be 10 or 16.
 35874                                  ; -----------------------------------------------------------------------------
 35875                                  
 35876                                  ; 08/04/2019 - Retro DOS v4.0
 35877                                  
 35878                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35879                                  ; (SYSINIT:3109h)
 35880                                  
 35881                                  GetXNum:
 35882                                  	;pushreg <bx, cx, ds>
 35883                                  	; 01/01/2023
 35884                                  	;push	bx
 35885 00002C03 51                      	push	cx ; *
 35886                                  	;push	ds
 35887                                  
 35888 00002C04 FC                      	cld
 35889 00002C05 31C0                    	xor	ax,ax
 35890 00002C07 31DB                    	xor	bx,bx
 35891 00002C09 31C9                    	xor	cx,cx
 35892 00002C0B 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 35893                                  
 35894 00002C0D 2EC706[CD2B]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 35895                                  
 35896 00002C14 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 35897                                  	;call	toDigit
 35898 00002C17 E8D9FF                  	call	toDigit_dec
 35899                                  	;jc	short gxnE		; If it's not a digit, leave now.
 35900                                  	; 01/01/2023
 35901 00002C1A 7233                    	jc	short gxnX
 35902                                  
 35903 00002C1C 08C9                    	or	cl,cl
 35904 00002C1E 7517                    	jnz	short gxn20		; Doesn't have '0x'
 35905 00002C20 268A4C01                	mov	cl,[es:si+1]
 35906 00002C24 80F978                  	cmp	cl,'x'			; Either 'x'...
 35907 00002C27 7405                    	je	short gxn10
 35908 00002C29 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 35909 00002C2C 7509                    	jne	short gxn20
 35910                                  
 35911                                  gxn10:	
 35912 00002C2E 2EC706[CD2B]1000        	mov	word [cs:gnradix], 16
 35913 00002C35 46                      	inc	si			; Since we read "0x", march over it.
 35914 00002C36 46                      	inc	si
 35915                                  
 35916                                  ; ------------------------------------------------------
 35917                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 35918                                  ;        DX:AX = current total
 35919                                  ;        BX    = 0
 35920                                  ;        CH    = 0
 35921                                  ; ------------------------------------------------------
 35922                                  
 35923                                  gxn20:	
 35924 00002C37 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 35925 00002C3A 46                      	inc	si
 35926                                  
 35927 00002C3B E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 35928 00002C3E 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 35929                                  
 35930 00002C40 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 35931 00002C43 720A                    	jc	short gxnX	; (if it's too big, error out)
 35932                                  
 35933 00002C45 01C8                    	add	ax,cx		; Add the digit
 35934 00002C47 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 35935                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 35936                                  	;jmp	short gxn20
 35937 00002C49 73EC                    	jnc	short gxn20
 35938                                  gxnE:	
 35939                                  	;stc			; In this case, we need to set the carry
 35940 00002C4B EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 35941                                  gxnQ:	
 35942 00002C4D 4E                      	dec	si		; Don't read in the offensive character.
 35943 00002C4E F8                      	clc			; And clear carry, so they know it's okay.
 35944                                  gxnX:	
 35945                                  	; 01/01/2023
 35946                                  	;pop	ds
 35947 00002C4F 59                      	pop	cx ; *
 35948                                  	;pop	bx
 35949 00002C50 C3                      	retn
 35950                                  
 35951                                  ; -----------------------------------------------------------------------------
 35952                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 35953                                  ; -----------------------------------------------------------------------------
 35954                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 35955                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 35956                                  ; ERROR:   Carry set if number was too large
 35957                                  ; USES:    Flags, AX, DX
 35958                                  ; -----------------------------------------------------------------------------
 35959                                  
 35960                                  mul32:
 35961 00002C51 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 35962 00002C52 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 35963 00002C54 2EF726[CD2B]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 35964 00002C59 7211                    	jc	short m32E	; Too big?
 35965                                  
 35966 00002C5B 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 35967 00002C5D 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 35968                                  
 35969 00002C5E 87DA                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 35970 00002C60 2EF726[CD2B]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 35971 00002C65 87DA                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 35972 00002C67 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 35973 00002C69 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 35974 00002C6B C3                      	retn
 35975                                  m32E:	
 35976 00002C6C 58                      	pop	ax
 35977 00002C6D C3                      	retn
 35978                                  
 35979                                  ; -----------------------------------------------------------------------------
 35980                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 35981                                  ; -----------------------------------------------------------------------------
 35982                                  ; ENTRY:   DX:AX = the number to be divided
 35983                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 35984                                  ; ERROR:   None
 35985                                  ; USES:    Flags, AX, DX
 35986                                  ; -----------------------------------------------------------------------------
 35987                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 35988                                  ;       can't ensure a 386 host machine. Sorry.
 35989                                  ; -----------------------------------------------------------------------------
 35990                                  
 35991                                  	; 01/01/2023 - Retro DOS v4.2
 35992                                  toPara:
 35993 00002C6E 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 35994                                  
 35995 00002C6F B104                    	mov	cl,4		;
 35996 00002C71 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 35997 00002C73 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 35998 00002C74 B10C                    	mov	cl,12
 35999 00002C76 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 36000 00002C78 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 36001                                  
 36002 00002C7A 59                      	pop	cx
 36003 00002C7B C3                      	retn
 36004                                  
 36005                                  ; -----------------------------------------------------------------------------
 36006                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 36007                                  ; -----------------------------------------------------------------------------
 36008                                  ; ENTRY:  Nothing
 36009                                  ; EXIT:   AX contains 0x9FFF for most systems
 36010                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 36011                                  ; USES:   Flags, AX
 36012                                  ; -----------------------------------------------------------------------------
 36013                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 36014                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 36015                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 36016                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 36017                                  ; -----------------------------------------------------------------------------
 36018                                  
 36019                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36020                                  UmbHead:
 36021                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 36022                                  
 36023                                  	;push	si ; ?
 36024                                  	;push	ds ; ? 
 36025                                  	;push	es
 36026                                  	;push	bx ; *	
 36027                                  
 36028                                  	; 09/04/2019
 36029                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 36030                                  
 36031 00002C7C B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 36032 00002C7E CD21                    	int	21h
 36033                                  
 36034 00002C80 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 36035                                  	
 36036                                  	; 01/01/2023
 36037 00002C84 83F8FF                  	cmp	ax,0FFFFh
 36038 00002C87 F5                      	cmc
 36039                                  	; if AX=0FFFFh -> CF=1
 36040 00002C88 C3                      	retn
 36041                                  
 36042                                  ; 01/01/2023
 36043                                  ;%if 0
 36044                                  ;	cmp	ax,0FFFFh
 36045                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 36046                                  ;
 36047                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 36048                                  ;	;jmp	short uhX
 36049                                  ;	; 12/12/2022
 36050                                  ;	retn
 36051                                  ;uhE:	
 36052                                  ;	stc
 36053                                  ;uhX:	
 36054                                  ;	;pop	bx ; *
 36055                                  ;	;pop	es
 36056                                  ;	;pop	ds ; ?
 36057                                  ;	;pop	si ; ?
 36058                                  ;	retn
 36059                                  ;%endif
 36060                                  
 36061                                  ; -----------------------------------------------------------------------------
 36062                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 36063                                  ; -----------------------------------------------------------------------------
 36064                                  ; ENTRY:  ES:0 should point to a valid MCB
 36065                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 36066                                  ; USES:   Flags
 36067                                  ; -----------------------------------------------------------------------------
 36068                                  
 36069                                  isSysMCB:
 36070                                  	;push	ax
 36071                                  
 36072                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 36073                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 36074                                  	;je	short ism10
 36075                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 36076                                  	;;je	short ism10
 36077                                  	;;jmp	short ismX		; Anything else isn't.
 36078                                  	;jne	short ismX
 36079 00002C89 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 36080 00002C8F 7507                    	jne	short ismX 
 36081                                  ism10:	
 36082                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 36083                                  	;cmp	ax,'SC' ; 4353h
 36084 00002C91 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 36085                                  ismX:	
 36086                                  	;pop	ax
 36087 00002C98 C3                      	retn
 36088                                  
 36089                                  ; 09/04/2019 - Retro DOS v4.0
 36090                                  
 36091                                  ; -----------------------------------------------------------------------------
 36092                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 36093                                  ; -----------------------------------------------------------------------------
 36094                                  ; ENTRY:  AX contains a segment address
 36095                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 36096                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 36097                                  ; USES:   Flags, AX
 36098                                  ; -----------------------------------------------------------------------------
 36099                                  ; An address in the following areas is treated as:
 36100                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 36101                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 36102                                  ;      ...
 36103                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 36104                                  ; -----------------------------------------------------------------------------
 36105                                  
 36106                                  	; 01/01/2023 - Retro DOS v4.2
 36107                                  AddrToUmb:
 36108                                  	; 01/01/2023
 36109                                  	;push	cx
 36110                                  	;push	dx
 36111 00002C99 06                      	push	es
 36112                                  
 36113 00002C9A 89C2                    	mov	dx,ax		; DX = address to search for
 36114                                  
 36115 00002C9C E8DDFF                  	call	UmbHead		; AX = first segment
 36116 00002C9F 7222                    	jc	short atuE	; If it couldn't get it, error out.
 36117                                  
 36118                                  	; 22/07/2023
 36119                                  	;mov	es,ax ; *	; ES = first UMB segment
 36120 00002CA1 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 36121                                  
 36122                                  	; 22/07/2023
 36123                                  atu10:
 36124 00002CA3 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 36125                                  ; ----------------------------------------
 36126                                  ; ATU10--ES - Current MCB address
 36127                                  ;        DX - Address given for conversion
 36128                                  ;        CX - Current UMB #
 36129                                  ; ----------------------------------------
 36130                                  
 36131                                  ;atu10:	
 36132                                  	;mov	ax,es ; * ; 18/07/2023
 36133 00002CA5 39D0                            cmp	ax,dx		; Present segment >= given segment?
 36134 00002CA7 731D                    	jae	short atuX	; Yep--done.
 36135                                  
 36136 00002CA9 E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 36137 00002CAC 7501                    	jnz	short atu20
 36138                                  
 36139 00002CAE 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 36140                                  atu20:	
 36141                                  	;mov	al,[es:ARENA.SIGNATURE]
 36142                                  	;cmp	al,arena_signature_end  ; 'Z'
 36143                                  	; 22/07/2023
 36144                                  	; ax = es
 36145                                  	;mov	ax,es ; **
 36146 00002CAF 2603060300              	add	ax,[es:ARENA.SIZE]
 36147 00002CB4 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36148 00002CBA 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 36149                                  
 36150                                  	;NextMCB es,ax
 36151                                  
 36152                                  	;mov	ax,es ; **
 36153                                  	;;add	ax,[es:3]
 36154                                  	;add	ax,[es:ARENA.SIZE]
 36155 00002CBC 40                      	inc	ax
 36156                                  	; 22/07/2023
 36157                                  	;mov	es,ax ; *
 36158 00002CBD EBE4                    	jmp	short atu10
 36159                                  
 36160                                  ; -----------------------------------------------------------------------------
 36161                                  ; if we get to atu30, they specified a number that was past the last MCB.
 36162                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 36163                                  ; -----------------------------------------------------------------------------
 36164                                  
 36165                                  atu30:	
 36166                                  	; 22/07/2023
 36167                                  	; ax = es + [es:ARENA.SIZE] 
 36168                                  	;mov	ax,es ; **
 36169                                  	;add	ax,[es:ARENA.SIZE] ; **
 36170 00002CBF 39D0                    	cmp	ax,dx		; Present >= given?
 36171 00002CC1 7303                    	jae	short atuX	; Yep! It _was_ inside.
 36172                                  atuE:	
 36173 00002CC3 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 36174 00002CC5 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 36175                                  atuX:	
 36176 00002CC6 89C8                    	mov	ax,cx		; Return the UMB number in AX
 36177                                  	
 36178 00002CC8 07                      	pop	es	
 36179                                  	; 01/01/2023
 36180                                  	;pop	dx
 36181                                  	;pop	cx
 36182 00002CC9 C3                      	retn
 36183                                  
 36184                                  ; -----------------------------------------------------------------------------
 36185                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 36186                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 36187                                  ; address rather than a UMB number... and use that address to look up a UMB.
 36188                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 36189                                  ; -----------------------------------------------------------------------------
 36190                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 36191                                  ; EXIT:   AX will contain a UMB number
 36192                                  ; ERROR:  None
 36193                                  ; USES:   Flags, AX
 36194                                  ; -----------------------------------------------------------------------------
 36195                                  
 36196                                  	; 01/01/2023 - Retro DOS v4.2
 36197                                  convUMB:
 36198 00002CCA 2E833E[CD2B]10          	cmp	word [cs:gnradix],16
 36199 00002CD0 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 36200 00002CD2 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 36201                                  	;cmp	ax,0FFFFh
 36202                                  	;jne	short cu10
 36203                                  	;inc	ax		; If too high, ignore it (make it conventional)
 36204                                  	; 01/01/2023
 36205 00002CD5 40                      	inc	ax
 36206 00002CD6 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 36207 00002CD8 48                      	dec	ax
 36208                                  cu10:	
 36209 00002CD9 C3                      	retn
 36210                                  
 36211                                  ; 01/01/2023 - Retro DOS v4.2
 36212                                  ;%if 0
 36213                                  ;
 36214                                  ;; -----------------------------------------------------------------------------
 36215                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 36216                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 36217                                  ;; of the usual HIGH_FIRST. See the code.
 36218                                  ;; -----------------------------------------------------------------------------
 36219                                  ;; ENTRY:  None
 36220                                  ;; EXIT:   None
 36221                                  ;; ERROR:  None
 36222                                  ;; USES:   Flags, fm_umb, fm_strat
 36223                                  ;; -----------------------------------------------------------------------------
 36224                                  ;
 36225                                  ;setUMBs:
 36226                                  ;	push	ax
 36227                                  ;	push	bx
 36228                                  ;	call	fm_link
 36229                                  ;	pop	bx
 36230                                  ;	pop	ax
 36231                                  ;	retn
 36232                                  ;
 36233                                  ;%endif
 36234                                  
 36235                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36236                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 36237                                  %if 0
 36238                                  
 36239                                  ; -----------------------------------------------------------------------------
 36240                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 36241                                  ; -----------------------------------------------------------------------------
 36242                                  ; ENTRY:  None
 36243                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 36244                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 36245                                  ; ERROR:  None
 36246                                  ; USES:   Flags, fm_strat, fm_umb
 36247                                  ; -----------------------------------------------------------------------------
 36248                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 36249                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 36250                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 36251                                  ; such that the load UMB is too small, and shouldn't be used.
 36252                                  ; -----------------------------------------------------------------------------
 36253                                  
 36254                                  loadLow:
 36255                                  	;push	ds
 36256                                  	;push	cs		; Point DS into appropriate data segment
 36257                                  	;pop	ds	
 36258                                  
 36259                                  	;mov	al,[UmbLoad]
 36260                                  	mov	al,[cs:UmbLoad]
 36261                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 36262                                  	jne	short ll10
 36263                                  
 36264                                  	stc
 36265                                  ll15:
 36266                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 36267                                  	;stc
 36268                                  	;jmp	short llX
 36269                                  	retn
 36270                                  ll10:	
 36271                                  	or	al,al		; AL=the load UMB: Is it == 0?
 36272                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 36273                                  
 36274                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 36275                                  	retn
 36276                                  
 36277                                  	;mov	al,1
 36278                                  	;clc
 36279                                  ;llX:
 36280                                  	;pop	ds		; Return DS to where it was
 36281                                  	;retn
 36282                                  
 36283                                  %endif
 36284                                  
 36285                                  ; -----------------------------------------------------------------------------
 36286                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 36287                                  ; -----------------------------------------------------------------------------
 36288                                  ; ENTRY:  None
 36289                                  ; EXIT:   None
 36290                                  ; ERROR:  None
 36291                                  ; USES:   Flags, fm_strat, fm_umb
 36292                                  ; -----------------------------------------------------------------------------
 36293                                  
 36294                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36295                                  	; (SYSINIT:322Fh)
 36296                                  HideUMBs:
 36297                                  	; 01/01/2023
 36298                                  	;push	ax
 36299                                  	;push	cx
 36300                                  	;push	ds
 36301 00002CDA 06                      	push	es
 36302                                  
 36303                                  	; 01/01/2023
 36304                                  	; ds = cs
 36305                                  
 36306 00002CDB E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 36307 00002CDE 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 36308                                  
 36309 00002CE0 E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 36310                                  	
 36311                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 36312                                  	; 01/01/2023
 36313 00002CE3 E8DCFD                  	call	fm_link
 36314                                  
 36315                                  	;putdata fInHigh,1	; Remember that we're now running high
 36316                                  	;mov	byte [cs:fInHigh],1
 36317                                  	; 01/01/2023
 36318 00002CE6 C606[551F]01            	mov	byte [fInHigh],1
 36319                                  
 36320                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 36321                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 36322                                  	; 01/01/2023
 36323 00002CEB A0[591F]                	mov	al,[UmbLoad]
 36324                                  
 36325 00002CEE 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 36326 00002CF0 7420                    	je	short husX	; then we shouldn't do this loop:
 36327                                  
 36328 00002CF2 31C9                    	xor	cx,cx
 36329                                  
 36330                                  ; -----------------------------------------------
 36331                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 36332                                  ; -----------------------------------------------
 36333                                  
 36334 00002CF4 41                      hus10:	inc	cx		; For each UMB:
 36335                                  	; 01/01/2023
 36336 00002CF5 80F910                  	cmp	cl,MAXUMB
 36337                                  	;cmp	cx,MAXUMB ; 16
 36338 00002CF8 730E                    	jae	short hus20
 36339                                  
 36340 00002CFA 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 36341 00002CFC 06                      	push	es
 36342 00002CFD E8A200                  	call	findUMB		; valid range of UMBs)
 36343 00002D00 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 36344 00002D01 7205                    	jc	short hus20
 36345                                  	
 36346                                  	; 02/01/2023
 36347                                  	;push	cx ; *
 36348 00002D03 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 36349                                  	;pop	cx ; *
 36350                                  
 36351 00002D06 EBEC                    	jmp	short hus10
 36352                                  hus20:	
 36353                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 36354                                  	; 01/01/2023
 36355                                  	; ds = cs
 36356                                  	;mov	al,[UmbLoad]
 36357                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 36358 00002D08 800E[591F]00            	or	byte [UmbLoad],0
 36359                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 36360 00002D0D 7503                    	jnz	short husX	; If not, we're done.
 36361                                  
 36362 00002D0F E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 36363                                  husX:	
 36364 00002D12 07                      	pop	es
 36365                                  	; 01/01/2023
 36366                                  	;pop	ds
 36367                                  	;pop	cx
 36368                                  	;pop	ax
 36369 00002D13 C3                      	retn
 36370                                  
 36371                                  ; -----------------------------------------------------------------------------
 36372                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 36373                                  ; -----------------------------------------------------------------------------
 36374                                  ; ENTRY:  None
 36375                                  ; EXIT:   AL == load UMB
 36376                                  ; ERROR:  None
 36377                                  ; USES:   Flags, AX
 36378                                  ; -----------------------------------------------------------------------------
 36379                                  
 36380                                  ;GetLoadUMB:
 36381                                  ;	;getdata al, UmbLoad
 36382                                  ;	push	ds
 36383                                  ;	push	cs
 36384                                  ;	pop	ds
 36385                                  ;	mov	al,[UmLoad]
 36386                                  ;	pop	ds
 36387                                  ;	retn
 36388                                  
 36389                                  ; -----------------------------------------------------------------------------
 36390                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36391                                  ; -----------------------------------------------------------------------------
 36392                                  ; ENTRY:  None
 36393                                  ; EXIT:   AX == load UMB minimum size
 36394                                  ; ERROR:  None
 36395                                  ; USES:   Flags, AX
 36396                                  ; -----------------------------------------------------------------------------
 36397                                  
 36398                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36399                                  %if 0
 36400                                  	; 01/01/2023 - Retro DOS v4.2
 36401                                  GetLoadSize:
 36402                                  	; 09/04/2019 - Retro DOS v4.0
 36403                                  	;mov	al,[cs:UmbLoad]
 36404                                  	; 01/01/2023
 36405                                  	; ds = cs
 36406                                  	mov	al,[UmbLoad] 
 36407                                  	;jmp	short GetSize
 36408                                  
 36409                                  	;push	bx
 36410                                  	;;push	si
 36411                                  	;push	ds
 36412                                  	;push	cs
 36413                                  	;pop	ds
 36414                                  
 36415                                  	;mov	al,[UmbLoad]
 36416                                  
 36417                                  	;xor	ah,ah			;    ax==UMB
 36418                                  	;mov	bx,UmbSize		;    bx==array
 36419                                  	;shl	al,1	                ;    ax==offset
 36420                                  	;;add	ax,bx			;    ax==element index
 36421                                  	;;mov	si,ax			; ds:si==element index
 36422                                  
 36423                                  	;;lodsw				;    hh
 36424                                  
 36425                                  	;add	bx,ax
 36426                                  	;mov	ax,[bx]
 36427                                  
 36428                                  	;pop	ds
 36429                                  	;;pop	si
 36430                                  	;pop	bx
 36431                                  	;retn
 36432                                  %endif
 36433                                  
 36434                                  ; -----------------------------------------------------------------------------
 36435                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 36436                                  ; -----------------------------------------------------------------------------
 36437                                  ; ENTRY:  AL == a UMB number
 36438                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 36439                                  ; ERROR:  None
 36440                                  ; USES:   Flags, AX
 36441                                  ; -----------------------------------------------------------------------------
 36442                                  
 36443                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36444                                  GetLoadSize:
 36445                                  	; ds = cs
 36446                                  	;mov	al,[UmbLoad]
 36447                                  	; al = [UmbLoad] 
 36448                                  	; ....
 36449                                  
 36450                                  	; 01/01/2023 - Retro DOS v4.2
 36451                                  GetSize:
 36452                                  	; 09/04/2019 - Retro DOS v4.0
 36453                                  
 36454                                  	;push	bx ; 01/01/2023
 36455                                  	;push	si
 36456                                  	;push	ds
 36457                                  	;push	cs
 36458                                  	;pop	ds
 36459                                  
 36460 00002D14 30E4                    	xor	ah,ah			;    ax==UMB
 36461 00002D16 BB[6A1F]                	mov	bx,UmbSize		;    bx==array
 36462 00002D19 D0E0                    	shl	al,1	                ;    ax==offset
 36463                                  	;add	ax,bx			;    ax==element index
 36464                                  	;mov	si,ax			; ds:si==element index
 36465                                  
 36466                                  	;lodsw				;    ax==size
 36467                                  
 36468 00002D1B 01C3                    	add	bx,ax
 36469                                  	; 01/01/2023
 36470                                  	; ds = cs
 36471 00002D1D 8B07                    	mov	ax,[bx]
 36472                                  	;mov	ax,[cs:bx]
 36473                                  
 36474                                  	;pop	ds
 36475                                  	;pop	si
 36476                                  	;pop	bx ; 01/01/2023
 36477                                  sls10:	; 08/09/2023
 36478 00002D1F C3                      	retn
 36479                                  
 36480                                  ; -----------------------------------------------------------------------------
 36481                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 36482                                  ; -----------------------------------------------------------------------------
 36483                                  ; ENTRY:   AL == new load UMB
 36484                                  ; EXIT:    None
 36485                                  ; ERROR:   None
 36486                                  ; USES:    Flags, AX
 36487                                  ; -----------------------------------------------------------------------------
 36488                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 36489                                  ;          time you would ever need this, so that's okay.
 36490                                  ; -----------------------------------------------------------------------------
 36491                                  
 36492                                  ; StoLoadUMB subroutine is not used anywhere
 36493                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 36494                                  ; Erdogan Tan - 18/07/2023
 36495                                  
 36496                                  ;StoLoadUMB:
 36497                                  ;	;putdata UmbLoad, al
 36498                                  ;	push	es
 36499                                  ;	push	cs
 36500                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 36501                                  ;	mov	[es:UmbLoad],al
 36502                                  ;	pop	es
 36503                                  ;	retn
 36504                                  
 36505                                  ; -----------------------------------------------------------------------------
 36506                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36507                                  ; -----------------------------------------------------------------------------
 36508                                  ; ENTRY:  AL == new load size
 36509                                  ; EXIT:   None
 36510                                  ; ERROR:  None
 36511                                  ; USES:   Flags, AX
 36512                                  ; -----------------------------------------------------------------------------
 36513                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 36514                                  	; 01/01/2023 - Retro DOS v4.2
 36515                                  StoLoadSize:
 36516                                  	; 01/01/2023
 36517                                  	;push	dx
 36518                                  
 36519                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 36520                                  	;
 36521                                  	;push	ds
 36522                                  	;push	cs
 36523                                  	;pop	ds
 36524                                  	;mov	dl,[UmbLoad]
 36525                                  	;pop	ds	
 36526                                  
 36527                                  	; 08/09/2023
 36528                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 36529                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 36530                                  
 36531                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 36532                                  					; instead of DL (*) ; 18/07/2023
 36533                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 36534                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 36535                                  	;je	short sls10
 36536                                  			
 36537                                  		; BUG ! stowSiz uses CL instead of DL !
 36538                                  		; (CL is set in ParseL which calls stowSiz)
 36539                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 36540                                  		; Erdogan Tan - 18/07/2023
 36541                                  
 36542                                  	; 08/09/2023 (BugFix)
 36543                                  	;mov	cl,[cs:UmbLoad]
 36544                                  	; 08/09/2023 
 36545                                  	; ds = cs
 36546 00002D20 8A0E[591F]              	mov	cl,[UmbLoad]
 36547 00002D24 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 36548 00002D27 74F6                    	je	short sls10 
 36549                                  
 36550                                  	; 08/09/2023
 36551                                  ;	call	stowSiz			; We've got a function to do just this
 36552                                  ;sls10:	
 36553                                  ;	; 01/01/2023
 36554                                  ;	;pop	dx
 36555                                  ;	retn
 36556                                  	
 36557                                  	; 08/09/2023
 36558                                  	;;jmp	stowSiz
 36559                                  	;jmp	short stowSiz
 36560                                  
 36561                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36562                                  %if 1
 36563                                  ; -----------------------------------------------------------------------------
 36564                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36565                                  ; -----------------------------------------------------------------------------
 36566                                  ; ENTRY:    CL contains UMB number, AX contains size
 36567                                  ; EXIT:     None
 36568                                  ; ERROR:    None
 36569                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36570                                  ; -----------------------------------------------------------------------------
 36571                                  
 36572                                  ; 13/05/2019
 36573                                  
 36574                                  	; 01/01/2023 - Retro DOS v4.2
 36575                                  stowSiz:
 36576                                  	; 01/01/2023
 36577                                  	;push	bx
 36578                                  	;;push	di ; ?
 36579                                  	;push	es
 36580                                  
 36581                                  	;push	cs
 36582                                  	;pop	es	
 36583                                  
 36584 00002D29 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 36585 00002D2B B700                    	mov	bh,0			;     bx==UMB number, AX==size
 36586 00002D2D D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 36587                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36588                                  	; 01/01/2023
 36589 00002D2F 2E8987[6A1F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 36590                                  
 36591                                  	; 01/01/2023
 36592                                  	;pop	es
 36593                                  	;;pop	di ; ?
 36594                                  	;pop	bx
 36595                                  
 36596 00002D34 C3                      	retn
 36597                                  %endif
 36598                                  
 36599                                  ; -----------------------------------------------------------------------------
 36600                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 36601                                  ; -----------------------------------------------------------------------------
 36602                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 36603                                  ; EXIT:     None; free elements in UMB marked as hidden
 36604                                  ; ERROR:    None
 36605                                  ; USES:     Flags
 36606                                  ; -----------------------------------------------------------------------------
 36607                                  
 36608                                  	; 01/01/2023 - Retro DOS v4.2
 36609                                  hideUMB:
 36610                                  	; 02/01/2023
 36611 00002D35 52                      	push	dx ; (*)
 36612                                  	; 01/01/2023
 36613                                  	;push	ax
 36614 00002D36 06                      	push	es
 36615                                  
 36616 00002D37 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 36617 00002D3A 7224                    	jc	short huX
 36618                                  
 36619                                  ; ------------------------------------------------
 36620                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 36621                                  ;            we're not in the same UMB, so exit.
 36622                                  ; ------------------------------------------------
 36623                                  
 36624 00002D3C E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36625 00002D3F 741F                    	jz	short huX	; If it is, we've finished the UMB.
 36626                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 36627 00002D41 26830E010000            	or	word [es:ARENA.OWNER],0
 36628 00002D47 7503                    	jnz	short hu20
 36629                                  
 36630 00002D49 E81700                  	call	hideMCB
 36631                                  hu20:	
 36632                                  	;mov	al,[es:ARENA.SIGNATURE]
 36633                                  	;cmp	al,arena_signature_end  ;'Z'
 36634                                  	; 19/07/2023
 36635 00002D4C 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 36636 00002D52 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 36637                                  
 36638                                  	;NextMCB es,ax		; Go on forward.
 36639 00002D54 8CC0                    	mov     ax,es
 36640                                  	;add	ax,[es:3]
 36641 00002D56 2603060300              	add     ax,[es:ARENA.SIZE]
 36642 00002D5B 40                      	inc     ax
 36643 00002D5C 8EC0                    	mov     es,ax
 36644                                  
 36645 00002D5E EBDC                    	jmp	short hu10
 36646                                  huX:	
 36647 00002D60 07                      	pop	es
 36648                                  	; 01/01/2023
 36649                                  	;pop	ax
 36650                                  	; 02/01/2023
 36651 00002D61 5A                      	pop	dx ; (*)
 36652 00002D62 C3                      	retn
 36653                                  
 36654                                  ; 02/01/2023
 36655                                  %if 0
 36656                                  
 36657                                  ; -----------------------------------------------------------------------------
 36658                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 36659                                  ; -----------------------------------------------------------------------------
 36660                                  ; ENTRY:    None
 36661                                  ; EXIT:     ZF set if user DIDN'T specify /S
 36662                                  ; ERROR:    None
 36663                                  ; USES:     Flags
 36664                                  ; -----------------------------------------------------------------------------
 36665                                  
 36666                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36667                                  isTiny:
 36668                                  	; 02/01/2023
 36669                                  	;push	ax
 36670                                  
 36671                                  	;getdata al,fUmbTiny
 36672                                  	;
 36673                                  	;push	ds
 36674                                  	;push	cs
 36675                                  	;pop	ds
 36676                                  	;mov	al,[fUmbTiny]
 36677                                  	;pop	ds
 36678                                  
 36679                                  	; 09/09/2023
 36680                                  	;mov	al,[cs:fUmbTiny]
 36681                                  	; 02/01/2023
 36682                                  	; ds = cs
 36683                                  	mov	al,[fUmbTiny]
 36684                                  
 36685                                  	or	al,al
 36686                                  	; 02/01/2023
 36687                                  	;pop	ax
 36688                                  	retn
 36689                                  
 36690                                  %endif
 36691                                  
 36692                                  ; -----------------------------------------------------------------------------
 36693                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 36694                                  ; -----------------------------------------------------------------------------
 36695                                  ; ENTRY:    ES:0 should point to an MCB
 36696                                  ; EXIT:     ZF set if MCB is free, else !ZF
 36697                                  ; ERROR:    None
 36698                                  ; USES:     Flags
 36699                                  ; -----------------------------------------------------------------------------
 36700                                  
 36701                                  ;isFreeMCB:
 36702                                  ;	or	word [es:ARENA.OWNER],0
 36703                                  ;	retn
 36704                                  
 36705                                  ; -----------------------------------------------------------------------------
 36706                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 36707                                  ; -----------------------------------------------------------------------------
 36708                                  ; ENTRY:    ES:0 should point to an MCB
 36709                                  ; EXIT:     None; MCB marked as HIDDEN
 36710                                  ; ERROR:    None
 36711                                  ; USES:     None
 36712                                  ; -----------------------------------------------------------------------------
 36713                                  
 36714                                  hideMCB:
 36715 00002D63 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 36716 00002D6A 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 36717 00002D71 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 36718 00002D78 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 36719 00002D7F 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 36720 00002D86 C3                      	retn
 36721                                  
 36722                                  ; -----------------------------------------------------------------------------
 36723                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 36724                                  ; -----------------------------------------------------------------------------
 36725                                  ; ENTRY:    ES:0 should point to an MCB
 36726                                  ; EXIT:     None; MCB marked as FREE
 36727                                  ; ERROR:    None
 36728                                  ; USES:     None
 36729                                  ; -----------------------------------------------------------------------------
 36730                                  
 36731                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36732                                  
 36733                                  unHideMCB:
 36734                                  	; 03/01/2023
 36735                                  	;push	ax
 36736 00002D87 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 36737 00002D8E B82020                  	mov	ax,'  ' ; 2020h
 36738 00002D91 26A30800                	mov	[es:ARENA.NAME+0],ax
 36739 00002D95 26A30A00                	mov	[es:ARENA.NAME+2],ax
 36740 00002D99 26A30C00                	mov	[es:ARENA.NAME+4],ax
 36741 00002D9D 26A30E00                	mov	[es:ARENA.NAME+6],ax
 36742                                  	; 03/01/2023
 36743                                  	;pop	ax
 36744 00002DA1 C3                      	retn
 36745                                  
 36746                                  ; -----------------------------------------------------------------------------
 36747                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 36748                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 36749                                  ; -----------------------------------------------------------------------------
 36750                                  ; ENTRY:    AL should be to a valid UMB number
 36751                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 36752                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 36753                                  ; USES:     Flags, ES
 36754                                  ; -----------------------------------------------------------------------------
 36755                                  
 36756                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36757                                  	; (SYSINIT:3344h)
 36758                                  findUMB:
 36759                                  	; 01/01/2023
 36760                                  	;push	ax
 36761                                  	; 02/01/2023
 36762 00002DA2 51                      	push	cx ; *
 36763                                  	;push	dx
 36764                                  
 36765 00002DA3 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 36766                                  
 36767 00002DA5 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 36768                                  
 36769 00002DA7 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 36770                                  	; 22/07/2023
 36771                                  	;mov	es,ax ; *
 36772 00002DAA 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 36773                                  
 36774                                  	; 22/07/2023
 36775                                  fu10:
 36776 00002DAC 8EC0                    	mov	es,ax ; * ; **
 36777                                  ; ---------------------------------------------
 36778                                  ; FU10--CX - This UMB number; 0 == conventional
 36779                                  ;       DX - The UMB number they're looking for
 36780                                  ;       ES - The current MCB address
 36781                                  ; ---------------------------------------------
 36782                                  
 36783                                  ;fu10:	
 36784 00002DAE 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 36785 00002DB0 7417                    	je	short fuX	; searching for--so exit.
 36786                                  
 36787 00002DB2 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36788 00002DB5 7501                    	jnz	short fu20
 36789                                  
 36790 00002DB7 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 36791                                  fu20:	
 36792                                  	;mov	al,[es:ARENA.SIGNATURE]
 36793                                  	;cmp	al,arena_signature_end ; 'Z'
 36794                                  	; 19/07/2023
 36795 00002DB8 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 36796 00002DBE 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 36797                                  
 36798                                  	;NextMCB es,ax		; Go on forward.
 36799                                  	; 22/07/2023
 36800                                  	; ax = es
 36801                                  	;mov	ax,es ; * ; 22/07/2023
 36802                                  	;add	ax,[es:3]
 36803 00002DC0 2603060300              	add	ax,[es:ARENA.SIZE]
 36804 00002DC5 40                      	inc	ax
 36805                                  	; 22/07/2023
 36806                                  	;mov	es,ax ; **
 36807 00002DC6 EBE4                    	jmp	short fu10
 36808                                  fuE:	
 36809 00002DC8 F9                      	stc
 36810                                  fuX:
 36811                                  	; 01/01/2023
 36812                                  	;pop	dx
 36813                                  	; 02/01/2023
 36814 00002DC9 59                      	pop	cx ; *
 36815                                  	;pop	ax		; The address is already in ES.
 36816 00002DCA C3                      	retn
 36817                                  
 36818                                  ; -----------------------------------------------------------------------------
 36819                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 36820                                  ; -----------------------------------------------------------------------------
 36821                                  ; ENTRY:    AL should be to a valid UMB number
 36822                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 36823                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 36824                                  ; USES:     Flags, ES
 36825                                  ; -----------------------------------------------------------------------------
 36826                                  
 36827                                  	; 01/01/2023 - Retro DOS v4.2
 36828                                  BigFree:
 36829                                  	; 01/01/2023
 36830                                  	;push	bx
 36831 00002DCB 51                      	push	cx
 36832                                  
 36833 00002DCC E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 36834 00002DCF 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 36835                                  
 36836 00002DD1 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 36837 00002DD3 31C9                    	xor	cx,cx			; Size of largest free MCB
 36838                                  
 36839                                  ; ---------------------------------------------
 36840                                  ; BF10--ES - Current MCB address
 36841                                  ;       BX - Address of largest free MCB so far
 36842                                  ;       CX - Size of largest free MCB so far
 36843                                  ; ---------------------------------------------
 36844                                  
 36845                                  bf10:	
 36846 00002DD5 E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 36847 00002DD8 7428                    	jz	short bf30
 36848                                  
 36849                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 36850 00002DDA 26830E010000            	or	word [es:ARENA.OWNER],0
 36851 00002DE0 750C                    	jnz	short bf20
 36852                                  
 36853 00002DE2 26A10300                	mov	ax,[es:ARENA.SIZE]
 36854                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 36855 00002DE6 39C1                    	cmp	cx,ax
 36856                                  	;jg	short bf20		; Unless we're bigger,
 36857                                  	; 19/07/2023
 36858 00002DE8 7D04                    	jge	short bf20
 36859                                  
 36860 00002DEA 8CC3                    	mov	bx,es			; Store this new element's address,
 36861                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 36862 00002DEC 89C1                    	mov	cx,ax
 36863                                  
 36864                                  bf20:	
 36865                                  	;mov	al,[es:ARENA.SIGNATURE]
 36866                                  	;cmp	al,arena_signature_end	; 'Z'
 36867                                  	; 19/07/2023
 36868                                  	;cmp	byte [es:0],'Z'
 36869 00002DEE 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36870 00002DF4 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 36871                                  
 36872                                  	;NextMCB es,ax			; Go on forward.
 36873 00002DF6 8CC0                    	mov     ax,es
 36874                                  	;add	ax,[es:3]
 36875 00002DF8 2603060300              	add     ax,[es:ARENA.SIZE]
 36876 00002DFD 40                      	inc     ax
 36877 00002DFE 8EC0                    	mov     es,ax
 36878                                  
 36879 00002E00 EBD3                    	jmp	short bf10
 36880                                  
 36881 00002E02 8EC3                    bf30:	mov	es,bx			; Return the address
 36882 00002E04 89C8                    	mov	ax,cx			; Return the size
 36883 00002E06 09DB                    	or	bx,bx
 36884 00002E08 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 36885                                  bfE:	
 36886 00002E0A F9                      	stc
 36887                                  bfX:
 36888 00002E0B 59                      	pop	cx
 36889                                  	; 01/01/2023
 36890                                  	;pop	bx
 36891 00002E0C C3                      	retn
 36892                                  
 36893                                  ; -----------------------------------------------------------------------------
 36894                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36895                                  ; -----------------------------------------------------------------------------
 36896                                  ; ENTRY:    AL should be to a valid UMB number
 36897                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 36898                                  ; ERROR:    None
 36899                                  ; USES:     Flags
 36900                                  ; -----------------------------------------------------------------------------
 36901                                  
 36902                                  	; 02/01/2023 - Retro DOS v4.2
 36903                                  
 36904                                  isSpecified:
 36905                                  	; 02/01/2023
 36906                                  	;push	ax
 36907                                  
 36908 00002E0D 30FF                    	xor	bh,bh
 36909 00002E0F 88C3                    	mov	bl,al
 36910                                  
 36911                                  	;getdata al,DS:UmbUsed[bx]
 36912                                  	;
 36913                                  	;push	ds
 36914                                  	;push	cs
 36915                                  	;pop	ds
 36916                                  	;mov	al,[bx+UmbUsed]
 36917                                  	;pop	ds
 36918                                  	
 36919                                  	;mov	al,[cs:bx+UmbUsed]
 36920                                  	; 02/01/2023
 36921                                  	; ds = cs
 36922 00002E11 8A87[5A1F]              	mov	al,[bx+UmbUsed]
 36923                                  
 36924 00002E15 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 36925                                  
 36926                                  	; 09/09/2023
 36927                                  	; 02/01/2023
 36928                                  	;pop	ax
 36929                                  
 36930 00002E17 C3                      	retn
 36931                                  
 36932                                  ; -----------------------------------------------------------------------------
 36933                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 36934                                  ; -----------------------------------------------------------------------------
 36935                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 36936                                  ; EXIT:     None; MCB broken if carry clear
 36937                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 36938                                  ; USES:     Flags
 36939                                  ; -----------------------------------------------------------------------------
 36940                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 36941                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 36942                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 36943                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 36944                                  ; minimum for performing a split.
 36945                                  ; -----------------------------------------------------------------------------
 36946                                  
 36947                                  MIN_SPLIT_SIZE	equ	20h
 36948                                  
 36949                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36950                                  
 36951                                  shrinkMCB:
 36952                                  	;pushreg <bx,cx,es>
 36953                                  	; 02/01/2023
 36954                                  	;push	bx
 36955 00002E18 51                      	push	cx
 36956 00002E19 06                      	push	es
 36957                                  
 36958 00002E1A 89C3                    	mov	bx,ax			; Move things around... and
 36959                                  	; 02/01/2023
 36960                                  	;mov	ax,es			; save this one for later.
 36961                                  
 36962 00002E1C 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 36963                                  	; 02/01/2023
 36964 00002E21 89C8                    	mov	ax,cx 
 36965                                  
 36966 00002E23 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 36967                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 36968                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 36969                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 36970                                  	; 18/12/2022
 36971                                  	;cmp	cx,bx
 36972                                  	; 02/01/2023
 36973 00002E26 39D8                    	cmp	ax,bx
 36974 00002E28 7228                    	jb	short smE ; (*)
 36975                                  
 36976 00002E2A 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 36977                                  	
 36978                                  	;mov	cx,[es:ARENA.SIZE]
 36979                                  	; 02/01/2023
 36980 00002E2F 8CC0                    	mov	ax,es
 36981                                  
 36982 00002E31 26891E0300              	mov	[es:ARENA.SIZE],bx
 36983 00002E36 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 36984                                  
 36985 00002E3C 01D8                    	add	ax,bx
 36986 00002E3E 40                      	inc	ax
 36987 00002E3F 8EC0                    	mov	es,ax			; Move to new arena area
 36988                                  
 36989 00002E41 89C8                    	mov	ax,cx
 36990 00002E43 29D8                    	sub	ax,bx
 36991                                  	; 12/12/2022
 36992                                  	; ax > 0
 36993 00002E45 48                      	dec	ax			; And prepare the new size
 36994                                  
 36995                                  	; 18/12/2022
 36996 00002E46 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 36997                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 36998 00002E4B 26A30300                	mov	[es:ARENA.SIZE],ax
 36999                                  	;mov	ax,'  ' ; 2020h
 37000                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 37001                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 37002                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 37003                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 37004                                  
 37005                                  	; 18/12/2022
 37006 00002E4F E8A801                  	call	freeMCB	; (**)
 37007                                  
 37008                                  	; 12/12/2022
 37009                                  	; cf=0
 37010                                  	;clc
 37011                                  	; 18/12/2022
 37012                                  	;jmp	short smX
 37013                                  smE:	
 37014                                  	; 18/12/2022
 37015                                  	; cf=1 (*)
 37016                                  	;stc
 37017                                  smX:	
 37018                                  	;popreg	<es,cx,bx>
 37019 00002E52 07                      	pop	es
 37020 00002E53 59                      	pop	cx
 37021                                  	; 02/01/2023
 37022                                  	;pop	bx
 37023 00002E54 C3                      	retn
 37024                                  
 37025                                  ; -----------------------------------------------------------------------------
 37026                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37027                                  ; -----------------------------------------------------------------------------
 37028                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37029                                  ; EXIT:     None; UMB is hidden as necessary
 37030                                  ; ERROR:    None
 37031                                  ; USES:     Flags, AX, CX
 37032                                  ; -----------------------------------------------------------------------------
 37033                                  ; PRIMARY LOGIC:
 37034                                  ;
 37035                                  ; If the UMB is specified in the DH/LH statement, then:
 37036                                  ;    If the largest free segment is too small (check specified size), then:
 37037                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37038                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37039                                  ;       If /S was given on the command-line, then:
 37040                                  ;          Break that element into two pieces
 37041                                  ;          Set a flag that we're shrinking
 37042                                  ;       Endif
 37043                                  ;    Endif
 37044                                  ; Endif
 37045                                  ; If the UMB is NOT specified (or was removed by the above):
 37046                                  ;    Hide all free elements in the UMB
 37047                                  ;    If the flag that we're shrinking was set, then:
 37048                                  ;       UN-hide the lower portion of the shrunken UMB
 37049                                  ;    ENDIF
 37050                                  ; ENDIF
 37051                                  ; -----------------------------------------------------------------------------
 37052                                  
 37053                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37054                                  	; (SYSINIT:3426h)
 37055                                  _hideUMB_:
 37056                                  	; 02/01/2023
 37057                                  	; ds = cs
 37058                                  
 37059                                  	; 01/01/2023
 37060                                  	;push	bx
 37061                                  	;push	dx
 37062 00002E55 06                      	push	es
 37063                                  
 37064 00002E56 88C8                    	mov	al,cl
 37065 00002E58 E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37066 00002E5B 742D                    	jz	short hu_20
 37067                                  
 37068 00002E5D 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37069 00002E5F E869FF                  	call	BigFree		; free element in AX; put its address in ES
 37070 00002E62 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 37071                                  
 37072 00002E64 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37073 00002E65 88C8                    	mov	al,cl		; Retrieve the user's specified
 37074 00002E67 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 37075 00002E6A 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37076                                  
 37077 00002E6B 09C0                    	or	ax,ax		; If they didn't specify one,
 37078 00002E6D 741B                    	jz	short hu_20	; Skip over all this.
 37079                                  
 37080 00002E6F 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37081 00002E71 7607                    	jbe	short hu_10
 37082                                  
 37083 00002E73 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37084 00002E75 E81DFD                  	call	unMarkUMB
 37085 00002E78 EB10                    	jmp	short hu_20
 37086                                  hu_10:	
 37087                                  	;call	isTiny		; Returns ZF clear if user specified /S
 37088                                  	;jz	short hu_20
 37089                                  	; 02/01/2023
 37090                                  ;isTiny:
 37091                                  	;mov	al,[fUmbTiny] ; ds = cs
 37092                                  	;or	al,al
 37093 00002E7A 800E[561F]00            	or	byte [fUmbTiny],0
 37094 00002E7F 7409                    	jz	short hu_20
 37095                                  
 37096 00002E81 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37097 00002E84 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 37098                                  
 37099 00002E86 8CC2                    	mov	dx,es
 37100 00002E88 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 37101                                  
 37102 00002E8A 89C8                    hu_20:	mov	ax,cx
 37103 00002E8C E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 37104 00002E8F 7510                    	jnz	short hu_X	; so leave.
 37105                                  
 37106 00002E91 31D2                    	xor	dx,dx
 37107                                  hu_30:	
 37108 00002E93 88C8                    	mov	al,cl
 37109                                  
 37110 00002E95 E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 37111                                  
 37112 00002E98 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37113 00002E9A 7405                    	jz	short hu_X	; So we should leave.
 37114                                  
 37115 00002E9C 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37116 00002E9E E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37117                                  hu_X:	
 37118 00002EA1 07                      	pop	es
 37119                                  	; 01/01/2023
 37120                                  	;pop	dx
 37121                                  	;pop	bx
 37122 00002EA2 C3                      	retn
 37123                                  
 37124                                  ; -----------------------------------------------------------------------------
 37125                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 37126                                  ; -----------------------------------------------------------------------------
 37127                                  ; Entry:  None
 37128                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 37129                                  ; Error:  None
 37130                                  ; Uses:   Flags
 37131                                  ; -----------------------------------------------------------------------------
 37132                                  
 37133                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37134                                  UnFreeze:
 37135                                  	; 03/01/2023
 37136                                  	;push	ax
 37137 00002EA3 06                      	push	es
 37138                                  
 37139 00002EA4 E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 37140 00002EA7 721C                    	jc	short ufX
 37141                                  
 37142                                  	; 22/07/2023
 37143                                  uf10:
 37144 00002EA9 8EC0                    	mov	es,ax ; *
 37145                                  
 37146                                  ; ------------------------------
 37147                                  ; UF10--ES - Current MCB address
 37148                                  ; ------------------------------
 37149                                  
 37150                                  ;uf10:	
 37151 00002EAB E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 37152 00002EAE 7505                    	jnz	short uf20
 37153 00002EB0 E8D4FE                  	call	unHideMCB
 37154                                  	; 09/09/2023
 37155                                  	; ax <> es
 37156 00002EB3 8CC0                    	mov	ax,es ; *
 37157                                  uf20:	
 37158                                  	;mov	al,[es:ARENA.SIGNATURE]
 37159                                  	;cmp	al,arena_signature_end ; 'Z'
 37160                                  	; 22/07/2023
 37161 00002EB5 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37162 00002EBB 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 37163                                  
 37164                                  	;NextMCB es,ax		; Go on forward.
 37165                                  	; 22/07/2023
 37166                                  	; ax = es
 37167                                  	;mov	ax,es ; *
 37168                                  	;add	ax,[es:3]
 37169 00002EBD 2603060300              	add	ax,[es:ARENA.SIZE]
 37170 00002EC2 40                      	inc	ax
 37171                                  	; 22/07/2023
 37172                                  	;mov	es,ax
 37173 00002EC3 EBE4                    	jmp	short uf10
 37174                                  ufX:	
 37175 00002EC5 07                      	pop	es
 37176                                  	; 03/01/2023
 37177                                  	;pop	ax
 37178 00002EC6 C3                      	retn
 37179                                  
 37180                                  ; -----------------------------------------------------------------------------
 37181                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 37182                                  ; -----------------------------------------------------------------------------
 37183                                  ; ENTRY:    ES:0 should point to an MCB
 37184                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 37185                                  ; ERROR:    None
 37186                                  ; USES:     Flags
 37187                                  ; -----------------------------------------------------------------------------
 37188                                  
 37189                                  isFrozMCB:
 37190                                  	;push	ax
 37191                                  
 37192                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37193                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37194 00002EC7 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 37195 00002ECD 7522                    	jne	short ifmX
 37196                                  
 37197                                  	;mov	ax,[es:ARENA.NAME+0]
 37198                                  	;cmp	ax,'FR' ; 5246h
 37199 00002ECF 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 37200 00002ED6 7519                    	jne	short ifmX
 37201                                  	;mov	ax,[es:ARENA.NAME+2]
 37202                                  	;cmp	ax,'OZ' ; 5A4Fh
 37203 00002ED8 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 37204 00002EDF 7510                    	jne	short ifmX
 37205                                  	;mov	ax,[es:ARENA.NAME+4]
 37206                                  	;cmp	ax,'EN' ; 4E45h
 37207 00002EE1 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37208 00002EE8 7507                    	jne	short ifmX
 37209                                  	;mov	ax,[es:ARENA.NAME+6]
 37210                                  	;cmp	ax,'  ' ; 2020h
 37211 00002EEA 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37212                                  ifmX:	
 37213                                  	;pop	ax
 37214 00002EF1 C3                      	retn
 37215                                  
 37216                                  ; -----------------------------------------------------------------------------
 37217                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 37218                                  ; -----------------------------------------------------------------------------
 37219                                  ; ENTRY:    ES:0 should point to an MCB
 37220                                  ; EXIT:     None; MCB frozen
 37221                                  ; ERROR:    None
 37222                                  ; USES:     None
 37223                                  ; -----------------------------------------------------------------------------
 37224                                  
 37225                                  frezMCB:
 37226 00002EF2 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37227 00002EF9 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 37228 00002F00 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 37229 00002F07 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 37230 00002F0E 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 37231 00002F15 C3                      	retn
 37232                                  
 37233                                  ; -----------------------------------------------------------------------------
 37234                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 37235                                  ; -----------------------------------------------------------------------------
 37236                                  ; Entry:  None
 37237                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 37238                                  ; Error:  None
 37239                                  ; Uses:   Flags
 37240                                  ; -----------------------------------------------------------------------------
 37241                                  
 37242                                  	; 01/01/2023 - Retro DOS v4.2  
 37243                                  FreezeUM:
 37244                                  	; 01/01/2023
 37245                                  	;push	ax
 37246                                  	;push	cx
 37247                                  	;push	dx
 37248 00002F16 06                      	push	es
 37249                                  
 37250                                  	;;call	GetLoadUMB
 37251                                  	; 01/01/2023
 37252                                  	; ds = cs
 37253                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 37254 00002F17 A0[591F]                	mov	al,[UmbLoad] 	
 37255                                  
 37256 00002F1A 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37257 00002F1C 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 37258                                  
 37259 00002F1E E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 37260                                  	; 22/07/2023
 37261                                  	;mov	es,ax ; *
 37262 00002F21 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37263                                  
 37264                                  	; 22/07/2023
 37265                                  fum10:
 37266 00002F23 8EC0                    	mov	es,ax ; *
 37267                                  
 37268                                  ; -----------------------------------------
 37269                                  ; FUM10--ES - Current MCB address
 37270                                  ;        CX - Current UMB number
 37271                                  ;        DX - UMB number to skip (load UMB)
 37272                                  ; -----------------------------------------
 37273                                  
 37274                                  ;fum10:	
 37275 00002F25 E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37276 00002F28 7501                    	jnz	short fum20
 37277                                  
 37278 00002F2A 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37279                                  fum20:	
 37280 00002F2B 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 37281 00002F2D 740B                    	je	short fum30	; freeze anything... so skip that section.
 37282                                  
 37283                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 37284 00002F2F 26830E010000            	or	word [es:ARENA.OWNER],0
 37285 00002F35 7503                    	jnz	short fum30	; either.
 37286                                  
 37287 00002F37 E8B8FF                  	call	frezMCB
 37288                                  fum30:	
 37289                                  	;mov	al,[es:ARENA.SIGNATURE]
 37290                                  	;cmp	al,arena_signature_end ; 'Z'
 37291                                  	; 22/07/2023
 37292 00002F3A 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37293 00002F40 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 37294                                  
 37295                                  	;NextMCB es, ax		; Go on forward.
 37296                                  	; 22/07/2023
 37297                                  	; ax = es
 37298                                  	;mov	ax,es
 37299                                  	;add	ax,[es:3]
 37300 00002F42 2603060300              	add	ax,[es:ARENA.SIZE]
 37301 00002F47 40                      	inc	ax
 37302                                  	; 22/07/2023
 37303                                  	;mov	es,ax ; *
 37304 00002F48 EBD9                    	jmp	short fum10
 37305                                  
 37306 00002F4A 07                      fumX:	pop	es
 37307                                  	; 01/01/2023
 37308                                  	;pop	dx
 37309                                  	;pop	cx
 37310                                  	;pop	ax
 37311 00002F4B C3                      	retn
 37312                                  
 37313                                  ; -----------------------------------------------------------------------------
 37314                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 37315                                  ; -----------------------------------------------------------------------------
 37316                                  ; ENTRY:    None
 37317                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 37318                                  ; ERROR:    None
 37319                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 37320                                  ; -----------------------------------------------------------------------------
 37321                                  
 37322                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37323                                  UmbTest:
 37324                                  	; 01/01/2023
 37325                                  	;push	ax
 37326 00002F4C 53                      	push	bx ; *
 37327                                  	;push	ds
 37328 00002F4D 06                      	push	es ; **
 37329                                  
 37330                                  	; 01/01/2023
 37331                                  	; ds = cs
 37332                                  
 37333 00002F4E E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 37334 00002F51 E80800                  	call	WalkMem			; Check to see if they're really linked
 37335 00002F54 9C                      	pushf				; And remember what we found out
 37336 00002F55 E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 37337 00002F58 9D                      	popf				; And restore what we found out.
 37338                                  
 37339 00002F59 07                      	pop	es ; **
 37340                                  	; 01/01/2023
 37341                                  	;pop	ds
 37342 00002F5A 5B                      	pop	bx ; *
 37343                                  	;pop	ax
 37344 00002F5B C3                      	retn
 37345                                  
 37346                                  ; -----------------------------------------------------------------------------
 37347                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 37348                                  ; -----------------------------------------------------------------------------
 37349                                  ; ENTRY:    None
 37350                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 37351                                  ; ERROR:    None
 37352                                  ; USES:     Flags
 37353                                  ; -----------------------------------------------------------------------------
 37354                                  
 37355                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37356                                  	; (SYSINIT:3541h)
 37357                                  
 37358                                  WalkMem:
 37359                                  	;push	ax ; ?
 37360                                  	;push	bx ; ?
 37361                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 37362                                  	;push	es ; ? no need to save contents of these registers ?
 37363                                  		   	
 37364 00002F5C B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37365 00002F5E CD21                    	int	21h
 37366                                  
 37367 00002F60 268B47FE                	mov	ax,[es:bx-2]
 37368                                  	; 22/07/2023
 37369                                  um10:
 37370 00002F64 8EC0                    	mov	es,ax ; * ; **
 37371                                  
 37372                                  ; ------------------------------
 37373                                  ; UM10: ES = Current MCB pointer
 37374                                  ; ------------------------------
 37375                                  
 37376                                  ;um10:
 37377                                  	;mov	al,[es:ARENA.SIGNATURE]
 37378                                  	;cmp	al,arena_signature_end ; 'Z'
 37379                                  	; 22/07/2023
 37380 00002F66 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37381 00002F6C 7408                    	je	short um20		; If signature == 'Z', hay no more.
 37382                                  
 37383                                  	;NextMCB es,bx			; Move to the next MCB
 37384                                  
 37385                                  	;mov	bx,es
 37386                                  	;;add	bx,[es:3]
 37387                                  	;add	bx,[es:ARENA.SIZE]
 37388                                  	;inc	bx
 37389                                  	;mov	es,bx
 37390                                  	; 22/07/2023
 37391                                  	; ax = es
 37392                                  	;mov	ax,es ; *
 37393 00002F6E 2603060300              	add	ax,[es:ARENA.SIZE]
 37394 00002F73 40                      	inc	ax
 37395                                  	;mov	es,ax ; **
 37396                                  	
 37397 00002F74 EBEE                    	jmp	short um10		; And restart the loop.
 37398                                  um20:	
 37399                                  	; 22/07/2023
 37400                                  	; ax = es
 37401                                  	;mov	ax,es
 37402                                  
 37403 00002F76 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 37404                                  
 37405                                  	;pop	es ; ?
 37406                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 37407                                  	;pop	bx ; ?
 37408                                  	;pop	ax ; ?
 37409                                  	
 37410 00002F79 C3                      	retn
 37411                                  
 37412                                  ; -----------------------------------------------------------------------------
 37413                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 37414                                  ; -----------------------------------------------------------------------------
 37415                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37416                                  ; EXIT:     None
 37417                                  ; ERROR:    None
 37418                                  ; USES:     AX, BX
 37419                                  ; -----------------------------------------------------------------------------
 37420                                  
 37421                                  	; 01/01/2023 - Retro DOS v4.2
 37422                                  hl_unlink:
 37423 00002F7A 30FF                    	xor	bh,bh
 37424                                  
 37425                                  	;getdata bl,fm_umb		; Restore original link-state
 37426                                  	;
 37427                                  	;push	ds
 37428                                  	;push	cs
 37429                                  	;pop	ds
 37430                                  	;mov	bl,[fm_umb]
 37431                                  	;pop	ds
 37432                                  
 37433                                  	; 01/01/2023
 37434                                  	; ds = cs
 37435                                  	;mov	bl,[cs:fm_umb]
 37436 00002F7C 8A1E[8A1F]              	mov	bl,[fm_umb]
 37437                                  
 37438 00002F80 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37439 00002F83 CD21                    	int	21h
 37440 00002F85 C3                      	retn
 37441                                  
 37442                                  ; ----------------------------------------------------------------------
 37443                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 37444                                  ; ----------------------------------------------------------------------
 37445                                  ; 09/04/2019 - Retro DOS v4.0
 37446                                  
 37447                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 37448                                  ;   Date:     May 14, 1992
 37449                                  
 37450                                  ;   Modification log:
 37451                                  ;
 37452                                  ;     DATE    WHO      DESCRIPTION
 37453                                  ;   --------  -------  --------------------------------------------------------
 37454                                  ;   05/14/92  t-richj  Original
 37455                                  ;   06/21/92  t-richj  Final revisions before check-in
 37456                                  
 37457                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 37458                                  
 37459                                  ; -----------------------------------------------------------------------------
 37460                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 37461                                  ; -----------------------------------------------------------------------------
 37462                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 37463                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 37464                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 37465                                  ; ERROR:  None
 37466                                  ; USES:   fInHigh (from highvar.inc), carry flag
 37467                                  ; -----------------------------------------------------------------------------
 37468                                  
 37469                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37470                                  	; (SYSINIT:357Bh)
 37471                                  
 37472                                  UnHideUMBs:
 37473 00002F86 50                      	push	ax		; Save ax for what we're about to do
 37474                                  
 37475                                  ; -----------------------------------------------------------------------------
 37476                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 37477                                  ;    length of time. Those six constitute a check of whether or not we should
 37478                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 37479                                  ;    will destroy the current link-state and memory-allocation strategy after
 37480                                  ;    every command execution.
 37481                                  ; -----------------------------------------------------------------------------
 37482                                  
 37483                                  	;getdata al,fInHigh	; Get InHigh from data segment
 37484                                  	;
 37485                                  	;push	ds
 37486                                  	;push	cs
 37487                                  	;pop	ds
 37488                                  	;mov	al,[fInHigh]
 37489                                  	;pop	ds	
 37490                                  
 37491                                  	;mov	al,[cs:fInHigh]
 37492                                  	; 31/12/2022
 37493                                  	; ds = cs
 37494 00002F87 A0[551F]                	mov	al,[fInHigh]	
 37495                                  
 37496 00002F8A 08C0                    	or	al,al
 37497 00002F8C 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 37498                                  
 37499 00002F8E 58                      	pop	ax		; then there's nothing to do here... so
 37500 00002F8F F9                      	stc			; restore everything and return. Just like
 37501 00002F90 C3                      	retn			; that.
 37502                                  uhu10:	
 37503 00002F91 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 37504 00002F94 E81200                  	call	FreeUMBs
 37505                                  
 37506                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 37507                                  	;
 37508                                  	;push	es
 37509                                  	;push	cs
 37510                                  	;pop	es
 37511                                  	;mov	byte [es:fInHigh],0
 37512                                  	;pop	ds
 37513                                  
 37514                                  	; 31/12/2022
 37515                                  	; ds = cs	
 37516                                  	;mov	byte [cs:fInHigh],0
 37517 00002F97 C606[551F]00            	mov	byte [fInHigh],0
 37518                                  
 37519                                  	;call	he_unlink	; Unlink UMBs
 37520                                  	; 31/12/2022
 37521                                  ;;he_unlink:
 37522 00002F9C 30FF                    	xor	bh,bh
 37523                                  
 37524                                  	;getdata bl,fm_umb	; Restore original link-state
 37525                                  	;mov	bl,[cs:fm_umb]	
 37526 00002F9E 8A1E[8A1F]              	mov	bl,[fm_umb]
 37527                                  
 37528 00002FA2 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37529 00002FA5 CD21                    	int	21h
 37530                                  	;;retn
 37531                                  
 37532 00002FA7 58                      	pop	ax
 37533                                  	; 12/12/2022
 37534                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 37535 00002FA8 C3                      	retn
 37536                                  
 37537                                  ; 31/12/2022
 37538                                  ;%if 0
 37539                                  ;
 37540                                  ;; -----------------------------------------------------------------------------
 37541                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 37542                                  ;; -----------------------------------------------------------------------------
 37543                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37544                                  ;; EXIT:     None
 37545                                  ;; ERROR:    None
 37546                                  ;; USES:     AX, BX
 37547                                  ;; -----------------------------------------------------------------------------
 37548                                  ;
 37549                                  ;he_unlink:
 37550                                  ;	xor	bh, bh
 37551                                  ;
 37552                                  ;	;getdata bl, fm_umb	; Restore original link-state
 37553                                  ;	mov	bl,[cs:fm_umb]	
 37554                                  ;
 37555                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 37556                                  ;	int	21h
 37557                                  ;	retn
 37558                                  ;
 37559                                  ;%endif
 37560                                  
 37561                                  ; -----------------------------------------------------------------------------
 37562                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 37563                                  ; -----------------------------------------------------------------------------
 37564                                  ; ENTRY:    None
 37565                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 37566                                  ; ERROR:    None (ignore CF)
 37567                                  ; USES:     Flags
 37568                                  ; -----------------------------------------------------------------------------
 37569                                  
 37570                                  FreeUMBs:
 37571 00002FA9 50                      	push	ax
 37572 00002FAA 06                      	push	es
 37573                                  
 37574 00002FAB E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 37575 00002FAE 721C                    	jc	short fusX
 37576                                  fus10:
 37577 00002FB0 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 37578                                  ;fus10:	
 37579 00002FB2 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 37580 00002FB5 7505                    	jnz	short fus20
 37581 00002FB7 E84000                  	call	freeMCB
 37582                                  	; 09/09/2023
 37583                                  	; ax <> es
 37584 00002FBA 8CC0                    	mov	ax,es
 37585                                  fus20:	   
 37586                                  	;mov	al,[es:ARENA.SIGNATURE]
 37587                                  	;cmp	al,arena_signature_end ; 'Z'
 37588                                  	; 22/07/2023
 37589 00002FBC 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37590 00002FC2 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 37591                                  	
 37592                                  	; 22/07/2023
 37593                                  	; ax = es
 37594                                  	;mov	ax,es
 37595 00002FC4 2603060300              	add	ax,[es:ARENA.SIZE]
 37596 00002FC9 40                      	inc	ax
 37597                                  	; 22/07/2023
 37598                                  	;mov	es,ax
 37599 00002FCA EBE4                    	jmp	short fus10	; Go on forward.
 37600                                  fusX:	
 37601 00002FCC 07                      	pop	es
 37602 00002FCD 58                      	pop	ax
 37603 00002FCE C3                      	retn
 37604                                  
 37605                                  ; -----------------------------------------------------------------------------
 37606                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 37607                                  ; -----------------------------------------------------------------------------
 37608                                  ; ENTRY:    ES:0 should point to an MCB
 37609                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 37610                                  ; ERROR:    None
 37611                                  ; USES:     Flags
 37612                                  ; -----------------------------------------------------------------------------
 37613                                  
 37614                                  isHideMCB:
 37615                                  	;push	ax
 37616                                  
 37617 00002FCF 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 37618 00002FD5 7522                    	jne	short ihm_x				; then check for HIDDEN
 37619                                  
 37620                                  	;mov	ax,[es:ARENA.NAME]
 37621                                  	;cmp	ax,'HI' ; 4948h
 37622 00002FD7 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 37623 00002FDE 7519                    	jne	short ihm_x
 37624                                  	;mov	ax,[es:ARENA.NAME+2]
 37625                                  	;cmp	ax,'DD' ; 4444h
 37626 00002FE0 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 37627 00002FE7 7510                    	jne	short ihm_x
 37628                                  	;mov	ax,[es:ARENA.NAME+4]
 37629                                  	;cmp	ax,'EN' ; 4E45h
 37630 00002FE9 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37631 00002FF0 7507                    	jne	short ihm_x
 37632                                  	;mov	ax,[es:ARENA.NAME+6]
 37633                                  	;cmp	ax,'  ' ; 2020h
 37634 00002FF2 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37635                                  ihm_x:	
 37636                                  	;pop	ax
 37637 00002FF9 C3                      	retn
 37638                                  
 37639                                  ; -----------------------------------------------------------------------------
 37640                                  ;*** freeMCB - marks as free the MCB at ES:0
 37641                                  ; -----------------------------------------------------------------------------
 37642                                  ; ENTRY:    ES:0 should point to an MCB
 37643                                  ; EXIT:     None; MCB free'd
 37644                                  ; ERROR:    None
 37645                                  ; USES:     AX
 37646                                  ; -----------------------------------------------------------------------------
 37647                                  
 37648                                  freeMCB:
 37649 00002FFA 26C70601000000          	mov	word [es:ARENA.OWNER],0
 37650 00003001 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 37651 00003004 26A30800                	mov	[es:ARENA.NAME+0],ax
 37652 00003008 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37653 0000300C 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37654 00003010 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37655 00003014 C3                      	retn
 37656                                  
 37657                                  ; -----------------------------------------------------------------------------
 37658                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 37659                                  ; -----------------------------------------------------------------------------
 37660                                  ; ENTRY:  Nothing
 37661                                  ; EXIT:   AX contains 0x9FFF for most systems
 37662                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37663                                  ; USES:   Flags, AX
 37664                                  ; -----------------------------------------------------------------------------
 37665                                  
 37666                                  HeadUmb:
 37667                                  	; 13/05/2019
 37668                                  
 37669                                  	;push	si ; ?
 37670                                  	;push	ds ; ?
 37671                                  	;push	es
 37672                                  	;push	bx ; *
 37673                                  
 37674                                  	; 09/04/2019
 37675                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 37676                                  
 37677 00003015 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37678 00003017 CD21                    	int	21h
 37679                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37680                                  			; Return: ES:BX -> DOS list of lists
 37681                                  	;mov	ax,[es:8Ch]
 37682 00003019 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 37683 0000301D 83F8FF                  	cmp	ax,0FFFFh
 37684                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 37685                                  
 37686                                  	;clc				; Else, it isn't.
 37687                                  	;jmp	short xhu_x
 37688                                  xhu_e:	
 37689                                  	;stc
 37690 00003020 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 37691                                  xhu_x:	
 37692                                  	;pop	bx ; *
 37693                                  	;pop	es	
 37694                                  	;pop	ds ; ?
 37695                                  	;pop	si ; ?
 37696 00003021 C3                      	retn
 37697                                  
 37698                                  ; -----------------------------------------------------------------------------
 37699                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 37700                                  ; -----------------------------------------------------------------------------
 37701                                  ; ENTRY:    None
 37702                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37703                                  ; ERROR:    None
 37704                                  ; USES:     AX, BX, fm_umb
 37705                                  ; -----------------------------------------------------------------------------
 37706                                  
 37707                                  linkumb:
 37708 00003022 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 37709 00003025 CD21                    	int	21h			; Current link-state is now in al
 37710                                  
 37711 00003027 08C0                    	or	al,al			; BUGBUG: proper check?
 37712 00003029 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 37713                                  
 37714 0000302B B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37715 0000302E BB0100                  	mov	bx,1
 37716 00003031 CD21                    	int	21h
 37717                                  lumbX:
 37718 00003033 C3                      	retn
 37719                                  
 37720                                  ;%endif
 37721                                  
 37722                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37723                                  ; (SYSINIT:2B5Fh)
 37724                                  
 37725                                  ; ----------------------------------------------------------------------
 37726                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 37727                                  ; ----------------------------------------------------------------------
 37728                                  ; 09/04/2019 - Retro DOS v4.0
 37729                                  
 37730                                  ;----------------------------------------------------------------------------
 37731                                  ;
 37732                                  ; procedure : InitDevLoad
 37733                                  ;
 37734                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 37735                                  ;			 = 1 indicates load in UMB:
 37736                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 37737                                  ;		                    = 1 indicates a DOS 5-style load
 37738                                  ;		DevSize  = Size of the device driver file in paras
 37739                                  ;
 37740                                  ;	Output : none
 37741                                  ;
 37742                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 37743                                  ;	Also sets up a header for the Device driver entry for mem utility
 37744                                  ;
 37745                                  ;----------------------------------------------------------------------------
 37746                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 37747                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 37748                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 37749                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 37750                                  ;----------------------------------------------------------------------------
 37751                                  
 37752                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37753                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37754                                  	; (SYSINIT:364Ah)
 37755                                  InitDevLoad:
 37756                                  	; 01/01/2023
 37757                                  	;push	es ; *
 37758                                  
 37759                                  	; 11/12/2022
 37760                                  	; ds = cs
 37761 00003034 803E[AB1F]00            	cmp	byte [DeviceHi],0
 37762                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 37763                                  	;je	short InitForLo		; no, init for lo mem
 37764 00003039 7439                    	je	short initforlo_x ; 09/04/2019
 37765                                  
 37766                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37767                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37768                                  ; %if 0
 37769                                  	; 01/01/2023
 37770 0000303B 803E[9B1F]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 37771                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 37772 00003040 7413                    	je	short InitForConv
 37773                                  
 37774                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 37775                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 37776                                  ; any areas left in upper-memory, except for elements in the load UMB...
 37777                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 37778                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 37779                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 37780                                  
 37781 00003042 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 37782                                  
 37783 00003045 E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 37784 00003048 E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 37785 0000304B E85700                  	call	GetUMBForDev		; And grab that load area as needed
 37786 0000304E 9C                      	pushf
 37787 0000304F E851FE                  	call	UnFreeze		; Then unhide everything frozen
 37788 00003052 9D                      	popf
 37789                                  	;jc	short InitForLo		; (if carry, it's loading low)
 37790                                  	;jmp	short InitForHi
 37791                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 37792 00003053 EB0B                    	jmp	short idl0
 37793                                  
 37794                                  ;%endif ; 01/11/2022
 37795                                  
 37796                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37797                                  	; (SYSINIT:2B67h)
 37798                                  InitForConv:
 37799                                  	; 11/12/2022
 37800                                  	; ds = cs
 37801 00003055 E83700                  	call	SpaceInUMB		; Do we have space left in the
 37802                                  					;  current UMB ?
 37803 00003058 7308                    	jnc	short InitForHi		; yes, we have
 37804 0000305A E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 37805 0000305D E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 37806                                  idl0: ; 06/07/2023
 37807 00003060 720D                    	jc	short InitForLo		; we didn't succeed, so load
 37808                                  					;  in low memory
 37809                                  InitForHi:
 37810                                  	; 11/12/2022
 37811                                  	; ds = cs
 37812                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 37813                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 37814                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 37815 00003062 A1[A11F]                	mov	ax,[DevUMBFree]
 37816 00003065 8B16[9D1F]              	mov	dx,[DevUMBAddr]
 37817 00003069 0316[9F1F]              	add	dx,[DevUMBSize]
 37818 0000306D EB0C                    	jmp	short idl1
 37819                                  
 37820                                  InitForLo:
 37821                                  	; 11/12/2022
 37822                                  	; ds = cs
 37823                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 37824 0000306F C606[AB1F]00            	mov	byte [DeviceHi],0
 37825                                  initforlo_x:
 37826                                  	; 11/12/2022
 37827                                  	; ds = cs
 37828                                  					;  into UMB indicate that
 37829                                  					;  we are loading low
 37830                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 37831                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 37832 00003074 A1[6203]                	mov	ax,[memhi]
 37833 00003077 8B16[A302]              	mov	dx,[ALLOCLIM]
 37834                                  idl1:
 37835 0000307B E86600                  	call	DevSetMark		; setup a sub-arena for DD
 37836                                  	; 11/12/2022
 37837                                  	; ds = cs
 37838                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 37839                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 37840                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 37841                                  	;mov	[cs:DevEntry+2],ax
 37842 0000307E A3[8F1F]                	mov	[DevLoadAddr],ax
 37843 00003081 8916[911F]              	mov	[DevLoadEnd],dx
 37844 00003085 C706[931F]0000          	mov	word [DevEntry],0
 37845 0000308B A3[951F]                	mov	[DevEntry+2],ax
 37846                                  	; 01/01/2023
 37847                                  	;pop	es ; *
 37848 0000308E C3                      	retn
 37849                                  
 37850                                  ;----------------------------------------------------------------------------
 37851                                  ;
 37852                                  ; procedure : SpaceInUMB?
 37853                                  ;
 37854                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 37855                                  ;	Output : Carry set if no space in UMB
 37856                                  ;		 Carry clear if Space is available for the device in
 37857                                  ;		   current UMB
 37858                                  ;
 37859                                  ;----------------------------------------------------------------------------
 37860                                  
 37861                                  SpaceInUMB:
 37862                                  	; 11/12/2022
 37863                                  	; ds = cs
 37864                                  	;mov	ax,[cs:DevUMBSize]
 37865                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 37866                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 37867 0000308F A1[9F1F]                	mov	ax,[DevUMBSize]
 37868 00003092 0306[9D1F]              	add	ax,[DevUMBAddr]		; End of UMB
 37869 00003096 2B06[A11F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 37870                                  	; 11/12/2022
 37871                                  	;or	ax,ax			; Nospace ?
 37872                                  	;jnz	short spcinumb1
 37873                                  	;stc
 37874                                  	;retn
 37875                                  	; 11/12/2022
 37876 0000309A 83F801                  	cmp	ax,1
 37877 0000309D 7205                    	jb	short spcinumb2	; cf=1
 37878                                  spcinumb1:
 37879 0000309F 48                      	dec	ax			; space for sub-arena
 37880                                  	; 11/12/2022
 37881                                  	; ds = cs
 37882 000030A0 3B06[8D1F]              	cmp	ax,[DevSize]
 37883                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 37884                                  spcinumb2:
 37885 000030A4 C3                      	retn
 37886                                  
 37887                                  ;----------------------------------------------------------------------------
 37888                                  ;
 37889                                  ; procedure : PrepareMark
 37890                                  ;
 37891                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 37892                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 37893                                  ;
 37894                                  ;----------------------------------------------------------------------------
 37895                                  
 37896                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37897                                  ;
 37898                                  ;PrepareMark:
 37899                                  ;	push	ds
 37900                                  ;	mov	ds,ax
 37901                                  ;	mov	word [ARENA.OWNER],8
 37902                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 37903                                  ;	pop	ds
 37904                                  ;
 37905                                  ;	inc	ax
 37906                                  ;	mov	[cs:DevUMBAddr],ax
 37907                                  ;	mov	[cs:DevUMBFree],ax
 37908                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 37909                                  ;	retn
 37910                                  
 37911                                  ;----------------------------------------------------------------------------
 37912                                  ;
 37913                                  ; procedure : GetUMBForDev
 37914                                  ;
 37915                                  ;	Input : DevSize
 37916                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 37917                                  ;		 the device.
 37918                                  ;		 If success carry clear
 37919                                  ;
 37920                                  ;	Allocates the biggest UMB for loading devices and updates
 37921                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 37922                                  ;	UMB.
 37923                                  ;
 37924                                  ;	This routine relies on the fact that all of the low memory
 37925                                  ;	is allocated, and any DOS alloc calls should return memory
 37926                                  ;	from the UMB pool.
 37927                                  ;
 37928                                  ;----------------------------------------------------------------------------
 37929                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37930                                  	; (SYSINIT:2BC6h)
 37931                                  
 37932                                  GetUMBForDev:
 37933                                  	; 11/12/2022
 37934                                  	; ds = cs
 37935 000030A5 BBFFFF                  	mov	bx,0FFFFh
 37936 000030A8 B80048                  	mov	ax,4800h
 37937 000030AB CD21                    	int	21h
 37938                                  		; DOS - 2+ - ALLOCATE MEMORY
 37939                                  		; BX = number of 16-byte paragraphs desired
 37940                                  
 37941 000030AD 09DB                    	or	bx,bx
 37942                                  	;jz	short gufd_err
 37943                                  	; 09/09/2023
 37944 000030AF 742E                    	jz	short gufd_error ; bx = 0
 37945                                  
 37946 000030B1 4B                      	dec	bx
 37947                                  	; 11/12/2022
 37948                                  	; ds = cs
 37949 000030B2 391E[8D1F]              	cmp	[DevSize],bx
 37950                                  	;cmp	[cs:DevSize],bx
 37951 000030B6 7725                    	ja	short gufd_err
 37952                                  
 37953 000030B8 43                      	inc	bx
 37954                                  
 37955 000030B9 B80048                  	mov	ax,4800h
 37956 000030BC CD21                    	int	21h
 37957 000030BE 721D                    	jc	short gufd_err
 37958                                  
 37959                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37960                                  	;dec	ax
 37961                                  	;call	PrepareMark
 37962                                  	;
 37963                                  PrepareMark:
 37964 000030C0 1E                      	push	ds
 37965 000030C1 48                      	dec	ax
 37966 000030C2 8ED8                    	mov	ds,ax
 37967 000030C4 C70601000800            	mov	word [ARENA.OWNER],8
 37968 000030CA C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 37969 000030D0 40                      	inc	ax
 37970 000030D1 1F                      	pop	ds
 37971                                  	; 11/12/2022
 37972                                  	; ds = cs
 37973                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 37974                                  	;mov	[cs:DevUMBAddr],ax
 37975                                  	;mov	[cs:DevUMBFree],ax
 37976                                  gufd_x:		; 09/09/2023
 37977 000030D2 891E[9F1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 37978 000030D6 A3[9D1F]                	mov	[DevUMBAddr],ax
 37979 000030D9 A3[A11F]                	mov	[DevUMBFree],ax
 37980                                  	;
 37981                                  	; 11/12/2022
 37982                                  	; cf=0
 37983                                  	;clc				; mark no error
 37984 000030DC C3                      	retn
 37985                                  
 37986                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37987                                  %if 1
 37988                                  gufd_err:
 37989 000030DD 31DB                    	xor	bx,bx ; 0
 37990                                  gufd_error:
 37991 000030DF 31C0                    	xor	ax,ax ; 0
 37992 000030E1 F9                      	stc	; cf=1
 37993 000030E2 EBEE                    	jmp	short gufd_x	
 37994                                  %endif
 37995                                  
 37996                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37997                                  %if 0
 37998                                  gufd_err:
 37999                                  	xor	ax,ax ; 0
 38000                                  	; 11/12/2022
 38001                                  	; ds = cs
 38002                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 38003                                  	;mov	[cs:DevUMBAddr],ax
 38004                                  	;mov	[cs:DevUMBFree],ax
 38005                                  	mov	[DevUMBSize],ax		; erase the previous values
 38006                                  	mov	[DevUMBAddr],ax
 38007                                  	mov	[DevUMBFree],ax
 38008                                  	stc
 38009                                  	retn
 38010                                  %endif
 38011                                  
 38012                                  ;----------------------------------------------------------------------------
 38013                                  ;
 38014                                  ; procedure : DevSetMark
 38015                                  ;
 38016                                  ;	Input : AX - Free segment were device is going to be loaded
 38017                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 38018                                  ;
 38019                                  ;	Creates a sub-arena for the device driver
 38020                                  ;	puts 'D' marker in the sub-arena
 38021                                  ;	Put the owner of the sub-arena as (AX+1)
 38022                                  ;	Copies the file name into sub-arena name field
 38023                                  ;
 38024                                  ;	Size field of the sub-arena will be set only at succesful
 38025                                  ;	completion of Device load.
 38026                                  ;
 38027                                  ;----------------------------------------------------------------------------
 38028                                  
 38029                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38030                                  	; (SYSINIT:2C13h)
 38031                                  
 38032                                  DevSetMark:
 38033 000030E4 06                      	push	es
 38034                                  	; 03/01/2023
 38035                                  	;push	di
 38036 000030E5 1E                      	push	ds
 38037 000030E6 56                      	push	si
 38038 000030E7 8EC0                    	mov	es,ax
 38039 000030E9 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 38040 000030EF 40                      	inc	ax
 38041 000030F0 26A30100                	mov	[es:devmark.seg],ax
 38042                                  
 38043                                  ;-------------- Copy file name
 38044                                  
 38045 000030F4 50                      	push	ax			; save load addr
 38046                                  
 38047                                  	; 09/09/2023
 38048                                  	; ds = cs
 38049                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 38050 000030F5 C536[7A03]              	lds	si,[bpb_addr]
 38051                                  
 38052 000030F9 89F7                    	mov	di,si
 38053 000030FB FC                      	cld
 38054                                  dsm_again:
 38055 000030FC AC                      	lodsb
 38056 000030FD 3C3A                    	cmp	al,':'
 38057 000030FF 7504                    	jne	short isit_slash
 38058 00003101 89F7                    	mov	di,si
 38059 00003103 EBF7                    	jmp	short dsm_again
 38060                                  isit_slash:
 38061 00003105 3C5C                    	cmp	al, '\'
 38062 00003107 7504                    	jne	short isit_null
 38063 00003109 89F7                    	mov	di,si
 38064 0000310B EBEF                    	jmp	short dsm_again
 38065                                  isit_null:
 38066 0000310D 08C0                    	or	al,al
 38067 0000310F 75EB                    	jnz	short dsm_again
 38068 00003111 89FE                    	mov	si,di
 38069                                  
 38070 00003113 BF0800                  	mov	di,devmark.filename ; 8
 38071 00003116 B90800                  	mov	cx,8			; maximum 8 characters
 38072                                  dsm_next_char:
 38073 00003119 AC                      	lodsb
 38074 0000311A 08C0                    	or	al, al
 38075 0000311C 7407                    	jz	short blankout
 38076 0000311E 3C2E                    	cmp	al, '.'
 38077 00003120 7403                    	je	short blankout
 38078 00003122 AA                      	stosb
 38079 00003123 E2F4                    	loop	dsm_next_char
 38080                                  blankout:
 38081 00003125 E304                    	jcxz	dsm_exit
 38082 00003127 B020                    	mov	al, ' '
 38083 00003129 F3AA                    	rep	stosb			; blank out the rest
 38084                                  dsm_exit:
 38085 0000312B 58                      	pop	ax			; restore load addr
 38086 0000312C 5E                      	pop	si
 38087 0000312D 1F                      	pop	ds
 38088                                  	; 03/01/2023
 38089                                  	;pop	di
 38090 0000312E 07                      	pop	es
 38091 0000312F C3                      	retn
 38092                                  
 38093                                  ;----------------------------------------------------------------------------
 38094                                  ;
 38095                                  ; procedure : SizeDevice
 38096                                  ;
 38097                                  ;	Input : ES:SI - points to device file to be sized
 38098                                  ;
 38099                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 38100                                  ;
 38101                                  ;	Calculates the size of the device file in paras and stores it
 38102                                  ;	in DevSize
 38103                                  ;
 38104                                  ;----------------------------------------------------------------------------
 38105                                  
 38106                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38107                                  SizeDevice:
 38108                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38109                                  	; 11/12/2022 ; *
 38110 00003130 1E                      	push	ds ; *
 38111 00003131 06                      	push	es
 38112 00003132 1F                      	pop	ds
 38113 00003133 89F2                    	mov	dx,si			; ds:dx -> file name
 38114 00003135 B8003D                  	mov	ax,3D00h		; open
 38115 00003138 CD21                    	int	21h
 38116 0000313A 7237                    	jc	short sd_err		; open failed
 38117                                  
 38118 0000313C 89C3                    	mov	bx,ax			; BX - file handle
 38119 0000313E B80242                  	mov	ax,4202h		; seek
 38120 00003141 31C9                    	xor	cx,cx
 38121 00003143 89CA                    	mov	dx,cx			; to end of file
 38122 00003145 CD21                    	int	21h
 38123 00003147 7223                    	jc	short sd_close		; did seek fail (impossible)
 38124 00003149 83C00F                  	add	ax,15			; para convert
 38125 0000314C 83D200                  	adc	dx,0
 38126 0000314F F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 38127                                  	;jz	short szdev1		; no
 38128                                  	; 22/07/2023
 38129 00003153 7409                    	jz	short sd_ctp
 38130 00003155 2EC706[8D1F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 38131                                  					; assuming that we fail later
 38132 0000315C EB0E                    	jmp	short sd_close
 38133                                  sd_ctp:	
 38134                                  	; 22/07/2023
 38135                                  ;szdev1:
 38136 0000315E B104                    	mov	cl,4			; convert it to paras
 38137 00003160 D3E8                    	shr	ax,cl
 38138 00003162 B10C                    	mov	cl,12
 38139 00003164 D3E2                    	shl	dx,cl
 38140 00003166 09D0                    	or	ax,dx ; * ; cf=0
 38141                                  	;
 38142                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 38143                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 38144                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38145                                  	;cmp	ax,[cs:DevSizeOption]
 38146                                  	;ja	short szdev2
 38147                                  	;mov	ax,[cs:DevSizeOption]
 38148                                  	; 12/12/2022
 38149                                  	;clc
 38150                                  ;szdev2:
 38151 00003168 2EA3[8D1F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 38152                                  	; 22/07/2023
 38153                                  	;clc ; cf=0 ; *	; CLC is not needed here
 38154                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 38155                                  
 38156                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38157                                  	; 12/12/2022
 38158                                  	; cf=0
 38159                                  	;clc
 38160                                  sd_close:
 38161 0000316C 9C                      	pushf				; let close not spoil our
 38162                                  					;  carry flag
 38163 0000316D B8003E                  	mov	ax,3E00h		; close
 38164 00003170 CD21                    	int	21h			; we are not checking for err
 38165 00003172 9D                      	popf
 38166                                  sd_err:
 38167                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38168                                  	; 11/12/2022 ; *
 38169 00003173 1F                      	pop     ds ; *
 38170 00003174 C3                      	retn
 38171                                  
 38172                                  ;----------------------------------------------------------------------------
 38173                                  ;
 38174                                  ; procedure : ExecDev
 38175                                  ;
 38176                                  ;	Input : ds:dx -> device to be executed
 38177                                  ;		DevLoadAddr - contains where device has to be loaded
 38178                                  ;
 38179                                  ;	Output : Carry if error
 38180                                  ;		 Carry clear if no error
 38181                                  ;
 38182                                  ;	Loads a device driver using the 4b03h function call
 38183                                  ;
 38184                                  ;----------------------------------------------------------------------------
 38185                                  
 38186                                  	; 01/11/2022
 38187                                  ExecDev:
 38188 00003175 2E8B1E[8F1F]            	mov	bx,[cs:DevLoadAddr]
 38189 0000317A 2E891E[A71F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 38190                                  					;  block for exec with
 38191                                  					;  load address
 38192 0000317F 2E891E[A91F]            	mov	[cs:DevExecReloc],bx
 38193 00003184 8CCB                    	mov	bx,cs
 38194 00003186 8EC3                    	mov	es,bx
 38195 00003188 BB[A71F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 38196                                  	;mov	al,3	; (load program only)
 38197                                  	;mov	ah,EXEC ; 4Bh
 38198                                  	; 04/07/2023
 38199 0000318B B8034B                  	mov	ax,(EXEC<<8)|03h
 38200 0000318E CD21                    	int	21h			; load in the device driver
 38201                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 38202                                  		; DS:DX -> ASCIZ filename
 38203                                  		; ES:BX -> parameter block
 38204                                  		; AL = subfunction 
 38205 00003190 C3                      	retn
 38206                                  
 38207                                  ;----------------------------------------------------------------------------
 38208                                  ;
 38209                                  ; procedure : RetFromUM
 38210                                  ;
 38211                                  ;	Input : None
 38212                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 38213                                  ;		 ConvLoad clear if did.
 38214                                  ;
 38215                                  ;	Prepares memory for more devices after returning from loading one
 38216                                  ;	using the DOS 6 options (/L:... etc).
 38217                                  ;
 38218                                  ;----------------------------------------------------------------------------
 38219                                  
 38220                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38221                                  ;  (SYSINIT:37D1h)
 38222                                  
 38223                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38224                                  ;%if 0
 38225                                  RetFromUM:
 38226                                  	; 31/12/2022
 38227                                  	; ds = cs
 38228 00003191 9C                      	pushf
 38229                                  	;mov	byte [cs:ConvLoad],1
 38230 00003192 C606[9B1F]01            	mov	byte [ConvLoad],1
 38231 00003197 E8ECFD                  	call	UnHideUMBs
 38232 0000319A 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 38233                                  	; 31/12/2022
 38234                                  	; ds = cs
 38235                                  	;;mov	byte [cs:ConvLoad],0
 38236                                  	;mov	byte [ConvLoad],0
 38237                                  	; 09/09/2023
 38238 0000319C FE0E[9B1F]              	dec	byte [ConvLoad] ; -> 0
 38239                                  rfUM1:	
 38240 000031A0 9D                      	popf
 38241 000031A1 C3                      	retn
 38242                                  
 38243                                  ;%endif ; 01/11/2022
 38244                                  
 38245                                  ;----------------------------------------------------------------------------
 38246                                  ;
 38247                                  ; procedure : RemoveNull
 38248                                  ;
 38249                                  ;	Input : ES:SI points to a null terminated string
 38250                                  ;
 38251                                  ;	Output : none
 38252                                  ;
 38253                                  ;	Replaces the null at the end of a string with blank
 38254                                  ;
 38255                                  ;----------------------------------------------------------------------------
 38256                                  
 38257                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38258                                  	; (SYSINIT:2CCEh)
 38259                                  RemoveNull:
 38260                                  	; 11/12/2022
 38261                                  	; ds = cs
 38262                                  rn_next:
 38263 000031A2 268A1C                  	mov	bl,[es:si]
 38264 000031A5 08DB                    	or	bl,bl			; null ?
 38265 000031A7 7403                    	jz	short rn_gotnull
 38266 000031A9 46                      	inc	si			; advance the pointer
 38267 000031AA EBF6                    	jmp	short rn_next
 38268                                  rn_gotnull:
 38269                                  	; 11/12/2022
 38270 000031AC 8A1E[C01F]              	mov	bl,[DevSavedDelim]
 38271                                  	;mov	bl,[cs:DevSavedDelim]
 38272 000031B0 26881C                  	mov	[es:si],bl		; replace null with blank
 38273                                  	; 02/11/2022
 38274                                  ; 11/12/2022
 38275                                  rba_ok:		; 10/04/2019
 38276 000031B3 C3                      	retn
 38277                                  
 38278                                  ;----------------------------------------------------------------------------
 38279                                  ;
 38280                                  ; procedure : RoundBreakAddr
 38281                                  ;
 38282                                  ;	Input : DevBrkAddr
 38283                                  ;	Output : DevBrkAddr
 38284                                  ;
 38285                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 38286                                  ;
 38287                                  ;----------------------------------------------------------------------------
 38288                                  
 38289                                  RoundBreakAddr:
 38290 000031B4 2EA1[971F]              	mov	ax,[cs:DevBrkAddr]
 38291 000031B8 E8B1DF                  	call	ParaRound
 38292 000031BB 2E0106[991F]            	add	[cs:DevBrkAddr+2],ax
 38293 000031C0 2EC706[971F]0000        	mov	word [cs:DevBrkAddr],0
 38294 000031C7 2EA1[911F]              	mov	ax,[cs:DevLoadEnd]
 38295 000031CB 2E3906[991F]            	cmp	[cs:DevBrkAddr+2],ax
 38296 000031D0 76E1                    	jbe	short rba_ok
 38297 000031D2 E92911                  	jmp	mem_err
 38298                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38299                                  	; 11/12/2022
 38300                                  ;rba_ok:
 38301                                  ;	retn
 38302                                  
 38303                                  ;----------------------------------------------------------------------------
 38304                                  ;
 38305                                  ; procedure : DevSetBreak
 38306                                  ;
 38307                                  ;	Input : DevBrkAddr
 38308                                  ;	Output : Carry set if Device returned Init failed
 38309                                  ;		 Else carry clear
 38310                                  ;
 38311                                  ;----------------------------------------------------------------------------
 38312                                  
 38313                                  DevSetBreak:
 38314 000031D5 50                      	push	ax
 38315                                  
 38316 000031D6 2EA1[991F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 38317 000031DA 2E803E[DE14]00          	cmp	byte [cs:multdeviceflag],0
 38318 000031E0 750F                    	jne	short set_break_continue ;do not check it.
 38319 000031E2 2E3B06[8F1F]            	cmp	ax,[cs:DevLoadAddr]
 38320 000031E7 7508                    	jne	short set_break_continue ;if not same, then o.k.
 38321                                  
 38322                                  	;cmp	word [cs:DevBrkAddr],0
 38323                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 38324                                  	; 12/12/2022
 38325 000031E9 2E833E[971F]01          	cmp	word [cs:DevBrkAddr],1
 38326 000031EF 7204                    	jb	short break_failed
 38327                                  
 38328                                  set_break_continue:
 38329 000031F1 E8C0FF                  	call	RoundBreakAddr
 38330                                  	; 12/12/2022
 38331 000031F4 F8                      	clc
 38332                                  break_failed:
 38333 000031F5 58                      	pop	ax
 38334                                  	;clc
 38335 000031F6 C3                      	retn
 38336                                  
 38337                                  	; 12/12/2022
 38338                                  ;break_failed:
 38339                                  	;pop	ax
 38340                                  	;stc
 38341                                  	;retn
 38342                                  
 38343                                  ;----------------------------------------------------------------------------
 38344                                  ;
 38345                                  ; procedure : DevBreak
 38346                                  ;
 38347                                  ;	Input : DevLoadAddr & DevBrkAddr
 38348                                  ;	Output : none
 38349                                  ;
 38350                                  ;	Marks a succesful install of a device driver
 38351                                  ;	Sets device size field in sub-arena &
 38352                                  ;	Updates Free ptr in UMB or adjusts memhi
 38353                                  ;
 38354                                  ;----------------------------------------------------------------------------
 38355                                  
 38356                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38357                                  DevBreak:
 38358                                  	;push	ds ; 11/12/2022
 38359                                  
 38360                                  	; 11/12/2022
 38361 000031F7 0E                      	push	cs
 38362 000031F8 1F                      	pop	ds
 38363                                  	;mov	ax,[cs:DevLoadAddr]
 38364                                  	;mov	bx,[cs:DevBrkAddr+2]
 38365 000031F9 A1[8F1F]                	mov	ax,[DevLoadAddr]
 38366 000031FC 8B1E[991F]              	mov	bx,[DevBrkAddr+2]
 38367                                  	; 11/12/2022
 38368 00003200 1E                      	push	ds
 38369                                  
 38370 00003201 48                      	dec	ax			; seg of sub-arena
 38371 00003202 8ED8                    	mov	ds,ax
 38372 00003204 40                      	inc	ax			; Back to Device segment
 38373 00003205 29D8                    	sub	ax,bx
 38374 00003207 F7D8                    	neg	ax			; size of device in paras
 38375 00003209 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 38376                                  	
 38377                                  	; 11/12/2022
 38378 0000320C 1F                      	pop	ds
 38379                                  	; ds = cs
 38380                                   	
 38381 0000320D 803E[AB1F]00            	cmp	byte [DeviceHi],0
 38382                                  	;cmp	byte [cs:DeviceHi],0
 38383 00003212 7405                    	je	short db_lo
 38384                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 38385                                  	;jmp	short db_exit
 38386                                  	; 11/12/2022
 38387 00003214 891E[A11F]              	mov	[DevUMBFree],bx
 38388 00003218 C3                      	retn	
 38389                                  db_lo:
 38390                                  	; 11/12/2022
 38391                                  	; ds = cs
 38392                                  	;mov	[cs:memhi],bx
 38393                                  	;mov	word [cs:memlo],0
 38394 00003219 891E[6203]              	mov	[memhi],bx
 38395 0000321D C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 38396                                  db_exit:
 38397                                  	;pop	ds ; 11/12/2022
 38398                                  sd_ret:		; 09/09/2023
 38399 00003223 C3                      	retn
 38400                                  
 38401                                  ; 10/04/2019 - Retro DOS v4.0
 38402                                  
 38403                                  ;----------------------------------------------------------------------------
 38404                                  ;
 38405                                  ; procedure : ParseSize
 38406                                  ;
 38407                                  ;	Parses the command line for SIZE= command
 38408                                  ;
 38409                                  ;	ES:SI = command line to parsed
 38410                                  ;
 38411                                  ;	returns ptr to command line after SIZE= option in ES:SI
 38412                                  ;	updates the DevSizeOption variable with value supplied
 38413                                  ;	in SIZE=option
 38414                                  ;	Returns carry if the SIZE option was invalid
 38415                                  ;
 38416                                  ;----------------------------------------------------------------------------
 38417                                  
 38418                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38419                                  	; (SYSINIT:2D5Ah)
 38420                                  
 38421                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 38422                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 38423                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 38424                                  ParseSize:
 38425                                  	;push	bx
 38426                                  	;mov	bx,si
 38427                                  
 38428                                  	; 09/09/2023
 38429 00003224 56                      	push	si ; * ; mov bx,si
 38430                                  
 38431                                  	; 11/12/2022
 38432                                  	; ds = cs
 38433                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 38434                                  	;mov	[cs:DevCmdLine],si
 38435                                  	;mov	[cs:DevCmdLine+2],es
 38436 00003225 C706[AC1F]0000          	mov	word [DevSizeOption],0 ; init the value
 38437 0000322B 8936[BC1F]              	mov	[DevCmdLine],si
 38438 0000322F 8C06[BE1F]              	mov	[DevCmdLine+2],es	
 38439 00003233 E82400                  	call	SkipDelim
 38440 00003236 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 38441 0000323B 7528                    	jne	short ps_no_size
 38442 0000323D 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 38443 00003243 7520                    	jne	short ps_no_size
 38444 00003245 268A4404                	mov	al,[es:si+4]
 38445 00003249 E80D10                  	call	delim
 38446                                  	;jne	short ps_no_size
 38447                                  	; 22/07/2023
 38448 0000324C 7518                    	jne	short ps_no_size_2 ; cf=0 here
 38449 0000324E 83C605                  	add	si,5
 38450 00003251 E81400                  	call	GetHexNum
 38451 00003254 7210                    	jc	short ps_err
 38452                                  	; 11/12/2022
 38453                                  	; ds = cs
 38454                                  	;mov	[cs:DevSizeOption],ax
 38455 00003256 A3[AC1F]                	mov	[DevSizeOption],ax
 38456                                  	
 38457                                  	; 09/09/2023
 38458 00003259 58                      	pop	ax  ; * (discard previous si value on top of stack)
 38459                                  
 38460                                  ;	call	SkipDelim ; **
 38461                                  ;	
 38462                                  ;	; 22/07/2023
 38463                                  ;;ps_no_size_2:
 38464                                  ;	; cf = 0
 38465                                  ;	retn
 38466                                  
 38467                                  	; 09/09/2023
 38468                                  	;jmp	short SkipDelim
 38469                                  
 38470                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38471                                  %if 1
 38472                                  	; 01/11/2022
 38473                                  SkipDelim:
 38474                                  sd_next_char:
 38475 0000325A 268A04                  	mov	al,[es:si]
 38476 0000325D E8F90F                  	call	delim
 38477 00003260 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 38478 00003262 46                      	inc	si
 38479 00003263 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 38480                                  	; 11/12/2022
 38481                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38482                                  ;sd_ret:
 38483                                  	;retn
 38484                                  %endif
 38485                                  
 38486                                  	;;;call	SkipDelim ; **
 38487                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38488                                  	;mov	bx,si
 38489                                  ps_no_size:
 38490                                  	;mov	si,bx
 38491                                  	;pop	bx
 38492 00003265 F8                      	clc	; cf=0
 38493                                  	;retn
 38494                                  	; 11/12/2022
 38495                                  ps_err:		; cf=1
 38496                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 38497                                  	; 09/09/2023
 38498 00003266 5E                      	pop	si ; * ; mov si,bx
 38499                                  ;sd_ret:	; cf=?
 38500 00003267 C3                      	retn
 38501                                  
 38502                                  ;ps_err:
 38503                                  	; 02/11/2022
 38504                                  	;pop	bx
 38505                                  	;stc
 38506                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38507                                  	; 11/12/2022
 38508                                  	; cf=1
 38509                                  	;stc
 38510                                  	; 11/12/2022
 38511                                  ;sd_ret: 
 38512                                  	; 22/07/2023
 38513                                  	; 12/04/2019
 38514                                  	;retn
 38515                                  
 38516                                  ; 12/04/2019 - Retro DOS v4.0
 38517                                  
 38518                                  ;----------------------------------------------------------------------------
 38519                                  ;
 38520                                  ; procedure : SkipDelim
 38521                                  ;
 38522                                  ;	Skips delimiters in the string pointed to by ES:SI
 38523                                  ;	Returns ptr to first non-delimiter character in ES:SI
 38524                                  ;
 38525                                  ;----------------------------------------------------------------------------
 38526                                  
 38527                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38528                                  %if 0
 38529                                  	; 01/11/2022
 38530                                  SkipDelim:
 38531                                  sd_next_char:
 38532                                  	mov	al,[es:si]
 38533                                  	call	delim
 38534                                  	jnz	short sd_ret
 38535                                  	inc	si
 38536                                  	jmp	short sd_next_char ; 01/11/2022
 38537                                  	; 11/12/2022
 38538                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38539                                  ;sd_ret:
 38540                                  	;retn
 38541                                  %endif
 38542                                  
 38543                                  ;----------------------------------------------------------------------------
 38544                                  ;
 38545                                  ; procedure : GetHexNum
 38546                                  ;
 38547                                  ;	Converts an ascii string terminated by a delimiter into binary.
 38548                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 38549                                  ;
 38550                                  ;	Returns in AX the number number of paras equivalent to the
 38551                                  ;	hex number of bytes specified by the hexadecimal string.
 38552                                  ;
 38553                                  ;	Returns carry in case it encountered a non-hex character or
 38554                                  ;	if it encountered crlf
 38555                                  ;
 38556                                  ;----------------------------------------------------------------------------
 38557                                  
 38558                                  ; 13/05/2019
 38559                                  
 38560                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38561                                  	; (SYSINIT:38C5h)
 38562                                  
 38563                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38564                                  	; (SYSINIT:2DA5h)
 38565                                  GetHexNum:
 38566 00003268 31C0                    	xor	ax,ax
 38567 0000326A 31D2                    	xor	dx,dx
 38568                                  ghn_next:
 38569 0000326C 268A1C                  	mov	bl,[es:si]
 38570 0000326F 80FB0D                  	cmp	bl,cr  ; 0Dh
 38571 00003272 7436                    	je	short ghn_err
 38572 00003274 80FB0A                  	cmp	bl,lf  ; 0Ah
 38573 00003277 7431                    	je	short ghn_err
 38574 00003279 50                      	push	ax
 38575 0000327A 88D8                    	mov	al,bl
 38576 0000327C E8DA0F                  	call	delim
 38577 0000327F 58                      	pop	ax
 38578                                  	; 03/01/2023
 38579 00003280 B90400                  	mov	cx,4
 38580 00003283 7410                    	jz	short ghn_into_paras
 38581 00003285 E82400                  	call	GetNibble
 38582                                  	;jc	short ghn_err
 38583                                  	; 11/12/2022
 38584 00003288 7221                    	jc	short ghn_ret ; cf=1
 38585                                  	; 03/01/2023
 38586                                  	;mov	cx,4
 38587                                  ghn_shift1:
 38588 0000328A D1E0                    	shl	ax,1
 38589 0000328C D1D2                    	rcl	dx,1
 38590 0000328E E2FA                    	loop	ghn_shift1
 38591 00003290 08D8                    	or	al,bl
 38592 00003292 46                      	inc	si
 38593 00003293 EBD7                    	jmp	short ghn_next
 38594                                  ghn_into_paras:
 38595 00003295 83C00F                  	add	ax,15
 38596 00003298 83D200                  	adc	dx,0
 38597 0000329B F7C2F0FF                	test	dx,0FFF0h
 38598 0000329F 7509                    	jnz	short ghn_err
 38599                                  	; 03/01/2023
 38600                                  	;mov	cx,4
 38601                                  ghn_shift2:
 38602 000032A1 F8                      	clc
 38603 000032A2 D1DA                    	rcr	dx,1
 38604 000032A4 D1D8                    	rcr	ax,1
 38605 000032A6 E2F9                    	loop	ghn_shift2
 38606 000032A8 F8                      	clc
 38607 000032A9 C3                      	retn
 38608                                  	; 11/12/2022
 38609                                  ghn_err:
 38610                                  gnib_err:
 38611 000032AA F9                      	stc
 38612                                  ghn_ret:
 38613                                  gnib_ret:
 38614 000032AB C3                      	retn
 38615                                  
 38616                                  ;----------------------------------------------------------------------------
 38617                                  ;
 38618                                  ; procedure : GetNibble
 38619                                  ;
 38620                                  ;	Convert one nibble (hex digit) in BL into binary
 38621                                  ;
 38622                                  ;	Returns binary value in BL
 38623                                  ;
 38624                                  ;	Returns carry if BL contains non-hex digit
 38625                                  ;
 38626                                  ;----------------------------------------------------------------------------
 38627                                  
 38628                                  GetNibble:
 38629 000032AC 80FB30                  	cmp	bl,'0'
 38630                                  	;jb	short gnib_err
 38631                                  	; 11/12/2022
 38632 000032AF 72FA                    	jb	short gnib_ret ; cf=1
 38633 000032B1 80FB39                  	cmp	bl,'9'
 38634 000032B4 7704                    	ja	short is_it_hex
 38635 000032B6 80EB30                  	sub	bl,'0'		; clc
 38636 000032B9 C3                      	retn
 38637                                  is_it_hex:
 38638 000032BA 80FB41                  	cmp	bl,'A'
 38639                                  	;jb	short gnib_err
 38640                                  	; 11/12/2022
 38641 000032BD 72EC                    	jb	short gnib_ret ; cf=1
 38642 000032BF 80FB46                  	cmp	bl,'F'
 38643 000032C2 77E6                    	ja	short gnib_err ; 11/12/2022
 38644 000032C4 80EB37                  	sub	bl,'A'- 10	; clc
 38645 000032C7 C3                      	retn
 38646                                  
 38647                                  	; 11/12/2022
 38648                                  ;gnib_err:
 38649                                  ;	stc
 38650                                  ;gnib_ret:
 38651                                  ;	retn
 38652                                  
 38653                                  ;============================================================================
 38654                                  
 38655                                  ; 12/04/2019 - Retro DOS v4.0
 38656                                  
 38657                                  ; umb.inc (MSDOS 6.0, 1991)
 38658                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 38659                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 38660                                  
 38661                                  XMM_REQUEST_UMB	equ 10h
 38662                                  XMM_RELEASE_UMB	equ 11h
 38663                                  
 38664                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38665                                  
 38666                                  ;---------------------------------------------------------------------------
 38667                                  ;
 38668                                  ; Procedure Name	: umb_insert
 38669                                  ;
 38670                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 38671                                  ;			: BX = seg address of UMB to be linked in
 38672                                  ;			: DX = size of UMB to be linked in paras
 38673                                  ;			; DS = data
 38674                                  ;
 38675                                  ; Outputs		: links the UMB into the arena chain
 38676                                  ;
 38677                                  ; Uses			: AX, CX, ES, DX, BX
 38678                                  ;
 38679                                  ;---------------------------------------------------------------------------
 38680                                  
 38681                                  umb_insert:
 38682 000032C8 1E                      	push	ds
 38683                                  
 38684                                  	; 31/12/2022
 38685                                  	; ds = cs
 38686                                  
 38687                                  	;mov	ds,[cs:DevDOSData]
 38688 000032C9 8E1E[BA1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 38689                                  	;mov	ds,[8Ch]
 38690 000032CD 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 38691 000032D1 8CD8                    	mov	ax,ds
 38692 000032D3 8EC0                    	mov	es,ax
 38693                                  ui_next:
 38694 000032D5 39D8                    	cmp	ax,bx			; Q: is current block above
 38695                                  					;    new block
 38696 000032D7 770F                    	ja	short ui_insert		; Y: insert it
 38697                                  					; Q: is current block the
 38698                                  					;    last
 38699 000032D9 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38700 000032DF 745C                    	je	short ui_append		; Y: append new block to chain
 38701                                  					; N: get next block
 38702 000032E1 8ED8                    	mov	ds,ax			; M005
 38703                                  	;call	get_next		; ax = es = next block
 38704 000032E3 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 38705 000032E6 EBED                    	jmp	short ui_next
 38706                                  
 38707                                  ui_insert:
 38708 000032E8 8CD9                    	mov	cx,ds			; ds = previous arena
 38709 000032EA 41                      	inc	cx			; top of previous block
 38710                                  
 38711 000032EB 29D9                    	sub	cx,bx
 38712 000032ED F7D9                    	neg	cx			; cx = size of used block
 38713                                  	;mov	byte [0],'M'
 38714 000032EF C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38715                                  	;mov	word [1],8
 38716 000032F4 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 38717                                  	;mov	[3],cx
 38718 000032FA 890E0300                	mov	[ARENA.SIZE],cx	
 38719                                  	;mov	word [8],4353h ; 'SC'
 38720 000032FE C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 38721                                  
 38722                                  ; prepare the arena at start of new block
 38723                                  
 38724 00003304 8EC3                    	mov	es,bx
 38725 00003306 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38726 0000330C 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 38727                                  					; mark as free
 38728 00003313 83EA02                  	sub	dx,2			; make room for arena at
 38729                                  					; start & end of new block
 38730 00003316 2689160300              	mov	[es:ARENA.SIZE],dx
 38731                                  
 38732                                  ; prepare arena at end of new block
 38733                                  	
 38734 0000331B 01D3                    	add	bx,dx
 38735 0000331D 43                      	inc	bx
 38736 0000331E 8EC3                    	mov	es,bx			; es=arena at top of new block
 38737 00003320 43                      	inc	bx			; bx=top of new block
 38738                                  
 38739                                  					; ax contains arena just above
 38740                                  					; this block
 38741 00003321 29D8                    	sub	ax,bx			; ax = size of used block
 38742                                  	
 38743 00003323 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38744 00003329 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38745 00003330 26A30300                	mov	[es:ARENA.SIZE],ax	
 38746 00003334 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 38747                                  
 38748 0000333B EB47                    	jmp	short ui_done
 38749                                  
 38750                                  ui_append:
 38751                                  					; es = arena of last block	
 38752 0000333D 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 38753 00003342 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 38754                                  					; going to rsrv on top of this 
 38755                                  					; block for the next arena.
 38756                                  	; 13/05/2019
 38757 00003348 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38758                                  
 38759 0000334E 89C1                    	mov	cx,ax			; cx=top of prev block-1
 38760 00003350 40                      	inc	ax
 38761 00003351 29D8                    	sub	ax,bx			; ax=top of prev block - 
 38762                                  					;    seg. address of new block
 38763 00003353 F7D8                    	neg	ax
 38764                                  
 38765 00003355 8EC1                    	mov	es,cx			; ds = arena of unused block
 38766                                  
 38767 00003357 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38768 0000335D 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38769 00003364 26A30300                	mov	[es:ARENA.SIZE],ax	
 38770 00003368 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 38771                                  
 38772                                  ; prepare the arena at start of new block
 38773 0000336F 8EC3                    	mov	es,bx
 38774 00003371 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 38775 00003377 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 38776                                  					; mark as free
 38777 0000337E 4A                      	dec	dx			; make room for arena
 38778 0000337F 2689160300              	mov	[es:ARENA.SIZE],dx	
 38779                                  ui_done:
 38780                                  uc_done: ; 31/12/2022 ; *!
 38781 00003384 1F                      	pop	ds
 38782                                  	; ds = cs ; 31/12/2022
 38783                                  ;uc_done:	; 18/12/2022
 38784                                  au_exit:	; 09/09/2023
 38785 00003385 C3                      	retn
 38786                                  
 38787                                  ;----------------------------------------------------------------------------
 38788                                  ;
 38789                                  ; procedure : AllocUMB
 38790                                  ;
 38791                                  ;	Allocate all UMBs and link it to DOS arena chain
 38792                                  ;
 38793                                  ;----------------------------------------------------------------------------
 38794                                  
 38795                                  AllocUMB:
 38796                                  	; 31/12/2022
 38797                                  	; ds = cs
 38798 00003386 E84700                  	call	InitAllocUMB		; link in the first UMB
 38799 00003389 72FA                    	jc	short au_exit		; quit on error
 38800                                  au_next:
 38801 0000338B E87000                  	call	umb_allocate		; allocate
 38802 0000338E 7205                    	jc	short au_coalesce
 38803 00003390 E835FF                  	call	umb_insert		; & insert till no UMBs
 38804 00003393 EBF6                    	jmp	short au_next
 38805                                  au_coalesce:
 38806                                  	; 09/09/2023
 38807                                  ;	call	umb_coalesce		; coalesce all UMBs
 38808                                  ;au_exit:
 38809                                  ;	; 31/12/2022
 38810                                  ;	; ds = cs
 38811                                  ;	retn
 38812                                  
 38813                                  	; 09/09/2023
 38814                                  	;jmp	short umb_coalesce
 38815                                  
 38816                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38817                                  
 38818                                  ; 13/04/2019 - Retro DOS v4.0
 38819                                  
 38820                                  ;----------------------------------------------------------------------------
 38821                                  ;
 38822                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 38823                                  ;
 38824                                  ;	Coalesce adds the block following the argument to the argument block,
 38825                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 38826                                  ;	some callers (such as $setblock) use it to join a free block to it's
 38827                                  ;	preceeding allocated block.
 38828                                  ;
 38829                                  ;	EXIT	'C' clear if OK
 38830                                  ;		  (ds) unchanged, this block updated
 38831                                  ;		  (ax) = address of next block, IF not at end
 38832                                  ;		'C' set if arena trashed
 38833                                  ;	USES	cx, di, ds, es
 38834                                  ;
 38835                                  ;----------------------------------------------------------------------------
 38836                                  
 38837                                  umb_coalesce:
 38838                                  	; 31/12/2022
 38839                                  	; ds = cs
 38840 00003395 1E                      	push	ds ; *!
 38841                                  
 38842 00003396 31FF                    	xor	di, di
 38843                                  
 38844                                  	;mov	es,[cs:DevDOSData]
 38845                                  	; 31/12/2022
 38846 00003398 8E06[BA1F]              	mov	es,[DevDOSData]
 38847 0000339C 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 38848                                  uc_nextfree:
 38849 000033A1 8CC0                    	mov	ax,es
 38850 000033A3 8ED8                    	mov	ds,ax
 38851                                  	;cmp	[es:1],di
 38852 000033A5 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 38853 000033AA 7407                    	je	short uc_again		; Y: try to coalesce with next block
 38854                                  					; N: get next arena
 38855 000033AC E86B00                  	call	get_next		; es, ax = next arena
 38856 000033AF 72D3                    	jc	short uc_done	; *!
 38857 000033B1 EBEE                    	jmp	short uc_nextfree
 38858                                  uc_again:
 38859 000033B3 E86400                  	call	get_next		; es, ax = next arena
 38860 000033B6 72CC                    	jc	short uc_done	; *!
 38861                                  uc_check:
 38862 000033B8 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 38863 000033BD 75E2                    	jne	short uc_nextfree	; N: get next free arena
 38864                                  					; Y: coalesce
 38865 000033BF 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 38866 000033C4 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 38867                                  	;add	[3],cx
 38868 000033C5 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 38869 000033C9 268A0D                  	mov     cl,[es:di]              ; move up signature
 38870 000033CC 880D                    	mov     [di],cl
 38871 000033CE EBE3                    	jmp     short uc_again		; try again
 38872                                  
 38873                                  	; 18/12/2022
 38874                                  ;uc_done:
 38875                                  	;retn
 38876                                  
 38877                                  ;----------------------------------------------------------------------------
 38878                                  ;
 38879                                  ; procedure : InitAllocUMB
 38880                                  ;
 38881                                  ;----------------------------------------------------------------------------
 38882                                  
 38883                                  InitAllocUMB:
 38884                                  	; 31/12/2022
 38885                                  	; ds = cs
 38886 000033D0 E8EDD6                  	call	IsXMSLoaded
 38887 000033D3 7527                    	jnz	short iau_err		; quit on no XMS driver
 38888 000033D5 B452                    	mov	ah,52h
 38889 000033D7 CD21                    	int	21h			; get DOS DATA seg
 38890                                  	; 31/12/2022
 38891                                  	; ds = cs
 38892                                  	;mov	[cs:DevDOSData],es	; & save it for later
 38893 000033D9 8C06[BA1F]              	mov	[DevDOSData],es		; & save it for later
 38894 000033DD B81043                  	mov	ax,4310h
 38895 000033E0 CD2F                    	int	2Fh
 38896                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 38897                                  	;mov	[cs:DevXMSAddr+2],es
 38898 000033E2 891E[A31F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 38899 000033E6 8C06[A51F]              	mov	[DevXMSAddr+2],es	
 38900                                  	; 31/12/2022
 38901 000033EA 803E[B91F]00            	cmp	byte [FirstUMBLinked],0 
 38902                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 38903                                  	;jne	short ia_1		; quit if we already did it
 38904                                  	; 12/12/2022
 38905 000033EF 770A                    	ja	short ia_1 ; cf=0
 38906 000033F1 E83900                  	call	LinkFirstUMB		; else link the first UMB
 38907                                  	;jc	short iau_err
 38908                                  	; 12/12/2022
 38909 000033F4 7207                    	jc	short iau_err2  ; cf=1
 38910                                  	; 31/12/2022
 38911                                  	; ds = cs
 38912 000033F6 C606[B91F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38913                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38914                                  ia_1:
 38915                                  	; 12/12/2022
 38916                                  	; cf=0
 38917                                  	;clc
 38918 000033FB C3                      	retn
 38919                                  iau_err:
 38920 000033FC F9                      	stc
 38921                                  iau_err2:
 38922 000033FD C3                      	retn
 38923                                  
 38924                                  ;-------------------------------------------------------------------------
 38925                                  ;
 38926                                  ; Procedure Name	: umb_allocate
 38927                                  ;
 38928                                  ; Inputs		: DS = data
 38929                                  ;
 38930                                  ; Outputs		: if UMB available
 38931                                  ;				Allocates the largest available UMB and 
 38932                                  ;			  	BX = segment of allocated block
 38933                                  ;				DX = size of allocated block
 38934                                  ;				NC
 38935                                  ;			  else 
 38936                                  ;				CY
 38937                                  ;
 38938                                  ; Uses			: BX, DX
 38939                                  ;
 38940                                  ;-------------------------------------------------------------------------
 38941                                  
 38942                                  umb_allocate:
 38943                                  	; 31/12/2022
 38944                                  	; ds = cs
 38945 000033FE 50                      	push	ax
 38946 000033FF B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 38947 00003401 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 38948                                  					;   possible
 38949                                  	; 31/12/2022
 38950 00003404 FF1E[A31F]              	call	far [DevXMSAddr]
 38951                                  	;call	far [cs:DevXMSAddr]
 38952                                  					; dx now contains the size of
 38953                                  					; the largest UMB
 38954 00003408 09D2                    	or	dx,dx
 38955 0000340A 740B                    	jz	short ua_err
 38956                                  	
 38957 0000340C B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 38958                                  
 38959                                  	; 31/12/2022
 38960 0000340E FF1E[A31F]              	call	far [DevXMSAddr]
 38961                                  	;call	far [cs:DevXMSAddr]
 38962                                  
 38963 00003412 83F801                  	cmp	ax,1			; Q: was the reqst successful
 38964                                  	;jne	short ua_err		; N: error
 38965                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38966 00003415 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 38967                                  ua_err:
 38968 00003417 F9                      	stc	
 38969                                  
 38970                                  	;clc
 38971                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38972                                  	; 12/12/2022
 38973                                  	; cf=0
 38974                                  	;clc 
 38975                                  ua_done:
 38976 00003418 58                      	pop	ax
 38977 00003419 C3                      	retn
 38978                                  	; 27/07/2023
 38979                                  ;ua_err:
 38980                                  	;stc
 38981                                  	;jmp	short ua_done
 38982                                  
 38983                                  ;----------------------------------------------------------------------------
 38984                                  ;
 38985                                  ;**	get_next - Find Next item in Arena
 38986                                  ;
 38987                                  ;	ENTRY	dS - pointer to block head
 38988                                  ;	EXIT	AX,ES - pointers to next head
 38989                                  ;		'C' set if arena damaged
 38990                                  ;
 38991                                  ;----------------------------------------------------------------------------
 38992                                  
 38993                                  	; 01/11/2022
 38994                                  get_next:
 38995 0000341A 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 38996 0000341F 740A                    	je	short gn_err
 38997                                  _get_next_:
 38998 00003421 8CD8                    	mov     ax,ds                   ; ax=current block
 38999 00003423 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 39000 00003427 40                      	inc     ax                      ; remember that header!
 39001 00003428 8EC0                    	mov	es,ax
 39002                                  	;clc
 39003                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39004                                  	; 11/12/2022
 39005                                  	; cf=0
 39006                                  	;clc
 39007 0000342A C3                      	retn
 39008                                  gn_err:
 39009 0000342B F9                      	stc
 39010                                  	; 11/12/2022	
 39011                                  lfu_err:	 ; cf=1
 39012 0000342C C3                      	retn
 39013                                  
 39014                                  ;----------------------------------------------------------------------------
 39015                                  ;
 39016                                  ; procedure : LinkFirstUMB
 39017                                  ;
 39018                                  ;----------------------------------------------------------------------------
 39019                                  
 39020                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39021                                  	; (SYSINIT:2F81h)
 39022                                  LinkFirstUMB:
 39023                                  	; 31/12/2022
 39024                                  	; ds = cs
 39025 0000342D E8CEFF                  	call	umb_allocate
 39026 00003430 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 39027                                  
 39028                                  ; bx = segment of allocated UMB
 39029                                  ; dx = size of UMB
 39030                                  
 39031                                  	; 31/12/2022
 39032                                  	; ds = cs
 39033                                  
 39034 00003432 CD12                    	int	12h			; ax = size of memory
 39035 00003434 B106                    	mov	cl,6
 39036 00003436 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 39037                                  
 39038 00003438 89C1                    	mov	cx,ax			; cx = size in paras
 39039 0000343A 29D8                    	sub	ax,bx			; ax = - size of unused block
 39040                                  
 39041 0000343C F7D8                    	neg	ax
 39042                                  
 39043                                  	;sub	cx,1			; cx = first umb_arena
 39044                                  	; 09/09/2023
 39045 0000343E 49                      	dec	cx
 39046 0000343F 8EC1                    	mov	es,cx			; es = first umb_arena
 39047                                  	
 39048 00003441 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39049 00003447 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39050                                  					
 39051 0000344E 26A30300                	mov	[es:ARENA.SIZE],ax	
 39052 00003452 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39053                                  
 39054                                  ; put in the arena for the first UMB
 39055                                  
 39056 00003459 8EC3                    	mov	es,bx			; es has first free umb seg
 39057 0000345B 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39058 00003461 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 39059                                  					; mark as free 
 39060 00003468 4A                      	dec	dx			; make room for arena
 39061 00003469 2689160300              	mov	[es:ARENA.SIZE],dx	
 39062                                  
 39063                                  	;mov	es,[cs:DevDOSData]
 39064                                  	; 31/12/2022
 39065 0000346E 8E06[BA1F]              	mov	es,[DevDOSData] ; ds = cs
 39066 00003472 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 39067 00003475 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 39068                                  					;  data segment with the arena
 39069                                  					;  just below Top of Mem
 39070                                  
 39071                                  ; we must now scan the arena chain and update the size of the last arena
 39072                                  
 39073 00003478 BF2400                  	mov	di,DOS_ARENA ; 24h
 39074 0000347B 268E05                  	mov	es,[es:di]		; es = start arena
 39075 0000347E 31FF                    	xor	di,di
 39076                                  ;scan_next
 39077                                  ; 09/12/2022
 39078                                  scannext:
 39079 00003480 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 39080 00003484 740C                    	je	short got_last
 39081                                  	
 39082 00003486 8CC0                    	mov	ax,es
 39083 00003488 2603060300              	add	ax,[es:ARENA.SIZE]
 39084 0000348D 40                      	inc	ax
 39085 0000348E 8EC0                    	mov	es,ax
 39086                                  	;jmp	short scan_next
 39087                                  	; 09/12/2022
 39088 00003490 EBEE                    	jmp	short scannext
 39089                                  got_last:
 39090                                  	;sub	word [es:ARENA.SIZE],1
 39091                                  	; 09/09/2023
 39092 00003492 26FF0E0300              	dec	word [es:ARENA.SIZE]
 39093                                  
 39094 00003497 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39095                                  	;clc
 39096                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39097                                  	; 11/12/2022
 39098                                  	; cf=0
 39099                                  	;clc
 39100 0000349D C3                      	retn
 39101                                  
 39102                                  ; 11/12/2022
 39103                                  ;;lfu_err:
 39104                                  ;	;stc
 39105                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39106                                  ;	; 11/12/2022
 39107                                  ;	; cf=1
 39108                                  ;	;stc
 39109                                  ;	retn
 39110                                  
 39111                                  ;----------------------------------------------------------------------------
 39112                                  ;
 39113                                  ; procedure : ShrinkUMB
 39114                                  ;
 39115                                  ;	Shrinks the current UMB in use, so that the unused portions
 39116                                  ;	of the UMB is given back to the DOS free mem pool
 39117                                  ;
 39118                                  ;----------------------------------------------------------------------------
 39119                                  
 39120                                  ShrinkUMB:
 39121                                  	; 12/12/2022
 39122                                  	; ds = cs
 39123 0000349E 833E[9D1F]00            	cmp	word [DevUMBAddr],0
 39124                                  	;cmp	word [cs:DevUMBAddr],0
 39125 000034A3 741F                    	je	short su_exit
 39126 000034A5 06                      	push	es
 39127                                  	; 01/01/2023
 39128                                  	;push	bx
 39129                                  	; 12/12/2022
 39130                                  	;mov	bx,[cs:DevUMBFree]
 39131                                  	;sub	bx,[cs:DevUMBAddr]
 39132                                  	;mov	es,[cs:DevUMBAddr]
 39133 000034A6 8B1E[A11F]              	mov	bx,[DevUMBFree]
 39134 000034AA 2B1E[9D1F]              	sub	bx,[DevUMBAddr]
 39135 000034AE 8E06[9D1F]              	mov	es,[DevUMBAddr]
 39136                                  	
 39137 000034B2 B8004A                  	mov	ax,4A00h
 39138 000034B5 CD21                    	int	21h
 39139                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 39140                                  		; ES = segment address of block to change
 39141                                  		; BX = new size in paragraphs
 39142 000034B7 8CC0                    	mov	ax,es
 39143 000034B9 48                      	dec	ax
 39144 000034BA 8EC0                    	mov	es,ax
 39145 000034BC 26C70601000800          	mov	word [es:ARENA.OWNER],8
 39146                                  	; 01/01/2023
 39147                                  	;pop	bx
 39148 000034C3 07                      	pop	es
 39149                                  su_exit:
 39150 000034C4 C3                      	retn
 39151                                  
 39152                                  ;----------------------------------------------------------------------------
 39153                                  ;
 39154                                  ; procedure : UnlinkUMB
 39155                                  ;
 39156                                  ;	Unlinks the UMBs from the DOS arena chain
 39157                                  ;
 39158                                  ;----------------------------------------------------------------------------
 39159                                  
 39160                                  UnlinkUMB:
 39161                                  	; 12/12/2022
 39162                                  	; ds = cs
 39163 000034C5 1E                      	push	ds
 39164 000034C6 06                      	push	es
 39165                                  	; 12/12/2022
 39166 000034C7 803E[B91F]00            	cmp	byte [FirstUMBLinked],0
 39167                                  	;cmp	byte [cs:FirstUMBLinked],0
 39168 000034CC 7420                    	je	short ulu_x		; nothing to unlink
 39169                                  	; 12/12/2022
 39170 000034CE 8E06[BA1F]              	mov	es,[DevDOSData]
 39171                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 39172 000034D2 268E1E2400              	mov	ds,[es:DOS_ARENA]
 39173 000034D7 268B3E8C00              	mov	di,[es:UMB_ARENA]
 39174                                  ulu_next:
 39175 000034DC E83BFF                  	call	get_next
 39176 000034DF 720D                    	jc	short ulu_x
 39177 000034E1 39C7                    	cmp	di,ax			; is the next one UMB ?
 39178 000034E3 7404                    	je	short ulu_found
 39179 000034E5 8ED8                    	mov	ds,ax
 39180 000034E7 EBF3                    	jmp	short ulu_next
 39181                                  ulu_found:
 39182                                  	;mov	byte [0],'Z'
 39183 000034E9 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39184                                  ulu_x:
 39185 000034EE 07                      	pop	es
 39186 000034EF 1F                      	pop	ds
 39187 000034F0 C3                      	retn
 39188                                  
 39189                                  ; ----------------------------------------------------------------------
 39190                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 39191                                  ; ----------------------------------------------------------------------
 39192                                  ; 14/04/2019 - Retro DOS v4.0
 39193                                  
 39194                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 39195                                  ;
 39196                                  ; Summary:
 39197                                  ;
 39198                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 39199                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 39200                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 39201                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 39202                                  ;   and/or config.inc for the full list.
 39203                                  ;
 39204                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 39205                                  ;   configuration support. blockname is either MENU, which contains one
 39206                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 39207                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 39208                                  ;   INCLUDE allows the current block to name another block for inclusion
 39209                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 39210                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 39211                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 39212                                  ;
 39213                                  ; Example:
 39214                                  ;
 39215                                  ;   [menu]
 39216                                  ;   menuitem=misc,Miscellaneous
 39217                                  ;   menuitem=network,Network Configuration
 39218                                  ;   menudefault=network,15
 39219                                  ;
 39220                                  ;   [network]
 39221                                  ;   include misc
 39222                                  ;   device=foo
 39223                                  ;
 39224                                  ;   [misc]
 39225                                  ;   device=bar
 39226                                  ;   include alternate
 39227                                  ;
 39228                                  ;   [alternate]
 39229                                  ;   device=tar
 39230                                  ;
 39231                                  ;
 39232                                  ;   When the menu is displayed
 39233                                  ;
 39234                                  ;    1. Miscellaneous
 39235                                  ;    2. Network Configuration
 39236                                  ;
 39237                                  ;   #2 is highlighted as the default option, and will be automatically
 39238                                  ;   selected after 15 seconds. It will invoke the following lines in the
 39239                                  ;   following order:
 39240                                  ;
 39241                                  ;       DEVICE=BAR
 39242                                  ;       DEVICE=TAR
 39243                                  ;       DEVICE=FOO
 39244                                  ;
 39245                                  
 39246                                  ;MULTI_CONFIG equ 1
 39247                                  
 39248                                  ; the following depend on the positions of the various letters in switchlist
 39249                                  
 39250                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 39251                                  
 39252                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 39253                                  flagdrive	equ 00001000b ; 8 
 39254                                  flagcyln	equ 00010000b ; 16
 39255                                  flagseclim	equ 00100000b ; 32
 39256                                  flagheads	equ 01000000b ; 64
 39257                                  flagff		equ 10000000b ; 128
 39258                                  
 39259                                  ;----------------------------------------------------------------------------
 39260                                  ; 19/04/2019 - Retro DOS v4.0
 39261                                  
 39262                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 39263                                  
 39264                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39265                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 39266                                  
 39267 000034F1 00                      insert_blank:	db 	0
 39268                                  
 39269                                  ;----------------------------------------------------------------------------
 39270                                  ;
 39271                                  ; procedure : setparms
 39272                                  ;
 39273                                  ; the following set of routines is used to parse the drivparm = command in
 39274                                  ; the config.sys file to change the default drive parameters.
 39275                                  ;
 39276                                  ;----------------------------------------------------------------------------
 39277                                  
 39278                                  setparms:
 39279 000034F2 1E                      	push	ds
 39280 000034F3 50                      	push	ax
 39281 000034F4 53                      	push	bx
 39282 000034F5 51                      	push	cx
 39283 000034F6 52                      	push	dx
 39284                                  
 39285 000034F7 0E                      	push	cs
 39286 000034F8 1F                      	pop	ds
 39287                                  
 39288 000034F9 31DB                    	xor	bx,bx
 39289 000034FB 8A1E[E249]              	mov	bl,[drive]
 39290                                  	; 18/12/2022
 39291 000034FF 43                      	inc	bx
 39292                                  	;inc	bl			; get it correct for ioctl call
 39293                                  					; (1=a,2=b...)
 39294 00003500 BA[8448]                	mov	dx,deviceparameters
 39295                                  	;mov	ah,IOCTL ; 44h
 39296                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 39297                                  	; 04/07/2023
 39298 00003503 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 39299                                  	;mov	ch,RAWIO ; 8
 39300                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 39301                                  	; 04/07/2023
 39302 00003506 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 39303 00003509 CD21                    	int	21h
 39304                                  
 39305                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39306 0000350B 8A26[E349]              	mov	ah,[switches]
 39307                                  	;mov	al,[deviceparameters+20]
 39308 0000350F A0[9848]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39309 00003512 8A0E[E249]              	mov	cl,[drive]
 39310                                  ;
 39311                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39312                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 39313                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 39314                                  ;	; 21/10/2022
 39315                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 39316                                  ;	;mov	ds,ax			; set Bios_Data segment
 39317                                  ;
 39318                                  ;	; 27/07/2023
 39319                                  ;	;;test	word [cs:switches],flagec35 ; 4
 39320                                  ;	;test	byte [cs:switches],flagec35
 39321                                  ;	;jz	short not_ec35
 39322                                  ;
 39323                                  ;	; 27/07/2023
 39324                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39325                                  ;	;;test	word [switches],flagec35 ; 4
 39326                                  ;	; 12/12/2022
 39327                                  ;	;test	byte [switches],flagec35 ; 4
 39328                                  ;	;jz	short eot_ok
 39329                                  ;	
 39330                                  	;mov	cl,[cs:drive]		; which drive was this for?
 39331                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39332                                  	;mov	cl,[drive]
 39333                                  	; 27/07/2023
 39334                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 39335                                  	;mov	ds,ax
 39336                                  
 39337 00003516 BA7000                  	mov	dx,DOSBIODATASEG
 39338 00003519 8EDA                    	mov	ds,dx
 39339                                  
 39340 0000351B F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 39341 0000351E 7408                    	jz	short not_ec35
 39342                                  
 39343                                  	;mov	al,1			; assume drive 0
 39344                                  	;shl	al,cl			; set proper bit depending on drive
 39345                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 39346                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 39347                                  	; 27/07/2023
 39348 00003520 B401                    	mov	ah,1
 39349 00003522 D2E4                    	shl	ah,cl
 39350 00003524 0826[A204]              	or	[ec35_flag],ah
 39351                                  
 39352                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39353                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 39354                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39355                                  not_ec35:
 39356                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 39357                                  ;	sectors per track than any old ones.
 39358                                  
 39359                                  	; 27/07/2023
 39360                                  	;;mov	al,[cs:deviceparameters+20]
 39361                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39362                                  	
 39363                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 39364 00003528 3A06[2C01]              	cmp	al,[eot]
 39365 0000352C 7603                    	jbe	short eot_ok
 39366 0000352E A2[2C01]                	mov	[eot],al
 39367                                  eot_ok:
 39368 00003531 5A                      	pop	dx			; fix up all the registers
 39369 00003532 59                      	pop	cx
 39370 00003533 5B                      	pop	bx
 39371 00003534 58                      	pop	ax
 39372 00003535 1F                      	pop	ds ; 13/05/2019
 39373 00003536 C3                      	retn
 39374                                  
 39375                                  ;----------------------------------------------------------------------------
 39376                                  ;
 39377                                  ; procedure : diddleback
 39378                                  ;
 39379                                  ; replace default values for further drivparm commands
 39380                                  ;
 39381                                  ;----------------------------------------------------------------------------
 39382                                  
 39383                                  diddleback:
 39384 00003537 1E                      	push	ds
 39385 00003538 0E                      	push	cs
 39386 00003539 1F                      	pop	ds
 39387                                  	;mov	word [deviceparameters+4],80
 39388 0000353A C706[8848]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39389                                  	;mov	byte [deviceparameters+1],2
 39390 00003540 C606[8548]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 39391                                  	;mov	word [deviceparameters+2],0
 39392 00003545 C706[8648]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 39393 0000354B C706[E349]0000          	mov	word [switches],0	    ; zero all switches
 39394 00003551 1F                      	pop	ds
 39395 00003552 C3                      	retn
 39396                                  
 39397                                  ; 03/01/2023
 39398                                  %if 0
 39399                                  
 39400                                  ; 15/04/2019 - Retro DOS v4.0
 39401                                  
 39402                                  ;----------------------------------------------------------------------------
 39403                                  ;
 39404                                  ; procedure : parseline
 39405                                  ;
 39406                                  ; entry point is parseline. al contains the first character in command line.
 39407                                  ;
 39408                                  ;----------------------------------------------------------------------------
 39409                                  
 39410                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39411                                  	; (SYSINIT:3EDFh)
 39412                                  
 39413                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39414                                  	; (SYSINIT:30ACh)
 39415                                  parseline:
 39416                                  	; 03/01/2023
 39417                                  	; ds = cs ; *
 39418                                  
 39419                                  	;push	ds ; *
 39420                                  
 39421                                  	;push	cs ; *
 39422                                  	;pop	ds ; *
 39423                                  
 39424                                  nextswtch:
 39425                                  	cmp	al,cr			; carriage return?
 39426                                  	je	short done_line
 39427                                  	cmp	al,lf			; linefeed?
 39428                                  	je	short put_back		; put it back and done
 39429                                  
 39430                                  ; anything less or equal to a space is ignored.
 39431                                  
 39432                                  	cmp	al,' '                  ; space?
 39433                                  	jbe	short getnext		; skip over space
 39434                                  	cmp	al,'/'
 39435                                  	je	short getparm
 39436                                  	stc				; mark error invalid-character-in-input
 39437                                  	;jmp	short exitpl
 39438                                  	; 03/01/2023
 39439                                  swterr:
 39440                                  	retn
 39441                                  
 39442                                  getparm:
 39443                                  	call	check_switch
 39444                                  	mov	[switches],bx		; save switches read so far
 39445                                  	jc	short swterr
 39446                                  getnext:
 39447                                  	call	getchr
 39448                                  	;jc	short done_line
 39449                                  	;jmp	short nextswtch
 39450                                  	; 03/01/2023
 39451                                  	jnc	short nextswtch
 39452                                  ;swterr:
 39453                                  	;jmp	short exitpl		; exit if error
 39454                                  
 39455                                  done_line:
 39456                                  	; 12/12/2022
 39457                                  	test	byte [switches],flagdrive ; 8
 39458                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39459                                  	jnz	short okay
 39460                                  	stc				; mark error no-drive-specified
 39461                                  	;jmp	short exitpl
 39462                                  	; 03/01/2023
 39463                                  	retn
 39464                                  
 39465                                  okay:
 39466                                  	mov	ax,[switches]
 39467                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39468                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39469                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39470                                  	;clc			    ; everything is fine
 39471                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39472                                  	; 12/12/2022
 39473                                  	; cf=0
 39474                                  	;clc
 39475                                  	;call	setdeviceparameters
 39476                                  	; 03/01/2023
 39477                                  	jmp	setdeviceparameters
 39478                                  ;exitpl:
 39479                                  	; 03/01/2023
 39480                                  	; ds = cs
 39481                                  	;pop	ds ; *
 39482                                  	retn
 39483                                  put_back:
 39484                                  	inc	word [count]		; one more char to scan
 39485                                  	dec	word [chrptr]		; back up over linefeed
 39486                                  	jmp	short done_line
 39487                                  
 39488                                  %endif
 39489                                  
 39490                                  ;----------------------------------------------------------------------------
 39491                                  ;
 39492                                  ; procedure : check_switch
 39493                                  ;
 39494                                  ; processes a switch in the input. it ensures that the switch is valid, and
 39495                                  ; gets the number, if any required, following the switch. the switch and the
 39496                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 39497                                  ; error.
 39498                                  ;
 39499                                  ;----------------------------------------------------------------------------
 39500                                  
 39501                                  ; 09/09/2023
 39502                                  
 39503                                  err_swtch:
 39504 00003553 31CB                    	xor	bx,cx			; remove this switch from the records
 39505                                  err_check:
 39506 00003555 F9                      	stc
 39507                                  err_chk:
 39508                                  done_swtch:	; 09/09/2023 (cf=0)
 39509 00003556 C3                      	retn
 39510                                  
 39511                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39512                                  
 39513                                  check_switch:
 39514 00003557 E8240D                  	call	getchr
 39515                                  	;jc	short err_check
 39516 0000355A 72FA                    	jc	short err_chk
 39517 0000355C 24DF                            and     al,0DFh                 ; convert it to upper case
 39518 0000355E 3C41                    	cmp	al,'A'
 39519                                  	;jb	short err_check
 39520 00003560 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 39521 00003562 3C5A                    	cmp	al,'Z'
 39522 00003564 77EF                    	ja	short err_check
 39523                                  
 39524 00003566 06                      	push	es
 39525                                  
 39526 00003567 0E                      	push	cs
 39527 00003568 07                      	pop	es
 39528                                  
 39529                                  	;mov	cl,[switchlist]		; get number of valid switches
 39530                                  	;mov	ch,0
 39531                                  	;mov	di,1+switchlist		; point to string of valid switches
 39532                                  	; 09/09/2023
 39533 00003569 BF[084B]                	mov	di,switchlist
 39534 0000356C 8A0D                    	mov	cl,[di]
 39535 0000356E B500                    	mov	ch,0
 39536 00003570 47                      	inc	di	; 1+switchlist
 39537                                  
 39538 00003571 F2AE                    	repne	scasb
 39539                                  
 39540 00003573 07                      	pop	es
 39541 00003574 75DF                    	jnz	short err_check
 39542                                  
 39543 00003576 B80100                  	mov	ax,1
 39544 00003579 D3E0                    	shl	ax,cl			; set bit to indicate switch
 39545 0000357B 8B1E[E349]              	mov	bx,[switches]		; get switches so far
 39546 0000357F 09C3                    	or	bx,ax			; save this with other switches
 39547 00003581 89C1                    	mov	cx,ax
 39548                                  	; 12/12/2022
 39549 00003583 A8F8                    	test	al,switchnum ; 0F8h
 39550                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 39551 00003585 74CF                    	jz	short done_swtch
 39552                                  
 39553 00003587 E8F40C                  	call	getchr
 39554 0000358A 72C7                    	jc	short err_swtch
 39555                                  
 39556 0000358C 3C3A                    	cmp	al,':'
 39557 0000358E 75C3                    	jne	short err_swtch
 39558                                  
 39559 00003590 E8EB0C                  	call	getchr
 39560 00003593 53                      	push	bx			; preserve switches
 39561                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39562                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 39563                                  	; 12/12/2022
 39564                                  	; ds = cs
 39565 00003594 C606[AC02]20            	mov	byte [sepchr],' '
 39566 00003599 E8980D                  	call	getnum
 39567                                  	;mov	byte [cs:sepchr],0
 39568                                  	; 12/12/2022
 39569 0000359C C606[AC02]00            	mov	byte [sepchr],0
 39570 000035A1 5B                      	pop	bx			; restore switches
 39571                                  
 39572                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 39573                                  ; not check for carry set here. if there is an error, it will be detected
 39574                                  ; further on (hopefully).
 39575                                  
 39576                                  	; 09/09/2023
 39577                                  	;call	process_num
 39578                                  	;jmp	short process_num
 39579                                  
 39580                                  ;done_swtch:
 39581                                  ;	;clc
 39582                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39583                                  ;	; 12/12/2022
 39584                                  ;	; cf=0
 39585                                  ;	;clc
 39586                                  ;	retn
 39587                                  
 39588                                  ;----------------------------------------------------------------------------
 39589                                  ;
 39590                                  ; procedure : process_num
 39591                                  ;
 39592                                  ; this routine takes the switch just input, and the number following (if any),
 39593                                  ; and sets the value in the appropriate variable. if the number input is zero
 39594                                  ; then it does nothing - it assumes the default value that is present in the
 39595                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 39596                                  ;
 39597                                  ;----------------------------------------------------------------------------
 39598                                  
 39599                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39600                                  	; (SYSINIT:3156h)
 39601                                  process_num:
 39602 000035A2 850E[E349]              	test	[switches],cx		; if this switch has been done before,
 39603 000035A6 752B                    	jnz	short done_ret		; ignore this one.
 39604                                  	; 12/12/2022
 39605 000035A8 F6C108                  	test	cl,flagdrive ; 8
 39606                                  	;test	cx,flagdrive ; 8
 39607 000035AB 7404                    	jz	short try_f
 39608 000035AD A2[E249]                	mov	byte [drive],al
 39609                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39610                                  	;jmp	short done_ret
 39611                                  	; 12/12/2022
 39612                                  	; cf=0
 39613 000035B0 C3                      	retn	; 13/05/2019
 39614                                  try_f:
 39615                                  	; 12/12/2022
 39616 000035B1 F6C180                  	test	cl,flagff ; 80h
 39617                                  	;test	cx,flagff ; 80h
 39618 000035B4 7404                    	jz	short try_t
 39619                                  
 39620                                  ; ensure that we do not get bogus form factors that are not supported
 39621                                  
 39622                                  	;mov	[deviceparameters+1],al
 39623 000035B6 A2[8548]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 39624                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39625                                  	;jmp	short done_ret
 39626                                  	; 12/12/2022
 39627                                  	; cf=0
 39628 000035B9 C3                      	retn	; 13/05/2019
 39629                                  try_t:
 39630 000035BA 09C0                    	or	ax,ax
 39631 000035BC 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 39632                                  	; 12/12/2022
 39633 000035BE F6C110                  	test	cl,flagcyln ; 10h
 39634                                  	;test	cx,flagcyln ; 10h
 39635 000035C1 7404                    	jz	short try_s
 39636                                  
 39637                                  	;mov	[deviceparameters+4],ax
 39638 000035C3 A3[8848]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 39639                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39640                                  	;jmp	short done_ret
 39641                                  	; 12/12/2022
 39642                                  	; cf=0
 39643 000035C6 C3                      	retn	; 13/05/2019
 39644                                  try_s:
 39645                                  	; 12/12/2022
 39646 000035C7 F6C120                  	test	cl,flagseclim ; 20h
 39647                                  	;test	cx,flagseclim ; 20h
 39648 000035CA 7404                    	jz	short try_h
 39649 000035CC A3[E049]                	mov	[slim],ax
 39650                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39651                                  	;jmp	short done_ret
 39652                                  	; 12/12/2022
 39653                                  	; cf=0
 39654 000035CF C3                      	retn	; 13/05/2019
 39655                                  
 39656                                  ; must be for number of heads
 39657                                  
 39658                                  try_h:
 39659 000035D0 A3[DE49]                	mov	[hlim],ax
 39660                                  done_ret:
 39661                                  	;clc
 39662                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39663                                  	; 12/12/2022
 39664                                  	; cf=0 (test instruction resets cf)
 39665                                  	;clc
 39666 000035D3 C3                      	retn
 39667                                  
 39668                                  
 39669                                  ; 16/04/2024 - Retro DOS v5.0
 39670                                  ; 03/01/2023 - Retro DOS v4.2
 39671                                  %if 1
 39672                                  
 39673                                  ; 15/04/2019 - Retro DOS v4.0
 39674                                  
 39675                                  ;----------------------------------------------------------------------------
 39676                                  ;
 39677                                  ; procedure : parseline
 39678                                  ;
 39679                                  ; entry point is parseline. al contains the first character in command line.
 39680                                  ;
 39681                                  ;----------------------------------------------------------------------------
 39682                                  
 39683                                  	; 16/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 39684                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4151h)
 39685                                  
 39686                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39687                                  	; (SYSINIT:3EDFh)
 39688                                  
 39689                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39690                                  	; (SYSINIT:30ACh)
 39691                                  
 39692                                  parseline:
 39693                                  	; 03/01/2023
 39694                                  	; ds = cs ; *
 39695                                  
 39696                                  	;push	ds ; *
 39697                                  
 39698                                  	;push	cs ; *
 39699                                  	;pop	ds ; *
 39700                                  
 39701                                  nextswtch:
 39702 000035D4 3C0D                    	cmp	al,cr			; carriage return?
 39703 000035D6 741C                    	je	short done_line
 39704 000035D8 3C0A                    	cmp	al,lf			; linefeed?
 39705 000035DA 7421                    	je	short put_back		; put it back and done
 39706                                  
 39707                                  ; anything less or equal to a space is ignored.
 39708                                  
 39709 000035DC 3C20                    	cmp	al,' '                  ; space?
 39710 000035DE 760F                    	jbe	short getnext		; skip over space
 39711 000035E0 3C2F                    	cmp	al,'/'
 39712 000035E2 7402                    	je	short getparm
 39713 000035E4 F9                      	stc				; mark error invalid-character-in-input
 39714                                  	;jmp	short exitpl
 39715                                  	; 03/01/2023
 39716                                  swterr:
 39717 000035E5 C3                      	retn
 39718                                  
 39719                                  getparm:
 39720 000035E6 E86EFF                  	call	check_switch
 39721 000035E9 891E[E349]              	mov	[switches],bx		; save switches read so far
 39722 000035ED 72F6                    	jc	short swterr
 39723                                  getnext:
 39724 000035EF E88C0C                  	call	getchr
 39725                                  	;jc	short done_line
 39726                                  	;jmp	short nextswtch
 39727                                  	; 03/01/2023
 39728 000035F2 73E0                    	jnc	short nextswtch
 39729                                  ;swterr:
 39730                                  	;jmp	short exitpl		; exit if error
 39731                                  
 39732                                  done_line:
 39733                                  	; 12/12/2022
 39734 000035F4 F606[E349]08            	test	byte [switches],flagdrive ; 8
 39735                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39736 000035F9 750C                    	jnz	short okay
 39737 000035FB F9                      	stc				; mark error no-drive-specified
 39738                                  	;jmp	short exitpl
 39739                                  	; 03/01/2023
 39740 000035FC C3                      	retn
 39741                                  
 39742                                  ;exitpl:
 39743                                  	; 03/01/2023
 39744                                  	; ds = cs
 39745                                  	;;pop	ds ; *
 39746                                  	;retn
 39747                                  
 39748                                  put_back:
 39749 000035FD FF06[5403]              	inc	word [count]		; one more char to scan
 39750 00003601 FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 39751 00003605 EBED                    	jmp	short done_line
 39752                                  
 39753                                  okay:
 39754 00003607 A1[E349]                	mov	ax,[switches]
 39755 0000360A 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39756 0000360D A3[8648]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39757                                  	; 16/04/2024
 39758                                  	;mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39759                                  	;;;
 39760 00003610 C706[E048]0000          	mov	word [deviceparameters+92],0 ; PCDOS 7.1 IBMBIO.COM	
 39761                                  	;;;
 39762                                  	;clc			    ; everything is fine
 39763                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39764                                  	; 12/12/2022
 39765                                  	; cf=0
 39766                                  	;clc
 39767                                  	;call	setdeviceparameters
 39768                                  	; 03/01/2023
 39769                                  	;jmp	short setdeviceparameters
 39770                                  
 39771                                  %endif
 39772                                  
 39773                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 39774                                  
 39775                                  ;----------------------------------------------------------------------------
 39776                                  ;
 39777                                  ; procedure : setdeviceparameters
 39778                                  ;
 39779                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 39780                                  ; system based on the form factor. it is assumed that the bpbs for the
 39781                                  ; various form factors are present in the bpbtable. for hard files,
 39782                                  ; the recommended bpb is the same as the bpb on the drive.
 39783                                  ; no attempt is made to preserve registers since we are going to jump to
 39784                                  ; sysinit straight after this routine.
 39785                                  ;
 39786                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 39787                                  ;	  we always return no carry
 39788                                  ;
 39789                                  ;	note:  there is a routine by the same name in msdioctl.asm
 39790                                  ;
 39791                                  ;----------------------------------------------------------------------------
 39792                                  
 39793                                  ; 15/04/2019 - Retro DOS v4.0
 39794                                  
 39795                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39796                                  
 39797                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39798                                  	; (SYSINIT:3FC4h)
 39799                                  
 39800                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39801                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 39802                                  
 39803                                  setdeviceparameters:
 39804                                  	; 03/01/2023
 39805                                  	; ds = cs
 39806                                  
 39807 00003616 06                      	push	es
 39808                                  
 39809 00003617 0E                      	push	cs
 39810 00003618 07                      	pop	es
 39811                                  
 39812 00003619 31DB                    	xor	bx,bx
 39813 0000361B 8A1E[8548]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 39814 0000361F 80FB00                  	cmp	bl,DEV_5INCH ; 0
 39815 00003622 7506                    	jne	short got_80
 39816                                  
 39817 00003624 C706[8848]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39818                                  							; 48 tpi=40 cyl
 39819                                  got_80:
 39820 0000362A D1E3                    	shl	bx,1			; get index into bpb table
 39821 0000362C 8BB7[F44A]              	mov	si,[bpbtable+bx]	; get address of bpb
 39822                                  
 39823                                  	;mov	di,deviceparameters+7	
 39824                                  	; 02/11/2022
 39825 00003630 BF[8B48]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 39826 00003633 B93B00                  	mov	cx,A_BPB.size ; 31
 39827                                  	; 09/09/2023
 39828                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 39829 00003636 FC                      	cld
 39830                                  	;repe	movsb
 39831                                  	; 02/11/2022
 39832 00003637 F3A4                    	rep	movsb
 39833                                  
 39834 00003639 07                      	pop	es
 39835                                  
 39836                                  	; 12/12/2022
 39837 0000363A F606[E349]20            	test	byte [switches],flagseclim ; 20h
 39838                                  	;test	word [switches],flagseclim ; 20h
 39839 0000363F 7406                    	jz	short see_heads
 39840                                  
 39841 00003641 A1[E049]                	mov	ax,[slim]
 39842                                  	;mov	[deviceparameters+20],ax
 39843 00003644 A3[9848]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 39844                                  
 39845                                  see_heads:
 39846                                  	; 12/12/2022
 39847 00003647 F606[E349]40            	test	byte [switches],flagheads ; 40h
 39848                                  	;test	word [switches],flagheads ; 40h
 39849 0000364C 7406                    	jz	short heads_not_altered
 39850                                  
 39851 0000364E A1[DE49]                	mov	ax,[hlim]
 39852                                  	;mov	[deviceparameters+22],ax	
 39853 00003651 A3[9A48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 39854                                  
 39855                                  heads_not_altered:
 39856                                  
 39857                                  ; set up correct media descriptor byte and sectors/cluster
 39858                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 39859                                  
 39860                                  	;mov	byte [deviceparameters+9],2
 39861                                  	; 02/11/2022
 39862                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 39863                                  	; 03/01/2023
 39864 00003654 B80200                  	mov	ax,2	
 39865 00003657 A2[8D48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 39866                                  
 39867 0000365A B3F0                    	mov	bl,0F0h			; get default mediabyte
 39868                                  
 39869                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 39870                                  
 39871                                  	;mov	bh,[deviceparameters+17]
 39872                                  	; 02/11/2022
 39873 0000365C 8A3E[9548]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 39874                                  	
 39875                                  	; 03/01/2023
 39876                                  	; ax = 2
 39877 00003660 3906[9A48]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 39878                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 39879 00003664 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 39880                                  
 39881 00003666 7524                    	jne	short only_one_head	; one head, do one head stuff
 39882                                  
 39883                                  ;	two head drives will use the mediadescriptor from the bpb
 39884                                  
 39885 00003668 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 39886                                  
 39887                                  ;	two sided drives have two special cases to look for. One is
 39888                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 39889                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 39890                                  ;	   one sector/cluster.
 39891                                  
 39892                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 39893                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 39894                                  ;	   type of 2 headed drive is all set.
 39895                                  
 39896 0000366A 833E[9848]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 39897 0000366F 7509                    	jne	short not_144m
 39898 00003671 833E[8848]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39899 00003676 7502                    	jne	short not_144m
 39900                                  
 39901                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 39902                                  
 39903 00003678 EB24                    	jmp	short got_one_secperclus_drive
 39904                                  
 39905                                  ;	check for 320K
 39906                                  
 39907                                  not_144m:
 39908 0000367A 833E[8848]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39909 0000367F 7521                    	jne	short got_correct_mediad
 39910 00003681 833E[9848]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39911 00003686 751A                    	jne	short got_correct_mediad
 39912                                  
 39913 00003688 B3FC                    	mov	bl,0FCh
 39914 0000368A EB16                    	jmp	short got_correct_mediad
 39915                                  
 39916                                  only_one_head:
 39917                                  
 39918                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 39919                                  
 39920 0000368C 803E[8548]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 39921 00003691 740B                    	je	short got_one_secperclus_drive
 39922                                  
 39923                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 39924                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 39925                                  ;	  besides 8 will be considered 0fch
 39926                                  
 39927 00003693 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 39928 00003695 833E[9848]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39929                                  	; 12/12/2022
 39930 0000369A 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 39931                                  
 39932 0000369C B3FE                    	mov	bl,0FEh			; 160K mediaid
 39933                                  
 39934                                  ;	we've either got a one sided drive, or a 1.44M drive
 39935                                  ;	  either case we'll use 1 sector per cluster instead of 2
 39936                                  
 39937                                  got_one_secperclus_drive:
 39938                                  	; 03/01/2023
 39939                                  	; ax = 2
 39940 0000369E 48                      	dec	ax  ; ax = 1
 39941 0000369F A2[8D48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 39942                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 39943                                  
 39944                                  got_correct_mediad:
 39945 000036A2 881E[9548]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 39946                                  
 39947                                  ;	 Calculate the correct number of Total Sectors on medium
 39948                                  
 39949 000036A6 A1[8848]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 39950 000036A9 F726[9A48]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 39951 000036AD F726[9848]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39952 000036B1 A3[9348]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 39953 000036B4 F8                      	clc				; we currently return no errors
 39954                                  
 39955 000036B5 C3                      	retn
 39956                                  
 39957                                  ;	M047 -- end rewritten routine
 39958                                  
 39959                                  ;----------------------------------------------------------------------------
 39960                                  ;
 39961                                  ; procedure : organize
 39962                                  ;
 39963                                  ;----------------------------------------------------------------------------
 39964                                  
 39965                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 39966                                  %if 1
 39967                                  end_commd_line:
 39968 000036B6 AA                      	stosb				; store line feed char in buffer for the linecount.
 39969                                  	;mov	byte [cs:com_level],0	; reset the command level.
 39970                                  	; 03/01/2023
 39971                                  	; ds = cs
 39972                                  	;mov	byte [com_level],0
 39973                                  	;jmp	short org1
 39974                                  	; 09/09/2023
 39975 000036B7 EB0E                    	jmp	short org0
 39976                                  nochar1:
 39977 000036B9 F9                      	stc
 39978 000036BA C3                      	retn
 39979                                  %endif
 39980                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39981                                  	; (SYSINIT:3234h)
 39982                                  
 39983                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39984                                  	; (SYSINIT:4067h)
 39985                                  
 39986                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 39987                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 39988                                  
 39989                                  organize:
 39990                                  	; 03/01/2023
 39991                                  	; ds = cs
 39992 000036BB 8B0E[5403]              	mov	cx,[count]
 39993                                  	;mov	cx,[cs:count]
 39994 000036BF E3F8                    	jcxz	nochar1
 39995                                  
 39996                                  ;ifndef	MULTI_CONFIG
 39997                                  ;
 39998                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 39999                                  ;;   because we the case of values in SET commands preserved
 40000                                  ;
 40001                                  ;	call	mapcase
 40002                                  ;endif
 40003                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40004                                  	; 03/01/2023 - Retro DOS v4.2
 40005                                  	;call	mapcase
 40006                                  
 40007 000036C1 31F6                    	xor	si,si
 40008 000036C3 89F7                    	mov	di,si
 40009 000036C5 31C0                    	xor	ax,ax
 40010                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 40011                                  	;;mov	byte [cs:com_level],0
 40012                                  	; 12/12/2022
 40013                                  	;mov	[cs:com_level],al ; 0
 40014                                  	; 03/01/2023
 40015                                  	; ds = cs
 40016                                  	; 09/09/2023
 40017                                  	;mov	[com_level],al ; 0
 40018                                  org0:
 40019 000036C7 C606[4E03]00            	mov	byte [com_level],0 ; 09/09/2023
 40020                                  org1:
 40021 000036CC E8EF01                  	call	skip_comment
 40022 000036CF 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 40023 000036D1 E8D001                  	call	get2			; not a comment string. then get a char.
 40024 000036D4 3C0A                    	cmp	al,lf ; 0Ah
 40025 000036D6 74DE                    	je	short end_commd_line	; starts with a blank line.
 40026 000036D8 3C20                    	cmp	al,' ' ; 20h
 40027 000036DA 76F0                    	jbe	short org1		; skip leading control characters
 40028                                  	; 09/09/2023
 40029                                  	;jmp	short findit
 40030                                  
 40031                                  ; 09/09/2023
 40032                                  %if 0
 40033                                  end_commd_line:
 40034                                  	stosb				; store line feed char in buffer for the linecount.
 40035                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40036                                  	; 03/01/2023
 40037                                  	; ds = cs
 40038                                  	mov	byte [com_level],0
 40039                                  	jmp	short org1
 40040                                  
 40041                                  nochar1:
 40042                                  	stc
 40043                                  	retn
 40044                                  %endif
 40045                                  
 40046                                  findit:
 40047 000036DC 51                      	push	cx
 40048 000036DD 56                      	push	si
 40049 000036DE 57                      	push	di
 40050 000036DF 89F5                    	mov	bp,si
 40051 000036E1 4D                      	dec	bp
 40052 000036E2 BE[A147]                        mov     si,comtab		; prepare to search command table
 40053 000036E5 B500                    	mov	ch,0
 40054                                  findcom:
 40055 000036E7 89EF                    	mov	di,bp
 40056 000036E9 8A0C                    	mov	cl,[si]
 40057 000036EB 46                      	inc	si
 40058 000036EC E345                    	jcxz	nocom
 40059                                  
 40060                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40061                                  
 40062                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40063                                  
 40064                                  ;ifdef	MULTI_CONFIG
 40065                                  
 40066                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 40067                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 40068                                  ;   anything in particular)
 40069                                  
 40070 000036EE 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 40071 000036F2 7430                    	je	short semicolon
 40072                                  loopcom:
 40073                                  	;mov	al,[es:di]
 40074                                  	;inc	di
 40075                                  	;and	al,~20h ; 0DFh		; force upper case
 40076                                  	;inc	si                      ; compare to byte @es:di
 40077                                  	;cmp	al,[si-1]
 40078                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40079 000036F4 268A25                  	mov	ah,[es:di]
 40080 000036F7 47                      	inc	di
 40081 000036F8 80E4DF                  	and	ah,~20h ; 0DFh		
 40082 000036FB AC                      	lodsb			; mov al,[si]
 40083                                  				; inc si
 40084                                  	;cmp	al,ah
 40085                                  	;loope	loopcom
 40086                                  	; 28/07/2023
 40087 000036FC 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 40088 000036FE E1F4                    	loopz	loopcom
 40089                                  ;else
 40090                                  ;	repe	cmpsb
 40091                                  ;endif
 40092                                  	; 02/11/2022
 40093                                  	; 03/01/2023 - Retro DOS v4.2
 40094                                  	;repe	cmpsb
 40095                                  
 40096                                  	; 28/07/2023
 40097                                  	;lahf
 40098 00003700 01CE                            add     si,cx                   ; bump to next position without affecting flags
 40099                                  	;sahf
 40100 00003702 AC                              lodsb                           ; get indicator letter
 40101                                  	;jnz	short findcom
 40102                                          ; 28/07/2023
 40103 00003703 08E4                    	or	ah,ah			; (*)
 40104 00003705 75E0                    	jnz	short findcom		
 40105                                  	
 40106 00003707 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 40107 0000370B 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 40108 0000370D 26803D0A                	cmp	byte [es:di],lf
 40109 00003711 741B                    	je	short gotcom0
 40110                                  
 40111                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40112                                  
 40113                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40114                                  
 40115                                  ;ifdef	MULTI_CONFIG
 40116                                  
 40117                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 40118                                  
 40119 00003713 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 40120 00003715 7417                    	je	short gotcom0
 40121                                  ;endif
 40122 00003717 50                      	push	ax
 40123 00003718 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 40124                                  
 40125                                  ;ifdef	MULTI_CONFIG
 40126                                  
 40127                                  ;   If keyword is *immediately* followed by a question mark (?), then
 40128                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 40129                                  ;   stored in the CONFIG.SYS memory image.
 40130                                  
 40131 0000371B 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 40132 0000371D 7509                    	jne	short no_query		; no
 40133 0000371F 58                      	pop	ax                      ; yes, so retrieve the original code
 40134                                  	;or	al,80h ; 03/01/2023
 40135 00003720 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 40136 00003722 EB0A                    	jmp	short gotcom0           ;
 40137                                  semicolon:
 40138 00003724 B030                    	mov	al,CONFIG_REM ; '0'
 40139 00003726 EB06                    	jmp	short gotcom0
 40140                                  no_query:
 40141                                  ;endif  ;MULTI_CONFIG
 40142                                  
 40143                                  	; 02/11/2022
 40144                                  	; 03/01/2023 - Retro DOS v4.2
 40145                                  	;push	ax
 40146                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 40147                                  
 40148 00003728 E82E0B                  	call	delim
 40149                                  no_delim:
 40150 0000372B 58                      	pop	ax
 40151 0000372C 75B9                    	jnz	short findcom
 40152                                  gotcom0:
 40153 0000372E 5F                      	pop	di
 40154 0000372F 5E                      	pop	si
 40155 00003730 59                      	pop	cx
 40156 00003731 EB10                    	jmp	short gotcom
 40157                                  nocom:
 40158 00003733 5F                      	pop	di
 40159 00003734 5E                      	pop	si
 40160 00003735 59                      	pop	cx
 40161 00003736 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 40162 00003738 AA                      	stosb				; save indicator char.
 40163                                  _skipline:
 40164 00003739 E86801                  	call	get2
 40165 0000373C 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 40166 0000373E 75F9                            jne     short _skipline
 40167                                  	;jmp	short end_commd_line	; handle next command line
 40168                                  	; 09/09/2023
 40169 00003740 E973FF                  	jmp	end_commd_line
 40170                                  gotcom:
 40171 00003743 AA                              stosb                           ; save indicator char in buffer
 40172                                  
 40173                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40174                                  
 40175                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40176                                  
 40177                                  ;ifdef	MULTI_CONFIG
 40178                                  
 40179                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 40180                                  ;   it screws up the direct comparisons below.
 40181                                  
 40182 00003744 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 40183                                  ;endif
 40184                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 40185                                  	; 03/01/2023
 40186                                  	; ds = cs
 40187 00003746 A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.
 40188                                  
 40189                                  ;ifdef	MULTI_CONFIG
 40190                                  
 40191                                  ;   There is no whitespace/delimiter between the "begin block" character
 40192                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 40193                                  ;   skipping code
 40194                                  
 40195 00003749 3C5B                    	cmp	al,CONFIG_BEGIN
 40196 0000374B 7455                    	je	short org31
 40197 0000374D 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 40198 0000374F 740F                    	je	short no_mapcase
 40199 00003751 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 40200 00003753 740B                    	je	short no_mapcase
 40201 00003755 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 40202 00003757 7407                    	je	short no_mapcase
 40203 00003759 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 40204 0000375B 7403                    	je	short no_mapcase
 40205 0000375D E8350B                  	call	mapcase			; map case of rest of line to UPPER
 40206                                  no_mapcase:
 40207                                  ;endif
 40208                                  	;; 02/11/2022
 40209                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 40210                                  	;; 03/01/2023
 40211                                  	;; ds = cs
 40212                                  	;mov	[cmd_indicator],al
 40213                                  org2:	
 40214 00003760 E84101                  	call    get2                    ; skip the command name until delimiter
 40215 00003763 3C0A                            cmp     al,lf 	    ; 0Ah
 40216 00003765 740F                    	je	short org21
 40217 00003767 3C0D                    	cmp	al,cr 	    ; 0Dh	
 40218 00003769 740B                    	je	short org21
 40219                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40220                                  	; 03/01/2023 - Retro DOS v4.2
 40221 0000376B 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 40222 0000376D 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 40223                                  
 40224 0000376F E8E70A                  	call	delim
 40225 00003772 75EC                            jnz	short org2
 40226 00003774 EB02                    	jmp	short org3
 40227                                  org21:					;if cr or lf then
 40228 00003776 4E                      	dec	si			; undo si, cx register
 40229 00003777 41                      	inc	cx			;  and continue
 40230                                  org3:	
 40231                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 40232                                  	;je	short get_cmt_token
 40233                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40234                                  	; 03/01/2023 - Retro DOS v4.2	
 40235                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40236                                  	;je	short org_file
 40237                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 40238                                  	;je	short org_file
 40239                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40240                                  	;je	short org_file
 40241                                  	; 02/11/2022
 40242                                  	; 03/01/2023 - Retro DOS v4.2
 40243                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40244                                  	;;je	short org_file
 40245                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 40246                                  	;je	short org_file
 40247                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 40248                                  	;je	short org_switch
 40249                                  
 40250                                  	; 03/01/2023
 40251                                  	; ds = cs
 40252                                  
 40253 00003778 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 40254 0000377D 745D                    	je	short get_cmt_token
 40255                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40256                                  	; 03/01/2023 - Retro DOS v4.2	
 40257 0000377F 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40258 00003784 7430                    	je	short org_file
 40259 00003786 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 40260 0000378B 7429                    	je	short org_file
 40261 0000378D 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40262 00003792 7422                    	je	short org_file
 40263                                  	; 02/11/2022
 40264                                  	; 03/01/2023 - Retro DOS v4.2
 40265                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40266                                  	;je	short org_file
 40267 00003794 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 40268 00003799 741B                    	je	short org_file
 40269 0000379B 803E[5203]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 40270 000037A0 7403                    	je	short org_switch
 40271                                  	
 40272                                  org31:
 40273 000037A2 E99500                  	jmp	org4
 40274                                  
 40275                                  org_switch:
 40276 000037A5 E81601                  	call	skip_comment
 40277 000037A8 7472                    	jz	short end_commd_line_brdg
 40278                                  
 40279 000037AA E8F700                  	call	get2
 40280 000037AD E8B10A                  	call	org_delim
 40281 000037B0 74F3                    	jz	short org_switch
 40282                                  
 40283 000037B2 AA                      	stosb
 40284 000037B3 E99300                  	jmp	org5
 40285                                  
 40286                                  org_file:			; get the filename and put 0 at end
 40287 000037B6 E80501                  	call	skip_comment
 40288 000037B9 7464                    	jz	short org_put_zero
 40289                                  
 40290 000037BB E8E600                  	call	get2		; not a comment
 40291 000037BE E8980A                  	call	delim
 40292 000037C1 74F3                    	jz	short org_file	; skip the possible delimiters
 40293                                  
 40294 000037C3 AA                      	stosb			; copy the first non delim char found in buffer
 40295                                  
 40296                                  org_copy_file:
 40297 000037C4 E8F700                  	call	skip_comment	; comment char in the filename?
 40298 000037C7 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 40299                                  
 40300 000037C9 E8D800                  	call	get2
 40301 000037CC 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 40302 000037CE 7457                    	je	short end_file_slash ; this will be the special case.
 40303                                  
 40304 000037D0 AA                      	stosb			; save the char. in buffer
 40305 000037D1 E8850A                  	call	delim
 40306 000037D4 7459                    	jz	short end_copy_file
 40307                                  
 40308 000037D6 3C20                    	cmp	al, ' '
 40309 000037D8 77EA                    	ja	short org_copy_file ; keep copying
 40310 000037DA EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 40311                                  
 40312                                  get_cmt_token:			; get the token. just max. 2 char.
 40313 000037DC E8C500                  	call	get2
 40314 000037DF 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 40315 000037E1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 40316 000037E3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 40317 000037E5 74F5                    	je	short get_cmt_token ;  character.)
 40318 000037E7 3C3D                    	cmp	al,'='		; = is special in this case.
 40319 000037E9 74F1                    	je	short get_cmt_token
 40320 000037EB 3C0D                    	cmp	al,cr
 40321 000037ED 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 40322 000037EF 3C0A                    	cmp	al,lf
 40323 000037F1 7422                    	je	short get_cmt_end
 40324                                  
 40325                                  	; 03/01/2023
 40326                                  	; ds = cs
 40327                                  	;mov	[cs:cmmt1],al	; store it
 40328                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 40329 000037F3 A2[5003]                	mov	[cmmt1],al	; store it
 40330 000037F6 C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 40331 000037FB E8A600                  	call	get2
 40332 000037FE 3C20                    	cmp	al,' ' ; 20h
 40333 00003800 7413                    	je	short get_cmt_end
 40334 00003802 3C09                    	cmp	al,tab ; 9
 40335 00003804 740F                    	je	short get_cmt_end
 40336 00003806 3C0D                    	cmp	al,cr  ; 0Dh
 40337 00003808 740B                    	je	short get_cmt_end
 40338 0000380A 3C0A                    	cmp	al,lf  ; 0Ah
 40339 0000380C 740E                    	je	short end_commd_line_brdg
 40340                                  
 40341                                  	;mov	[cs:cmmt2],al
 40342                                  	;inc	byte [cs:cmmt]
 40343                                  	; 03/01/2023
 40344 0000380E A2[5103]                	mov	[cmmt2],al
 40345 00003811 FE06[4F03]              	inc	byte [cmmt]
 40346                                  
 40347                                  get_cmt_end:
 40348 00003815 E88C00                  	call	get2
 40349 00003818 3C0A                    	cmp	al,lf
 40350 0000381A 75F9                    	jne	short get_cmt_end	; skip it.
 40351                                  end_commd_line_brdg: 
 40352 0000381C E997FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 40353                                  
 40354                                  org_put_zero:				; make the filename in front of
 40355 0000381F 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 40356 00003823 47                      	inc	di
 40357 00003824 E98FFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 40358                                  
 40359                                  end_file_slash: 			; al = "/" option char.
 40360 00003827 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 40361 0000382B 47                      	inc	di			; and
 40362 0000382C AA                      	stosb				; store "/" after that.
 40363 0000382D EB1A                    	jmp	short org5		; continue with the rest of the line
 40364                                  
 40365                                  end_copy_file:
 40366 0000382F 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 40367 00003834 3C0A                    	cmp	al,lf
 40368 00003836 74E4                    	je	short end_commd_line_brdg
 40369 00003838 EB0F                    	jmp	short org5
 40370                                  
 40371                                  org4:					; org4 skips all delimiters after the command name except for '/'
 40372 0000383A E88100                  	call	skip_comment
 40373 0000383D 74DD                    	jz	short end_commd_line_brdg
 40374                                  
 40375 0000383F E86200                  	call	get2
 40376 00003842 E81C0A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 40377 00003845 74F3                    	jz	short org4
 40378 00003847 EB08                    	jmp	short org51
 40379                                  
 40380                                  org5:					; rest of the line
 40381 00003849 E87200                  	call	skip_comment		; comment?
 40382 0000384C 74CE                    	jz	short end_commd_line_brdg
 40383 0000384E E85300                  	call	get2			; not a comment.
 40384                                  
 40385                                  org51:
 40386 00003851 AA                      	stosb				; copy the character
 40387 00003852 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 40388 00003854 743A                    	je	short at_quote
 40389 00003856 3C20                    	cmp	al,' '  ; 20h
 40390 00003858 77EF                    	ja	short org5
 40391                                  
 40392                                  	; 09/09/2023
 40393                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 40394                                  
 40395                                  					; M051 - Start
 40396                                  	; 03/01/2023
 40397                                  	; ds = cs
 40398 0000385A 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 40399                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 40400 0000385F 7514                    	jne	short not_dh		; N: 
 40401 00003861 3C0A                    	cmp	al,lf			; Q: is this line feed
 40402 00003863 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 40403 00003865 3C0D                    	cmp	al,cr			; Q: is this a cr
 40404 00003867 75E0                    	jne	short org5		; N: 
 40405 00003869 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 40406 0000386E AA                      	stosb				; put cr after blank
 40407 0000386F FE06[F134]              	inc	byte [insert_blank]
 40408                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 40409                                  					; inserted
 40410 00003873 EBD4                    	jmp	short org5
 40411                                  not_dh:					; M051 - End
 40412                                  
 40413 00003875 3C0A                    	cmp	al,lf			; line feed?
 40414 00003877 740F                    	je	short org1_brdg		; handles the next command line.
 40415 00003879 EBCE                    	jmp	short org5		; handles next char in this line.
 40416                                  
 40417                                  org_dhlf:				; M051 - Start
 40418                                  	; 03/01/2023
 40419                                  	; ds = cs
 40420 0000387B 803E[F134]01            	cmp	byte [insert_blank],1
 40421                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 40422 00003880 7406                    	je	short org1_brdg		; Y:
 40423 00003882 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 40424 00003887 AA                      	stosb				; put lf after blank
 40425                                  					; M051 - End
 40426                                  org1_brdg:
 40427 00003888 C606[F134]00            	mov	byte [insert_blank],0 
 40428                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 40429                                  					; M051: devicehigh
 40430 0000388D E93CFE                  	jmp	org1
 40431                                  
 40432                                  at_quote:
 40433 00003890 803E[4E03]00            	cmp	byte [com_level],0
 40434                                  	;cmp	byte [cs:com_level],0
 40435 00003895 7407                    	je	short up_level
 40436                                  	;mov	byte [cs:com_level],0	; reset it.
 40437 00003897 C606[4E03]00            	mov	byte [com_level],0
 40438 0000389C EBAB                    	jmp	short org5
 40439                                  
 40440                                  up_level:
 40441                                  	;inc	byte [cs:com_level]	; set it.
 40442 0000389E FE06[4E03]              	inc	byte [com_level]
 40443 000038A2 EBA5                    	jmp	short org5
 40444                                  
 40445                                  ;----------------------------------------------------------------------------
 40446                                  ;
 40447                                  ; procedure : get2
 40448                                  ;
 40449                                  ;----------------------------------------------------------------------------
 40450                                  
 40451                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40452                                  	; (SYSINIT:33FAh)
 40453                                  
 40454                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40455                                  	; (SYSINIT:4270h)
 40456                                  get2:
 40457 000038A4 E304                    	jcxz	noget
 40458                                  	;
 40459                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40460                                  	;;lods	byte ptr es:[si]
 40461                                  	; 12/12/2022
 40462 000038A6 26                      	es	
 40463 000038A7 AC                      	lodsb
 40464                                  	;mov	al, [es:si]
 40465                                  	;inc	si
 40466                                  	;
 40467 000038A8 49                      	dec	cx
 40468 000038A9 C3                      	retn
 40469                                  noget:
 40470 000038AA 59                      	pop	cx
 40471                                  	; 03/01/2023
 40472                                  	; ds = cs
 40473                                  	;mov	[cs:count],di ; 13/05/2019
 40474                                  	;mov	[cs:org_count],di
 40475 000038AB 893E[5403]              	mov	[count],di
 40476 000038AF 893E[5603]              	mov	[org_count],di
 40477 000038B3 31F6                    	xor	si,si
 40478                                  	;mov	[cs:chrptr],si
 40479 000038B5 8936[5803]              	mov	[chrptr],si
 40480                                  
 40481                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40482                                  
 40483                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40484                                  
 40485                                  ;ifndef MULTI_CONFIG
 40486                                  ;	retn
 40487                                  ;else
 40488                                  
 40489                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 40490                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 40491                                  ;   and the new boot menu stuff...
 40492                                  
 40493 000038B9 89F9                    	mov     cx,di
 40494 000038BB E9E300                  	jmp     menu_check
 40495                                  
 40496                                  ;endif
 40497                                  	; 02/11/2022
 40498                                  	; 03/01/2023 - Retro DOS v4.2
 40499                                  	;retn
 40500                                  
 40501                                  ;----------------------------------------------------------------------------
 40502                                  ;
 40503                                  ; procedure : skip_comment
 40504                                  ;
 40505                                  ;skip the commented string until lf, if current es:si-> a comment string.
 40506                                  ;in) es:si-> string
 40507                                  ;	 cx -> length.
 40508                                  ;out) zero flag not set if not found a comment string.
 40509                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 40510                                  ;	  the line feed character at this moment when return.
 40511                                  ;	  ax register destroyed.
 40512                                  ;	  if found, si, cx register adjusted accordingly.
 40513                                  ;
 40514                                  ;----------------------------------------------------------------------------
 40515                                  
 40516                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40517                                  	; (SYSINIT:428Dh)
 40518                                  
 40519                                  skip_comment:
 40520 000038BE E3EA                    	jcxz	noget		; get out of the organize routine.
 40521                                  
 40522                                  	; 03/01/2023
 40523                                  	; ds = cs	
 40524                                  
 40525 000038C0 803E[4E03]00            	cmp	byte [com_level],0
 40526                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 40527 000038C5 752C                    	jne	short no_commt	 ; (not inside quotations)
 40528                                  
 40529 000038C7 803E[4F03]01            	cmp	byte [cmmt],1
 40530                                  	;cmp	byte [cs:cmmt],1
 40531 000038CC 7225                    	jb	short no_commt
 40532                                  
 40533 000038CE 268A04                  	mov	al,[es:si]
 40534                                  	
 40535 000038D1 3806[5003]              	cmp	[cmmt1],al
 40536                                  	;cmp	[cs:cmmt1],al
 40537 000038D5 751C                    	jne	short no_commt
 40538                                  
 40539 000038D7 803E[4F03]02            	cmp	byte [cmmt],2
 40540                                  	;cmp	byte [cs:cmmt],2
 40541 000038DC 750A                    	jne	short skip_cmmt
 40542                                  
 40543 000038DE 268A4401                	mov	al,[es:si+1]
 40544                                  	
 40545 000038E2 3806[5103]              	cmp	[cmmt2],al
 40546                                  	;cmp	[cs:cmmt2],al
 40547 000038E6 750B                    	jne	short no_commt
 40548                                  skip_cmmt:
 40549 000038E8 E3C0                    	jcxz	noget		; get out of organize routine.
 40550 000038EA 268A04                  	mov	al,[es:si]
 40551 000038ED 46                      	inc	si
 40552 000038EE 49                      	dec	cx
 40553 000038EF 3C0A                    	cmp	al,lf		; line feed?
 40554 000038F1 75F5                    	jne	short skip_cmmt
 40555                                  no_commt:
 40556 000038F3 C3                      	retn
 40557                                  
 40558                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40559                                  ; (SYSINIT:42C8h)
 40560                                  
 40561                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40562                                  ;%if 0
 40563                                  
 40564                                  ;ifdef	MULTI_CONFIG
 40565                                  
 40566                                  ;----------------------------------------------------------------------------
 40567                                  ;
 40568                                  ;   kbd_read: wait for keystroke
 40569                                  ;
 40570                                  ;   INPUT
 40571                                  ;       DS == CS == sysinitseg
 40572                                  ;
 40573                                  ;   OUTPUT
 40574                                  ;       Carry SET to clean boot, CLEAR otherwise
 40575                                  ;
 40576                                  ;   OTHER REGS USED
 40577                                  ;       All
 40578                                  ;
 40579                                  ;   HISTORY
 40580                                  ;       Created 16-Nov-1992 by JeffPar
 40581                                  ;
 40582                                  ;----------------------------------------------------------------------------
 40583                                  
 40584                                  kbd_read:
 40585 000038F4 F606[5047]02                    test    byte [bDisableUI],2
 40586 000038F9 7520                            jnz     short kbd_nodelay
 40587                                  
 40588 000038FB 1E                              push    ds              ; the bios timer tick count is incremented
 40589 000038FC 29C0                            sub     ax,ax           ; 18.2 times per second;
 40590 000038FE 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 40591                                  	;mov	dx,[046Ch]	; get initial value
 40592                                  kbd_loop:
 40593 00003900 B401                            mov     ah,1            ;
 40594 00003902 CD16                            int     16h             ; peek the keyboard
 40595 00003904 7514                            jnz	short kbd_loopdone ; something's there, get out
 40596 00003906 B402                            mov     ah,2            ; peek the shift states
 40597 00003908 CD16                            int     16h             ;
 40598 0000390A A803                            test    al,03h          ; either right or left shift key bits set?
 40599 0000390C 750C                            jnz	short kbd_loopdone ; yes
 40600 0000390E A16C04                          mov     ax,[046Ch]	;
 40601                                  	;sub	ax,dx           ; get difference
 40602                                  	; 15/04/2019 - Retro DOS v4.0
 40603 00003911 2E2B06[8403]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 40604                                  
 40605 00003916 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 40606 00003918 72E6                            jb	short kbd_loop	; not yet
 40607                                  kbd_loopdone:
 40608 0000391A 1F                              pop     ds              ; delay complete!
 40609                                  kbd_nodelay:
 40610 0000391B 29DB                            sub     bx,bx           ; assume clean boot
 40611 0000391D B402                            mov     ah,2            ; peek the shift states
 40612 0000391F CD16                            int     16h             ;
 40613 00003921 A803                            test    al,03h          ; either right or left shift key bits set?
 40614 00003923 7407                            jz      short kbd_notshift ; no
 40615 00003925 43                              inc     bx              ; yes
 40616 00003926 43                              inc     bx
 40617                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 40618 00003927 800E[5447]04            	or	byte [bQueryOpt],4
 40619                                  kbd_notshift:                   ;
 40620 0000392C B401                            mov     ah,1            ; peek the keyboard
 40621 0000392E CD16                            int     16h             ;
 40622 00003930 743E                            jz	short kbd_test	; no key present
 40623 00003932 08C0                            or      al,al           ; is it a function key?
 40624 00003934 753A                            jnz	short kbd_test	; no
 40625                                  
 40626                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 40627 00003936 80FC62                          cmp     ah,62h          ; CTRL F5
 40628 00003939 7405                            je	short kbd_cfg_bypass
 40629                                  	
 40630 0000393B 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 40631 0000393E 750D                            jne	short kbd_notf5	; no
 40632                                  kbd_cfg_bypass:
 40633 00003940 BA[C24C]                        mov     dx,_$CleanMsg
 40634 00003943 E8DD0B                          call    print
 40635                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 40636 00003946 800E[5447]04            	or	byte [bQueryOpt],4 
 40637 0000394B EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 40638                                  kbd_notf5:
 40639                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 40640 0000394D 80FC65                          cmp     ah,65h          ; CTRL F8
 40641 00003950 7405                            je	short kbd_cfg_confirm
 40642                                  
 40643 00003952 80FC42                          cmp     ah,42h          ; F8 function key?
 40644 00003955 7523                            jne	short kbd_exit	; no
 40645                                  kbd_cfg_confirm:
 40646 00003957 BA[004D]                        mov     dx,_$InterMsg
 40647 0000395A E8C60B                          call    print           ;
 40648 0000395D B301                            mov     bl,1            ; yes, interactive-boot option enabled
 40649 0000395F 881E[5447]                      mov     [bQueryOpt],bl  ; change default setting
 40650                                  kbd_eat:                        ;
 40651 00003963 B400                            mov     ah,0            ;
 40652 00003965 CD16                            int     16h             ; eat the key we assumed was a signal
 40653 00003967 C606[5A47]FF                    mov	byte [secElapsed],-1
 40654 0000396C 09DB                            or      bx,bx           ;
 40655 0000396E 7405                            jz	short kbd_clean	;
 40656                                  kbd_test:                       ;
 40657 00003970 80FB02                          cmp     bl,2            ;
 40658 00003973 7205                            jb	short kbd_exit	;
 40659                                  kbd_clean:                      ;
 40660 00003975 E86E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 40661 00003978 F9                              stc                     ; set carry to indicate abort
 40662 00003979 C3                              retn			;
 40663                                  kbd_exit:                       ;
 40664 0000397A F8                              clc                     ; clear carry to indicate success
 40665 0000397B C3                              retn			;
 40666                                  
 40667                                  ;----------------------------------------------------------------------------
 40668                                  ;
 40669                                  ;   set_numlock: set numlock LED
 40670                                  ;
 40671                                  ;   INPUT
 40672                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 40673                                  ;
 40674                                  ;   OUTPUT
 40675                                  ;       None
 40676                                  ;
 40677                                  ;   OTHER REGS USED
 40678                                  ;       None
 40679                                  ;
 40680                                  ;   HISTORY
 40681                                  ;       Created 16-Nov-1992 by JeffPar
 40682                                  ;
 40683                                  ;----------------------------------------------------------------------------
 40684                                  
 40685                                  	; 04/01/2023 - Retro DOS v4.2
 40686                                  
 40687                                  set_numlock:
 40688                                          ; 04/01/2023
 40689                                  	;push	ax
 40690 0000397C 1E                              push    ds
 40691 0000397D 29C0                            sub     ax,ax
 40692 0000397F 8ED8                            mov     ds,ax
 40693 00003981 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 40694 00003984 2E3B06[8A4C]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 40695 00003989 7507                            jne	short not_off	; no
 40696 0000398B 80261704DF                      and     byte [0417h],~20h ; 0DFh
 40697 00003990 EB0D                            jmp     short set_done
 40698                                  not_off:
 40699 00003992 2E3B06[884C]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 40700 00003997 F9                              stc
 40701 00003998 7505                            jne	short set_done	; no
 40702 0000399A 800E170420                      or      byte [0417h],20h
 40703                                  set_done:
 40704 0000399F 1F                              pop     ds
 40705                                  	; 04/01/2023
 40706                                  	;pop	ax
 40707 000039A0 C3                              retn
 40708                                  
 40709                                  ; 16/04/2019 - Retro DOS v4.0
 40710                                  
 40711                                  ;----------------------------------------------------------------------------
 40712                                  ;
 40713                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 40714                                  ;
 40715                                  ;   INPUT
 40716                                  ;       CX == "organized" config.sys memory image length
 40717                                  ;    ES:SI -> "organized" config.sys memory image
 40718                                  ;       DS == CS == sysinitseg
 40719                                  ;
 40720                                  ;   OUTPUT
 40721                                  ;       Same as above; the idea is that menu_check simply transforms
 40722                                  ;       a block-structured config.sys image into a conventional image,
 40723                                  ;       based on the user's block selection and any other boot-time options
 40724                                  ;       the user may have employed...
 40725                                  ;
 40726                                  ;   OTHER REGS USED
 40727                                  ;       All
 40728                                  ;
 40729                                  ;   NOTES
 40730                                  ;       [count] and [org_count] are set to the new config.sys image length
 40731                                  ;
 40732                                  ;   HISTORY
 40733                                  ;       Created 16-Mar-1992 by JeffPar
 40734                                  ;
 40735                                  ;----------------------------------------------------------------------------
 40736                                  
 40737                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40738                                  	; (SYSINIT:4378h)
 40739                                  
 40740                                  menu_check:
 40741                                  
 40742                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 40743                                  ;   disable clean/interactive boot options
 40744                                  
 40745 000039A1 51                              push    cx              ;
 40746 000039A2 56                              push    si              ;
 40747 000039A3 29DB                            sub     bx,bx           ; remains ZERO until first block
 40748                                  swchk_loop:                     ;
 40749 000039A5 E83507                          call    get_char        ; get first char of current line
 40750 000039A8 724C                            jc	short swchk_end	; hit eof
 40751 000039AA 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 40752 000039AC 7503                            jne	short swchk_next1 ;
 40753 000039AE 43                              inc     bx              ; remember that we've seen a block
 40754 000039AF EB40                            jmp     short swchk_nextline
 40755                                  swchk_next1:                    ;
 40756 000039B1 3C4E                            cmp     al,CONFIG_NUMLOCK
 40757 000039B3 750E                            jne	short swchk_next2 ;
 40758 000039B5 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 40759 000039B7 7538                            jnz	short swchk_nextline ; before the first block
 40760 000039B9 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 40761 000039BC 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 40762 000039C1 EB2E                            jmp     short swchk_nextline
 40763                                  swchk_next2:                    ;
 40764 000039C3 3C31                            cmp     al,CONFIG_SWITCHES
 40765 000039C5 752A                            jne	short swchk_nextline ; this line ain't it
 40766                                  swchk_scan:                     ;
 40767 000039C7 E81307                          call    get_char        ; look for /N or /F
 40768                                  swchk_scan1:                    ;
 40769 000039CA 3C0A                            cmp     al,LF           ; end of line?
 40770 000039CC 7423                            je	short swchk_nextline ; yes
 40771 000039CE 3C2F                            cmp     al,'/'          ; switch-char?
 40772 000039D0 75F5                            jne	short swchk_scan ; no
 40773 000039D2 E80807                          call    get_char        ;
 40774 000039D5 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 40775 000039D7 3A06[DB1E]                      cmp     al,[swit_n+1]	; 'N'
 40776 000039DB 7507                            jne	short swchk_scan2 ; no
 40777 000039DD 800E[5047]01                    or      byte [bDisableUI],1
 40778 000039E2 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 40779                                  swchk_scan2:                    ;
 40780 000039E4 3A06[E71E]                      cmp     al,[swit_f+1]	; 'F'
 40781 000039E8 75E0                            jne	short swchk_scan1 ; no
 40782 000039EA 800E[5047]02                    or      byte [bDisableUI],2
 40783 000039EF EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 40784                                  swchk_nextline:                 ;
 40785 000039F1 E8C306                          call    skip_opt_line   ;
 40786 000039F4 EBAF                            jmp     short swchk_loop ;
 40787                                  swchk_end:                      ;
 40788 000039F6 5E                              pop     si              ;
 40789 000039F7 59                              pop     cx              ;
 40790                                  
 40791                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 40792                                  ;   the DisableUI flag is still clear
 40793                                  
 40794 000039F8 F606[5047]01                    test    byte [bDisableUI],1
 40795 000039FD 7508                            jnz	short menu_search
 40796                                  ;
 40797                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 40798                                  ;   there is anything at all in the keyboard buffer
 40799                                  ;
 40800 000039FF E8F2FE                          call    kbd_read
 40801 00003A02 7303                            jnc	short menu_search
 40802 00003A04 E9EE01                          jmp	menu_abort
 40803                                  
 40804                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 40805                                  
 40806                                  menu_search:
 40807 00003A07 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 40808 00003A09 BF[9547]                        mov     di,szMenu	;
 40809 00003A0C E80304                          call    find_block      ; find the MENU block
 40810 00003A0F 7337                            jnc	short menu_found ;
 40811 00003A11 C606[8D47]00                    mov     byte [szBoot],0
 40812 00003A16 E90C02                          jmp	no_selection ; not found
 40813                                  
 40814                                  ;   Process the requested menu color(s)
 40815                                  
 40816                                  menu_color:
 40817 00003A19 51                      	push	cx              ;
 40818 00003A1A 52                      	push	dx              ;
 40819                                  	;;mov	dx,0007h        ; default color setting
 40820                                  	; 10/09/2023
 40821                                  	;mov	dl,7 ; !*!
 40822 00003A1B E89E06                  	call	get_number	; get first number
 40823 00003A1E 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 40824 00003A21 88DD                    	mov	ch,bl           ; save it in CH
 40825                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 40826                                  	; (high nibble of dl is 0)
 40827                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 40828                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 40829 00003A23 88DA                    	mov	dl,bl	; 14/08/2023
 40830 00003A25 E83108                  	call	delim           ; did we hit a delimiter
 40831 00003A28 750E                    	jne	short check_color ; no, all done
 40832 00003A2A E88F06                  	call	get_number	; get next number
 40833 00003A2D 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 40834 00003A30 88DE                    	mov	dh,bl           ; save it in DH
 40835                                  	; 10/09/2023
 40836                                  	;and	dl,0Fh	; !**!	;
 40837 00003A32 B104                    	mov	cl,4            ;
 40838 00003A34 D2E3                    	shl	bl,cl           ;
 40839 00003A36 08DA                    	or	dl,bl           ;
 40840                                  check_color:
 40841 00003A38 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 40842 00003A3A 7503                    	jne	short set_color	; no
 40843 00003A3C 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 40844                                  set_color:
 40845 00003A3F 8816[4B47]              	mov	[bMenuColor],dl ;
 40846 00003A43 5A                      	pop	dx              ;
 40847 00003A44 59                      	pop	cx              ;
 40848 00003A45 E9A900                  	jmp	menu_nextitem
 40849                                  
 40850                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 40851                                  ;   above is there simply to alleviate short jump problems)
 40852                                  
 40853                                  menu_found:
 40854 00003A48 C606[5547]01                    mov     byte [bDefBlock],1
 40855                                          ;mov	word [offDefBlock],0
 40856 00003A4D C606[5947]FF                    mov     byte [secTimeOut],-1
 40857 00003A52 8026[5447]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 40858                                  	; 10/09/2023
 40859 00003A57 29D2                    	sub	dx,dx
 40860 00003A59 8916[5747]              	mov	[offDefBlock],dx ; 0
 40861                                  
 40862 00003A5D E85706                          call    skip_opt_line   ; skip to next line
 40863                                  	; 10/09/2023
 40864                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 40865                                  
 40866                                  ;   Process the menu block now
 40867                                  
 40868                                  menu_process:
 40869 00003A60 E87A06                          call    get_char        ; get first char of current line
 40870 00003A63 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 40871 00003A65 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 40872 00003A67 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 40873 00003A69 7428                            je	short to_menu_getdefault
 40874 00003A6B 3C4F                            cmp     al,CONFIG_SUBMENU
 40875 00003A6D 744D                            je	short menu_item	; go process sub-menu
 40876 00003A6F 3C45                            cmp     al,CONFIG_MENUITEM
 40877 00003A71 7449                            je	short menu_item	; go process menu item
 40878 00003A73 3C41                            cmp     al,CONFIG_MENUDEFAULT
 40879 00003A75 741E                            je	short menu_default ; go process menu default
 40880 00003A77 3C52                            cmp     al,CONFIG_MENUCOLOR
 40881 00003A79 749E                            je	short menu_color ; go process menu color
 40882 00003A7B 3C4E                            cmp     al,CONFIG_NUMLOCK
 40883 00003A7D 740F                            je	short menu_numlock ;
 40884 00003A7F 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 40885 00003A81 746E                            je	short menu_nextitem ;
 40886 00003A83 E8C307                          call    any_delim       ; allow blank lines and such
 40887 00003A86 7469                            je	short menu_nextitem ;
 40888 00003A88 F9                              stc                     ;
 40889 00003A89 E82607                          call    print_error     ; non-MENU command!
 40890 00003A8C EB63                            jmp     short menu_nextitem
 40891                                  menu_numlock:
 40892 00003A8E E8EBFE                          call    set_numlock
 40893 00003A91 EB5E                            jmp     short menu_nextitem
 40894                                  to_menu_getdefault:
 40895 00003A93 EB62                            jmp     short menu_getdefault
 40896                                  
 40897                                  ;   Save the offset of the default block name, we'll need it later
 40898                                  
 40899                                  menu_default:
 40900 00003A95 8936[5747]                      mov     [offDefBlock],si; save address of default block name
 40901 00003A99 803E[5A47]00                    cmp     byte [secElapsed],0
 40902 00003A9E 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 40903 00003AA0 E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 40904 00003AA3 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 40905 00003AA5 E8FB05                          call    skip_delim      ; something is typed
 40906 00003AA8 7247                            jc	short menu_nextitem ;
 40907 00003AAA 89DE                            mov     si,bx           ;
 40908 00003AAC E80D06                          call    get_number      ; get number (of seconds for timeout)
 40909 00003AAF 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 40910                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 40911 00003AB2 7602                            jna	short timeout_ok ; 01/08/2023
 40912 00003AB4 B35A                    	mov     bl,90           ;  display function can handle)
 40913                                  timeout_ok:                    ;
 40914 00003AB6 881E[5947]                      mov     [secTimeOut],bl ;
 40915                                  timeout_skip:
 40916 00003ABA EB35                            jmp     short menu_nextitem
 40917                                  
 40918                                  ;   Verify that this is a valid menu item by searching for the named block
 40919                                  
 40920                                  menu_item:
 40921                                  	;cmp	dl,9	; 04/01/2023
 40922 00003ABC 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 40923 00003ABF 7330                            jae	short menu_nextitem ;
 40924 00003AC1 89F7                            mov     di,si           ; DS:DI -> block name to search for
 40925 00003AC3 E83303                          call    srch_block      ;
 40926 00003AC6 7406                            je	short menu_itemfound ;
 40927 00003AC8 F9                              stc                     ;
 40928 00003AC9 E8E606                          call    print_error     ; print error and pause
 40929 00003ACC EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 40930                                  
 40931                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 40932                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 40933                                  ;   and CX are unmodified
 40934                                  
 40935                                  menu_itemfound:
 40936 00003ACE 42                              inc     dx              ; otherwise, increment total block count
 40937 00003ACF 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 40938 00003AD1 8887[5B47]                      mov	[abBlockType+bx],al
 40939 00003AD5 01DB                            add     bx,bx           ; of recorded block names and descriptions
 40940                                  
 40941                                  ;   There should be a description immediately following the block name on
 40942                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 40943                                  ;   description...
 40944                                  
 40945 00003AD7 89B7[6547]                      mov     [aoffBlockName+bx],si
 40946 00003ADB 89B7[7947]                      mov     [aoffBlockDesc+bx],si
 40947 00003ADF 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 40948 00003AE1 E8A905                          call    skip_token      ;
 40949 00003AE4 720B                            jc	short menu_nextitem ; hit eol/eof
 40950 00003AE6 E8BA05                          call    skip_delim      ;
 40951 00003AE9 7206                            jc	short menu_nextitem ; hit eol/eof
 40952 00003AEB 87FB                            xchg    bx,di           ;
 40953 00003AED 89BF[7947]                      mov     [aoffBlockDesc+bx],di
 40954                                  
 40955                                  menu_nextitem:
 40956 00003AF1 E8C305                          call    skip_opt_line   ;
 40957 00003AF4 E969FF                          jmp     menu_process    ; go back for more lines
 40958                                  
 40959                                  ;   Display menu items now, after determining which one is default
 40960                                  
 40961                                  menu_getdefault:
 40962 00003AF7 08D2                            or      dl,dl           ; where there any valid blocks at all?
 40963 00003AF9 7505                            jnz	short menu_valid ; yes
 40964 00003AFB 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 40965 00003AFD E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 40966                                  menu_valid:
 40967 00003B00 29DB                            sub     bx,bx           ;
 40968 00003B02 8816[5647]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 40969 00003B06 8B3E[5747]                      mov     di,[offDefBlock];
 40970 00003B0A 09FF                            or      di,di           ; does a default block exist?
 40971 00003B0C 741C                            jz	short menu_nodefault ; no
 40972 00003B0E 43                              inc     bx              ; yes, walk name table, looking for default
 40973                                  menu_chkdefault:
 40974 00003B0F 53                              push    bx              ;
 40975 00003B10 01DB                            add     bx,bx           ;
 40976 00003B12 8BB7[6547]                      mov     si,[aoffBlockName+bx]
 40977 00003B16 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 40978 00003B19 1E                              push    ds              ;
 40979 00003B1A 06                              push    es              ;
 40980 00003B1B 1F                              pop     ds              ;
 40981 00003B1C E81A03                          call    comp_names      ; is this block the same as the default?
 40982 00003B1F 1F                              pop     ds              ;
 40983 00003B20 5B                              pop     bx              ;
 40984 00003B21 7409                            je	short menu_setdefault ; yes
 40985 00003B23 43                              inc     bx              ;
 40986 00003B24 3A1E[5647]                      cmp     bl,[bMaxBlock]  ; all done searching?
 40987 00003B28 76E5                            jbe	short menu_chkdefault ; not yet
 40988                                  menu_nodefault:
 40989 00003B2A B301                            mov     bl,1            ; if no default, force default to #1
 40990                                  menu_setdefault:
 40991 00003B2C 881E[5547]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 40992                                  
 40993                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 40994                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 40995                                  ;   supposed to skip menu display and run with the specified default block;
 40996                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 40997                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 40998                                  ;   with no timeout)
 40999                                  
 41000 00003B30 803E[5947]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 41001 00003B35 750A                            jne	short menu_display ; no
 41002 00003B37 F606[5447]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 41003 00003B3C 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 41004 00003B3E E9C700                          jmp     not_topmenu	;
 41005                                  
 41006                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 41007                                  
 41008                                  menu_display:
 41009 00003B41 B40F                            mov     ah,0Fh          ; get current video mode
 41010 00003B43 CD10                            int     10h             ;
 41011 00003B45 B400                            mov     ah,00h          ; just re-select that mode
 41012 00003B47 CD10                            int     10h             ;
 41013 00003B49 06                              push    es              ;
 41014 00003B4A B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 41015 00003B4D 8EC0                            mov     es,ax           ; and save the current (default) video page
 41016 00003B4F 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 41017 00003B53 A3[5247]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 41018 00003B56 26A06200                        mov     al,[es:0062h]   ;
 41019 00003B5A A2[5147]                        mov     [bCRTPage],al   ;
 41020 00003B5D A1[4C47]                        mov     ax,[bMenuPage]	; select new page for menu
 41021 00003B60 CD10                            int     10h             ;
 41022 00003B62 B80006                          mov     ax,0600h        ; clear entire screen
 41023 00003B65 8A3E[4B47]                      mov     bh,[bMenuColor] ; using this color
 41024 00003B69 29C9                            sub     cx,cx           ; upper left row/col
 41025                                          ;mov	dl,[es:CRT_Cols] 
 41026 00003B6B 268A164A00                      mov	dl,[es:4Ah]
 41027 00003B70 FECA                    	dec     dl              ;
 41028                                          ;mov	dh,[es:CRT_Rows];
 41029 00003B72 268A368400                      mov	dh,[es:84h]
 41030 00003B77 08F6                    	or      dh,dh           ; # of rows valid?
 41031 00003B79 7504                            jnz	short menu_clear ; hopefully
 41032 00003B7B 8A36[4F47]                      mov     dh,[bLastRow]   ; no, use a default
 41033                                  menu_clear:
 41034 00003B7F CD10                            int     10h             ; clear the screen using the req. attribute
 41035 00003B81 07                              pop     es              ;
 41036 00003B82 8836[4F47]                      mov     [bLastRow],dh   ; save DH
 41037 00003B86 BA[3D4D]                        mov     dx,_$MenuHeader
 41038 00003B89 E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 41039                                  
 41040 00003B8C F606[5047]01                    test    byte [bDisableUI],1
 41041 00003B91 751F                            jnz     short menu_nostatus
 41042 00003B93 8A3E[4C47]                      mov     bh,[bMenuPage]  ;
 41043 00003B97 8A36[4F47]                      mov     dh,[bLastRow]   ; restore DH
 41044 00003B9B B200                            mov     dl,0            ; print the status line on row DH, col 0,
 41045 00003B9D B402                            mov     ah,02h          ; now that we can trash the cursor position
 41046 00003B9F CD10                            int     10h             ;
 41047 00003BA1 BA[894D]                        mov     dx,_$StatusLine
 41048 00003BA4 E87C09                          call    print           ;
 41049 00003BA7 B403                            mov     ah,3            ; get cursor position
 41050 00003BA9 CD10                            int     10h             ;
 41051 00003BAB 80EA02                          sub     dl,2            ;
 41052 00003BAE 8816[4E47]                      mov     [bLastCol],dl   ; save column where status char will go
 41053                                  
 41054                                  menu_nostatus:
 41055 00003BB2 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 41056                                  menu_disploop:
 41057 00003BB5 E8B002                          call    print_item	; print item #BL
 41058 00003BB8 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 41059 00003BB9 3A1E[5647]                      cmp     bl,[bMaxBlock]  ; all done?
 41060 00003BBD 76F6                            jbe	short menu_disploop ; not yet
 41061                                  
 41062                                  ;   Set cursor position to just below the menu items
 41063                                  
 41064 00003BBF B200                            mov     dl,0            ; select column
 41065 00003BC1 88DE                            mov     dh,bl           ;
 41066 00003BC3 80C604                          add     dh,4            ; select row below menu
 41067 00003BC6 8A3E[4C47]                      mov     bh,[bMenuPage]  ;
 41068 00003BCA B402                            mov     ah,02h          ; set cursor position beneath the block list
 41069 00003BCC CD10                            int     10h             ;
 41070                                  
 41071 00003BCE BA[764D]                        mov     dx,_$MenuPrmpt
 41072 00003BD1 E84F09                          call    print           ;
 41073 00003BD4 E82903                          call    select_item     ; make a selection, return # in BX
 41074 00003BD7 BA[364B]                        mov     dx,crlfm	
 41075 00003BDA E84609                          call    print           ;
 41076 00003BDD FF36[5047]                      push    word [bDisableUI]
 41077 00003BE1 800E[5047]01                    or      byte [bDisableUI],1
 41078 00003BE6 E86704                          call    show_status     ; clear the status line now
 41079 00003BE9 8F06[5047]                      pop     word [bDisableUI]
 41080                                  
 41081                                  ;   Now begins the "re-organization" process...
 41082                                  
 41083                                  menu_autoselect:
 41084 00003BED 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 41085 00003BF0 7508                            jne	short normal_boot ; no
 41086 00003BF2 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 41087                                  menu_abort:
 41088 00003BF5 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 41089 00003BF7 E9E400                          jmp	menu_exit	;
 41090                                  
 41091                                  normal_boot:
 41092 00003BFA 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 41093 00003BFD 7509                            jne	short not_topmenu ; no
 41094 00003BFF 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 41095 00003C03 29F6                            sub     si,si           ;
 41096 00003C05 E9FFFD                          jmp     menu_search
 41097                                  
 41098                                  not_topmenu:
 41099 00003C08 80BF[5B47]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 41100 00003C0D 7510                            jne	short not_submenu
 41101 00003C0F 01DB                            add     bx,bx           ;
 41102 00003C11 8BBF[6547]                      mov     di,[aoffBlockName+bx]
 41103 00003C15 E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 41104 00003C18 89FE                            mov     si,di           ;
 41105 00003C1A 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 41106 00003C1C E929FE                          jmp     menu_found
 41107                                  
 41108                                  not_submenu:
 41109 00003C1F 01DB                            add     bx,bx           ; get BX -> name of selected block
 41110 00003C21 8B9F[6547]                      mov     bx,[aoffBlockName+bx]
 41111                                  
 41112                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 41113                                  ;   the offset relative to ES of the block name to be processed (along with
 41114                                  ;   all the "common" lines of course)
 41115                                  
 41116                                  no_selection:
 41117 00003C25 891E[5747]                      mov     [offDefBlock],bx; save selection
 41118 00003C29 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 41119 00003C2D 29F6                            sub     si,si           ;
 41120 00003C2F 1E                              push    ds              ;
 41121 00003C30 8E1E[DA14]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 41122 00003C34 29FF                            sub     di,di           ;
 41123                                  
 41124                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 41125                                  ;
 41126                                  ;   Work our way through the config.sys image again, this time copying
 41127                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 41128                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 41129                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 41130                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 41131                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 41132                                  ;
 41133                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 41134                                  ;   stack we're running on, then we should check it inside copy_block
 41135                                  
 41136                                  copyblock_loop:
 41137 00003C36 53                              push    bx              ; save selected block name
 41138 00003C37 E82F01                          call    copy_block      ; process (named or common) block
 41139 00003C3A 5B                              pop     bx              ;
 41140 00003C3B 7232                            jc	short move_config ; hit eof
 41141                                  
 41142                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 41143                                  
 41144                                  copyblock_begin:
 41145                                  
 41146                                  ; 10/09/2023
 41147                                  %if 0
 41148                                          push    ax              ;
 41149                                          push    cx              ;
 41150                                          push    si              ;
 41151                                          push    di              ; always do "common" blocks
 41152                                          mov     di,szCommon
 41153                                          push    ds              ;
 41154                                          push    cs              ;
 41155                                          pop     ds              ;
 41156                                          call    comp_names      ;
 41157                                          pop     ds              ;
 41158                                          pop     di              ;
 41159                                          pop     si              ;
 41160                                          pop     cx              ;
 41161                                          pop     ax              ;
 41162                                          je	short copyblock_check
 41163                                  %endif
 41164                                  	; 10/09/2023
 41165 00003C3D 57                      	push	di
 41166 00003C3E BF[9A47]                	mov	di,szCommon	; always do "common" blocks
 41167 00003C41 E81602                  	call	comp_names_x	; (comp_names_safe)
 41168 00003C44 5F                      	pop	di
 41169 00003C45 740F                    	je	short copyblock_check
 41170                                  
 41171 00003C47 09DB                            or      bx,bx           ; is there a block name to check?
 41172 00003C49 7414                            jz	short copyblock_skip ; no
 41173 00003C4B 57                              push    di              ;
 41174 00003C4C 89DF                            mov     di,bx           ; check block against given block name
 41175 00003C4E 1E                              push    ds              ;
 41176 00003C4F 06                              push    es              ;
 41177 00003C50 1F                              pop     ds              ;
 41178 00003C51 E8E501                          call    comp_names      ; is this the block we really want to do?
 41179 00003C54 1F                              pop     ds              ;
 41180 00003C55 5F                              pop     di              ;
 41181                                  copyblock_check:
 41182 00003C56 7217                            jc	short move_config ; hit eof
 41183 00003C58 7505                            jne	short copyblock_skip ;
 41184 00003C5A E85A04                          call    skip_opt_line   ;
 41185 00003C5D EBD7                            jmp	short copyblock_loop
 41186                                  
 41187                                  copyblock_skip:                 ;
 41188 00003C5F E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 41189 00003C62 E87804                          call    get_char        ;
 41190 00003C65 7208                            jc	short move_config ; hit eof
 41191 00003C67 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41192 00003C69 3C5B                            cmp     al,CONFIG_BEGIN ;
 41193 00003C6B 74D0                            je	short copyblock_begin
 41194 00003C6D EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 41195                                  ;
 41196                                  ;   To create as little risk to the rest of SysInit as little as possible,
 41197                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 41198                                  ;   copy the new config.sys image to "confbot"
 41199                                  ;
 41200                                  move_config:
 41201 00003C6F 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 41202 00003C71 51                              push    cx              ;
 41203                                  ;
 41204                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 41205                                  ;   since the configuration name only currently exists in the "confbot" area
 41206                                  ;
 41207                                   	;mov	cx,7
 41208 00003C72 B90700                  	mov     cx,szMenu-szBoot-1
 41209 00003C75 BE[8D47]                        mov     si,szBoot	; first copy the CONFIG= part
 41210 00003C78 47                              inc     di              ; skip a byte, in case absolutely nothing
 41211                                                                  ; was copied to the workspace, because we always
 41212                                                                  ; zero the first byte of the workspace (below)
 41213                                  copy_boot: 
 41214                                  	;lods    byte ptr cs:[si];
 41215 00003C79 2E                              cs
 41216 00003C7A AC                      	lodsb
 41217 00003C7B 8805                    	mov     [di],al         ;
 41218 00003C7D 47                              inc     di              ;
 41219 00003C7E E2F9                            loop    copy_boot       ;
 41220                                  
 41221 00003C80 06                              push    es              ; then copy the configuration name
 41222                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 41223                                  	; 04/01/2023
 41224 00003C81 B179                    	mov	cl,128-7
 41225 00003C83 2E8B36[5747]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 41226 00003C88 09F6                            or      si,si           ; valid?
 41227 00003C8A 7505                            jnz	short l1	; yes
 41228 00003C8C 0E                              push    cs              ;
 41229 00003C8D 07                              pop     es              ;
 41230 00003C8E BE[9A47]                        mov     si,szCommon
 41231 00003C91 268A04                  l1:     mov     al,[es:si]      ;
 41232 00003C94 E8B205                          call    any_delim       ;
 41233 00003C97 7406                            je	short l2	;
 41234 00003C99 8805                            mov     [di],al         ;
 41235 00003C9B 46                              inc     si              ;
 41236 00003C9C 47                              inc     di              ;
 41237 00003C9D E2F2                            loop    l1              ;
 41238 00003C9F C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 41239 00003CA2 07                              pop     es              ;
 41240                                  
 41241                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 41242                                  
 41243 00003CA3 29FF                            sub     di,di           ;
 41244 00003CA5 2E893E[D814]                    mov     [cs:config_envlen],di
 41245 00003CAA 29F6                            sub     si,si           ;
 41246 00003CAC 59                              pop     cx              ; recover the size of "config_wrkseg"
 41247                                  
 41248 00003CAD 51                              push    cx              ;
 41249 00003CAE F3A4                            rep     movsb           ; moved!
 41250 00003CB0 59                              pop     cx              ;
 41251 00003CB1 8CD8                            mov     ax,ds           ;
 41252 00003CB3 1F                              pop     ds              ;
 41253                                  
 41254                                  ;   Now that the config_wrkseg is available once again, we shall
 41255                                  ;   use it to create an environment. The first thing to go in will be
 41256                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 41257                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 41258                                  ;   is empty.
 41259                                  
 41260 00003CB4 06                              push    es              ;
 41261 00003CB5 8EC0                            mov     es,ax           ;
 41262 00003CB7 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 41263 00003CB8 26C606000000                    mov     byte [es:0],0	;empty the environment block
 41264 00003CBE E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 41265 00003CC1 07                              pop     es
 41266                                  
 41267                                  ;   Before returning, restore the default video page setting but do NOT
 41268                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 41269                                  ;   displayed on a different page, then it's because we don't want to see
 41270                                  ;   all the device driver/TSR goop (which goes to the default page)
 41271                                  
 41272                                  menu_done:
 41273 00003CC2 803E[4C47]00                    cmp     byte [bMenuPage],0
 41274 00003CC7 7415                            je	short menu_exit	;
 41275 00003CC9 06                              push    es              ;
 41276 00003CCA B84000                          mov     ax,40h          ;
 41277 00003CCD 8EC0                            mov     es,ax           ;
 41278 00003CCF A1[5247]                        mov     ax,[wCRTStart]  ;
 41279 00003CD2 26A34E00                        mov     [es:004Eh],ax   ;
 41280 00003CD6 A0[5147]                        mov     al,[bCRTPage]   ;
 41281 00003CD9 26A26200                        mov     [es:0062h],al   ;
 41282 00003CDD 07                              pop     es              ;
 41283                                  menu_exit:
 41284 00003CDE 890E[5403]                      mov     [count],cx      ; set new counts
 41285 00003CE2 890E[5603]                      mov     [org_count],cx  ;
 41286                                          ; 10/09/2023 (*) - Erdogan Tan
 41287                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 41288                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 41289                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 41290 00003CE6 C3                      	retn
 41291                                  
 41292                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 41293                                  ;	position (then 'retn' just after it)
 41294                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 41295                                  
 41296                                  ;----------------------------------------------------------------------------
 41297                                  ;
 41298                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 41299                                  ;
 41300                                  ;   INPUT
 41301                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 41302                                  ;
 41303                                  ;   OUTPUT
 41304                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 41305                                  ;       carry set if error (eg, missing =); clear otherwise
 41306                                  ;
 41307                                  ;   OTHER REGS USED
 41308                                  ;       None
 41309                                  ;
 41310                                  ;   NOTES
 41311                                  ;       None
 41312                                  ;
 41313                                  ;   HISTORY
 41314                                  ;       Created 29-Mar-1992 by JeffPar
 41315                                  ;
 41316                                  ;----------------------------------------------------------------------------
 41317                                  
 41318                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41319                                  	; (SYSINIT:46D4h)
 41320                                  
 41321                                  copy_envvar:
 41322 00003CE7 51                              push    cx              ;
 41323 00003CE8 56                              push    si              ;
 41324 00003CE9 1E                              push    ds              ;
 41325 00003CEA 06                              push    es              ;
 41326 00003CEB 06                              push    es              ;
 41327 00003CEC 8E06[DA14]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 41328 00003CF0 1F                              pop     ds                 ; DS:SI to point to envvar
 41329                                  
 41330                                  ;   Have to calculate the length of the variable name (and if we hit
 41331                                  ;   the end of the line before we hit '=', then it's curtains for this
 41332                                  ;   config.sys line)
 41333                                  ;
 41334                                  ;   The check for NULL is important because copy_envvar is also used to copy
 41335                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 41336                                  ;   menu block existed (in order to prevent the creation of an environment)
 41337                                  
 41338 00003CF1 29C9                            sub     cx,cx           ;
 41339                                  copy_varlen:                    ;
 41340 00003CF3 AC                              lodsb                   ;
 41341 00003CF4 08C0                            or      al,al           ; NULL?
 41342                                          ;stc	; 10/09/2023 (x)
 41343 00003CF6 746B                            jz	short copy_envexit ; yes, abort
 41344 00003CF8 3C0D                            cmp     al,cr           ;
 41345                                          ;stc	; 10/09/2023 (x)
 41346 00003CFA 7467                            je	short copy_envexit
 41347 00003CFC 3C0A                            cmp     al,lf           ;
 41348                                          ;stc	; 10/09/2023 (x)
 41349 00003CFE 7463                            je	short copy_envexit
 41350 00003D00 41                              inc     cx              ;
 41351 00003D01 3C3D                            cmp     al,'='          ;
 41352 00003D03 75EE                            jne	short copy_varlen
 41353 00003D05 B000                            mov     al,0            ;
 41354 00003D07 8A24                            mov     ah,[si]         ; save char after '='
 41355 00003D09 29CE                            sub     si,cx           ; back up to given varname
 41356 00003D0B 49                              dec     cx              ; CX == # of bytes in varname
 41357 00003D0C 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 41358                                  copy_varsrch:
 41359 00003D0E 263805                          cmp     byte [es:di],al
 41360 00003D11 7425                            je	short copy_envprep ; search failed, just copy var
 41361 00003D13 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 41362 00003D15 51                              push    cx              ;
 41363 00003D16 56                              push    si              ;
 41364 00003D17 F3A6                            repe    cmpsb           ;
 41365 00003D19 5E                              pop     si              ;
 41366 00003D1A 59                              pop     cx              ;
 41367 00003D1B 7531                            jne	short copy_varnext ; no match, skip to next varname
 41368 00003D1D 26803D3D                        cmp     byte [es:di],'='
 41369 00003D21 752B                            jne     short copy_varnext ; no match, there's more characters
 41370                                  
 41371                                  ;   Previous occurrence of variable has been found; determine the
 41372                                  ;   entire length and then destroy it
 41373                                  
 41374 00003D23 B9FFFF                          mov     cx,-1           ;
 41375 00003D26 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 41376 00003D28 56                              push    si              ;
 41377 00003D29 89FE                            mov     si,di           ;
 41378 00003D2B 89DF                            mov     di,bx           ;
 41379 00003D2D 2E8B0E[D814]                    mov     cx,[cs:config_envlen]
 41380 00003D32 29F1                            sub     cx,si           ; destroy variable now
 41381                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 41382                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 41383                                  
 41384 00003D34 F3                      	rep	; 0F3h
 41385 00003D35 26                      	es	; 26h
 41386 00003D36 A4                      	movsb	; 0A4h
 41387                                  
 41388 00003D37 5E                      	pop     si
 41389                                  copy_envprep:
 41390 00003D38 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 41391 00003D3B 741D                            je	short copy_envdel ; then just exit with variable deleted
 41392 00003D3D 80FC0A                          cmp     ah,lf           ;
 41393 00003D40 7418                            je	short copy_envdel
 41394                                          ;jmp	short copy_envloop
 41395                                  	; 04/01/2023
 41396                                  copy_envloop:                  ;
 41397 00003D42 AC                      	lodsb                   ;
 41398 00003D43 3C0D                    	cmp	al,cr           ;
 41399 00003D45 7410                    	je	short copy_envdone
 41400 00003D47 3C0A                    	cmp	al,lf           ;
 41401 00003D49 740C                    	je	short copy_envdone
 41402 00003D4B AA                      	stosb                   ;
 41403 00003D4C EBF4                    	jmp	short copy_envloop
 41404                                  
 41405                                  copy_varnext:                   ;
 41406 00003D4E 51                              push    cx              ;
 41407 00003D4F B9FFFF                          mov     cx,-1           ;
 41408 00003D52 F2AE                            repne   scasb           ;
 41409 00003D54 59                              pop     cx              ;
 41410 00003D55 EBB7                            jmp	short copy_varsrch
 41411                                  
 41412                                  	; 04/01/2023
 41413                                  ;copy_envloop:                  ;
 41414                                  ;	lodsb                   ;
 41415                                  ;	cmp	al,cr           ;
 41416                                  ;	je	short copy_envdone
 41417                                  ;	cmp	al,lf           ;
 41418                                  ;	je	short copy_envdone
 41419                                  ;	stosb                   ;
 41420                                  ;	jmp	short copy_envloop
 41421                                  
 41422                                  copy_envdone:                   ;
 41423 00003D57 28C0                            sub     al,al           ; do SUB to clear carry as well
 41424 00003D59 AA                              stosb                   ; always null-terminate these puppies
 41425                                  copy_envdel:                    ;
 41426 00003D5A 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 41427 00003D5D 2E893E[D814]                    mov     [cs:config_envlen],di
 41428                                  	; 10/09/2023 (x) - Erdogan Tan
 41429 00003D62 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 41430                                  copy_envexit:                   ;
 41431 00003D63 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 41432 00003D64 07                              pop     es              ;
 41433 00003D65 1F                              pop     ds              ;
 41434 00003D66 5E                              pop     si              ;
 41435 00003D67 59                              pop     cx              ;
 41436                                  
 41437                                  copy_done:	; 18/12/2022
 41438 00003D68 C3                              retn
 41439                                  
 41440                                  ;----------------------------------------------------------------------------
 41441                                  ;
 41442                                  ;   copy_block:  copy the current block to the new config.sys workspace
 41443                                  ;
 41444                                  ;   INPUT
 41445                                  ;       CX == remaining bytes in "organized" config.sys memory image
 41446                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 41447                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 41448                                  ;             config.sys image) where the current block is to be copied
 41449                                  ;
 41450                                  ;   OUTPUT
 41451                                  ;       Same as above
 41452                                  ;       AL also equals the last character read from the organized image
 41453                                  ;
 41454                                  ;   OTHER REGS USED
 41455                                  ;       All
 41456                                  ;
 41457                                  ;   NOTES
 41458                                  ;       None
 41459                                  ;
 41460                                  ;   HISTORY
 41461                                  ;       Created 16-Mar-1992 by JeffPar
 41462                                  ;
 41463                                  ;----------------------------------------------------------------------------
 41464                                  
 41465                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41466                                  	; (SYSINIT:4759h)
 41467                                  
 41468                                  copy_block:
 41469 00003D69 E87103                          call    get_char        ; check for include
 41470 00003D6C 72FA                            jc	short copy_done	;
 41471 00003D6E 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41472 00003D70 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 41473 00003D72 74F4                            je	short copy_done ;
 41474                                  
 41475 00003D74 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 41476 00003D76 88E0                            mov     al,ah           ; AL == the original line code
 41477 00003D78 753A                            jne	short copy_line	; not an "include" line
 41478                                  
 41479                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 41480                                  ;   never try to include the block again (no infinite include loops please),
 41481                                  ;   then search for the named block and call copy_block again.
 41482                                  
 41483 00003D7A 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 41484 00003D7F 57                              push    di              ;
 41485                                  
 41486 00003D80 BF[9547]                        mov     di,szMenu
 41487 00003D83 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 41488 00003D86 7426                            je	short copy_skip	;
 41489                                  
 41490 00003D88 BF[9A47]                        mov     di,szCommon
 41491 00003D8B E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 41492 00003D8E 741E                            je	short copy_skip	;
 41493                                  
 41494 00003D90 89F7                            mov     di,si           ; try to find the block
 41495 00003D92 E86400                          call    srch_block      ;
 41496 00003D95 89FA                            mov     dx,di           ;
 41497                                  	; 10/09/2023
 41498                                  	;pop    di              ;
 41499 00003D97 7514                            jne	short copy_error ; no such block
 41500 00003D99 5F                      	pop	di  ; 10/09/2023
 41501 00003D9A 51                              push    cx              ;
 41502 00003D9B 89D9                            mov     cx,bx           ;
 41503 00003D9D 56                              push    si              ;
 41504 00003D9E 4A                              dec     dx              ;
 41505 00003D9F 89D6                            mov     si,dx           ;
 41506 00003DA1 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 41507 00003DA4 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 41508 00003DA7 5E                              pop     si              ;
 41509 00003DA8 59                              pop     cx              ;
 41510 00003DA9 28C0                            sub     al,al           ; force skip_opt_line to skip...
 41511 00003DAB EB2B                            jmp     short copy_nextline
 41512                                  
 41513                                  copy_error:
 41514                                  	; 10/09/2023
 41515 00003DAD F8                      	clc
 41516                                  copy_skip:
 41517 00003DAE 5F                              pop     di
 41518                                  ;copy_error:
 41519                                  	; 10/09/2023 (cf=0)
 41520                                  	;clc                    ;
 41521 00003DAF E80004                          call    print_error     ; note that carry is clear, no pause
 41522 00003DB2 EB24                            jmp     short copy_nextline
 41523                                  
 41524                                  ;   Copy the line at ES:SI to the current location at DS:DI
 41525                                  
 41526                                  copy_line:
 41527 00003DB4 8805                            mov     [di],al         ;
 41528 00003DB6 47                              inc     di              ;
 41529 00003DB7 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 41530 00003DB9 721D                            jb	short copy_nextline ; no
 41531 00003DBB 2E803E[DD14]00                  cmp     byte [cs:config_multi],0
 41532 00003DC1 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 41533 00003DC3 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 41534 00003DC6 891D                            mov     [di],bx         ; stash it immediately following the line code
 41535 00003DC8 47                              inc     di              ;
 41536 00003DC9 47                              inc     di              ;
 41537 00003DCA EB08                            jmp     short copy_next ;
 41538                                  copy_loop:                      ;
 41539 00003DCC E80E03                          call    get_char        ;
 41540 00003DCF 7297                            jc	short copy_done ; end of file
 41541 00003DD1 8805                            mov     [di],al         ;
 41542 00003DD3 47                              inc     di              ;
 41543                                  copy_next:
 41544 00003DD4 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 41545 00003DD6 75F4                            jne	short copy_loop	; nope
 41546                                  
 41547                                  copy_nextline:
 41548 00003DD8 E8DC02                          call    skip_opt_line   ;
 41549 00003DDB EB8C                            jmp     short copy_block
 41550                                  
 41551                                  	; 18/12/2022
 41552                                  ;copy_done:
 41553                                          ;retn
 41554                                  
 41555                                  ;----------------------------------------------------------------------------
 41556                                  ;
 41557                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 41558                                  ;
 41559                                  ;   INPUT
 41560                                  ;    ES:SI -> some line in the config.sys memory image
 41561                                  ;
 41562                                  ;   OUTPUT
 41563                                  ;       BX == line # (relative to 1)
 41564                                  ;
 41565                                  ;   OTHER REGS USED
 41566                                  ;       DX
 41567                                  ;
 41568                                  ;   NOTES
 41569                                  ;       None
 41570                                  ;
 41571                                  ;   HISTORY
 41572                                  ;       Created 16-Mar-1992 by JeffPar
 41573                                  ;
 41574                                  ;----------------------------------------------------------------------------
 41575                                  
 41576                                  get_linenum:
 41577 00003DDD 50                              push    ax              ;
 41578 00003DDE 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 41579 00003DE0 51                              push    cx              ;
 41580 00003DE1 89F2                            mov     dx,si           ; DX == the offset we're looking for
 41581 00003DE3 56                              push    si              ;
 41582 00003DE4 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 41583 00003DE9 29F6                            sub     si,si           ; prepare to scan entire file
 41584                                  get_linenum_loop:               ;
 41585 00003DEB E8C402                          call    skip_line       ;
 41586 00003DEE 7205                            jc	short get_linenum_done
 41587 00003DF0 43                              inc     bx              ;
 41588 00003DF1 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 41589 00003DF3 72F6                            jb	short get_linenum_loop ; no
 41590                                  get_linenum_done:               ;
 41591 00003DF5 5E                              pop     si              ;
 41592 00003DF6 59                              pop     cx              ;
 41593 00003DF7 58                              pop     ax              ;
 41594 00003DF8 C3                              retn
 41595                                  
 41596                                  ;----------------------------------------------------------------------------
 41597                                  ;
 41598                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 41599                                  ;
 41600                                  ;   INPUT
 41601                                  ;       ES -> config.sys image
 41602                                  ;    ES:DI -> block name to find
 41603                                  ;
 41604                                  ;   OUTPUT
 41605                                  ;       ZF flag set, if found
 41606                                  ;    ES:DI -> just past the name in the block heading, if found
 41607                                  ;       BX == # bytes remaining from that point, if found
 41608                                  ;
 41609                                  ;   OTHER REGS USED
 41610                                  ;       None
 41611                                  ;
 41612                                  ;   NOTES
 41613                                  ;       This differs from "find_block" in that it searches the ENTIRE
 41614                                  ;       config.sys image, not merely the remaining portion, and that it
 41615                                  ;       takes a pointer to block name that is *elsewhere* in the image
 41616                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 41617                                  ;
 41618                                  ;   HISTORY
 41619                                  ;       Created 16-Mar-1992 by JeffPar
 41620                                  ;
 41621                                  ;----------------------------------------------------------------------------
 41622                                  
 41623                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 41624 00003DF9 50                              push    ax              ;
 41625 00003DFA 51                              push    cx              ;
 41626 00003DFB 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 41627 00003E00 56                              push    si              ;
 41628 00003E01 29F6                            sub     si,si           ;
 41629 00003E03 1E                              push    ds              ;
 41630 00003E04 06                              push    es              ;
 41631 00003E05 1F                              pop     ds              ;
 41632 00003E06 E80900                          call    find_block      ;
 41633 00003E09 89F7                            mov     di,si           ;
 41634 00003E0B 89CB                            mov     bx,cx           ;
 41635 00003E0D 1F                              pop     ds              ;
 41636 00003E0E 5E                              pop     si              ;
 41637 00003E0F 59                              pop     cx              ;
 41638 00003E10 58                              pop     ax              ;
 41639                                  find_exit: ; 16/04/2019
 41640 00003E11 C3                              retn			;
 41641                                  
 41642                                  ;----------------------------------------------------------------------------
 41643                                  ;
 41644                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 41645                                  ;
 41646                                  ;   INPUT
 41647                                  ;    DS:DI -> block name to find
 41648                                  ;    ES:SI -> remainder of config.sys image
 41649                                  ;       CX == remaining size of config.sys image
 41650                                  ;
 41651                                  ;   OUTPUT
 41652                                  ;       ZF flag set, if found (also, CF set if EOF)
 41653                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 41654                                  ;       CX == # bytes remaining from that point
 41655                                  ;
 41656                                  ;   OTHER REGS USED
 41657                                  ;       AX
 41658                                  ;
 41659                                  ;   NOTES
 41660                                  ;       This differs from "srch_block" in that it searches only the
 41661                                  ;       remaining portion of the config.sys image and leaves SI and CX
 41662                                  ;       pointing to where the search left off, and that it takes a pointer
 41663                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 41664                                  ;
 41665                                  ;   HISTORY
 41666                                  ;       Created 16-Mar-1992 by JeffPar
 41667                                  ;
 41668                                  ;----------------------------------------------------------------------------
 41669                                  
 41670                                  find_block:
 41671 00003E12 E8C802                          call    get_char        ; get line code
 41672 00003E15 72FA                            jc	short find_exit	; end of file
 41673 00003E17 247F                            and     al,~CONFIG_OPTION_QUERY
 41674 00003E19 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 41675 00003E1B 740C                            je	short check_line ; no
 41676 00003E1D 3C4A                            cmp     al,CONFIG_INCLUDE
 41677 00003E1F 7513                            jne	short next_line	;
 41678 00003E21 2E800E[DD14]01                  or	byte [cs:config_multi],1
 41679 00003E27 EB0B                            jmp     short next_line ;
 41680                                  check_line:
 41681 00003E29 2E800E[DD14]01                  or      byte [cs:config_multi],1
 41682 00003E2F E80700                          call    comp_names      ; compare block names
 41683 00003E32 76DD                            jbe	short find_exit	; end of file, or names matched
 41684                                  next_line:
 41685 00003E34 E88002                          call    skip_opt_line   ; no, so skip to next line
 41686 00003E37 EBD9                            jmp	short find_block  ;
 41687                                  ;find_exit:
 41688                                  ;	retn
 41689                                  
 41690                                  ;----------------------------------------------------------------------------
 41691                                  ;
 41692                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 41693                                  ;
 41694                                  ;   INPUT
 41695                                  ;    DS:DI -> keyword to compare
 41696                                  ;    ES:SI -> position in config.sys
 41697                                  ;       CX == remaining bytes in config.sys
 41698                                  ;
 41699                                  ;   OUTPUT
 41700                                  ;       ZF flag set, if match (also, CF set if EOF)
 41701                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 41702                                  ;       CX == # bytes remaining from that point
 41703                                  ;
 41704                                  ;   OTHER REGS USED
 41705                                  ;       AX
 41706                                  ;
 41707                                  ;   NOTES
 41708                                  ;       None
 41709                                  ;
 41710                                  ;   HISTORY
 41711                                  ;       Created 16-Mar-1992 by JeffPar
 41712                                  ;
 41713                                  ;----------------------------------------------------------------------------
 41714                                  
 41715                                  comp_names:
 41716 00003E39 57                              push    di              ;
 41717                                  comp_loop:                      ;
 41718 00003E3A E8A002                          call    get_char        ;
 41719 00003E3D 7210                            jc	short comp_exit	;
 41720 00003E3F E80704                          call    any_delim       ; is next character a delimiter?
 41721 00003E42 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 41722 00003E44 740B                            je	short comp_almost ; yes, it *could* be a match
 41723 00003E46 47                              inc     di              ;
 41724 00003E47 25DFDF                          and     ax,~2020h ; 0DFDFh 
 41725                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 41726 00003E4A 38E0                            cmp     al,ah           ; match?
 41727 00003E4C 74EC                            je	short comp_loop ; yes, keep looking at the characters
 41728 00003E4E F8                              clc                     ; prevent erroneous eof indication: clear carry
 41729                                  comp_exit:                      ;
 41730 00003E4F 5F                              pop     di              ;
 41731 00003E50 C3                              retn			;
 41732                                  comp_almost:                    ;
 41733 00003E51 86E0                            xchg    al,ah           ; we don't know for sure if it's a match
 41734 00003E53 E8F303                          call    any_delim       ; until we verify that the second string has
 41735 00003E56 86E0                            xchg    al,ah           ; been exhausted also...
 41736 00003E58 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 41737                                  
 41738                                  ;----------------------------------------------------------------------------
 41739                                  
 41740                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 41741                                  comp_names_x:
 41742                                  	;
 41743                                  comp_names_safe:
 41744 00003E5A 50                              push    ax
 41745 00003E5B 51                              push    cx
 41746 00003E5C 56                              push	si
 41747 00003E5D 1E                              push    ds
 41748 00003E5E 0E                              push    cs
 41749 00003E5F 1F                              pop     ds
 41750 00003E60 E8D6FF                          call    comp_names
 41751 00003E63 1F                              pop     ds
 41752 00003E64 5E                      	pop	si
 41753 00003E65 59                              pop     cx
 41754 00003E66 58                              pop     ax
 41755 00003E67 C3                              retn
 41756                                  
 41757                                  ;----------------------------------------------------------------------------
 41758                                  ;
 41759                                  ;   print_item:  display menu item #BL
 41760                                  ;
 41761                                  ;   INPUT
 41762                                  ;       BL == menu item # to display
 41763                                  ;
 41764                                  ;   OUTPUT
 41765                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 41766                                  ;
 41767                                  ;   OTHER REGS USED
 41768                                  ;       None
 41769                                  ;
 41770                                  ;   NOTES
 41771                                  ;       This function saves/restores the current cursor position, so you
 41772                                  ;       needn't worry about it.
 41773                                  ;
 41774                                  ;   HISTORY
 41775                                  ;       Created 16-Mar-1992 by JeffPar
 41776                                  ;
 41777                                  ;----------------------------------------------------------------------------
 41778                                  
 41779                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41780                                  	; (SYSINIT:485Ah)
 41781                                  
 41782                                  print_item:		; prints menu item #BL (1 to N)
 41783 00003E68 50                              push    ax              ;
 41784 00003E69 53                              push    bx              ;
 41785 00003E6A 51                              push    cx              ;
 41786 00003E6B 52                              push    dx              ;
 41787 00003E6C 56                              push    si              ;
 41788 00003E6D B403                            mov     ah,03h          ; get cursor position
 41789 00003E6F 8A3E[4C47]                      mov     bh,[bMenuPage]  ; always page zero
 41790 00003E73 CD10                            int     10h             ; DH/DL = row/column
 41791 00003E75 52                              push    dx              ; save it
 41792 00003E76 B402                            mov     ah,02h          ; set cursor position
 41793 00003E78 88DE                            mov     dh,bl           ;
 41794 00003E7A 80C603                          add     dh,3            ;
 41795 00003E7D B205                            mov     dl,5            ;
 41796 00003E7F CD10                            int     10h             ; set cursor position for correct row/col
 41797 00003E81 88D8                            mov     al,bl           ;
 41798 00003E83 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 41799 00003E85 8A26[4B47]                      mov     ah,[bMenuColor] ; normal attribute
 41800 00003E89 3A1E[5547]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 41801 00003E8D 7510                            jne	short print_other ; no
 41802 00003E8F 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 41803 00003E92 88E5                            mov     ch,ah           ;
 41804 00003E94 B104                            mov     cl,4            ;
 41805 00003E96 D2C5                            rol     ch,cl           ;
 41806 00003E98 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 41807 00003E9A 7503                            jne	short print_other ; no
 41808 00003E9C 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 41809                                  print_other:                    ;
 41810 00003E9F B700                            mov     bh,0            ;
 41811 00003EA1 01DB                            add     bx,bx           ;
 41812 00003EA3 8BBF[7947]                      mov     di,[aoffBlockDesc+bx]
 41813 00003EA7 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 41814 00003EA9 8A3E[4C47]                      mov     bh,[bMenuPage]  ; get correct video page #
 41815 00003EAD B409                            mov     ah,09h          ; write char/attr
 41816 00003EAF B90100                          mov     cx,1            ;
 41817 00003EB2 CD10                            int     10h             ;
 41818 00003EB4 FEC2                            inc     dl              ; increment column
 41819 00003EB6 B402                            mov     ah,02h          ;
 41820 00003EB8 CD10                            int     10h             ;
 41821                                          ;mov	ax,0900h+'.'    ;
 41822 00003EBA B82E09                          mov	ax,092Eh
 41823 00003EBD CD10                    	int     10h             ; display '.'
 41824 00003EBF FEC2                            inc     dl              ; increment column
 41825 00003EC1 B402                            mov     ah,02h          ;
 41826 00003EC3 CD10                            int     10h             ;
 41827                                          ;mov	ax,0900h+' '    ;
 41828 00003EC5 B82009                          mov	ax,0920h
 41829 00003EC8 CD10                    	int     10h             ; display ' '
 41830 00003ECA FEC2                            inc     dl              ; increment column
 41831 00003ECC B402                            mov     ah,02h          ;
 41832 00003ECE CD10                            int     10h             ;
 41833 00003ED0 06                              push    es              ;
 41834                                  print_loop:                     ;
 41835 00003ED1 268A05                          mov     al,[es:di]	; get a character of the description
 41836 00003ED4 47                              inc     di              ;
 41837 00003ED5 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 41838 00003ED7 7502                            jne	short print_nontab ;
 41839 00003ED9 B020                            mov     al,' '          ;
 41840                                  print_nontab:                   ;
 41841 00003EDB 3C20                            cmp     al,' '          ;
 41842 00003EDD 7215                            jb	short print_done ; stop at the 1st character < space
 41843 00003EDF 3C24                            cmp     al,'$'          ;
 41844 00003EE1 7411                            je	short print_done ; also stop on $
 41845 00003EE3 B409                            mov     ah,09h          ; display function #
 41846 00003EE5 CD10                            int     10h             ;
 41847 00003EE7 FEC2                            inc     dl              ; increment column
 41848 00003EE9 80FA4E                          cmp     dl,78           ; far enough?
 41849 00003EEC 7306                            jae	short print_done ; yes
 41850 00003EEE B402                            mov     ah,02h          ;
 41851 00003EF0 CD10                            int     10h             ;
 41852 00003EF2 EBDD                            jmp	short  print_loop
 41853                                  print_done:                     ;
 41854 00003EF4 07                              pop     es              ;
 41855 00003EF5 5A                              pop     dx              ;
 41856 00003EF6 B402                            mov     ah,02h          ;
 41857 00003EF8 CD10                            int     10h             ; restore previous row/col
 41858 00003EFA 5E                              pop     si              ;
 41859 00003EFB 5A                              pop     dx              ;
 41860 00003EFC 59                              pop     cx              ;
 41861 00003EFD 5B                              pop     bx              ;
 41862 00003EFE 58                              pop     ax              ;
 41863 00003EFF C3                              retn			;
 41864                                  
 41865                                  ;----------------------------------------------------------------------------
 41866                                  ;
 41867                                  ;   select_item:  wait for user to select menu item, with time-out
 41868                                  ;
 41869                                  ;   INPUT
 41870                                  ;       None
 41871                                  ;
 41872                                  ;   OUTPUT
 41873                                  ;       BX == menu item # (1-N), or -1 for clean boot
 41874                                  ;       Selected menu item highlighted
 41875                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 41876                                  ;
 41877                                  ;   OTHER REGS USED
 41878                                  ;       None
 41879                                  ;
 41880                                  ;   NOTES
 41881                                  ;       None
 41882                                  ;
 41883                                  ;   HISTORY
 41884                                  ;       Created 16-Mar-1992 by JeffPar
 41885                                  ;
 41886                                  ;----------------------------------------------------------------------------
 41887                                  
 41888                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 41889 00003F00 8A1E[5547]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 41890 00003F04 88D8                            mov     al,bl           ;
 41891 00003F06 E83701                          call    disp_num        ;
 41892 00003F09 E84401                          call    show_status     ; display current interactive status
 41893 00003F0C 803E[5947]FF                    cmp     byte [secTimeOut],-1
 41894 00003F11 7452                            je	short input_key	; no time-out, just go to input
 41895 00003F13 B42C                            mov     ah,GET_TIME ; 2Ch
 41896 00003F15 CD21                            int     21h             ;
 41897 00003F17 88F7                            mov     bh,dh           ; BH = initial # of seconds
 41898                                  check_time:
 41899 00003F19 A0[5947]                        mov     al,[secTimeOut] ;
 41900 00003F1C 2A06[5A47]                      sub     al,[secElapsed] ;
 41901 00003F20 730D                            jae	short show_time	;
 41902 00003F22 800E[5447]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 41903 00003F27 C606[5A47]00                    mov     byte [secElapsed],0
 41904 00003F2C E9F600                          jmp	select_done	; time's up!
 41905                                  show_time:
 41906 00003F2F 53                              push    bx              ;
 41907 00003F30 88C3                            mov     bl,al           ; save # in BL
 41908 00003F32 8A3E[4C47]                      mov     bh,[bMenuPage]  ;
 41909 00003F36 B403                            mov     ah,03h          ; get cursor position
 41910 00003F38 CD10                            int     10h             ;
 41911 00003F3A 52                              push    dx              ;
 41912 00003F3B 80C208                  	add	dl,8		; move cursor to the right
 41913 00003F3E B402                            mov     ah,02h          ; set cursor position
 41914 00003F40 CD10                            int     10h             ;
 41915 00003F42 BA[ED4D]                        mov     dx,_$TimeOut
 41916 00003F45 E8DB05                          call    print           ; print the "Time remaining: " prompt
 41917 00003F48 88D8                            mov     al,bl           ; recover # from BL
 41918 00003F4A 98                              cbw                     ; this works because AL is always <= 90
 41919 00003F4B B10A                            mov     cl,10           ;
 41920 00003F4D F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 41921 00003F4F 88E1                            mov     cl,ah           ;
 41922 00003F51 0430                            add     al,'0'          ;
 41923 00003F53 B40E                            mov     ah,0Eh          ;
 41924 00003F55 CD10                            int     10h             ; write TTY tens digit
 41925 00003F57 88C8                            mov     al,cl           ;
 41926 00003F59 0430                            add     al,'0'          ;
 41927 00003F5B B40E                            mov     ah,0Eh          ;
 41928 00003F5D CD10                            int     10h             ; write TTY ones digit
 41929 00003F5F 5A                              pop     dx
 41930 00003F60 B402                            mov     ah,02h          ; set cursor position back to where it was
 41931 00003F62 CD10                            int     10h             ;
 41932 00003F64 5B                              pop     bx              ;
 41933                                  input_key:
 41934 00003F65 B406                            mov     ah,RAW_CON_IO ; 6
 41935 00003F67 B2FF                            mov     dl,0FFh         ; input request
 41936 00003F69 CD21                            int     21h             ;
 41937 00003F6B 751F                            jnz	short got_key	;
 41938 00003F6D 803E[5947]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 41939 00003F72 74F1                            je	short input_key	; no, just go back to input
 41940 00003F74 B42C                            mov     ah,GET_TIME     ;
 41941 00003F76 CD21                            int     21h             ; DH = seconds
 41942 00003F78 88F4                            mov     ah,dh           ;
 41943 00003F7A 28FE                            sub     dh,bh           ; should generally be zero or one
 41944 00003F7C 88E7                            mov     bh,ah           ;
 41945 00003F7E 7302                            jnc	short got_time	;
 41946 00003F80 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 41947                                  got_time:
 41948 00003F82 08F6                            or      dh,dh           ; any change?
 41949 00003F84 74DF                            jz	short input_key	; no
 41950 00003F86 0036[5A47]                      add     [secElapsed],dh ;
 41951 00003F8A EB8D                            jmp	short check_time ;
 41952                                  got_key:
 41953 00003F8C 50                              push    ax              ;
 41954 00003F8D B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 41955 00003F90 8706[5947]                      xchg    [secTimeOut],ax
 41956 00003F94 3CFF                            cmp     al,-1           ; was time-out already disabled?
 41957 00003F96 740E                            je	short timeout_disabled ; yes
 41958 00003F98 53                              push    bx              ; let's disable # seconds display
 41959 00003F99 B8200A                          mov     ax,0A20h        ; write multiple spaces
 41960 00003F9C 8B1E[4B47]                      mov     bx,[bMenuColor]
 41961 00003FA0 B95000                          mov     cx,80           ; 80 of them, to be safe
 41962 00003FA3 CD10                            int     10h             ; to completely obliterate # seconds display
 41963 00003FA5 5B                              pop     bx   		;
 41964                                  
 41965                                  timeout_disabled:
 41966 00003FA6 58                              pop     ax              ;
 41967 00003FA7 08C0                            or      al,al           ; extended key pressed?
 41968 00003FA9 755A                            jnz	short normal_key ; no
 41969 00003FAB CD21                            int     21h             ; get the next part of the key then
 41970 00003FAD 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 41971                                  
 41972 00003FAF 3C48                            cmp     al,48h          ; up arrow?
 41973 00003FB1 7510                            jne	short not_up	; no
 41974 00003FB3 80FB01                          cmp     bl,1            ; are we as up as up can get?
 41975 00003FB6 76AD                            jbe	short input_key	; yes, ignore it
 41976 00003FB8 FE0E[5547]                      dec     byte [bDefBlock] ;
 41977 00003FBC E8A9FE                          call    print_item      ; re-print the current item
 41978 00003FBF FECB                            dec     bl              ; and then print the new current item
 41979 00003FC1 EB12                            jmp     short print1
 41980                                  not_up:
 41981 00003FC3 3C50                            cmp     al,50h          ; down arrow?
 41982 00003FC5 7518                            jne	short not_down	; no
 41983 00003FC7 3A1E[5647]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 41984 00003FCB 7310                            jae	short to_input_key ; yes, ignore it
 41985 00003FCD FE06[5547]                      inc     byte [bDefBlock] ;
 41986 00003FD1 E894FE                          call    print_item      ; re-print the current item
 41987 00003FD4 43                              inc     bx              ; and then print the new current item
 41988                                  print1: 
 41989 00003FD5 88D8                    	mov     al,bl           ;
 41990                                  print2: 
 41991 00003FD7 E88EFE                  	call    print_item      ;
 41992 00003FDA E86300                          call    disp_num        ;
 41993                                  to_input_key:
 41994 00003FDD EB86                            jmp	short input_key ; 10/09/2023
 41995                                  not_down:
 41996 00003FDF F606[5047]01                    test    byte [bDisableUI],1
 41997 00003FE4 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 41998 00003FE6 3C42                            cmp     al,42h          ; F8 function key?
 41999 00003FE8 750B                            jne	short not_f8	; no
 42000 00003FEA 8036[5447]01                    xor     byte [bQueryOpt],1
 42001 00003FEF E85E00                          call    show_status     ;
 42002 00003FF2 E970FF                          jmp     input_key	;
 42003                                  not_f8:
 42004 00003FF5 3C3F                            cmp     al,3Fh          ; F5 function key?
 42005 00003FF7 75E4                            jne	short to_input_key ; no
 42006                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42007                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 42008                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 42009 00003FF9 800E[5447]04            	or	byte [bQueryOpt],4 ; no more queries
 42010 00003FFE BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 42011 00004001 B020                            mov     al,' '          ; don't want to display anything really;
 42012 00004003 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 42013                                  
 42014                                  normal_key:
 42015 00004005 3C0D                            cmp     al,0Dh          ; Enter?
 42016 00004007 741C                            je	short select_done ; yes
 42017 00004009 3C08                            cmp     al,08h          ; backspace?
 42018 0000400B 7504                            jne	short not_backspace ; no
 42019 0000400D BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 42020 00004010 C3                              retn			;
 42021                                  not_backspace:
 42022 00004011 2C30                            sub     al,'0'          ; is greater than '0'?
 42023 00004013 76C8                            jbe	short to_input_key ; no
 42024 00004015 3A06[5647]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 42025 00004019 77C2                            ja	short to_input_key ; no
 42026 0000401B A2[5547]                        mov	[bDefBlock],al  ;
 42027 0000401E E847FE                          call    print_item      ; redisplay the current selection
 42028 00004021 88C3                            mov     bl,al           ; set new selection
 42029 00004023 EBB2                            jmp	short print2
 42030                                  
 42031                                  select_done:
 42032 00004025 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 42033 00004027 88D8                            mov     al,bl           ;
 42034 00004029 0430                            add     al,'0'          ; convert it into a digit, then display it
 42035                                  
 42036                                  	; fall into disp_input
 42037                                  
 42038                                  ; 16/04/2019 - Retro DOS v4.0
 42039                                  
 42040                                  ;----------------------------------------------------------------------------
 42041                                  ;
 42042                                  ;   disp_input:  display a single character + cr/lf
 42043                                  ;
 42044                                  ;   INPUT
 42045                                  ;       AL == character to display
 42046                                  ;
 42047                                  ;   OUTPUT
 42048                                  ;       None
 42049                                  ;
 42050                                  ;   OTHER REGS USED
 42051                                  ;       None
 42052                                  ;
 42053                                  ;   NOTES
 42054                                  ;       This function is used not only for the menu input selection but
 42055                                  ;       also for the interactive line prompting (the y/n/a thing).
 42056                                  ;
 42057                                  ;   HISTORY
 42058                                  ;       Created 16-Mar-1992 by JeffPar
 42059                                  ;
 42060                                  ;----------------------------------------------------------------------------
 42061                                  
 42062                                  
 42063                                  disp_input:
 42064 0000402B 50                      	push	ax
 42065                                  	;cmp	al,' '
 42066                                  	;jae	short disp_ok
 42067                                  	;mov	al,' '
 42068                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 42069 0000402C B220                    	mov	dl,' ' ; 20h
 42070 0000402E 38D0                    	cmp	al,dl
 42071 00004030 7602                    	jna	short disp_input_ok
 42072                                  disp_ok:
 42073 00004032 88C2                    	mov	dl,al
 42074                                  disp_input_ok:
 42075 00004034 B402                    	mov	ah,STD_CON_OUTPUT ; 2
 42076 00004036 CD21                    	int	21h
 42077 00004038 BA[364B]                	mov	dx,crlfm
 42078 0000403B E8E504                  	call	print
 42079 0000403E 58                      	pop	ax
 42080 0000403F C3                      	retn
 42081                                  
 42082                                  ;----------------------------------------------------------------------------
 42083                                  
 42084                                  disp_num:
 42085 00004040 53                              push    bx
 42086 00004041 0430                            add     al,'0'
 42087 00004043 B40A                            mov     ah,0Ah
 42088 00004045 8B1E[4B47]                      mov     bx,[bMenuColor]
 42089 00004049 B90100                          mov     cx,1
 42090 0000404C CD10                            int     10h
 42091 0000404E 5B                              pop     bx
 42092 0000404F C3                              retn
 42093                                  
 42094                                  ;----------------------------------------------------------------------------
 42095                                  ;
 42096                                  ;   show_status:  display current interactive mode setting (on/off/none)
 42097                                  ;
 42098                                  ;   INPUT
 42099                                  ;       None
 42100                                  ;
 42101                                  ;   OUTPUT
 42102                                  ;       None
 42103                                  ;
 42104                                  ;   OTHER REGS USED
 42105                                  ;       None
 42106                                  ;
 42107                                  ;   NOTES
 42108                                  ;       None
 42109                                  ;
 42110                                  ;   HISTORY
 42111                                  ;       Created 16-Mar-1992 by JeffPar
 42112                                  ;
 42113                                  ;----------------------------------------------------------------------------
 42114                                  
 42115                                  show_status:
 42116 00004050 53                              push    bx              ; BL = video page #
 42117 00004051 8B1E[4B47]                      mov     bx,[bMenuColor]
 42118 00004055 B403                            mov     ah,03h          ; get cursor position
 42119 00004057 CD10                            int     10h             ;
 42120 00004059 52                              push    dx              ; save it
 42121 0000405A B402                            mov     ah,02h          ; set cursor position
 42122 0000405C 8B16[4E47]                      mov     dx,[bLastCol]   ; set correct row/col
 42123 00004060 F606[5047]01                    test    byte [bDisableUI],1
 42124 00004065 740C                            jz	short show_onoff ; just show on/off
 42125 00004067 B200                            mov     dl,0            ;
 42126 00004069 CD10                            int     10h             ;
 42127 0000406B B8200A                          mov     ax,0A20h        ; write multiple spaces
 42128 0000406E B95000                          mov     cx,80           ; 80 of them, to be exact
 42129                                  	; 10/09/2023
 42130                                  	;int	10h             ; to obliterate the status line
 42131 00004071 EB11                            jmp     short show_done ;
 42132                                  show_onoff: 
 42133 00004073 CD10                            int     10h
 42134                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 42135                                  		; AL = character, BH = display page - alpha mode
 42136                                  		; BL = color of character (graphics mode, PCjr only)
 42137                                  		; CX = number of times to write character
 42138                                  
 42139 00004075 A0[E94D]                        mov     al,[_$NO]	; assume OFF
 42140 00004078 803E[5447]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 42141 0000407D 7503                            jne	short show_noton ; no
 42142 0000407F A0[E54D]                        mov     al,[_$YES]	; yes
 42143                                  show_noton:                     ;
 42144 00004082 B40E                            mov     ah,0Eh          ; write TTY
 42145                                  show_done:	; 10/09/2023
 42146 00004084 CD10                            int     10h             ;
 42147                                  ;show_done:                     ;
 42148 00004086 5A                              pop     dx              ;
 42149 00004087 B402                            mov     ah,02h          ;
 42150 00004089 CD10                            int     10h             ; restore original cursor position
 42151 0000408B 5B                              pop     bx              ;
 42152 0000408C C3                              retn			;
 42153                                  
 42154                                  ; 16/04/2019 - Retro DOS v4.0
 42155                                  
 42156                                  ;----------------------------------------------------------------------------
 42157                                  ;
 42158                                  ;   skip_token: advances ES:SI/CX past the current token
 42159                                  ;
 42160                                  ;   INPUT
 42161                                  ;    ES:SI -> position in config.sys
 42162                                  ;       CX == remaining bytes in config.sys
 42163                                  ;
 42164                                  ;   OUTPUT
 42165                                  ;       CF set if EOL/EOF hit
 42166                                  ;       AL == 1st char of delimiter
 42167                                  ;    ES:SI -> just past the delimiter
 42168                                  ;       CX == # bytes remaining from that point
 42169                                  ;
 42170                                  ;   OTHER REGS USED
 42171                                  ;       AX
 42172                                  ;
 42173                                  ;   NOTES
 42174                                  ;       None
 42175                                  ;
 42176                                  ;   HISTORY
 42177                                  ;       Created 16-Mar-1992 by JeffPar
 42178                                  ;
 42179                                  ;----------------------------------------------------------------------------
 42180                                  
 42181                                  skip_token:
 42182 0000408D E84D00                          call    get_char
 42183 00004090 7210                            jc	short skip_token_done
 42184 00004092 E8B401                          call    any_delim
 42185 00004095 75F6                            jne	short skip_token
 42186                                  skip_check_eol:
 42187 00004097 3C0D                            cmp     al,cr ; 0Dh
 42188 00004099 7406                            je	short skip_token_eol
 42189 0000409B 3C0A                            cmp     al,lf ; 0Ah
 42190 0000409D 7402                            je	short skip_token_eol
 42191 0000409F F8                              clc
 42192                                          ;jmp	short skip_token_done
 42193 000040A0 C3                      	retn
 42194                                  skip_token_eol:
 42195 000040A1 F9                              stc
 42196                                  skip_token_done:
 42197 000040A2 C3                              retn
 42198                                  
 42199                                  ;----------------------------------------------------------------------------
 42200                                  ;
 42201                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 42202                                  ;
 42203                                  ;   INPUT
 42204                                  ;    ES:SI -> position in config.sys
 42205                                  ;       CX == remaining bytes in config.sys
 42206                                  ;
 42207                                  ;   OUTPUT
 42208                                  ;       CF set if EOF hit
 42209                                  ;       AL == 1st char of token
 42210                                  ;    ES:SI -> just past the token
 42211                                  ;       CX == # bytes remaining from that point
 42212                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 42213                                  ;
 42214                                  ;   OTHER REGS USED
 42215                                  ;       AX
 42216                                  ;
 42217                                  ;   NOTES
 42218                                  ;       None
 42219                                  ;
 42220                                  ;   HISTORY
 42221                                  ;       Created 16-Mar-1992 by JeffPar
 42222                                  ;
 42223                                  ;----------------------------------------------------------------------------
 42224                                  
 42225                                  skip_delim:	; returns carry set if eol/eof
 42226 000040A3 E83700                          call    get_char        ;
 42227 000040A6 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 42228 000040A9 72F7                            jc	short skip_token_done ;
 42229 000040AB E8AB01                          call    delim           ;
 42230 000040AE 74F3                            je	short skip_delim ;
 42231 000040B0 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 42232                                  
 42233                                  ;----------------------------------------------------------------------------
 42234                                  ;
 42235                                  ;   skip_opt_line: same as skip_line provided AL != LF
 42236                                  ;
 42237                                  ;   INPUT
 42238                                  ;       AL == last character read
 42239                                  ;    ES:SI -> position in config.sys
 42240                                  ;       CX == remaining bytes in config.sys
 42241                                  ;
 42242                                  ;   OUTPUT
 42243                                  ;       CF set if EOF hit
 42244                                  ;       AL == 1st char of new line
 42245                                  ;    ES:SI -> just past 1st char of new line
 42246                                  ;       CX == # bytes remaining from that point
 42247                                  ;
 42248                                  ;   OTHER REGS USED
 42249                                  ;       AX
 42250                                  ;
 42251                                  ;   NOTES
 42252                                  ;       In other words, the purpose here is to skip to the next line,
 42253                                  ;       unless ES:SI is already sitting at the front of the next line (which
 42254                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 42255                                  ;
 42256                                  ;   HISTORY
 42257                                  ;       Created 16-Mar-1992 by JeffPar
 42258                                  ;
 42259                                  ;----------------------------------------------------------------------------
 42260                                  
 42261                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42262                                  ;skip_opt_line:
 42263                                  ;	cmp     al,lf ; 0Ah
 42264                                  ;	je	short skip_line_done
 42265                                       
 42266                                  	; fall into skip_line
 42267                                  
 42268                                  ;----------------------------------------------------------------------------
 42269                                  ;
 42270                                  ;   skip_line: skip to the next line
 42271                                  ;
 42272                                  ;   INPUT
 42273                                  ;    ES:SI -> position in config.sys
 42274                                  ;       CX == remaining bytes in config.sys
 42275                                  ;
 42276                                  ;   OUTPUT
 42277                                  ;       CF set if EOF hit
 42278                                  ;    ES:SI -> just past 1st char of new line
 42279                                  ;       CX == # bytes remaining from that point
 42280                                  ;
 42281                                  ;   OTHER REGS USED
 42282                                  ;       AX
 42283                                  ;
 42284                                  ;   NOTES
 42285                                  ;       None
 42286                                  ;
 42287                                  ;   HISTORY
 42288                                  ;       Created 16-Mar-1992 by JeffPar
 42289                                  ;
 42290                                  ;----------------------------------------------------------------------------
 42291                                  
 42292                                  skip_line:
 42293 000040B2 E82800                          call    get_char
 42294 000040B5 7204                            jc	short skip_line_done
 42295                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42296 000040B7 3C0A                            cmp     al,lf ; 0Ah
 42297 000040B9 75F7                            jne	short skip_line
 42298                                  skip_line_done:
 42299                                  num_done:	; 18/12/2022
 42300 000040BB C3                              retn
 42301                                  
 42302                                  ;----------------------------------------------------------------------------
 42303                                  ;
 42304                                  ;   get_number: return binary equivalent of numeric string
 42305                                  ;
 42306                                  ;   INPUT
 42307                                  ;    ES:SI -> position in config.sys
 42308                                  ;       CX == remaining bytes in config.sys
 42309                                  ;
 42310                                  ;   OUTPUT
 42311                                  ;       AL == non-digit encountered
 42312                                  ;       BX == binary #
 42313                                  ;    ES:SI -> just past 1st non-digit
 42314                                  ;       CX == # bytes remaining from that point
 42315                                  ;
 42316                                  ;   OTHER REGS USED
 42317                                  ;       AX
 42318                                  ;
 42319                                  ;   NOTES
 42320                                  ;       None
 42321                                  ;
 42322                                  ;   HISTORY
 42323                                  ;       Created 16-Mar-1992 by JeffPar
 42324                                  ;
 42325                                  ;----------------------------------------------------------------------------
 42326                                  
 42327                                  ; 13/05/2019
 42328                                  
 42329                                  get_number:
 42330 000040BC 29DB                            sub     bx,bx           ; BX = result
 42331                                  num_loop:
 42332 000040BE E81C00                          call    get_char        ;
 42333 000040C1 72F8                            jc	short num_done	;
 42334 000040C3 3C30                            cmp     al,'0'          ; convert to value
 42335 000040C5 72F4                            jb	short num_done	; no more number
 42336 000040C7 3C39                            cmp     al,'9'          ;
 42337 000040C9 77F0                            ja	short num_done	;
 42338 000040CB 50                              push    ax              ;
 42339 000040CC B80A00                          mov     ax,10           ;
 42340 000040CF 52                              push    dx              ;
 42341 000040D0 F7E3                            mul     bx              ;
 42342 000040D2 5A                              pop     dx              ;
 42343 000040D3 89C3                            mov     bx,ax           ;
 42344 000040D5 58                              pop     ax              ;
 42345 000040D6 2C30                            sub     al,'0'          ;
 42346 000040D8 98                              cbw                     ;
 42347 000040D9 01C3                            add     bx,ax           ;
 42348 000040DB EBE1                            jmp	short num_loop	;
 42349                                  
 42350                                  	; 18/12/2022
 42351                                  ;num_done:
 42352                                          ;retn
 42353                                  
 42354                                  ;----------------------------------------------------------------------------
 42355                                  ;
 42356                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 42357                                  ;
 42358                                  ;   INPUT
 42359                                  ;    ES:SI -> position in config.sys
 42360                                  ;       CX == remaining bytes in config.sys
 42361                                  ;
 42362                                  ;   OUTPUT
 42363                                  ;       AL == next character
 42364                                  ;    ES:SI -> just past next character
 42365                                  ;       CX == # bytes remaining from that point
 42366                                  ;
 42367                                  ;   OTHER REGS USED
 42368                                  ;       AX
 42369                                  ;
 42370                                  ;   NOTES
 42371                                  ;       None
 42372                                  ;
 42373                                  ;   HISTORY
 42374                                  ;       Created 16-Mar-1992 by JeffPar
 42375                                  ;
 42376                                  ;----------------------------------------------------------------------------
 42377                                  
 42378                                  get_char:
 42379 000040DD 83E901                          sub     cx,1            ; use SUB to set carry,zero
 42380 000040E0 7205                            jb	short get_fail	; out of data
 42381                                          ;lods	byte ptr es:[si] ;
 42382 000040E2 26                      	es	
 42383 000040E3 AC                      	lodsb
 42384 000040E4 88C4                            mov     ah,al           ;
 42385 000040E6 C3                              retn			;
 42386                                  get_fail:                       ; restore CX to zero
 42387 000040E7 B90000                          mov     cx,0            ; leave carry set, zero not set
 42388                                  nearby_ret:
 42389 000040EA C3                              retn
 42390                                  
 42391                                  ;----------------------------------------------------------------------------
 42392                                  ;
 42393                                  ;   query_user: ask user whether to execute current config.sys command
 42394                                  ;
 42395                                  ;   INPUT
 42396                                  ;       AL == current command code
 42397                                  ;    ES:SI -> current command line in config.sys
 42398                                  ;    config_cmd == current command code, but with QUERY bit intact
 42399                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 42400                                  ;
 42401                                  ;   OUTPUT
 42402                                  ;       CF set if command should be ignored (it is also REM'ed out)
 42403                                  ;
 42404                                  ;   OTHER REGS USED
 42405                                  ;       BX, CX, DX, DI
 42406                                  ;
 42407                                  ;   NOTES
 42408                                  ;       None
 42409                                  ;
 42410                                  ;   HISTORY
 42411                                  ;       Created 16-Mar-1992 by JeffPar
 42412                                  ;
 42413                                  ;----------------------------------------------------------------------------
 42414                                  
 42415                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 42416                                  	; (SYSINIT:4AE5h)
 42417                                  
 42418                                  	; 12/12/2022
 42419                                  query_user:
 42420 000040EB F606[5447]04                    test    byte [bQueryOpt],4	; answer no to everything?
 42421                                  	; 01/01/2023
 42422 000040F0 7403                    	jz	short qu_1		;
 42423 000040F2 E9B900                  	jmp	skip_all
 42424                                  	; 12/12/2022
 42425                                  	;;jmp	short skip_all		;
 42426                                  	;jnz	short skip_all
 42427                                  qu_1:
 42428 000040F5 F606[5447]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 42429 000040FA 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 42430 000040FC 50                              push    ax                      ;
 42431 000040FD A0[DC14]                        mov     al,[config_cmd]         ;
 42432 00004100 F606[5447]01                    test    byte [bQueryOpt],1	; query every command?
 42433 00004105 7506                            jnz	short query_all		; yes
 42434 00004107 A880                            test    al,CONFIG_OPTION_QUERY  ;
 42435                                  	; 01/01/2023
 42436 00004109 7502                    	jnz	short query_all		;
 42437                                  	; 12/12/2022
 42438                                  	;;jmp	short do_cmd		;
 42439                                  	;jz	short do_cmd ; cf=0
 42440                                  
 42441                                  	; 01/01/2023
 42442 0000410B 58                      	pop	ax
 42443 0000410C C3                      	retn
 42444                                  
 42445                                  query_all:
 42446                                  
 42447                                  ;   Search for the command code (AL) in "comtab", and then print
 42448                                  ;   out the corresponding keyword, followed by the rest of the actual
 42449                                  ;   line pointed to by ES:SI
 42450                                  
 42451 0000410D 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 42452 0000410E BA[484E]                        mov     dx,_$AutoPrmpt    	;
 42453 00004111 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42454 00004113 7450                            jz	short generic_prompt	; config_cmd must have been 0
 42455                                  
 42456 00004115 88C6                            mov     dh,al                   ; save config_cmd in DH
 42457 00004117 29DB                            sub     bx,bx                   ;
 42458 00004119 BF[A147]                        mov     di,comtab		;
 42459                                  find_match:                             ;
 42460 0000411C 8A1D                            mov     bl,[di]                 ; get size of current keyword
 42461 0000411E 08DB                            or      bl,bl                   ;
 42462 00004120 7425                            jz	short line_print	; end of table
 42463 00004122 47                              inc     di                      ;
 42464 00004123 3A01                            cmp     al,[di+bx]              ; match?
 42465 00004125 7405                            je	short cmd_match		; yes
 42466 00004127 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 42467                                  	; 13/05/2019	
 42468 0000412A EBF0                            jmp	short find_match	; loop
 42469                                  cmd_match:                              ;
 42470 0000412C 8A4DFF                          mov     cl,[di-1]               ;
 42471 0000412F B500                            mov	ch,0                    ;
 42472 00004131 B402                            mov     ah,STD_CON_OUTPUT ; 2
 42473                                  cmd_print:                              ;
 42474 00004133 8A05                            mov     al,[di]                 ;
 42475 00004135 47                              inc     di                      ;
 42476 00004136 88C2                            mov     dl,al                   ;
 42477 00004138 CD21                            int     21h                     ;
 42478 0000413A E2F7                            loop    cmd_print               ;
 42479 0000413C B23D                            mov     dl,'='                  ;
 42480 0000413E 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 42481 00004141 7502                            jne	short cmd_notset	;
 42482 00004143 B220                            mov     dl,' '                  ;
 42483                                  cmd_notset:
 42484 00004145 CD21                            int     21h                     ; '=' looks funny on SET commands
 42485                                  line_print:                             ;
 42486                                  	;lods	byte ptr es:[si]        ;
 42487 00004147 26                              es
 42488 00004148 AC                      	lodsb
 42489 00004149 08C0                    	or      al,al                   ;
 42490 0000414B 7502                            jnz	short non_null		;
 42491 0000414D B020                            mov     al,' '                  ;
 42492                                  non_null:                               ;
 42493 0000414F 3C20                            cmp     al,' '                  ; control code?
 42494 00004151 720F                            jb	short prompt_user	; yes, assume end of line
 42495 00004153 7505                            jne	short non_space		;
 42496                                          ; 10/09/2023
 42497 00004155 263804                  	cmp	[es:si],al ; 20h
 42498                                  	;cmp	byte [es:si],' '	;
 42499 00004158 7208                            jb	short prompt_user	;
 42500                                  non_space:                              ;
 42501 0000415A 88C2                            mov     dl,al                   ;
 42502 0000415C B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 42503 0000415E CD21                            int     21h                     ;
 42504 00004160 EBE5                            jmp	short line_print	;
 42505                                  
 42506                                  prompt_user:                            ;
 42507 00004162 BA[D94D]                        mov     dx,_$InterPrmpt		;
 42508                                  
 42509                                  generic_prompt:
 42510 00004165 E8BB03                          call    print                   ;
 42511                                  input_loop:                             ;
 42512 00004168 B400                            mov     ah,0                    ; read a key
 42513 0000416A CD16                            int     16h                     ;
 42514 0000416C 08C0                            or      al,al                   ; is it a function key?
 42515 0000416E 750F                            jnz	short not_func		; no
 42516 00004170 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 42517 00004173 75F3                            jne	short input_loop	; no
 42518 00004175 A0[E94D]                        mov     al,[_$NO]                  ;
 42519 00004178 800E[5447]04                    or      byte [bQueryOpt],4	; no more queries
 42520 0000417D EB21                            jmp     short legal_char        ;
 42521                                  not_func:
 42522 0000417F 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 42523 00004181 3A06[E94D]                      cmp     al,[_$NO]		; verify character is legal
 42524 00004185 7419                            je	short legal_char	;
 42525 00004187 3A06[E54D]                      cmp     al,[_$YES]		;
 42526 0000418B 7413                            je	short legal_char	;
 42527 0000418D 803E[DC14]00                    cmp     byte [config_cmd],0	;
 42528 00004192 74D4                            je	short input_loop	; don't allow Esc on this query
 42529 00004194 3C1B                            cmp     al,1Bh                  ; Esc?
 42530 00004196 75D0                            jne	short input_loop	;
 42531 00004198 800E[5447]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 42532 0000419D A0[E54D]                        mov     al,[_$YES]
 42533                                  legal_char:                             ;
 42534 000041A0 E888FE                          call    disp_input              ;
 42535 000041A3 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 42536                                  
 42537 000041A4 3A06[E94D]                      cmp     al,[_$NO]		; process line?
 42538 000041A8 7403                            je	short skip_cmd		; no
 42539                                  	; 12/12/2022
 42540 000041AA F8                      	clc
 42541                                  do_cmd:
 42542 000041AB 58                      	pop     ax			;
 42543                                  	; 12/12/2022
 42544                                  	; cf=0
 42545                                  	;clc				; just do the command
 42546 000041AC C3                      	retn
 42547                                  
 42548                                  skip_cmd:
 42549 000041AD 58                      	pop     ax			;
 42550                                  skip_all:
 42551 000041AE B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 42552 000041B0 F9                      	stc
 42553 000041B1 C3                      	retn
 42554                                  
 42555                                  ;----------------------------------------------------------------------------
 42556                                  ;
 42557                                  ;   print_error: displays multi-config error conditions
 42558                                  ;
 42559                                  ;   INPUT
 42560                                  ;    Carry set to pause, clear to not
 42561                                  ;    ES:SI -> current command line in config.sys
 42562                                  ;
 42563                                  ;   OUTPUT
 42564                                  ;       None
 42565                                  ;
 42566                                  ;   OTHER REGS USED
 42567                                  ;       None
 42568                                  ;
 42569                                  ;   NOTES
 42570                                  ;       None
 42571                                  ;
 42572                                  ;   HISTORY
 42573                                  ;       Created 16-Mar-1992 by JeffPar
 42574                                  ;
 42575                                  ;----------------------------------------------------------------------------
 42576                                  
 42577                                  print_error:
 42578 000041B2 50                              push    ax
 42579 000041B3 53                              push    bx
 42580 000041B4 51                              push    cx
 42581 000041B5 52                              push    dx
 42582 000041B6 1E                              push    ds
 42583 000041B7 0E                              push    cs
 42584 000041B8 1F                              pop     ds
 42585 000041B9 9C                              pushf
 42586 000041BA E820FC                          call    get_linenum
 42587 000041BD 891E[AD02]                      mov     [linecount],bx
 42588 000041C1 E8C5E7                          call    error_line
 42589 000041C4 9D                              popf
 42590 000041C5 7319                            jnc	short pe_ret
 42591 000041C7 BA[A34C]                        mov     dx,_$PauseMsg
 42592 000041CA E85603                          call    print
 42593 000041CD B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 42594 000041D0 CD21                            int     21h			; wait for a key
 42595 000041D2 08C0                            or      al,al			; extended key?
 42596 000041D4 7504                            jnz	short pe_1		; no
 42597 000041D6 B407                            mov     ah,07h			; yes
 42598 000041D8 CD21                            int     21h			; eat it too
 42599                                  pe_1:     
 42600 000041DA BA[364B]                	mov     dx,crlfm
 42601 000041DD E84303                          call    print
 42602                                  pe_ret: 
 42603 000041E0 1F                      	pop     ds
 42604 000041E1 5A                              pop     dx
 42605 000041E2 59                              pop     cx
 42606 000041E3 5B                              pop     bx
 42607 000041E4 58                              pop     ax
 42608 000041E5 C3                      	retn
 42609                                  
 42610                                  ;----------------------------------------------------------------------------
 42611                                  
 42612                                  ;   This function is very simple: it merely prepends a "/D" to the
 42613                                  ;   command-line for the shell; this (undocumented) switch disables
 42614                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 42615                                  ;   displayed when there's no AUTOEXEC.BAT.
 42616                                  
 42617                                  disable_autoexec:
 42618                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 42619                                  	; 17/04/2019 - Retro DOS v4.0
 42620                                  
 42621 000041E6 F606[5447]04            	test	byte [bQueryOpt],4
 42622 000041EB 7443                    	jz	short disable_exit
 42623 000041ED F606[4A47]01            	test	byte [dae_flag],1
 42624 000041F2 753C                    	jnz	short disable_exit
 42625 000041F4 800E[4A47]01            	or	byte [dae_flag],1
 42626                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 42627 000041F9 810E[5447]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 42628 000041FF BA4420                  	mov     dx,'D ' ; 2044h
 42629                                  dae_1:
 42630                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42631 00004202 A0[8946]                        mov	al,[def_swchr]
 42632                                  	;mov	al,[command_line-1]     ; get default switchchar
 42633 00004205 08C0                            or      al,al                   ; anything there?
 42634 00004207 7427                            jz	short disable_exit	; no, disable_autoexec already called
 42635 00004209 8A1E[8A46]                      mov     bl,[command_line]       ;
 42636 0000420D B700                            mov     bh,0                    ; BX == command-line length
 42637 0000420F 89D9                            mov     cx,bx                   ;
 42638 00004211 80C303                          add     bl,3                    ;
 42639 00004214 80FB7E                          cmp     bl,126                  ;
 42640 00004217 7717                            ja	short disable_exit	;
 42641 00004219 881E[8A46]                      mov     [command_line],bl       ; update length
 42642 0000421D 81C3[8B46]                      add     bx,command_line+1	; make sure we move the NULL too
 42643 00004221 41                              inc     cx                      ; (just for consistency sake)
 42644                                  disable_loop:                           ;
 42645 00004222 8A67FD                          mov     ah,[bx-3]               ;
 42646 00004225 8827                            mov     [bx],ah                 ;
 42647 00004227 4B                              dec     bx                      ;
 42648 00004228 E2F8                            loop    disable_loop            ;
 42649 0000422A 8847FE                          mov     [bx-2],al               ;
 42650                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 42651 0000422D 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 42652                                          ;mov	byte [command_line-1],0 ;
 42653                                  disable_exit:                           ;
 42654 00004230 C3                              retn
 42655                                  
 42656                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 42657 00004231 803E[5447]01            	cmp     byte [bQueryOpt],1
 42658 00004236 75F8                    	jnz     short disable_exit
 42659 00004238 F606[4A47]02            	test	byte [dae_flag],2
 42660 0000423D 75F1                    	jnz     short disable_exit
 42661 0000423F 800E[4A47]02            	or      byte [dae_flag],2
 42662                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 42663                                  	; 10/09/2023 (BugFix)
 42664 00004244 BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 42665 00004247 EBB9                    	jmp     short dae_1
 42666                                  
 42667                                  ;endif  ;MULTI_CONFIG
 42668                                  
 42669                                  ;%endif	; 02/11/2022
 42670                                  
 42671                                  
 42672                                  ; 19/04/2019 - Retro DOS v4.0
 42673                                  
 42674                                  ;----------------------------------------------------------------------------
 42675                                  ;
 42676                                  ; procedure : delim
 42677                                  ;
 42678                                  ;----------------------------------------------------------------------------
 42679                                  
 42680                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42681                                  ; (SYSINIT:4C45h)
 42682                                  
 42683                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42684                                  ;%if 0
 42685                                  ;;ifdef	MULTI_CONFIG
 42686                                  ;
 42687                                  any_delim:
 42688 00004249 3C0D                    	cmp	al,cr
 42689 0000424B 7427                    	je	short delim_ret
 42690 0000424D 3C0A                    	cmp	al,lf
 42691 0000424F 7423                    	je	short delim_ret
 42692 00004251 3C5B                    	cmp	al,'['
 42693 00004253 741F                    	je	short delim_ret
 42694 00004255 3C5D                    	cmp	al,']'
 42695 00004257 741B                    	je	short delim_ret
 42696                                  ;
 42697                                  ;;endif ;MULTI_CONFIG
 42698                                  ;%endif ; 02/11/2022
 42699                                  
 42700                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42701                                  	; (SYSINIT:3450h)	
 42702                                  delim:
 42703 00004259 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 42704 0000425B 7417                    	je	short delim_ret
 42705                                  
 42706 0000425D 3C00                    	cmp	al,0		; special case for sysinit!!!
 42707 0000425F 7413                    	je	short delim_ret
 42708                                  
 42709                                  org_delim:			; used by organize routine except for getting
 42710 00004261 3C20                    	cmp	al,' '          ; the filename.
 42711 00004263 740F                    	je	short delim_ret
 42712 00004265 3C09                            cmp     al,tab ; 9
 42713 00004267 740B                    	je	short delim_ret
 42714 00004269 3C3D                    	cmp	al,'='
 42715 0000426B 7407                    	je	short delim_ret
 42716 0000426D 3C2C                    	cmp	al,','
 42717 0000426F 7403                    	je	short delim_ret
 42718 00004271 3C3B                    	cmp	al,';'
 42719                                  
 42720                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42721                                  
 42722                                  ; 04/01/2023 - Retro DOS v4.2
 42723                                  ;ifdef	MULTI_CONFIG
 42724                                  ;   Make sure there's no chance of a false EOF indication
 42725 00004273 F8                      	clc
 42726                                  ;endif
 42727                                  	; 02/11/2022
 42728                                  delim_ret:
 42729                                  	; 04/01/2023
 42730                                  	; cf = 0
 42731                                  nl_ret:	; 10/09/2023
 42732 00004274 C3                      	retn
 42733                                  
 42734                                  ;----------------------------------------------------------------------------
 42735                                  ;
 42736                                  ; procedure : newline
 42737                                  ;
 42738                                  ;  newline returns with first character of next line
 42739                                  ;
 42740                                  ;----------------------------------------------------------------------------
 42741                                  
 42742                                  newline:
 42743 00004275 E80600                  	call	getchr			;skip non-control characters
 42744 00004278 72FA                    	jc	short nl_ret
 42745 0000427A 3C0A                    	cmp	al,lf			;look for line feed
 42746 0000427C 75F7                    	jne	short newline
 42747                                  
 42748                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42749                                  	;call	getchr
 42750                                  ;nl_ret:
 42751                                  	;retn
 42752                                  	; 10/09/2023
 42753                                  	;jmp	short getchr
 42754                                  
 42755                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42756                                  %if 1
 42757                                  
 42758                                  ;----------------------------------------------------------------------------
 42759                                  ;
 42760                                  ; procedure : getchr
 42761                                  ;
 42762                                  ;----------------------------------------------------------------------------
 42763                                  
 42764                                  	; 24/10/2022
 42765                                  getchr:
 42766                                  	; 12/12/2022
 42767                                  	;push	cx
 42768                                  	;mov	cx,[count]
 42769                                  	;jcxz	nochar
 42770                                  	; 12/12/2022
 42771 0000427E 833E[5403]01            	cmp	word [count],1 
 42772 00004283 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 42773                                  	
 42774 00004285 8B36[5803]              	mov	si,[chrptr]
 42775 00004289 268A04                  	mov	al,[es:si]
 42776 0000428C FF0E[5403]              	dec	word [count]
 42777 00004290 FF06[5803]              	inc	word [chrptr]
 42778                                  	; 12/12/202
 42779                                  	; cf=0
 42780                                  	;clc
 42781                                  ;get_ret:
 42782                                  	;pop	cx
 42783                                  	;retn
 42784                                  nochar: 
 42785                                  	; 12/12/2022
 42786                                  	; cf=1
 42787                                  	;stc
 42788                                  	;jmp	short get_ret
 42789                                  	
 42790 00004294 C3                      	retn
 42791                                  %endif
 42792                                  
 42793                                  ;----------------------------------------------------------------------------
 42794                                  ; 
 42795                                  ; procedure : mapcase
 42796                                  ;
 42797                                  ;----------------------------------------------------------------------------
 42798                                  
 42799                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 42800                                  
 42801                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 42802                                  	; (SYSINIT:4C7Eh)
 42803                                  mapcase:
 42804 00004295 51                      	push	cx
 42805 00004296 56                      	push	si
 42806 00004297 1E                      	push	ds
 42807                                  
 42808 00004298 06                      	push	es
 42809 00004299 1F                      	pop	ds
 42810                                  
 42811                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42812                                  
 42813                                  ; 04/01/2023 - Retro DOS 4.2
 42814                                  
 42815                                  ;ifdef	MULTI_CONFIG
 42816 0000429A 88C3                    	mov	bl,al			; same cmd code this line
 42817                                  ;else
 42818                                  ;	xor	si,si
 42819                                  ;endif
 42820                                  	; 02/11/2022
 42821                                  	; 04/01/2023 - Retro DOS 4.2
 42822                                  	;xor	si, si
 42823                                  
 42824                                  convloop:
 42825 0000429C AC                      	lodsb
 42826 0000429D 3C61                    	cmp	al,'a'
 42827 0000429F 7209                    	jb	short noconv
 42828 000042A1 3C7A                    	cmp	al,'z'
 42829 000042A3 7705                    	ja	short noconv
 42830 000042A5 2C20                    	sub	al,20h
 42831 000042A7 8844FF                  	mov	[si-1],al
 42832                                  noconv:
 42833                                  
 42834                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42835                                  
 42836                                  ; 04/01/2023 - Retro DOS 4.2
 42837                                  ;ifdef	MULTI_CONFIG
 42838                                  
 42839                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 42840                                  ;   upper-case a line at a time, after we've been able to figure out whether
 42841                                  ;   the line is a SET command or not (since we don't want to upper-case
 42842                                  ;   anything after the "=" in a SET)
 42843                                  ;
 42844 000042AA 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 42845 000042AD 7504                    	jne	short check_eol		; no, just check for end-of-line
 42846 000042AF 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 42847 000042B1 740A                    	je	short convdone		; yes
 42848                                  check_eol:
 42849 000042B3 3C0D                    	cmp	al,cr
 42850 000042B5 7406                    	je	short convdone
 42851 000042B7 3C0A                    	cmp	al,lf
 42852 000042B9 7402                    	je	short convdone
 42853                                  ;endif
 42854                                  	; 02/11/2022
 42855 000042BB E2DF                    	loop	convloop
 42856                                  convdone:
 42857 000042BD 1F                      	pop	ds
 42858 000042BE 5E                      	pop	si
 42859 000042BF 59                      	pop	cx
 42860 000042C0 C3                      	retn
 42861                                  
 42862                                  ;----------------------------------------------------------------------------
 42863                                  ;
 42864                                  ; procedure : round
 42865                                  ;
 42866                                  ; round the values in memlo and memhi to paragraph boundary.
 42867                                  ; perform bounds check.
 42868                                  ;
 42869                                  ;----------------------------------------------------------------------------
 42870                                  
 42871                                  round:
 42872                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42873 000042C1 1E                      	push	ds
 42874 000042C2 0E                      	push	cs
 42875 000042C3 1F                      	pop	ds
 42876                                  
 42877 000042C4 50                      	push	ax
 42878                                  	;mov	ax,[cs:memlo]
 42879 000042C5 A1[6003]                	mov	ax,[memlo]
 42880                                  
 42881 000042C8 E8A1CE                  	call	ParaRound		; para round up
 42882                                  
 42883                                  	;add	[cs:memhi],ax
 42884 000042CB 0106[6203]              	add	[memhi],ax
 42885                                  	;mov	word [cs:memlo],0
 42886 000042CF C706[6003]0000          	mov	word [memlo],0
 42887                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 42888 000042D5 A1[6203]                	mov	ax,[memhi]
 42889                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 42890 000042D8 3B06[A302]              	cmp	ax,[ALLOCLIM]
 42891                                  	;jae	short mem_err
 42892                                  	; 13/04/2024
 42893 000042DC 7322                    	jae	short mem_err2 ; ds = cs
 42894                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 42895 000042DE F606[E114]02            	test	byte [setdevmarkflag],for_devmark ; 2
 42896 000042E3 7416                    	jz	short skip_set_devmarksize
 42897 000042E5 06                      	push	es
 42898 000042E6 56                      	push	si
 42899                                  	;mov	si,[cs:devmark_addr]
 42900 000042E7 8B36[DF14]              	mov	si,[devmark_addr]
 42901 000042EB 8EC6                    	mov	es,si
 42902 000042ED 29F0                    	sub	ax,si
 42903 000042EF 48                      	dec	ax
 42904                                  	;mov	[es:3],ax
 42905 000042F0 26A30300                	mov	[es:devmark.size],ax	; paragraph
 42906                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 42907 000042F4 8026[E114]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 42908 000042F9 5E                      	pop	si
 42909 000042FA 07                      	pop	es
 42910                                  skip_set_devmarksize:
 42911 000042FB 58                      	pop	ax
 42912                                  
 42913                                  	; 10/09/2023
 42914 000042FC 1F                      	pop	ds
 42915                                  
 42916                                  	; 11/12/2022
 42917                                  	; cf = 0
 42918                                  	; 02/11/2022
 42919                                  	;clc	; ? (not needed here)	; clear carry
 42920 000042FD C3                      	retn
 42921                                  
 42922                                  ;----------------------------------------------------------------------------
 42923                                  
 42924                                  mem_err:
 42925                                  	; 11/12/2022
 42926 000042FE 0E                      	push	cs
 42927 000042FF 1F                      	pop	ds
 42928                                  mem_err2:
 42929 00004300 BA[0F4C]                	mov	dx,badmem
 42930                                  	;push	cs
 42931                                  	;pop	ds
 42932 00004303 E81D02                  	call	print
 42933 00004306 E99CCE                  	jmp	stall
 42934                                  
 42935                                  ;----------------------------------------------------------------------------
 42936                                  ;
 42937                                  ; procedure : calldev
 42938                                  ;
 42939                                  ;----------------------------------------------------------------------------
 42940                                  
 42941                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42942                                  	; (SYSINIT:34E0h)
 42943                                  
 42944                                  	; 13/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 42945                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4F3Eh)
 42946                                  
 42947                                  calldev:
 42948 00004309 2E8E1E[951F]            	mov	ds,[cs:DevEntry+2]
 42949 0000430E 2E031E[931F]            	add	bx,[cs:DevEntry]	; do a little relocation
 42950 00004313 8B07                    	mov	ax,[bx]
 42951                                  
 42952 00004315 2EFF36[931F]            	push	word [cs:DevEntry]
 42953 0000431A 2EA3[931F]              	mov	[cs:DevEntry],ax
 42954 0000431E BB[6803]                	mov	bx,packet
 42955 00004321 2EFF1E[931F]            	call	far [cs:DevEntry]
 42956 00004326 2E8F06[931F]            	pop	word [cs:DevEntry]
 42957 0000432B C3                      	retn
 42958                                  
 42959                                  ;----------------------------------------------------------------------------
 42960                                  ;
 42961                                  ; procedure : todigit
 42962                                  ;
 42963                                  ;----------------------------------------------------------------------------
 42964                                  
 42965                                  todigit:
 42966 0000432C 2C30                    	sub	al,'0'
 42967                                  	;jb	short notdig  ; 02/11/2022
 42968                                  	; 12/12/2022
 42969 0000432E 7203                    	jb	short notdig2
 42970                                  	;cmp	al,9
 42971                                  	;ja	short notdig
 42972                                  	;clc
 42973                                  	;retn
 42974                                  	; 12/12/2022
 42975 00004330 3C0A                    	cmp	al,10
 42976 00004332 F5                      	cmc
 42977                                  notdig:
 42978                                  	;stc
 42979                                  notdig2:
 42980 00004333 C3                      	retn
 42981                                  
 42982                                  ;----------------------------------------------------------------------------
 42983                                  ;
 42984                                  ; procedure : getnum
 42985                                  ;
 42986                                  ; getnum parses a decimal number.
 42987                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 42988                                  ; error), if number is bad carry is set, zero is set, ax=0.
 42989                                  ;
 42990                                  ;----------------------------------------------------------------------------
 42991                                  
 42992                                  getnum:
 42993 00004334 53                      	push	bx
 42994 00004335 31DB                    	xor	bx,bx			; running count is zero
 42995                                  b2:
 42996 00004337 E8F2FF                  	call	todigit 		; do we have a digit ?
 42997 0000433A 7247                    	jc	short badnum		; no, bomb
 42998                                  
 42999 0000433C 93                      	xchg	ax,bx			; put total in ax
 43000 0000433D 53                      	push	bx			; save digit (0 to 9)
 43001                                  	;mov	bx,10			; base of arithmetic
 43002                                  	; 12/12/2022
 43003 0000433E B30A                    	mov	bl,10
 43004 00004340 F7E3                    	mul	bx			; shift by one decimal digit
 43005 00004342 5B                      	pop	bx			; get back digit (0 to 9)
 43006 00004343 00D8                    	add	al,bl			; get total
 43007 00004345 80D400                  	adc	ah,0			; make that 16 bits
 43008 00004348 7239                    	jc	short badnum		; too big a number
 43009                                  
 43010 0000434A 93                      	xchg	ax,bx			; stash total
 43011                                  
 43012 0000434B E830FF                  	call	getchr			;get next digit
 43013 0000434E 722D                    	jc	short b1		; no more characters
 43014 00004350 3C20                    	cmp	al,' ' 			; space?
 43015 00004352 741F                    	je	short b15		; then end of digits
 43016 00004354 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 43017 00004356 741B                    	je	short b15		; then end of digits.
 43018 00004358 3C09                    	cmp	al, tab ; 9		; tab
 43019 0000435A 7417                    	je	short b15
 43020 0000435C 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 43021 00004361 7410                    	je	short b15
 43022 00004363 3C2F                    	cmp	al,'/'			; see if another switch follows
 43023                                  	; 12/12/2022
 43024                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43025                                  	;nop				; cas - remnant of old bad code
 43026                                  	;nop
 43027 00004365 740C                    	je	short b15
 43028 00004367 3C0A                    	cmp	al,lf			; line-feed?
 43029 00004369 7408                    	je	short b15
 43030 0000436B 3C0D                    	cmp	al,cr			; carriage return?
 43031 0000436D 7404                    	je	short b15
 43032 0000436F 08C0                    	or	al,al			; end of line separator?
 43033 00004371 75C4                    	jnz	short b2		; no, try as a valid char...
 43034                                  b15:
 43035 00004373 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 43036 00004378 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 43037                                  b1:
 43038 0000437D 89D8                    	mov	ax,bx			; get proper count
 43039 0000437F 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 43040 00004381 5B                      	pop	bx
 43041 00004382 C3                      	retn
 43042                                  badnum:
 43043                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43044                                  	;mov	byte [cs:sepchr],0
 43045 00004383 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 43046                                  	; 12 /12/2022
 43047 00004385 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 43048 00004389 5B                      	pop	bx
 43049 0000438A F9                      	stc				; and carry set
 43050 0000438B C3                      	retn
 43051                                  
 43052                                  ;****************************************************************************
 43053                                  
 43054                                  setdoscountryinfo:
 43055                                  
 43056                                  ;----------------------------------------------------------------------------
 43057                                  ;input: es:di -> pointer to dos_country_cdpg_info
 43058                                  ;	ds:0  -> buffer.
 43059                                  ;	si = 0
 43060                                  ;	ax = country id
 43061                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 43062                                  ;	bx = file handle
 43063                                  ;	this routine can handle maximum 438 country_data entries.
 43064                                  ;
 43065                                  ;output: dos_country_cdpg_info set.
 43066                                  ;	 carry set if any file read failure or wrong information in the file.
 43067                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 43068                                  ;	 codepage_id in the file.
 43069                                  ;----------------------------------------------------------------------------
 43070                                  
 43071                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43072                                  	; (SYSINIT:4D83h)
 43073                                  
 43074                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43075                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 43076                                  
 43077 0000438C 57                      	push	di
 43078 0000438D 50                      	push	ax
 43079 0000438E 52                      	push	dx
 43080                                  
 43081 0000438F 31C9                    	xor	cx,cx
 43082 00004391 31D2                    	xor	dx,dx
 43083 00004393 B80002                  	mov	ax,512			;read 512 bytes
 43084 00004396 E84301                  	call	readincontrolbuffer	;read the file header
 43085 00004399 724A                    	jc	short setdosdata_fail
 43086                                  
 43087 0000439B 06                      	push	es
 43088 0000439C 56                      	push	si
 43089                                  
 43090 0000439D 0E                      	push	cs
 43091 0000439E 07                      	pop	es
 43092                                  
 43093 0000439F BF[EF45]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 43094 000043A2 B90800                  	mov	cx,8			;length of the signature
 43095 000043A5 F3A6                    	repz	cmpsb
 43096                                  
 43097 000043A7 5E                      	pop	si
 43098 000043A8 07                      	pop	es
 43099 000043A9 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 43100                                  
 43101 000043AB 83C612                  	add	si,18			;si -> county info type
 43102 000043AE 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 43103 000043B1 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 43104                                  
 43105 000043B3 46                      	inc	si			;si -> file offset
 43106 000043B4 8B14                    	mov	dx,[si]			;get the info file offset.
 43107 000043B6 8B4C02                  	mov	cx,[si+2]
 43108 000043B9 B80018                  	mov	ax,6144			;read 6144 bytes.
 43109 000043BC E81D01                  	call	readincontrolbuffer	;read info
 43110 000043BF 7224                    	jc	short setdosdata_fail
 43111                                  
 43112 000043C1 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 43113 000043C3 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 43114 000043C7 771C                    	ja	short setdosdata_fail
 43115                                  
 43116 000043C9 46                      	inc	si
 43117 000043CA 46                      	inc	si			;si -> entry information packet
 43118 000043CB 5A                      	pop	dx			;restore code page id
 43119 000043CC 58                      	pop	ax			;restore country id
 43120 000043CD 5F                      	pop	di
 43121                                  
 43122                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 43123 000043CE 3B4402                  	cmp	ax,[si+2]		;compare country_id
 43124 000043D1 7509                    	jne	short setdoscntry_next
 43125                                  
 43126                                  	;cmp	dx,0			;no user specified code page ?
 43127                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 43128                                  	; 10/09/2023
 43129 000043D3 09D2                    	or	dx,dx ; cmp dx,0
 43130 000043D5 7413                    	jz	short setdoscntry_any_codepage
 43131 000043D7 3B5404                  	cmp	dx,[si+4]		;compare code page id
 43132 000043DA 7411                    	je	short setdoscntry_got_it
 43133                                  
 43134                                  setdoscntry_next:
 43135 000043DC 0334                    	add	si,[si]			;next entry
 43136 000043DE 46                      	inc	si
 43137 000043DF 46                      	inc	si			;take a word for size of entry itself
 43138 000043E0 E2EC                    	loop	setdoscntry_find
 43139                                  
 43140                                  	;mov	cx,-1			;signals that bad country id entered.
 43141                                  	; 10/09/2023
 43142 000043E2 49                      	dec	cx ; 0 -> -1
 43143                                  setdoscntry_fail:
 43144 000043E3 F9                      	stc
 43145 000043E4 C3                      	retn
 43146                                  
 43147                                  setdosdata_fail:
 43148 000043E5 5E                      	pop	si
 43149 000043E6 59                      	pop	cx
 43150 000043E7 5F                      	pop	di
 43151 000043E8 EBF9                    	jmp	short setdoscntry_fail
 43152                                  
 43153                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 43154 000043EA 8B5404                  	mov	dx,[si+4]
 43155                                  
 43156                                  setdoscntry_got_it:			;found the matching entry
 43157 000043ED 2E8916[F745]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 43158 000043F2 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 43159 000043F5 8B4C0C                  	mov	cx,[si+12]
 43160 000043F8 B80002                  	mov	ax,512 			;read 512 bytes
 43161 000043FB E8DE00                  	call	readincontrolbuffer
 43162 000043FE 72E3                    	jc	short setdoscntry_fail
 43163                                  
 43164 00004400 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 43165 00004402 46                      	inc	si
 43166 00004403 46                      	inc	si			;si -> first entry
 43167                                  
 43168                                  setdoscntry_data:
 43169 00004404 57                      	push	di			;es:di -> dos_country_cdpg_info
 43170 00004405 51                      	push	cx			;save # of entry left
 43171 00004406 56                      	push	si			;si -> current entry in control buffer
 43172                                  
 43173 00004407 8A4402                  	mov	al,[si+2]		;get data entry id
 43174 0000440A E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 43175 0000440D 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 43176                                  
 43177 0000440F 8B5404                  	mov	dx,[si+4]		;get offset of data
 43178 00004412 8B4C06                  	mov	cx,[si+6]
 43179 00004415 B80042                  	mov	ax,4200h
 43180 00004418 F9                      	stc
 43181 00004419 CD21                    	int	21h			;move pointer
 43182 0000441B 72C8                    	jc	short setdosdata_fail
 43183                                  
 43184 0000441D BA0002                  	mov	dx,512			;start of data buffer
 43185 00004420 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 43186 00004423 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 43187 00004425 F9                      	stc
 43188 00004426 CD21                    	int	21h			;read the country.sys data
 43189 00004428 72BB                    	jc	short setdosdata_fail 	;read failure
 43190                                  
 43191 0000442A 39C8                    	cmp	ax,cx
 43192 0000442C 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 43193                                  
 43194 0000442E 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 43195 00004431 8B4C06                  	mov	cx,[si+6]
 43196 00004434 B80042                  	mov	ax,4200h
 43197 00004437 F9                      	stc
 43198 00004438 CD21                    	int	21h			;move pointer back again
 43199 0000443A 72A9                    	jc	short setdosdata_fail
 43200                                  
 43201 0000443C 56                      	push	si
 43202 0000443D BE0802                  	mov	si,(512+8)		;get length of the data from the file
 43203 00004440 8B0C                    	mov	cx,[si]
 43204 00004442 5E                      	pop	si
 43205 00004443 BA0002                  	mov	dx,512			;start of data buffer
 43206 00004446 83C10A                  	add	cx,10			;signature + a word for the length itself
 43207 00004449 B43F                    	mov	ah,3Fh			;read the data from the file.
 43208 0000444B F9                      	stc
 43209 0000444C CD21                    	int	21h
 43210 0000444E 7295                    	jc	short setdosdata_fail
 43211                                  
 43212 00004450 39C8                    	cmp	ax,cx
 43213 00004452 7591                    	jne	short setdosdata_fail
 43214                                  
 43215 00004454 8A4402                  	mov	al,[si+2]		;save data id for future use.
 43216 00004457 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 43217 0000445A 8B0C                    	mov	cx,[si]			;get the length of the file
 43218 0000445C 41                      	inc	cx			;take care of a word for lenght of tab
 43219 0000445D 41                      	inc	cx			;itself.
 43220 0000445E 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 43221 00004462 7781                    	ja	short setdosdata_fail
 43222                                  
 43223                                  	;if	bugfix
 43224 00004464 E83100                  	call	setdbcs_before_copy
 43225                                  	;endif
 43226                                  
 43227 00004467 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 43228 00004469 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 43229                                  
 43230 0000446B 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 43231                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 43232 0000446F 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 43233                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 43234                                  	
 43235 00004473 57                      	push	di			;save di
 43236                                  
 43237                                  	;push	ax
 43238                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 43239                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 43240                                  	;pop	ax
 43241                                  	; 10/09/2023
 43242 00004474 2EFF36[F745]            	push	word [cs:cntrycodepage_id]
 43243 00004479 8F4404                  	pop	word [si+4]
 43244                                  
 43245                                  setdoscntry_mov:
 43246 0000447C F3A4                    	rep	movsb			;copy the table into dos
 43247 0000447E 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 43248 00004480 7509                    	jne	short setdoscntry_data_next
 43249                                  
 43250 00004482 5F                      	pop	di			;restore di
 43251 00004483 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 43252                                  	;pop	word [es:di+26]		;restore
 43253 00004487 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 43254                                  	;pop	word [es:di+24]
 43255                                  
 43256                                  setdoscntry_data_next:
 43257 0000448B 5E                      	pop	si			;restore control buffer pointer
 43258 0000448C 59                      	pop	cx			;restore # of entries left
 43259 0000448D 5F                      	pop	di			;restore pointer to dso_country_cdpg
 43260 0000448E 0334                    	add	si,[si]			;try to get the next entry
 43261 00004490 46                      	inc	si
 43262 00004491 46                      	inc	si			;take a word of entry length itself
 43263 00004492 49                      	dec	cx
 43264                                  	; 10/09/2023
 43265 00004493 741B                    	jz	short setdoscntry_ok 
 43266                                  	;cmp	cx,0
 43267                                  	;je	short setdoscntry_ok
 43268 00004495 E96CFF                  	jmp	setdoscntry_data
 43269                                  
 43270                                  	; 18/12/2022
 43271                                  ;setdoscntry_ok:
 43272                                  	;retn
 43273                                  
 43274                                  ;----------------------------------------------------------------------------
 43275                                  	
 43276                                  	;if	bugfix
 43277                                  
 43278                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43279                                  
 43280                                  setdbcs_before_copy:
 43281 00004498 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 43282 0000449A 7514                    	jne	short sdbcsbc		; jump if not
 43283                                  	
 43284                                  	; 10/09/2023
 43285 0000449C 50                      	push	ax
 43286 0000449D 31C0                    	xor	ax,ax
 43287 0000449F 263905                  	cmp	[es:di],ax ; 0
 43288 000044A2 740B                    	je	short sdbcsbc_pop
 43289                                  	
 43290                                  	;cmp	word [es:di],0		; zero byte data block?
 43291                                  	;je	short sdbcsbc		; jump if so
 43292                                  
 43293 000044A4 57                      	push	di
 43294                                  	; 10/09/2023
 43295                                  	;push	ax
 43296 000044A5 51                      	push	cx
 43297 000044A6 268B0D                  	mov	cx,[es:di]		; load block length
 43298                                  	;add	di,2			; points actual data
 43299 000044A9 47                      	inc	di
 43300 000044AA 47                      	inc	di
 43301                                  	;xor	al,al			; fill bytes
 43302 000044AB F3AA                    	rep	stosb			; clear data block
 43303 000044AD 59                      	pop	cx
 43304                                  	;pop	ax
 43305 000044AE 5F                      	pop	di
 43306                                  
 43307                                  sdbcsbc_pop:	; 10/09/2023
 43308 000044AF 58                      	pop	ax
 43309                                  sdbcsbc:
 43310                                  setdoscntry_ok:	; 18/12/2022
 43311 000044B0 C3                      	retn
 43312                                  
 43313                                  	;endif
 43314                                  
 43315                                  ;----------------------------------------------------------------------------
 43316                                  
 43317                                  getcountrydestination:
 43318                                  
 43319                                  ;----------------------------------------------------------------------------
 43320                                  ;get the destination address in the dos country info table.
 43321                                  ;
 43322                                  ;input: al - data id
 43323                                  ;	es:di -> dos_country_cdpg_info
 43324                                  ;on return:
 43325                                  ;	es:di -> destination address of the matching data id
 43326                                  ;	carry set if no matching data id found in dos.
 43327                                  ;----------------------------------------------------------------------------
 43328                                  
 43329                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43330                                  	; (SYSINIT:4EB2h)
 43331                                  
 43332                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43333                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 43334                                  
 43335 000044B1 51                      	push	cx
 43336                                  	;add	di,74
 43337 000044B2 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 43338                                  					;skip the reserved area, syscodepage etc.
 43339 000044B5 268B0D                  	mov	cx,[es:di]		;get the number of entries
 43340 000044B8 47                      	inc	di
 43341 000044B9 47                      	inc	di			;si -> the first start entry id
 43342                                  
 43343                                  getcntrydest:
 43344 000044BA 263805                  	cmp	byte [es:di],al
 43345 000044BD 7413                    	je	short getcntrydest_ok
 43346                                  
 43347 000044BF 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 43348 000044C3 7405                    	je	short getcntrydest_1
 43349                                  
 43350 000044C5 83C705                  	add	di,5			;next data id
 43351 000044C8 EB03                    	jmp	short getcntrydest_loop
 43352                                  
 43353                                  getcntrydest_1:
 43354                                  	;add	di,41
 43355 000044CA 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 43356                                  getcntrydest_loop:
 43357 000044CD E2EB                    	loop	getcntrydest
 43358 000044CF F9                      	stc
 43359                                  	;jmp	short getcntrydest_exit
 43360                                  getcntrydest_exit:
 43361                                  	; 10/09/2023
 43362 000044D0 59                      	pop	cx
 43363 000044D1 C3                      	retn
 43364                                  
 43365                                  getcntrydest_ok:
 43366                                  	; 10/09/2023
 43367 000044D2 47                      	inc	di
 43368                                  
 43369                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 43370                                  ;	jne	short getcntrydest_ok1
 43371                                  ;
 43372                                  ;	;inc	di			;now di -> cccountryinfolen
 43373                                  ;	jmp	short getcntrydest_exit
 43374                                  
 43375                                  	; 10/09/2023
 43376 000044D3 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 43377 000044D5 74F9                    	je	short getcntrydest_exit
 43378                                  
 43379                                  getcntrydest_ok1:
 43380                                  	;les	di,[es:di+1]		;get the destination in es:di
 43381                                  	; 10/09/2023
 43382 000044D7 26C43D                  	les	di,[es:di]
 43383                                  ;getcntrydest_exit:
 43384 000044DA 59                      	pop	cx
 43385 000044DB C3                      	retn
 43386                                  
 43387                                  ;----------------------------------------------------------------------------
 43388                                  
 43389                                  readincontrolbuffer:
 43390                                  
 43391                                  ;----------------------------------------------------------------------------
 43392                                  ;move file pointer to cx:dx
 43393                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 43394                                  ;si will be set to 0 hence ds:si points to the control buffer.
 43395                                  ;
 43396                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 43397                                  ;	 be moved.
 43398                                  ;	 ax - # of bytes to read
 43399                                  ;	 bx - file handle
 43400                                  ;	 ds - buffer seg.
 43401                                  ;return: the control data information is read into ds:0 - ds:0200.
 43402                                  ;	 cx,dx value destroyed.
 43403                                  ;	 carry set if error in reading file.
 43404                                  ;----------------------------------------------------------------------------
 43405                                  
 43406 000044DC 50                      	push	ax			;# of bytes to read
 43407 000044DD B80042                  	mov	ax,4200h
 43408 000044E0 F9                      	stc
 43409 000044E1 CD21                    	int	21h			;move pointer
 43410 000044E3 59                      	pop	cx			;# of bytes to read
 43411 000044E4 7209                    	jc	short ricb_exit
 43412                                  
 43413 000044E6 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 43414 000044E8 31F6                    	xor	si,si
 43415 000044EA B43F                    	mov	ah,3Fh			;read into the buffer
 43416 000044EC F9                      	stc
 43417 000044ED CD21                    	int	21h			;should be less than 1024 bytes.
 43418                                  ricb_exit:
 43419 000044EF C3                      	retn
 43420                                  
 43421                                  ;----------------------------------------------------------------------------
 43422                                  
 43423                                  ;! set_country_path procedure is not called from anywhere !
 43424                                  ; Erdogan Tan - 04/08/2023
 43425                                  %if 0
 43426                                  
 43427                                  set_country_path:
 43428                                  
 43429                                  ;----------------------------------------------------------------------------
 43430                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 43431                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 43432                                  ;     assumes current directory is the root directory.
 43433                                  ;out: ds:di -> full path (cntry_drv).
 43434                                  ;     set the cntry_drv string from the country=,,path command.
 43435                                  ;     ds, es, si value saved.
 43436                                  ;----------------------------------------------------------------------------
 43437                                  
 43438                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43439                                  	; (SYSINIT:4EF4h)
 43440                                  
 43441                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43442                                  	; (Retrodos v5.0 Pre-Works)
 43443                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 43444                                  
 43445                                  	push	si
 43446                                  
 43447                                  	push	ds			;switch ds, es
 43448                                  	push	es
 43449                                  	pop	ds
 43450                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 43451                                  
 43452                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 43453                                  	jc	short scp_default_drv 	;no, use current default drive.
 43454                                  
 43455                                  	mov	al,[si]
 43456                                  	inc	si
 43457                                  	inc	si			;si -> next char after ":"
 43458                                  	jmp	short scp_setdrv
 43459                                  
 43460                                  scp_default_drv:
 43461                                  	mov	ah,19h
 43462                                  	int	21h
 43463                                  	add	al,"A"			;convert it to a character.
 43464                                  
 43465                                  scp_setdrv:
 43466                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 43467                                  	mov	di,cntry_path
 43468                                  	mov	al,[si]
 43469                                  	cmp	al, "\"
 43470                                  	je	short scp_root_dir
 43471                                  
 43472                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 43473                                  	;je	short scp_root_dir
 43474                                  	;jmp	short scp_path
 43475                                  	; 04/01/2023
 43476                                  	jne	short scp_path
 43477                                  
 43478                                  scp_root_dir:
 43479                                  	dec	di			;di -> cntry_root
 43480                                  scp_path:
 43481                                  	call	move_asciiz		;copy it
 43482                                  
 43483                                  	mov	di,cntry_drv
 43484                                  scpath_exit:
 43485                                  
 43486                                  	push	ds			;switch ds, es
 43487                                  	push	es
 43488                                  	pop	ds
 43489                                  	pop	es			;ds, es value restored
 43490                                  
 43491                                  	pop	si
 43492                                  	retn
 43493                                  
 43494                                  ;----------------------------------------------------------------------------
 43495                                  
 43496                                  chk_drive_letter:
 43497                                  
 43498                                  ;check if ds:[si] is a drive letter followed by ":".
 43499                                  ;assume that every alpha character is already converted to upper case.
 43500                                  ;carry set if not.
 43501                                  
 43502                                  	; 04/01/2023 - Retrodos v4.2
 43503                                  
 43504                                  	push	ax
 43505                                  	cmp	byte [si],"A"
 43506                                  	;jb	short cdletter_no
 43507                                  	jb	short cdletter_exit
 43508                                  	cmp	byte [si],"Z"
 43509                                  	ja	short cdletter_no
 43510                                  	cmp	byte [si+1],":"
 43511                                  	;jne	short cdletter_no
 43512                                  	;jmp	short cdletter_exit
 43513                                  	; 04/01/2023
 43514                                  	je	short cdletter_exit
 43515                                  
 43516                                  cdletter_no:
 43517                                  	stc
 43518                                  cdletter_exit:
 43519                                  	pop	ax
 43520                                  	retn
 43521                                  
 43522                                  %endif
 43523                                  
 43524                                  ;----------------------------------------------------------------------------
 43525                                  
 43526                                  move_asciiz:
 43527                                  
 43528                                  ;in: ds:si -> source es:di -> target
 43529                                  ;out: copy the string until 0.
 43530                                  ;assumes there exists a 0.
 43531                                  
 43532                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43533                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 43534                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 43535                                  
 43536                                  masciiz_loop:
 43537                                  	; 10/09/2023
 43538 000044F0 F604FF                  	test	byte [si],0FFh
 43539 000044F3 A4                      	movsb
 43540                                  	;cmp	byte [si-1],0	; was it 0?
 43541                                  	;jne	short masciiz_loop
 43542 000044F4 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 43543 000044F6 C3                      	retn
 43544                                  
 43545                                  ;----------------------------------------------------------------------------
 43546                                  
 43547                                  ;	ds:dx points to string to output (asciz)
 43548                                  ;
 43549                                  ;	prints <badld_pre> <string> <badld_post>
 43550                                  
 43551                                  badfil:
 43552 000044F7 0E                      	push	cs
 43553 000044F8 07                      	pop	es
 43554                                  
 43555 000044F9 89D6                    	mov	si,dx
 43556                                  badload:
 43557 000044FB BA[794B]                	mov	dx,badld_pre	; want to print config error
 43558 000044FE BB[364B]                	mov	bx,crlfm
 43559                                  prnerr:
 43560 00004501 0E                      	push	cs
 43561 00004502 1F                      	pop	ds ; *
 43562 00004503 E81D00                  	call	print
 43563                                  prn1:
 43564 00004506 268A14                  	mov	dl,[es:si]
 43565 00004509 08D2                    	or	dl,dl
 43566 0000450B 7407                    	jz	short prn2
 43567 0000450D B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 43568 0000450F CD21                    	int	21h
 43569 00004511 46                      	inc	si
 43570 00004512 EBF2                    	jmp	short prn1
 43571                                  prn2:
 43572 00004514 89DA                    	mov	dx,bx
 43573 00004516 E80A00                  	call	print
 43574                                  	; 11/12/2022
 43575                                  	; ds = cs ; *
 43576 00004519 803E[5303]01            	cmp	byte [donotshownum],1
 43577                                  				; suppress line number when handling command.com
 43578                                  	;cmp	byte [cs:donotshownum],1 
 43579 0000451E 7407                    	je	short prnexit
 43580                                  	
 43581                                  	; 18/12/2022
 43582                                  	;call	error_line
 43583 00004520 E966E4                  	jmp	error_line
 43584                                  ;prnexit:
 43585                                  	;retn
 43586                                  
 43587                                  ;----------------------------------------------------------------------------
 43588                                  
 43589                                  print:
 43590 00004523 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 43591 00004525 CD21                    	int	21h
 43592                                  prnexit:	; 18/12/2022
 43593 00004527 C3                      	retn
 43594                                  
 43595                                  ;----------------------------------------------------------------------------
 43596                                  
 43597                                  ;  open device pointed to by dx, al has access code
 43598                                  ;   if unable to open do a device open null device instead
 43599                                  
 43600                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43601                                  	; (SYSINIT:3764h)
 43602                                  open_dev:
 43603 00004528 E80500                  	call	open_file
 43604 0000452B 7309                    	jnc	short open_dev3
 43605                                  
 43606                                  open_dev1:
 43607 0000452D BA[9045]                	mov	dx,nuldev
 43608                                  	; 18/12/2022
 43609                                  	;call	open_file
 43610                                  ;of_retn:
 43611                                  	;retn
 43612                                  	; 18/12/2022
 43613                                  	;jmp	short open_file
 43614                                  open_file:
 43615 00004530 B43D                    	mov	ah,OPEN	; 3Dh
 43616 00004532 F9                      	stc
 43617 00004533 CD21                    	int	21h
 43618                                  of_retn:	; 18/12/2022
 43619 00004535 C3                      	retn
 43620                                  
 43621                                  open_dev3:
 43622 00004536 89C3                    	mov	bx,ax			; handle from open to bx
 43623                                  	;;xor	ax,ax			; get device info
 43624                                  	;;mov	ah,IOCTL ; 44h
 43625                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 43626                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43627                                  	;xor	ax,ax
 43628                                  	;mov	ah,44h	; IOCTL
 43629                                  	; 11/12/2022
 43630 00004538 B80044                  	mov	ax,4400h ; IOCTL<<8 
 43631                                  
 43632 0000453B CD21                    	int	21h
 43633                                  
 43634 0000453D F6C280                  	test	dl,10000000b ; 80h
 43635 00004540 75F3                    	jnz	short of_retn
 43636                                  
 43637 00004542 B43E                    	mov	ah,CLOSE ; 3Eh
 43638 00004544 CD21                    	int	21h
 43639 00004546 EBE5                    	jmp	short open_dev1
 43640                                  
 43641                                  ;----------------------------------------------------------------------------
 43642                                  
 43643                                  ; 18/12/2022
 43644                                  %if 0
 43645                                  open_file:
 43646                                  	mov	ah,OPEN	; 3Dh
 43647                                  	stc
 43648                                  	int	21h
 43649                                  	retn
 43650                                  %endif
 43651                                  
 43652                                  ;----------------------------------------------------------------------------
 43653                                  
 43654                                  ; test int24. return back to dos with the fake user response of "fail"
 43655                                  
 43656                                  int24:
 43657 00004548 B003                    	mov	al,3			; fail the system call
 43658 0000454A CF                      	iret				; return back to dos.
 43659                                  
 43660                                  ; 19/04/2019 - Retro DOS v4.0
 43661                                  
 43662                                  ;----------------------------------------------------------------------------
 43663                                  ; DATA
 43664                                  ;----------------------------------------------------------------------------
 43665                                  
 43666                                  ;include copyrigh.inc			; copyright statement
 43667                                  
 43668                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 43669                                  
 43670                                  ;MsDosVersion6Copyr:
 43671                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 43672                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 43673                                  
 43674                                  ; 22/10/2022
 43675                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 43676                                  
 43677                                  ; 28/12/2022
 43678                                  %if 0
 43679                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43680                                  MsDosVersion5Copyr:
 43681                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 43682                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 43683                                  %endif
 43684                                  
 43685                                  ; 13/04/2024 - Retro DOS v5.0
 43686                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:51EAh	(IBMBIO.COM offset 42266)
 43687                                  %if 0
 43688                                  IBMDOSV71COPYR:
 43689                                  	db 'IBM DOS Version 7.1 (C)Copyright 1981-2002 IBM Corporation '
 43690                                  	db 'Licensed Material - Property of IBM All rights reserved '
 43691                                  %endif
 43692                                  
 43693                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43694                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 43695                                  ; 20/04/2019 - Retro DOS v4.0
 43696                                  ;BOOTMES:
 43697                                  ;	db      13
 43698                                  ;	db      10
 43699                                  ;	db      "MS-DOS version "
 43700                                  ;	db      MAJOR_VERSION + "0"
 43701                                  ;	db      "."
 43702                                  ;	db      (MINOR_VERSION / 10) + "0"
 43703                                  ;	db      (MINOR_VERSION % 10) + "0"
 43704                                  ;	db      13,10
 43705                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 43706                                  ;	; 22/10/2022
 43707                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 43708                                  ;	;
 43709                                  ;	db	0
 43710                                  
 43711                                  	; 01/01/2023 - Retro DOS v4.2
 43712                                  
 43713                                  	; 28/12/2022 - Retro DOS v4.1
 43714                                  ;MsDosVersion5Copyr:
 43715                                  ;  	db	13,10,"MS DOS Version 5.0"
 43716                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 43717                                  
 43718                                  	; 12/12/2022
 43719 0000454B 00                      	db	0
 43720                                  ; 12/12/2022
 43721                                  BOOTMES:
 43722 0000454C 0D0A                    	db	13,10
 43723                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 43724                                  	; 28/12/2022
 43725                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 43726                                  	; 01/01/2023
 43727                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 43728                                  	; 30/12/2023
 43729                                  	;db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 43730                                  	; 09/03/2025
 43731 0000454E 4D696E69444F532076-     	db	"MiniDOS v1.0 (Simplified PCDOS 7.1) "
 43731 00004557 312E30202853696D70-
 43731 00004560 6C6966696564205043-
 43731 00004569 444F5320372E312920 
 43732                                  	
 43733 00004572 0D0A                    	db	13,10
 43734                                  	;db	"by Erdogan Tan [2024] " ; 01/01/2024
 43735 00004574 6279204572646F6761-     	db	"by Erdogan Tan [2025] " ; 09/03/2025
 43735 0000457D 6E2054616E205B3230-
 43735 00004586 32355D20           
 43736 0000458A 0D0A                    	db	13,10
 43737 0000458C 0D0A2400                	db	13,10,"$",0
 43738                                  
 43739 00004590 4E554C00                nuldev:	db	"NUL",0
 43740 00004594 434F4E00                condev:	db	"CON",0
 43741 00004598 41555800                auxdev:	db	"AUX",0
 43742 0000459C 50524E00                prndev:	db	"PRN",0
 43743                                  
 43744                                  ;IFDEF	CONFIGPROC
 43745 000045A0 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 43745 000045A9 595300             
 43746                                  
 43747 000045AC 413A                    cntry_drv:  db	"A:"
 43748 000045AE 5C                      cntry_root: db	"\"
 43749 000045AF 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 43749 000045B8 595300             
 43750                                  	    ;db	52 dup (0)
 43751 000045BB 00<rep 34h>             	    times 52 db 0	
 43752                                  
 43753                                  country_file_signature:
 43754 000045EF FF434F554E545259        	db	0FFh,'COUNTRY'
 43755                                  
 43756                                  cntrycodepage_id: 
 43757 000045F7 0000                    	dw	0 	
 43758                                  
 43759                                  ;ENDIF ; CONFIGPROC
 43760                                  
 43761                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43762                                  ; (SYSINIT:5081h)
 43763                                  
 43764                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43765                                  ;ifdef	MULTI_CONFIG
 43766 000045F9 00                      newcmd:  db	0			; non-zero if non-std shell specified
 43767 000045FA 40                      tmplate: db	64                      ; must precede commnd
 43768                                  ;endif
 43769                                  
 43770                                  ;ifdef ROMEXEC
 43771                                  ;	db      7                       ; size of commnd line (excl. null)
 43772                                  ;commnd: db	"COMMAND",0
 43773                                  ;	db	56 dup (0)
 43774                                  ;else
 43775                                  	; 02/11/2022
 43776 000045FB 0C                      	db	12                      ; size of commnd line (excl. null)
 43777 000045FC 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 43777 00004605 434F4D00           
 43778                                  	;db	51 dup (0)
 43779 00004609 00<rep 33h>             	times	51 db 0
 43780                                  ;endif
 43781                                  
 43782                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43783                                  ;ifdef	MULTI_CONFIG
 43784 0000463C 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 43784 00004645 434F4D00           
 43785 00004649 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 43786 0000464D 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 43786 00004656 4D4D414E442E434F4D-
 43786 0000465F 00                 
 43787 00004660 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 43787 00004669 202F5000           
 43788 0000466D 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 43788 00004676 414E442E434F4D00   
 43789 0000467E 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 43789 00004687 5000               
 43790                                  def_swchr:	
 43791 00004689 00                      	 db	0			; default switchchar (referenced as command_line-1)
 43792                                  ;endif
 43793                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43794                                  command_line:
 43795 0000468A 022F50                  	db	2,"/P"			; default command.com args
 43796                                  	;db	125 dup (0)
 43797 0000468D 00<rep 7Dh>             	times	125 db 0
 43798                                  
 43799                                  pathstring:
 43800                                  	;db	64 dup (0)
 43801 0000470A 00<rep 40h>             	times	64 db 0
 43802                                  
 43803                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43804                                  ; (SYSINIT:51D3h)
 43805                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43806                                  ;%if 0
 43807                                  
 43808                                  dae_flag:
 43809 0000474A 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 43810                                  
 43811                                  ;ifdef	MULTI_CONFIG
 43812                                  
 43813                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 43814                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 43815                                  
 43816                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 43817                                  
 43818 0000474B 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 43819 0000474C 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 43820 0000474D 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 43821 0000474E 00                      bLastCol:	db      0               ; ending column on status line
 43822 0000474F 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 43823 00004750 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 43824                                                                          ; 2=disable default 2-second delay
 43825 00004751 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 43826 00004752 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 43827 00004754 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 43828 00004755 01                      bDefBlock:	db      1               ; default block #
 43829 00004756 00                      bMaxBlock:	db      0               ; maxmimum block #
 43830 00004757 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 43831 00004759 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 43832 0000475A 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 43833 0000475B 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 43834 00004765 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 43835 00004779 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 43836                                  
 43837 0000478D 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 43838 00004795 4D454E5500              szMenu:		db      "MENU",0
 43839 0000479A 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 43840                                  
 43841                                  ;endif	;MULTI_CONFIG
 43842                                  
 43843                                  	; 10/09/2023
 43844                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 43845                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 43846                                  
 43847                                  comtab:	 ; label byte
 43848                                  
 43849                                  ;            cmd len    command         cmd code
 43850                                  ;            -------    -------         --------
 43851                                  
 43852                                  ;ifdef MULTI_CONFIG
 43853 000047A1 015B5B                          db      1,      "[",            CONFIG_BEGIN
 43854                                  ;endif
 43855 000047A4 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 43856 000047AB 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 43857 000047B4 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 43858 000047BD 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 43859 000047C6 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 43860 000047CE 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43860 000047D7 474855             
 43861 000047DA 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 43862 000047DF 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43862 000047E8 50                 
 43863 000047E9 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 43864 000047EF 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 43865                                  ;ifdef MULTI_CONFIG
 43866 000047F6 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 43867                                  ;endif
 43868 000047FF 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 43869 00004808 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 43869 00004811 49474857           
 43870 00004815 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43870 0000481E 454C               
 43871                                  ;ifdef MULTI_CONFIG
 43872 00004820 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 43873 00004829 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 43873 00004832 5252               
 43874 00004834 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 43874 0000483D 554C5441           
 43875 00004841 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 43875 0000484A 45                 
 43876                                  ;endif
 43877 0000484B 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43877 00004854 434B4D             
 43878                                  ;ifdef MULTI_CONFIG
 43879 00004857 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 43880                                  ;endif
 43881 00004860 0352454D30                      db      3,      "REM",          CONFIG_REM
 43882                                  ;ifdef MULTI_CONFIG
 43883 00004865 0353455456                      db      3,      "SET",          CONFIG_SET
 43884                                  ;endif
 43885 0000486A 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 43886                                  ;if    STACKSW
 43887 00004871 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 43888                                  ;endif
 43889 00004879 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 43889 00004882 31                 
 43890 00004883 00                      	db	0
 43891                                  
 43892                                  ; 18/03/2025 - MiniDOS 1.0
 43893                                  %if 0
 43894                                  	; 10/09/2023
 43895                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h
 43896                                  	; 13/04/2024 - Retro DOS v5.0
 43897                                  	db	7,	"DOSDATA",	CONFIG_DOSDATA ; 'T'
 43898                                  	db	0
 43899                                  %endif
 43900                                  
 43901                                  ;%endif ; 02/11/2022
 43902                                  
 43903                                  ; 01/01/2023 - Retro DOS v4.2
 43904                                  %if 0
 43905                                  
 43906                                  comtab:
 43907                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43908                                  	; (SYSINIT:38EDh)
 43909                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 43910                                  	db      5,      "BREAK",        CONFIG_BREAK
 43911                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 43912                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43913                                  	db      5,      "FILES",        CONFIG_FILES
 43914                                  	db      4,      "FCBS",         CONFIG_FCBS
 43915                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43916                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43917                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43918                                  	db      6,      "STACKS",       CONFIG_STACKS
 43919                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 43920                                  	db      5,      "SHELL",        CONFIG_SHELL
 43921                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 43922                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 43923                                  	db      3,      "REM",          CONFIG_REM
 43924                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 43925                                  	db      3,      "DOS",          CONFIG_DOS
 43926                                  	db	0
 43927                                  
 43928                                  %endif
 43929                                  
 43930                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43931                                  ; (SYSINIT:530Ch)
 43932                                  
 43933                                  ; 13/04/2024 - Retro DOS v5.0
 43934                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:555Ah)
 43935                                  
 43936                                  deviceparameters:	
 43937                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 43938                                  devp.specialfunc:	; deviceparameters +
 43939 00004884 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 43940                                  devp.devtype:
 43941 00004885 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 43942                                  devp.devattr:
 43943 00004886 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 43944                                  devp.cylinders:
 43945 00004888 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 43946                                  
 43947                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 43948                                  
 43949                                  	;times	286	db 0
 43950                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 43951 0000488A 00                      	db	0
 43952                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 43953                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 43954 0000488B 0000                    	dw	0
 43955                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 43956 0000488D 00                      	db	0	
 43957 0000488E 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 43958 00004890 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 43959 00004891 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 43960                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 43961 00004893 0000                    	dw	0
 43962                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 43963 00004895 00                      	db	0
 43964 00004896 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 43965                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 43966 00004898 0000                    	dw	0
 43967                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 43968 0000489A 0000                    	dw	0	
 43969                                  
 43970                                  	; 13/04/2024 - Retro DOS v5.0
 43971                                  	; (PCDOS 7.1 IBMBIO.COM)
 43972 0000489C 00<rep 44h>             	times	68 db 0	; PCDOS 7.1 (FAT32 BPB)
 43973                                  	;;times	14 db 0	; MSDOS 6.21
 43974                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 43975                                  	;dw	0
 43976                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 43977                                  	;dw	0
 43978                                  	;times	6 db 0	
 43979                                  
 43980                                  devp.trktblents:
 43981 000048E0 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 43982                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 43983 000048E2 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 43984                                  			; 63*4 bytes
 43985                                  
 43986                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43987                                  ; (SYSINIT:5430h)
 43988                                  
 43989                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 43990                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:56B4h)
 43991                                  	
 43992 000049DE 0200                    hlim:	dw	2
 43993 000049E0 0900                    slim:	dw	9
 43994                                  
 43995 000049E2 00                      drive:	db	0
 43996                                  
 43997                                  switches:
 43998 000049E3 0000                    	dw	0
 43999                                  
 44000                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44001                                  ; (SYSINIT:5437h)
 44002                                  
 44003                                  ; the following are the recommended bpbs for the media that
 44004                                  ; we know of so far.
 44005                                  
 44006                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44007                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 44008                                  
 44009                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44010                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 44011                                  
 44012                                  ; 48 tpi diskettes
 44013                                  
 44014 000049E5 0002                    bpb48t:	dw	512
 44015 000049E7 02                      	db	2
 44016 000049E8 0100                    	dw	1
 44017 000049EA 02                      	db	2
 44018 000049EB 7000                    	dw	112
 44019 000049ED D002                    	dw	2*9*40 ; 720
 44020 000049EF FD                      	db	0FDh
 44021 000049F0 0200                    	dw	2
 44022 000049F2 0900                    	dw	9
 44023 000049F4 0200                    	dw	2
 44024 000049F6 00000000                	dd	0
 44025 000049FA 00000000                        dd      0
 44026                                  	; 27/12/2023
 44027 000049FE 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44028 00004A1A 90                      	db	90h	
 44029                                  
 44030                                  ; 96tpi diskettes
 44031                                  
 44032 00004A1B 0002                    bpb96t:	dw	512
 44033 00004A1D 01                      	db	1
 44034 00004A1E 0100                    	dw	1
 44035 00004A20 02                      	db	2
 44036 00004A21 E000                    	dw	224
 44037 00004A23 6009                    	dw	2*15*80 ; 2400
 44038 00004A25 F9                      	db	0F9h
 44039 00004A26 0700                    	dw	7
 44040 00004A28 0F00                    	dw	15
 44041 00004A2A 0200                    	dw	2
 44042 00004A2C 00000000                	dd	0
 44043 00004A30 00000000                        dd      0
 44044                                  	; 27/12/2023
 44045 00004A34 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44046 00004A50 90                      	db	90h	
 44047                                  
 44048                                  ; 3 1/2 inch diskette bpb
 44049                                  
 44050 00004A51 0002                    bpb35:	dw	512
 44051 00004A53 02                      	db	2
 44052 00004A54 0100                    	dw	1
 44053 00004A56 02                      	db	2
 44054 00004A57 7000                    	dw	112
 44055 00004A59 A005                    	dw	2*9*80 ; 1440
 44056 00004A5B F9                      	db	0F9h
 44057 00004A5C 0300                    	dw	3
 44058 00004A5E 0900                    	dw	9
 44059 00004A60 0200                    	dw	2
 44060 00004A62 00000000                	dd	0
 44061 00004A66 00000000                        dd      0
 44062                                  	; 27/12/2023
 44063 00004A6A 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44064 00004A86 90                      	db	90h
 44065                                        
 44066 00004A87 0002                    bpb35h:	dw	512
 44067 00004A89 01                      	db	1
 44068 00004A8A 0100                    	dw	1
 44069 00004A8C 02                      	db	2
 44070 00004A8D E000                    	dw	224
 44071 00004A8F 400B                    	dw	2*18*80 ; 2880
 44072 00004A91 F0                      	db	0F0h
 44073 00004A92 0900                    	dw	9
 44074 00004A94 1200                    	dw	18
 44075 00004A96 0200                    	dw	2
 44076 00004A98 00000000                	dd	0
 44077 00004A9C 00000000                        dd      0
 44078                                  	; 27/12/2023
 44079 00004AA0 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44080 00004ABC 90                      	db	90h
 44081                                  
 44082                                  ; m037 - BEGIN
 44083                                  
 44084 00004ABD 0002                    bpb288:	dw	512
 44085 00004ABF 02                      	db	2
 44086 00004AC0 0100                    	dw	1
 44087 00004AC2 02                      	db	2
 44088 00004AC3 F000                    	dw	240
 44089 00004AC5 8016                    	dw	2*36*80 ; 5760
 44090 00004AC7 F0                      	db	0F0h
 44091 00004AC8 0900                    	dw	9
 44092 00004ACA 2400                    	dw	36
 44093 00004ACC 0200                    	dw	2
 44094 00004ACE 00000000                	dd	0
 44095 00004AD2 00000000                        dd      0
 44096                                  	; 27/12/2023
 44097 00004AD6 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44098 00004AF2 90                      	db	90h
 44099                                  
 44100                                  ; m037 - END
 44101                                  
 44102                                  ; 12/05/2019
 44103                                  
 44104 00004AF3 90                      align 2
 44105                                  
 44106                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44107                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 44108                                  
 44109                                  ; 13/04/2024 - Retro DOS v5.0
 44110                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5738h)
 44111                                  
 44112 00004AF4 [E549]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 44113 00004AF6 [1B4A]                  	    dw	    bpb96t		; 96tpi drives
 44114 00004AF8 [514A]                  	    dw	    bpb35		; 3.5" drives
 44115                                  ; the following are not supported, so default to 3.5" media layout
 44116 00004AFA [514A]                  	    dw	    bpb35		; not used - 8" drives
 44117 00004AFC [514A]                  	    dw	    bpb35		; not used - 8" drives
 44118 00004AFE [514A]                  	    dw	    bpb35		; not used - hard files
 44119 00004B00 [514A]                  	    dw	    bpb35		; not used - tape drives
 44120 00004B02 [874A]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 44121 00004B04 [514A]                  	    dw	    bpb35		; ERIMO				m037
 44122 00004B06 [BD4A]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 44123                                  
 44124                                  switchlist: 
 44125 00004B08 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 44126                                  
 44127                                  ;----------------------------------------------------------------------------
 44128                                  ; Messages
 44129                                  ;----------------------------------------------------------------------------
 44130                                  
 44131                                  ; 19/04/2019 - Retro DOS v4.0
 44132                                  
 44133                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 44134                                  
 44135 00004B11 00                      	db 	0
 44136                                  
 44137                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44138                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 44139                                  
 44140                                  ; 13/04/2024
 44141                                  ; MSDOS 6.22 IO.SYS - SYSINIT:559Eh
 44142                                  
 44143                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44144                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5756h
 44145                                  
 44146                                  badopm:
 44147 00004B12 0D0A                    	db	0Dh,0Ah 
 44148 00004B14 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 44148 00004B1D 7A656420636F6D6D61-
 44148 00004B26 6E6420696E20434F4E-
 44148 00004B2F 4649472E535953     
 44149                                  crlfm:
 44150 00004B36 0D0A24                  	db	0Dh,0Ah,'$'
 44151                                  badparm:
 44152 00004B39 0D0A                    	db	0Dh,0Ah
 44153 00004B3B 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 44153 00004B44 6E64206F7220706172-
 44153 00004B4D 616D6574657273202D-
 44153 00004B56 2024               
 44154                                  badsiz_pre:
 44155 00004B58 0D0A                    	db	0Dh,0Ah
 44156 00004B5A 536563746F72207369-     	db	'Sector size too large in file $'
 44156 00004B63 7A6520746F6F206C61-
 44156 00004B6C 72676520696E206669-
 44156 00004B75 6C652024           
 44157                                  badld_pre:
 44158 00004B79 0D0A                    	db	0Dh,0Ah
 44159 00004B7B 426164206F72206D69-     	db	'Bad or missing $'
 44159 00004B84 7373696E672024     
 44160                                  badcom:
 44161 00004B8B 436F6D6D616E642049-     	db	'Command Interpreter',0
 44161 00004B94 6E7465727072657465-
 44161 00004B9D 7200               
 44162                                  badcountry:
 44163 00004B9F 0D0A                    	db	0Dh,0Ah
 44164 00004BA1 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 44164 00004BAA 6F756E74727920636F-
 44164 00004BB3 6465206F7220636F64-
 44164 00004BBC 6520706167650D0A24 
 44165                                  badcountrycom:
 44166 00004BC5 0D0A                    	db	0Dh,0Ah
 44167 00004BC7 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 44167 00004BD0 434F554E5452592063-
 44167 00004BD9 6F6D6D616E640D0A24 
 44168                                  insufmemory:
 44169 00004BE2 0D0A                    	db	0Dh,0Ah
 44170 00004BE4 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 44170 00004BED 656E74206D656D6F72-
 44170 00004BF6 7920666F7220434F55-
 44170 00004BFF 4E5452592E53595320-
 44170 00004C08 66696C650D0A24     
 44171                                  badmem:
 44172 00004C0F 0D0A                    	db	0Dh,0Ah
 44173 00004C11 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 44173 00004C1A 74696F6E20746F6F20-
 44173 00004C23 6C6172676520666F72-
 44173 00004C2C 206D656D6F72790D0A-
 44173 00004C35 24                 
 44174                                  badblock:
 44175 00004C36 0D0A                    	db	0Dh,0Ah
 44176 00004C38 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 44176 00004C41 626C6F636B20646576-
 44176 00004C4A 696365730D0A24     
 44177                                  badstack:
 44178 00004C51 0D0A                    	db	0Dh,0Ah
 44179 00004C53 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 44179 00004C5C 5441434B2070617261-
 44179 00004C65 6D65746572730D0A24 
 44180                                  	; 18/12/2022
 44181                                  ;badorder:
 44182                                  	;db	0Dh,0Ah
 44183                                  	;db	'Incorrect order in CONFIG.SYS line $'
 44184                                  errorcmd:
 44185 00004C6E 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 44185 00004C77 434F4E4649472E5359-
 44185 00004C80 53206C696E652024   
 44186                                  
 44187                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44188                                  ; (SYSINIT:566Eh)
 44189                                  
 44190                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44191                                  ;%if 0
 44192                                  
 44193 00004C88 4F4E                    OnOff:	db	'ON'
 44194 00004C8A 4F4646                  OnOff2:	db	'OFF'
 44195                                  
 44196                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44197                                  	; (SYSINIT:5673h)
 44198                                  ;StartMsg:
 44199                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 44200                                  ;	db	0Ah,0
 44201                                  
 44202                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44203                                  	; (SYSINIT:58F7h)
 44204                                  StartMsg:
 44205 00004C8D 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 44205 00004C96 504320444F532E2E2E-
 44205 00004C9F 0D0A               
 44206 00004CA1 0A00                    	db	0Ah,0
 44207                                  
 44208                                  _$PauseMsg:
 44209                                  	; 17/12/2023
 44210                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 44211                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 44212 00004CA3 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 44212 00004CAC 206B657920746F2063-
 44212 00004CB5 6F6E74696E75652E2E-
 44212 00004CBE 2E0D0A24           
 44213                                  _$CleanMsg:
 44214                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44215                                  	; 17/12/2023
 44216 00004CC2 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44216 00004CCB 20627970617373696E-
 44216 00004CD4 6720796F757220434F-
 44216 00004CDD 4E4649472E53595320-
 44216 00004CE6 616E64204155544F45-
 44216 00004CEF 5845432E4241542066-
 44216 00004CF8 696C65732E0D0A24   
 44217                                  _$InterMsg:
 44218                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44219                                  	; 17/12/2023
 44220 00004D00 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44220 00004D09 6C6C2070726F6D7074-
 44220 00004D12 20796F7520746F2063-
 44220 00004D1B 6F6E6669726D206561-
 44220 00004D24 636820434F4E464947-
 44220 00004D2D 2E53595320636F6D6D-
 44220 00004D36 616E642E0D0A24     
 44221                                  _$MenuHeader:
 44222 00004D3D 0D0A                    	db	0Dh,0Ah
 44223                                  	; 17/12/2023
 44224                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 44225                                  	;db	'  '
 44226                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44227                                  	;db 	0Dh,0Ah,'$'
 44228                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 44229 00004D3F 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 44229 00004D48 372E31205374617274-
 44229 00004D51 7570204D656E750D0A 
 44230 00004D5A 2020                    	db	'  '
 44231 00004D5C CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44232 00004D73 0D0A24                  	db 	0Dh,0Ah,'$'
 44233                                  _$MenuPrmpt:
 44234 00004D76 2020456E7465722061-     	db	'  Enter a choice: $'
 44234 00004D7F 2063686F6963653A20-
 44234 00004D88 24                 
 44235                                  _$StatusLine:
 44236 00004D89 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 44236 00004D92 207374617274757020-
 44236 00004D9B 66696C65732046383D-
 44236 00004DA4 436F6E6669726D2065-
 44236 00004DAD 616368206C696E6520-
 44236 00004DB6 6F6620434F4E464947-
 44236 00004DBF 2E53595320         
 44237 00004DC4 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 44237 00004DCD 5845432E424154205B-
 44237 00004DD6 205D24             
 44238                                  _$InterPrmpt:
 44239                                  	;db	' [Y,N]?$'
 44240                                  	; 13/04/2024
 44241                                  	; 04/08/2023
 44242 00004DD9 205B592C4E2C455343-     	db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 44242 00004DE2 5D3F24             
 44243 00004DE5 59455324                _$YES:	db	'YES$'
 44244 00004DE9 4E4F2024                _$NO:	db	'NO $'
 44245                                  _$TimeOut:
 44246 00004DED 54696D652072656D61-     	db	'Time remaining: $'
 44246 00004DF6 696E696E673A2024   
 44247                                  badcomprmpt:
 44248                                  	;db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 44249                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 44250 00004DFE 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (for example, C:\COMMAND.COM)'
 44250 00004E07 72656374206E616D65-
 44250 00004E10 206F6620436F6D6D61-
 44250 00004E19 6E6420496E74657270-
 44250 00004E22 72657465722028666F-
 44250 00004E2B 72206578616D706C65-
 44250 00004E34 2C20433A5C434F4D4D-
 44250 00004E3D 414E442E434F4D29   
 44251 00004E45 0D0A24                  	db	0Dh,0Ah,'$'
 44252                                  _$AutoPrmpt:
 44253 00004E48 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 44253 00004E51 55544F455845432E42-
 44253 00004E5A 4154205B592C4E5D3F-
 44253 00004E63 24                 
 44254                                  
 44255                                  ;%endif ; 02/11/2022
 44256                                  
 44257                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44258                                  ; (SYSINIT:5840h)
 44259                                  
 44260                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44261                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 44262                                  
 44263                                  TooManyDrivesMsg:
 44264 00004E64 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 44264 00004E6D 4C6F676963616C2064-
 44264 00004E76 726976657320706173-
 44264 00004E7F 74205A3A2065786973-
 44264 00004E88 7420616E642077696C-
 44264 00004E91 6C2062652069676E6F-
 44264 00004E9A 7265640D0A24       
 44265                                  
 44266                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 44267                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 44268                                  	;db	7 dup(0)
 44269                                  
 44270                                  	;times	7 db 0
 44271                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44272                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 44273                                  	; 09/12/2022
 44274                                  	;times 4 db 0
 44275                                  
 44276                                  	; 08/04/2024 - Retro DOS v5.0
 44277                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 44278                                  baddblspace:
 44279 00004EA0 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 44279 00004EA9 73797374656D20636F-
 44279 00004EB2 6D706F6E656E742069-
 44279 00004EBB 73206E6F7420696E73-
 44279 00004EC4 74616C6C65640D0A24-
 44279 00004ECD 00                 
 44280                                  	;db	7 dup(0)
 44281                                  
 44282                                  ;----------------------------------------------------------------------------
 44283                                  		; 09/12/2022
 44284                                  		;db 0
 44285                                  
 44286                                  number3div	equ ($-SYSINIT$)
 44287                                  number3mod	equ (number3div % 16)
 44288                                  
 44289                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 44290 00004ECE 00<rep 2h>              		times (16-number3mod) db 0
 44291                                  %endif
 44292                                  
 44293                                  ;---------------------------------------------------------------------------- 
 44294                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 44295                                  ;---------------------------------------------------------------------------- 
 44296                                  
 44297                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 44298                                  
 44299                                  ;----------------------------------------------------------------------------
 44300                                  ; 20/04/2019 - Retro DOS v4.0
 44301                                  
 44302                                  ; 09/12/2022
 44303                                  ;
 44304                                  ;bss_start:
 44305                                  ;
 44306                                  ;ABSOLUTE bss_start
 44307                                  ;
 44308                                  ;alignb 16
 44309                                  
 44310                                  SI_end:  ; SI_end equ $
 44311                                  
 44312                                  ;----------------------------------------------------------------------------
 44313                                  
 44314                                  ;sysinitseg	ends
 44315                                  
 44316                                  ; ***************************************************************************
 44317                                  
 44318                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 44319                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 44320                                  
 44321                                  SYSINITSIZE	equ SI_end - SYSINIT$
 44322                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 44323                                  
 44324                                  ;----------------------------------------------------------------------------
 44325                                  ; End of Retro DOS v5.0 IBMBIO.COM (IO.SYS) source by Erdogan Tan (2023)
 44326                                  ;----------------------------------------------------------------------------
 44327                                  
 44328                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 44329                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 44330                                  ;----------------------------------------------------------------------------
 44331                                  ;----------------------------------------------------------------------------
 44332                                  
 44333                                  ; ----------------------------------------------------------------------------
 44334                                  ; START OF PCDOS 7.1 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 44335                                  ; ----------------------------------------------------------------------------
 44336                                  ; 02/10/2023 - Retro DOS v5.0
 44337                                  ; 03/03/2025 - MiniDOS v1.0
 44338                                  
 44339                                  ;MSDOS_BIN_OFFSET:
 44340                                  IBMDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 44341                                  		
 44342                                  		; 10/07/2024
 44343                                  		; 07/07/2024
 44344                                  		; 08/05/2024
 44345                                  		; 14/04/2024
 44346                                  		; 02/10/2023 - Retro DOS v5.0 - PCDOS 7.1 KERNEL
 44347                                  		;incbin	'IBMDOS7.BIN'
 44348                                  
 44349                                  		; 16/03/2025
 44350                                  		; 07/03/2025
 44351                                  		; 03/03/2025 - MiniDOS v1.0 - PCDOS 7.1 KERNEL
 44352 00004ED0 <bin 989Ch>             		incbin	'KERNEL.BIN'
 44353                                  
 44354                                  ; 28/09/2023	
 44355                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 44356                                  
 44357                                  align 2
 44358                                  
 44359                                  ; 21/12/2022
 44360                                  ;;END_OF_KERNEL:
 44361                                  ;END_OF_KERNEL equ $
 44362                                  
 44363                                  ; 28/09/2023
 44364                                  S3SIZE equ $-$$
 44365                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 44366                                  
 44367                                  ;=============================================================================
 44368                                  ;	END
 44369                                  ;=============================================================================
 44370                                  ; Retro DOS v5.0 by Erdogan Tan (Redevelopment of PC-DOS 7.1 KERNEL via NASM)
 44371                                  ; ------------------------------
 44372                                  ; APRIL 2024, ISTANBUL - TURKIYE.
